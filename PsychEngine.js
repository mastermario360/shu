/*
 howler.js v2.2.4 | (c) 2013-2020, James Simpson of GoldFire Studios | MIT License | howlerjs.com  Spatial Plugin  @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */
var $jscomp = $jscomp || {};
$jscomp.scope = {};
$jscomp.arrayIteratorImpl = function (ka) {
  var v = 0;
  return function () {
    return v < ka.length ? { done: !1, value: ka[v++] } : { done: !0 };
  };
};
$jscomp.arrayIterator = function (ka) {
  return { next: $jscomp.arrayIteratorImpl(ka) };
};
$jscomp.ASSUME_ES5 = !1;
$jscomp.ASSUME_NO_NATIVE_MAP = !1;
$jscomp.ASSUME_NO_NATIVE_SET = !1;
$jscomp.SIMPLE_FROUND_POLYFILL = !1;
$jscomp.defineProperty =
  $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties
    ? Object.defineProperty
    : function (ka, v, H) {
        ka != Array.prototype && ka != Object.prototype && (ka[v] = H.value);
      };
$jscomp.getGlobal = function (ka) {
  ka = [
    "object" == typeof window && window,
    "object" == typeof self && self,
    "object" == typeof global && global,
    ka,
  ];
  for (var v = 0; v < ka.length; ++v) {
    var H = ka[v];
    if (H && H.Math == Math) return H;
  }
  throw Error("Cannot find global object");
};
$jscomp.global = $jscomp.getGlobal(this);
$jscomp.SYMBOL_PREFIX = "jscomp_symbol_";
$jscomp.initSymbol = function () {
  $jscomp.initSymbol = function () {};
  $jscomp.global.Symbol || ($jscomp.global.Symbol = $jscomp.Symbol);
};
$jscomp.SymbolClass = function (ka, v) {
  this.$jscomp$symbol$id_ = ka;
  $jscomp.defineProperty(this, "description", {
    configurable: !0,
    writable: !0,
    value: v,
  });
};
$jscomp.SymbolClass.prototype.toString = function () {
  return this.$jscomp$symbol$id_;
};
$jscomp.Symbol = (function () {
  function ka(H) {
    if (this instanceof ka) throw new TypeError("Symbol is not a constructor");
    return new $jscomp.SymbolClass(
      $jscomp.SYMBOL_PREFIX + (H || "") + "_" + v++,
      H
    );
  }
  var v = 0;
  return ka;
})();
$jscomp.initSymbolIterator = function () {
  $jscomp.initSymbol();
  var ka = $jscomp.global.Symbol.iterator;
  ka ||
    (ka = $jscomp.global.Symbol.iterator =
      $jscomp.global.Symbol("Symbol.iterator"));
  "function" != typeof Array.prototype[ka] &&
    $jscomp.defineProperty(Array.prototype, ka, {
      configurable: !0,
      writable: !0,
      value: function () {
        return $jscomp.iteratorPrototype($jscomp.arrayIteratorImpl(this));
      },
    });
  $jscomp.initSymbolIterator = function () {};
};
$jscomp.initSymbolAsyncIterator = function () {
  $jscomp.initSymbol();
  var ka = $jscomp.global.Symbol.asyncIterator;
  ka ||
    (ka = $jscomp.global.Symbol.asyncIterator =
      $jscomp.global.Symbol("Symbol.asyncIterator"));
  $jscomp.initSymbolAsyncIterator = function () {};
};
$jscomp.iteratorPrototype = function (ka) {
  $jscomp.initSymbolIterator();
  ka = { next: ka };
  ka[$jscomp.global.Symbol.iterator] = function () {
    return this;
  };
  return ka;
};
$jscomp.iteratorFromArray = function (ka, v) {
  $jscomp.initSymbolIterator();
  ka instanceof String && (ka += "");
  var H = 0,
    L = {
      next: function () {
        if (H < ka.length) {
          var T = H++;
          return { value: v(T, ka[T]), done: !1 };
        }
        L.next = function () {
          return { done: !0, value: void 0 };
        };
        return L.next();
      },
    };
  L[Symbol.iterator] = function () {
    return L;
  };
  return L;
};
$jscomp.polyfill = function (ka, v, H, L) {
  if (v) {
    H = $jscomp.global;
    ka = ka.split(".");
    for (L = 0; L < ka.length - 1; L++) {
      var T = ka[L];
      T in H || (H[T] = {});
      H = H[T];
    }
    ka = ka[ka.length - 1];
    L = H[ka];
    v = v(L);
    v != L &&
      null != v &&
      $jscomp.defineProperty(H, ka, {
        configurable: !0,
        writable: !0,
        value: v,
      });
  }
};
$jscomp.polyfill(
  "Array.prototype.keys",
  function (ka) {
    return ka
      ? ka
      : function () {
          return $jscomp.iteratorFromArray(this, function (v) {
            return v;
          });
        };
  },
  "es6",
  "es3"
);
$jscomp.checkStringArgs = function (ka, v, H) {
  if (null == ka)
    throw new TypeError(
      "The 'this' value for String.prototype." +
        H +
        " must not be null or undefined"
    );
  if (v instanceof RegExp)
    throw new TypeError(
      "First argument to String.prototype." +
        H +
        " must not be a regular expression"
    );
  return ka + "";
};
$jscomp.polyfill(
  "String.prototype.endsWith",
  function (ka) {
    return ka
      ? ka
      : function (v, H) {
          var L = $jscomp.checkStringArgs(this, v, "endsWith");
          v += "";
          void 0 === H && (H = L.length);
          H = Math.max(0, Math.min(H | 0, L.length));
          for (var T = v.length; 0 < T && 0 < H; )
            if (L[--H] != v[--T]) return !1;
          return 0 >= T;
        };
  },
  "es6",
  "es3"
);
$jscomp.polyfill(
  "String.prototype.startsWith",
  function (ka) {
    return ka
      ? ka
      : function (v, H) {
          var L = $jscomp.checkStringArgs(this, v, "startsWith");
          v += "";
          var T = L.length,
            ca = v.length;
          H = Math.max(0, Math.min(H | 0, L.length));
          for (var q = 0; q < ca && H < T; ) if (L[H++] != v[q++]) return !1;
          return q >= ca;
        };
  },
  "es6",
  "es3"
);
$jscomp.polyfill(
  "Array.prototype.fill",
  function (ka) {
    return ka
      ? ka
      : function (v, H, L) {
          var T = this.length || 0;
          0 > H && (H = Math.max(0, T + H));
          if (null == L || L > T) L = T;
          L = Number(L);
          0 > L && (L = Math.max(0, T + L));
          for (H = Number(H || 0); H < L; H++) this[H] = v;
          return this;
        };
  },
  "es6",
  "es3"
);
$jscomp.polyfill(
  "String.fromCodePoint",
  function (ka) {
    return ka
      ? ka
      : function (v) {
          for (var H = "", L = 0; L < arguments.length; L++) {
            var T = Number(arguments[L]);
            if (0 > T || 1114111 < T || T !== Math.floor(T))
              throw new RangeError("invalid_code_point " + T);
            65535 >= T
              ? (H += String.fromCharCode(T))
              : ((T -= 65536),
                (H += String.fromCharCode(((T >>> 10) & 1023) | 55296)),
                (H += String.fromCharCode((T & 1023) | 56320)));
          }
          return H;
        };
  },
  "es6",
  "es3"
);
$jscomp.polyfill(
  "Array.prototype.entries",
  function (ka) {
    return ka
      ? ka
      : function () {
          return $jscomp.iteratorFromArray(this, function (v, H) {
            return [v, H];
          });
        };
  },
  "es6",
  "es3"
);
(function (ka, v) {
  ka.lime = ka.lime || {};
  ka.lime.$scripts = ka.lime.$scripts || {};
  ka.lime.$scripts.PsychEngine = function (v, L) {
    (function (v, H) {
      function q(a, b) {
        a = Object.create(a);
        for (var c in b) a[c] = b[c];
        b.toString !== Object.prototype.toString && (a.toString = b.toString);
        return a;
      }
      function T(a) {
        return a instanceof Array ? new Vf(a) : a.iterator();
      }
      function n(a, b) {
        if (null == b) return null;
        null == b.__id__ && (b.__id__ = H.$haxeUID++);
        var c;
        null == a.hx__closures__
          ? (a.hx__closures__ = {})
          : (c = a.hx__closures__[b.__id__]);
        null == c && ((c = b.bind(a)), (a.hx__closures__[b.__id__] = c));
        return c;
      }
      v.lime = v.lime || {};
      var h = {},
        p = function () {
          return za.__string_rec(this, "");
        },
        w = w || {},
        x,
        U = function () {};
      h["flixel.util.IFlxDestroyable"] = U;
      U.__name__ = "flixel.util.IFlxDestroyable";
      U.__isInterface__ = !0;
      U.prototype = { __class__: U };
      var O = function () {
        this.flixelType = 0;
        this.active = this.visible = this.alive = this.exists = !0;
        this.ID = O.idEnumerator++;
      };
      h["flixel.FlxBasic"] = O;
      O.__name__ = "flixel.FlxBasic";
      O.__interfaces__ = [U];
      O.prototype = {
        destroy: function () {
          this.set_exists(!1);
          this._cameras = null;
        },
        kill: function () {
          this.set_alive(!1);
          this.set_exists(!1);
        },
        revive: function () {
          this.set_alive(!0);
          this.set_exists(!0);
        },
        update: function (a) {},
        draw: function () {},
        set_visible: function (a) {
          return (this.visible = a);
        },
        set_active: function (a) {
          return (this.active = a);
        },
        set_exists: function (a) {
          return (this.exists = a);
        },
        set_alive: function (a) {
          return (this.alive = a);
        },
        get_camera: function () {
          return null == this._cameras || 0 == this._cameras.length
            ? Ob._defaultCameras[0]
            : this._cameras[0];
        },
        set_camera: function (a) {
          null == this._cameras
            ? (this._cameras = [a])
            : (this._cameras[0] = a);
          return a;
        },
        get_cameras: function () {
          return null == this._cameras ? Ob._defaultCameras : this._cameras;
        },
        set_cameras: function (a) {
          return (this._cameras = a);
        },
        __class__: O,
        __properties__: {
          set_cameras: "set_cameras",
          get_cameras: "get_cameras",
          set_camera: "set_camera",
          get_camera: "get_camera",
          set_exists: "set_exists",
          set_alive: "set_alive",
          set_visible: "set_visible",
          set_active: "set_active",
        },
      };
      var Ha = function () {};
      h["flixel.util.IFlxPooled"] = Ha;
      Ha.__name__ = "flixel.util.IFlxPooled";
      Ha.__isInterface__ = !0;
      Ha.__interfaces__ = [U];
      Ha.prototype = { __class__: Ha };
      var Pb = function () {};
      h["flixel.util.IFlxPool"] = Pb;
      Pb.__name__ = "flixel.util.IFlxPool";
      Pb.__isInterface__ = !0;
      var L = function (a) {
        this._count = 0;
        this._pool = [];
        this._constructor = a;
      };
      h["flixel.util.FlxPool"] = L;
      L.__name__ = "flixel.util.FlxPool";
      L.__interfaces__ = [Pb];
      L.prototype = {
        get: function () {
          return 0 == this._count
            ? this._constructor()
            : this._pool[--this._count];
        },
        put: function (a) {
          if (null != a) {
            var b = this._pool.indexOf(a);
            if (-1 == b || b >= this._count)
              a.destroy(), (this._pool[this._count++] = a);
          }
        },
        putUnsafe: function (a) {
          null != a && (a.destroy(), (this._pool[this._count++] = a));
        },
        __class__: L,
      };
      var Ga = function (a, b, c, d) {
        null == d && (d = 0);
        null == c && (c = 0);
        null == b && (b = 0);
        null == a && (a = 0);
        this._weak = this._inPool = !1;
        null == d && (d = 0);
        null == c && (c = 0);
        null == b && (b = 0);
        null == a && (a = 0);
        this.x = a;
        this.y = b;
        this.width = c;
        this.height = d;
      };
      h["flixel.math.FlxRect"] = Ga;
      Ga.__name__ = "flixel.math.FlxRect";
      Ga.__interfaces__ = [Ha];
      Ga.prototype = {
        put: function () {
          this._inPool ||
            ((this._inPool = !0), (this._weak = !1), Ga._pool.putUnsafe(this));
        },
        getRotatedBounds: function (a, b, c) {
          if (null == b) {
            var d = (b = 0);
            null == d && (d = 0);
            null == b && (b = 0);
            null == d && (d = 0);
            null == b && (b = 0);
            null == d && (d = 0);
            null == b && (b = 0);
            b = ba.pool.get().set(b, d);
            b._inPool = !1;
            b._weak = !0;
          }
          if (null == c) {
            c = Ga._pool.get();
            var e = (d = 0),
              f = 0,
              k = 0;
            null == k && (k = 0);
            null == f && (f = 0);
            null == e && (e = 0);
            null == d && (d = 0);
            c.x = d;
            c.y = e;
            c.width = f;
            c.height = k;
            c._inPool = !1;
          }
          a %= 360;
          if (0 == a)
            return (
              b._weak && b.put(),
              (d = this.x),
              (e = this.y),
              (f = this.width),
              (k = this.height),
              null == k && (k = 0),
              null == f && (f = 0),
              null == e && (e = 0),
              null == d && (d = 0),
              (c.x = d),
              (c.y = e),
              (c.width = f),
              (c.height = k),
              c
            );
          0 > a && (a += 360);
          e = (Math.PI / 180) * a;
          d = Math.cos(e);
          e = Math.sin(e);
          f = -b.x;
          k = -b.y;
          var r = -b.x + this.width,
            l = -b.y + this.height;
          90 > a
            ? ((c.x = this.x + b.x + d * f - e * l),
              (c.y = this.y + b.y + e * f + d * k))
            : 180 > a
            ? ((c.x = this.x + b.x + d * r - e * l),
              (c.y = this.y + b.y + e * f + d * l))
            : 270 > a
            ? ((c.x = this.x + b.x + d * r - e * k),
              (c.y = this.y + b.y + e * r + d * l))
            : ((c.x = this.x + b.x + d * f - e * k),
              (c.y = this.y + b.y + e * r + d * k));
          a = Math.abs(d * this.height) + Math.abs(e * this.width);
          c.width = Math.abs(d * this.width) + Math.abs(e * this.height);
          c.height = a;
          b._weak && b.put();
          return c;
        },
        destroy: function () {},
        intersection: function (a, b) {
          if (null == b) {
            b = Ga._pool.get();
            var c = 0,
              d = 0,
              e = 0,
              f = 0;
            null == f && (f = 0);
            null == e && (e = 0);
            null == d && (d = 0);
            null == c && (c = 0);
            b.x = c;
            b.y = d;
            b.width = e;
            b.height = f;
            b._inPool = !1;
          }
          e = this.x < a.x ? a.x : this.x;
          var k =
            this.x + this.width > a.x + a.width
              ? a.x + a.width
              : this.x + this.width;
          if (k <= e)
            return (
              a._weak &&
                !a._inPool &&
                ((a._inPool = !0), (a._weak = !1), Ga._pool.putUnsafe(a)),
              b
            );
          f = this.y < a.y ? a.y : this.y;
          var r =
            this.y + this.height > a.y + a.height
              ? a.y + a.height
              : this.y + this.height;
          if (r <= f)
            return (
              a._weak &&
                !a._inPool &&
                ((a._inPool = !0), (a._weak = !1), Ga._pool.putUnsafe(a)),
              b
            );
          a._weak &&
            !a._inPool &&
            ((a._inPool = !0), (a._weak = !1), Ga._pool.putUnsafe(a));
          c = e;
          d = f;
          e = k - e;
          f = r - f;
          null == f && (f = 0);
          null == e && (e = 0);
          null == d && (d = 0);
          null == c && (c = 0);
          b.x = c;
          b.y = d;
          b.width = e;
          b.height = f;
          return b;
        },
        __class__: Ga,
      };
      var ca = function (a, b, c, d) {
        null == d && (d = 0);
        null == c && (c = 0);
        null == b && (b = 0);
        null == a && (a = 0);
        var e = Ga._pool.get(),
          f = 0,
          k = 0,
          r = 0,
          l = 0;
        null == l && (l = 0);
        null == r && (r = 0);
        null == k && (k = 0);
        null == f && (f = 0);
        e.x = f;
        e.y = k;
        e.width = r;
        e.height = l;
        e._inPool = !1;
        this._rect = e;
        f = e = 0;
        null == f && (f = 0);
        null == e && (e = 0);
        e = ba.pool.get().set(e, f);
        e._inPool = !1;
        this._point = e;
        this.path = null;
        this.allowCollisions = 4369;
        this.touching = this.wasTouching = 0;
        this.maxAngular = 1e4;
        this.elasticity =
          this.angularVelocity =
          this.angularAcceleration =
          this.angularDrag =
            0;
        this.immovable = !1;
        this.moves = !0;
        this.angle = 0;
        this.pixelPerfectPosition = !0;
        this.x = this.y = 0;
        O.call(this);
        this.set_x(a);
        this.set_y(b);
        this.set_width(c);
        this.set_height(d);
        this.initVars();
      };
      h["flixel.FlxObject"] = ca;
      ca.__name__ = "flixel.FlxObject";
      ca.__super__ = O;
      ca.prototype = q(O.prototype, {
        initVars: function () {
          this.flixelType = 1;
          var a = this.x,
            b = this.y;
          null == b && (b = 0);
          null == a && (a = 0);
          null == b && (b = 0);
          null == a && (a = 0);
          b = ba.pool.get().set(a, b);
          b._inPool = !1;
          this.last = b;
          b = a = 1;
          null == b && (b = 0);
          null == a && (a = 0);
          null == b && (b = 0);
          null == a && (a = 0);
          b = ba.pool.get().set(a, b);
          b._inPool = !1;
          this.scrollFactor = b;
          this.pixelPerfectPosition = ca.defaultPixelPerfectPosition;
          b = a = 0;
          null == b && (b = 0);
          null == a && (a = 0);
          b = ba.pool.get().set(a, b);
          b._inPool = !1;
          this.velocity = b;
          b = a = 0;
          null == b && (b = 0);
          null == a && (a = 0);
          b = ba.pool.get().set(a, b);
          b._inPool = !1;
          this.acceleration = b;
          b = a = 0;
          null == b && (b = 0);
          null == a && (a = 0);
          b = ba.pool.get().set(a, b);
          b._inPool = !1;
          this.drag = b;
          b = a = 1e4;
          null == b && (b = 0);
          null == a && (a = 0);
          null == b && (b = 0);
          null == a && (a = 0);
          b = ba.pool.get().set(a, b);
          b._inPool = !1;
          this.maxVelocity = b;
        },
        destroy: function () {
          O.prototype.destroy.call(this);
          this.velocity = V.put(this.velocity);
          this.acceleration = V.put(this.acceleration);
          this.drag = V.put(this.drag);
          this.maxVelocity = V.put(this.maxVelocity);
          this.scrollFactor = V.put(this.scrollFactor);
          this.last = V.put(this.last);
          this._point = V.put(this._point);
          this._rect = V.put(this._rect);
        },
        update: function (a) {
          var b = this.last,
            c = this.x,
            d = this.y;
          null == d && (d = 0);
          null == c && (c = 0);
          b.set_x(c);
          b.set_y(d);
          null != this.path && this.path.active && this.path.update(a);
          this.moves && this.updateMotion(a);
          this.wasTouching = this.touching;
          this.touching = 0;
        },
        updateMotion: function (a) {
          var b =
            0.5 *
            (Rj.computeVelocity(
              this.angularVelocity,
              this.angularAcceleration,
              this.angularDrag,
              this.maxAngular,
              a
            ) -
              this.angularVelocity);
          this.angularVelocity += b;
          this.set_angle(this.angle + this.angularVelocity * a);
          this.angularVelocity += b;
          b =
            0.5 *
            (Rj.computeVelocity(
              this.velocity.x,
              this.acceleration.x,
              this.drag.x,
              this.maxVelocity.x,
              a
            ) -
              this.velocity.x);
          this.velocity.set_x(this.velocity.x + b);
          var c = this.velocity.x * a;
          this.velocity.set_x(this.velocity.x + b);
          this.set_x(this.x + c);
          b =
            0.5 *
            (Rj.computeVelocity(
              this.velocity.y,
              this.acceleration.y,
              this.drag.y,
              this.maxVelocity.y,
              a
            ) -
              this.velocity.y);
          this.velocity.set_y(this.velocity.y + b);
          c = this.velocity.y * a;
          this.velocity.set_y(this.velocity.y + b);
          this.set_y(this.y + c);
        },
        draw: function () {},
        overlaps: function (a, b, c) {
          null == b && (b = !1);
          var d = ma.resolveGroup(a);
          if (null != d) {
            var e = n(this, this.overlapsCallback),
              f = b,
              k = c;
            return d.any(function (a) {
              return e(a, 0, 0, f, k);
            });
          }
          if (3 == a.flixelType) return a.overlaps(this, b, c);
          if (!b)
            return a.x + a.get_width() > this.x &&
              a.x < this.x + this.get_width() &&
              a.y + a.get_height() > this.y
              ? a.y < this.y + this.get_height()
              : !1;
          null == c && (c = g.camera);
          b = a.getScreenPosition(null, c);
          this.getScreenPosition(this._point, c);
          return b.x + a.get_width() > this._point.x &&
            b.x < this._point.x + this.get_width() &&
            b.y + a.get_height() > this._point.y
            ? b.y < this._point.y + this.get_height()
            : !1;
        },
        overlapsCallback: function (a, b, c, d, e) {
          return this.overlaps(a, d, e);
        },
        overlapsPoint: function (a, b, c) {
          null == b && (b = !1);
          if (!b)
            return a.x >= this.x &&
              a.x < this.x + this.get_width() &&
              a.y >= this.y
              ? a.y < this.y + this.get_height()
              : !1;
          null == c && (c = g.camera);
          b = a.x - c.scroll.x;
          var d = a.y - c.scroll.y;
          this.getScreenPosition(this._point, c);
          a._weak && a.put();
          return b >= this._point.x &&
            b < this._point.x + this.get_width() &&
            d >= this._point.y
            ? d < this._point.y + this.get_height()
            : !1;
        },
        getScreenPosition: function (a, b) {
          if (null == a) {
            var c = 0,
              d = 0;
            null == d && (d = 0);
            null == c && (c = 0);
            a = ba.pool.get().set(c, d);
            a._inPool = !1;
          }
          null == b && (b = g.camera);
          c = this.x;
          d = this.y;
          null == d && (d = 0);
          null == c && (c = 0);
          a.set_x(c);
          a.set_y(d);
          this.pixelPerfectPosition &&
            (a.set_x(Math.floor(a.x)), a.set_y(Math.floor(a.y)));
          c = b.scroll.x * this.scrollFactor.x;
          d = b.scroll.y * this.scrollFactor.y;
          null == d && (d = 0);
          null == c && (c = 0);
          a.set_x(a.x - c);
          a.set_y(a.y - d);
          return a;
        },
        getPosition: function (a) {
          if (null == a) {
            var b = 0,
              c = 0;
            null == c && (c = 0);
            null == b && (b = 0);
            a = ba.pool.get().set(b, c);
            a._inPool = !1;
          }
          b = this.x;
          c = this.y;
          null == c && (c = 0);
          null == b && (b = 0);
          a.set_x(b);
          a.set_y(c);
          return a;
        },
        getMidpoint: function (a) {
          if (null == a) {
            var b = 0,
              c = 0;
            null == c && (c = 0);
            null == b && (b = 0);
            a = ba.pool.get().set(b, c);
            a._inPool = !1;
          }
          b = this.x + 0.5 * this.get_width();
          c = this.y + 0.5 * this.get_height();
          null == c && (c = 0);
          null == b && (b = 0);
          a.set_x(b);
          a.set_y(c);
          return a;
        },
        reset: function (a, b) {
          this.wasTouching = this.touching = 0;
          this.setPosition(a, b);
          var c = this.last;
          a = this.x;
          b = this.y;
          null == b && (b = 0);
          null == a && (a = 0);
          c.set_x(a);
          c.set_y(b);
          c = this.velocity;
          c.set_x(0);
          c.set_y(0);
          this.revive();
        },
        isOnScreen: function (a) {
          null == a && (a = g.camera);
          this.getScreenPosition(this._point, a);
          var b = this._point,
            c = this.get_width(),
            d = this.get_height();
          null == d && (d = 0);
          null == c && (c = 0);
          a =
            b.x + c > a.viewMarginX &&
            b.x < a.width - a.viewMarginX &&
            b.y + d > a.viewMarginY &&
            b.y < a.height - a.viewMarginY;
          b._weak && b.put();
          return a;
        },
        isPixelPerfectRender: function (a) {
          null == a && (a = g.camera);
          return null == this.pixelPerfectRender
            ? a.pixelPerfectRender
            : this.pixelPerfectRender;
        },
        setPosition: function (a, b) {
          null == b && (b = 0);
          null == a && (a = 0);
          this.set_x(a);
          this.set_y(b);
        },
        toString: function () {
          var a = this.x,
            b = Ic._pool.get();
          b.label = "x";
          b.value = a;
          a = this.y;
          var c = Ic._pool.get();
          c.label = "y";
          c.value = a;
          a = this.get_width();
          var d = Ic._pool.get();
          d.label = "w";
          d.value = a;
          a = this.get_height();
          var e = Ic._pool.get();
          e.label = "h";
          e.value = a;
          a = this.visible;
          var f = Ic._pool.get();
          f.label = "visible";
          f.value = a;
          a = this.velocity;
          var k = Ic._pool.get();
          k.label = "velocity";
          k.value = a;
          return Bb.getDebugString([b, c, d, e, f, k]);
        },
        set_x: function (a) {
          return (this.x = a);
        },
        set_y: function (a) {
          return (this.y = a);
        },
        set_width: function (a) {
          return (this.width = a);
        },
        set_height: function (a) {
          return (this.height = a);
        },
        get_width: function () {
          return this.width;
        },
        get_height: function () {
          return this.height;
        },
        set_solid: function (a) {
          this.set_allowCollisions(a ? 4369 : 0);
          return a;
        },
        set_angle: function (a) {
          return (this.angle = a);
        },
        set_moves: function (a) {
          return (this.moves = a);
        },
        set_immovable: function (a) {
          return (this.immovable = a);
        },
        set_allowCollisions: function (a) {
          return (this.allowCollisions = a);
        },
        __class__: ca,
        __properties__: q(O.prototype.__properties__, {
          set_solid: "set_solid",
          set_allowCollisions: "set_allowCollisions",
          set_immovable: "set_immovable",
          set_moves: "set_moves",
          set_angle: "set_angle",
          set_height: "set_height",
          get_height: "get_height",
          set_width: "set_width",
          get_width: "get_width",
          set_y: "set_y",
          set_x: "set_x",
        }),
      });
      var F = function (a, b, c) {
        null == b && (b = 0);
        null == a && (a = 0);
        this._angleChanged = !0;
        this._cosAngle = 1;
        this._sinAngle = 0;
        this._facingHorizontalMult = this._facingVerticalMult = 1;
        this.useColorTransform = !1;
        this.color = 16777215;
        this.flipX = this.flipY = !1;
        this.alpha = 1;
        this.frameWidth = this.frameHeight = this.bakedRotationAngle = 0;
        this.dirty = !0;
        this.antialiasing = F.defaultAntialiasing;
        this.useFramePixels = !0;
        ca.call(this, a, b);
        this.set_useFramePixels(g.renderBlit);
        null != c && this.loadGraphic(c);
      };
      h["flixel.FlxSprite"] = F;
      F.__name__ = "flixel.FlxSprite";
      F.__super__ = ca;
      F.prototype = q(ca.prototype, {
        initVars: function () {
          ca.prototype.initVars.call(this);
          this.animation = new Sj(this);
          this._flashPoint = new gb();
          this._flashRect = new ha();
          this._flashRect2 = new ha();
          this._flashPointZero = new gb();
          var a = 0,
            b = 0;
          null == b && (b = 0);
          null == a && (a = 0);
          b = ba.pool.get().set(a, b);
          b._inPool = !1;
          this.offset = b;
          b = a = 0;
          null == b && (b = 0);
          null == a && (a = 0);
          b = ba.pool.get().set(a, b);
          b._inPool = !1;
          this.origin = b;
          b = a = 1;
          null == b && (b = 0);
          null == a && (a = 0);
          null == b && (b = 0);
          null == a && (a = 0);
          b = ba.pool.get().set(a, b);
          b._inPool = !1;
          this.scale = b;
          b = a = 0;
          null == b && (b = 0);
          null == a && (a = 0);
          b = ba.pool.get().set(a, b);
          b._inPool = !1;
          this._halfSize = b;
          this._matrix = new kh();
          this.colorTransform = new Qb();
          this._scaledOrigin = new ba(0, 0);
        },
        destroy: function () {
          ca.prototype.destroy.call(this);
          this.animation = V.destroy(this.animation);
          this.offset = V.put(this.offset);
          this.origin = V.put(this.origin);
          this.scale = V.put(this.scale);
          this._halfSize = V.put(this._halfSize);
          this._scaledOrigin = V.put(this._scaledOrigin);
          this.framePixels = V.dispose(this.framePixels);
          this.colorTransform =
            this._matrix =
            this._flashPointZero =
            this._flashRect2 =
            this._flashRect =
            this._flashPoint =
              null;
          this.set_blend(null);
          this.set_frames(null);
          this.set_graphic(null);
          this._frame = V.destroy(this._frame);
          this._frameGraphic = V.destroy(this._frameGraphic);
          this.shader = null;
        },
        loadGraphicFromSprite: function (a) {
          this.set_frames(a.frames);
          this.bakedRotationAngle = a.bakedRotationAngle;
          0 < this.bakedRotationAngle &&
            (this.set_width(a.get_width()),
            this.set_height(a.get_height()),
            this.centerOffsets());
          this.set_antialiasing(a.antialiasing);
          this.animation.copyFrom(a.animation);
          this.graphicLoaded();
          this.set_clipRect(a.clipRect);
          return this;
        },
        loadGraphic: function (a, b, c, d, e, f) {
          null == e && (e = !1);
          null == d && (d = 0);
          null == c && (c = 0);
          null == b && (b = !1);
          a = g.bitmap.add(a, e, f);
          if (null == a) return this;
          0 == c
            ? ((c = b ? a.height : a.width), c > a.width && (c = a.width))
            : c > a.width &&
              g.log.advanced(
                "frameWidth:" +
                  c +
                  " is larger than the graphic's width:" +
                  a.width,
                Ja.WARNING,
                !0
              );
          0 == d
            ? ((d = b ? c : a.height), d > a.height && (d = a.height))
            : d > a.height &&
              g.log.advanced(
                "frameHeight:" +
                  d +
                  " is larger than the graphic's height:" +
                  a.height,
                Ja.WARNING,
                !0
              );
          b
            ? ((b = c),
              null == d && (d = 0),
              null == b && (b = 0),
              null == d && (d = 0),
              null == b && (b = 0),
              (d = ba.pool.get().set(b, d)),
              (d._inPool = !1),
              this.set_frames(Gg.fromGraphic(a, d)))
            : this.set_frames(a.get_imageFrame());
          return this;
        },
        makeGraphic: function (a, b, c, d, e) {
          null == d && (d = !1);
          null == c && (c = -1);
          a = g.bitmap.create(a, b, c, d, e);
          this.set_frames(a.get_imageFrame());
          return this;
        },
        graphicLoaded: function () {},
        setGraphicSize: function (a, b) {
          null == b && (b = 0);
          null == a && (a = 0);
          if (!(0 >= a && 0 >= b)) {
            var c = a / this.frameWidth,
              d = b / this.frameHeight,
              e = this.scale,
              f = c,
              k = d;
            null == k && (k = 0);
            null == f && (f = 0);
            e.set_x(f);
            e.set_y(k);
            0 >= a ? this.scale.set_x(d) : 0 >= b && this.scale.set_y(c);
          }
        },
        updateHitbox: function () {
          this.set_width(Math.abs(this.scale.x) * this.frameWidth);
          this.set_height(Math.abs(this.scale.y) * this.frameHeight);
          var a = this.offset,
            b = -0.5 * (this.get_width() - this.frameWidth),
            c = -0.5 * (this.get_height() - this.frameHeight);
          null == c && (c = 0);
          null == b && (b = 0);
          a.set_x(b);
          a.set_y(c);
          a = this.origin;
          b = 0.5 * this.frameWidth;
          c = 0.5 * this.frameHeight;
          null == c && (c = 0);
          null == b && (b = 0);
          a.set_x(b);
          a.set_y(c);
        },
        resetHelpers: function () {
          null != this.frame &&
            ((this.frameWidth = this.frame.sourceSize.x | 0),
            (this.frameHeight = this.frame.sourceSize.y | 0));
          var a = this._halfSize,
            b = 0.5 * this.frameWidth,
            c = 0.5 * this.frameHeight;
          null == c && (c = 0);
          null == b && (b = 0);
          a.set_x(b);
          a.set_y(c);
          this._flashRect.x = 0;
          this._flashRect.y = 0;
          this._flashRect.width = this.frameWidth;
          this._flashRect.height = this.frameHeight;
          this.set_width(this.frameWidth);
          this.set_height(this.frameHeight);
          this._flashRect2.x = 0;
          this._flashRect2.y = 0;
          null != this.graphic &&
            ((this._flashRect2.width = this.graphic.width),
            (this._flashRect2.height = this.graphic.height));
          a = this.origin;
          b = 0.5 * this.frameWidth;
          c = 0.5 * this.frameHeight;
          null == c && (c = 0);
          null == b && (b = 0);
          a.set_x(b);
          a.set_y(c);
          g.renderBlit && ((this.dirty = !0), this.updateFramePixels());
        },
        update: function (a) {
          ca.prototype.update.call(this, a);
          this.updateAnimation(a);
        },
        updateAnimation: function (a) {
          this.animation.update(a);
        },
        checkEmptyFrame: function () {
          null == this._frame &&
            this.loadGraphic("flixel/images/logo/default.png");
        },
        draw: function () {
          this.checkEmptyFrame();
          if (0 != this.alpha && 2 != this._frame.type) {
            this.dirty && this.calcFrame(this.useFramePixels);
            for (var a = 0, b = this.get_cameras(); a < b.length; ) {
              var c = b[a];
              ++a;
              c.visible &&
                c.exists &&
                this.isOnScreen(c) &&
                (this.isSimpleRender(c)
                  ? this.drawSimple(c)
                  : this.drawComplex(c));
            }
          }
        },
        drawSimple: function (a) {
          var b = this.getScreenPosition(this._point, a),
            c = this.offset,
            d = c.x,
            e = c.y;
          null == e && (e = 0);
          null == d && (d = 0);
          b.set_x(b.x - d);
          b.set_y(b.y - e);
          c._weak && c.put();
          this.isPixelPerfectRender(a) &&
            ((b = this._point),
            b.set_x(Math.floor(b.x)),
            b.set_y(Math.floor(b.y)));
          b = this._point;
          c = this._flashPoint;
          null == c && (c = new gb());
          c.x = b.x;
          c.y = b.y;
          a.copyPixels(
            this._frame,
            this.framePixels,
            this._flashRect,
            this._flashPoint,
            this.colorTransform,
            this.blend,
            this.antialiasing
          );
        },
        drawComplex: function (a) {
          var b = this.flipX != this._frame.flipX,
            c = this.flipY != this._frame.flipY;
          this._frame.prepareMatrix(
            this._matrix,
            0,
            null != this.animation._curAnim
              ? b != this.animation._curAnim.flipX
              : b,
            null != this.animation._curAnim
              ? c != this.animation._curAnim.flipY
              : c
          );
          this._matrix.translate(-this.origin.x, -this.origin.y);
          this._matrix.scale(this.scale.x, this.scale.y);
          if (
            0 >= this.bakedRotationAngle &&
            (this._angleChanged &&
              ((b = (Math.PI / 180) * this.angle),
              (this._sinAngle = Math.sin(b)),
              (this._cosAngle = Math.cos(b)),
              (this._angleChanged = !1)),
            0 != this.angle)
          ) {
            b = this._matrix;
            c = this._cosAngle;
            var d = this._sinAngle,
              e = b.a * c - b.b * d;
            b.b = b.a * d + b.b * c;
            b.a = e;
            e = b.c * c - b.d * d;
            b.d = b.c * d + b.d * c;
            b.c = e;
            e = b.tx * c - b.ty * d;
            b.ty = b.tx * d + b.ty * c;
            b.tx = e;
          }
          b = this.getScreenPosition(this._point, a);
          c = this.offset;
          d = c.x;
          e = c.y;
          null == e && (e = 0);
          null == d && (d = 0);
          b.set_x(b.x - d);
          b.set_y(b.y - e);
          c._weak && c.put();
          b = this._point;
          d = this.origin.x;
          e = this.origin.y;
          null == e && (e = 0);
          null == d && (d = 0);
          b.set_x(b.x + d);
          b.set_y(b.y + e);
          this._matrix.translate(this._point.x, this._point.y);
          this.isPixelPerfectRender(a) &&
            ((this._matrix.tx = Math.floor(this._matrix.tx)),
            (this._matrix.ty = Math.floor(this._matrix.ty)));
          a.drawPixels(
            this._frame,
            this.framePixels,
            this._matrix,
            this.colorTransform,
            this.blend,
            this.antialiasing,
            this.shader
          );
        },
        stamp: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = 0);
          a.drawFrame();
          if (null == this.graphic || null == a.graphic)
            throw N.thrown(
              "Cannot stamp to or from a FlxSprite with no graphics."
            );
          var d = a.framePixels;
          this.isSimpleRenderBlit()
            ? ((this._flashPoint.x = b + this.frame.frame.x),
              (this._flashPoint.y = c + this.frame.frame.y),
              (this._flashRect2.width = d.width),
              (this._flashRect2.height = d.height),
              this.graphic.bitmap.copyPixels(
                d,
                this._flashRect2,
                this._flashPoint,
                null,
                null,
                !0
              ),
              (this._flashRect2.width = this.graphic.bitmap.width),
              (this._flashRect2.height = this.graphic.bitmap.height))
            : (this._matrix.identity(),
              this._matrix.translate(-a.origin.x, -a.origin.y),
              this._matrix.scale(a.scale.x, a.scale.y),
              0 != a.angle && this._matrix.rotate((Math.PI / 180) * a.angle),
              this._matrix.translate(
                b + this.frame.frame.x + a.origin.x,
                c + this.frame.frame.y + a.origin.y
              ),
              this.graphic.bitmap.draw(
                d,
                this._matrix,
                null,
                a.blend,
                null,
                a.antialiasing
              ));
          g.renderBlit && ((this.dirty = !0), this.calcFrame());
        },
        drawFrame: function (a) {
          null == a && (a = !1);
          if (g.renderBlit) {
            if (a || this.dirty) (this.dirty = !0), this.calcFrame();
          } else (this.dirty = !0), this.calcFrame(!0);
        },
        centerOffsets: function (a) {
          null == a && (a = !1);
          this.offset.set_x(0.5 * (this.frameWidth - this.get_width()));
          this.offset.set_y(0.5 * (this.frameHeight - this.get_height()));
          a &&
            (this.set_x(this.x + this.offset.x),
            this.set_y(this.y + this.offset.y));
        },
        updateColorTransform: function () {
          null != this.colorTransform &&
            ((this.useColorTransform =
              1 != this.alpha || 16777215 != this.color)
              ? of.setMultipliers(
                  this.colorTransform,
                  ((this.color >> 16) & 255) / 255,
                  ((this.color >> 8) & 255) / 255,
                  (this.color & 255) / 255,
                  this.alpha
                )
              : of.setMultipliers(this.colorTransform, 1, 1, 1, 1),
            (this.dirty = !0));
        },
        pixelsOverlapPoint: function (a, b, c) {
          null == b && (b = 255);
          a = this.getPixelAt(a, c);
          return null != a ? ((a >> 24) & 255) * this.alpha >= b : !1;
        },
        getPixelAt: function (a, b) {
          this.transformWorldToPixels(a, b, this._point);
          return 0 <= this._point.x &&
            this._point.x <= this.frameWidth &&
            0 <= this._point.y &&
            this._point.y <= this.frameHeight
            ? this.updateFramePixels().getPixel32(
                this._point.x | 0,
                this._point.y | 0
              )
            : null;
        },
        transformWorldToPixels: function (a, b, c) {
          null == b && (b = g.camera);
          var d = a.x - b.scroll.x,
            e = a.y - b.scroll.y;
          null == e && (e = 0);
          null == d && (d = 0);
          null == e && (e = 0);
          null == d && (d = 0);
          null == e && (e = 0);
          null == d && (d = 0);
          d = ba.pool.get().set(d, e);
          d._inPool = !1;
          d._weak = !0;
          a._weak && a.put();
          return this.transformScreenToPixels(d, b, c);
        },
        transformScreenToPixels: function (a, b, c) {
          c = this.getScreenPosition(c, b);
          b = a.x;
          var d = a.y;
          null == d && (d = 0);
          null == b && (b = 0);
          c.set_x(c.x - b);
          c.set_y(c.y - d);
          c.set_x(-1 * c.x);
          c.set_y(-1 * c.y);
          var e = this.offset;
          b = e.x;
          d = e.y;
          null == d && (d = 0);
          null == b && (b = 0);
          c.set_x(c.x + b);
          c.set_y(c.y + d);
          e._weak && e.put();
          e = this.origin;
          b = e.x;
          d = e.y;
          null == d && (d = 0);
          null == b && (b = 0);
          c.set_x(c.x - b);
          c.set_y(c.y - d);
          e._weak && e.put();
          b = 1 / this.scale.x;
          d = 1 / this.scale.y;
          null == d && (d = b);
          c.set_x(c.x * b);
          c.set_y(c.y * d);
          b =
            (Ei.get_radians(c) * (180 / Math.PI) - this.angle) *
            (Math.PI / 180);
          d = Math.sqrt(c.x * c.x + c.y * c.y);
          c.set_x(d * Math.cos(b));
          c.set_y(d * Math.sin(b));
          e = this.origin;
          b = e.x;
          d = e.y;
          null == d && (d = 0);
          null == b && (b = 0);
          c.set_x(c.x + b);
          c.set_y(c.y + d);
          e._weak && e.put();
          a._weak && a.put();
          return c;
        },
        calcFrame: function (a) {
          null == a && (a = !1);
          this.checkEmptyFrame();
          (g.renderTile && !a) || this.updateFramePixels();
        },
        updateFramePixels: function () {
          if (null == this._frame || !this.dirty) return this.framePixels;
          if (g.renderTile && null != this._frameGraphic)
            return (this.dirty = !1), this.framePixels;
          var a = this.flipX != this._frame.flipX;
          a =
            null != this.animation._curAnim
              ? a != this.animation._curAnim.flipX
              : a;
          var b = this.flipY != this._frame.flipY;
          b =
            null != this.animation._curAnim
              ? b != this.animation._curAnim.flipY
              : b;
          this.framePixels =
            a || b || 0 != this._frame.type
              ? this._frame.paintRotatedAndFlipped(
                  this.framePixels,
                  this._flashPointZero,
                  0,
                  a,
                  b,
                  !1,
                  !0
                )
              : this._frame.paint(
                  this.framePixels,
                  this._flashPointZero,
                  !1,
                  !0
                );
          this.useColorTransform &&
            this.framePixels.colorTransform(
              this._flashRect,
              this.colorTransform
            );
          g.renderTile &&
            this.useFramePixels &&
            ((this._frameGraphic = V.destroy(this._frameGraphic)),
            (this._frameGraphic = Xb.fromBitmapData(
              this.framePixels,
              !1,
              null,
              !1
            )),
            (this._frame = this._frameGraphic
              .get_imageFrame()
              .get_frame()
              .copyTo(this._frame)));
          this.dirty = !1;
          return this.framePixels;
        },
        getGraphicMidpoint: function (a) {
          if (null == a) {
            var b = 0,
              c = 0;
            null == c && (c = 0);
            null == b && (b = 0);
            a = ba.pool.get().set(b, c);
            a._inPool = !1;
          }
          b = this.x + 0.5 * this.frameWidth;
          c = this.y + 0.5 * this.frameHeight;
          null == c && (c = 0);
          null == b && (b = 0);
          a.set_x(b);
          a.set_y(c);
          return a;
        },
        isOnScreen: function (a) {
          null == a && (a = g.camera);
          var b = this.getScreenBounds(this._rect, a);
          a =
            b.x + b.width > a.viewMarginX &&
            b.x < a.width - a.viewMarginX &&
            b.y + b.height > a.viewMarginY &&
            b.y < a.height - a.viewMarginY;
          b._weak &&
            !b._inPool &&
            ((b._inPool = !0), (b._weak = !1), Ga._pool.putUnsafe(b));
          return a;
        },
        isSimpleRender: function (a) {
          return g.renderTile ? !1 : this.isSimpleRenderBlit(a);
        },
        isSimpleRenderBlit: function (a) {
          var b =
            (0 == this.angle || 0 < this.bakedRotationAngle) &&
            1 == this.scale.x &&
            1 == this.scale.y &&
            null == this.blend;
          return (b =
            b &&
            (null != a
              ? this.isPixelPerfectRender(a)
              : this.pixelPerfectRender));
        },
        getScreenBounds: function (a, b) {
          if (null == a) {
            a = Ga._pool.get();
            var c = 0,
              d = 0,
              e = 0,
              f = 0;
            null == f && (f = 0);
            null == e && (e = 0);
            null == d && (d = 0);
            null == c && (c = 0);
            a.x = c;
            a.y = d;
            a.width = e;
            a.height = f;
            a._inPool = !1;
          }
          null == b && (b = g.camera);
          a.x = this.x;
          a.y = this.y;
          this.pixelPerfectPosition &&
            ((a.x = Math.floor(a.x)),
            (a.y = Math.floor(a.y)),
            (a.width = Math.floor(a.width)),
            (a.height = Math.floor(a.height)));
          f = this._scaledOrigin;
          c = this.origin.x * this.scale.x;
          d = this.origin.y * this.scale.y;
          null == d && (d = 0);
          null == c && (c = 0);
          f.set_x(c);
          f.set_y(d);
          a.x +=
            -((b.scroll.x * this.scrollFactor.x) | 0) -
            this.offset.x +
            this.origin.x -
            this._scaledOrigin.x;
          a.y +=
            -((b.scroll.y * this.scrollFactor.y) | 0) -
            this.offset.y +
            this.origin.y -
            this._scaledOrigin.y;
          this.isPixelPerfectRender(b) &&
            ((a.x = Math.floor(a.x)),
            (a.y = Math.floor(a.y)),
            (a.width = Math.floor(a.width)),
            (a.height = Math.floor(a.height)));
          f = this.frameHeight * Math.abs(this.scale.y);
          a.width = this.frameWidth * Math.abs(this.scale.x);
          a.height = f;
          return a.getRotatedBounds(this.angle, this._scaledOrigin, a);
        },
        get_pixels: function () {
          return null == this.graphic ? null : this.graphic.bitmap;
        },
        set_pixels: function (a) {
          var b = g.bitmap.findKeyForBitmap(a);
          null == b
            ? ((b = g.bitmap.getUniqueKey()),
              this.set_graphic(g.bitmap.add(a, !1, b)))
            : this.set_graphic(g.bitmap._cache.h[b]);
          this.set_frames(this.graphic.get_imageFrame());
          return a;
        },
        set_frame: function (a) {
          this.frame = a;
          if (null != this.frame) {
            null != this.frame &&
              ((this.frameWidth = this.frame.sourceSize.x | 0),
              (this.frameHeight = this.frame.sourceSize.y | 0));
            a = this._halfSize;
            var b = 0.5 * this.frameWidth,
              c = 0.5 * this.frameHeight;
            null == c && (c = 0);
            null == b && (b = 0);
            a.set_x(b);
            a.set_y(c);
            this._flashRect.x = 0;
            this._flashRect.y = 0;
            this._flashRect.width = this.frameWidth;
            this._flashRect.height = this.frameHeight;
            this.dirty = !0;
          } else if (
            null != this.frames &&
            null != this.frames.frames &&
            0 < this.get_numFrames()
          )
            (this.frame = this.frames.frames[0]), (this.dirty = !0);
          else return null;
          g.renderTile && (this._frameGraphic = V.destroy(this._frameGraphic));
          this._frame =
            null != this.clipRect
              ? this.frame.clipTo(this.clipRect, this._frame)
              : this.frame.copyTo(this._frame);
          return this.frame;
        },
        set_alpha: function (a) {
          if (this.alpha == a) return a;
          a = 0 > a ? 0 : a;
          this.alpha = 1 < a ? 1 : a;
          this.updateColorTransform();
          return this.alpha;
        },
        set_color: function (a) {
          if (this.color == a) return a;
          this.color = a;
          this.updateColorTransform();
          return this.color;
        },
        set_angle: function (a) {
          var b = this.angle != a;
          a = ca.prototype.set_angle.call(this, a);
          b && ((this._angleChanged = !0), this.animation.update(0));
          return a;
        },
        set_blend: function (a) {
          return (this.blend = a);
        },
        set_graphic: function (a) {
          this.graphic != a &&
            (null != a && a.incrementUseCount(),
            null != this.graphic && this.graphic.decrementUseCount(),
            (this.graphic = a));
          return a;
        },
        set_clipRect: function (a) {
          null != a
            ? ((a.x = Math.round(a.x)),
              (a.y = Math.round(a.y)),
              (a.width = Math.round(a.width)),
              (a.height = Math.round(a.height)),
              (this.clipRect = a))
            : (this.clipRect = null);
          null != this.frames &&
            this.set_frame(this.frames.frames[this.animation.frameIndex]);
          return a;
        },
        set_frames: function (a) {
          null != this.animation && this.animation.destroyAnimations();
          null != a
            ? (this.set_graphic(a.parent),
              (this.frames = a),
              this.set_frame(this.frames.frames[0]),
              this.resetHelpers(),
              (this.bakedRotationAngle = 0),
              this.animation.set_frameIndex(0),
              this.graphicLoaded())
            : ((this.frames = null),
              this.set_frame(null),
              this.set_graphic(null));
          return a;
        },
        get_numFrames: function () {
          return null != this.frames ? this.frames.frames.length : 0;
        },
        set_flipX: function (a) {
          g.renderTile && (this._facingHorizontalMult = a ? -1 : 1);
          this.dirty = this.flipX != a || this.dirty;
          return (this.flipX = a);
        },
        set_flipY: function (a) {
          g.renderTile && (this._facingVerticalMult = a ? -1 : 1);
          this.dirty = this.flipY != a || this.dirty;
          return (this.flipY = a);
        },
        set_antialiasing: function (a) {
          return (this.antialiasing = a);
        },
        set_useFramePixels: function (a) {
          return g.renderTile
            ? (a != this.useFramePixels &&
                ((this.useFramePixels = a),
                this.set_frame(this.frame),
                a && this.updateFramePixels()),
              a)
            : (this.useFramePixels = !0);
        },
        __class__: F,
        __properties__: q(ca.prototype.__properties__, {
          set_clipRect: "set_clipRect",
          set_color: "set_color",
          set_blend: "set_blend",
          set_flipY: "set_flipY",
          set_flipX: "set_flipX",
          set_alpha: "set_alpha",
          set_graphic: "set_graphic",
          set_frames: "set_frames",
          get_numFrames: "get_numFrames",
          set_frame: "set_frame",
          set_pixels: "set_pixels",
          get_pixels: "get_pixels",
          set_antialiasing: "set_antialiasing",
          set_useFramePixels: "set_useFramePixels",
        }),
      });
      var wa = function (a, b, c) {
        null == c && (c = 0);
        null == b && (b = 0);
        null == a && (a = 0);
        this.directAlpha = this._skipTransformChildren = !1;
        F.call(this, a, b);
        this.group = new ma(c);
        this._sprites = this.group.members;
      };
      h["flixel.group.FlxTypedSpriteGroup"] = wa;
      wa.__name__ = "flixel.group.FlxTypedSpriteGroup";
      wa.__super__ = F;
      wa.prototype = q(F.prototype, {
        transformChildren_flixel_math_FlxRect: function (a, b) {
          if (!this._skipTransformChildren && null != this.group)
            for (var c = 0, d = this._sprites; c < d.length; ) {
              var e = d[c];
              ++c;
              null != e && a(e, b);
            }
        },
        transformChildren_flixel_math_FlxPoint: function (a, b) {
          if (!this._skipTransformChildren && null != this.group)
            for (var c = 0, d = this._sprites; c < d.length; ) {
              var e = d[c];
              ++c;
              null != e && a(e, b);
            }
        },
        transformChildren_openfl_display_BlendMode: function (a, b) {
          if (!this._skipTransformChildren && null != this.group)
            for (var c = 0, d = this._sprites; c < d.length; ) {
              var e = d[c];
              ++c;
              null != e && a(e, b);
            }
        },
        transformChildren_flixel_FlxCamera: function (a, b) {
          if (!this._skipTransformChildren && null != this.group)
            for (var c = 0, d = this._sprites; c < d.length; ) {
              var e = d[c];
              ++c;
              null != e && a(e, b);
            }
        },
        transformChildren_Array_flixel_FlxCamera: function (a, b) {
          if (!this._skipTransformChildren && null != this.group)
            for (var c = 0, d = this._sprites; c < d.length; ) {
              var e = d[c];
              ++c;
              null != e && a(e, b);
            }
        },
        multiTransformChildren_Float: function (a, b) {
          if (!this._skipTransformChildren && null != this.group) {
            var c = a.length;
            if (!(c > b.length))
              for (var d, e = 0, f = this._sprites; e < f.length; ) {
                var k = f[e];
                ++e;
                if (null != k && k.exists)
                  for (var r = 0, l = c; r < l; ) {
                    var g = r++;
                    d = a[g];
                    d(k, b[g]);
                  }
              }
          }
        },
        transformChildren_Int: function (a, b) {
          if (!this._skipTransformChildren && null != this.group)
            for (var c = 0, d = this._sprites; c < d.length; ) {
              var e = d[c];
              ++c;
              null != e && a(e, b);
            }
        },
        transformChildren_Float: function (a, b) {
          if (!this._skipTransformChildren && null != this.group)
            for (var c = 0, d = this._sprites; c < d.length; ) {
              var e = d[c];
              ++c;
              null != e && a(e, b);
            }
        },
        transformChildren_Bool: function (a, b) {
          if (!this._skipTransformChildren && null != this.group)
            for (var c = 0, d = this._sprites; c < d.length; ) {
              var e = d[c];
              ++c;
              null != e && a(e, b);
            }
        },
        initVars: function () {
          this.flixelType = 4;
          this.offset = new lh(n(this, this.offsetCallback));
          this.origin = new lh(n(this, this.originCallback));
          this.scale = new lh(n(this, this.scaleCallback));
          this.scrollFactor = new lh(n(this, this.scrollFactorCallback));
          var a = this.scale,
            b = 1,
            c = 1;
          null == c && (c = 0);
          null == b && (b = 0);
          a.set_x(b);
          a.set_y(c);
          a = this.scrollFactor;
          c = b = 1;
          null == c && (c = 0);
          null == b && (b = 0);
          a.set_x(b);
          a.set_y(c);
          c = b = 0;
          null == c && (c = 0);
          null == b && (b = 0);
          c = ba.pool.get().set(b, c);
          c._inPool = !1;
          this.velocity = c;
          c = b = 0;
          null == c && (c = 0);
          null == b && (b = 0);
          c = ba.pool.get().set(b, c);
          c._inPool = !1;
          this.acceleration = c;
          c = b = 0;
          null == c && (c = 0);
          null == b && (b = 0);
          c = ba.pool.get().set(b, c);
          c._inPool = !1;
          this.drag = c;
          c = b = 1e4;
          null == c && (c = 0);
          null == b && (b = 0);
          a = b;
          null == c && (c = 0);
          null == a && (a = 0);
          c = ba.pool.get().set(a, c);
          c._inPool = !1;
          this.maxVelocity = c;
        },
        destroy: function () {
          this.offset = V.destroy(this.offset);
          this.origin = V.destroy(this.origin);
          this.scale = V.destroy(this.scale);
          this.scrollFactor = V.destroy(this.scrollFactor);
          this.group = V.destroy(this.group);
          this._sprites = null;
          F.prototype.destroy.call(this);
        },
        isOnScreen: function (a) {
          for (var b = 0, c = this._sprites; b < c.length; ) {
            var d = c[b];
            ++b;
            if (null != d && d.exists && d.visible && d.isOnScreen(a))
              return !0;
          }
          return !1;
        },
        overlapsPoint: function (a, b, c) {
          null == b && (b = !1);
          for (var d = !1, e = 0, f = this._sprites; e < f.length; ) {
            var k = f[e];
            ++e;
            null != k &&
              k.exists &&
              k.visible &&
              (d = d || k.overlapsPoint(a, b, c));
          }
          return d;
        },
        pixelsOverlapPoint: function (a, b, c) {
          null == b && (b = 255);
          for (var d = !1, e = 0, f = this._sprites; e < f.length; ) {
            var k = f[e];
            ++e;
            null != k &&
              k.exists &&
              k.visible &&
              (d = d || k.pixelsOverlapPoint(a, b, c));
          }
          return d;
        },
        update: function (a) {
          this.group.update(a);
          this.moves && this.updateMotion(a);
        },
        draw: function () {
          this.group.draw();
        },
        add: function (a) {
          this.preAdd(a);
          return this.group.add(a);
        },
        preAdd: function (a) {
          a.set_x(a.x + this.x);
          a.set_y(a.y + this.y);
          a.set_alpha(a.alpha * this.alpha);
          var b = a.scrollFactor,
            c = this.scrollFactor,
            d = c.x,
            e = c.y;
          null == e && (e = 0);
          null == d && (d = 0);
          b.set_x(d);
          b.set_y(e);
          c._weak && c.put();
          a.set_cameras(this._cameras);
          if (null != this.clipRect)
            if (((b = this.clipRect), null == b)) a.set_clipRect(null);
            else {
              e = b.x - a.x + this.x;
              var f = b.y - a.y + this.y;
              c = b.width;
              d = b.height;
              null == d && (d = 0);
              null == c && (c = 0);
              null == f && (f = 0);
              null == e && (e = 0);
              b = Ga._pool.get();
              null == d && (d = 0);
              null == c && (c = 0);
              null == f && (f = 0);
              null == e && (e = 0);
              b.x = e;
              b.y = f;
              b.width = c;
              b.height = d;
              b._inPool = !1;
              a.set_clipRect(b);
            }
        },
        remove: function (a, b) {
          null == b && (b = !1);
          a.set_x(a.x - this.x);
          a.set_y(a.y - this.y);
          a.set_cameras(null);
          return this.group.remove(a, b);
        },
        kill: function () {
          this._skipTransformChildren = !0;
          F.prototype.kill.call(this);
          this._skipTransformChildren = !1;
          this.group.kill();
        },
        revive: function () {
          this._skipTransformChildren = !0;
          F.prototype.revive.call(this);
          this._skipTransformChildren = !1;
          this.group.revive();
        },
        reset: function (a, b) {
          for (var c = 0, d = this._sprites; c < d.length; ) {
            var e = d[c];
            ++c;
            null != e && e.reset(e.x + a - this.x, e.y + b - this.y);
          }
          this._skipTransformChildren = !0;
          this.wasTouching = this.touching = 0;
          this.set_x(a);
          this.set_y(b);
          a = this.velocity;
          a.set_x(0);
          a.set_y(0);
          F.prototype.revive.call(this);
          this._skipTransformChildren = !1;
        },
        setPosition: function (a, b) {
          null == b && (b = 0);
          null == a && (a = 0);
          var c = a - this.x,
            d = b - this.y;
          this.multiTransformChildren_Float(
            [n(this, this.xTransform), n(this, this.yTransform)],
            [c, d]
          );
          this._skipTransformChildren = !0;
          this.set_x(a);
          this.set_y(b);
          this._skipTransformChildren = !1;
        },
        set_camera: function (a) {
          this.get_camera() != a &&
            this.transformChildren_flixel_FlxCamera(
              n(this, this.cameraTransform),
              a
            );
          return F.prototype.set_camera.call(this, a);
        },
        set_cameras: function (a) {
          this.get_cameras() != a &&
            this.transformChildren_Array_flixel_FlxCamera(
              n(this, this.camerasTransform),
              a
            );
          return F.prototype.set_cameras.call(this, a);
        },
        set_exists: function (a) {
          this.exists != a &&
            this.transformChildren_Bool(n(this, this.existsTransform), a);
          return F.prototype.set_exists.call(this, a);
        },
        set_visible: function (a) {
          this.exists &&
            this.visible != a &&
            this.transformChildren_Bool(n(this, this.visibleTransform), a);
          return F.prototype.set_visible.call(this, a);
        },
        set_active: function (a) {
          this.exists &&
            this.active != a &&
            this.transformChildren_Bool(n(this, this.activeTransform), a);
          return F.prototype.set_active.call(this, a);
        },
        set_alive: function (a) {
          this.alive != a &&
            this.transformChildren_Bool(n(this, this.aliveTransform), a);
          return F.prototype.set_alive.call(this, a);
        },
        set_x: function (a) {
          this.exists &&
            this.x != a &&
            this.transformChildren_Float(n(this, this.xTransform), a - this.x);
          return (this.x = a);
        },
        set_y: function (a) {
          this.exists &&
            this.y != a &&
            this.transformChildren_Float(n(this, this.yTransform), a - this.y);
          return (this.y = a);
        },
        set_angle: function (a) {
          this.exists &&
            this.angle != a &&
            this.transformChildren_Float(
              n(this, this.angleTransform),
              a - this.angle
            );
          return (this.angle = a);
        },
        set_alpha: function (a) {
          a = 0 > a ? 0 : a;
          a = 1 < a ? 1 : a;
          if (this.exists && this.alpha != a) {
            var b = 0 < this.alpha ? a / this.alpha : 0;
            this.directAlpha || 0 == this.alpha
              ? this.transformChildren_Float(
                  n(this, this.directAlphaTransform),
                  a
                )
              : this.transformChildren_Float(n(this, this.alphaTransform), b);
          }
          return (this.alpha = a);
        },
        set_flipX: function (a) {
          this.exists &&
            this.flipX != a &&
            this.transformChildren_Bool(n(this, this.flipXTransform), a);
          return (this.flipX = a);
        },
        set_flipY: function (a) {
          this.exists &&
            this.flipY != a &&
            this.transformChildren_Bool(n(this, this.flipYTransform), a);
          return (this.flipY = a);
        },
        set_moves: function (a) {
          this.exists &&
            this.moves != a &&
            this.transformChildren_Bool(n(this, this.movesTransform), a);
          return (this.moves = a);
        },
        set_immovable: function (a) {
          this.exists &&
            this.immovable != a &&
            this.transformChildren_Bool(n(this, this.immovableTransform), a);
          return (this.immovable = a);
        },
        set_solid: function (a) {
          this.exists &&
            0 < (this.allowCollisions & 4369) != a &&
            this.transformChildren_Bool(n(this, this.solidTransform), a);
          return F.prototype.set_solid.call(this, a);
        },
        set_color: function (a) {
          this.exists &&
            this.color != a &&
            this.transformChildren_Int(n(this, this.gColorTransform), a);
          return (this.color = a);
        },
        set_blend: function (a) {
          this.exists &&
            this.blend != a &&
            this.transformChildren_openfl_display_BlendMode(
              n(this, this.blendTransform),
              a
            );
          return (this.blend = a);
        },
        set_clipRect: function (a) {
          this.exists &&
            this.transformChildren_flixel_math_FlxRect(
              n(this, this.clipRectTransform),
              a
            );
          return F.prototype.set_clipRect.call(this, a);
        },
        set_width: function (a) {
          return a;
        },
        get_width: function () {
          return 0 == this.group.length
            ? 0
            : this.findMaxXHelper() - this.findMinXHelper();
        },
        findMinX: function () {
          return 0 == this.group.length ? this.x : this.findMinXHelper();
        },
        findMinXHelper: function () {
          for (var a = Infinity, b = 0, c = this._sprites; b < c.length; ) {
            var d = c[b];
            ++b;
            null != d &&
              ((d = 4 == d.flixelType ? d.findMinX() : d.x), d < a && (a = d));
          }
          return a;
        },
        findMaxX: function () {
          return 0 == this.group.length ? this.x : this.findMaxXHelper();
        },
        findMaxXHelper: function () {
          for (var a = -Infinity, b = 0, c = this._sprites; b < c.length; ) {
            var d = c[b];
            ++b;
            null != d &&
              ((d = 4 == d.flixelType ? d.findMaxX() : d.x + d.get_width()),
              d > a && (a = d));
          }
          return a;
        },
        set_height: function (a) {
          return a;
        },
        get_height: function () {
          return 0 == this.group.length
            ? 0
            : this.findMaxYHelper() - this.findMinYHelper();
        },
        findMinY: function () {
          return 0 == this.group.length ? this.y : this.findMinYHelper();
        },
        findMinYHelper: function () {
          for (var a = Infinity, b = 0, c = this._sprites; b < c.length; ) {
            var d = c[b];
            ++b;
            null != d &&
              ((d = 4 == d.flixelType ? d.findMinY() : d.y), d < a && (a = d));
          }
          return a;
        },
        findMaxY: function () {
          return 0 == this.group.length ? this.y : this.findMaxYHelper();
        },
        findMaxYHelper: function () {
          for (var a = -Infinity, b = 0, c = this._sprites; b < c.length; ) {
            var d = c[b];
            ++b;
            null != d &&
              ((d = 4 == d.flixelType ? d.findMaxY() : d.y + d.get_height()),
              d > a && (a = d));
          }
          return a;
        },
        xTransform: function (a, b) {
          a.set_x(a.x + b);
        },
        yTransform: function (a, b) {
          a.set_y(a.y + b);
        },
        angleTransform: function (a, b) {
          a.set_angle(a.angle + b);
        },
        alphaTransform: function (a, b) {
          0 != a.alpha || 0 == b
            ? a.set_alpha(a.alpha * b)
            : a.set_alpha(1 / b);
        },
        directAlphaTransform: function (a, b) {
          a.set_alpha(b);
        },
        flipXTransform: function (a, b) {
          a.set_flipX(b);
        },
        flipYTransform: function (a, b) {
          a.set_flipY(b);
        },
        movesTransform: function (a, b) {
          a.set_moves(b);
        },
        gColorTransform: function (a, b) {
          a.set_color(b);
        },
        blendTransform: function (a, b) {
          a.set_blend(b);
        },
        immovableTransform: function (a, b) {
          a.set_immovable(b);
        },
        visibleTransform: function (a, b) {
          a.set_visible(b);
        },
        activeTransform: function (a, b) {
          a.set_active(b);
        },
        solidTransform: function (a, b) {
          a.set_solid(b);
        },
        aliveTransform: function (a, b) {
          a.set_alive(b);
        },
        existsTransform: function (a, b) {
          a.set_exists(b);
        },
        cameraTransform: function (a, b) {
          a.set_camera(b);
        },
        camerasTransform: function (a, b) {
          a.set_cameras(b);
        },
        offsetTransform: function (a, b) {
          a = a.offset;
          var c = b.x,
            d = b.y;
          null == d && (d = 0);
          null == c && (c = 0);
          a.set_x(c);
          a.set_y(d);
          b._weak && b.put();
        },
        originTransform: function (a, b) {
          a = a.origin;
          var c = b.x,
            d = b.y;
          null == d && (d = 0);
          null == c && (c = 0);
          a.set_x(c);
          a.set_y(d);
          b._weak && b.put();
        },
        scaleTransform: function (a, b) {
          a = a.scale;
          var c = b.x,
            d = b.y;
          null == d && (d = 0);
          null == c && (c = 0);
          a.set_x(c);
          a.set_y(d);
          b._weak && b.put();
        },
        scrollFactorTransform: function (a, b) {
          a = a.scrollFactor;
          var c = b.x,
            d = b.y;
          null == d && (d = 0);
          null == c && (c = 0);
          a.set_x(c);
          a.set_y(d);
          b._weak && b.put();
        },
        clipRectTransform: function (a, b) {
          if (null == b) a.set_clipRect(null);
          else {
            var c = b.x - a.x + this.x,
              d = b.y - a.y + this.y,
              e = b.width,
              f = b.height;
            null == f && (f = 0);
            null == e && (e = 0);
            null == d && (d = 0);
            null == c && (c = 0);
            b = Ga._pool.get();
            null == f && (f = 0);
            null == e && (e = 0);
            null == d && (d = 0);
            null == c && (c = 0);
            b.x = c;
            b.y = d;
            b.width = e;
            b.height = f;
            b._inPool = !1;
            a.set_clipRect(b);
          }
        },
        offsetCallback: function (a) {
          this.transformChildren_flixel_math_FlxPoint(
            n(this, this.offsetTransform),
            a
          );
        },
        originCallback: function (a) {
          this.transformChildren_flixel_math_FlxPoint(
            n(this, this.originTransform),
            a
          );
        },
        scaleCallback: function (a) {
          this.transformChildren_flixel_math_FlxPoint(
            n(this, this.scaleTransform),
            a
          );
        },
        scrollFactorCallback: function (a) {
          this.transformChildren_flixel_math_FlxPoint(
            n(this, this.scrollFactorTransform),
            a
          );
        },
        loadGraphicFromSprite: function (a) {
          return this;
        },
        loadGraphic: function (a, b, c, d, e, f) {
          return this;
        },
        makeGraphic: function (a, b, c, d, e) {
          return this;
        },
        set_pixels: function (a) {
          return a;
        },
        set_frame: function (a) {
          return a;
        },
        get_pixels: function () {
          return null;
        },
        calcFrame: function (a) {},
        resetHelpers: function () {},
        stamp: function (a, b, c) {},
        set_frames: function (a) {
          return a;
        },
        updateColorTransform: function () {},
        __class__: wa,
      });
      var ma = function (a) {
        null == a && (a = 0);
        this.length = this._marker = 0;
        O.call(this);
        this.members = [];
        this.set_maxSize(Math.abs(a) | 0);
        this.flixelType = 2;
      };
      h["flixel.group.FlxTypedGroup"] = ma;
      ma.__name__ = "flixel.group.FlxTypedGroup";
      ma.resolveGroup = function (a) {
        if (null != a) {
          if (2 == a.flixelType) return a;
          if (4 == a.flixelType) return a.group;
        }
        return null;
      };
      ma.__super__ = O;
      ma.prototype = q(O.prototype, {
        destroy: function () {
          O.prototype.destroy.call(this);
          V.destroy(this._memberAdded);
          V.destroy(this._memberRemoved);
          if (null != this.members) {
            for (var a = 0, b; a < this.length; )
              (b = this.members[a++]), null != b && b.destroy();
            this.members = null;
          }
        },
        update: function (a) {
          for (var b = 0, c; b < this.length; )
            (c = this.members[b++]),
              null != c && c.exists && c.active && c.update(a);
        },
        draw: function () {
          var a = Ob._defaultCameras;
          null != this.get_cameras() &&
            (Ob._defaultCameras = this.get_cameras());
          for (var b = 0, c = this.members; b < c.length; ) {
            var d = c[b];
            ++b;
            null != d && d.exists && d.visible && d.draw();
          }
          Ob._defaultCameras = a;
        },
        add: function (a) {
          if (null == a)
            return (
              g.log.advanced(
                "Cannot add a `null` object to a FlxGroup.",
                Ja.WARNING,
                !0
              ),
              null
            );
          if (0 <= this.members.indexOf(a)) return a;
          var b = this.getFirstNull();
          if (-1 != b)
            return (
              (this.members[b] = a),
              b >= this.length && (this.length = b + 1),
              null != this._memberAdded && this._memberAdded.dispatch(a),
              a
            );
          if (0 < this.maxSize && this.length >= this.maxSize) return a;
          this.members.push(a);
          this.length++;
          null != this._memberAdded && this._memberAdded.dispatch(a);
          return a;
        },
        insert: function (a, b) {
          if (null == b)
            return (
              g.log.advanced(
                "Cannot insert a `null` object into a FlxGroup.",
                Ja.WARNING,
                !0
              ),
              null
            );
          if (0 <= this.members.indexOf(b)) return b;
          if (a < this.length && null == this.members[a])
            return (
              (this.members[a] = b),
              null != this._memberAdded && this._memberAdded.dispatch(b),
              b
            );
          if (0 < this.maxSize && this.length >= this.maxSize) return b;
          this.members.splice(a, 0, b);
          this.length++;
          null != this._memberAdded && this._memberAdded.dispatch(b);
          return b;
        },
        recycle: function (a, b, c, d) {
          null == d && (d = !0);
          null == c && (c = !1);
          if (0 < this.maxSize) {
            if (this.length < this.maxSize)
              return null != b
                ? this.add(b())
                : null != a
                ? this.add(zb.createInstance(a, []))
                : null;
            c = this.members[this._marker++];
            this._marker >= this.maxSize && (this._marker = 0);
            d && c.revive();
            return c;
          }
          c = this.getFirstAvailable(a, c);
          return null != c
            ? (d && c.revive(), c)
            : null != b
            ? this.add(b())
            : null != a
            ? this.add(zb.createInstance(a, []))
            : null;
        },
        remove: function (a, b) {
          null == b && (b = !1);
          if (null == this.members) return null;
          var c = this.members.indexOf(a);
          if (0 > c) return null;
          b
            ? (this.members.splice(c, 1), this.length--)
            : (this.members[c] = null);
          null != this._memberRemoved && this._memberRemoved.dispatch(a);
          return a;
        },
        any: function (a) {
          for (var b = 0, c = this.members; b < c.length; ) {
            var d = c[b];
            ++b;
            if (null != d && a(d)) return !0;
          }
          return !1;
        },
        getFirstAvailable: function (a, b) {
          null == b && (b = !1);
          for (var c = 0, d = this.members; c < d.length; ) {
            var e = d[c];
            ++c;
            if (
              !(
                null == e ||
                e.exists ||
                (null != a && !za.__instanceof(e, a)) ||
                (b && za.getClass(e).__name__ != a.__name__)
              )
            )
              return e;
          }
          return null;
        },
        getFirstNull: function () {
          return this.members.indexOf(null);
        },
        clear: function () {
          this.length = 0;
          if (null != this._memberRemoved)
            for (var a = 0, b = this.members; a < b.length; ) {
              var c = b[a];
              ++a;
              null != c && this._memberRemoved.dispatch(c);
            }
          Od.clearArray(this.members);
        },
        killMembers: function () {
          for (var a = 0, b = this.members; a < b.length; ) {
            var c = b[a];
            ++a;
            null != c && c.exists && c.kill();
          }
        },
        kill: function () {
          this.killMembers();
          O.prototype.kill.call(this);
        },
        reviveMembers: function () {
          for (var a = 0, b = this.members; a < b.length; ) {
            var c = b[a];
            ++a;
            null == c || c.exists || c.revive();
          }
        },
        revive: function () {
          this.reviveMembers();
          O.prototype.revive.call(this);
        },
        forEach: function (a, b) {
          null == b && (b = !1);
          for (var c = 0, d = this.members; c < d.length; ) {
            var e = d[c];
            ++c;
            if (null != e) {
              if (b) {
                var f = ma.resolveGroup(e);
                null != f && f.forEach(a, b);
              }
              a(e);
            }
          }
        },
        forEachAlive: function (a, b) {
          null == b && (b = !1);
          for (var c = 0, d = this.members; c < d.length; ) {
            var e = d[c];
            ++c;
            if (null != e && e.exists && e.alive) {
              if (b) {
                var f = ma.resolveGroup(e);
                null != f && f.forEachAlive(a, b);
              }
              a(e);
            }
          }
        },
        forEachExists: function (a, b) {
          null == b && (b = !1);
          for (var c = 0, d = this.members; c < d.length; ) {
            var e = d[c];
            ++c;
            if (null != e && e.exists) {
              if (b) {
                var f = ma.resolveGroup(e);
                null != f && f.forEachExists(a, b);
              }
              a(e);
            }
          }
        },
        set_maxSize: function (a) {
          this.maxSize = Math.abs(a) | 0;
          this._marker >= this.maxSize && (this._marker = 0);
          if (
            0 == this.maxSize ||
            null == this.members ||
            this.maxSize >= this.length
          )
            return this.maxSize;
          for (; this.length > this.maxSize; )
            (a = this.members.splice(this.maxSize - 1, 1)[0]),
              null != a &&
                (null != this._memberRemoved && this._memberRemoved.dispatch(a),
                a.destroy()),
              this.length--;
          return this.maxSize;
        },
        __class__: ma,
        __properties__: q(O.prototype.__properties__, {
          set_maxSize: "set_maxSize",
        }),
      });
      var ka = function (a) {
        this._requestSubStateReset = !1;
        this.persistentDraw = this.destroySubStates = !0;
        this.persistentUpdate = !1;
        ma.call(this, a);
      };
      h["flixel.FlxState"] = ka;
      ka.__name__ = "flixel.FlxState";
      ka.__super__ = ma;
      ka.prototype = q(ma.prototype, {
        create: function () {},
        draw: function () {
          (this.persistentDraw || null == this.subState) &&
            ma.prototype.draw.call(this);
          null != this.subState && this.subState.draw();
        },
        openSubState: function (a) {
          this._requestSubStateReset = !0;
          this._requestedSubState = a;
        },
        closeSubState: function () {
          this._requestSubStateReset = !0;
        },
        resetSubState: function () {
          null != this.subState &&
            (null != this.subState.closeCallback &&
              this.subState.closeCallback(),
            null != this._subStateClosed &&
              this._subStateClosed.dispatch(this.subState),
            this.destroySubStates && this.subState.destroy());
          this.subState = this._requestedSubState;
          this._requestedSubState = null;
          if (null != this.subState) {
            if (!this.persistentUpdate) g.inputs.onStateSwitch();
            this.subState._parentState = this;
            this.subState._created ||
              ((this.subState._created = !0), this.subState.create());
            null != this.subState.openCallback && this.subState.openCallback();
            null != this._subStateOpened &&
              this._subStateOpened.dispatch(this.subState);
          }
        },
        destroy: function () {
          V.destroy(this._subStateOpened);
          V.destroy(this._subStateClosed);
          null != this.subState &&
            (this.subState.destroy(), (this.subState = null));
          ma.prototype.destroy.call(this);
        },
        switchTo: function (a) {
          return !0;
        },
        startOutro: function (a) {
          a();
        },
        onFocusLost: function () {},
        onFocus: function () {},
        onResize: function (a, b) {},
        tryUpdate: function (a) {
          (this.persistentUpdate || null == this.subState) && this.update(a);
          this._requestSubStateReset &&
            ((this._requestSubStateReset = !1), this.resetSubState());
          null != this.subState && this.subState.tryUpdate(a);
        },
        get_bgColor: function () {
          return g.cameras.get_bgColor();
        },
        set_bgColor: function (a) {
          return g.cameras.set_bgColor(a);
        },
        get_subStateOpened: function () {
          null == this._subStateOpened && (this._subStateOpened = new pf());
          return this._subStateOpened;
        },
        get_subStateClosed: function () {
          null == this._subStateClosed && (this._subStateClosed = new pf());
          return this._subStateClosed;
        },
        __class__: ka,
        __properties__: q(ma.prototype.__properties__, {
          get_subStateClosed: "get_subStateClosed",
          get_subStateOpened: "get_subStateOpened",
          set_bgColor: "set_bgColor",
          get_bgColor: "get_bgColor",
        }),
      });
      var Z = function (a, b) {
        this.transOutFinished = this._exiting = !1;
        this.transIn = a;
        this.transOut = b;
        null == this.transIn &&
          null != Z.defaultTransIn &&
          (this.transIn = Z.defaultTransIn);
        null == this.transOut &&
          null != Z.defaultTransOut &&
          (this.transOut = Z.defaultTransOut);
        ka.call(this);
      };
      h["flixel.addons.transition.FlxTransitionableState"] = Z;
      Z.__name__ = "flixel.addons.transition.FlxTransitionableState";
      Z.__super__ = ka;
      Z.prototype = q(ka.prototype, {
        destroy: function () {
          ka.prototype.destroy.call(this);
          this._onExit = this.transOut = this.transIn = null;
        },
        create: function () {
          ka.prototype.create.call(this);
          this.transitionIn();
        },
        startOutro: function (a) {
          this.get_hasTransOut()
            ? this._exiting ||
              ((this._exiting = !0),
              this.transitionOut(a),
              Z.skipNextTransOut &&
                ((Z.skipNextTransOut = !1), this.finishTransOut()))
            : a();
        },
        transitionIn: function () {
          if (null != this.transIn && "none" != this.transIn.type)
            if (Z.skipNextTransIn)
              (Z.skipNextTransIn = !1),
                null != this.finishTransIn && this.finishTransIn();
            else {
              var a = this.createTransition(this.transIn);
              a.setStatus(3);
              this.openSubState(a);
              a.set_finishCallback(n(this, this.finishTransIn));
              a.start(1);
            }
        },
        transitionOut: function (a) {
          this._onExit = a;
          this.get_hasTransOut()
            ? ((a = this.createTransition(this.transOut)),
              a.setStatus(2),
              this.openSubState(a),
              a.set_finishCallback(n(this, this.finishTransOut)),
              a.start(0))
            : this._onExit();
        },
        get_hasTransIn: function () {
          return null != this.transIn ? "none" != this.transIn.type : !1;
        },
        get_hasTransOut: function () {
          return null != this.transOut ? "none" != this.transOut.type : !1;
        },
        createTransition: function (a) {
          switch (a.type) {
            case "fade":
              return new Fi(a);
            case "tiles":
              return new Fi(a);
            default:
              return null;
          }
        },
        finishTransIn: function () {
          this.closeSubState();
        },
        finishTransOut: function () {
          this.transOutFinished = !0;
          this._exiting || this.closeSubState();
          null != this._onExit && this._onExit();
        },
        __class__: Z,
        __properties__: q(ka.prototype.__properties__, {
          get_hasTransOut: "get_hasTransOut",
          get_hasTransIn: "get_hasTransIn",
        }),
      });
      var $a = function () {};
      h["flixel.addons.ui.interfaces.IEventGetter"] = $a;
      $a.__name__ = "flixel.addons.ui.interfaces.IEventGetter";
      $a.__isInterface__ = !0;
      $a.prototype = { __class__: $a };
      var pb = function () {};
      h["flixel.addons.ui.interfaces.IFlxUIState"] = pb;
      pb.__name__ = "flixel.addons.ui.interfaces.IFlxUIState";
      pb.__isInterface__ = !0;
      pb.__interfaces__ = [$a];
      pb.prototype = { __class__: pb };
      var Ca = function (a, b) {
        this.getTextFallback = null;
        this._reload_countdown = 0;
        this.reload_ui_on_resize = this._reload = !1;
        this._xml_id = "";
        this.hideCursorOnSubstate = this._cursorHidden = !1;
        this.cursor = null;
        Z.call(this, a, b);
      };
      h["flixel.addons.ui.FlxUIState"] = Ca;
      Ca.__name__ = "flixel.addons.ui.FlxUIState";
      Ca.__interfaces__ = [pb, $a];
      Ca.__super__ = Z;
      Ca.prototype = q(Z.prototype, {
        create: function () {
          null != Ca.static_tongue && (this._tongue = Ca.static_tongue);
          1 == this._makeCursor && (this.cursor = this.createCursor());
          this.tooltips = new Gi(this);
          this._ui = this.createUI(null, this, null, this._tongue);
          this.add(this._ui);
          null != this.getTextFallback &&
            (this._ui.getTextFallback = this.getTextFallback);
          if (null != this._xml_id && "" != this._xml_id) {
            var a = null;
            try {
              a = E.xml(this._xml_id);
            } catch (c) {
              var b = N.caught(c).unwrap();
              if ("string" != typeof b) throw c;
            }
            if (null == a)
              try {
                a = E.xml(this._xml_id, "xml", !0, "");
              } catch (c) {
                if (((b = N.caught(c).unwrap()), "string" != typeof b)) throw c;
              }
            null == a
              ? g.log.advanced(
                  'FlxUISubState: Could not load _xml_id "' +
                    this._xml_id +
                    '"',
                  Ja.ERROR,
                  !0
                )
              : this.loadUIFromData(a);
          } else this.loadUIFromData(null);
          null != this.cursor &&
            null != this._ui &&
            (this.add(this.cursor),
            this.cursor.addWidgetsFromUI(this._ui),
            this.cursor.findVisibleLocation(0));
          this.tooltips.init();
          Z.prototype.create.call(this);
          this.cleanup();
        },
        update: function (a) {
          Z.prototype.update.call(this, a);
          null != this.tooltips && this.tooltips.update(a);
          this._reload &&
            0 < this._reload_countdown &&
            (this._reload_countdown--,
            0 == this._reload_countdown && this.reloadUI());
        },
        cleanup: function () {
          this._ui.cleanup();
        },
        _cleanupUIVars: function () {
          if (null != this._ui_vars) {
            for (
              var a = Object.keys(this._ui_vars.h), b = a.length, c = 0;
              c < b;

            ) {
              var d = a[c++],
                e = this._ui_vars;
              Object.prototype.hasOwnProperty.call(e.h, d) && delete e.h[d];
            }
            this._ui_vars = null;
          }
        },
        setUIVariable: function (a, b) {
          null != this._ui
            ? this._ui.setVariable(a, b)
            : (null == this._ui_vars && (this._ui_vars = new Q()),
              (this._ui_vars.h[a] = b));
        },
        resizeScreen: function (a, b) {},
        openSubState: function (a) {
          null != this.cursor &&
            this.hideCursorOnSubstate &&
            1 == this.cursor.visible &&
            ((this._cursorHidden = !0), this.cursor.set_visible(!1));
          Z.prototype.openSubState.call(this, a);
        },
        closeSubState: function () {
          null != this.cursor &&
            this.hideCursorOnSubstate &&
            this._cursorHidden &&
            ((this._cursorHidden = !1), this.cursor.set_visible(!0));
          Z.prototype.closeSubState.call(this);
        },
        onResize: function (a, b) {
          this.reload_ui_on_resize &&
            (g.scaleMode.onMeasure(a, b),
            (this._reload_countdown = 1),
            (this._reload = !0));
        },
        onShowTooltip: function (a) {},
        destroy: function () {
          this.destroyed = !0;
          null != this._ui &&
            (this._ui.destroy(), this.remove(this._ui, !0), (this._ui = null));
          null != this.tooltips &&
            (this.tooltips.destroy(), (this.tooltips = null));
          Z.prototype.destroy.call(this);
        },
        forceFocus: function (a, b) {
          null != this._ui &&
            (a ? this._ui.set_focus(b) : this._ui.set_focus(null));
        },
        onCursorEvent: function (a, b) {
          this.getEvent(a, b, null);
        },
        getEvent: function (a, b, c, d) {},
        getRequest: function (a, b, c, d) {
          return null;
        },
        getText: function (a, b, c) {
          null == c && (c = !0);
          null == b && (b = "ui");
          return null != this._tongue
            ? this._tongue.get(a, b, c)
            : null != this.getTextFallback
            ? this.getTextFallback(a, b, c)
            : a;
        },
        createCursor: function () {
          return new Hi(n(this, this.onCursorEvent));
        },
        createUI: function (a, b, c, d, e) {
          null == e && (e = "");
          a = new Ea(a, b, c, d, e, this._ui_vars);
          this._cleanupUIVars();
          return a;
        },
        loadUIFromData: function (a) {
          this._ui.load(a);
        },
        reloadUI: function (a) {
          null != this._ui &&
            (this.remove(this._ui, !0), this._ui.destroy(), (this._ui = null));
          this._ui = this.createUI(null, this, null, this._tongue);
          this.add(this._ui);
          a = E.xml(this._xml_id);
          null != a && this.loadUIFromData(a);
          this._reload = !1;
          this._reload_countdown = 0;
        },
        __class__: Ca,
      });
      var I = function (a, b) {
        this.curSection =
          this.stepsToDo =
          this.curStep =
          this.curBeat =
          this.curDecStep =
          this.curDecBeat =
            0;
        Ca.call(this, a, b);
      };
      h.MusicBeatState = I;
      I.__name__ = "MusicBeatState";
      I.switchState = function (a) {
        var b = g.game._state;
        if (Z.skipNextTransIn) {
          Z.skipNextTransIn = !1;
          var c = g.game._state;
          qa.field(g.game._state, "switchTo")(a) &&
            g.game._state.startOutro(function () {
              g.game._state == c
                ? (g.game._requestedState = a)
                : g.log.advanced(
                    "`onOutroComplete` was called after the state was switched. This will be ignored",
                    Ja.WARNING,
                    !0
                  );
            });
        } else
          b.openSubState(new od(0.6, !1)),
            (od.finishCallback =
              a == g.game._state
                ? function () {
                    var a = zb.createInstance(za.getClass(g.game._state), []),
                      b = g.game._state;
                    qa.field(g.game._state, "switchTo")(a) &&
                      g.game._state.startOutro(function () {
                        g.game._state == b
                          ? (g.game._requestedState = a)
                          : g.log.advanced(
                              "`onOutroComplete` was called after the state was switched. This will be ignored",
                              Ja.WARNING,
                              !0
                            );
                      });
                  }
                : function () {
                    var b = g.game._state;
                    qa.field(g.game._state, "switchTo")(a) &&
                      g.game._state.startOutro(function () {
                        g.game._state == b
                          ? (g.game._requestedState = a)
                          : g.log.advanced(
                              "`onOutroComplete` was called after the state was switched. This will be ignored",
                              Ja.WARNING,
                              !0
                            );
                      });
                  });
      };
      I.resetState = function () {
        I.switchState(g.game._state);
      };
      I.getState = function () {
        return g.game._state;
      };
      I.__super__ = Ca;
      I.prototype = q(Ca.prototype, {
        get_controls: function () {
          return ia.player1.controls;
        },
        create: function () {
          I.camBeat = g.camera;
          var a = Z.skipNextTransOut;
          Ca.prototype.create.call(this);
          a || this.openSubState(new od(0.7, !0));
          Z.skipNextTransOut = !1;
        },
        update: function (a) {
          var b = this.curStep;
          this.updateCurStep();
          this.updateBeat();
          b != this.curStep &&
            (0 < this.curStep && this.stepHit(),
            null != C.SONG &&
              (b < this.curStep
                ? this.updateSection()
                : this.rollbackSection()));
          null != g.save.data && (g.save.data.fullscreen = g.get_fullscreen());
          Ca.prototype.update.call(this, a);
        },
        updateSection: function () {
          1 > this.stepsToDo &&
            (this.stepsToDo = Math.round(4 * this.getBeatsOnSection()));
          for (; this.curStep >= this.stepsToDo; ) {
            this.curSection++;
            var a = this.getBeatsOnSection();
            this.stepsToDo += Math.round(4 * a);
            this.sectionHit();
          }
        },
        rollbackSection: function () {
          if (!(0 > this.curStep)) {
            for (
              var a = this.curSection,
                b = (this.stepsToDo = this.curSection = 0),
                c = C.SONG.notes.length;
              b < c;

            ) {
              var d = b++;
              if (null != C.SONG.notes[d]) {
                this.stepsToDo += Math.round(4 * this.getBeatsOnSection());
                if (this.stepsToDo > this.curStep) break;
                this.curSection++;
              }
            }
            this.curSection > a && this.sectionHit();
          }
        },
        updateBeat: function () {
          this.curBeat = Math.floor(this.curStep / 4);
          this.curDecBeat = this.curDecStep / 4;
        },
        updateCurStep: function () {
          var a = P.getBPMFromSeconds(P.songPosition),
            b = (P.songPosition - y.noteOffset - a.songTime) / a.stepCrochet;
          this.curDecStep = a.stepTime + b;
          this.curStep = a.stepTime + Math.floor(b);
        },
        stepHit: function () {
          0 == this.curStep % 4 && this.beatHit();
        },
        beatHit: function () {},
        sectionHit: function () {},
        getBeatsOnSection: function () {
          var a = 4;
          null != C.SONG &&
            null != C.SONG.notes[this.curSection] &&
            (a = C.SONG.notes[this.curSection].sectionBeats);
          return null == a ? 4 : a;
        },
        __class__: I,
        __properties__: q(Ca.prototype.__properties__, {
          get_controls: "get_controls",
        }),
      });
      var Oc = function (a, b) {
        I.call(this, a, b);
      };
      h.AchievementsMenuState = Oc;
      Oc.__name__ = "AchievementsMenuState";
      Oc.__super__ = I;
      Oc.prototype = q(I.prototype, { __class__: Oc });
      var ad = (w.Alignment = {
        __ename__: "Alignment",
        __constructs__: null,
        LEFT: {
          _hx_name: "LEFT",
          _hx_index: 0,
          __enum__: "Alignment",
          toString: p,
        },
        CENTERED: {
          _hx_name: "CENTERED",
          _hx_index: 1,
          __enum__: "Alignment",
          toString: p,
        },
        RIGHT: {
          _hx_name: "RIGHT",
          _hx_index: 2,
          __enum__: "Alignment",
          toString: p,
        },
      });
      ad.__constructs__ = [ad.LEFT, ad.CENTERED, ad.RIGHT];
      var ib = function (a, b, c, d) {
        null == d && (d = !0);
        null == c && (c = "");
        var e = 0,
          f = 0;
        null == f && (f = 0);
        null == e && (e = 0);
        this.startPosition = e = new ba(e, f);
        e = 20;
        f = 120;
        null == f && (f = 0);
        null == e && (e = 0);
        this.distancePerItem = e = new ba(e, f);
        this.rows = 0;
        this.scaleX = this.scaleY = 1;
        this.alignment = ad.LEFT;
        this.changeX = this.changeY = !0;
        this.targetY = 0;
        this.isMenuItem = !1;
        this.letters = [];
        this.bold = !1;
        wa.call(this, a, b);
        this.startPosition.set_x(a);
        this.startPosition.set_y(b);
        this.bold = d;
        this.set_text(c);
      };
      h.Alphabet = ib;
      ib.__name__ = "Alphabet";
      ib.__super__ = wa;
      ib.prototype = q(wa.prototype, {
        set_alignment: function (a) {
          this.alignment = a;
          this.updateAlignment();
          return a;
        },
        updateAlignment: function () {
          for (var a = 0, b = this.letters; a < b.length; ) {
            var c = b[a];
            ++a;
            switch (this.alignment._hx_index) {
              case 1:
                var d = c.rowWidth / 2;
                break;
              case 2:
                d = c.rowWidth;
                break;
              default:
                d = 0;
            }
            c.offset.set_x(c.offset.x - c.alignOffset);
            c.offset.set_x(c.offset.x + d);
            c.alignOffset = d;
          }
        },
        set_text: function (a) {
          a = K.replace(a, "\\n", "\n");
          this.clearLetters();
          this.createLetters(a);
          this.updateAlignment();
          return (this.text = a);
        },
        clearLetters: function () {
          for (var a = this.letters.length; 0 < a; ) {
            --a;
            var b = this.letters[a];
            null != b && (b.kill(), X.remove(this.letters, b), b.destroy());
          }
          this.letters = [];
          this.rows = 0;
        },
        set_scaleX: function (a) {
          if (a == this.scaleX) return a;
          this.scale.set_x(a);
          for (var b = 0, c = this.letters; b < c.length; ) {
            var d = c[b];
            ++b;
            null != d &&
              (d.updateHitbox(), d.set_x((a / d.spawnScale.x) * d.spawnPos.x));
          }
          return (this.scaleX = a);
        },
        set_scaleY: function (a) {
          if (a == this.scaleY) return a;
          this.scale.set_y(a);
          for (var b = 0, c = this.letters; b < c.length; ) {
            var d = c[b];
            ++b;
            null != d &&
              (d.updateHitbox(),
              d.updateLetterOffset(),
              d.set_y((a / d.spawnScale.y) * d.spawnPos.y));
          }
          return (this.scaleY = a);
        },
        update: function (a) {
          if (this.isMenuItem) {
            var b = Math.max(0, Math.min(1, 9.6 * a));
            if (this.changeX) {
              var c = this.x;
              this.set_x(
                c +
                  b *
                    (this.targetY * this.distancePerItem.x +
                      this.startPosition.x -
                      c)
              );
            }
            this.changeY &&
              ((c = this.y),
              this.set_y(
                c +
                  b *
                    (1.3 * this.targetY * this.distancePerItem.y +
                      this.startPosition.y -
                      c)
              ));
          }
          wa.prototype.update.call(this, a);
        },
        snapToPosition: function () {
          this.isMenuItem &&
            (this.changeX &&
              this.set_x(
                this.targetY * this.distancePerItem.x + this.startPosition.x
              ),
            this.changeY &&
              this.set_y(
                1.3 * this.targetY * this.distancePerItem.y +
                  this.startPosition.y
              ));
        },
        createLetters: function (a) {
          var b = 0,
            c = 0,
            d = [],
            e = (this.rows = 0);
          for (a = a.split(""); e < a.length; ) {
            var f = a[e];
            ++e;
            if ("\n" != f) {
              var k = " " == f || (this.bold && "_" == f);
              k && ++b;
              wc.isTypeAlphabet(f.toLowerCase());
              !Object.prototype.hasOwnProperty.call(
                wc.allLetters.h,
                f.toLowerCase()
              ) ||
                (this.bold && k) ||
                (0 < b &&
                  ((c += 28 * b * this.scaleX),
                  !this.bold && c >= 0.65 * g.width && ((c = 0), this.rows++)),
                (b = 0),
                (f = new wc(
                  c,
                  this.rows * ib.Y_PER_ROW * this.scaleY,
                  f,
                  this.bold,
                  this
                )),
                f.set_x(f.x + f.letterOffset[0] * this.scaleX),
                f.set_y(f.y - f.letterOffset[1] * this.scaleY),
                (f.row = this.rows),
                (k = 0),
                this.bold || (k = 2),
                (c += f.get_width() + (f.letterOffset[0] + k) * this.scaleX),
                (d[this.rows] = c),
                this.add(f),
                this.letters.push(f));
            } else (c = 0), this.rows++;
          }
          e = 0;
          for (a = this.letters; e < a.length; )
            (f = a[e]),
              ++e,
              (b = f.spawnPos),
              (c = f.x),
              (k = f.y),
              null == k && (k = 0),
              null == c && (c = 0),
              b.set_x(c),
              b.set_y(k),
              (b = f.spawnScale),
              (c = this.scaleX),
              (k = this.scaleY),
              null == k && (k = 0),
              null == c && (c = 0),
              b.set_x(c),
              b.set_y(k),
              (f.rowWidth = d[f.row]);
          0 < this.letters.length && this.rows++;
        },
        __class__: ib,
        __properties__: q(wa.prototype.__properties__, {
          set_scaleY: "set_scaleY",
          set_scaleX: "set_scaleX",
          set_alignment: "set_alignment",
          set_text: "set_text",
        }),
      });
      var wc = function (a, b, c, d, e) {
        this.row = this.rowWidth = 0;
        var f = new ba(0, 0);
        this.spawnScale = f;
        this.spawnPos = f = new ba(0, 0);
        this.letterOffset = [0, 0];
        this.alignOffset = 0;
        F.call(this, a, b);
        this.parent = e;
        this.set_image("alphabet");
        this.set_antialiasing(y.globalAntialiasing);
        a = wc.allLetters.h["?"];
        b = c.toLowerCase();
        Object.prototype.hasOwnProperty.call(wc.allLetters.h, b) &&
          (a = wc.allLetters.h[b]);
        d
          ? ((c = " bold"),
            null != a &&
              null != a.offsetsBold &&
              ((this.letterOffset[0] = a.offsetsBold[0]),
              (this.letterOffset[1] = a.offsetsBold[1])))
          : wc.isTypeAlphabet(b)
          ? (c = b != c ? " uppercase" : " lowercase")
          : ((c = " normal"),
            null != a &&
              null != a.offsets &&
              ((this.letterOffset[0] = a.offsets[0]),
              (this.letterOffset[1] = a.offsets[1])));
        d = b;
        null != a && null != a.anim && (d = a.anim);
        d += c;
        this.animation.addByPrefix(d, d, 24);
        this.animation.play(d, !0);
        null == this.animation._curAnim &&
          (" bold" != c && (c = " normal"),
          (d = "question" + c),
          this.animation.addByPrefix(d, d, 24),
          this.animation.play(d, !0));
        this.updateHitbox();
        this.updateLetterOffset();
      };
      h.AlphaCharacter = wc;
      wc.__name__ = "AlphaCharacter";
      wc.isTypeAlphabet = function (a) {
        a = a.charCodeAt(0);
        return 65 <= a && 90 >= a ? !0 : 97 <= a ? 122 >= a : !1;
      };
      wc.__super__ = F;
      wc.prototype = q(F.prototype, {
        set_image: function (a) {
          var b = null;
          null != this.animation && (b = this.animation.get_name());
          this.image = a;
          var c = G.returnGraphic(a, null);
          this.set_frames(
            jb.fromSparrow(c, G.getPath("images/" + a + ".xml", "TEXT", null))
          );
          this.scale.set_x(this.parent.scaleX);
          this.scale.set_y(this.parent.scaleY);
          this.alignOffset = 0;
          null != b &&
            (this.animation.addByPrefix(b, b, 24),
            this.animation.play(b, !0),
            this.updateHitbox(),
            this.updateLetterOffset());
          return a;
        },
        updateLetterOffset: function () {
          null != this.animation._curAnim &&
            (K.endsWith(this.animation._curAnim.name, "bold") ||
              this.offset.set_y(this.offset.y + -(110 - this.get_height())));
        },
        __class__: wc,
        __properties__: q(F.prototype.__properties__, {
          set_image: "set_image",
        }),
      });
      var bd = function () {};
      h["lime.app.IModule"] = bd;
      bd.__name__ = "lime.app.IModule";
      bd.__isInterface__ = !0;
      bd.prototype = { __class__: bd };
      var Jc = function () {
        this.onExit = new mh();
      };
      h["lime.app.Module"] = Jc;
      Jc.__name__ = "lime.app.Module";
      Jc.__interfaces__ = [bd];
      Jc.prototype = {
        __registerLimeModule: function (a) {},
        __unregisterLimeModule: function (a) {},
        __class__: Jc,
      };
      var ye = function (a) {
        this.gameDeviceCache = new kc();
        this.parent = a;
        this.nextUpdate = this.lastUpdate = this.currentUpdate = 0;
        this.framePeriod = -1;
        lg.init();
        this.accelerometer = xe.registerSensor(po.ACCELEROMETER, 0);
      };
      h["lime._internal.backend.html5.HTML5Application"] = ye;
      ye.__name__ = "lime._internal.backend.html5.HTML5Application";
      ye.prototype = {
        convertKeyCode: function (a) {
          if (65 <= a && 90 >= a) return a + 32;
          switch (a) {
            case 12:
              return 1073741980;
            case 16:
              return 1073742049;
            case 17:
              return 1073742048;
            case 18:
              return 1073742050;
            case 19:
              return 1073741896;
            case 20:
              return 1073741881;
            case 33:
              return 1073741899;
            case 34:
              return 1073741902;
            case 35:
              return 1073741901;
            case 36:
              return 1073741898;
            case 37:
              return 1073741904;
            case 38:
              return 1073741906;
            case 39:
              return 1073741903;
            case 40:
              return 1073741905;
            case 41:
              return 1073741943;
            case 43:
              return 1073741940;
            case 44:
              return 1073741894;
            case 45:
              return 1073741897;
            case 46:
              return 127;
            case 91:
              return 1073742051;
            case 92:
              return 1073742055;
            case 93:
              return 1073742055;
            case 95:
              return 1073742106;
            case 96:
              return 1073741922;
            case 97:
              return 1073741913;
            case 98:
              return 1073741914;
            case 99:
              return 1073741915;
            case 100:
              return 1073741916;
            case 101:
              return 1073741917;
            case 102:
              return 1073741918;
            case 103:
              return 1073741919;
            case 104:
              return 1073741920;
            case 105:
              return 1073741921;
            case 106:
              return 1073741909;
            case 107:
              return 1073741911;
            case 108:
              return 1073741923;
            case 109:
              return 1073741910;
            case 110:
              return 1073741923;
            case 111:
              return 1073741908;
            case 112:
              return 1073741882;
            case 113:
              return 1073741883;
            case 114:
              return 1073741884;
            case 115:
              return 1073741885;
            case 116:
              return 1073741886;
            case 117:
              return 1073741887;
            case 118:
              return 1073741888;
            case 119:
              return 1073741889;
            case 120:
              return 1073741890;
            case 121:
              return 1073741891;
            case 122:
              return 1073741892;
            case 123:
              return 1073741893;
            case 124:
              return 1073741928;
            case 125:
              return 1073741929;
            case 126:
              return 1073741930;
            case 127:
              return 1073741931;
            case 128:
              return 1073741932;
            case 129:
              return 1073741933;
            case 130:
              return 1073741934;
            case 131:
              return 1073741935;
            case 132:
              return 1073741936;
            case 133:
              return 1073741937;
            case 134:
              return 1073741938;
            case 135:
              return 1073741939;
            case 144:
              return 1073741907;
            case 145:
              return 1073741895;
            case 160:
              return 94;
            case 161:
              return 33;
            case 163:
              return 35;
            case 164:
              return 36;
            case 166:
              return 1073742094;
            case 167:
              return 1073742095;
            case 168:
              return 1073742097;
            case 169:
              return 41;
            case 170:
              return 42;
            case 171:
              return 96;
            case 172:
              return 1073741898;
            case 173:
              return 45;
            case 174:
              return 1073741953;
            case 175:
              return 1073741952;
            case 176:
              return 1073742082;
            case 177:
              return 1073742083;
            case 178:
              return 1073742084;
            case 179:
              return 1073742085;
            case 180:
              return 1073742089;
            case 181:
              return 1073742086;
            case 182:
              return 1073741953;
            case 183:
              return 1073741952;
            case 186:
              return 59;
            case 187:
              return 61;
            case 188:
              return 44;
            case 189:
              return 45;
            case 190:
              return 46;
            case 191:
              return 47;
            case 192:
              return 96;
            case 193:
              return 63;
            case 194:
              return 1073741923;
            case 219:
              return 91;
            case 220:
              return 92;
            case 221:
              return 93;
            case 222:
              return 39;
            case 223:
              return 96;
            case 224:
              return 1073742051;
            case 226:
              return 92;
          }
          return a;
        },
        exec: function () {
          window.addEventListener("keydown", n(this, this.handleKeyEvent), !1);
          window.addEventListener("keyup", n(this, this.handleKeyEvent), !1);
          window.addEventListener("focus", n(this, this.handleWindowEvent), !1);
          window.addEventListener("blur", n(this, this.handleWindowEvent), !1);
          window.addEventListener(
            "resize",
            n(this, this.handleWindowEvent),
            !1
          );
          window.addEventListener(
            "beforeunload",
            n(this, this.handleWindowEvent),
            !1
          );
          Object.prototype.hasOwnProperty.call(window, "Accelerometer") &&
            window.addEventListener(
              "devicemotion",
              n(this, this.handleSensorEvent),
              !1
            );
          CanvasRenderingContext2D.prototype.isPointInStroke ||
            (CanvasRenderingContext2D.prototype.isPointInStroke = function (
              a,
              b,
              c
            ) {
              return !1;
            });
          CanvasRenderingContext2D.prototype.isPointInPath ||
            (CanvasRenderingContext2D.prototype.isPointInPath = function (
              a,
              b,
              c
            ) {
              return !1;
            });
          0 == "performance" in window && (window.performance = {});
          if (0 == "now" in window.performance) {
            var a = Date.now();
            performance.timing &&
              performance.timing.navigationStart &&
              (a = performance.timing.navigationStart);
            window.performance.now = function () {
              return Date.now() - a;
            };
          }
          for (
            var b = 0, c = ["ms", "moz", "webkit", "o"], d = 0;
            d < c.length && !window.requestAnimationFrame;
            ++d
          )
            (window.requestAnimationFrame =
              window[c[d] + "RequestAnimationFrame"]),
              (window.cancelAnimationFrame =
                window[c[d] + "CancelAnimationFrame"] ||
                window[c[d] + "CancelRequestAnimationFrame"]);
          window.requestAnimationFrame ||
            (window.requestAnimationFrame = function (a, c) {
              var d = window.performance.now(),
                e = Math.max(0, 16 - (d - b));
              c = window.setTimeout(function () {
                a(d + e);
              }, e);
              b = d + e;
              return c;
            });
          window.cancelAnimationFrame ||
            (window.cancelAnimationFrame = function (a) {
              clearTimeout(a);
            });
          window.requestAnimFrame = window.requestAnimationFrame;
          this.lastUpdate = window.performance.now();
          this.handleApplicationEvent();
          return 0;
        },
        exit: function () {},
        handleApplicationEvent: function (a) {
          a = 0;
          for (var b = this.parent.__windows; a < b.length; ) {
            var c = b[a];
            ++a;
            c.__backend.updateSize();
          }
          this.updateGameDevices();
          this.currentUpdate = window.performance.now();
          if (this.currentUpdate >= this.nextUpdate) {
            this.deltaTime = this.currentUpdate - this.lastUpdate;
            a = 0;
            for (b = this.parent.__windows; a < b.length; )
              (c = b[a]),
                ++a,
                this.parent.onUpdate.dispatch(this.deltaTime | 0),
                null != c.context && c.onRender.dispatch(c.context);
            this.nextUpdate =
              0 > this.framePeriod
                ? this.currentUpdate
                : this.currentUpdate -
                  (this.currentUpdate % this.framePeriod) +
                  this.framePeriod;
            this.lastUpdate = this.currentUpdate;
          }
          window.requestAnimationFrame(n(this, this.handleApplicationEvent));
        },
        handleKeyEvent: function (a) {
          if (null != this.parent.__window) {
            var b = this.convertKeyCode(
                null != a.keyCode ? a.keyCode : a.which
              ),
              c =
                (a.shiftKey ? 3 : 0) |
                (a.ctrlKey ? 192 : 0) |
                (a.altKey ? 768 : 0) |
                (a.metaKey ? 3072 : 0);
            "keydown" == a.type
              ? (this.parent.__window.onKeyDown.dispatch(b, c),
                this.parent.__window.onKeyDown.canceled &&
                  a.cancelable &&
                  a.preventDefault())
              : (this.parent.__window.onKeyUp.dispatch(b, c),
                this.parent.__window.onKeyUp.canceled &&
                  a.cancelable &&
                  a.preventDefault());
          }
        },
        handleSensorEvent: function (a) {
          this.accelerometer.onUpdate.dispatch(
            a.accelerationIncludingGravity.x,
            a.accelerationIncludingGravity.y,
            a.accelerationIncludingGravity.z
          );
        },
        handleWindowEvent: function (a) {
          if (null != this.parent.__window)
            switch (a.type) {
              case "blur":
                this.hidden ||
                  (this.parent.__window.onFocusOut.dispatch(),
                  this.parent.__window.onDeactivate.dispatch(),
                  (this.hidden = !0));
                break;
              case "focus":
                this.hidden &&
                  (this.parent.__window.onFocusIn.dispatch(),
                  this.parent.__window.onActivate.dispatch(),
                  (this.hidden = !1));
                break;
              case "resize":
                this.parent.__window.__backend.handleResizeEvent(a);
                break;
              case "visibilitychange":
                window.document.hidden
                  ? this.hidden ||
                    (this.parent.__window.onFocusOut.dispatch(),
                    this.parent.__window.onDeactivate.dispatch(),
                    (this.hidden = !0))
                  : this.hidden &&
                    (this.parent.__window.onFocusIn.dispatch(),
                    this.parent.__window.onActivate.dispatch(),
                    (this.hidden = !1));
            }
        },
        updateGameDevices: function () {
          var a = xc.__getDeviceData();
          if (null != a)
            for (var b, c, d, e, f, k = 0, r = a.length; k < r; )
              if (((b = k++), (e = a[b]), null != e)) {
                if (!this.gameDeviceCache.h.hasOwnProperty(b)) {
                  f = new Fm();
                  f.id = b;
                  f.connected = e.connected;
                  c = 0;
                  for (d = e.buttons.length; c < d; ) {
                    var l = c++;
                    f.buttons.push(e.buttons[l].value);
                  }
                  c = 0;
                  for (d = e.axes.length; c < d; )
                    (l = c++), f.axes.push(e.axes[l]);
                  "standard" == e.mapping && (f.isGamepad = !0);
                  this.gameDeviceCache.h[b] = f;
                  e.connected &&
                    (xc.__connect(b), f.isGamepad && Bc.__connect(b));
                }
                f = this.gameDeviceCache.h[b];
                d = xc.devices.h[b];
                c = Bc.devices.h[b];
                if (e.connected) {
                  for (var g = 0, u = e.buttons.length; g < u; ) {
                    var m = g++;
                    l = e.buttons[m].value;
                    if (l != f.buttons[m]) {
                      if (6 == m)
                        d.onAxisMove.dispatch(e.axes.length, l),
                          null != c && c.onAxisMove.dispatch(4, l);
                      else if (7 == m)
                        d.onAxisMove.dispatch(e.axes.length + 1, l),
                          null != c && c.onAxisMove.dispatch(5, l);
                      else if (
                        (0 < l
                          ? d.onButtonDown.dispatch(m)
                          : d.onButtonUp.dispatch(m),
                        null != c)
                      ) {
                        switch (m) {
                          case 0:
                            b = 0;
                            break;
                          case 1:
                            b = 1;
                            break;
                          case 2:
                            b = 2;
                            break;
                          case 3:
                            b = 3;
                            break;
                          case 4:
                            b = 9;
                            break;
                          case 5:
                            b = 10;
                            break;
                          case 8:
                            b = 4;
                            break;
                          case 9:
                            b = 6;
                            break;
                          case 10:
                            b = 7;
                            break;
                          case 11:
                            b = 8;
                            break;
                          case 12:
                            b = 11;
                            break;
                          case 13:
                            b = 12;
                            break;
                          case 14:
                            b = 13;
                            break;
                          case 15:
                            b = 14;
                            break;
                          case 16:
                            b = 5;
                            break;
                          default:
                            continue;
                        }
                        0 < l
                          ? c.onButtonDown.dispatch(b)
                          : c.onButtonUp.dispatch(b);
                      }
                      f.buttons[m] = l;
                    }
                  }
                  b = 0;
                  for (l = e.axes.length; b < l; )
                    (g = b++),
                      e.axes[g] != f.axes[g] &&
                        (d.onAxisMove.dispatch(g, e.axes[g]),
                        null != c && c.onAxisMove.dispatch(g, e.axes[g]),
                        (f.axes[g] = e.axes[g]));
                } else
                  f.connected &&
                    ((f.connected = !1),
                    xc.__disconnect(b),
                    Bc.__disconnect(b));
              }
        },
        __class__: ye,
      };
      var B = function () {
        this.onCreateWindow = new Gm();
        this.onUpdate = new mh();
        this.onExit = new mh();
        null == B.current && (B.current = this);
        this.meta = new Q();
        this.modules = [];
        this.__windowByID = new kc();
        this.__windows = [];
        this.__backend = new ye(this);
        this.__registerLimeModule(this);
        this.__preloader = new Hm();
        this.__preloader.onProgress.add(n(this, this.onPreloadProgress));
        this.__preloader.onComplete.add(n(this, this.onPreloadComplete));
      };
      h["lime.app.Application"] = B;
      B.__name__ = "lime.app.Application";
      B.__super__ = Jc;
      B.prototype = q(Jc.prototype, {
        addModule: function (a) {
          a.__registerLimeModule(this);
          this.modules.push(a);
        },
        exec: function () {
          B.current = this;
          return this.__backend.exec();
        },
        onGamepadAxisMove: function (a, b, c) {},
        onGamepadButtonDown: function (a, b) {},
        onGamepadButtonUp: function (a, b) {},
        onGamepadConnect: function (a) {},
        onGamepadDisconnect: function (a) {},
        onJoystickAxisMove: function (a, b, c) {},
        onJoystickButtonDown: function (a, b) {},
        onJoystickButtonUp: function (a, b) {},
        onJoystickConnect: function (a) {},
        onJoystickDisconnect: function (a) {},
        onJoystickHatMove: function (a, b, c) {},
        onJoystickTrackballMove: function (a, b, c, d) {},
        onKeyDown: function (a, b) {},
        onKeyUp: function (a, b) {},
        onModuleExit: function (a) {},
        onMouseDown: function (a, b, c) {},
        onMouseMove: function (a, b) {},
        onMouseMoveRelative: function (a, b) {},
        onMouseUp: function (a, b, c) {},
        onMouseWheel: function (a, b, c) {},
        onPreloadComplete: function () {},
        onPreloadProgress: function (a, b) {},
        onRenderContextLost: function () {},
        onRenderContextRestored: function (a) {},
        onTextEdit: function (a, b, c) {},
        onTextInput: function (a) {},
        onTouchCancel: function (a) {},
        onTouchEnd: function (a) {},
        onTouchMove: function (a) {},
        onTouchStart: function (a) {},
        onWindowActivate: function () {},
        onWindowClose: function () {},
        onWindowCreate: function () {},
        onWindowDeactivate: function () {},
        onWindowDropFile: function (a) {},
        onWindowEnter: function () {},
        onWindowExpose: function () {},
        onWindowFocusIn: function () {},
        onWindowFocusOut: function () {},
        onWindowFullscreen: function () {},
        onWindowLeave: function () {},
        onWindowMove: function (a, b) {},
        onWindowMinimize: function () {},
        onWindowResize: function (a, b) {},
        onWindowRestore: function () {},
        removeModule: function (a) {
          null != a &&
            (a.__unregisterLimeModule(this), X.remove(this.modules, a));
        },
        render: function (a) {},
        update: function (a) {},
        __registerLimeModule: function (a) {
          a.onUpdate.add(n(this, this.update));
          a.onExit.add(n(this, this.onModuleExit), !1, 0);
          a.onExit.add(n(this, this.__onModuleExit), !1, -1e3);
          for (a = Bc.devices.iterator(); a.hasNext(); ) {
            var b = a.next();
            this.__onGamepadConnect(b);
          }
          Bc.onConnect.add(n(this, this.__onGamepadConnect));
          for (a = xc.devices.iterator(); a.hasNext(); )
            (b = a.next()), this.__onJoystickConnect(b);
          xc.onConnect.add(n(this, this.__onJoystickConnect));
          oc.onCancel.add(n(this, this.onTouchCancel));
          oc.onStart.add(n(this, this.onTouchStart));
          oc.onMove.add(n(this, this.onTouchMove));
          oc.onEnd.add(n(this, this.onTouchEnd));
        },
        __removeWindow: function (a) {
          null != a &&
            this.__windowByID.h.hasOwnProperty(a.id) &&
            (this.__window == a && (this.__window = null),
            X.remove(this.__windows, a),
            this.__windowByID.remove(a.id),
            a.close(),
            this.__checkForAllWindowsClosed());
        },
        __checkForAllWindowsClosed: function () {
          0 == this.__windows.length && Pc.exit(0);
        },
        __onGamepadConnect: function (a) {
          this.onGamepadConnect(a);
          var b = n(this, this.onGamepadAxisMove),
            c = function (c, d) {
              b(a, c, d);
            };
          a.onAxisMove.add(c);
          var d = n(this, this.onGamepadButtonDown);
          c = function (b) {
            d(a, b);
          };
          a.onButtonDown.add(c);
          var e = n(this, this.onGamepadButtonUp);
          c = function (b) {
            e(a, b);
          };
          a.onButtonUp.add(c);
          var f = n(this, this.onGamepadDisconnect);
          a.onDisconnect.add(function () {
            f(a);
          });
        },
        __onJoystickConnect: function (a) {
          this.onJoystickConnect(a);
          var b = n(this, this.onJoystickAxisMove),
            c = function (c, d) {
              b(a, c, d);
            };
          a.onAxisMove.add(c);
          var d = n(this, this.onJoystickButtonDown);
          c = function (b) {
            d(a, b);
          };
          a.onButtonDown.add(c);
          var e = n(this, this.onJoystickButtonUp);
          c = function (b) {
            e(a, b);
          };
          a.onButtonUp.add(c);
          var f = n(this, this.onJoystickDisconnect);
          a.onDisconnect.add(function () {
            f(a);
          });
          var k = n(this, this.onJoystickHatMove);
          c = function (b, c) {
            k(a, b, c);
          };
          a.onHatMove.add(c);
          var r = n(this, this.onJoystickTrackballMove);
          c = function (b, c, d) {
            r(a, b, c, d);
          };
          a.onTrackballMove.add(c);
        },
        __onModuleExit: function (a) {
          this.onExit.canceled ||
            (this.__unregisterLimeModule(this),
            this.__backend.exit(),
            B.current == this && (B.current = null));
        },
        __onWindowClose: function (a) {
          if (this.__window == a) this.onWindowClose();
          this.__removeWindow(a);
        },
        __unregisterLimeModule: function (a) {
          a.onUpdate.remove(n(this, this.update));
          a.onExit.remove(n(this, this.__onModuleExit));
          a.onExit.remove(n(this, this.onModuleExit));
          Bc.onConnect.remove(n(this, this.__onGamepadConnect));
          xc.onConnect.remove(n(this, this.__onJoystickConnect));
          oc.onCancel.remove(n(this, this.onTouchCancel));
          oc.onStart.remove(n(this, this.onTouchStart));
          oc.onMove.remove(n(this, this.onTouchMove));
          oc.onEnd.remove(n(this, this.onTouchEnd));
        },
        __class__: B,
      });
      var Cc = function () {};
      h.ApplicationMain = Cc;
      Cc.__name__ = "ApplicationMain";
      Cc.main = function () {
        Pc.__registerEntryPoint("PsychEngine", Cc.create);
      };
      Cc.create = function (a) {
        var b = new Ii();
        Qc.init(a);
        b.meta.h.build = "3";
        b.meta.h.company = "ShadowMario";
        b.meta.h.file = "PsychEngine";
        b.meta.h.name = "Friday Night Funkin': Psych Engine";
        b.meta.h.packageName = "com.shadowmario.psychengine";
        b.meta.h.version = "0.2.8";
        var c = {
          allowHighDPI: !0,
          alwaysOnTop: !1,
          borderless: !1,
          element: null,
          frameRate: null,
          height: 720,
          hidden: !1,
          maximized: !1,
          minimized: !1,
          parameters: {},
          resizable: !0,
          title: "Friday Night Funkin': Psych Engine",
          width: 1280,
          x: null,
          y: null,
          context: {
            antialiasing: 0,
            background: 0,
            colorDepth: 32,
            depth: !0,
            hardware: !0,
            stencil: !0,
            type: null,
            vsync: !1,
          },
        };
        if (null == b.__window && null != a)
          for (var d = 0, e = qa.fields(a); d < e.length; ) {
            var f = e[d];
            ++d;
            Object.prototype.hasOwnProperty.call(c, f)
              ? (c[f] = qa.field(a, f))
              : Object.prototype.hasOwnProperty.call(c.context, f) &&
                (c.context[f] = qa.field(a, f));
          }
        b.createWindow(c);
        var k = new Tj(new Uj());
        b.__preloader.onProgress.add(function (a, b) {
          k.update(a, b);
        });
        b.__preloader.onComplete.add(function () {
          k.start();
        });
        var r = b.__window.stage;
        k.onComplete.add(function () {
          Cc.start(r);
        });
        d = 0;
        for (e = Qc.preloadLibraries; d < e.length; )
          (a = e[d]), ++d, b.__preloader.addLibrary(a);
        d = 0;
        for (e = Qc.preloadLibraryNames; d < e.length; )
          (a = e[d]), ++d, b.__preloader.addLibraryName(a);
        b.__preloader.load();
        b.exec();
      };
      Cc.start = function (a) {
        if (a.__uncaughtErrorEvents.__enabled)
          try {
            Rb.main(),
              a.dispatchEvent(new Ba("resize", !1, !1)),
              a.window.__fullscreen &&
                a.dispatchEvent(new Hg("fullScreen", !1, !1, !0, !0));
          } catch (c) {
            pc.lastError = c;
            var b = N.caught(c).unwrap();
            a.__handleError(b);
          }
        else
          Rb.main(),
            a.dispatchEvent(new Ba("resize", !1, !1)),
            a.window.__fullscreen &&
              a.dispatchEvent(new Hg("fullScreen", !1, !1, !0, !0));
      };
      var Dc = function () {};
      h["openfl.events.IEventDispatcher"] = Dc;
      Dc.__name__ = "openfl.events.IEventDispatcher";
      Dc.__isInterface__ = !0;
      Dc.prototype = { __class__: Dc };
      var pa = function (a) {
        null != a && (this.__targetDispatcher = a);
      };
      h["openfl.events.EventDispatcher"] = pa;
      pa.__name__ = "openfl.events.EventDispatcher";
      pa.__interfaces__ = [Dc];
      pa.prototype = {
        addEventListener: function (a, b, c, d, e) {
          null == e && (e = !1);
          null == d && (d = 0);
          null == c && (c = !1);
          if (null != b)
            if (
              (null == this.__eventMap &&
                ((this.__eventMap = new Q()), (this.__iterators = new Q())),
              Object.prototype.hasOwnProperty.call(this.__eventMap.h, a))
            ) {
              l = this.__eventMap.h[a];
              for (var f = 0, k = l.length; f < k; ) {
                var r = f++;
                if (l[r].match(b, c)) return;
              }
              a = this.__iterators.h[a];
              for (f = 0; f < a.length; ) (k = a[f]), ++f, k.active && k.copy();
              this.__addListenerByPriority(l, new nh(b, c, d, e));
            } else {
              var l = [];
              l.push(new nh(b, c, d, e));
              k = new Ji(l);
              this.__eventMap.h[a] = l;
              this.__iterators.h[a] = [k];
            }
        },
        dispatchEvent: function (a) {
          a.target =
            null != this.__targetDispatcher ? this.__targetDispatcher : this;
          return this.__dispatchEvent(a);
        },
        hasEventListener: function (a) {
          return null == this.__eventMap
            ? !1
            : Object.prototype.hasOwnProperty.call(this.__eventMap.h, a);
        },
        removeEventListener: function (a, b, c) {
          null == c && (c = !1);
          if (null != this.__eventMap && null != b) {
            var d = this.__eventMap.h[a];
            if (null != d) {
              for (
                var e = this.__iterators.h[a], f = 0, k = d.length;
                f < k;

              ) {
                var r = f++;
                if (d[r].match(b, c)) {
                  for (b = 0; b < e.length; )
                    (c = e[b]), ++b, c.remove(d[r], r);
                  d.splice(r, 1);
                  break;
                }
              }
              0 == d.length &&
                ((d = this.__eventMap),
                (e = a),
                Object.prototype.hasOwnProperty.call(d.h, e) && delete d.h[e],
                (d = this.__iterators),
                (e = a),
                Object.prototype.hasOwnProperty.call(d.h, e) && delete d.h[e]);
              0 >= Object.keys(this.__eventMap.h).length &&
                (this.__iterators = this.__eventMap = null);
            }
          }
        },
        __dispatchEvent: function (a) {
          if (null == this.__eventMap || null == a) return !0;
          var b = a.type,
            c = this.__eventMap.h[b];
          if (null == c) return !0;
          null == a.target &&
            (a.target =
              null != this.__targetDispatcher ? this.__targetDispatcher : this);
          a.currentTarget = this;
          var d = 1 == a.eventPhase;
          b = this.__iterators.h[b];
          var e = b[0];
          e.active && ((e = new Ji(c)), b.push(e));
          e.start();
          for (var f = e; f.hasNext(); ) {
            var k = f.next();
            if (null != k && k.useCapture == d) {
              if (k.useWeakReference && null != k.weakRefCallback) {
                var r = k.weakRefCallback.deref();
                null == r
                  ? ((r = e.index - 1), c.splice(r, 1), e.remove(k, r))
                  : r(a);
              } else k.callback(a);
              if (a.__isCanceledNow) break;
            }
          }
          e.stop();
          e != b[0] ? X.remove(b, e) : e.reset(c);
          return !a.isDefaultPrevented();
        },
        __addListenerByPriority: function (a, b) {
          for (var c = a.length, d = c, e = 0; e < c; ) {
            var f = e++;
            if (a[f].priority < b.priority) {
              d = f;
              break;
            }
          }
          a.splice(d, 0, b);
        },
        __class__: pa,
      };
      var Xa = function () {};
      h["openfl.display.IBitmapDrawable"] = Xa;
      Xa.__name__ = "openfl.display.IBitmapDrawable";
      Xa.__isInterface__ = !0;
      Xa.prototype = { __class__: Xa };
      var Qa = function () {};
      h["haxe.IMap"] = Qa;
      Qa.__name__ = "haxe.IMap";
      Qa.__isInterface__ = !0;
      Qa.prototype = { __class__: Qa };
      var Q = function () {
        this.h = Object.create(null);
      };
      h["haxe.ds.StringMap"] = Q;
      Q.__name__ = "haxe.ds.StringMap";
      Q.__interfaces__ = [Qa];
      Q.createCopy = function (a) {
        var b = new Q(),
          c;
        for (c in a) b.h[c] = a[c];
        return b;
      };
      Q.stringify = function (a) {
        var b = "{",
          c = !0,
          d;
        for (d in a)
          c ? (c = !1) : (b += ","), (b += d + " => " + M.string(a[d]));
        return b + "}";
      };
      Q.prototype = {
        get: function (a) {
          return this.h[a];
        },
        set: function (a, b) {
          this.h[a] = b;
        },
        remove: function (a) {
          return Object.prototype.hasOwnProperty.call(this.h, a)
            ? (delete this.h[a], !0)
            : !1;
        },
        keys: function () {
          return new Vj(this.h);
        },
        __class__: Q,
      };
      var ja = {
          toIntVector: function (a, b, c, d) {
            return new Jh(b, c, d);
          },
          toFloatVector: function (a, b, c, d) {
            return new Wf(b, c, d, !0);
          },
          toObjectVector: function (a, b, c, d) {
            return new cd(b, c, d, !0);
          },
        },
        na = function () {};
      h["openfl._Vector.IVector"] = na;
      na.__name__ = "openfl._Vector.IVector";
      na.__isInterface__ = !0;
      na.prototype = { __class__: na };
      var cd = function (a, b, c, d) {
        null == d && (d = !1);
        null == b && (b = !1);
        null == a && (a = 0);
        if (d) {
          if (((this.__array = []), null != c)) {
            d = 0;
            for (var e = c.length; d < e; ) {
              var f = d++;
              this.__array[f] = c[f];
            }
          }
        } else null == c && (c = []), (this.__array = c);
        0 < a && this.set_length(a);
        this.fixed = b;
      };
      h["openfl._Vector.ObjectVector"] = cd;
      cd.__name__ = "openfl._Vector.ObjectVector";
      cd.__interfaces__ = [na];
      cd.prototype = {
        get: function (a) {
          return this.__array[a];
        },
        indexOf: function (a, b) {
          null == b && (b = 0);
          for (var c = this.__array.length; b < c; ) {
            var d = b++;
            if (this.__array[d] == a) return d;
          }
          return -1;
        },
        insertAt: function (a, b) {
          (!this.fixed || a < this.__array.length) &&
            this.__array.splice(a, 0, b);
        },
        iterator: function () {
          return new Vf(this.__array);
        },
        push: function (a) {
          return this.fixed ? this.__array.length : this.__array.push(a);
        },
        removeAt: function (a) {
          return !this.fixed || a < this.__array.length
            ? this.__array.splice(a, 1)[0]
            : null;
        },
        set: function (a, b) {
          return !this.fixed || a < this.__array.length
            ? (this.__array[a] = b)
            : b;
        },
        splice: function (a, b) {
          return new cd(0, !1, this.__array.splice(a, b));
        },
        toJSON: function () {
          return this.__array;
        },
        unshift: function (a) {
          this.fixed || this.__array.unshift(a);
        },
        get_length: function () {
          return this.__array.length;
        },
        set_length: function (a) {
          if (!this.fixed) {
            var b = this.__array.length;
            0 > a && (a = 0);
            if (a > b) for (; b < a; ) b++, this.__array.push(null);
            else for (; this.__array.length > a; ) this.__array.pop();
          }
          return this.__array.length;
        },
        __class__: cd,
        __properties__: { set_length: "set_length", get_length: "get_length" },
      };
      var db = function (a, b, c) {
        this.__pool = new Yb();
        this.inactiveObjects = this.activeObjects = 0;
        this.__inactiveObject1 = this.__inactiveObject0 = null;
        this.__inactiveObjectList = new kb();
        null != a && (this.create = a);
        null != b && (this.clean = b);
        null != c && this.set_size(c);
      };
      h["lime.utils.ObjectPool"] = db;
      db.__name__ = "lime.utils.ObjectPool";
      db.prototype = {
        clean: function (a) {},
        create: function () {
          return null;
        },
        get: function () {
          var a = null;
          if (0 < this.inactiveObjects)
            null != this.__inactiveObject0
              ? ((a = this.__inactiveObject0), (this.__inactiveObject0 = null))
              : null != this.__inactiveObject1
              ? ((a = this.__inactiveObject1), (this.__inactiveObject1 = null))
              : ((a = this.__inactiveObjectList.pop()),
                0 < this.__inactiveObjectList.length &&
                  (this.__inactiveObject0 = this.__inactiveObjectList.pop()),
                0 < this.__inactiveObjectList.length &&
                  (this.__inactiveObject1 = this.__inactiveObjectList.pop())),
              this.inactiveObjects--,
              this.activeObjects++;
          else if (null == this.__size || this.activeObjects < this.__size)
            (a = this.create()),
              null != a && (this.__pool.set(a, !0), this.activeObjects++);
          return a;
        },
        release: function (a) {
          this.activeObjects--;
          null == this.__size ||
          this.activeObjects + this.inactiveObjects < this.__size
            ? (this.clean(a),
              null == this.__inactiveObject0
                ? (this.__inactiveObject0 = a)
                : null == this.__inactiveObject1
                ? (this.__inactiveObject1 = a)
                : this.__inactiveObjectList.add(a),
              this.inactiveObjects++)
            : this.__pool.remove(a);
        },
        __removeInactive: function (a) {
          if (
            !(0 >= a || 0 == this.inactiveObjects) &&
            (null != this.__inactiveObject0 &&
              (this.__pool.remove(this.__inactiveObject0),
              (this.__inactiveObject0 = null),
              this.inactiveObjects--,
              --a),
            0 != a &&
              0 != this.inactiveObjects &&
              (null != this.__inactiveObject1 &&
                (this.__pool.remove(this.__inactiveObject1),
                (this.__inactiveObject1 = null),
                this.inactiveObjects--,
                --a),
              0 != a && 0 != this.inactiveObjects))
          )
            for (var b = this.__inactiveObjectList.h; null != b; ) {
              var c = b.item;
              b = b.next;
              this.__pool.remove(c);
              this.__inactiveObjectList.remove(c);
              this.inactiveObjects--;
              --a;
              if (0 == a || 0 == this.inactiveObjects) break;
            }
        },
        set_size: function (a) {
          if (null == a) this.__size = null;
          else {
            var b = this.inactiveObjects + this.activeObjects;
            this.__size = a;
            if (b > a) this.__removeInactive(b - a);
            else if (a > b)
              for (var c = 0, d = a - b; c < d; )
                if ((c++, (b = this.create()), null != b))
                  this.__pool.set(b, !1),
                    this.__inactiveObjectList.add(b),
                    this.inactiveObjects++;
                else break;
          }
          return a;
        },
        __class__: db,
        __properties__: { set_size: "set_size" },
      };
      var Yb = function () {
        this.h = { __keys__: {} };
      };
      h["haxe.ds.ObjectMap"] = Yb;
      Yb.__name__ = "haxe.ds.ObjectMap";
      Yb.__interfaces__ = [Qa];
      Yb.prototype = {
        set: function (a, b) {
          var c = a.__id__;
          null == c && (c = a.__id__ = H.$haxeUID++);
          this.h[c] = b;
          this.h.__keys__[c] = a;
        },
        get: function (a) {
          return this.h[a.__id__];
        },
        remove: function (a) {
          a = a.__id__;
          if (null == this.h.__keys__[a]) return !1;
          delete this.h[a];
          delete this.h.__keys__[a];
          return !0;
        },
        keys: function () {
          var a = [],
            b;
          for (b in this.h.__keys__)
            this.h.hasOwnProperty(b) && a.push(this.h.__keys__[b]);
          return new Vf(a);
        },
        __class__: Yb,
      };
      var kb = function () {
        this.length = 0;
      };
      h["haxe.ds.List"] = kb;
      kb.__name__ = "haxe.ds.List";
      kb.prototype = {
        add: function (a) {
          a = new Wj(a, null);
          null == this.h ? (this.h = a) : (this.q.next = a);
          this.q = a;
          this.length++;
        },
        push: function (a) {
          this.h = a = new Wj(a, this.h);
          null == this.q && (this.q = a);
          this.length++;
        },
        pop: function () {
          if (null == this.h) return null;
          var a = this.h.item;
          this.h = this.h.next;
          null == this.h && (this.q = null);
          this.length--;
          return a;
        },
        clear: function () {
          this.q = this.h = null;
          this.length = 0;
        },
        remove: function (a) {
          for (var b = null, c = this.h; null != c; ) {
            if (c.item == a)
              return (
                null == b ? (this.h = c.next) : (b.next = c.next),
                this.q == c && (this.q = b),
                this.length--,
                !0
              );
            b = c;
            c = c.next;
          }
          return !1;
        },
        iterator: function () {
          return new Im(this.h);
        },
        __class__: kb,
      };
      var z = function () {
        pa.call(this);
        this.__alpha = this.__drawableType = 1;
        this.__blendMode = 10;
        this.__cacheAsBitmap = !1;
        this.__transform = new xa();
        this.__visible = !0;
        this.__rotationSine = this.__rotation = 0;
        this.__worldAlpha =
          this.__scaleY =
          this.__scaleX =
          this.__rotationCosine =
            1;
        this.__worldBlendMode = 10;
        this.__worldTransform = new xa();
        this.__worldColorTransform = new Qb();
        this.__renderTransform = new xa();
        this.__worldVisible = !0;
        this.set_name("instance" + ++z.__instanceCount);
        null != z.__initStage &&
          ((this.stage = z.__initStage),
          (z.__initStage = null),
          this.stage.addChild(this));
      };
      h["openfl.display.DisplayObject"] = z;
      z.__name__ = "openfl.display.DisplayObject";
      z.__interfaces__ = [Xa];
      z.__super__ = pa;
      z.prototype = q(pa.prototype, {
        addEventListener: function (a, b, c, d, e) {
          null == e && (e = !1);
          null == d && (d = 0);
          null == c && (c = !1);
          switch (a) {
            case "activate":
            case "deactivate":
            case "enterFrame":
            case "exitFrame":
            case "frameConstructed":
            case "render":
              Object.prototype.hasOwnProperty.call(z.__broadcastEvents.h, a) ||
                (z.__broadcastEvents.h[a] = []);
              var f = z.__broadcastEvents.h[a];
              -1 == f.indexOf(this) && f.push(this);
              break;
            case "clearDOM":
            case "renderCairo":
            case "renderCanvas":
            case "renderDOM":
            case "renderOpenGL":
              null == this.__customRenderEvent &&
                ((this.__customRenderEvent = new Xj(null)),
                (this.__customRenderEvent.objectColorTransform = new Qb()),
                (this.__customRenderEvent.objectMatrix = new xa()),
                (this.__customRenderClear = !0));
          }
          pa.prototype.addEventListener.call(this, a, b, c, d, e);
        },
        dispatchEvent: function (a) {
          if (a instanceof Gb) {
            var b = this.__getRenderTransform();
            a.stageX = a.localX * b.a + a.localY * b.c + b.tx;
            b = this.__getRenderTransform();
            a.stageY = a.localX * b.b + a.localY * b.d + b.ty;
          } else
            a instanceof Qe &&
              ((b = this.__getRenderTransform()),
              (a.stageX = a.localX * b.a + a.localY * b.c + b.tx),
              (b = this.__getRenderTransform()),
              (a.stageY = a.localX * b.b + a.localY * b.d + b.ty));
          a.target = this;
          return this.__dispatchWithCapture(a);
        },
        getBounds: function (a) {
          var b = xa.__pool.get();
          if (null != a && a != this) {
            b.copyFrom(this.__getWorldTransform());
            var c = xa.__pool.get();
            c.copyFrom(a.__getWorldTransform());
            c.invert();
            b.concat(c);
            xa.__pool.release(c);
          } else b.identity();
          a = new ha();
          this.__getBounds(a, b);
          xa.__pool.release(b);
          return a;
        },
        globalToLocal: function (a) {
          return this.__globalToLocal(a, new gb());
        },
        removeEventListener: function (a, b, c) {
          null == c && (c = !1);
          pa.prototype.removeEventListener.call(this, a, b, c);
          switch (a) {
            case "activate":
            case "deactivate":
            case "enterFrame":
            case "exitFrame":
            case "frameConstructed":
            case "render":
              this.hasEventListener(a) ||
                (Object.prototype.hasOwnProperty.call(
                  z.__broadcastEvents.h,
                  a
                ) &&
                  X.remove(z.__broadcastEvents.h[a], this));
              break;
            case "clearDOM":
            case "renderCairo":
            case "renderCanvas":
            case "renderDOM":
            case "renderOpenGL":
              this.hasEventListener("clearDOM") ||
                this.hasEventListener("renderCairo") ||
                this.hasEventListener("renderCanvas") ||
                this.hasEventListener("renderDOM") ||
                this.hasEventListener("renderOpenGL") ||
                (this.__customRenderEvent = null);
          }
        },
        __cleanup: function () {
          this.__context = this.__canvas = this.__cairo = null;
          null != this.__graphics && this.__graphics.__cleanup();
          null != this.__cacheBitmap &&
            (this.__cacheBitmap.__cleanup(), (this.__cacheBitmap = null));
          null != this.__cacheBitmapData &&
            (this.__cacheBitmapData.dispose(), (this.__cacheBitmapData = null));
        },
        __dispatch: function (a) {
          if (null != this.__eventMap && this.hasEventListener(a.type)) {
            var b = pa.prototype.__dispatchEvent.call(this, a);
            return a.__isCanceled ? !0 : b;
          }
          return !0;
        },
        __dispatchChildren: function (a) {},
        __dispatchEvent: function (a) {
          var b = a.bubbles ? this.parent : null,
            c = pa.prototype.__dispatchEvent.call(this, a);
          if (a.__isCanceled) return !0;
          null != b &&
            b != this &&
            ((a.eventPhase = 3),
            null == a.target && (a.target = this),
            b.__dispatchEvent(a));
          return c;
        },
        __dispatchWithCapture: function (a) {
          null == a.target && (a.target = this);
          if (null != this.parent)
            if (((a.eventPhase = 1), this.parent == this.stage))
              this.parent.__dispatch(a);
            else {
              for (
                var b = z.__tempStack.get(), c = this.parent, d = 0;
                null != c;

              )
                b.set(d, c), (c = c.parent), ++d;
              c = 0;
              for (var e = d; c < e; ) {
                var f = c++;
                b.get(d - f - 1).__dispatch(a);
              }
              z.__tempStack.release(b);
            }
          a.eventPhase = 2;
          return this.__dispatchEvent(a);
        },
        __enterFrame: function (a) {},
        __getBounds: function (a, b) {
          null != this.__graphics && this.__graphics.__getBounds(a, b);
        },
        __getCursor: function () {
          return null;
        },
        __getFilterBounds: function (a, b) {
          this.__getRenderBounds(a, b);
          if (null != this.__filters) {
            b = ha.__pool.get();
            for (var c = 0, d = this.__filters; c < d.length; ) {
              var e = d[c];
              ++c;
              b.__expand(
                -e.__leftExtension,
                -e.__topExtension,
                e.__leftExtension + e.__rightExtension,
                e.__topExtension + e.__bottomExtension
              );
            }
            a.width += b.width;
            a.height += b.height;
            a.x += b.x;
            a.y += b.y;
            ha.__pool.release(b);
          }
        },
        __getInteractive: function (a) {
          return !1;
        },
        __getLocalBounds: function (a) {
          this.__getBounds(a, this.__transform);
          a.x -= this.__transform.tx;
          a.y -= this.__transform.ty;
        },
        __getRenderBounds: function (a, b) {
          if (null == this.__scrollRect) this.__getBounds(a, b);
          else {
            var c = ha.__pool.get();
            c.copyFrom(this.__scrollRect);
            c.__transform(c, b);
            a.__expand(c.x, c.y, c.width, c.height);
            ha.__pool.release(c);
          }
        },
        __getRenderTransform: function () {
          this.__getWorldTransform();
          return this.__renderTransform;
        },
        __getWorldTransform: function () {
          if (this.__transformDirty || this.__worldTransformInvalid) {
            var a = [],
              b = this;
            if (null == this.parent) this.__update(!0, !1);
            else
              for (
                ;
                b != this.stage && (a.push(b), (b = b.parent), null != b);

              );
            for (var c = a.length; 0 <= --c; ) (b = a[c]), b.__update(!0, !1);
          }
          return this.__worldTransform;
        },
        __globalToLocal: function (a, b) {
          this.__getRenderTransform();
          if (a == b) {
            var c = this.__renderTransform,
              d = c.a * c.d - c.b * c.c;
            if (0 == d) (a.x = -c.tx), (a.y = -c.ty);
            else {
              var e = (1 / d) * (c.c * (c.ty - a.y) + c.d * (a.x - c.tx));
              a.y = (1 / d) * (c.a * (a.y - c.ty) + c.b * (c.tx - a.x));
              a.x = e;
            }
          } else
            (c = this.__renderTransform),
              (d = c.a * c.d - c.b * c.c),
              (b.x =
                0 == d
                  ? -c.tx
                  : (1 / d) * (c.c * (c.ty - a.y) + c.d * (a.x - c.tx))),
              (c = this.__renderTransform),
              (d = c.a * c.d - c.b * c.c),
              (b.y =
                0 == d
                  ? -c.ty
                  : (1 / d) * (c.a * (a.y - c.ty) + c.b * (c.tx - a.x)));
          return b;
        },
        __hitTest: function (a, b, c, d, e, f) {
          if (null != this.__graphics) {
            if (
              !f.__visible ||
              this.__isMask ||
              (null != this.get_mask() && !this.get_mask().__hitTestMask(a, b))
            )
              return !1;
            if (this.__graphics.__hitTest(a, b, c, this.__getRenderTransform()))
              return null == d || e || d.push(f), !0;
          }
          return !1;
        },
        __hitTestMask: function (a, b) {
          return null != this.__graphics &&
            this.__graphics.__hitTest(a, b, !0, this.__getRenderTransform())
            ? !0
            : !1;
        },
        __setParentRenderDirty: function () {
          var a =
            null != this.__renderParent ? this.__renderParent : this.parent;
          null == a ||
            a.__renderDirty ||
            ((a.__renderDirty = !0), a.__setParentRenderDirty());
        },
        __setStageReference: function (a) {
          this.stage = a;
        },
        __setTransformDirty: function () {
          this.__transformDirty ||
            ((this.__transformDirty = !0),
            this.__setWorldTransformInvalid(),
            this.__setParentRenderDirty());
        },
        __setWorldTransformInvalid: function () {
          this.__worldTransformInvalid = !0;
        },
        __update: function (a, b) {
          var c =
            null != this.__renderParent ? this.__renderParent : this.parent;
          this.__isMask && null == c && (c = this.__maskTarget);
          this.__renderable =
            this.__visible &&
            0 != this.__scaleX &&
            0 != this.__scaleY &&
            !this.__isMask &&
            (null == c || !c.__isMask);
          this.__updateTransforms();
          this.__worldTransformInvalid = this.__transformDirty = !1;
          if (!a)
            if (
              (z.__supportDOM &&
                ((this.__renderTransformChanged =
                  !this.__renderTransform.equals(this.__renderTransformCache)),
                null == this.__renderTransformCache
                  ? (this.__renderTransformCache =
                      this.__renderTransform.clone())
                  : this.__renderTransformCache.copyFrom(
                      this.__renderTransform
                    )),
              null != c)
            ) {
              if (z.__supportDOM) {
                var d = c.__worldVisible && this.__visible;
                this.__worldVisibleChanged = this.__worldVisible != d;
                this.__worldVisible = d;
                d = this.get_alpha() * c.__worldAlpha;
                this.__worldAlphaChanged = this.__worldAlpha != d;
                this.__worldAlpha = d;
              } else this.__worldAlpha = this.get_alpha() * c.__worldAlpha;
              null != this.__objectTransform
                ? (this.__worldColorTransform.__copyFrom(
                    this.__objectTransform.__colorTransform
                  ),
                  this.__worldColorTransform.__combine(c.__worldColorTransform))
                : this.__worldColorTransform.__copyFrom(
                    c.__worldColorTransform
                  );
              this.__worldBlendMode =
                null == this.__blendMode || 10 == this.__blendMode
                  ? c.__worldBlendMode
                  : this.__blendMode;
              this.__worldShader =
                null == this.__shader ? c.__shader : this.__shader;
              this.__worldScale9Grid =
                null == this.__scale9Grid ? c.__scale9Grid : this.__scale9Grid;
            } else
              (this.__worldAlpha = this.get_alpha()),
                z.__supportDOM &&
                  ((this.__worldVisibleChanged =
                    this.__worldVisible != this.__visible),
                  (this.__worldVisible = this.__visible),
                  (this.__worldAlphaChanged =
                    this.__worldAlpha != this.get_alpha())),
                null != this.__objectTransform
                  ? this.__worldColorTransform.__copyFrom(
                      this.__objectTransform.__colorTransform
                    )
                  : this.__worldColorTransform.__identity(),
                (this.__worldBlendMode = this.__blendMode),
                (this.__worldShader = this.__shader),
                (this.__worldScale9Grid = this.__scale9Grid);
          b && null != this.get_mask() && this.get_mask().__update(a, !0);
        },
        __updateTransforms: function (a) {
          var b = null != a;
          a = b ? a : this.__transform;
          null == this.__worldTransform && (this.__worldTransform = new xa());
          null == this.__renderTransform && (this.__renderTransform = new xa());
          var c =
            null != this.__renderParent ? this.__renderParent : this.parent;
          if (b || null == this.parent) this.__worldTransform.copyFrom(a);
          else {
            var d = this.parent.__worldTransform,
              e = this.__worldTransform;
            e.a = a.a * d.a + a.b * d.c;
            e.b = a.a * d.b + a.b * d.d;
            e.c = a.c * d.a + a.d * d.c;
            e.d = a.c * d.b + a.d * d.d;
            e.tx = a.tx * d.a + a.ty * d.c + d.tx;
            e.ty = a.tx * d.b + a.ty * d.d + d.ty;
          }
          b || null == c
            ? this.__renderTransform.copyFrom(a)
            : ((d = c.__renderTransform),
              (e = this.__renderTransform),
              (e.a = a.a * d.a + a.b * d.c),
              (e.b = a.a * d.b + a.b * d.d),
              (e.c = a.c * d.a + a.d * d.c),
              (e.d = a.c * d.b + a.d * d.d),
              (e.tx = a.tx * d.a + a.ty * d.c + d.tx),
              (e.ty = a.tx * d.b + a.ty * d.d + d.ty));
          null != this.__scrollRect &&
            ((b = this.__renderTransform),
            (a = -this.__scrollRect.x),
            (c = -this.__scrollRect.y),
            (b.tx = a * b.a + c * b.c + b.tx),
            (b.ty = a * b.b + c * b.d + b.ty));
        },
        get_alpha: function () {
          return this.__alpha;
        },
        set_alpha: function (a) {
          1 < a && (a = 1);
          0 > a && (a = 0);
          a == this.__alpha ||
            this.get_cacheAsBitmap() ||
            this.__renderDirty ||
            ((this.__renderDirty = !0), this.__setParentRenderDirty());
          return (this.__alpha = a);
        },
        set_blendMode: function (a) {
          null == a && (a = 10);
          a == this.__blendMode ||
            this.__renderDirty ||
            ((this.__renderDirty = !0), this.__setParentRenderDirty());
          return (this.__blendMode = a);
        },
        get_cacheAsBitmap: function () {
          return null == this.__filters ? this.__cacheAsBitmap : !0;
        },
        set_filters: function (a) {
          if (null != a && 0 < a.length) {
            for (var b = [], c = 0; c < a.length; ) {
              var d = a[c];
              ++c;
              d = d.clone();
              d.__renderDirty = !0;
              b.push(d);
            }
            this.__filters = b;
            this.__renderDirty ||
              ((this.__renderDirty = !0), this.__setParentRenderDirty());
          } else
            null != this.__filters &&
              ((this.__filters = null),
              this.__renderDirty ||
                ((this.__renderDirty = !0), this.__setParentRenderDirty()));
          return a;
        },
        get_height: function () {
          var a = ha.__pool.get();
          this.__getLocalBounds(a);
          var b = a.height;
          ha.__pool.release(a);
          return b;
        },
        set_height: function (a) {
          var b = ha.__pool.get(),
            c = xa.__pool.get();
          c.identity();
          this.__getBounds(b, c);
          a != b.height ? this.set_scaleY(a / b.height) : this.set_scaleY(1);
          ha.__pool.release(b);
          xa.__pool.release(c);
          return a;
        },
        get_loaderInfo: function () {
          return null != this.stage ? td.current.__loaderInfo : null;
        },
        get_mask: function () {
          return this.__mask;
        },
        set_mask: function (a) {
          if (a == this.__mask) return a;
          a != this.__mask &&
            (this.__setTransformDirty(),
            this.__renderDirty ||
              ((this.__renderDirty = !0), this.__setParentRenderDirty()));
          if (null != this.__mask) {
            this.__mask.__isMask = !1;
            this.__mask.__maskTarget = null;
            this.__mask.__setTransformDirty();
            var b = this.__mask;
            b.__renderDirty ||
              ((b.__renderDirty = !0), b.__setParentRenderDirty());
          }
          null != a &&
            ((a.__isMask = !0),
            (a.__maskTarget = this),
            a.__setWorldTransformInvalid());
          null != this.__cacheBitmap &&
            this.__cacheBitmap.get_mask() != a &&
            this.__cacheBitmap.set_mask(a);
          return (this.__mask = a);
        },
        get_mouseX: function () {
          var a =
              null != this.stage
                ? this.stage.__mouseX
                : td.current.stage.__mouseX,
            b =
              null != this.stage
                ? this.stage.__mouseY
                : td.current.stage.__mouseY,
            c = this.__getRenderTransform(),
            d = c.a * c.d - c.b * c.c;
          return 0 == d
            ? -c.tx
            : (1 / d) * (c.c * (c.ty - b) + c.d * (a - c.tx));
        },
        get_mouseY: function () {
          var a =
              null != this.stage
                ? this.stage.__mouseX
                : td.current.stage.__mouseX,
            b =
              null != this.stage
                ? this.stage.__mouseY
                : td.current.stage.__mouseY,
            c = this.__getRenderTransform(),
            d = c.a * c.d - c.b * c.c;
          return 0 == d
            ? -c.ty
            : (1 / d) * (c.a * (b - c.ty) + c.b * (c.tx - a));
        },
        get_name: function () {
          return this.__name;
        },
        set_name: function (a) {
          return (this.__name = a);
        },
        get_rotation: function () {
          return this.__rotation;
        },
        set_rotation: function (a) {
          if (a != this.__rotation) {
            this.__rotation = a;
            var b = (Math.PI / 180) * this.__rotation;
            this.__rotationSine = Math.sin(b);
            this.__rotationCosine = Math.cos(b);
            this.__transform.a = this.__rotationCosine * this.__scaleX;
            this.__transform.b = this.__rotationSine * this.__scaleX;
            this.__transform.c = -this.__rotationSine * this.__scaleY;
            this.__transform.d = this.__rotationCosine * this.__scaleY;
            this.__setTransformDirty();
          }
          return a;
        },
        get_scaleX: function () {
          return this.__scaleX;
        },
        set_scaleX: function (a) {
          if (a != this.__scaleX)
            if (((this.__scaleX = a), 0 == this.__transform.b))
              a != this.__transform.a && this.__setTransformDirty(),
                (this.__transform.a = a);
            else {
              var b = this.__rotationCosine * a,
                c = this.__rotationSine * a;
              (this.__transform.a == b && this.__transform.b == c) ||
                this.__setTransformDirty();
              this.__transform.a = b;
              this.__transform.b = c;
            }
          return a;
        },
        get_scaleY: function () {
          return this.__scaleY;
        },
        set_scaleY: function (a) {
          if (a != this.__scaleY)
            if (((this.__scaleY = a), 0 == this.__transform.c))
              a != this.__transform.d && this.__setTransformDirty(),
                (this.__transform.d = a);
            else {
              var b = -this.__rotationSine * a,
                c = this.__rotationCosine * a;
              (this.__transform.d == c && this.__transform.c == b) ||
                this.__setTransformDirty();
              this.__transform.c = b;
              this.__transform.d = c;
            }
          return a;
        },
        get_scrollRect: function () {
          return null == this.__scrollRect ? null : this.__scrollRect.clone();
        },
        set_scrollRect: function (a) {
          if (
            (null == a && null == this.__scrollRect) ||
            (null != a &&
              null != this.__scrollRect &&
              this.__scrollRect.equals(a))
          )
            return a;
          null != a
            ? (null == this.__scrollRect && (this.__scrollRect = new ha()),
              this.__scrollRect.copyFrom(a))
            : (this.__scrollRect = null);
          this.__setTransformDirty();
          z.__supportDOM &&
            !this.__renderDirty &&
            ((this.__renderDirty = !0), this.__setParentRenderDirty());
          return a;
        },
        get_transform: function () {
          null == this.__objectTransform &&
            (this.__objectTransform = new Yj(this));
          return this.__objectTransform;
        },
        set_transform: function (a) {
          if (null == a) throw new Ki("Parameter transform must be non-null.");
          null == this.__objectTransform &&
            (this.__objectTransform = new Yj(this));
          this.__setTransformDirty();
          this.__objectTransform.set_matrix(a.get_matrix());
          if (
            !this.__objectTransform.__colorTransform.__equals(
              a.__colorTransform,
              !0
            ) ||
            (!this.get_cacheAsBitmap() &&
              this.__objectTransform.__colorTransform.alphaMultiplier !=
                a.__colorTransform.alphaMultiplier)
          )
            this.__objectTransform.__colorTransform.__copyFrom(
              a.get_colorTransform()
            ),
              this.__renderDirty ||
                ((this.__renderDirty = !0), this.__setParentRenderDirty());
          return this.__objectTransform;
        },
        get_visible: function () {
          return this.__visible;
        },
        set_visible: function (a) {
          a == this.__visible ||
            this.__renderDirty ||
            ((this.__renderDirty = !0), this.__setParentRenderDirty());
          return (this.__visible = a);
        },
        get_width: function () {
          var a = ha.__pool.get();
          this.__getLocalBounds(a);
          var b = a.width;
          ha.__pool.release(a);
          return b;
        },
        set_width: function (a) {
          var b = ha.__pool.get(),
            c = xa.__pool.get();
          c.identity();
          this.__getBounds(b, c);
          a != b.width ? this.set_scaleX(a / b.width) : this.set_scaleX(1);
          ha.__pool.release(b);
          xa.__pool.release(c);
          return a;
        },
        get_x: function () {
          return this.__transform.tx;
        },
        set_x: function (a) {
          a != this.__transform.tx && this.__setTransformDirty();
          return (this.__transform.tx = a);
        },
        get_y: function () {
          return this.__transform.ty;
        },
        set_y: function (a) {
          a != this.__transform.ty && this.__setTransformDirty();
          return (this.__transform.ty = a);
        },
        __class__: z,
        __properties__: {
          set_filters: "set_filters",
          set_blendMode: "set_blendMode",
          set_y: "set_y",
          get_y: "get_y",
          set_x: "set_x",
          get_x: "get_x",
          set_width: "set_width",
          get_width: "get_width",
          set_visible: "set_visible",
          get_visible: "get_visible",
          set_transform: "set_transform",
          get_transform: "get_transform",
          set_scrollRect: "set_scrollRect",
          get_scrollRect: "get_scrollRect",
          set_scaleY: "set_scaleY",
          get_scaleY: "get_scaleY",
          set_scaleX: "set_scaleX",
          get_scaleX: "get_scaleX",
          set_rotation: "set_rotation",
          get_rotation: "get_rotation",
          set_name: "set_name",
          get_name: "get_name",
          get_mouseY: "get_mouseY",
          get_mouseX: "get_mouseX",
          set_mask: "set_mask",
          get_mask: "get_mask",
          get_loaderInfo: "get_loaderInfo",
          set_height: "set_height",
          get_height: "get_height",
          get_cacheAsBitmap: "get_cacheAsBitmap",
          set_alpha: "set_alpha",
          get_alpha: "get_alpha",
        },
      });
      var hb = function () {
        z.call(this);
        this.doubleClickEnabled = !1;
        this.mouseEnabled = !0;
        this.needsSoftKeyboard = !1;
        this.__tabEnabled = null;
        this.__tabIndex = -1;
      };
      h["openfl.display.InteractiveObject"] = hb;
      hb.__name__ = "openfl.display.InteractiveObject";
      hb.__super__ = z;
      hb.prototype = q(z.prototype, {
        __allowMouseFocus: function () {
          return this.mouseEnabled ? this.get_tabEnabled() : !1;
        },
        __getInteractive: function (a) {
          null != a &&
            (a.push(this),
            null != this.parent && this.parent.__getInteractive(a));
          return !0;
        },
        __hitTest: function (a, b, c, d, e, f) {
          return !f.get_visible() || this.__isMask || (e && !this.mouseEnabled)
            ? !1
            : z.prototype.__hitTest.call(this, a, b, c, d, e, f);
        },
        __tabTest: function (a) {
          this.get_tabEnabled() && a.push(this);
        },
        get_tabEnabled: function () {
          return 1 == this.__tabEnabled ? !0 : !1;
        },
        get_tabIndex: function () {
          return this.__tabIndex;
        },
        __class__: hb,
        __properties__: q(z.prototype.__properties__, {
          get_tabIndex: "get_tabIndex",
          get_tabEnabled: "get_tabEnabled",
        }),
      });
      var D = function () {
        hb.call(this);
        this.__tabChildren = this.mouseChildren = !0;
        this.__children = [];
        this.__removedChildren = ja.toObjectVector(null);
      };
      h["openfl.display.DisplayObjectContainer"] = D;
      D.__name__ = "openfl.display.DisplayObjectContainer";
      D.__super__ = hb;
      D.prototype = q(hb.prototype, {
        addChild: function (a) {
          return this.addChildAt(a, this.get_numChildren());
        },
        addChildAt: function (a, b) {
          if (null == a)
            throw (
              ((a = new Ki("Error #2007: Parameter child must be non-null.")),
              (a.errorID = 2007),
              a)
            );
          if (a.stage == a)
            throw (
              ((a = new oh(
                "Error #3783: A Stage object cannot be added as the child of another object."
              )),
              (a.errorID = 3783),
              a)
            );
          if (b > this.__children.length || 0 > b)
            throw N.thrown("Invalid index position " + b);
          if (a.parent == this)
            this.__children[b] != a &&
              (X.remove(this.__children, a),
              this.__children.splice(b, 0, a),
              this.__renderDirty ||
                ((this.__renderDirty = !0), this.__setParentRenderDirty()));
          else {
            null != a.parent && a.parent.removeChild(a);
            this.__children.splice(b, 0, a);
            a.parent = this;
            (b = null != this.stage && null == a.stage) &&
              a.__setStageReference(this.stage);
            a.__setTransformDirty();
            a.__renderDirty ||
              ((a.__renderDirty = !0), a.__setParentRenderDirty());
            this.__renderDirty ||
              ((this.__renderDirty = !0), this.__setParentRenderDirty());
            var c = new Ba("added");
            c.bubbles = !0;
            c.target = a;
            a.__dispatchWithCapture(c);
            b &&
              ((c = new Ba("addedToStage", !1, !1)),
              a.__dispatchWithCapture(c),
              a.__dispatchChildren(c));
          }
          return a;
        },
        contains: function (a) {
          for (; a != this && null != a; ) a = a.parent;
          return a == this;
        },
        getChildAt: function (a) {
          return 0 <= a && a < this.__children.length
            ? this.__children[a]
            : null;
        },
        getChildByName: function (a) {
          for (var b = 0, c = this.__children; b < c.length; ) {
            var d = c[b];
            ++b;
            if (d.get_name() == a) return d;
          }
          return null;
        },
        getChildIndex: function (a) {
          for (var b = 0, c = this.__children.length; b < c; ) {
            var d = b++;
            if (this.__children[d] == a) return d;
          }
          return -1;
        },
        removeChild: function (a) {
          if (null != a && a.parent == this) {
            a.__setTransformDirty();
            a.__renderDirty ||
              ((a.__renderDirty = !0), a.__setParentRenderDirty());
            this.__renderDirty ||
              ((this.__renderDirty = !0), this.__setParentRenderDirty());
            var b = new Ba("removed", !0);
            a.__dispatchWithCapture(b);
            null != this.stage &&
              (null != a.stage &&
                this.stage.get_focus() == a &&
                this.stage.set_focus(null),
              (b = new Ba("removedFromStage", !1, !1)),
              a.__dispatchWithCapture(b),
              a.__dispatchChildren(b),
              a.__setStageReference(null));
            a.parent = null;
            X.remove(this.__children, a);
            this.__removedChildren.push(a);
            a.__setTransformDirty();
          }
          return a;
        },
        removeChildAt: function (a) {
          return 0 <= a && a < this.__children.length
            ? this.removeChild(this.__children[a])
            : null;
        },
        removeChildren: function (a, b) {
          null == b && (b = 2147483647);
          null == a && (a = 0);
          if (2147483647 == b && ((b = this.__children.length - 1), 0 > b))
            return;
          if (!(a > this.__children.length - 1)) {
            if (b < a || 0 > a || b > this.__children.length)
              throw new Li("The supplied index is out of bounds.");
            for (b -= a; 0 <= b; ) this.removeChildAt(a), --b;
          }
        },
        __cleanup: function () {
          hb.prototype.__cleanup.call(this);
          for (var a = 0, b = this.__children; a < b.length; ) {
            var c = b[a];
            ++a;
            c.__cleanup();
          }
          for (a = this.__removedChildren.iterator(); a.hasNext(); )
            (b = a.next()), null == b.stage && b.__cleanup();
          this.__removedChildren.set_length(0);
        },
        __dispatchChildren: function (a) {
          if (null != this.__children)
            for (var b = 0, c = this.__children; b < c.length; ) {
              var d = c[b];
              ++b;
              a.target = d;
              if (!d.__dispatchWithCapture(a)) break;
              d.__dispatchChildren(a);
            }
        },
        __enterFrame: function (a) {
          for (var b = 0, c = this.__children; b < c.length; ) {
            var d = c[b];
            ++b;
            d.__enterFrame(a);
          }
        },
        __getBounds: function (a, b) {
          hb.prototype.__getBounds.call(this, a, b);
          if (0 != this.__children.length) {
            for (
              var c = xa.__pool.get(), d = 0, e = this.__children;
              d < e.length;

            ) {
              var f = e[d];
              ++d;
              if (0 != f.__scaleX && 0 != f.__scaleY) {
                var k = f.__transform;
                c.a = k.a * b.a + k.b * b.c;
                c.b = k.a * b.b + k.b * b.d;
                c.c = k.c * b.a + k.d * b.c;
                c.d = k.c * b.b + k.d * b.d;
                c.tx = k.tx * b.a + k.ty * b.c + b.tx;
                c.ty = k.tx * b.b + k.ty * b.d + b.ty;
                f.__getBounds(a, c);
              }
            }
            xa.__pool.release(c);
          }
        },
        __getFilterBounds: function (a, b) {
          hb.prototype.__getFilterBounds.call(this, a, b);
          if (null == this.__scrollRect && 0 != this.__children.length) {
            for (
              var c = xa.__pool.get(), d = 0, e = this.__children;
              d < e.length;

            ) {
              var f = e[d];
              ++d;
              if (0 != f.__scaleX && 0 != f.__scaleY && !f.__isMask) {
                var k = f.__transform;
                c.a = k.a * b.a + k.b * b.c;
                c.b = k.a * b.b + k.b * b.d;
                c.c = k.c * b.a + k.d * b.c;
                c.d = k.c * b.b + k.d * b.d;
                c.tx = k.tx * b.a + k.ty * b.c + b.tx;
                c.ty = k.tx * b.b + k.ty * b.d + b.ty;
                k = ha.__pool.get();
                f.__getFilterBounds(k, c);
                a.__expand(k.x, k.y, k.width, k.height);
                ha.__pool.release(k);
              }
            }
            xa.__pool.release(c);
          }
        },
        __getRenderBounds: function (a, b) {
          if (null != this.__scrollRect)
            hb.prototype.__getRenderBounds.call(this, a, b);
          else if (
            (hb.prototype.__getBounds.call(this, a, b),
            0 != this.__children.length)
          ) {
            for (
              var c = xa.__pool.get(), d = 0, e = this.__children;
              d < e.length;

            ) {
              var f = e[d];
              ++d;
              if (0 != f.__scaleX && 0 != f.__scaleY && !f.__isMask) {
                var k = f.__transform;
                c.a = k.a * b.a + k.b * b.c;
                c.b = k.a * b.b + k.b * b.d;
                c.c = k.c * b.a + k.d * b.c;
                c.d = k.c * b.b + k.d * b.d;
                c.tx = k.tx * b.a + k.ty * b.c + b.tx;
                c.ty = k.tx * b.b + k.ty * b.d + b.ty;
                f.__getRenderBounds(a, c);
              }
            }
            xa.__pool.release(c);
          }
        },
        __hitTest: function (a, b, c, d, e, f) {
          if (
            !f.get_visible() ||
            this.__isMask ||
            (e && !this.mouseEnabled && !this.mouseChildren) ||
            (null != this.get_mask() && !this.get_mask().__hitTestMask(a, b))
          )
            return !1;
          if (null != this.__scrollRect) {
            var k = gb.__pool.get();
            k.setTo(a, b);
            var r = this.__getRenderTransform(),
              l = r.a * r.d - r.b * r.c;
            if (0 == l) (k.x = -r.tx), (k.y = -r.ty);
            else {
              var g = (1 / l) * (r.c * (r.ty - k.y) + r.d * (k.x - r.tx));
              k.y = (1 / l) * (r.a * (k.y - r.ty) + r.b * (r.tx - k.x));
              k.x = g;
            }
            if (!this.__scrollRect.containsPoint(k))
              return gb.__pool.release(k), !1;
            gb.__pool.release(k);
          }
          k = this.__children.length;
          if (e)
            if (null == d || !this.mouseChildren)
              for (; 0 <= --k; ) {
                if (
                  this.__children[k].__hitTest(
                    a,
                    b,
                    c,
                    null,
                    !0,
                    this.__children[k]
                  )
                )
                  return null != d && d.push(f), !0;
              }
            else {
              if (null != d) {
                e = d.length;
                for (
                  l = !1;
                  0 <= --k &&
                  !(
                    ((r = this.__children[k].__getInteractive(null)) ||
                      (this.mouseEnabled && !l)) &&
                    this.__children[k].__hitTest(
                      a,
                      b,
                      c,
                      d,
                      !0,
                      this.__children[k]
                    ) &&
                    ((l = !0), r && d.length > e)
                  );

                );
                if (l) return d.splice(e, 0, f), !0;
              }
            }
          else {
            for (
              l = !1;
              0 <= --k &&
              (!this.__children[k].__hitTest(
                a,
                b,
                c,
                d,
                !1,
                this.__children[k]
              ) ||
                ((l = !0), null != d));

            );
            return l;
          }
          return !1;
        },
        __hitTestMask: function (a, b) {
          for (var c = this.__children.length; 0 <= --c; )
            if (this.__children[c].__hitTestMask(a, b)) return !0;
          return !1;
        },
        __setStageReference: function (a) {
          hb.prototype.__setStageReference.call(this, a);
          if (null != this.__children)
            for (var b = 0, c = this.__children; b < c.length; ) {
              var d = c[b];
              ++b;
              d.__setStageReference(a);
            }
        },
        __setWorldTransformInvalid: function () {
          if (
            !this.__worldTransformInvalid &&
            ((this.__worldTransformInvalid = !0), null != this.__children)
          )
            for (var a = 0, b = this.__children; a < b.length; ) {
              var c = b[a];
              ++a;
              c.__setWorldTransformInvalid();
            }
        },
        __tabTest: function (a) {
          hb.prototype.__tabTest.call(this, a);
          if (this.get_tabChildren())
            for (var b, c = 0, d = this.__children; c < d.length; ) {
              var e = d[c];
              ++c;
              if ((b = e.__getInteractive(null))) (b = e), b.__tabTest(a);
            }
        },
        __update: function (a, b) {
          hb.prototype.__update.call(this, a, b);
          if (b) {
            b = 0;
            for (var c = this.__children; b < c.length; ) {
              var d = c[b];
              ++b;
              d.__update(a, !0);
            }
          }
        },
        get_numChildren: function () {
          return this.__children.length;
        },
        get_tabChildren: function () {
          return this.__tabChildren;
        },
        __class__: D,
        __properties__: q(hb.prototype.__properties__, {
          get_tabChildren: "get_tabChildren",
          get_numChildren: "get_numChildren",
        }),
      });
      var t = function () {
        D.call(this);
        this.__drawableType = 4;
        this.__buttonMode = !1;
        this.useHandCursor = !0;
        if (null != this.__pendingBindLibrary) {
          var a = this.__pendingBindLibrary,
            b = this.__pendingBindClassName;
          this.__pendingBindClassName = this.__pendingBindLibrary = null;
          a.bind(b, this);
        } else
          null != t.__constructor &&
            ((a = t.__constructor), (t.__constructor = null), a(this));
      };
      h["openfl.display.Sprite"] = t;
      t.__name__ = "openfl.display.Sprite";
      t.__super__ = D;
      t.prototype = q(D.prototype, {
        __getCursor: function () {
          return this.__buttonMode && this.useHandCursor ? "button" : null;
        },
        __hitTest: function (a, b, c, d, e, f) {
          if (e && !this.mouseEnabled && !this.mouseChildren) return !1;
          if (
            !f.get_visible() ||
            this.__isMask ||
            (null != this.get_mask() && !this.get_mask().__hitTestMask(a, b))
          )
            return this.__hitTestHitArea(a, b, c, d, e, f);
          if (null != this.__scrollRect) {
            var k = gb.__pool.get();
            k.setTo(a, b);
            var r = this.__getRenderTransform(),
              l = r.a * r.d - r.b * r.c;
            if (0 == l) (k.x = -r.tx), (k.y = -r.ty);
            else {
              var g = (1 / l) * (r.c * (r.ty - k.y) + r.d * (k.x - r.tx));
              k.y = (1 / l) * (r.a * (k.y - r.ty) + r.b * (r.tx - k.x));
              k.x = g;
            }
            if (!this.__scrollRect.containsPoint(k))
              return (
                gb.__pool.release(k), this.__hitTestHitArea(a, b, c, d, !0, f)
              );
            gb.__pool.release(k);
          }
          return D.prototype.__hitTest.call(this, a, b, c, d, e, f)
            ? null != d
              ? e
              : !0
            : null == this.hitArea &&
              null != this.__graphics &&
              this.__graphics.__hitTest(a, b, c, this.__getRenderTransform())
            ? (null == d || (e && !this.mouseEnabled) || d.push(f), !0)
            : this.__hitTestHitArea(a, b, c, d, e, f);
        },
        __hitTestHitArea: function (a, b, c, d, e, f) {
          return null == this.hitArea || this.hitArea.mouseEnabled
            ? !1
            : ((this.hitArea.mouseEnabled = !0),
              (a = this.hitArea.__hitTest(a, b, c, null, !0, f)),
              (this.hitArea.mouseEnabled = !1),
              null != d && a && (d[d.length] = f),
              a);
        },
        __hitTestMask: function (a, b) {
          return D.prototype.__hitTestMask.call(this, a, b) ||
            (null != this.__graphics &&
              this.__graphics.__hitTest(a, b, !0, this.__getRenderTransform()))
            ? !0
            : !1;
        },
        get_graphics: function () {
          null == this.__graphics && (this.__graphics = new Yd(this));
          return this.__graphics;
        },
        get_tabEnabled: function () {
          return null == this.__tabEnabled
            ? this.__buttonMode
            : this.__tabEnabled;
        },
        get_buttonMode: function () {
          return this.__buttonMode;
        },
        __class__: t,
        __properties__: q(D.prototype.__properties__, {
          get_graphics: "get_graphics",
          get_buttonMode: "get_buttonMode",
        }),
      });
      var Rb = function () {
        this.game = {
          width: 1280,
          height: 720,
          initialState: cb,
          zoom: 1,
          framerate: 60,
          skipSplash: !0,
          startFullscreen: !1,
        };
        t.call(this);
        null != this.stage
          ? this.init()
          : this.addEventListener("addedToStage", n(this, this.init));
      };
      h.Main = Rb;
      Rb.__name__ = "Main";
      Rb.main = function () {
        sa.get_current().addChild(new Rb());
      };
      Rb.resetSpriteCache = function (a) {
        a.__cacheBitmap = null;
        a.__cacheBitmapData = null;
      };
      Rb.__super__ = t;
      Rb.prototype = q(t.prototype, {
        init: function (a) {
          this.hasEventListener("addedToStage") &&
            this.removeEventListener("addedToStage", n(this, this.init));
          this.setupGame();
        },
        setupGame: function () {
          sa.get_current();
          sa.get_current();
          y.loadDefaultKeys();
          this.addChild(
            new Zj(
              this.game.width,
              this.game.height,
              this.game.initialState,
              this.game.framerate,
              this.game.framerate,
              this.game.skipSplash,
              this.game.startFullscreen
            )
          );
          Rb.fpsVar = new ak(10, 3, 16777215);
          this.addChild(Rb.fpsVar);
          sa.get_current().stage.align = Vo.fromString("tl");
          sa.get_current().stage.set_scaleMode(2);
          null != Rb.fpsVar && Rb.fpsVar.set_visible(y.showFPS);
          g.autoPause = !1;
          g.mouse.set_visible(!1);
          g.signals.gameResized.add(function (a, b) {
            if (null != g.cameras)
              for (a = 0, b = g.cameras.list; a < b.length; ) {
                var c = b[a];
                ++a;
                null != c &&
                  null != c.filters &&
                  Rb.resetSpriteCache(c.flashSprite);
              }
            null != g.game && Rb.resetSpriteCache(g.game);
          });
        },
        __class__: Rb,
      });
      var mg = function (a) {
        a.addChild(this);
        Rb.call(this);
        this.dispatchEvent(new Ba("addedToStage", !1, !1));
      };
      h.DocumentClass = mg;
      mg.__name__ = "DocumentClass";
      mg.__super__ = Rb;
      mg.prototype = q(Rb.prototype, { __class__: mg });
      var qf = function (a, b, c, d) {
        null == d && (d = !1);
        this.copyVisible = !1;
        this.copyAngle = this.copyAlpha = !0;
        this.alphaMult = 1;
        this.xAdd = this.yAdd = this.angleAdd = 0;
        F.call(this);
        if (null != b) {
          var e = G.returnGraphic(a, c);
          this.set_frames(
            jb.fromSparrow(e, G.getPath("images/" + a + ".xml", "TEXT", c))
          );
          this.animation.addByPrefix("idle", b, 24, d);
          this.animation.play("idle");
        } else
          null != a && ((e = G.returnGraphic(a, null)), this.loadGraphic(e));
        this.set_antialiasing(y.globalAntialiasing);
        a = this.scrollFactor;
        a.set_x(0);
        a.set_y(0);
      };
      h.AttachedSprite = qf;
      qf.__name__ = "AttachedSprite";
      qf.__super__ = F;
      qf.prototype = q(F.prototype, {
        update: function (a) {
          F.prototype.update.call(this, a);
          if (null != this.sprTracker) {
            this.setPosition(
              this.sprTracker.x + this.xAdd,
              this.sprTracker.y + this.yAdd
            );
            a = this.scrollFactor;
            var b = this.sprTracker.scrollFactor.x,
              c = this.sprTracker.scrollFactor.y;
            null == c && (c = 0);
            null == b && (b = 0);
            a.set_x(b);
            a.set_y(c);
            this.copyAngle &&
              this.set_angle(this.sprTracker.angle + this.angleAdd);
            this.copyAlpha &&
              this.set_alpha(this.sprTracker.alpha * this.alphaMult);
            this.copyVisible && this.set_visible(this.sprTracker.visible);
          }
        },
        __class__: qf,
      });
      var Rc = function (a, b, c, d, e) {
        null == e && (e = 1);
        null == d && (d = !1);
        null == c && (c = 0);
        null == b && (b = 0);
        null == a && (a = "");
        this.copyAlpha = !1;
        this.copyVisible = !0;
        this.offsetX = this.offsetY = 0;
        ib.call(this, 0, 0, a, d);
        this.set_scaleX(e);
        this.set_scaleY(e);
        this.isMenuItem = !1;
        this.offsetX = b;
        this.offsetY = c;
      };
      h.AttachedText = Rc;
      Rc.__name__ = "AttachedText";
      Rc.__super__ = ib;
      Rc.prototype = q(ib.prototype, {
        update: function (a) {
          null != this.sprTracker &&
            (this.setPosition(
              this.sprTracker.x + this.offsetX,
              this.sprTracker.y + this.offsetY
            ),
            this.copyVisible && this.set_visible(this.sprTracker.visible),
            this.copyAlpha && this.set_alpha(this.sprTracker.alpha));
          ib.prototype.update.call(this, a);
        },
        __class__: Rc,
      });
      var cc = function (a, b, c, d, e, f, k) {
        null == k && (k = !1);
        null == e && (e = 1);
        null == d && (d = 1);
        null == c && (c = 0);
        null == b && (b = 0);
        F.call(this, b, c);
        if (null != f)
          for (
            b = G.returnGraphic(a, null),
              this.set_frames(
                jb.fromSparrow(
                  b,
                  G.getPath("images/" + a + ".xml", "TEXT", null)
                )
              ),
              a = 0,
              b = f.length;
            a < b;

          )
            (c = a++),
              (c = f[c]),
              this.animation.addByPrefix(c, c, 24, k),
              null == this.idleAnim &&
                ((this.idleAnim = c), this.animation.play(c));
        else
          null != a && ((b = G.returnGraphic(a, null)), this.loadGraphic(b)),
            this.set_active(!1);
        f = this.scrollFactor;
        b = d;
        c = e;
        null == c && (c = 0);
        null == b && (b = 0);
        f.set_x(b);
        f.set_y(c);
        this.set_antialiasing(y.globalAntialiasing);
      };
      h.BGSprite = cc;
      cc.__name__ = "BGSprite";
      cc.__super__ = F;
      cc.prototype = q(F.prototype, {
        dance: function (a) {
          null == a && (a = !1);
          null != this.idleAnim && this.animation.play(this.idleAnim, a);
        },
        __class__: cc,
      });
      var ph = function (a, b) {
        F.call(this, a, b);
        a = G.returnGraphic("limo/limoDancer", null);
        this.set_frames(
          jb.fromSparrow(
            a,
            G.getPath("images/limo/limoDancer.xml", "TEXT", null)
          )
        );
        this.animation.addByIndices(
          "danceLeft",
          "bg dancer sketch PINK",
          [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
          "",
          24,
          !1
        );
        this.animation.addByIndices(
          "danceRight",
          "bg dancer sketch PINK",
          [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
          "",
          24,
          !1
        );
        this.animation.play("danceLeft");
        this.set_antialiasing(y.globalAntialiasing);
      };
      h.BackgroundDancer = ph;
      ph.__name__ = "BackgroundDancer";
      ph.__super__ = F;
      ph.prototype = q(F.prototype, { __class__: ph });
      var Jm = function (a, b) {
        this.danceDir = !1;
        this.isPissed = !0;
        F.call(this, a, b);
        a = G.returnGraphic("weeb/bgFreaks", null);
        this.set_frames(
          jb.fromSparrow(a, G.getPath("images/weeb/bgFreaks.xml", "TEXT", null))
        );
        this.swapDanceType();
        this.animation.play("danceLeft");
      };
      h.BackgroundGirls = Jm;
      Jm.__name__ = "BackgroundGirls";
      Jm.__super__ = F;
      Jm.prototype = q(F.prototype, {
        swapDanceType: function () {
          (this.isPissed = !this.isPissed)
            ? (this.animation.addByIndices(
                "danceLeft",
                "BG fangirls dissuaded",
                Ta.numberArray(14),
                "",
                24,
                !1
              ),
              this.animation.addByIndices(
                "danceRight",
                "BG fangirls dissuaded",
                Ta.numberArray(30, 15),
                "",
                24,
                !1
              ))
            : (this.animation.addByIndices(
                "danceLeft",
                "BG girls group",
                Ta.numberArray(14),
                "",
                24,
                !1
              ),
              this.animation.addByIndices(
                "danceRight",
                "BG girls group",
                Ta.numberArray(30, 15),
                "",
                24,
                !1
              ));
          this.dance();
        },
        dance: function () {
          (this.danceDir = !this.danceDir)
            ? this.animation.play("danceRight", !0)
            : this.animation.play("danceLeft", !0);
        },
        __class__: Jm,
      });
      var yc = function (a, b, c, d) {
        null == d && (d = !1);
        null == c && (c = "bf");
        this.settingCharacterUp = !0;
        this.danceEveryNumBeats = 2;
        this.danced = !1;
        this.healthColorArray = [255, 0, 0];
        this.noAntialiasing = this.originalFlipX = !1;
        this.jsonScale = 1;
        this.imageFile = "";
        this.hasMissAnimations = !1;
        this.cameraPosition = [0, 0];
        this.positionArray = [0, 0];
        this.animationsArray = [];
        this.healthIcon = "face";
        this.danceIdle = this.skipDance = !1;
        this.idleSuffix = "";
        this.singDuration = 4;
        this.stunned = !1;
        this.animationNotes = [];
        this.specialAnim = !1;
        this.holdTimer = this.heyTimer = 0;
        this.curCharacter = yc.DEFAULT_CHARACTER;
        this.debugMode = this.isPlayer = !1;
        F.call(this, a, b);
        this.animOffsets = new Q();
        this.curCharacter = c;
        this.isPlayer = d;
        this.set_antialiasing(y.globalAntialiasing);
        a = "characters/" + this.curCharacter + ".json";
        null == a && (a = "");
        a = "assets/" + a;
        aa.exists(a) ||
          ((a = "characters/" + yc.DEFAULT_CHARACTER + ".json"),
          null == a && (a = ""),
          (a = "assets/" + a));
        a = aa.getText(a);
        a = JSON.parse(a);
        b = "sparrow";
        aa.exists(G.getPath("images/" + a.image + ".txt", "TEXT")) &&
          (b = "packer");
        aa.exists(G.getPath("images/" + a.image + "/Animation.json", "TEXT")) &&
          (b = "texture");
        switch (b) {
          case "packer":
            c = a.image;
            b = null;
            var e = G.returnGraphic(c, b);
            this.set_frames(
              jb.fromSpriteSheetPacker(
                e,
                G.getPath("images/" + c + ".txt", "TEXT", b)
              )
            );
            break;
          case "sparrow":
            c = a.image;
            b = null;
            e = G.returnGraphic(c, b);
            this.set_frames(
              jb.fromSparrow(e, G.getPath("images/" + c + ".xml", "TEXT", b))
            );
            break;
          case "texture":
            this.set_frames(Ig.construct(a.image));
        }
        this.imageFile = a.image;
        1 != a.scale &&
          ((this.jsonScale = a.scale),
          this.setGraphicSize((this.get_width() * this.jsonScale) | 0),
          this.updateHitbox());
        this.positionArray = a.position;
        this.cameraPosition = a.camera_position;
        this.healthIcon = a.healthicon;
        this.singDuration = a.sing_duration;
        this.set_flipX(a.flip_x);
        a.no_antialiasing &&
          (this.set_antialiasing(!1), (this.noAntialiasing = !0));
        null != a.healthbar_colors &&
          2 < a.healthbar_colors.length &&
          (this.healthColorArray = a.healthbar_colors);
        this.set_antialiasing(!this.noAntialiasing);
        y.globalAntialiasing || this.set_antialiasing(!1);
        this.animationsArray = a.animations;
        if (null != this.animationsArray && 0 < this.animationsArray.length)
          for (a = 0, b = this.animationsArray; a < b.length; ) {
            c = b[a];
            ++a;
            e = "" + c.anim;
            var f = "" + c.name,
              k = c.fps,
              r = c.loop,
              l = c.indices;
            null != l && 0 < l.length
              ? this.animation.addByIndices(e, f, l, "", k, r)
              : this.animation.addByPrefix(e, f, k, r);
            null != c.offsets &&
              1 < c.offsets.length &&
              this.addOffset(c.anim, c.offsets[0], c.offsets[1]);
          }
        else this.quickAnimAdd("idle", "BF idle dance");
        this.originalFlipX = this.flipX;
        if (
          Object.prototype.hasOwnProperty.call(
            this.animOffsets.h,
            "singLEFTmiss"
          ) ||
          Object.prototype.hasOwnProperty.call(
            this.animOffsets.h,
            "singDOWNmiss"
          ) ||
          Object.prototype.hasOwnProperty.call(
            this.animOffsets.h,
            "singUPmiss"
          ) ||
          Object.prototype.hasOwnProperty.call(
            this.animOffsets.h,
            "singRIGHTmiss"
          )
        )
          this.hasMissAnimations = !0;
        this.recalculateDanceIdle();
        this.dance();
        d && this.set_flipX(!this.flipX);
        "pico-speaker" == this.curCharacter &&
          ((this.skipDance = !0),
          this.loadMappedAnims(),
          this.playAnim("shoot1"));
      };
      h.Character = yc;
      yc.__name__ = "Character";
      yc.__super__ = F;
      yc.prototype = q(F.prototype, {
        update: function (a) {
          if (!this.debugMode && null != this.animation._curAnim) {
            if (0 < this.heyTimer) {
              if (
                ((this.heyTimer -= a * C.instance.playbackRate),
                0 >= this.heyTimer)
              ) {
                if (
                  (this.specialAnim && "hey" == this.animation._curAnim.name) ||
                  "cheer" == this.animation._curAnim.name
                )
                  (this.specialAnim = !1), this.dance();
                this.heyTimer = 0;
              }
            } else
              this.specialAnim &&
                this.animation._curAnim.finished &&
                ((this.specialAnim = !1), this.dance());
            if ("pico-speaker" == this.curCharacter) {
              if (
                0 < this.animationNotes.length &&
                P.songPosition > this.animationNotes[0][0]
              ) {
                var b = 1;
                2 < this.animationNotes[0][1] && (b = 3);
                b += g.random.int(0, 1);
                this.playAnim("shoot" + b, !0);
                this.animationNotes.shift();
              }
              this.animation._curAnim.finished &&
                this.playAnim(
                  this.animation._curAnim.name,
                  !1,
                  !1,
                  this.animation._curAnim.frames.length - 3
                );
            }
            this.isPlayer ||
              (K.startsWith(this.animation._curAnim.name, "sing") &&
                (this.holdTimer += a),
              this.holdTimer >=
                (0.0011 / (null != g.sound.music ? g.sound.music._pitch : 1)) *
                  P.stepCrochet *
                  this.singDuration && (this.dance(), (this.holdTimer = 0)));
            this.animation._curAnim.finished &&
              null !=
                this.animation._animations.h[
                  this.animation._curAnim.name + "-loop"
                ] &&
              this.playAnim(this.animation._curAnim.name + "-loop");
          }
          F.prototype.update.call(this, a);
        },
        dance: function () {
          this.debugMode ||
            this.skipDance ||
            this.specialAnim ||
            (this.danceIdle
              ? (this.danced = !this.danced)
                ? this.playAnim("danceRight" + this.idleSuffix)
                : this.playAnim("danceLeft" + this.idleSuffix)
              : null !=
                  this.animation._animations.h["idle" + this.idleSuffix] &&
                this.playAnim("idle" + this.idleSuffix));
        },
        playAnim: function (a, b, c, d) {
          null == d && (d = 0);
          null == c && (c = !1);
          null == b && (b = !1);
          this.specialAnim = !1;
          this.animation.play(a, b, c, d);
          d = this.animOffsets.h[a];
          Object.prototype.hasOwnProperty.call(this.animOffsets.h, a)
            ? ((b = this.offset), (c = d[0]), (d = d[1]))
            : ((b = this.offset), (d = c = 0));
          null == d && (d = 0);
          null == c && (c = 0);
          b.set_x(c);
          b.set_y(d);
          K.startsWith(this.curCharacter, "gf") &&
            ("singLEFT" == a
              ? (this.danced = !0)
              : "singRIGHT" == a && (this.danced = !1),
            "singUP" == a || "singDOWN" == a) &&
            (this.danced = !this.danced);
        },
        loadMappedAnims: function () {
          var a = C.SONG.song,
            b = new ya("[~&\\\\;:<>#]", ""),
            c = new ya("[.,'\"%?!]", "");
          a = b.split(K.replace(a, " ", "-")).join("-");
          c = Dd.loadFromJson(
            "picospeaker",
            c.split(a).join("").toLowerCase()
          ).notes;
          for (a = 0; a < c.length; ) {
            var d = c[a];
            ++a;
            b = 0;
            for (d = d.sectionNotes; b < d.length; ) {
              var e = d[b];
              ++b;
              this.animationNotes.push(e);
            }
          }
          Mi.animationNotes = this.animationNotes;
          this.animationNotes.sort(n(this, this.sortAnims));
        },
        sortAnims: function (a, b) {
          a = a[0];
          b = b[0];
          var c = 0;
          a < b ? (c = -1) : a > b && (c = 1);
          return c;
        },
        recalculateDanceIdle: function () {
          var a = this.danceIdle;
          this.danceIdle =
            null !=
              this.animation._animations.h["danceLeft" + this.idleSuffix] &&
            null !=
              this.animation._animations.h["danceRight" + this.idleSuffix];
          this.settingCharacterUp
            ? (this.danceEveryNumBeats = this.danceIdle ? 1 : 2)
            : a != this.danceIdle &&
              ((a = this.danceEveryNumBeats),
              (a = this.danceIdle ? a / 2 : 2 * a),
              (this.danceEveryNumBeats = Math.round(Math.max(a, 1))));
          this.settingCharacterUp = !1;
        },
        addOffset: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = 0);
          this.animOffsets.h[a] = [b, c];
        },
        quickAnimAdd: function (a, b) {
          this.animation.addByPrefix(a, b, 24, !1);
        },
        __class__: yc,
      });
      var Kh = function (a, b, c) {
        null == c && (c = "bf");
        this.startedDeath = !1;
        yc.call(this, a, b, c, !0);
      };
      h.Boyfriend = Kh;
      Kh.__name__ = "Boyfriend";
      Kh.__super__ = yc;
      Kh.prototype = q(yc.prototype, {
        update: function (a) {
          this.debugMode ||
            null == this.animation._curAnim ||
            (K.startsWith(this.animation._curAnim.name, "sing")
              ? (this.holdTimer += a)
              : (this.holdTimer = 0),
            K.endsWith(this.animation._curAnim.name, "miss") &&
              this.animation._curAnim.finished &&
              !this.debugMode &&
              this.playAnim("idle", !0, !1, 10),
            "firstDeath" == this.animation._curAnim.name &&
              this.animation._curAnim.finished &&
              this.startedDeath &&
              this.playAnim("deathLoop"));
          yc.prototype.update.call(this, a);
        },
        __class__: Kh,
      });
      var bk = function (a, b, c) {
        null == c && (c = !1);
        null == b && (b = 0);
        null == a && (a = 0);
        this.offsetX = this.offsetY = 0;
        this.copyAlpha = !0;
        F.call(this, a, b);
        a = G.returnGraphic("checkboxanim", null);
        this.set_frames(
          jb.fromSparrow(a, G.getPath("images/checkboxanim.xml", "TEXT", null))
        );
        this.animation.addByPrefix("unchecked", "checkbox0", 24, !1);
        this.animation.addByPrefix(
          "unchecking",
          "checkbox anim reverse",
          24,
          !1
        );
        this.animation.addByPrefix("checking", "checkbox anim0", 24, !1);
        this.animation.addByPrefix("checked", "checkbox finish", 24, !1);
        this.set_antialiasing(y.globalAntialiasing);
        this.setGraphicSize((0.9 * this.get_width()) | 0);
        this.updateHitbox();
        this.animationFinished(c ? "checking" : "unchecking");
        this.animation.finishCallback = n(this, this.animationFinished);
        this.set_daValue(c);
      };
      h.CheckboxThingie = bk;
      bk.__name__ = "CheckboxThingie";
      bk.__super__ = F;
      bk.prototype = q(F.prototype, {
        update: function (a) {
          null != this.sprTracker &&
            (this.setPosition(
              this.sprTracker.x - 130 + this.offsetX,
              this.sprTracker.y + 30 + this.offsetY
            ),
            this.copyAlpha && this.set_alpha(this.sprTracker.alpha));
          F.prototype.update.call(this, a);
        },
        set_daValue: function (a) {
          if (a) {
            if (
              "checked" != this.animation._curAnim.name &&
              "checking" != this.animation._curAnim.name
            ) {
              this.animation.play("checking", !0);
              var b = this.offset,
                c = 34,
                d = 25;
              null == d && (d = 0);
              null == c && (c = 0);
              b.set_x(c);
              b.set_y(d);
            }
          } else
            "unchecked" != this.animation._curAnim.name &&
              "unchecking" != this.animation._curAnim.name &&
              (this.animation.play("unchecking", !0),
              (b = this.offset),
              (c = 25),
              (d = 28),
              null == d && (d = 0),
              null == c && (c = 0),
              b.set_x(c),
              b.set_y(d));
          return a;
        },
        animationFinished: function (a) {
          switch (a) {
            case "checking":
              this.animation.play("checked", !0);
              a = this.offset;
              var b = 3,
                c = 12;
              null == c && (c = 0);
              null == b && (b = 0);
              a.set_x(b);
              a.set_y(c);
              break;
            case "unchecking":
              this.animation.play("unchecked", !0),
                (a = this.offset),
                (b = 0),
                (c = 2),
                null == c && (c = 0),
                null == b && (b = 0),
                a.set_x(b),
                a.set_y(c);
          }
        },
        __class__: bk,
        __properties__: q(F.prototype.__properties__, {
          set_daValue: "set_daValue",
        }),
      });
      var y = function () {};
      h.ClientPrefs = y;
      y.__name__ = "ClientPrefs";
      y.loadDefaultKeys = function () {
        y.defaultKeys = Q.createCopy(y.keyBinds.h);
      };
      y.saveSettings = function () {
        g.save.data.downScroll = y.downScroll;
        g.save.data.middleScroll = y.middleScroll;
        g.save.data.opponentStrums = y.opponentStrums;
        g.save.data.showFPS = y.showFPS;
        g.save.data.flashing = y.flashing;
        g.save.data.globalAntialiasing = y.globalAntialiasing;
        g.save.data.noteSplashes = y.noteSplashes;
        g.save.data.lowQuality = y.lowQuality;
        g.save.data.shaders = y.shaders;
        g.save.data.framerate = y.framerate;
        g.save.data.camZooms = y.camZooms;
        g.save.data.noteOffset = y.noteOffset;
        g.save.data.hideHud = y.hideHud;
        g.save.data.arrowHSV = y.arrowHSV;
        g.save.data.ghostTapping = y.ghostTapping;
        g.save.data.timeBarType = y.timeBarType;
        g.save.data.scoreZoom = y.scoreZoom;
        g.save.data.noReset = y.noReset;
        g.save.data.healthBarAlpha = y.healthBarAlpha;
        g.save.data.comboOffset = y.comboOffset;
        g.save.data.ratingOffset = y.ratingOffset;
        g.save.data.sickWindow = y.sickWindow;
        g.save.data.goodWindow = y.goodWindow;
        g.save.data.badWindow = y.badWindow;
        g.save.data.safeFrames = y.safeFrames;
        g.save.data.gameplaySettings = y.gameplaySettings;
        g.save.data.controllerMode = y.controllerMode;
        g.save.data.hitsoundVolume = y.hitsoundVolume;
        g.save.data.pauseMusic = y.pauseMusic;
        g.save.data.checkForUpdates = y.checkForUpdates;
        g.save.data.comboStacking = y.comboStacking;
        g.save.flush();
        var a = new ke();
        a.bind("controls_v2", "ninjamuffin99");
        a.data.customControls = y.keyBinds;
        a.flush();
        g.log.advanced("Settings saved!", Ja.NORMAL);
      };
      y.loadPrefs = function () {
        null != g.save.data.downScroll &&
          (y.downScroll = g.save.data.downScroll);
        null != g.save.data.middleScroll &&
          (y.middleScroll = g.save.data.middleScroll);
        null != g.save.data.opponentStrums &&
          (y.opponentStrums = g.save.data.opponentStrums);
        null != g.save.data.showFPS &&
          ((y.showFPS = g.save.data.showFPS),
          null != Rb.fpsVar && Rb.fpsVar.set_visible(y.showFPS));
        null != g.save.data.flashing && (y.flashing = g.save.data.flashing);
        null != g.save.data.globalAntialiasing &&
          (y.globalAntialiasing = g.save.data.globalAntialiasing);
        null != g.save.data.noteSplashes &&
          (y.noteSplashes = g.save.data.noteSplashes);
        null != g.save.data.lowQuality &&
          (y.lowQuality = g.save.data.lowQuality);
        null != g.save.data.shaders && (y.shaders = g.save.data.shaders);
        null != g.save.data.framerate &&
          ((y.framerate = g.save.data.framerate),
          y.framerate > g.drawFramerate
            ? (g.set_updateFramerate(y.framerate),
              g.set_drawFramerate(y.framerate))
            : (g.set_drawFramerate(y.framerate),
              g.set_updateFramerate(y.framerate)));
        null != g.save.data.camZooms && (y.camZooms = g.save.data.camZooms);
        null != g.save.data.hideHud && (y.hideHud = g.save.data.hideHud);
        null != g.save.data.noteOffset &&
          (y.noteOffset = g.save.data.noteOffset);
        null != g.save.data.arrowHSV && (y.arrowHSV = g.save.data.arrowHSV);
        null != g.save.data.ghostTapping &&
          (y.ghostTapping = g.save.data.ghostTapping);
        null != g.save.data.timeBarType &&
          (y.timeBarType = g.save.data.timeBarType);
        null != g.save.data.scoreZoom && (y.scoreZoom = g.save.data.scoreZoom);
        null != g.save.data.noReset && (y.noReset = g.save.data.noReset);
        null != g.save.data.healthBarAlpha &&
          (y.healthBarAlpha = g.save.data.healthBarAlpha);
        null != g.save.data.comboOffset &&
          (y.comboOffset = g.save.data.comboOffset);
        null != g.save.data.ratingOffset &&
          (y.ratingOffset = g.save.data.ratingOffset);
        null != g.save.data.sickWindow &&
          (y.sickWindow = g.save.data.sickWindow);
        null != g.save.data.goodWindow &&
          (y.goodWindow = g.save.data.goodWindow);
        null != g.save.data.badWindow && (y.badWindow = g.save.data.badWindow);
        null != g.save.data.safeFrames &&
          (y.safeFrames = g.save.data.safeFrames);
        null != g.save.data.controllerMode &&
          (y.controllerMode = g.save.data.controllerMode);
        null != g.save.data.hitsoundVolume &&
          (y.hitsoundVolume = g.save.data.hitsoundVolume);
        null != g.save.data.pauseMusic &&
          (y.pauseMusic = g.save.data.pauseMusic);
        if (null != g.save.data.gameplaySettings) {
          var a = g.save.data.gameplaySettings.h,
            b = a;
          a = Object.keys(a);
          for (var c = a.length, d = 0; d < c; ) {
            var e = a[d++],
              f = e;
            e = b[e];
            y.gameplaySettings.h[f] = e;
          }
        }
        null != g.save.data.volume && g.sound.set_volume(g.save.data.volume);
        null != g.save.data.mute && (g.sound.muted = g.save.data.mute);
        null != g.save.data.checkForUpdates &&
          (y.checkForUpdates = g.save.data.checkForUpdates);
        null != g.save.data.comboStacking &&
          (y.comboStacking = g.save.data.comboStacking);
        b = new ke();
        b.bind("controls_v2", "ninjamuffin99");
        if (null != b && null != b.data.customControls) {
          b = a = b.data.customControls.h;
          a = Object.keys(a);
          c = a.length;
          for (d = 0; d < c; )
            (f = e = a[d++]), (e = b[e]), (y.keyBinds.h[f] = e);
          y.reloadControls();
        }
      };
      y.reloadControls = function () {
        ia.player1.controls.setKeyboardScheme(Jg.Solo);
        cb.muteKeys = y.copyKey(y.keyBinds.h.volume_mute);
        cb.volumeDownKeys = y.copyKey(y.keyBinds.h.volume_down);
        cb.volumeUpKeys = y.copyKey(y.keyBinds.h.volume_up);
        g.sound.muteKeys = cb.muteKeys;
        g.sound.volumeDownKeys = cb.volumeDownKeys;
        g.sound.volumeUpKeys = cb.volumeUpKeys;
      };
      y.copyKey = function (a) {
        a = a.slice();
        for (var b = 0, c = a.length; b < c; )
          -1 == a[b] && (X.remove(a, -1), --b), ++b, (c = a.length);
        return a;
      };
      var Kg = function () {
        this.hue = this.saturation = this.brightness = 0;
        this.shader = new ck();
        this.shader.uTime.value = [0, 0, 0];
        this.shader.awesomeOutline.value = [!1];
      };
      h.ColorSwap = Kg;
      Kg.__name__ = "ColorSwap";
      Kg.prototype = {
        set_hue: function (a) {
          this.hue = a;
          return (this.shader.uTime.value[0] = this.hue);
        },
        set_saturation: function (a) {
          this.saturation = a;
          return (this.shader.uTime.value[1] = this.saturation);
        },
        set_brightness: function (a) {
          this.brightness = a;
          return (this.shader.uTime.value[2] = this.brightness);
        },
        __class__: Kg,
        __properties__: {
          set_brightness: "set_brightness",
          set_saturation: "set_saturation",
          set_hue: "set_hue",
        },
      };
      var Zd = function (a) {
        this.byteCode = a;
        this.precisionHint = 1;
        this.__glSourceDirty = !0;
        this.__numPasses = 1;
        this.__data = Oo._new(a);
      };
      h["openfl.display.Shader"] = Zd;
      Zd.__name__ = "openfl.display.Shader";
      Zd.prototype = {
        __clearUseArray: function () {
          for (var a = 0, b = this.__paramBool; a < b.length; ) {
            var c = b[a];
            ++a;
            c.__useArray = !1;
          }
          a = 0;
          for (b = this.__paramFloat; a < b.length; )
            (c = b[a]), ++a, (c.__useArray = !1);
          a = 0;
          for (b = this.__paramInt; a < b.length; )
            (c = b[a]), ++a, (c.__useArray = !1);
        },
        __createGLShader: function (a, b) {
          var c = this.__context.gl,
            d = c.createShader(b);
          c.shaderSource(d, a);
          c.compileShader(d);
          var e = c.getShaderInfoLog(d),
            f = null != e && "" != K.trim(e),
            k = c.getShaderParameter(d, c.COMPILE_STATUS);
          if (f || 0 == k)
            (b =
              (0 == k ? "Error" : "Info") +
              (b == c.VERTEX_SHADER
                ? " compiling vertex shader"
                : " compiling fragment shader")),
              (b = b + ("\n" + e) + ("\n" + a)),
              0 == k
                ? Ka.error(b, {
                    fileName: "openfl/display/Shader.hx",
                    lineNumber: 334,
                    className: "openfl.display.Shader",
                    methodName: "__createGLShader",
                  })
                : f &&
                  Ka.debug(b, {
                    fileName: "openfl/display/Shader.hx",
                    lineNumber: 335,
                    className: "openfl.display.Shader",
                    methodName: "__createGLShader",
                  });
          return d;
        },
        __createGLProgram: function (a, b) {
          var c = this.__context.gl;
          a = this.__createGLShader(a, c.VERTEX_SHADER);
          var d = this.__createGLShader(b, c.FRAGMENT_SHADER);
          b = c.createProgram();
          for (var e = 0, f = this.__paramFloat; e < f.length; ) {
            var k = f[e];
            ++e;
            if (
              -1 < k.name.indexOf("Position") &&
              K.startsWith(k.name, "openfl_")
            ) {
              c.bindAttribLocation(b, 0, k.name);
              break;
            }
          }
          c.attachShader(b, a);
          c.attachShader(b, d);
          c.linkProgram(b);
          0 == c.getProgramParameter(b, c.LINK_STATUS) &&
            ((c =
              "Unable to initialize the shader program\n" +
              c.getProgramInfoLog(b)),
            Ka.error(c, {
              fileName: "openfl/display/Shader.hx",
              lineNumber: 368,
              className: "openfl.display.Shader",
              methodName: "__createGLProgram",
            }));
          return b;
        },
        __disable: function () {
          null != this.program && this.__disableGL();
        },
        __disableGL: function () {
          for (
            var a = this.__context.gl, b = 0, c = 0, d = this.__inputBitmapData;
            c < d.length;

          ) {
            var e = d[c];
            ++c;
            e.__disableGL(this.__context, b);
            ++b;
            if (b == a.MAX_TEXTURE_IMAGE_UNITS) break;
          }
          c = 0;
          for (d = this.__paramBool; c < d.length; )
            (b = d[c]), ++c, b.__disableGL(this.__context);
          c = 0;
          for (d = this.__paramFloat; c < d.length; )
            (b = d[c]), ++c, b.__disableGL(this.__context);
          c = 0;
          for (d = this.__paramInt; c < d.length; )
            (b = d[c]), ++c, b.__disableGL(this.__context);
          this.__context.__bindGLArrayBuffer(null);
          "opengl" == this.__context.__context.type && a.disable(a.TEXTURE_2D);
        },
        __enable: function () {
          this.__init();
          null != this.program && this.__enableGL();
        },
        __enableGL: function () {
          for (
            var a = 0, b = this.__context.gl, c = 0, d = this.__inputBitmapData;
            c < d.length;

          ) {
            var e = d[c];
            ++c;
            b.uniform1i(e.index, a);
            ++a;
          }
          "opengl" == this.__context.__context.type &&
            0 < a &&
            b.enable(b.TEXTURE_2D);
        },
        __init: function () {
          null == this.__data && (this.__data = Oo._new(null));
          null == this.__glFragmentSource ||
            null == this.__glVertexSource ||
            (null != this.program && !this.__glSourceDirty) ||
            this.__initGL();
        },
        __initGL: function () {
          if (this.__glSourceDirty || null == this.__paramBool)
            (this.__glSourceDirty = !1),
              (this.program = null),
              (this.__inputBitmapData = []),
              (this.__paramBool = []),
              (this.__paramFloat = []),
              (this.__paramInt = []),
              this.__processGLData(this.get_glVertexSource(), "attribute"),
              this.__processGLData(this.get_glVertexSource(), "uniform"),
              this.__processGLData(this.get_glFragmentSource(), "uniform");
          if (null != this.__context && null == this.program) {
            var a = this.__context.gl,
              b =
                1 == this.precisionHint
                  ? "precision mediump float;\n"
                  : "precision lowp float;\n",
              c = b + this.get_glVertexSource();
            b += this.get_glFragmentSource();
            var d = c + b;
            Object.prototype.hasOwnProperty.call(this.__context.__programs.h, d)
              ? (this.program = this.__context.__programs.h[d])
              : ((this.program = this.__context.createProgram(1)),
                (this.program.__glProgram = this.__createGLProgram(c, b)),
                (this.__context.__programs.h[d] = this.program));
            if (null != this.program) {
              this.glProgram = this.program.__glProgram;
              c = 0;
              for (b = this.__inputBitmapData; c < b.length; )
                (d = b[c]),
                  ++c,
                  (d.index = d.__isUniform
                    ? a.getUniformLocation(this.glProgram, d.name)
                    : a.getAttribLocation(this.glProgram, d.name));
              c = 0;
              for (b = this.__paramBool; c < b.length; )
                (d = b[c]),
                  ++c,
                  (d.index = d.__isUniform
                    ? a.getUniformLocation(this.glProgram, d.name)
                    : a.getAttribLocation(this.glProgram, d.name));
              c = 0;
              for (b = this.__paramFloat; c < b.length; )
                (d = b[c]),
                  ++c,
                  (d.index = d.__isUniform
                    ? a.getUniformLocation(this.glProgram, d.name)
                    : a.getAttribLocation(this.glProgram, d.name));
              c = 0;
              for (b = this.__paramInt; c < b.length; )
                (d = b[c]),
                  ++c,
                  (d.index = d.__isUniform
                    ? a.getUniformLocation(this.glProgram, d.name)
                    : a.getAttribLocation(this.glProgram, d.name));
            }
          }
        },
        __processGLData: function (a, b) {
          var c = 0,
            d;
          for (
            d =
              "uniform" == b
                ? new ya("uniform ([A-Za-z0-9]+) ([A-Za-z0-9_]+)", "")
                : new ya("attribute ([A-Za-z0-9]+) ([A-Za-z0-9_]+)", "");
            d.matchSub(a, c);

          ) {
            var e = d.matched(1);
            var f = d.matched(2);
            if (!K.startsWith(f, "gl_")) {
              c = "uniform" == b;
              if (K.startsWith(e, "sampler")) {
                e = new Ni();
                e.name = f;
                e.__isUniform = c;
                this.__inputBitmapData.push(e);
                switch (f) {
                  case "bitmap":
                    this.__bitmap = e;
                    break;
                  case "openfl_Texture":
                    this.__texture = e;
                }
                this.__data[f] = e;
                this.__isGenerated && (this[f] = e);
              } else if (
                !Object.prototype.hasOwnProperty.call(this.__data, f) ||
                null == qa.field(this.__data, f)
              ) {
                switch (e) {
                  case "bool":
                    var k = 0;
                    break;
                  case "bvec2":
                    k = 1;
                    break;
                  case "bvec3":
                    k = 2;
                    break;
                  case "bvec4":
                    k = 3;
                    break;
                  case "dvec2":
                  case "vec2":
                    k = 5;
                    break;
                  case "dvec3":
                  case "vec3":
                    k = 6;
                    break;
                  case "double":
                  case "float":
                    k = 4;
                    break;
                  case "ivec3":
                  case "uvec3":
                    k = 10;
                    break;
                  case "ivec4":
                  case "uvec4":
                    k = 11;
                    break;
                  case "mat2":
                  case "mat2x2":
                    k = 12;
                    break;
                  case "mat2x3":
                    k = 13;
                    break;
                  case "mat2x4":
                    k = 14;
                    break;
                  case "mat3x2":
                    k = 15;
                    break;
                  case "mat3":
                  case "mat3x3":
                    k = 16;
                    break;
                  case "mat3x4":
                    k = 17;
                    break;
                  case "mat4":
                  case "mat4x4":
                    k = 20;
                    break;
                  case "mat4x2":
                    k = 18;
                    break;
                  case "mat4x3":
                    k = 19;
                    break;
                  case "int":
                  case "uint":
                    k = 8;
                    break;
                  case "ivec2":
                  case "uvec2":
                    k = 9;
                    break;
                  case "dvec4":
                  case "vec4":
                    k = 7;
                    break;
                  default:
                    k = null;
                }
                switch (k) {
                  case 1:
                  case 5:
                  case 9:
                    e = 2;
                    break;
                  case 3:
                  case 7:
                  case 11:
                  case 12:
                    e = 4;
                    break;
                  case 2:
                  case 6:
                  case 10:
                    e = 3;
                    break;
                  case 16:
                    e = 9;
                    break;
                  case 20:
                    e = 16;
                    break;
                  default:
                    e = 1;
                }
                switch (k) {
                  case 12:
                    var r = 2;
                    break;
                  case 16:
                    r = 3;
                    break;
                  case 20:
                    r = 4;
                    break;
                  default:
                    r = 1;
                }
                switch (k) {
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                    var l = new ng();
                    l.set_name(f);
                    l.type = k;
                    l.__arrayLength = r;
                    l.__isBool = !0;
                    l.__isUniform = c;
                    l.__length = e;
                    this.__paramBool.push(l);
                    "openfl_HasColorTransform" == f &&
                      (this.__hasColorTransform = l);
                    this.__data[f] = l;
                    this.__isGenerated && (this[f] = l);
                    break;
                  case 8:
                  case 9:
                  case 10:
                  case 11:
                    l = new ng();
                    l.set_name(f);
                    l.type = k;
                    l.__arrayLength = r;
                    l.__isInt = !0;
                    l.__isUniform = c;
                    l.__length = e;
                    this.__paramInt.push(l);
                    this.__data[f] = l;
                    this.__isGenerated && (this[f] = l);
                    break;
                  default:
                    l = new ng();
                    l.set_name(f);
                    l.type = k;
                    l.__arrayLength = r;
                    0 < r &&
                      ((k = r * r),
                      (k = null != k ? new Float32Array(k) : null),
                      (l.__uniformMatrix = k));
                    l.__isFloat = !0;
                    l.__isUniform = c;
                    l.__length = e;
                    this.__paramFloat.push(l);
                    if (K.startsWith(f, "openfl_"))
                      switch (f) {
                        case "openfl_Alpha":
                          this.__alpha = l;
                          break;
                        case "openfl_ColorMultiplier":
                          this.__colorMultiplier = l;
                          break;
                        case "openfl_ColorOffset":
                          this.__colorOffset = l;
                          break;
                        case "openfl_Matrix":
                          this.__matrix = l;
                          break;
                        case "openfl_Position":
                          this.__position = l;
                          break;
                        case "openfl_TextureCoord":
                          this.__textureCoord = l;
                          break;
                        case "openfl_TextureSize":
                          this.__textureSize = l;
                      }
                    this.__data[f] = l;
                    this.__isGenerated && (this[f] = l);
                }
              }
              f = d.matchedPos();
              c = f.pos + f.len;
            }
          }
        },
        __update: function () {
          null != this.program && this.__updateGL();
        },
        __updateFromBuffer: function (a, b) {
          null != this.program && this.__updateGLFromBuffer(a, b);
        },
        __updateGL: function () {
          for (var a = 0, b = 0, c = this.__inputBitmapData; b < c.length; ) {
            var d = c[b];
            ++b;
            d.__updateGL(this.__context, a);
            ++a;
          }
          b = 0;
          for (c = this.__paramBool; b < c.length; )
            (a = c[b]), ++b, a.__updateGL(this.__context);
          b = 0;
          for (c = this.__paramFloat; b < c.length; )
            (a = c[b]), ++b, a.__updateGL(this.__context);
          b = 0;
          for (c = this.__paramInt; b < c.length; )
            (a = c[b]), ++b, a.__updateGL(this.__context);
        },
        __updateGLFromBuffer: function (a, b) {
          for (var c = 0, d, e, f, k, r, l = 0, g = a.inputCount; l < g; )
            (r = l++),
              (d = a.inputRefs[r]),
              (e = a.inputs[r]),
              (f = a.inputFilter[r]),
              (k = a.inputMipFilter[r]),
              (r = a.inputWrap[r]),
              null != e && (d.__updateGL(this.__context, c, e, f, k, r), ++c);
          l = this.__context.gl;
          0 < a.paramDataLength
            ? (null == a.paramDataBuffer &&
                (a.paramDataBuffer = l.createBuffer()),
              this.__context.__bindGLArrayBuffer(a.paramDataBuffer),
              Sc.bufferData(l, l.ARRAY_BUFFER, a.paramData, l.DYNAMIC_DRAW))
            : this.__context.__bindGLArrayBuffer(null);
          e = d = c = 0;
          f = a.paramBoolCount;
          k = a.paramFloatCount;
          var u = a.paramData,
            m = null,
            h = null,
            p = null;
          l = 0;
          for (g = a.paramCount; l < g; ) {
            r = l++;
            var n = !1;
            if (r < f) {
              var q = a.paramRefs_Bool[c];
              for (var z = 0, Km = a.overrideBoolCount; z < Km; ) {
                var t = z++;
                if (q.name == a.overrideBoolNames[t]) {
                  m = a.overrideBoolValues[t];
                  n = !0;
                  break;
                }
              }
              n
                ? q.__updateGL(this.__context, m)
                : q.__updateGLFromBuffer(
                    this.__context,
                    u,
                    a.paramPositions[r],
                    a.paramLengths[r],
                    b
                  );
              ++c;
            } else if (r < f + k) {
              q = a.paramRefs_Float[d];
              z = 0;
              for (Km = a.overrideFloatCount; z < Km; )
                if (((t = z++), q.name == a.overrideFloatNames[t])) {
                  h = a.overrideFloatValues[t];
                  n = !0;
                  break;
                }
              n
                ? q.__updateGL(this.__context, h)
                : q.__updateGLFromBuffer(
                    this.__context,
                    u,
                    a.paramPositions[r],
                    a.paramLengths[r],
                    b
                  );
              ++d;
            } else {
              q = a.paramRefs_Int[e];
              z = 0;
              for (Km = a.overrideIntCount; z < Km; )
                if (((t = z++), q.name == a.overrideIntNames[t])) {
                  p = a.overrideIntValues[t];
                  n = !0;
                  break;
                }
              n
                ? q.__updateGL(this.__context, p)
                : q.__updateGLFromBuffer(
                    this.__context,
                    u,
                    a.paramPositions[r],
                    a.paramLengths[r],
                    b
                  );
              ++e;
            }
          }
        },
        get_glFragmentSource: function () {
          return this.__glFragmentSource;
        },
        get_glVertexSource: function () {
          return this.__glVertexSource;
        },
        __class__: Zd,
        __properties__: {
          get_glVertexSource: "get_glVertexSource",
          get_glFragmentSource: "get_glFragmentSource",
        },
      };
      var qh = function (a) {
        null == this.__glFragmentSource &&
          (this.__glFragmentSource =
            "varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tvoid main(void) {\n\n\t\t\tvec4 color = texture2D (bitmap, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n\t\t}");
        null == this.__glVertexSource &&
          (this.__glVertexSource =
            "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t}");
        Zd.call(this, a);
        this.__isGenerated = !0;
        this.__initGL();
      };
      h["openfl.display.GraphicsShader"] = qh;
      qh.__name__ = "openfl.display.GraphicsShader";
      qh.__super__ = Zd;
      qh.prototype = q(Zd.prototype, { __class__: qh });
      var ze = function () {
        null == this.__glFragmentSource &&
          (this.__glFragmentSource =
            "\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tuniform bool hasTransform;\n\t\tuniform bool hasColorTransform;\n\n\t\tvec4 flixel_texture2D(sampler2D bitmap, vec2 coord)\n\t\t{\n\t\t\tvec4 color = texture2D(bitmap, coord);\n\t\t\tif (!hasTransform)\n\t\t\t{\n\t\t\t\treturn color;\n\t\t\t}\n\n\t\t\tif (color.a == 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t}\n\n\t\t\tif (!hasColorTransform)\n\t\t\t{\n\t\t\t\treturn color * openfl_Alphav;\n\t\t\t}\n\n\t\t\tcolor = vec4(color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4(0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp(openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t}\n\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t}\n\t\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\tgl_FragColor = flixel_texture2D(bitmap, openfl_TextureCoordv);\n\t\t}");
        null == this.__glVertexSource &&
          (this.__glVertexSource =
            "\n\t\tattribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\t\n\t\tattribute float alpha;\n\t\tattribute vec4 colorMultiplier;\n\t\tattribute vec4 colorOffset;\n\t\tuniform bool hasColorTransform;\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t\t\n\t\t\topenfl_Alphav = openfl_Alpha * alpha;\n\t\t\t\n\t\t\tif (hasColorTransform)\n\t\t\t{\n\t\t\t\topenfl_ColorOffsetv = colorOffset / 255.0;\n\t\t\t\topenfl_ColorMultiplierv = colorMultiplier;\n\t\t\t}\n\t\t}");
        qh.call(this);
        this.__isGenerated = !0;
        this.__initGL();
      };
      h["flixel.graphics.tile.FlxGraphicsShader"] = ze;
      ze.__name__ = "flixel.graphics.tile.FlxGraphicsShader";
      ze.__super__ = qh;
      ze.prototype = q(qh.prototype, { __class__: ze });
      var ck = function () {
        null == this.__glFragmentSource &&
          (this.__glFragmentSource =
            "\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tuniform bool hasTransform;\n\t\tuniform bool hasColorTransform;\n\n\t\tvec4 flixel_texture2D(sampler2D bitmap, vec2 coord)\n\t\t{\n\t\t\tvec4 color = texture2D(bitmap, coord);\n\t\t\tif (!hasTransform)\n\t\t\t{\n\t\t\t\treturn color;\n\t\t\t}\n\n\t\t\tif (color.a == 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t}\n\n\t\t\tif (!hasColorTransform)\n\t\t\t{\n\t\t\t\treturn color * openfl_Alphav;\n\t\t\t}\n\n\t\t\tcolor = vec4(color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4(0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp(openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t}\n\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t}\n\n\t\tuniform vec3 uTime;\n\t\tuniform bool awesomeOutline;\n\n\t\tconst float offset = 1.0 / 128.0;\n\t\tvec3 normalizeColor(vec3 color)\n\t\t{\n\t\t\treturn vec3(\n\t\t\t\tcolor[0] / 255.0,\n\t\t\t\tcolor[1] / 255.0,\n\t\t\t\tcolor[2] / 255.0\n\t\t\t);\n\t\t}\n\n\t\tvec3 rgb2hsv(vec3 c)\n\t\t{\n\t\t\tvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n\t\t\tvec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n\t\t\tvec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n\t\t\tfloat d = q.x - min(q.w, q.y);\n\t\t\tfloat e = 1.0e-10;\n\t\t\treturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n\t\t}\n\n\t\tvec3 hsv2rgb(vec3 c)\n\t\t{\n\t\t\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\t\t\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\t\t\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n\t\t}\n\n\t\tvoid main()\n\t\t{\n\t\t\tvec4 color = flixel_texture2D(bitmap, openfl_TextureCoordv);\n\n\t\t\tvec4 swagColor = vec4(rgb2hsv(vec3(color[0], color[1], color[2])), color[3]);\n\n\t\t\t// [0] is the hue???\n\t\t\tswagColor[0] = swagColor[0] + uTime[0];\n\t\t\tswagColor[1] = swagColor[1] + uTime[1];\n\t\t\tswagColor[2] = swagColor[2] * (1.0 + uTime[2]);\n\t\t\t\n\t\t\tif(swagColor[1] < 0.0)\n\t\t\t{\n\t\t\t\tswagColor[1] = 0.0;\n\t\t\t}\n\t\t\telse if(swagColor[1] > 1.0)\n\t\t\t{\n\t\t\t\tswagColor[1] = 1.0;\n\t\t\t}\n\n\t\t\tcolor = vec4(hsv2rgb(vec3(swagColor[0], swagColor[1], swagColor[2])), swagColor[3]);\n\n\t\t\tif (awesomeOutline)\n\t\t\t{\n\t\t\t\t // Outline bullshit?\n\t\t\t\tvec2 size = vec2(3, 3);\n\n\t\t\t\tif (color.a <= 0.5) {\n\t\t\t\t\tfloat w = size.x / openfl_TextureSize.x;\n\t\t\t\t\tfloat h = size.y / openfl_TextureSize.y;\n\t\t\t\t\t\n\t\t\t\t\tif (flixel_texture2D(bitmap, vec2(openfl_TextureCoordv.x + w, openfl_TextureCoordv.y)).a != 0.\n\t\t\t\t\t|| flixel_texture2D(bitmap, vec2(openfl_TextureCoordv.x - w, openfl_TextureCoordv.y)).a != 0.\n\t\t\t\t\t|| flixel_texture2D(bitmap, vec2(openfl_TextureCoordv.x, openfl_TextureCoordv.y + h)).a != 0.\n\t\t\t\t\t|| flixel_texture2D(bitmap, vec2(openfl_TextureCoordv.x, openfl_TextureCoordv.y - h)).a != 0.)\n\t\t\t\t\t\tcolor = vec4(1.0, 1.0, 1.0, 1.0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgl_FragColor = color;\n\n\t\t\t/* \n\t\t\tif (color.a > 0.5)\n\t\t\t\tgl_FragColor = color;\n\t\t\telse\n\t\t\t{\n\t\t\t\tfloat a = flixel_texture2D(bitmap, vec2(openfl_TextureCoordv + offset, openfl_TextureCoordv.y)).a +\n\t\t\t\t\t\t  flixel_texture2D(bitmap, vec2(openfl_TextureCoordv, openfl_TextureCoordv.y - offset)).a +\n\t\t\t\t\t\t  flixel_texture2D(bitmap, vec2(openfl_TextureCoordv - offset, openfl_TextureCoordv.y)).a +\n\t\t\t\t\t\t  flixel_texture2D(bitmap, vec2(openfl_TextureCoordv, openfl_TextureCoordv.y + offset)).a;\n\t\t\t\tif (color.a < 1.0 && a > 0.0)\n\t\t\t\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 0.8);\n\t\t\t\telse\n\t\t\t\t\tgl_FragColor = color;\n\t\t\t} */\n\t\t}");
        null == this.__glVertexSource &&
          (this.__glVertexSource =
            "\n\t\tattribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tattribute float alpha;\n\t\tattribute vec4 colorMultiplier;\n\t\tattribute vec4 colorOffset;\n\t\tuniform bool hasColorTransform;\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\t\tif (openfl_HasColorTransform) {\n\t\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\t\t\t}\n\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t\topenfl_Alphav = openfl_Alpha * alpha;\n\t\t\tif (hasColorTransform)\n\t\t\t{\n\t\t\t\topenfl_ColorOffsetv = colorOffset / 255.0;\n\t\t\t\topenfl_ColorMultiplierv = colorMultiplier;\n\t\t\t}\n\t\t}");
        ze.call(this);
        this.__isGenerated = !0;
        this.__initGL();
      };
      h.ColorSwapShader = ck;
      ck.__name__ = "ColorSwapShader";
      ck.__super__ = ze;
      ck.prototype = q(ze.prototype, { __class__: ck });
      var P = function () {};
      h.Conductor = P;
      P.__name__ = "Conductor";
      P.judgeNote = function (a, b) {
        null == b && (b = 0);
        a = C.instance.ratingsData;
        for (var c = 0, d = a.length - 1; c < d; ) {
          var e = c++;
          if (b <= a[e].hitWindow) return a[e];
        }
        return a[a.length - 1];
      };
      P.getBPMFromSeconds = function (a) {
        for (
          var b = {
              stepTime: 0,
              songTime: 0,
              bpm: P.bpm,
              stepCrochet: P.stepCrochet,
            },
            c = 0,
            d = P.bpmChangeMap.length;
          c < d;

        ) {
          var e = c++;
          a >= P.bpmChangeMap[e].songTime && (b = P.bpmChangeMap[e]);
        }
        return b;
      };
      P.getBPMFromStep = function (a) {
        for (
          var b = {
              stepTime: 0,
              songTime: 0,
              bpm: P.bpm,
              stepCrochet: P.stepCrochet,
            },
            c = 0,
            d = P.bpmChangeMap.length;
          c < d;

        ) {
          var e = c++;
          P.bpmChangeMap[e].stepTime <= a && (b = P.bpmChangeMap[e]);
        }
        return b;
      };
      P.beatToSeconds = function (a) {
        a *= 4;
        var b = P.getBPMFromStep(a);
        return b.songTime + ((a - b.stepTime) / (b.bpm / 60) / 4) * 1e3;
      };
      P.mapBPMChanges = function (a) {
        P.bpmChangeMap = [];
        for (var b = a.bpm, c = 0, d = 0, e = 0, f = a.notes.length; e < f; ) {
          var k = e++;
          a.notes[k].changeBPM &&
            a.notes[k].bpm != b &&
            ((b = a.notes[k].bpm),
            P.bpmChangeMap.push({
              stepTime: c,
              songTime: d,
              bpm: b,
              stepCrochet: ((60 / b) * 1e3) / 4,
            }));
          k = Math.round(4 * P.getSectionBeats(a, k));
          c += k;
          d += (((60 / b) * 1e3) / 4) * k;
        }
        wb.trace("new BPM map BUDDY " + M.string(P.bpmChangeMap), {
          fileName: "source/Conductor.hx",
          lineNumber: 143,
          className: "Conductor",
          methodName: "mapBPMChanges",
        });
      };
      P.getSectionBeats = function (a, b) {
        var c = null;
        null != a.notes[b] && (c = a.notes[b].sectionBeats);
        return null != c ? c : 4;
      };
      P.changeBPM = function (a) {
        P.bpm = a;
        P.crochet = (60 / P.bpm) * 1e3;
        P.stepCrochet = P.crochet / 4;
      };
      var Lh = function (a) {
        this.noteSplash = !0;
        this.score = 350;
        this.ratingMod = 1;
        this.hitWindow = 0;
        this.name = this.image = this.counter = "";
        this.image = this.name = a;
        this.counter = a + "s";
        this.hitWindow = qa.field(y, a + "Window");
        null == this.hitWindow && (this.hitWindow = 0);
      };
      h.Rating = Lh;
      Lh.__name__ = "Rating";
      Lh.prototype = {
        increase: function (a) {
          null == a && (a = 1);
          C.instance[this.counter] = qa.field(C.instance, this.counter) + a;
        },
        __class__: Lh,
      };
      var Wa = (w.Control = {
        __ename__: "Control",
        __constructs__: null,
        UI_UP: {
          _hx_name: "UI_UP",
          _hx_index: 0,
          __enum__: "Control",
          toString: p,
        },
        UI_LEFT: {
          _hx_name: "UI_LEFT",
          _hx_index: 1,
          __enum__: "Control",
          toString: p,
        },
        UI_RIGHT: {
          _hx_name: "UI_RIGHT",
          _hx_index: 2,
          __enum__: "Control",
          toString: p,
        },
        UI_DOWN: {
          _hx_name: "UI_DOWN",
          _hx_index: 3,
          __enum__: "Control",
          toString: p,
        },
        NOTE_UP: {
          _hx_name: "NOTE_UP",
          _hx_index: 4,
          __enum__: "Control",
          toString: p,
        },
        NOTE_LEFT: {
          _hx_name: "NOTE_LEFT",
          _hx_index: 5,
          __enum__: "Control",
          toString: p,
        },
        NOTE_RIGHT: {
          _hx_name: "NOTE_RIGHT",
          _hx_index: 6,
          __enum__: "Control",
          toString: p,
        },
        NOTE_DOWN: {
          _hx_name: "NOTE_DOWN",
          _hx_index: 7,
          __enum__: "Control",
          toString: p,
        },
        RESET: {
          _hx_name: "RESET",
          _hx_index: 8,
          __enum__: "Control",
          toString: p,
        },
        ACCEPT: {
          _hx_name: "ACCEPT",
          _hx_index: 9,
          __enum__: "Control",
          toString: p,
        },
        BACK: {
          _hx_name: "BACK",
          _hx_index: 10,
          __enum__: "Control",
          toString: p,
        },
        PAUSE: {
          _hx_name: "PAUSE",
          _hx_index: 11,
          __enum__: "Control",
          toString: p,
        },
      });
      Wa.__constructs__ = [
        Wa.UI_UP,
        Wa.UI_LEFT,
        Wa.UI_RIGHT,
        Wa.UI_DOWN,
        Wa.NOTE_UP,
        Wa.NOTE_LEFT,
        Wa.NOTE_RIGHT,
        Wa.NOTE_DOWN,
        Wa.RESET,
        Wa.ACCEPT,
        Wa.BACK,
        Wa.PAUSE,
      ];
      var Jg = (w.KeyboardScheme = {
        __ename__: "KeyboardScheme",
        __constructs__: null,
        Solo: {
          _hx_name: "Solo",
          _hx_index: 0,
          __enum__: "KeyboardScheme",
          toString: p,
        },
        Duo:
          ((x = function (a) {
            return {
              _hx_index: 1,
              first: a,
              __enum__: "KeyboardScheme",
              toString: p,
            };
          }),
          (x._hx_name = "Duo"),
          (x.__params__ = ["first"]),
          x),
        None: {
          _hx_name: "None",
          _hx_index: 2,
          __enum__: "KeyboardScheme",
          toString: p,
        },
        Custom: {
          _hx_name: "Custom",
          _hx_index: 3,
          __enum__: "KeyboardScheme",
          toString: p,
        },
      });
      Jg.__constructs__ = [Jg.Solo, Jg.Duo, Jg.None, Jg.Custom];
      var Mh = function (a, b, c) {
        this.name = "";
        this.name = a;
        null == b && (b = []);
        null == c && (c = []);
        this.digitalActions = b;
        this.analogActions = c;
      };
      h["flixel.input.actions.FlxActionSet"] = Mh;
      Mh.__name__ = "flixel.input.actions.FlxActionSet";
      Mh.__interfaces__ = [U];
      Mh.prototype = {
        add: function (a) {
          if (a.type == Nh.DIGITAL) {
            if (-1 != this.digitalActions.indexOf(a)) return !1;
            this.digitalActions.push(a);
            return !0;
          }
          if (a.type == Nh.ANALOG) {
            if (-1 != this.analogActions.indexOf(a)) return !1;
            this.analogActions.push(a);
            return !0;
          }
          return !1;
        },
        destroy: function () {
          this.digitalActions = V.destroyArray(this.digitalActions);
          this.analogActions = V.destroyArray(this.analogActions);
        },
        __class__: Mh,
      };
      var dk = function (a, b) {
        null == b && (b = Jg.None);
        this.keyboardScheme = Jg.None;
        this.gamepadsAdded = [];
        this.byName = new Q();
        this._reset = new $b("reset");
        this._pause = new $b("pause");
        this._back = new $b("back");
        this._accept = new $b("accept");
        this._note_downR = new $b("note_down-release");
        this._note_rightR = new $b("note_right-release");
        this._note_leftR = new $b("note_left-release");
        this._note_upR = new $b("note_up-release");
        this._note_downP = new $b("note_down-press");
        this._note_rightP = new $b("note_right-press");
        this._note_leftP = new $b("note_left-press");
        this._note_upP = new $b("note_up-press");
        this._note_down = new $b("note_down");
        this._note_right = new $b("note_right");
        this._note_left = new $b("note_left");
        this._note_up = new $b("note_up");
        this._ui_downR = new $b("ui_down-release");
        this._ui_rightR = new $b("ui_right-release");
        this._ui_leftR = new $b("ui_left-release");
        this._ui_upR = new $b("ui_up-release");
        this._ui_downP = new $b("ui_down-press");
        this._ui_rightP = new $b("ui_right-press");
        this._ui_leftP = new $b("ui_left-press");
        this._ui_upP = new $b("ui_up-press");
        this._ui_down = new $b("ui_down");
        this._ui_right = new $b("ui_right");
        this._ui_left = new $b("ui_left");
        this._ui_up = new $b("ui_up");
        Mh.call(this, a);
        this.add(this._ui_up);
        this.add(this._ui_left);
        this.add(this._ui_right);
        this.add(this._ui_down);
        this.add(this._ui_upP);
        this.add(this._ui_leftP);
        this.add(this._ui_rightP);
        this.add(this._ui_downP);
        this.add(this._ui_upR);
        this.add(this._ui_leftR);
        this.add(this._ui_rightR);
        this.add(this._ui_downR);
        this.add(this._note_up);
        this.add(this._note_left);
        this.add(this._note_right);
        this.add(this._note_down);
        this.add(this._note_upP);
        this.add(this._note_leftP);
        this.add(this._note_rightP);
        this.add(this._note_downP);
        this.add(this._note_upR);
        this.add(this._note_leftR);
        this.add(this._note_rightR);
        this.add(this._note_downR);
        this.add(this._accept);
        this.add(this._back);
        this.add(this._pause);
        this.add(this._reset);
        a = 0;
        for (var c = this.digitalActions; a < c.length; ) {
          var d = c[a];
          ++a;
          this.byName.h[d.name] = d;
        }
        this.setKeyboardScheme(b, !1);
      };
      h.Controls = dk;
      dk.__name__ = "Controls";
      dk.__super__ = Mh;
      dk.prototype = q(Mh.prototype, {
        setKeyboardScheme: function (a, b) {
          null == b && (b = !0);
          b && this.removeKeyboard();
          this.keyboardScheme = a;
          b = y.keyBinds;
          switch (a._hx_index) {
            case 0:
              a = b.h.ui_up.slice();
              for (var c = 0, d = a.length; c < d; ) {
                var e = c++;
                -1 == e && X.remove(a, e);
              }
              switch (Wa.UI_UP._hx_index) {
                case 0:
                  d = this._ui_up;
                  e = 1;
                  for (c = 0; c < a.length; ) {
                    var f = a[c];
                    ++c;
                    -1 != f && d.addKey(f, e);
                  }
                  d = this._ui_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 1:
                  d = this._ui_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 2:
                  d = this._ui_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 3:
                  d = this._ui_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 4:
                  d = this._note_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 5:
                  d = this._note_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 6:
                  d = this._note_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 7:
                  d = this._note_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 8:
                  d = this._reset;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 9:
                  d = this._accept;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 10:
                  d = this._back;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 11:
                  for (d = this._pause, e = 2, c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
              }
              a = b.h.ui_down.slice();
              c = 0;
              for (d = a.length; c < d; ) (e = c++), -1 == e && X.remove(a, e);
              switch (Wa.UI_DOWN._hx_index) {
                case 0:
                  d = this._ui_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 1:
                  d = this._ui_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 2:
                  d = this._ui_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 3:
                  d = this._ui_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 4:
                  d = this._note_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 5:
                  d = this._note_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 6:
                  d = this._note_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 7:
                  d = this._note_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 8:
                  d = this._reset;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 9:
                  d = this._accept;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 10:
                  d = this._back;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 11:
                  for (d = this._pause, e = 2, c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
              }
              a = b.h.ui_left.slice();
              c = 0;
              for (d = a.length; c < d; ) (e = c++), -1 == e && X.remove(a, e);
              switch (Wa.UI_LEFT._hx_index) {
                case 0:
                  d = this._ui_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 1:
                  d = this._ui_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 2:
                  d = this._ui_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 3:
                  d = this._ui_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 4:
                  d = this._note_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 5:
                  d = this._note_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 6:
                  d = this._note_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 7:
                  d = this._note_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 8:
                  d = this._reset;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 9:
                  d = this._accept;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 10:
                  d = this._back;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 11:
                  for (d = this._pause, e = 2, c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
              }
              a = b.h.ui_right.slice();
              c = 0;
              for (d = a.length; c < d; ) (e = c++), -1 == e && X.remove(a, e);
              switch (Wa.UI_RIGHT._hx_index) {
                case 0:
                  d = this._ui_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 1:
                  d = this._ui_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 2:
                  d = this._ui_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 3:
                  d = this._ui_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 4:
                  d = this._note_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 5:
                  d = this._note_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 6:
                  d = this._note_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 7:
                  d = this._note_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 8:
                  d = this._reset;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 9:
                  d = this._accept;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 10:
                  d = this._back;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 11:
                  for (d = this._pause, e = 2, c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
              }
              a = b.h.note_up.slice();
              c = 0;
              for (d = a.length; c < d; ) (e = c++), -1 == e && X.remove(a, e);
              switch (Wa.NOTE_UP._hx_index) {
                case 0:
                  d = this._ui_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 1:
                  d = this._ui_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 2:
                  d = this._ui_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 3:
                  d = this._ui_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 4:
                  d = this._note_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 5:
                  d = this._note_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 6:
                  d = this._note_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 7:
                  d = this._note_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 8:
                  d = this._reset;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 9:
                  d = this._accept;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 10:
                  d = this._back;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 11:
                  for (d = this._pause, e = 2, c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
              }
              a = b.h.note_down.slice();
              c = 0;
              for (d = a.length; c < d; ) (e = c++), -1 == e && X.remove(a, e);
              switch (Wa.NOTE_DOWN._hx_index) {
                case 0:
                  d = this._ui_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 1:
                  d = this._ui_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 2:
                  d = this._ui_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 3:
                  d = this._ui_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 4:
                  d = this._note_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 5:
                  d = this._note_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 6:
                  d = this._note_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 7:
                  d = this._note_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 8:
                  d = this._reset;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 9:
                  d = this._accept;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 10:
                  d = this._back;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 11:
                  for (d = this._pause, e = 2, c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
              }
              a = b.h.note_left.slice();
              c = 0;
              for (d = a.length; c < d; ) (e = c++), -1 == e && X.remove(a, e);
              switch (Wa.NOTE_LEFT._hx_index) {
                case 0:
                  d = this._ui_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 1:
                  d = this._ui_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 2:
                  d = this._ui_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 3:
                  d = this._ui_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 4:
                  d = this._note_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 5:
                  d = this._note_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 6:
                  d = this._note_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 7:
                  d = this._note_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 8:
                  d = this._reset;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 9:
                  d = this._accept;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 10:
                  d = this._back;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 11:
                  for (d = this._pause, e = 2, c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
              }
              a = b.h.note_right.slice();
              c = 0;
              for (d = a.length; c < d; ) (e = c++), -1 == e && X.remove(a, e);
              switch (Wa.NOTE_RIGHT._hx_index) {
                case 0:
                  d = this._ui_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 1:
                  d = this._ui_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 2:
                  d = this._ui_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 3:
                  d = this._ui_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 4:
                  d = this._note_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 5:
                  d = this._note_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 6:
                  d = this._note_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 7:
                  d = this._note_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 8:
                  d = this._reset;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 9:
                  d = this._accept;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 10:
                  d = this._back;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 11:
                  for (d = this._pause, e = 2, c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
              }
              a = b.h.accept.slice();
              c = 0;
              for (d = a.length; c < d; ) (e = c++), -1 == e && X.remove(a, e);
              switch (Wa.ACCEPT._hx_index) {
                case 0:
                  d = this._ui_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 1:
                  d = this._ui_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 2:
                  d = this._ui_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 3:
                  d = this._ui_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 4:
                  d = this._note_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 5:
                  d = this._note_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 6:
                  d = this._note_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 7:
                  d = this._note_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 8:
                  d = this._reset;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 9:
                  d = this._accept;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 10:
                  d = this._back;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 11:
                  for (d = this._pause, e = 2, c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
              }
              a = b.h.back.slice();
              c = 0;
              for (d = a.length; c < d; ) (e = c++), -1 == e && X.remove(a, e);
              switch (Wa.BACK._hx_index) {
                case 0:
                  d = this._ui_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 1:
                  d = this._ui_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 2:
                  d = this._ui_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 3:
                  d = this._ui_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 4:
                  d = this._note_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 5:
                  d = this._note_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 6:
                  d = this._note_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 7:
                  d = this._note_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 8:
                  d = this._reset;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 9:
                  d = this._accept;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 10:
                  d = this._back;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 11:
                  for (d = this._pause, e = 2, c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
              }
              a = b.h.pause.slice();
              c = 0;
              for (d = a.length; c < d; ) (e = c++), -1 == e && X.remove(a, e);
              switch (Wa.PAUSE._hx_index) {
                case 0:
                  d = this._ui_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 1:
                  d = this._ui_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 2:
                  d = this._ui_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 3:
                  d = this._ui_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 4:
                  d = this._note_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 5:
                  d = this._note_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 6:
                  d = this._note_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 7:
                  d = this._note_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 8:
                  d = this._reset;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 9:
                  d = this._accept;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 10:
                  d = this._back;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 11:
                  for (d = this._pause, e = 2, c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
              }
              a = b.h.reset.slice();
              c = 0;
              for (d = a.length; c < d; ) (e = c++), -1 == e && X.remove(a, e);
              switch (Wa.RESET._hx_index) {
                case 0:
                  d = this._ui_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 1:
                  d = this._ui_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 2:
                  d = this._ui_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 3:
                  d = this._ui_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 4:
                  d = this._note_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 5:
                  d = this._note_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 6:
                  d = this._note_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 7:
                  d = this._note_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 8:
                  d = this._reset;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 9:
                  d = this._accept;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 10:
                  d = this._back;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 11:
                  for (d = this._pause, e = 2, c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
              }
              break;
            case 1:
              if (a.first) {
                a = [87].slice();
                c = 0;
                for (d = a.length; c < d; )
                  (e = c++), -1 == e && X.remove(a, e);
                switch (Wa.UI_UP._hx_index) {
                  case 0:
                    d = this._ui_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 1:
                    d = this._ui_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 2:
                    d = this._ui_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 3:
                    d = this._ui_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 4:
                    d = this._note_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 5:
                    d = this._note_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 6:
                    d = this._note_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 7:
                    d = this._note_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 8:
                    d = this._reset;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 9:
                    d = this._accept;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 10:
                    d = this._back;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 11:
                    for (d = this._pause, e = 2, c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                }
                a = [83].slice();
                c = 0;
                for (d = a.length; c < d; )
                  (e = c++), -1 == e && X.remove(a, e);
                switch (Wa.UI_DOWN._hx_index) {
                  case 0:
                    d = this._ui_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 1:
                    d = this._ui_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 2:
                    d = this._ui_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 3:
                    d = this._ui_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 4:
                    d = this._note_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 5:
                    d = this._note_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 6:
                    d = this._note_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 7:
                    d = this._note_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 8:
                    d = this._reset;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 9:
                    d = this._accept;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 10:
                    d = this._back;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 11:
                    for (d = this._pause, e = 2, c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                }
                a = [65].slice();
                c = 0;
                for (d = a.length; c < d; )
                  (e = c++), -1 == e && X.remove(a, e);
                switch (Wa.UI_LEFT._hx_index) {
                  case 0:
                    d = this._ui_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 1:
                    d = this._ui_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 2:
                    d = this._ui_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 3:
                    d = this._ui_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 4:
                    d = this._note_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 5:
                    d = this._note_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 6:
                    d = this._note_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 7:
                    d = this._note_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 8:
                    d = this._reset;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 9:
                    d = this._accept;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 10:
                    d = this._back;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 11:
                    for (d = this._pause, e = 2, c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                }
                a = [68].slice();
                c = 0;
                for (d = a.length; c < d; )
                  (e = c++), -1 == e && X.remove(a, e);
                switch (Wa.UI_RIGHT._hx_index) {
                  case 0:
                    d = this._ui_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 1:
                    d = this._ui_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 2:
                    d = this._ui_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 3:
                    d = this._ui_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 4:
                    d = this._note_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 5:
                    d = this._note_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 6:
                    d = this._note_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 7:
                    d = this._note_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 8:
                    d = this._reset;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 9:
                    d = this._accept;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 10:
                    d = this._back;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 11:
                    for (d = this._pause, e = 2, c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                }
                a = [87].slice();
                c = 0;
                for (d = a.length; c < d; )
                  (e = c++), -1 == e && X.remove(a, e);
                switch (Wa.NOTE_UP._hx_index) {
                  case 0:
                    d = this._ui_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 1:
                    d = this._ui_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 2:
                    d = this._ui_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 3:
                    d = this._ui_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 4:
                    d = this._note_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 5:
                    d = this._note_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 6:
                    d = this._note_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 7:
                    d = this._note_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 8:
                    d = this._reset;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 9:
                    d = this._accept;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 10:
                    d = this._back;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 11:
                    for (d = this._pause, e = 2, c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                }
                a = [83].slice();
                c = 0;
                for (d = a.length; c < d; )
                  (e = c++), -1 == e && X.remove(a, e);
                switch (Wa.NOTE_DOWN._hx_index) {
                  case 0:
                    d = this._ui_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 1:
                    d = this._ui_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 2:
                    d = this._ui_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 3:
                    d = this._ui_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 4:
                    d = this._note_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 5:
                    d = this._note_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 6:
                    d = this._note_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 7:
                    d = this._note_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 8:
                    d = this._reset;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 9:
                    d = this._accept;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 10:
                    d = this._back;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 11:
                    for (d = this._pause, e = 2, c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                }
                a = [65].slice();
                c = 0;
                for (d = a.length; c < d; )
                  (e = c++), -1 == e && X.remove(a, e);
                switch (Wa.NOTE_LEFT._hx_index) {
                  case 0:
                    d = this._ui_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 1:
                    d = this._ui_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 2:
                    d = this._ui_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 3:
                    d = this._ui_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 4:
                    d = this._note_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 5:
                    d = this._note_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 6:
                    d = this._note_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 7:
                    d = this._note_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 8:
                    d = this._reset;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 9:
                    d = this._accept;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 10:
                    d = this._back;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 11:
                    for (d = this._pause, e = 2, c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                }
                a = [68].slice();
                c = 0;
                for (d = a.length; c < d; )
                  (e = c++), -1 == e && X.remove(a, e);
                switch (Wa.NOTE_RIGHT._hx_index) {
                  case 0:
                    d = this._ui_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 1:
                    d = this._ui_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 2:
                    d = this._ui_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 3:
                    d = this._ui_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 4:
                    d = this._note_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 5:
                    d = this._note_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 6:
                    d = this._note_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 7:
                    d = this._note_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 8:
                    d = this._reset;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 9:
                    d = this._accept;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 10:
                    d = this._back;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 11:
                    for (d = this._pause, e = 2, c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                }
                a = [71, 90].slice();
                c = 0;
                for (d = a.length; c < d; )
                  (e = c++), -1 == e && X.remove(a, e);
                switch (Wa.ACCEPT._hx_index) {
                  case 0:
                    d = this._ui_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 1:
                    d = this._ui_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 2:
                    d = this._ui_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 3:
                    d = this._ui_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 4:
                    d = this._note_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 5:
                    d = this._note_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 6:
                    d = this._note_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 7:
                    d = this._note_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 8:
                    d = this._reset;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 9:
                    d = this._accept;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 10:
                    d = this._back;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 11:
                    for (d = this._pause, e = 2, c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                }
                a = [72, 88].slice();
                c = 0;
                for (d = a.length; c < d; )
                  (e = c++), -1 == e && X.remove(a, e);
                switch (Wa.BACK._hx_index) {
                  case 0:
                    d = this._ui_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 1:
                    d = this._ui_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 2:
                    d = this._ui_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 3:
                    d = this._ui_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 4:
                    d = this._note_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 5:
                    d = this._note_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 6:
                    d = this._note_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 7:
                    d = this._note_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 8:
                    d = this._reset;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 9:
                    d = this._accept;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 10:
                    d = this._back;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 11:
                    for (d = this._pause, e = 2, c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                }
                a = [49].slice();
                c = 0;
                for (d = a.length; c < d; )
                  (e = c++), -1 == e && X.remove(a, e);
                switch (Wa.PAUSE._hx_index) {
                  case 0:
                    d = this._ui_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 1:
                    d = this._ui_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 2:
                    d = this._ui_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 3:
                    d = this._ui_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 4:
                    d = this._note_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 5:
                    d = this._note_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 6:
                    d = this._note_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 7:
                    d = this._note_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 8:
                    d = this._reset;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 9:
                    d = this._accept;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 10:
                    d = this._back;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 11:
                    for (d = this._pause, e = 2, c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                }
                a = [82].slice();
              } else {
                a = [38].slice();
                c = 0;
                for (d = a.length; c < d; )
                  (e = c++), -1 == e && X.remove(a, e);
                switch (Wa.UI_UP._hx_index) {
                  case 0:
                    d = this._ui_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 1:
                    d = this._ui_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 2:
                    d = this._ui_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 3:
                    d = this._ui_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 4:
                    d = this._note_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 5:
                    d = this._note_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 6:
                    d = this._note_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 7:
                    d = this._note_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 8:
                    d = this._reset;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 9:
                    d = this._accept;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 10:
                    d = this._back;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 11:
                    for (d = this._pause, e = 2, c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                }
                a = [40].slice();
                c = 0;
                for (d = a.length; c < d; )
                  (e = c++), -1 == e && X.remove(a, e);
                switch (Wa.UI_DOWN._hx_index) {
                  case 0:
                    d = this._ui_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 1:
                    d = this._ui_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 2:
                    d = this._ui_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 3:
                    d = this._ui_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 4:
                    d = this._note_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 5:
                    d = this._note_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 6:
                    d = this._note_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 7:
                    d = this._note_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 8:
                    d = this._reset;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 9:
                    d = this._accept;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 10:
                    d = this._back;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 11:
                    for (d = this._pause, e = 2, c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                }
                a = [37].slice();
                c = 0;
                for (d = a.length; c < d; )
                  (e = c++), -1 == e && X.remove(a, e);
                switch (Wa.UI_LEFT._hx_index) {
                  case 0:
                    d = this._ui_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 1:
                    d = this._ui_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 2:
                    d = this._ui_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 3:
                    d = this._ui_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 4:
                    d = this._note_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 5:
                    d = this._note_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 6:
                    d = this._note_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 7:
                    d = this._note_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 8:
                    d = this._reset;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 9:
                    d = this._accept;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 10:
                    d = this._back;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 11:
                    for (d = this._pause, e = 2, c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                }
                a = [39].slice();
                c = 0;
                for (d = a.length; c < d; )
                  (e = c++), -1 == e && X.remove(a, e);
                switch (Wa.UI_RIGHT._hx_index) {
                  case 0:
                    d = this._ui_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 1:
                    d = this._ui_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 2:
                    d = this._ui_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 3:
                    d = this._ui_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 4:
                    d = this._note_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 5:
                    d = this._note_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 6:
                    d = this._note_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 7:
                    d = this._note_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 8:
                    d = this._reset;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 9:
                    d = this._accept;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 10:
                    d = this._back;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 11:
                    for (d = this._pause, e = 2, c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                }
                a = [38].slice();
                c = 0;
                for (d = a.length; c < d; )
                  (e = c++), -1 == e && X.remove(a, e);
                switch (Wa.NOTE_UP._hx_index) {
                  case 0:
                    d = this._ui_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 1:
                    d = this._ui_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 2:
                    d = this._ui_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 3:
                    d = this._ui_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 4:
                    d = this._note_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 5:
                    d = this._note_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 6:
                    d = this._note_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 7:
                    d = this._note_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 8:
                    d = this._reset;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 9:
                    d = this._accept;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 10:
                    d = this._back;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 11:
                    for (d = this._pause, e = 2, c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                }
                a = [40].slice();
                c = 0;
                for (d = a.length; c < d; )
                  (e = c++), -1 == e && X.remove(a, e);
                switch (Wa.NOTE_DOWN._hx_index) {
                  case 0:
                    d = this._ui_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 1:
                    d = this._ui_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 2:
                    d = this._ui_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 3:
                    d = this._ui_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 4:
                    d = this._note_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 5:
                    d = this._note_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 6:
                    d = this._note_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 7:
                    d = this._note_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 8:
                    d = this._reset;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 9:
                    d = this._accept;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 10:
                    d = this._back;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 11:
                    for (d = this._pause, e = 2, c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                }
                a = [37].slice();
                c = 0;
                for (d = a.length; c < d; )
                  (e = c++), -1 == e && X.remove(a, e);
                switch (Wa.NOTE_LEFT._hx_index) {
                  case 0:
                    d = this._ui_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 1:
                    d = this._ui_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 2:
                    d = this._ui_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 3:
                    d = this._ui_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 4:
                    d = this._note_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 5:
                    d = this._note_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 6:
                    d = this._note_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 7:
                    d = this._note_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 8:
                    d = this._reset;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 9:
                    d = this._accept;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 10:
                    d = this._back;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 11:
                    for (d = this._pause, e = 2, c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                }
                a = [39].slice();
                c = 0;
                for (d = a.length; c < d; )
                  (e = c++), -1 == e && X.remove(a, e);
                switch (Wa.NOTE_RIGHT._hx_index) {
                  case 0:
                    d = this._ui_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 1:
                    d = this._ui_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 2:
                    d = this._ui_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 3:
                    d = this._ui_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 4:
                    d = this._note_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 5:
                    d = this._note_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 6:
                    d = this._note_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 7:
                    d = this._note_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 8:
                    d = this._reset;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 9:
                    d = this._accept;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 10:
                    d = this._back;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 11:
                    for (d = this._pause, e = 2, c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                }
                a = [79].slice();
                c = 0;
                for (d = a.length; c < d; )
                  (e = c++), -1 == e && X.remove(a, e);
                switch (Wa.ACCEPT._hx_index) {
                  case 0:
                    d = this._ui_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 1:
                    d = this._ui_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 2:
                    d = this._ui_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 3:
                    d = this._ui_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 4:
                    d = this._note_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 5:
                    d = this._note_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 6:
                    d = this._note_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 7:
                    d = this._note_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 8:
                    d = this._reset;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 9:
                    d = this._accept;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 10:
                    d = this._back;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 11:
                    for (d = this._pause, e = 2, c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                }
                a = [80].slice();
                c = 0;
                for (d = a.length; c < d; )
                  (e = c++), -1 == e && X.remove(a, e);
                switch (Wa.BACK._hx_index) {
                  case 0:
                    d = this._ui_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 1:
                    d = this._ui_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 2:
                    d = this._ui_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 3:
                    d = this._ui_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 4:
                    d = this._note_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 5:
                    d = this._note_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 6:
                    d = this._note_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 7:
                    d = this._note_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 8:
                    d = this._reset;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 9:
                    d = this._accept;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 10:
                    d = this._back;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 11:
                    for (d = this._pause, e = 2, c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                }
                a = [13].slice();
                c = 0;
                for (d = a.length; c < d; )
                  (e = c++), -1 == e && X.remove(a, e);
                switch (Wa.PAUSE._hx_index) {
                  case 0:
                    d = this._ui_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 1:
                    d = this._ui_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 2:
                    d = this._ui_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 3:
                    d = this._ui_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._ui_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 4:
                    d = this._note_up;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_upR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 5:
                    d = this._note_left;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_leftR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 6:
                    d = this._note_right;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_rightR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 7:
                    d = this._note_down;
                    e = 1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downP;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    d = this._note_downR;
                    e = -1;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 8:
                    d = this._reset;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 9:
                    d = this._accept;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 10:
                    d = this._back;
                    e = 2;
                    for (c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                    break;
                  case 11:
                    for (d = this._pause, e = 2, c = 0; c < a.length; )
                      (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                }
                a = [8].slice();
              }
              c = 0;
              for (d = a.length; c < d; ) (e = c++), -1 == e && X.remove(a, e);
              switch (Wa.RESET._hx_index) {
                case 0:
                  d = this._ui_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 1:
                  d = this._ui_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 2:
                  d = this._ui_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 3:
                  d = this._ui_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._ui_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 4:
                  d = this._note_up;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_upR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 5:
                  d = this._note_left;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_leftR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 6:
                  d = this._note_right;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_rightR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 7:
                  d = this._note_down;
                  e = 1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downP;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  d = this._note_downR;
                  e = -1;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 8:
                  d = this._reset;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 9:
                  d = this._accept;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 10:
                  d = this._back;
                  e = 2;
                  for (c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
                  break;
                case 11:
                  for (d = this._pause, e = 2, c = 0; c < a.length; )
                    (f = a[c]), ++c, -1 != f && d.addKey(f, e);
              }
          }
        },
        removeKeyboard: function () {
          for (var a = 0, b = this.digitalActions; a < b.length; ) {
            var c = b[a];
            ++a;
            for (var d = c.inputs.length; 0 < d--; ) {
              var e = c.inputs[d];
              e.device == Ae.KEYBOARD && c.remove(e);
            }
          }
        },
        addDefaultGamepad: function (a) {
          var b = new Oh();
          b.set(Wa.ACCEPT, [0, 7]);
          b.set(Wa.BACK, [1]);
          b.set(Wa.UI_UP, [11, 34]);
          b.set(Wa.UI_DOWN, [12, 36]);
          b.set(Wa.UI_LEFT, [13, 37]);
          b.set(Wa.UI_RIGHT, [14, 35]);
          b.set(Wa.NOTE_UP, [11, 34, 38, 3]);
          b.set(Wa.NOTE_DOWN, [12, 36, 40, 0]);
          b.set(Wa.NOTE_LEFT, [13, 37, 41, 2]);
          b.set(Wa.NOTE_RIGHT, [14, 35, 39, 1]);
          b.set(Wa.PAUSE, [7]);
          b.set(Wa.RESET, [8]);
          this.gamepadsAdded.push(a);
          for (var c = b, d = c.keys(); d.hasNext(); ) {
            b = d.next();
            var e = c.get(b),
              f = a;
            switch (b._hx_index) {
              case 0:
                var k = this._ui_up;
                for (b = 0; b < e.length; ) {
                  var r = e[b];
                  ++b;
                  k.addGamepad(r, 1, f);
                }
                b = this._ui_upP;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, 2, f);
                b = this._ui_upR;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, -1, f);
                break;
              case 1:
                b = this._ui_left;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, 1, f);
                b = this._ui_leftP;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, 2, f);
                b = this._ui_leftR;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, -1, f);
                break;
              case 2:
                b = this._ui_right;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, 1, f);
                b = this._ui_rightP;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, 2, f);
                b = this._ui_rightR;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, -1, f);
                break;
              case 3:
                b = this._ui_down;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, 1, f);
                b = this._ui_downP;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, 2, f);
                b = this._ui_downR;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, -1, f);
                break;
              case 4:
                b = this._note_up;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, 1, f);
                b = this._note_upP;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, 2, f);
                b = this._note_upR;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, -1, f);
                break;
              case 5:
                b = this._note_left;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, 1, f);
                b = this._note_leftP;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, 2, f);
                b = this._note_leftR;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, -1, f);
                break;
              case 6:
                b = this._note_right;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, 1, f);
                b = this._note_rightP;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, 2, f);
                b = this._note_rightR;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, -1, f);
                break;
              case 7:
                b = this._note_down;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, 1, f);
                b = this._note_downP;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, 2, f);
                b = this._note_downR;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, -1, f);
                break;
              case 8:
                b = this._reset;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, 2, f);
                break;
              case 9:
                b = this._accept;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, 2, f);
                break;
              case 10:
                b = this._back;
                for (k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, 2, f);
                break;
              case 11:
                for (b = this._pause, k = 0; k < e.length; )
                  (r = e[k]), ++k, b.addGamepad(r, 2, f);
            }
          }
        },
        __class__: dk,
      });
      var Ta = function () {};
      h.CoolUtil = Ta;
      Ta.__name__ = "CoolUtil";
      Ta.getDifficultyFilePath = function (a) {
        null == a && (a = C.storyDifficulty);
        var b = Ta.difficulties[a];
        b = b != Ta.defaultDifficulty ? "-" + b : "";
        var c = new ya("[~&\\\\;:<>#]", "");
        a = new ya("[.,'\"%?!]", "");
        b = c.split(K.replace(b, " ", "-")).join("-");
        return a.split(b).join("").toLowerCase();
      };
      Ta.difficultyString = function () {
        return Ta.difficulties[C.storyDifficulty].toUpperCase();
      };
      Ta.coolTextFile = function (a) {
        var b = [];
        aa.exists(a) && (b = K.trim(aa.getText(a)).split("\n"));
        a = 0;
        for (var c = b.length; a < c; ) {
          var d = a++;
          b[d] = K.trim(b[d]);
        }
        return b;
      };
      Ta.dominantColor = function (a) {
        for (var b = new kc(), c = 0, d = a.frameWidth; c < d; )
          for (var e = c++, f = 0, k = a.frameHeight; f < k; ) {
            var r = f++;
            r = a.get_pixels().getPixel32(e, r);
            0 != r &&
              (b.h.hasOwnProperty(r)
                ? (b.h[r] += 1)
                : -13520687 != b.h[r] && (b.h[r] = 1));
          }
        c = a = 0;
        b.h[-16777216] = 0;
        for (d = b.keys(); d.hasNext(); )
          (e = d.next()), b.h[e] >= a && ((a = b.h[e]), (c = e));
        return c;
      };
      Ta.numberArray = function (a, b) {
        null == b && (b = 0);
        for (var c = []; b < a; ) {
          var d = b++;
          c.push(d);
        }
        return c;
      };
      Ta.browserLoad = function (a) {
        new ya("^.\\w+?:/*", "").match(a) || (a = "https://" + a);
        sa.getURL(new Oi(a), "_blank");
      };
      var ek = function (a, b) {
        this.moveTween = null;
        this.holdTime = 0;
        this.quitting = !1;
        this.offsetThing = -75;
        this.creditsStuff = [];
        this.iconArray = [];
        this.curSelected = -1;
        I.call(this, a, b);
      };
      h.CreditsState = ek;
      ek.__name__ = "CreditsState";
      ek.__super__ = I;
      ek.prototype = q(I.prototype, {
        create: function () {
          this.persistentUpdate = !0;
          var a = new F(),
            b = G.returnGraphic("menuDesat", null);
          this.bg = a.loadGraphic(b);
          this.add(this.bg);
          a = this.bg;
          a.set_x((g.width - a.get_width()) / 2);
          a.set_y((g.height - a.get_height()) / 2);
          this.grpOptions = new ma();
          this.add(this.grpOptions);
          a = G.getPath("data/credits.txt", "TEXT", null);
          if (ra.exists(a)) {
            var c = ra.getText(a).split("\n");
            for (a = 0; a < c.length; )
              (b = c[a]),
                ++a,
                (b = K.replace(b, "\\n", "\n").split("::")),
                5 <= b.length && b.push(""),
                this.creditsStuff.push(b);
            this.creditsStuff.push([""]);
          }
          c = [
            ["Psych Engine Team"],
            [
              "Shadow Mario",
              "shadowmario",
              "Main Programmer of Psych Engine",
              "https://twitter.com/Shadow_Mario_",
              "444444",
            ],
            [
              "RiverOaken",
              "river",
              "Main Artist/Animator of Psych Engine",
              "https://twitter.com/RiverOaken",
              "B42F71",
            ],
            [
              "shubs",
              "shubs",
              "Additional Programmer of Psych Engine",
              "https://twitter.com/yoshubs",
              "5E99DF",
            ],
            [""],
            ["Former Engine Members"],
            [
              "bb-panzu",
              "bb",
              "Ex-Programmer of Psych Engine",
              "https://twitter.com/bbsub3",
              "3E813A",
            ],
            [""],
            ["Engine Contributors"],
            [
              "iFlicky",
              "flicky",
              "Composer of Psync and Tea Time\nMade the Dialogue Sounds",
              "https://twitter.com/flicky_i",
              "9E29CF",
            ],
            [
              "SqirraRNG",
              "sqirra",
              "Crash Handler and Base code for\nChart Editor's Waveform",
              "https://twitter.com/gedehari",
              "E1843A",
            ],
            [
              "EliteMasterEric",
              "mastereric",
              "Runtime Shaders support",
              "https://twitter.com/EliteMasterEric",
              "FFBD40",
            ],
            [
              "PolybiusProxy",
              "proxy",
              ".MP4 Video Loader Library (hxCodec)",
              "https://twitter.com/polybiusproxy",
              "DCD294",
            ],
            [
              "KadeDev",
              "kade",
              "Fixed some cool stuff on Chart Editor\nand other PRs",
              "https://twitter.com/kade0912",
              "64A250",
            ],
            [
              "Keoiki",
              "keoiki",
              "Note Splash Animations",
              "https://twitter.com/Keoiki_",
              "D2D2D2",
            ],
            [
              "Nebula the Zorua",
              "nebula",
              "LUA JIT Fork and some Lua reworks",
              "https://twitter.com/Nebula_Zorua",
              "7D40B2",
            ],
            [
              "Smokey",
              "smokey",
              "Sprite Atlas Support",
              "https://twitter.com/Smokey_5_",
              "483D92",
            ],
            [""],
            ["Funkin' Crew"],
            [
              "ninjamuffin99",
              "ninjamuffin99",
              "Programmer of Friday Night Funkin'",
              "https://twitter.com/ninja_muffin99",
              "CF2D2D",
            ],
            [
              "PhantomArcade",
              "phantomarcade",
              "Animator of Friday Night Funkin'",
              "https://twitter.com/PhantomArcade3K",
              "FADC45",
            ],
            [
              "evilsk8r",
              "evilsk8r",
              "Artist of Friday Night Funkin'",
              "https://twitter.com/evilsk8r",
              "5ABD4B",
            ],
            [
              "kawaisprite",
              "kawaisprite",
              "Composer of Friday Night Funkin'",
              "https://twitter.com/kawaisprite",
              "378FC7",
            ],
          ];
          for (a = 0; a < c.length; )
            (b = c[a]), ++a, this.creditsStuff.push(b);
          a = 0;
          for (c = this.creditsStuff.length; a < c; ) {
            b = a++;
            var d = !this.unselectableCheck(b),
              e = new ib(g.width / 2, 300, this.creditsStuff[b][0], !d);
            e.isMenuItem = !0;
            e.targetY = b;
            e.changeX = !1;
            e.snapToPosition();
            this.grpOptions.add(e);
            d
              ? (null != this.creditsStuff[b][5] &&
                  (G.currentModDirectory = this.creditsStuff[b][5]),
                (d = new qf("credits/" + this.creditsStuff[b][1])),
                (d.xAdd = e.get_width() + 10),
                (d.sprTracker = e),
                this.iconArray.push(d),
                this.add(d),
                (G.currentModDirectory = ""),
                -1 == this.curSelected && (this.curSelected = b))
              : e.set_alignment(ad.CENTERED);
          }
          this.descBox = new qf();
          this.descBox.makeGraphic(1, 1, -16777216);
          this.descBox.xAdd = -10;
          this.descBox.yAdd = -10;
          this.descBox.alphaMult = 0.6;
          this.descBox.set_alpha(0.6);
          this.add(this.descBox);
          this.descText = new W(
            50,
            g.height + this.offsetThing - 25,
            1180,
            "",
            32
          );
          this.descText.setFormat("assets/fonts/vcr.ttf", 32, -1, "center");
          a = this.descText.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.descBox.sprTracker = this.descText;
          this.add(this.descText);
          this.bg.set_color(this.getCurrentBGColor());
          this.intendedColor = this.bg.color;
          this.changeSelection();
          I.prototype.create.call(this);
        },
        update: function (a) {
          if (0.7 > g.sound.music._volume) {
            var b = g.sound.music;
            b.set_volume(b._volume + 0.5 * g.elapsed);
          }
          if (!this.quitting) {
            if (1 < this.creditsStuff.length) {
              b = 1;
              var c = g.keys.pressed;
              c.keyManager.checkStatusUnsafe(16, c.status) && (b = 3);
              c = ia.player1.controls._ui_upP.check();
              var d = ia.player1.controls._ui_downP.check();
              c && (this.changeSelection(-b), (this.holdTime = 0));
              d && (this.changeSelection(b), (this.holdTime = 0));
              if (
                ia.player1.controls._ui_down.check() ||
                ia.player1.controls._ui_up.check()
              )
                (c = Math.floor(10 * (this.holdTime - 0.5))),
                  (this.holdTime += a),
                  (d = Math.floor(10 * (this.holdTime - 0.5))),
                  0.5 < this.holdTime &&
                    0 < d - c &&
                    this.changeSelection(
                      (d - c) * (ia.player1.controls._ui_up.check() ? -b : b)
                    );
            }
            ia.player1.controls._accept.check() &&
              (null == this.creditsStuff[this.curSelected][3] ||
                4 < this.creditsStuff[this.curSelected][3].length) &&
              Ta.browserLoad(this.creditsStuff[this.curSelected][3]);
            ia.player1.controls._back.check() &&
              (null != this.colorTween && this.colorTween.cancel(),
              g.sound.play(G.sound("cancelMenu")),
              I.switchState(new zc()),
              (this.quitting = !0));
          }
          b = 0;
          for (c = this.grpOptions.members; b < c.length; )
            if (((d = c[b]), ++b, !d.bold)) {
              var e = Math.max(0, Math.min(1, 12 * a));
              if (0 == d.targetY) {
                var f = d.x,
                  k = 1;
                null == k && (k = 17);
                (1 != k && 17 != k) || d.set_x((g.width - d.get_width()) / 2);
                (16 != k && 17 != k) ||
                  d.set_y((g.height - d.get_height()) / 2);
                d.set_x(f + e * (d.x - 70 - f));
              } else
                (f = d.x),
                  d.set_x(f + e * (200 + -40 * Math.abs(d.targetY) - f));
            }
          I.prototype.update.call(this, a);
        },
        changeSelection: function (a) {
          null == a && (a = 0);
          var b = this;
          for (
            g.sound.play(G.sound("scrollMenu"), 0.4);
            (this.curSelected += a),
              0 > this.curSelected &&
                (this.curSelected = this.creditsStuff.length - 1),
              this.curSelected >= this.creditsStuff.length &&
                (this.curSelected = 0),
              this.unselectableCheck(this.curSelected);

          );
          a = this.getCurrentBGColor();
          a != this.intendedColor &&
            (null != this.colorTween && this.colorTween.cancel(),
            (this.intendedColor = a),
            (this.colorTween = la.color(
              this.bg,
              1,
              this.bg.color,
              this.intendedColor,
              {
                onComplete: function (a) {
                  b.colorTween = null;
                },
              }
            )));
          for (var c = (a = 0), d = this.grpOptions.members; c < d.length; ) {
            var e = d[c];
            ++c;
            e.targetY = a - this.curSelected;
            this.unselectableCheck(a++) ||
              (e.set_alpha(0.6), 0 == e.targetY && e.set_alpha(1));
          }
          this.descText.set_text(this.creditsStuff[this.curSelected][2]);
          this.descText.set_y(
            g.height - this.descText.get_height() + this.offsetThing - 60
          );
          null != this.moveTween && this.moveTween.cancel();
          this.moveTween = la.tween(
            this.descText,
            { y: this.descText.y + 75 },
            0.25,
            { ease: Aa.sineOut }
          );
          this.descBox.setGraphicSize(
            (this.descText.get_width() + 20) | 0,
            (this.descText.get_height() + 25) | 0
          );
          this.descBox.updateHitbox();
        },
        getCurrentBGColor: function () {
          var a = this.creditsStuff[this.curSelected][4];
          K.startsWith(a, "0x") || (a = "0xFF" + a);
          return M.parseInt(a);
        },
        unselectableCheck: function (a) {
          return 1 >= this.creditsStuff[a].length;
        },
        __class__: ek,
      });
      var pd = function (a) {
        null == a && (a = 0);
        this._created = !1;
        ka.call(this);
        this.openCallback = this.closeCallback = null;
        g.renderTile && (this._bgSprite = new fk());
        this.set_bgColor(a);
      };
      h["flixel.FlxSubState"] = pd;
      pd.__name__ = "flixel.FlxSubState";
      pd.__super__ = ka;
      pd.prototype = q(ka.prototype, {
        draw: function () {
          if (g.renderBlit)
            for (var a = 0, b = this.get_cameras(); a < b.length; ) {
              var c = b[a];
              ++a;
              c.fill(this._bgColor);
            }
          else this._bgSprite.draw();
          ka.prototype.draw.call(this);
        },
        destroy: function () {
          ka.prototype.destroy.call(this);
          this._parentState = this.openCallback = this.closeCallback = null;
          this._bgSprite = V.destroy(this._bgSprite);
        },
        close: function () {
          null != this._parentState &&
            this._parentState.subState == this &&
            this._parentState.closeSubState();
        },
        get_bgColor: function () {
          return this._bgColor;
        },
        set_bgColor: function (a) {
          g.renderTile &&
            null != this._bgSprite &&
            this._bgSprite.get_pixels().setPixel32(0, 0, a);
          return (this._bgColor = a);
        },
        __class__: pd,
      });
      var La = function () {
        this.lastBeat =
          this.lastStep =
          this.curStep =
          this.curBeat =
          this.curDecStep =
          this.curDecBeat =
            0;
        pd.call(this);
      };
      h.MusicBeatSubstate = La;
      La.__name__ = "MusicBeatSubstate";
      La.__super__ = pd;
      La.prototype = q(pd.prototype, {
        get_controls: function () {
          return ia.player1.controls;
        },
        update: function (a) {
          var b = this.curStep;
          this.updateCurStep();
          this.updateBeat();
          b != this.curStep && 0 < this.curStep && this.stepHit();
          pd.prototype.update.call(this, a);
        },
        updateBeat: function () {
          this.curBeat = Math.floor(this.curStep / 4);
          this.curDecBeat = this.curDecStep / 4;
        },
        updateCurStep: function () {
          var a = P.getBPMFromSeconds(P.songPosition),
            b = (P.songPosition - y.noteOffset - a.songTime) / a.stepCrochet;
          this.curDecStep = a.stepTime + b;
          this.curStep = a.stepTime + Math.floor(b);
        },
        stepHit: function () {
          0 == this.curStep % 4 && this.beatHit();
        },
        beatHit: function () {},
        __class__: La,
        __properties__: q(pd.prototype.__properties__, {
          get_controls: "get_controls",
        }),
      });
      var od = function (a, b) {
        this.isTransIn = !1;
        this.leTween = null;
        var c = this;
        La.call(this);
        this.isTransIn = b;
        var d = Math.max(0.05, Math.min(1, g.camera.zoom)),
          e = (g.width / d) | 0;
        d = (g.height / d) | 0;
        this.transGradient = ud.createGradientFlxSprite(
          e,
          d,
          b ? [0, -16777216] : [-16777216, 0]
        );
        var f = this.transGradient.scrollFactor;
        f.set_x(0);
        f.set_y(0);
        this.add(this.transGradient);
        this.transBlack = new F().makeGraphic(e, d + 400, -16777216);
        f = this.transBlack.scrollFactor;
        f.set_x(0);
        f.set_y(0);
        this.add(this.transBlack);
        d = this.transGradient;
        d.set_x(d.x - (e - g.width) / 2);
        this.transBlack.set_x(this.transGradient.x);
        b
          ? (this.transGradient.set_y(
              this.transBlack.y - this.transBlack.get_height()
            ),
            la.tween(
              this.transGradient,
              { y: this.transGradient.get_height() + 50 },
              a,
              {
                onComplete: function (a) {
                  c.close();
                },
                ease: Aa.linear,
              }
            ))
          : (this.transGradient.set_y(-this.transGradient.get_height()),
            this.transBlack.set_y(
              this.transGradient.y - this.transBlack.get_height() + 50
            ),
            (this.leTween = la.tween(
              this.transGradient,
              { y: this.transGradient.get_height() + 50 },
              a,
              {
                onComplete: function (a) {
                  null != od.finishCallback && od.finishCallback();
                },
                ease: Aa.linear,
              }
            )));
        null != od.nextCamera &&
          (this.transBlack.set_cameras([od.nextCamera]),
          this.transGradient.set_cameras([od.nextCamera]));
        od.nextCamera = null;
      };
      h.CustomFadeTransition = od;
      od.__name__ = "CustomFadeTransition";
      od.__super__ = La;
      od.prototype = q(La.prototype, {
        update: function (a) {
          this.isTransIn
            ? this.transBlack.set_y(
                this.transGradient.y + this.transGradient.get_height()
              )
            : this.transBlack.set_y(
                this.transGradient.y - this.transBlack.get_height()
              );
          La.prototype.update.call(this, a);
          this.isTransIn
            ? this.transBlack.set_y(
                this.transGradient.y + this.transGradient.get_height()
              )
            : this.transBlack.set_y(
                this.transGradient.y - this.transBlack.get_height()
              );
        },
        destroy: function () {
          null != this.leTween && (od.finishCallback(), this.leTween.cancel());
          La.prototype.destroy.call(this);
        },
        __class__: od,
      });
      var gk = function (a, b) {
        null == a && (a = !0);
        this.dialogueOpened =
          this.dialogueStarted =
          this.dialogueEnded =
          this.isEnding =
            !1;
        this.nextDialogueThing = this.skipDialogueThing = null;
        this.dialogueList = [];
        this.curCharacter = "";
        var c = this;
        wa.call(this);
        switch (C.SONG.song.toLowerCase()) {
          case "senpai":
            var d = g.sound,
              e = G.returnSound("music", "Lunchbox", null);
            d.playMusic(e, 0);
            e = g.sound.music;
            d = 1;
            var f = 0,
              k = 0.8;
            null == k && (k = 1);
            null == f && (f = 0);
            null == d && (d = 1);
            null == e._channel && e.play();
            null != e.fadeTween && e.fadeTween.cancel();
            e.fadeTween = la.num(
              f,
              k,
              d,
              { onComplete: null },
              n(e, e.volumeTween)
            );
            break;
          case "thorns":
            (d = g.sound),
              (e = G.returnSound("music", "LunchboxScary", null)),
              d.playMusic(e, 0),
              (e = g.sound.music),
              (d = 1),
              (f = 0),
              (k = 0.8),
              null == k && (k = 1),
              null == f && (f = 0),
              null == d && (d = 1),
              null == e._channel && e.play(),
              null != e.fadeTween && e.fadeTween.cancel(),
              (e.fadeTween = la.num(
                f,
                k,
                d,
                { onComplete: null },
                n(e, e.volumeTween)
              ));
        }
        this.bgFade = new F(-200, -200).makeGraphic(
          (1.3 * g.width) | 0,
          (1.3 * g.height) | 0,
          -4988968
        );
        e = this.bgFade.scrollFactor;
        e.set_x(0);
        e.set_y(0);
        this.bgFade.set_alpha(0);
        this.add(this.bgFade);
        new fc().start(
          0.83,
          function (a) {
            a = c.bgFade;
            a.set_alpha(a.alpha + 0.13999999999999999);
            0.7 < c.bgFade.alpha && c.bgFade.set_alpha(0.7);
          },
          5
        );
        this.box = new F(-20, 45);
        e = !1;
        switch (C.SONG.song.toLowerCase()) {
          case "roses":
            e = !0;
            g.sound.play(G.sound("ANGRY_TEXT_BOX"));
            d = this.box;
            k = null;
            f = G.returnGraphic("weeb/pixelUI/dialogueBox-senpaiMad", k);
            d.set_frames(
              jb.fromSparrow(
                f,
                G.getPath(
                  "images/weeb/pixelUI/dialogueBox-senpaiMad.xml",
                  "TEXT",
                  k
                )
              )
            );
            this.box.animation.addByPrefix(
              "normalOpen",
              "SENPAI ANGRY IMPACT SPEECH",
              24,
              !1
            );
            this.box.animation.addByIndices(
              "normal",
              "SENPAI ANGRY IMPACT SPEECH instance 1",
              [4],
              "",
              24
            );
            break;
          case "senpai":
            e = !0;
            d = this.box;
            k = null;
            f = G.returnGraphic("weeb/pixelUI/dialogueBox-pixel", k);
            d.set_frames(
              jb.fromSparrow(
                f,
                G.getPath(
                  "images/weeb/pixelUI/dialogueBox-pixel.xml",
                  "TEXT",
                  k
                )
              )
            );
            this.box.animation.addByPrefix(
              "normalOpen",
              "Text Box Appear",
              24,
              !1
            );
            this.box.animation.addByIndices(
              "normal",
              "Text Box Appear instance 1",
              [4],
              "",
              24
            );
            break;
          case "thorns":
            (e = !0),
              (d = this.box),
              (k = null),
              (f = G.returnGraphic("weeb/pixelUI/dialogueBox-evil", k)),
              d.set_frames(
                jb.fromSparrow(
                  f,
                  G.getPath(
                    "images/weeb/pixelUI/dialogueBox-evil.xml",
                    "TEXT",
                    k
                  )
                )
              ),
              this.box.animation.addByPrefix(
                "normalOpen",
                "Spirit Textbox spawn",
                24,
                !1
              ),
              this.box.animation.addByIndices(
                "normal",
                "Spirit Textbox spawn instance 1",
                [11],
                "",
                24
              ),
              (d = new F(320, 170)),
              (f = G.returnGraphic("weeb/spiritFaceForward", null)),
              (d = d.loadGraphic(f)),
              d.setGraphicSize((6 * d.get_width()) | 0),
              this.add(d);
        }
        this.dialogueList = b;
        e &&
          ((d = this.portraitLeft = new F(-20, 40)),
          (k = null),
          (f = G.returnGraphic("weeb/senpaiPortrait", k)),
          d.set_frames(
            jb.fromSparrow(
              f,
              G.getPath("images/weeb/senpaiPortrait.xml", "TEXT", k)
            )
          ),
          this.portraitLeft.animation.addByPrefix(
            "enter",
            "Senpai Portrait Enter",
            24,
            !1
          ),
          this.portraitLeft.setGraphicSize(
            (this.portraitLeft.get_width() * C.daPixelZoom * 0.9) | 0
          ),
          this.portraitLeft.updateHitbox(),
          (e = this.portraitLeft.scrollFactor),
          e.set_x(0),
          e.set_y(0),
          this.add(this.portraitLeft),
          this.portraitLeft.set_visible(!1),
          (d = this.portraitRight = new F(0, 40)),
          (k = null),
          (f = G.returnGraphic("weeb/bfPortrait", k)),
          d.set_frames(
            jb.fromSparrow(
              f,
              G.getPath("images/weeb/bfPortrait.xml", "TEXT", k)
            )
          ),
          this.portraitRight.animation.addByPrefix(
            "enter",
            "Boyfriend portrait enter",
            24,
            !1
          ),
          this.portraitRight.setGraphicSize(
            (this.portraitRight.get_width() * C.daPixelZoom * 0.9) | 0
          ),
          this.portraitRight.updateHitbox(),
          (e = this.portraitRight.scrollFactor),
          e.set_x(0),
          e.set_y(0),
          this.add(this.portraitRight),
          this.portraitRight.set_visible(!1),
          this.box.animation.play("normalOpen"),
          this.box.setGraphicSize(
            (this.box.get_width() * C.daPixelZoom * 0.9) | 0
          ),
          this.box.updateHitbox(),
          this.add(this.box),
          (e = this.box),
          (b = 1),
          null == b && (b = 17),
          (1 != b && 17 != b) || e.set_x((g.width - e.get_width()) / 2),
          (16 != b && 17 != b) || e.set_y((g.height - e.get_height()) / 2),
          (e = this.portraitLeft),
          (b = 1),
          null == b && (b = 17),
          (1 != b && 17 != b) || e.set_x((g.width - e.get_width()) / 2),
          (16 != b && 17 != b) || e.set_y((g.height - e.get_height()) / 2),
          (d = new F(1042, 590)),
          (f = G.returnGraphic("weeb/pixelUI/hand_textbox", null)),
          (this.handSelect = d.loadGraphic(f)),
          this.handSelect.setGraphicSize(
            (this.handSelect.get_width() * C.daPixelZoom * 0.9) | 0
          ),
          this.handSelect.updateHitbox(),
          this.handSelect.set_visible(!1),
          this.add(this.handSelect),
          (d = !a),
          (this.dropText = new W(242, 502, (0.6 * g.width) | 0, "", 32)),
          this.dropText.set_font("Pixel Arial 11 Bold"),
          this.dropText.set_color(-2583404),
          this.add(this.dropText),
          (this.swagDialogue = new rf(240, 500, (0.6 * g.width) | 0, "", 32)),
          this.swagDialogue.set_font("Pixel Arial 11 Bold"),
          this.swagDialogue.set_color(-12640223),
          (d = g.sound.load(G.sound("pixelText"), 0.6)),
          (this.swagDialogue.sounds = [d]),
          this.add(this.swagDialogue));
      };
      h.DialogueBox = gk;
      gk.__name__ = "DialogueBox";
      gk.__super__ = wa;
      gk.prototype = q(wa.prototype, {
        update: function (a) {
          var b = this;
          "roses" == C.SONG.song.toLowerCase() &&
            this.portraitLeft.set_visible(!1);
          "thorns" == C.SONG.song.toLowerCase() &&
            (this.portraitLeft.set_visible(!1),
            this.swagDialogue.set_color(-1),
            this.dropText.set_color(-16777216));
          this.dropText.set_text(this.swagDialogue.text);
          null != this.box.animation._curAnim &&
            "normalOpen" == this.box.animation._curAnim.name &&
            this.box.animation._curAnim.finished &&
            (this.box.animation.play("normal"), (this.dialogueOpened = !0));
          this.dialogueOpened &&
            !this.dialogueStarted &&
            (this.startDialogue(), (this.dialogueStarted = !0));
          if (ia.player1.controls._accept.check())
            if (this.dialogueEnded)
              if (
                null == this.dialogueList[1] &&
                null != this.dialogueList[0]
              ) {
                if (!this.isEnding) {
                  this.isEnding = !0;
                  g.sound.play(G.sound("clickText"), 0.8);
                  if (
                    "senpai" == C.SONG.song.toLowerCase() ||
                    "thorns" == C.SONG.song.toLowerCase()
                  ) {
                    var c = g.sound.music,
                      d = 1.5,
                      e = 0;
                    null == e && (e = 0);
                    null == d && (d = 1);
                    null != c.fadeTween && c.fadeTween.cancel();
                    c.fadeTween = la.num(
                      c._volume,
                      e,
                      d,
                      { onComplete: null },
                      n(c, c.volumeTween)
                    );
                  }
                  new fc().start(
                    0.2,
                    function (a) {
                      a = b.box;
                      a.set_alpha(a.alpha - 0.2);
                      a = b.bgFade;
                      a.set_alpha(a.alpha - 0.13999999999999999);
                      b.portraitLeft.set_visible(!1);
                      b.portraitRight.set_visible(!1);
                      a = b.swagDialogue;
                      a.set_alpha(a.alpha - 0.2);
                      a = b.handSelect;
                      a.set_alpha(a.alpha - 0.2);
                      b.dropText.set_alpha(b.swagDialogue.alpha);
                    },
                    5
                  );
                  new fc().start(1.5, function (a) {
                    b.finishThing();
                    b.kill();
                  });
                }
              } else
                X.remove(this.dialogueList, this.dialogueList[0]),
                  this.startDialogue(),
                  g.sound.play(G.sound("clickText"), 0.8);
            else
              this.dialogueStarted &&
                (g.sound.play(G.sound("clickText"), 0.8),
                this.swagDialogue.skip(),
                null != this.skipDialogueThing && this.skipDialogueThing());
          wa.prototype.update.call(this, a);
        },
        startDialogue: function () {
          var a = this;
          this.cleanDialog();
          this.swagDialogue.resetText(this.dialogueList[0]);
          this.swagDialogue.start(0.04, !0);
          this.swagDialogue.completeCallback = function () {
            a.handSelect.set_visible(!0);
            a.dialogueEnded = !0;
          };
          this.handSelect.set_visible(!1);
          this.dialogueEnded = !1;
          switch (this.curCharacter) {
            case "bf":
              this.portraitLeft.set_visible(!1);
              this.portraitRight.visible ||
                (this.portraitRight.set_visible(!0),
                this.portraitRight.animation.play("enter"));
              break;
            case "dad":
              this.portraitRight.set_visible(!1),
                this.portraitLeft.visible ||
                  ("senpai" == C.SONG.song.toLowerCase() &&
                    this.portraitLeft.set_visible(!0),
                  this.portraitLeft.animation.play("enter"));
          }
          null != this.nextDialogueThing && this.nextDialogueThing();
        },
        cleanDialog: function () {
          var a = this.dialogueList[0].split(":");
          this.curCharacter = a[1];
          this.dialogueList[0] = K.trim(
            X.substr(this.dialogueList[0], a[1].length + 2, null)
          );
        },
        __class__: gk,
      });
      var dd = function (a, b, c) {
        null == b && (b = 0);
        null == a && (a = 0);
        this.curCharacter = "bf";
        this.isGhost = !1;
        this.startingPos = 0;
        this.dialogueAnimations = new Q();
        this.jsonFile = null;
        F.call(this, a, b);
        null == c && (c = dd.DEFAULT_CHARACTER);
        this.curCharacter = c;
        this.reloadCharacterJson(c);
        a = "dialogue/" + this.jsonFile.image;
        b = G.returnGraphic(a, null);
        this.set_frames(
          jb.fromSparrow(b, G.getPath("images/" + a + ".xml", "TEXT", null))
        );
        this.reloadAnimations();
        this.set_antialiasing(y.globalAntialiasing);
        1 == this.jsonFile.no_antialiasing && this.set_antialiasing(!1);
      };
      h.DialogueCharacter = dd;
      dd.__name__ = "DialogueCharacter";
      dd.__super__ = F;
      dd.prototype = q(F.prototype, {
        reloadCharacterJson: function (a) {
          a = "images/dialogue/" + a + ".json";
          null == a && (a = "");
          a = aa.getText("assets/" + a);
          this.jsonFile = JSON.parse(a);
        },
        reloadAnimations: function () {
          this.dialogueAnimations.h = Object.create(null);
          if (
            null != this.jsonFile.animations &&
            0 < this.jsonFile.animations.length
          )
            for (var a = 0, b = this.jsonFile.animations; a < b.length; ) {
              var c = b[a];
              ++a;
              this.animation.addByPrefix(c.anim, c.loop_name, 24, this.isGhost);
              this.animation.addByPrefix(
                c.anim + dd.IDLE_SUFFIX,
                c.idle_name,
                24,
                !0
              );
              this.dialogueAnimations.h[c.anim] = c;
            }
        },
        playAnim: function (a, b) {
          null == b && (b = !1);
          var c = a;
          if (
            null == a ||
            !Object.prototype.hasOwnProperty.call(this.dialogueAnimations.h, a)
          ) {
            for (
              var d = [],
                e = this.dialogueAnimations.h,
                f = Object.keys(e),
                k = f.length,
                r = 0;
              r < k;

            )
              (a = e[f[r++]]), d.push(a.anim);
            0 < d.length && (c = d[g.random.int(0, d.length - 1)]);
          }
          Object.prototype.hasOwnProperty.call(this.dialogueAnimations.h, c) &&
            (null == this.dialogueAnimations.h[c].loop_name ||
              1 > this.dialogueAnimations.h[c].loop_name.length ||
              this.dialogueAnimations.h[c].loop_name ==
                this.dialogueAnimations.h[c].idle_name) &&
            (b = !0);
          this.animation.play(b ? c + dd.IDLE_SUFFIX : c, !1);
          Object.prototype.hasOwnProperty.call(this.dialogueAnimations.h, c)
            ? ((a = this.dialogueAnimations.h[c]),
              b
                ? ((d = this.offset),
                  (e = a.idle_offsets[0]),
                  (a = a.idle_offsets[1]))
                : ((d = this.offset),
                  (e = a.loop_offsets[0]),
                  (a = a.loop_offsets[1])),
              null == a && (a = 0),
              null == e && (e = 0),
              d.set_x(e),
              d.set_y(a))
            : ((d = this.offset),
              (a = e = 0),
              null == a && (a = 0),
              null == e && (e = 0),
              d.set_x(e),
              d.set_y(a),
              wb.trace(
                "Offsets not found! Dialogue character is badly formatted, anim: " +
                  c +
                  ", " +
                  (b ? "idle anim" : "loop anim"),
                {
                  fileName: "source/DialogueBoxPsych.hx",
                  lineNumber: 178,
                  className: "DialogueCharacter",
                  methodName: "playAnim",
                }
              ));
        },
        animationIsLoop: function () {
          return null == this.animation._curAnim
            ? !1
            : !K.endsWith(this.animation._curAnim.name, dd.IDLE_SUFFIX);
        },
        __class__: dd,
      });
      var Ib = function (a, b) {
        this.lastBoxType = "";
        this.lastCharacter = -1;
        this.closeVolume = 1;
        this.closeSound = "dialogueClose";
        this.ignoreThisFrame = !0;
        this.daText = null;
        this.scrollSpeed = 4e3;
        this.dialogueEnded = !1;
        this.textBoxTypes = ["normal", "angry"];
        this.offsetPos = -600;
        this.currentText = 0;
        this.arrayCharacters = [];
        this.dialogueList =
          this.nextDialogueThing =
          this.skipDialogueThing =
          this.bgFade =
            null;
        wa.call(this);
        if (null != b && "" != b) {
          var c = g.sound;
          b = G.returnSound("music", b, null);
          c.playMusic(b, 0);
          c = g.sound.music;
          b = 2;
          var d = 0,
            e = 1;
          null == e && (e = 1);
          null == d && (d = 0);
          null == b && (b = 1);
          null == c._channel && c.play();
          null != c.fadeTween && c.fadeTween.cancel();
          c.fadeTween = la.num(
            d,
            e,
            b,
            { onComplete: null },
            n(c, c.volumeTween)
          );
        }
        this.bgFade = new F(-500, -500).makeGraphic(
          2 * g.width,
          2 * g.height,
          -1
        );
        c = this.bgFade.scrollFactor;
        c.set_x(0);
        c.set_y(0);
        this.bgFade.set_visible(!0);
        this.bgFade.set_alpha(0);
        this.add(this.bgFade);
        this.dialogueList = a;
        this.spawnCharacters();
        c = this.box = new F(70, 370);
        a = G.returnGraphic("speech_bubble", null);
        c.set_frames(
          jb.fromSparrow(a, G.getPath("images/speech_bubble.xml", "TEXT", null))
        );
        c = this.box.scrollFactor;
        c.set_x(0);
        c.set_y(0);
        this.box.set_antialiasing(y.globalAntialiasing);
        this.box.animation.addByPrefix("normal", "speech bubble normal", 24);
        this.box.animation.addByPrefix(
          "normalOpen",
          "Speech Bubble Normal Open",
          24,
          !1
        );
        this.box.animation.addByPrefix("angry", "AHH speech bubble", 24);
        this.box.animation.addByPrefix(
          "angryOpen",
          "speech bubble loud open",
          24,
          !1
        );
        this.box.animation.addByPrefix(
          "center-normal",
          "speech bubble middle",
          24
        );
        this.box.animation.addByPrefix(
          "center-normalOpen",
          "Speech Bubble Middle Open",
          24,
          !1
        );
        this.box.animation.addByPrefix(
          "center-angry",
          "AHH Speech Bubble middle",
          24
        );
        this.box.animation.addByPrefix(
          "center-angryOpen",
          "speech bubble Middle loud open",
          24,
          !1
        );
        this.box.animation.play("normal", !0);
        this.box.set_visible(!1);
        this.box.setGraphicSize((0.9 * this.box.get_width()) | 0);
        this.box.updateHitbox();
        this.add(this.box);
        this.daText = new Ph(Ib.DEFAULT_TEXT_X, Ib.DEFAULT_TEXT_Y, "");
        this.daText.set_scaleX(0.7);
        this.daText.set_scaleY(0.7);
        this.add(this.daText);
        this.startNextDialog();
      };
      h.DialogueBoxPsych = Ib;
      Ib.__name__ = "DialogueBoxPsych";
      Ib.parseDialogue = function (a) {
        return JSON.parse(aa.getText(a));
      };
      Ib.updateBoxOffsets = function (a) {
        a.centerOffsets();
        a.updateHitbox();
        if (K.startsWith(a.animation._curAnim.name, "angry"))
          var b = a.offset,
            c = 50,
            d = 65;
        else
          K.startsWith(a.animation._curAnim.name, "center-angry")
            ? ((b = a.offset), (c = 50), (d = 30))
            : ((b = a.offset), (c = 10), (d = 0));
        null == d && (d = 0);
        null == c && (c = 0);
        b.set_x(c);
        b.set_y(d);
        a.flipX || a.offset.set_y(a.offset.y + 10);
      };
      Ib.__super__ = wa;
      Ib.prototype = q(wa.prototype, {
        spawnCharacters: function () {
          for (
            var a = Object.create(null),
              b = 0,
              c = this.dialogueList.dialogue.length;
            b < c;

          ) {
            var d = b++;
            null != this.dialogueList.dialogue[d] &&
              ((d = this.dialogueList.dialogue[d].portrait),
              (Object.prototype.hasOwnProperty.call(a, d) && a[d]) ||
                (a[d] = !0));
          }
          a = Object.keys(a);
          b = a.length;
          for (c = 0; c < b; ) {
            var e = a[c++];
            d = Ib.LEFT_CHAR_X;
            var f = Ib.DEFAULT_CHAR_Y;
            e = new dd(d + this.offsetPos, f, e);
            e.setGraphicSize(
              (e.get_width() * dd.DEFAULT_SCALE * e.jsonFile.scale) | 0
            );
            e.updateHitbox();
            var k = e.scrollFactor;
            k.set_x(0);
            k.set_y(0);
            e.set_alpha(1e-5);
            this.add(e);
            k = !1;
            switch (e.jsonFile.dialogue_pos) {
              case "center":
                e.set_x(g.width / 2);
                e.set_x(e.x - e.get_width() / 2);
                f = e.y;
                e.set_y(g.height + 50);
                k = !0;
                break;
              case "right":
                (d = g.width - e.get_width() + Ib.RIGHT_CHAR_X),
                  e.set_x(d - this.offsetPos);
            }
            d += e.jsonFile.position[0];
            f += e.jsonFile.position[1];
            e.set_x(e.x + e.jsonFile.position[0]);
            e.set_y(e.y + e.jsonFile.position[1]);
            e.startingPos = k ? f : d;
            this.arrayCharacters.push(e);
          }
        },
        update: function (a) {
          if (this.ignoreThisFrame) this.ignoreThisFrame = !1;
          else if (this.dialogueEnded) {
            null != this.box &&
              0 >= this.box.animation._curAnim.curFrame &&
              (this.box.kill(),
              this.remove(this.box),
              this.box.destroy(),
              (this.box = null));
            null != this.bgFade &&
              ((c = this.bgFade),
              c.set_alpha(c.alpha - 0.5 * a),
              0 >= this.bgFade.alpha &&
                (this.bgFade.kill(),
                this.remove(this.bgFade),
                this.bgFade.destroy(),
                (this.bgFade = null)));
            c = 0;
            for (d = this.arrayCharacters.length; c < d; ) {
              e = c++;
              var b = this.arrayCharacters[e];
              if (null != b) {
                switch (this.arrayCharacters[e].jsonFile.dialogue_pos) {
                  case "center":
                    b.set_y(b.y + this.scrollSpeed * a);
                    break;
                  case "left":
                    b.set_x(b.x - this.scrollSpeed * a);
                    break;
                  case "right":
                    b.set_x(b.x + this.scrollSpeed * a);
                }
                b.set_alpha(b.alpha - 10 * a);
              }
            }
            if (null == this.box && null == this.bgFade) {
              c = 0;
              for (d = this.arrayCharacters.length; c < d; )
                c++,
                  (b = this.arrayCharacters[0]),
                  null != b &&
                    (X.remove(this.arrayCharacters, b),
                    b.kill(),
                    this.remove(b),
                    b.destroy());
              this.finishThing();
              this.kill();
            }
          } else {
            var c = this.bgFade;
            c.set_alpha(c.alpha + 0.5 * a);
            0.5 < this.bgFade.alpha && this.bgFade.set_alpha(0.5);
            if (ia.player1.controls._accept.check()) {
              if (this.daText.finishedText)
                if (this.currentText >= this.dialogueList.dialogue.length) {
                  this.dialogueEnded = !0;
                  c = 0;
                  for (var d = this.textBoxTypes.length; c < d; ) {
                    var e = c++;
                    b = ["", "center-"];
                    for (
                      var f = this.box.animation._curAnim.name,
                        k = 0,
                        r = b.length;
                      k < r;

                    ) {
                      var l = k++;
                      (f != b[l] + this.textBoxTypes[e] &&
                        f != b[l] + this.textBoxTypes[e] + "Open") ||
                        this.box.animation.play(
                          b[l] + this.textBoxTypes[e] + "Open",
                          !0
                        );
                    }
                  }
                  this.box.animation._curAnim.set_curFrame(
                    this.box.animation._curAnim.frames.length - 1
                  );
                  this.box.animation._curAnim.reverse();
                  null != this.daText &&
                    (this.daText.kill(),
                    this.remove(this.daText),
                    this.daText.destroy());
                  Ib.updateBoxOffsets(this.box);
                  c = g.sound.music;
                  d = 1;
                  e = 0;
                  null == e && (e = 0);
                  null == d && (d = 1);
                  null != c.fadeTween && c.fadeTween.cancel();
                  c.fadeTween = la.num(
                    c._volume,
                    e,
                    d,
                    { onComplete: null },
                    n(c, c.volumeTween)
                  );
                } else this.startNextDialog();
              else
                this.daText.finishText(),
                  null != this.skipDialogueThing && this.skipDialogueThing();
              g.sound.play(G.sound(this.closeSound), this.closeVolume);
            } else
              this.daText.finishedText
                ? ((b = this.arrayCharacters[this.lastCharacter]),
                  null != b &&
                    null != b.animation._curAnim &&
                    b.animationIsLoop() &&
                    b.animation.get_finished() &&
                    b.playAnim(b.animation._curAnim.name, !0))
                : ((b = this.arrayCharacters[this.lastCharacter]),
                  null != b &&
                    null != b.animation._curAnim &&
                    b.animation.get_finished() &&
                    b.animation._curAnim.restart());
            if (this.box.animation._curAnim.finished) {
              c = 0;
              for (d = this.textBoxTypes.length; c < d; )
                for (
                  e = c++,
                    b = ["", "center-"],
                    f = this.box.animation._curAnim.name,
                    k = 0,
                    r = b.length;
                  k < r;

                )
                  (l = k++),
                    (f != b[l] + this.textBoxTypes[e] &&
                      f != b[l] + this.textBoxTypes[e] + "Open") ||
                      this.box.animation.play(b[l] + this.textBoxTypes[e], !0);
              Ib.updateBoxOffsets(this.box);
            }
            if (-1 != this.lastCharacter && 0 < this.arrayCharacters.length)
              for (c = 0, d = this.arrayCharacters.length; c < d; )
                if (((e = c++), (b = this.arrayCharacters[e]), null != b))
                  if (e != this.lastCharacter) {
                    switch (b.jsonFile.dialogue_pos) {
                      case "center":
                        b.set_y(b.y + this.scrollSpeed * a);
                        b.y > b.startingPos + g.height &&
                          b.set_y(b.startingPos + g.height);
                        break;
                      case "left":
                        b.set_x(b.x - this.scrollSpeed * a);
                        b.x < b.startingPos + this.offsetPos &&
                          b.set_x(b.startingPos + this.offsetPos);
                        break;
                      case "right":
                        b.set_x(b.x + this.scrollSpeed * a),
                          b.x > b.startingPos - this.offsetPos &&
                            b.set_x(b.startingPos - this.offsetPos);
                    }
                    b.set_alpha(b.alpha - 3 * a);
                    1e-5 > b.alpha && b.set_alpha(1e-5);
                  } else {
                    switch (b.jsonFile.dialogue_pos) {
                      case "center":
                        b.set_y(b.y - this.scrollSpeed * a);
                        b.y < b.startingPos && b.set_y(b.startingPos);
                        break;
                      case "left":
                        b.set_x(b.x + this.scrollSpeed * a);
                        b.x > b.startingPos && b.set_x(b.startingPos);
                        break;
                      case "right":
                        b.set_x(b.x - this.scrollSpeed * a),
                          b.x < b.startingPos && b.set_x(b.startingPos);
                    }
                    b.set_alpha(b.alpha + 3 * a);
                    1 < b.alpha && b.set_alpha(1);
                  }
          }
          wa.prototype.update.call(this, a);
        },
        startNextDialog: function () {
          for (
            var a;
            (a = this.dialogueList.dialogue[this.currentText]), null == a;

          );
          if (null == a.text || 1 > a.text.length) a.text = " ";
          null == a.boxState && (a.boxState = "normal");
          if (null != a.speed ? isNaN(a.speed) : 1) a.speed = 0.05;
          for (
            var b = a.boxState,
              c = this.textBoxTypes[0],
              d = 0,
              e = this.textBoxTypes.length;
            d < e;

          ) {
            var f = d++;
            this.textBoxTypes[f] == b && (c = b);
          }
          b = 0;
          this.box.set_visible(!0);
          d = 0;
          for (e = this.arrayCharacters.length; d < e; )
            if (
              ((f = d++), this.arrayCharacters[f].curCharacter == a.portrait)
            ) {
              b = f;
              break;
            }
          d = "";
          e = this.arrayCharacters[b].jsonFile.dialogue_pos;
          "center" == e && (d = "center-");
          b != this.lastCharacter
            ? (this.box.animation.play(d + c + "Open", !0),
              Ib.updateBoxOffsets(this.box),
              this.box.set_flipX("left" == e))
            : c != this.lastBoxType &&
              (this.box.animation.play(d + c, !0),
              Ib.updateBoxOffsets(this.box));
          this.lastCharacter = b;
          this.lastBoxType = c;
          this.daText.set_text(a.text);
          this.daText.sound = a.sound;
          if (null == this.daText.sound || "" == K.trim(this.daText.sound))
            this.daText.sound = "dialogue";
          this.daText.set_y(Ib.DEFAULT_TEXT_Y);
          2 < this.daText.rows &&
            ((c = this.daText), c.set_y(c.y - Ib.LONG_TEXT_ADD));
          c = this.arrayCharacters[b];
          null != c &&
            (c.playAnim(a.expression, this.daText.finishedText),
            null != c.animation._curAnim &&
              ((a = 24 - ((a.speed - 0.05) / 5) * 480),
              12 > a ? (a = 12) : 48 < a && (a = 48),
              c.animation._curAnim.set_frameRate(a)));
          this.currentText++;
          null != this.nextDialogueThing && this.nextDialogueThing();
        },
        __class__: Ib,
      });
      var ya = function (a, b) {
        this.r = new RegExp(a, b.split("u").join(""));
      };
      h.EReg = ya;
      ya.__name__ = "EReg";
      ya.prototype = {
        match: function (a) {
          this.r.global && (this.r.lastIndex = 0);
          this.r.m = this.r.exec(a);
          this.r.s = a;
          return null != this.r.m;
        },
        matched: function (a) {
          if (null != this.r.m && 0 <= a && a < this.r.m.length)
            return this.r.m[a];
          throw N.thrown("EReg::matched");
        },
        matchedPos: function () {
          if (null == this.r.m) throw N.thrown("No string matched");
          return { pos: this.r.m.index, len: this.r.m[0].length };
        },
        matchSub: function (a, b, c) {
          null == c && (c = -1);
          if (this.r.global) {
            if (
              ((this.r.lastIndex = b),
              (this.r.m = this.r.exec(0 > c ? a : X.substr(a, 0, b + c))),
              (c = null != this.r.m))
            )
              this.r.s = a;
          } else if (
            (c = this.match(0 > c ? X.substr(a, b, null) : X.substr(a, b, c)))
          )
            (this.r.s = a), (this.r.m.index += b);
          return c;
        },
        split: function (a) {
          return a.replace(this.r, "#__delim__#").split("#__delim__#");
        },
        map: function (a, b) {
          for (var c = 0, d = ""; !(c >= a.length); ) {
            if (!this.matchSub(a, c)) {
              d += M.string(X.substr(a, c, null));
              break;
            }
            var e = this.matchedPos();
            d += M.string(X.substr(a, c, e.pos - c));
            d += M.string(b(this));
            0 == e.len
              ? ((d += M.string(X.substr(a, e.pos, 1))), (c = e.pos + 1))
              : (c = e.pos + e.len);
            if (!this.r.global) break;
          }
          !this.r.global &&
            0 < c &&
            c < a.length &&
            (d += M.string(X.substr(a, c, null)));
          return d;
        },
        __class__: ya,
      };
      var Lg = function (a, b) {
        I.call(this, a, b);
      };
      h.FlashingState = Lg;
      Lg.__name__ = "FlashingState";
      Lg.__super__ = I;
      Lg.prototype = q(I.prototype, {
        create: function () {
          I.prototype.create.call(this);
          var a = new F().makeGraphic(g.width, g.height, -16777216);
          this.add(a);
          this.warnText = new W(
            0,
            0,
            g.width,
            "DISCLAIMER\n\n\t\t\tThis Mod contains some Cartoon Gore in the background\n\n\t\t\tYou've been warned!\n\n\n\t\t\tPress ENTER to continue.",
            32
          );
          this.warnText.setFormat("VCR OSD Mono", 32, -1, "center");
          a = this.warnText;
          var b = 16;
          null == b && (b = 17);
          (1 != b && 17 != b) || a.set_x((g.width - a.get_width()) / 2);
          (16 != b && 17 != b) || a.set_y((g.height - a.get_height()) / 2);
          this.add(this.warnText);
        },
        update: function (a) {
          if (!Lg.leftState) {
            var b = ia.player1.controls._back.check();
            if (ia.player1.controls._accept.check() || b)
              (Lg.leftState = !0),
                (Z.skipNextTransIn = !0),
                (Z.skipNextTransOut = !0),
                b
                  ? (g.sound.play(G.sound("cancelMenu")),
                    la.tween(this.warnText, { alpha: 0 }, 1, {
                      onComplete: function (a) {
                        I.switchState(new cb());
                      },
                    }))
                  : ((y.flashing = !1),
                    y.saveSettings(),
                    g.sound.play(G.sound("confirmMenu")),
                    ed.flicker(this.warnText, 1, 0.1, !1, !0, function (a) {
                      new fc().start(0.5, function (a) {
                        I.switchState(new cb());
                      });
                    }));
          }
          I.prototype.update.call(this, a);
        },
        __class__: Lg,
      });
      var hk = function () {};
      h["flixel.IFlxBasic"] = hk;
      hk.__name__ = "flixel.IFlxBasic";
      hk.__isInterface__ = !0;
      hk.prototype = {
        __class__: hk,
        __properties__: {
          set_visible: "set_visible",
          set_active: "set_active",
        },
      };
      var Qh = function () {};
      h["flixel.IFlxSprite"] = Qh;
      Qh.__name__ = "flixel.IFlxSprite";
      Qh.__isInterface__ = !0;
      Qh.__interfaces__ = [hk];
      Qh.prototype = {
        __class__: Qh,
        __properties__: { set_y: "set_y", set_x: "set_x" },
      };
      var fd = function () {};
      h["flixel.addons.ui.interfaces.IFlxUIWidget"] = fd;
      fd.__name__ = "flixel.addons.ui.interfaces.IFlxUIWidget";
      fd.__isInterface__ = !0;
      fd.__interfaces__ = [Qh];
      fd.prototype = {
        __class__: fd,
        __properties__: {
          set_height: "set_height",
          get_height: "get_height",
          set_width: "set_width",
          get_width: "get_width",
        },
      };
      var Na = function (a, b) {
        null == b && (b = 0);
        null == a && (a = 0);
        this.broadcastToFlxUI = this.autoBounds = !0;
        wa.call(this, a, b);
      };
      h["flixel.addons.ui.FlxTypedUIGroup"] = Na;
      Na.__name__ = "flixel.addons.ui.FlxTypedUIGroup";
      Na.__interfaces__ = [fd];
      Na.__super__ = wa;
      Na.prototype = q(wa.prototype, {
        add: function (a) {
          wa.prototype.add.call(this, a);
          this.autoBounds && this.calcBounds();
          return a;
        },
        remove: function (a, b) {
          null == b && (b = !1);
          a = wa.prototype.remove.call(this, a, b);
          this.autoBounds && this.calcBounds();
          return a;
        },
        setScrollFactor: function (a, b) {
          for (var c = 0, d = this.group.members; c < d.length; ) {
            var e = d[c];
            ++c;
            if (null != e) {
              e = e.scrollFactor;
              var f = a,
                k = b;
              null == k && (k = 0);
              null == f && (f = 0);
              e.set_x(f);
              e.set_y(k);
            }
          }
        },
        contains: function (a) {
          return -1 != this.group.members.indexOf(a);
        },
        calcBounds: function (a) {
          if (null == this.group.members || 0 == this.group.members.length)
            this.set_width(this.set_height(0)),
              null != a &&
                ((a.x = 0), (a.y = 0), (a.width = 0), (a.height = 0));
          else {
            for (
              var b = Infinity,
                c = -Infinity,
                d = Infinity,
                e = -Infinity,
                f = 0,
                k = this.group.members;
              f < k.length;

            ) {
              var r = k[f];
              ++f;
              null != r &&
                (r.x < b && (b = r.x),
                r.x + r.get_width() > c && (c = r.x + r.get_width()),
                r.y < d && (d = r.y),
                r.y + r.get_height() > e && (e = r.y + r.get_height()));
            }
            this.set_width(c - b);
            this.set_height(e - d);
            null != a &&
              ((a.x = b),
              (a.y = d),
              (a.width = this.get_width()),
              (a.height = this.get_height()));
          }
        },
        __class__: Na,
      });
      var le = function () {};
      h["flixel.addons.ui.interfaces.IHasParams"] = le;
      le.__name__ = "flixel.addons.ui.interfaces.IHasParams";
      le.__isInterface__ = !0;
      le.prototype = {
        __class__: le,
        __properties__: { set_params: "set_params" },
      };
      var Re = function () {};
      h["flixel.addons.ui.interfaces.IFlxUIClickable"] = Re;
      Re.__name__ = "flixel.addons.ui.interfaces.IFlxUIClickable";
      Re.__isInterface__ = !0;
      Re.prototype = {
        __class__: Re,
        __properties__: { set_skipButtonUpdate: "set_skipButtonUpdate" },
      };
      var gc = function (a, b, c, d, e, f, k, r) {
        null == b && (b = 0);
        null == a && (a = 0);
        this.dropDirection = Pi.Down;
        this.list = [];
        this.canScroll = !0;
        this.currentScroll = 0;
        Na.call(this, a, b);
        this.callback = d;
        this.header = e;
        this.dropPanel = f;
        null == this.header && (this.header = new ik());
        null == this.dropPanel &&
          ((a = new ha(
            0,
            0,
            this.header.background.get_width(),
            this.header.background.get_height()
          )),
          (this.dropPanel = new ea(
            0,
            0,
            "flixel/flixel-ui/img/box.png",
            a,
            [1, 1, 14, 14]
          )));
        if (null != c) {
          a = 0;
          for (k = c.length; a < k; )
            (b = a++),
              (d = c[b]),
              this.list.push(this.makeListButton(b, d.label, d.name));
          this.selectSomething(c[0].name, c[0].label);
        } else if (null != k)
          for (a = 0; a < k.length; )
            (c = k[a]),
              ++a,
              this.list.push(c),
              c.resize(
                this.header.background.get_width(),
                this.header.background.get_height()
              ),
              c.set_x(1);
        this.updateButtonPositions();
        this.dropPanel.resize(
          this.header.background.get_width(),
          this.getPanelHeight()
        );
        this.dropPanel.set_visible(!1);
        this.add(this.dropPanel);
        a = 0;
        for (k = this.list; a < k.length; )
          (c = k[a]), ++a, this.add(c), c.set_visible(!1);
        this.header.button.onUp.callback = n(this, this.onDropdown);
        this.add(this.header);
      };
      h.FlxUIDropDownMenuCustom = gc;
      gc.__name__ = "FlxUIDropDownMenuCustom";
      gc.__interfaces__ = [le, Re, fd];
      gc.makeStrIdLabelArray = function (a, b) {
        null == b && (b = !1);
        for (var c = [], d = 0, e = a.length; d < e; ) {
          var f = d++,
            k = a[f];
          b && (k = null == f ? "null" : "" + f);
          c[f] = new jk(k, a[f]);
        }
        return c;
      };
      gc.__super__ = Na;
      gc.prototype = q(Na.prototype, {
        set_skipButtonUpdate: function (a) {
          this.skipButtonUpdate = a;
          this.header.button.set_skipButtonUpdate(a);
          return a;
        },
        get_selectedId: function () {
          return this._selectedId;
        },
        set_selectedId: function (a) {
          if (this._selectedId == a) return a;
          for (var b = 0, c = 0, d = this.list; c < d.length; ) {
            var e = d[c];
            ++c;
            if (null != e && e.name == a) {
              b = this.list[b];
              this._selectedId = a;
              null != b.label
                ? ((this._selectedLabel = b.label.text),
                  this.header.text.set_text(b.label.text))
                : ((this._selectedLabel = ""), this.header.text.set_text(""));
              break;
            }
            ++b;
          }
          return a;
        },
        get_selectedLabel: function () {
          return this._selectedLabel;
        },
        set_selectedLabel: function (a) {
          if (this._selectedLabel == a) return a;
          for (var b = 0, c = 0, d = this.list; c < d.length; ) {
            var e = d[c];
            ++c;
            if (e.label.text == a) {
              this._selectedId = this.list[b].name;
              this._selectedLabel = a;
              this.header.text.set_text(a);
              break;
            }
            ++b;
          }
          return a;
        },
        set_params: function (a) {
          return (this.params = a);
        },
        updateButtonPositions: function () {
          var a = this.header.background.get_height();
          this.dropPanel.set_y(this.header.background.y);
          if (this.dropsUp()) {
            var b = this.dropPanel;
            b.set_y(b.y - this.getPanelHeight());
          } else (b = this.dropPanel), b.set_y(b.y + a);
          b = this.dropPanel.y;
          for (var c = 0, d = this.currentScroll; c < d; ) {
            var e = c++;
            e = this.list[e];
            null != e && e.set_y(-99999);
          }
          c = this.currentScroll;
          for (d = this.list.length; c < d; )
            (e = c++), (e = this.list[e]), null != e && (e.set_y(b), (b += a));
        },
        set_visible: function (a) {
          for (
            var b = this.dropPanel.visible, c = [], d = 0, e = this.list.length;
            d < e;

          ) {
            var f = d++;
            null != this.list[f] ? c.push(this.list[f].visible) : c.push(!1);
          }
          Na.prototype.set_visible.call(this, a);
          this.dropPanel.set_visible(b);
          d = 0;
          for (e = this.list.length; d < e; )
            (f = d++), null != this.list[f] && this.list[f].set_visible(c[f]);
          return a;
        },
        dropsUp: function () {
          return this.dropDirection != Pi.Up
            ? this.dropDirection == Pi.Automatic
              ? this.exceedsHeight()
              : !1
            : !0;
        },
        exceedsHeight: function () {
          return (
            this.y +
              this.getPanelHeight() +
              this.header.background.get_height() >
            g.height
          );
        },
        getPanelHeight: function () {
          return this.list.length * this.header.background.get_height();
        },
        setData: function (a) {
          var b = 0;
          if (null != a) {
            for (var c = 0; c < a.length; ) {
              var d = a[c];
              ++c;
              var e = !1;
              if (null != this.list) {
                if (b <= this.list.length - 1) {
                  var f = this.list[b];
                  null != f &&
                    (f.label.set_text(d.label),
                    (this.list[b].name = d.name),
                    (e = !0));
                }
              } else this.list = [];
              e ||
                ((d = this.makeListButton(b, d.label, d.name)),
                this.list.push(d),
                this.add(d),
                d.set_visible(!1));
              ++b;
            }
            if (this.list.length > a.length)
              for (c = a.length, b = this.list.length; c < b; )
                c++,
                  (d = this.list.pop()),
                  d.set_visible(!1),
                  d.set_active(!1),
                  this.remove(d, !0),
                  d.destroy();
            this.selectSomething(a[0].name, a[0].label);
          }
          this.dropPanel.resize(
            this.header.background.get_width(),
            this.getPanelHeight()
          );
          this.updateButtonPositions();
        },
        selectSomething: function (a, b) {
          this.header.text.set_text(b);
          this.set_selectedId(a);
          this.set_selectedLabel(b);
        },
        makeListButton: function (a, b, c) {
          b = new gd(0, 0, b);
          b.broadcastToFlxUI = !1;
          var d = n(this, this.onClickItem);
          b.onUp.callback = function () {
            d(a);
          };
          b.name = c;
          b.loadGraphicSlice9(
            [
              "flixel/flixel-ui/img/invis.png",
              "flixel/flixel-ui/img/hilight.png",
              "flixel/flixel-ui/img/hilight.png",
            ],
            this.header.background.get_width() | 0,
            this.header.background.get_height() | 0,
            [
              [1, 1, 3, 3],
              [1, 1, 3, 3],
              [1, 1, 3, 3],
            ],
            0
          );
          c = b.labelOffsets;
          c[2].set_y(c[2].y - 1);
          b.up_color = -16777216;
          b.over_color = -1;
          b.down_color = -1;
          b.resize(
            this.header.background.get_width() - 2,
            this.header.background.get_height() - 1
          );
          b.label.set_alignment("left");
          b.autoCenterLabel();
          b.set_x(1);
          c = 0;
          for (var e = b.labelOffsets; c < e.length; ) {
            var f = e[c];
            ++c;
            f.set_x(f.x + 2);
          }
          return b;
        },
        update: function (a) {
          Na.prototype.update.call(this, a);
          this.dropPanel.visible &&
            (1 < this.list.length &&
              this.canScroll &&
              (0 >= g.mouse.wheel
                ? ((a = g.keys.justPressed),
                  (a = a.keyManager.checkStatusUnsafe(38, a.status)))
                : (a = !0),
              a
                ? (--this.currentScroll,
                  0 > this.currentScroll && (this.currentScroll = 0),
                  this.updateButtonPositions())
                : (0 <= g.mouse.wheel
                    ? ((a = g.keys.justPressed),
                      (a = a.keyManager.checkStatusUnsafe(40, a.status)))
                    : (a = !0),
                  a &&
                    (this.currentScroll++,
                    this.currentScroll >= this.list.length &&
                      (this.currentScroll = this.list.length - 1),
                    this.updateButtonPositions()))),
            2 != g.mouse._leftButton.current ||
              this.mouseOverlapping() ||
              this.showList(!1));
        },
        mouseOverlapping: function () {
          var a = g.mouse.getScreenPosition(this.get_camera()),
            b = this.getScreenPosition(null, this.get_camera());
          return a.x >= b.x &&
            a.y >= b.y &&
            a.x < b.x + this.get_width() &&
            a.y < b.y + this.get_height()
            ? !0
            : !1;
        },
        destroy: function () {
          Na.prototype.destroy.call(this);
          this.dropPanel = V.destroy(this.dropPanel);
          this.list = V.destroyArray(this.list);
          this.callback = null;
        },
        showList: function (a) {
          for (var b = 0, c = this.list; b < c.length; ) {
            var d = c[b];
            ++b;
            d.set_visible(a);
            d.set_active(a);
          }
          this.dropPanel.set_visible(a);
          0 != this.currentScroll &&
            ((this.currentScroll = 0), this.updateButtonPositions());
          Ea.forceFocus(a, this);
        },
        onDropdown: function () {
          this.dropPanel.visible ? this.showList(!1) : this.showList(!0);
        },
        onClickItem: function (a) {
          a = this.list[a];
          this.selectSomething(a.name, a.label.text);
          this.showList(!1);
          null != this.callback && this.callback(a.name);
          this.broadcastToFlxUI &&
            Ea.event("click_dropdown", this, a.name, this.params);
        },
        __class__: gc,
        __properties__: q(Na.prototype.__properties__, {
          set_params: "set_params",
          set_selectedLabel: "set_selectedLabel",
          get_selectedLabel: "get_selectedLabel",
          set_selectedId: "set_selectedId",
          get_selectedId: "get_selectedId",
          set_skipButtonUpdate: "set_skipButtonUpdate",
        }),
      });
      var ik = function (a, b, c, d) {
        null == a && (a = 120);
        Na.call(this);
        this.background = b;
        this.text = c;
        this.button = d;
        null == this.background &&
          (this.background = new ea(
            0,
            0,
            "flixel/flixel-ui/img/box.png",
            new ha(0, 0, a, 20),
            [1, 1, 14, 14]
          ));
        null == this.button &&
          ((this.button = new Be(
            0,
            0,
            new F(0, 0, "flixel/flixel-ui/img/dropdown_mark.png")
          )),
          this.button.loadGraphicSlice9(
            ["flixel/flixel-ui/img/button_thin.png"],
            80,
            20,
            [Bb.toIntArray("6,6,11,11")],
            0,
            -1,
            !1,
            18,
            18
          ));
        this.button.resize(
          this.background.get_height(),
          this.background.get_height()
        );
        this.button.set_x(
          this.background.x +
            this.background.get_width() -
            this.button.get_width()
        );
        this.button.set_width(a);
        b = this.button;
        b.offset.set_x(b.offset.x - (a - this.button.frameWidth));
        this.button.set_x(this.offset.x);
        b = this.button.label;
        b.offset.set_x(b.offset.x + this.button.offset.x);
        null == this.text &&
          (this.text = new Ed(0, 0, this.background.get_width() | 0));
        this.text.setPosition(2, 4);
        this.text.set_color(-16777216);
        this.add(this.background);
        this.add(this.button);
        this.add(this.text);
      };
      h.FlxUIDropDownHeader = ik;
      ik.__name__ = "FlxUIDropDownHeader";
      ik.__super__ = Na;
      ik.prototype = q(Na.prototype, {
        destroy: function () {
          Na.prototype.destroy.call(this);
          this.background = V.destroy(this.background);
          this.text = V.destroy(this.text);
          this.button = V.destroy(this.button);
        },
        __class__: ik,
      });
      var Pi = (w.FlxUIDropDownMenuDropDirection = {
        __ename__: "FlxUIDropDownMenuDropDirection",
        __constructs__: null,
        Automatic: {
          _hx_name: "Automatic",
          _hx_index: 0,
          __enum__: "FlxUIDropDownMenuDropDirection",
          toString: p,
        },
        Down: {
          _hx_name: "Down",
          _hx_index: 1,
          __enum__: "FlxUIDropDownMenuDropDirection",
          toString: p,
        },
        Up: {
          _hx_name: "Up",
          _hx_index: 2,
          __enum__: "FlxUIDropDownMenuDropDirection",
          toString: p,
        },
      });
      Pi.__constructs__ = [Pi.Automatic, Pi.Down, Pi.Up];
      var Tc = function (a) {
        this.finishCallback = null;
        var b = this;
        O.call(this);
        Tc.player = new kk();
        Tc.player.set_x(0);
        Tc.player.set_y(0);
        g.addChildBelowMouse(Tc.player);
        var c = new lk();
        c.connect(null);
        Tc.netStream = new mk(c);
        Tc.netStream.client = {
          onMetaData: function () {
            Tc.player.attachNetStream(Tc.netStream);
            Tc.player.set_width(g.width);
            Tc.player.set_height(g.height);
          },
        };
        c.addEventListener("netStatus", function (a) {
          "NetStream.Play.Complete" == a.info.code &&
            (Tc.netStream.dispose(),
            g.game.contains(Tc.player) && g.game.removeChild(Tc.player),
            null != b.finishCallback && b.finishCallback());
        });
        Tc.netStream.play(a);
      };
      h.FlxVideo = Tc;
      Tc.__name__ = "FlxVideo";
      Tc.__super__ = O;
      Tc.prototype = q(O.prototype, {
        skipVideo: function () {
          Tc.netStream.dispose();
          g.game.contains(Tc.player) && g.game.removeChild(Tc.player);
          null != this.finishCallback && this.finishCallback();
        },
        __class__: Tc,
      });
      var rb = function (a, b) {
        this.holdTime = 0;
        this.instPlaying = -1;
        this.iconArray = [];
        this.curPlaying = !1;
        this.lerpScore =
          this.lerpRating =
          this.intendedScore =
          this.intendedRating =
            0;
        this.curDifficulty = -1;
        this.songs = [];
        I.call(this, a, b);
      };
      h.FreeplayState = rb;
      rb.__name__ = "FreeplayState";
      rb.destroyFreeplayVocals = function () {
        if (null != rb.vocals) {
          var a = rb.vocals;
          a.cleanup(a.autoDestroy, !0);
          rb.vocals.destroy();
        }
        rb.vocals = null;
      };
      rb.__super__ = I;
      rb.prototype = q(I.prototype, {
        create: function () {
          G.clearStoredMemory();
          G.clearUnusedMemory();
          this.persistentUpdate = !0;
          C.isStoryMode = !1;
          ab.reloadWeekFiles(!1);
          for (var a = 0, b = ab.weeksList.length; a < b; ) {
            var c = a++;
            if (!this.weekIsLocked(ab.weeksList[c])) {
              for (
                var d = ab.weeksLoaded.h[ab.weeksList[c]],
                  e = [],
                  f = [],
                  k = 0,
                  r = d.songs.length;
                k < r;

              ) {
                var l = k++;
                e.push(d.songs[l][0]);
                f.push(d.songs[l][1]);
              }
              ab.setDirectoryFromWeek(d);
              e = 0;
              for (d = d.songs; e < d.length; ) {
                k = d[e];
                ++e;
                var J = k[2];
                if (null == J || 3 > J.length) J = [146, 113, 253];
                f = k[0];
                k = k[1];
                r = J[0];
                l = J[1];
                J = J[2];
                var u = ob._new(),
                  m = 255;
                null == m && (m = 255);
                u &= -16711681;
                u |= (255 < r ? 255 : 0 > r ? 0 : r) << 16;
                u &= -65281;
                u |= (255 < l ? 255 : 0 > l ? 0 : l) << 8;
                u &= -256;
                u |= 255 < J ? 255 : 0 > J ? 0 : J;
                u &= 16777215;
                u |= (255 < m ? 255 : 0 > m ? 0 : m) << 24;
                this.addSong(f, c, k, u);
              }
            }
          }
          ab.loadTheFirstEnabledMod();
          a = new F();
          b = G.returnGraphic("menuDesat", null);
          this.bg = a.loadGraphic(b);
          this.bg.set_antialiasing(y.globalAntialiasing);
          this.add(this.bg);
          a = this.bg;
          a.set_x((g.width - a.get_width()) / 2);
          a.set_y((g.height - a.get_height()) / 2);
          this.grpSongs = new ma();
          this.add(this.grpSongs);
          a = 0;
          for (b = this.songs.length; a < b; )
            (c = a++),
              (e = new ib(90, 320, this.songs[c].songName, !0)),
              (e.isMenuItem = !0),
              (e.targetY = c - rb.curSelected),
              this.grpSongs.add(e),
              980 < e.get_width() && e.set_scaleX(980 / e.get_width()),
              e.snapToPosition(),
              (G.currentModDirectory = this.songs[c].folder),
              (c = new sf(this.songs[c].songCharacter)),
              (c.sprTracker = e),
              this.iconArray.push(c),
              this.add(c);
          ab.setDirectoryFromWeek();
          this.scoreText = new W(0.7 * g.width, 5, 0, "", 32);
          this.scoreText.setFormat("assets/fonts/vcr.ttf", 32, -1, "right");
          this.scoreBG = new F(this.scoreText.x - 6, 0).makeGraphic(
            1,
            66,
            -16777216
          );
          this.scoreBG.set_alpha(0.6);
          this.add(this.scoreBG);
          this.diffText = new W(
            this.scoreText.x,
            this.scoreText.y + 36,
            0,
            "",
            24
          );
          this.diffText.set_font(this.scoreText._font);
          this.add(this.diffText);
          this.add(this.scoreText);
          rb.curSelected >= this.songs.length && (rb.curSelected = 0);
          this.bg.set_color(this.songs[rb.curSelected].color);
          this.intendedColor = this.bg.color;
          "" == rb.lastDifficultyName &&
            (rb.lastDifficultyName = Ta.defaultDifficulty);
          this.curDifficulty = Math.round(
            Math.max(0, Ta.defaultDifficulties.indexOf(rb.lastDifficultyName))
          );
          this.changeSelection();
          this.changeDiff();
          new ib(1, 0, "swag");
          a = new F(0, g.height - 26).makeGraphic(g.width, 26, -16777216);
          a.set_alpha(0.6);
          this.add(a);
          a = new W(
            a.x,
            a.y + 4,
            g.width,
            "Press RESET to Reset your Score and Accuracy.",
            18
          );
          a.setFormat("assets/fonts/vcr.ttf", 18, -1, "right");
          b = a.scrollFactor;
          b.set_x(0);
          b.set_y(0);
          this.add(a);
          I.prototype.create.call(this);
        },
        closeSubState: function () {
          this.changeSelection(0, !1);
          this.persistentUpdate = !0;
          I.prototype.closeSubState.call(this);
        },
        addSong: function (a, b, c, d) {
          this.songs.push(new Lm(a, b, c, d));
        },
        weekIsLocked: function (a) {
          a = ab.weeksLoaded.h[a];
          return !a.startUnlocked && 0 < a.weekBefore.length
            ? Object.prototype.hasOwnProperty.call(
                Ab.weekCompleted.h,
                a.weekBefore
              )
              ? !Ab.weekCompleted.h[a.weekBefore]
              : !0
            : !1;
        },
        update: function (a) {
          if (0.7 > g.sound.music._volume) {
            var b = g.sound.music;
            b.set_volume(b._volume + 0.5 * g.elapsed);
          }
          b = this.lerpScore;
          this.lerpScore = Math.floor(
            b + Math.max(0, Math.min(1, 24 * a)) * (this.intendedScore - b)
          );
          b = this.lerpRating;
          this.lerpRating =
            b + Math.max(0, Math.min(1, 12 * a)) * (this.intendedRating - b);
          10 >= Math.abs(this.lerpScore - this.intendedScore) &&
            (this.lerpScore = this.intendedScore);
          0.01 >= Math.abs(this.lerpRating - this.intendedRating) &&
            (this.lerpRating = this.intendedRating);
          b = M.string(Sa.floorDecimal(100 * this.lerpRating, 2)).split(".");
          for (2 > b.length && b.push(""); 2 > b[1].length; ) b[1] += "0";
          this.scoreText.set_text(
            "PERSONAL BEST: " + this.lerpScore + " (" + b.join(".") + "%)"
          );
          this.positionHighscore();
          b = ia.player1.controls._ui_upP.check();
          var c = ia.player1.controls._ui_downP.check(),
            d = ia.player1.controls._accept.check(),
            e = g.keys.justPressed,
            f = e.keyManager.checkStatusUnsafe(32, e.status);
          e = g.keys.justPressed;
          e.keyManager.checkStatusUnsafe(17, e.status);
          var k = 1;
          e = g.keys.pressed;
          e.keyManager.checkStatusUnsafe(16, e.status) && (k = 3);
          if (1 < this.songs.length) {
            b && (this.changeSelection(-k), (this.holdTime = 0));
            c && (this.changeSelection(k), (this.holdTime = 0));
            if (
              ia.player1.controls._ui_down.check() ||
              ia.player1.controls._ui_up.check()
            ) {
              e = Math.floor(10 * (this.holdTime - 0.5));
              this.holdTime += a;
              var r = Math.floor(10 * (this.holdTime - 0.5));
              0.5 < this.holdTime &&
                0 < r - e &&
                (this.changeSelection(
                  (r - e) * (ia.player1.controls._ui_up.check() ? -k : k)
                ),
                this.changeDiff());
            }
            0 != g.mouse.wheel &&
              (g.sound.play(G.sound("scrollMenu"), 0.2),
              this.changeSelection(-k * g.mouse.wheel, !1),
              this.changeDiff());
          }
          ia.player1.controls._ui_leftP.check()
            ? this.changeDiff(-1)
            : ia.player1.controls._ui_rightP.check()
            ? this.changeDiff(1)
            : (b || c) && this.changeDiff();
          ia.player1.controls._back.check() &&
            ((this.persistentUpdate = !1),
            null != this.colorTween && this.colorTween.cancel(),
            g.sound.play(G.sound("cancelMenu")),
            I.switchState(new zc()));
          f ||
            (d
              ? ((this.persistentUpdate = !1),
                (c = this.songs[rb.curSelected].songName),
                (d = new ya("[~&\\\\;:<>#]", "")),
                (b = new ya("[.,'\"%?!]", "")),
                (c = d.split(K.replace(c, " ", "-")).join("-")),
                (b = b.split(c).join("").toLowerCase()),
                (c = Sa.formatSong(b, this.curDifficulty)),
                wb.trace(c, {
                  fileName: "source/FreeplayState.hx",
                  lineNumber: 387,
                  className: "FreeplayState",
                  methodName: "update",
                }),
                (C.SONG = Dd.loadFromJson(c, b)),
                (C.isStoryMode = !1),
                (C.storyDifficulty = this.curDifficulty),
                wb.trace("CURRENT WEEK: " + ab.getWeekFileName(), {
                  fileName: "source/FreeplayState.hx",
                  lineNumber: 393,
                  className: "FreeplayState",
                  methodName: "update",
                }),
                null != this.colorTween && this.colorTween.cancel(),
                (e = g.keys.pressed),
                e.keyManager.checkStatusUnsafe(16, e.status)
                  ? I.switchState(Lb.getNextState(new da(), !1))
                  : I.switchState(Lb.getNextState(new C(), !1)),
                g.sound.music.set_volume(0),
                rb.destroyFreeplayVocals())
              : ia.player1.controls._reset.check() &&
                ((this.persistentUpdate = !1),
                this.openSubState(
                  new Qi(
                    this.songs[rb.curSelected].songName,
                    this.curDifficulty,
                    this.songs[rb.curSelected].songCharacter
                  )
                ),
                g.sound.play(G.sound("scrollMenu"))));
          I.prototype.update.call(this, a);
        },
        changeDiff: function (a) {
          null == a && (a = 0);
          this.curDifficulty += a;
          0 > this.curDifficulty &&
            (this.curDifficulty = Ta.difficulties.length - 1);
          this.curDifficulty >= Ta.difficulties.length &&
            (this.curDifficulty = 0);
          rb.lastDifficultyName = Ta.difficulties[this.curDifficulty];
          this.intendedScore = Sa.getScore(
            this.songs[rb.curSelected].songName,
            this.curDifficulty
          );
          this.intendedRating = Sa.getRating(
            this.songs[rb.curSelected].songName,
            this.curDifficulty
          );
          C.storyDifficulty = this.curDifficulty;
          this.diffText.set_text("< " + Ta.difficultyString() + " >");
          this.positionHighscore();
        },
        changeSelection: function (a, b) {
          null == b && (b = !0);
          null == a && (a = 0);
          var c = this;
          b && g.sound.play(G.sound("scrollMenu"), 0.4);
          rb.curSelected += a;
          0 > rb.curSelected && (rb.curSelected = this.songs.length - 1);
          rb.curSelected >= this.songs.length && (rb.curSelected = 0);
          a = this.songs[rb.curSelected].color;
          a != this.intendedColor &&
            (null != this.colorTween && this.colorTween.cancel(),
            (this.intendedColor = a),
            (this.colorTween = la.color(
              this.bg,
              1,
              this.bg.color,
              this.intendedColor,
              {
                onComplete: function (a) {
                  c.colorTween = null;
                },
              }
            )));
          this.intendedScore = Sa.getScore(
            this.songs[rb.curSelected].songName,
            this.curDifficulty
          );
          this.intendedRating = Sa.getRating(
            this.songs[rb.curSelected].songName,
            this.curDifficulty
          );
          b = a = 0;
          for (var d = this.iconArray.length; b < d; ) {
            var e = b++;
            this.iconArray[e].set_alpha(0.6);
          }
          this.iconArray[rb.curSelected].set_alpha(1);
          b = 0;
          for (d = this.grpSongs.members; b < d.length; )
            (e = d[b]),
              ++b,
              (e.targetY = a - rb.curSelected),
              ++a,
              e.set_alpha(0.6),
              0 == e.targetY && e.set_alpha(1);
          G.currentModDirectory = this.songs[rb.curSelected].folder;
          C.storyWeek = this.songs[rb.curSelected].week;
          Ta.difficulties = Ta.defaultDifficulties.slice();
          a = ab.getCurrentWeek().difficulties;
          null != a && (a = K.trim(a));
          if (null != a && 0 < a.length) {
            a = a.split(",");
            for (e = a.length - 1; 0 < e; )
              null != a[e] &&
                ((a[e] = K.trim(a[e])), 1 > a[e].length && X.remove(a, a[e])),
                --e;
            0 < a.length && 0 < a[0].length && (Ta.difficulties = a);
          }
          -1 != Ta.difficulties.indexOf(Ta.defaultDifficulty)
            ? (this.curDifficulty = Math.round(
                Math.max(
                  0,
                  Ta.defaultDifficulties.indexOf(Ta.defaultDifficulty)
                )
              ))
            : (this.curDifficulty = 0);
          a = Ta.difficulties.indexOf(rb.lastDifficultyName);
          -1 < a && (this.curDifficulty = a);
        },
        positionHighscore: function () {
          this.scoreText.set_x(g.width - this.scoreText.get_width() - 6);
          this.scoreBG.scale.set_x(g.width - this.scoreText.x + 6);
          this.scoreBG.set_x(g.width - this.scoreBG.scale.x / 2);
          this.diffText.set_x(
            (this.scoreBG.x + this.scoreBG.get_width() / 2) | 0
          );
          var a = this.diffText;
          a.set_x(a.x - this.diffText.get_width() / 2);
        },
        __class__: rb,
      });
      var Lm = function (a, b, c, d) {
        this.folder = "";
        this.color = -7179779;
        this.week = 0;
        this.songName = a;
        this.week = b;
        this.songCharacter = c;
        this.color = d;
        this.folder = G.currentModDirectory;
        null == this.folder && (this.folder = "");
      };
      h.SongMetadata = Lm;
      Lm.__name__ = "SongMetadata";
      Lm.prototype = { __class__: Lm };
      var Ec = function (a) {};
      h.FunkinLua = Ec;
      Ec.__name__ = "FunkinLua";
      Ec.setVarInArray = function (a, b, c) {
        var d = b.split("[");
        if (1 < d.length) {
          b = null;
          Object.prototype.hasOwnProperty.call(C.instance.variables.h, d[0])
            ? ((a = C.instance.variables.h[d[0]]), null != a && (b = a))
            : (b = qa.getProperty(a, d[0]));
          a = 1;
          for (var e = d.length; a < e; ) {
            var f = a++,
              k = X.substr(d[f], 0, d[f].length - 1);
            f >= d.length - 1 ? (b[k] = c) : (b = b[k]);
          }
          return b;
        }
        if (Object.prototype.hasOwnProperty.call(C.instance.variables.h, b))
          return (C.instance.variables.h[b] = c), !0;
        qa.setProperty(a, b, c);
        return !0;
      };
      Ec.getVarInArray = function (a, b) {
        var c = b.split("[");
        if (1 < c.length) {
          b = null;
          if (
            Object.prototype.hasOwnProperty.call(C.instance.variables.h, c[0])
          ) {
            var d = C.instance.variables.h[c[0]];
            null != d && (b = d);
          } else b = qa.getProperty(a, c[0]);
          a = 1;
          for (d = c.length; a < d; ) {
            var e = a++;
            e = X.substr(c[e], 0, c[e].length - 1);
            b = b[e];
          }
          return b;
        }
        return Object.prototype.hasOwnProperty.call(
          C.instance.variables.h,
          b
        ) && ((d = C.instance.variables.h[b]), null != d)
          ? d
          : qa.getProperty(a, b);
      };
      Ec.getPropertyLoopThingWhatever = function (a, b, c) {
        null == c && (c = !0);
        null == b && (b = !0);
        b = Ec.getObjectDirectly(a[0], b);
        var d = a.length;
        c && (d = a.length - 1);
        for (c = 1; c < d; ) {
          var e = c++;
          b = Ec.getVarInArray(b, a[e]);
        }
        return b;
      };
      Ec.getObjectDirectly = function (a, b) {
        null == b && (b = !0);
        b = C.instance.getLuaObject(a, b);
        null == b &&
          (b = Ec.getVarInArray(
            C.instance.isDead ? hd.instance : C.instance,
            a
          ));
        return b;
      };
      Ec.prototype = {
        call: function (a, b) {
          return Ec.Function_Continue;
        },
        stop: function () {},
        __class__: Ec,
      };
      var Mm = function (a, b) {
        null == b && (b = 0);
        null == a && (a = 0);
        F.call(this, a, b);
        this.set_antialiasing(y.globalAntialiasing);
      };
      h.ModchartSprite = Mm;
      Mm.__name__ = "ModchartSprite";
      Mm.__super__ = F;
      Mm.prototype = q(F.prototype, { __class__: Mm });
      var W = function (a, b, c, d, e, f) {
        null == f && (f = !0);
        null == e && (e = 8);
        null == c && (c = 0);
        null == b && (b = 0);
        null == a && (a = 0);
        this._hasBorderAlpha = !1;
        this._regen = !0;
        this._formatRanges = [];
        this._autoHeight = !0;
        this.borderSize = this.borderQuality = 1;
        this.borderColor = 0;
        this.borderStyle = Ya.NONE;
        this.text = "";
        F.call(this, a, b);
        null == d || "" == d
          ? (this.set_text(""), (d = " "))
          : this.set_text(d);
        this.textField = new Kc();
        this.textField.set_selectable(!1);
        this.textField.set_multiline(!0);
        this.textField.set_wordWrap(!0);
        this._defaultFormat = new id(null, e, 16777215);
        this.set_font(Fd.FONT_DEFAULT);
        this._formatAdjusted = new id();
        this.textField.set_defaultTextFormat(this._defaultFormat);
        this.textField.set_text(d);
        this.set_fieldWidth(c);
        this.textField.set_embedFonts(f);
        this.textField.set_sharpness(100);
        this.textField.set_height(0 >= d.length ? 1 : 10);
        this.set_allowCollisions(0);
        this.set_moves(!1);
        this.drawFrame();
        a = b = 1;
        null == a && (a = 0);
        null == b && (b = 0);
        null == a && (a = 0);
        null == b && (b = 0);
        a = ba.pool.get().set(b, a);
        a._inPool = !1;
        this.shadowOffset = a;
      };
      h["flixel.text.FlxText"] = W;
      W.__name__ = "flixel.text.FlxText";
      W.__super__ = F;
      W.prototype = q(F.prototype, {
        destroy: function () {
          this._formatAdjusted =
            this._defaultFormat =
            this._font =
            this.textField =
              null;
          this.shadowOffset = V.put(this.shadowOffset);
          F.prototype.destroy.call(this);
        },
        drawFrame: function (a) {
          null == a && (a = !1);
          this._regen = this._regen || a;
          F.prototype.drawFrame.call(this, this._regen);
        },
        setFormat: function (a, b, c, d, e, f, k) {
          null == k && (k = !0);
          null == f && (f = 0);
          null == c && (c = -1);
          null == b && (b = 8);
          null == e && (e = Ya.NONE);
          k ? this.set_font(a) : null != a && this.set_systemFont(a);
          this.set_size(b);
          this.set_color(c);
          null != d && this.set_alignment(d);
          c = f;
          null == c && (c = 0);
          this.set_borderStyle(e);
          this.set_borderColor(c);
          this.set_borderSize(1);
          this.set_borderQuality(1);
          this.textField.set_defaultTextFormat(this._defaultFormat);
          this.textField.setTextFormat(this._defaultFormat);
          this._regen = !0;
          return this;
        },
        updateHitbox: function () {
          this.regenGraphic();
          F.prototype.updateHitbox.call(this);
        },
        getScreenBounds: function (a, b) {
          this.regenGraphic();
          return F.prototype.getScreenBounds.call(this, a, b);
        },
        set_fieldWidth: function (a) {
          if (null == this.textField) return a;
          0 >= a
            ? (this.set_wordWrap(!1),
              this.set_autoSize(!0),
              (this._autoHeight = !0))
            : (this.set_autoSize(!1),
              this.set_wordWrap(!0),
              this.textField.set_width(a));
          this._regen = !0;
          return a;
        },
        get_fieldWidth: function () {
          return null != this.textField ? this.textField.get_width() : 0;
        },
        set_autoSize: function (a) {
          null != this.textField &&
            (this.textField.set_autoSize(a ? 1 : 2), (this._regen = !0));
          return a;
        },
        set_text: function (a) {
          this.text = a;
          if (null != this.textField) {
            var b = this.textField.get_text();
            this.textField.set_text(a);
            this._regen = this.textField.get_text() != b || this._regen;
          }
          return a;
        },
        set_size: function (a) {
          this._defaultFormat.size = a;
          this.textField.set_defaultTextFormat(this._defaultFormat);
          this.textField.setTextFormat(this._defaultFormat);
          this._regen = !0;
          return a;
        },
        set_color: function (a) {
          if (this._defaultFormat.color == (a & 16777215)) return a;
          this._defaultFormat.color = a & 16777215;
          this.color = a;
          this.textField.set_defaultTextFormat(this._defaultFormat);
          this.textField.setTextFormat(this._defaultFormat);
          this._regen = !0;
          return a;
        },
        set_font: function (a) {
          this.textField.set_embedFonts(!0);
          if (null != a) {
            var b = a;
            aa.exists(a, "FONT") && (b = aa.getFont(a).name);
            this._defaultFormat.font = b;
          } else this._defaultFormat.font = Fd.FONT_DEFAULT;
          this.textField.set_defaultTextFormat(this._defaultFormat);
          this.textField.setTextFormat(this._defaultFormat);
          this._regen = !0;
          return (this._font = this._defaultFormat.font);
        },
        set_systemFont: function (a) {
          this.textField.set_embedFonts(!1);
          this._defaultFormat.font = a;
          this.textField.set_defaultTextFormat(this._defaultFormat);
          this.textField.setTextFormat(this._defaultFormat);
          this._regen = !0;
          return a;
        },
        set_wordWrap: function (a) {
          this.textField.get_wordWrap() != a &&
            (this.textField.set_wordWrap(a), (this._regen = !0));
          return a;
        },
        set_alignment: function (a) {
          this._defaultFormat.align = Nm.toOpenFL(a);
          this.textField.set_defaultTextFormat(this._defaultFormat);
          this.textField.setTextFormat(this._defaultFormat);
          this._regen = !0;
          return a;
        },
        set_borderStyle: function (a) {
          a != this.borderStyle && (this._regen = !0);
          return (this.borderStyle = a);
        },
        set_borderColor: function (a) {
          this.borderColor != a &&
            this.borderStyle != Ya.NONE &&
            (this._regen = !0);
          this._hasBorderAlpha = 1 > ((a >> 24) & 255) / 255;
          return (this.borderColor = a);
        },
        set_borderSize: function (a) {
          a != this.borderSize &&
            this.borderStyle != Ya.NONE &&
            (this._regen = !0);
          return (this.borderSize = a);
        },
        set_borderQuality: function (a) {
          a = 0 > a ? 0 : a;
          a = 1 < a ? 1 : a;
          a != this.borderQuality &&
            this.borderStyle != Ya.NONE &&
            (this._regen = !0);
          return (this.borderQuality = a);
        },
        set_graphic: function (a) {
          var b = this.graphic;
          a = F.prototype.set_graphic.call(this, a);
          g.bitmap.removeIfNoUse(b);
          return a;
        },
        get_width: function () {
          this.regenGraphic();
          return F.prototype.get_width.call(this);
        },
        get_height: function () {
          this.regenGraphic();
          return F.prototype.get_height.call(this);
        },
        updateColorTransform: function () {
          null == this.colorTransform && (this.colorTransform = new Qb());
          1 != this.alpha
            ? ((this.colorTransform.alphaMultiplier = this.alpha),
              (this.useColorTransform = !0))
            : ((this.colorTransform.alphaMultiplier = 1),
              (this.useColorTransform = !1));
          this.dirty = !0;
        },
        regenGraphic: function () {
          if (null != this.textField && this._regen) {
            var a = 0,
              b = 4;
            null != this.graphic &&
              ((a = this.graphic.width), (b = this.graphic.height));
            var c = Math.ceil(this.textField.get_width()),
              d = this._autoHeight
                ? this.textField.get_textHeight()
                : this.textField.get_height();
            d = Math.ceil(d) + (this._autoHeight ? 4 : 0);
            0 == this.textField.get_textHeight() && (d = b);
            a != c || b != d
              ? ((a = g.bitmap.getUniqueKey("text")),
                this.makeGraphic(c, d, 0, !1, a),
                this._hasBorderAlpha &&
                  (this._borderPixels = this.graphic.bitmap.clone()),
                this._autoHeight && this.textField.set_height(d),
                (this._flashRect.x = 0),
                (this._flashRect.y = 0),
                (this._flashRect.width = c),
                (this._flashRect.height = d))
              : (this.graphic.bitmap.fillRect(this._flashRect, 0),
                this._hasBorderAlpha &&
                  (null == this._borderPixels
                    ? (this._borderPixels = new S(
                        this.frameWidth,
                        this.frameHeight,
                        !0
                      ))
                    : this._borderPixels.fillRect(this._flashRect, 0)));
            null != this.textField &&
              null != this.textField.get_text() &&
              (this.copyTextFormat(this._defaultFormat, this._formatAdjusted),
              this._matrix.identity(),
              this.applyBorderStyle(),
              this._hasBorderAlpha &&
                (null == this._borderColorTransform &&
                  (this._borderColorTransform = new Qb()),
                (this._borderColorTransform.alphaMultiplier =
                  ((this.borderColor >> 24) & 255) / 255),
                this._borderPixels.colorTransform(
                  this._borderPixels.rect,
                  this._borderColorTransform
                ),
                this.graphic.bitmap.draw(this._borderPixels)),
              this.applyFormats(this._formatAdjusted, !1),
              this.drawTextFieldTo(this.graphic.bitmap));
            this._regen = !1;
            this.set_frame(this.frame);
          }
        },
        drawTextFieldTo: function (a) {
          a.draw(this.textField, this._matrix);
        },
        draw: function () {
          this.regenGraphic();
          F.prototype.draw.call(this);
        },
        calcFrame: function (a) {
          null == a && (a = !1);
          null == this.textField ||
            (g.renderTile && !a) ||
            (this.regenGraphic(), F.prototype.calcFrame.call(this, a));
        },
        applyBorderStyle: function () {
          var a = (this.borderSize * this.borderQuality) | 0;
          0 >= a && (a = 1);
          var b = this.borderSize / a;
          switch (this.borderStyle._hx_index) {
            case 1:
              this.applyFormats(this._formatAdjusted, !0);
              for (var c = 0; c < a; ) {
                c++;
                var d = this._hasBorderAlpha
                  ? this._borderPixels
                  : this.graphic.bitmap;
                this._matrix.translate(b, b);
                this.drawTextFieldTo(d);
              }
              this._matrix.translate(
                -this.shadowOffset.x * this.borderSize,
                -this.shadowOffset.y * this.borderSize
              );
              break;
            case 2:
              this.applyFormats(this._formatAdjusted, !0);
              var e = b;
              for (c = 0; c < a; )
                c++,
                  (d = this._hasBorderAlpha
                    ? this._borderPixels
                    : this.graphic.bitmap),
                  this._matrix.translate(-e, -e),
                  this.drawTextFieldTo(d),
                  (d = this._hasBorderAlpha
                    ? this._borderPixels
                    : this.graphic.bitmap),
                  this._matrix.translate(e, 0),
                  this.drawTextFieldTo(d),
                  (d = this._hasBorderAlpha
                    ? this._borderPixels
                    : this.graphic.bitmap),
                  this._matrix.translate(e, 0),
                  this.drawTextFieldTo(d),
                  (d = this._hasBorderAlpha
                    ? this._borderPixels
                    : this.graphic.bitmap),
                  this._matrix.translate(0, e),
                  this.drawTextFieldTo(d),
                  (d = this._hasBorderAlpha
                    ? this._borderPixels
                    : this.graphic.bitmap),
                  this._matrix.translate(0, e),
                  this.drawTextFieldTo(d),
                  (d = this._hasBorderAlpha
                    ? this._borderPixels
                    : this.graphic.bitmap),
                  this._matrix.translate(-e, 0),
                  this.drawTextFieldTo(d),
                  (d = this._hasBorderAlpha
                    ? this._borderPixels
                    : this.graphic.bitmap),
                  this._matrix.translate(-e, 0),
                  this.drawTextFieldTo(d),
                  (d = this._hasBorderAlpha
                    ? this._borderPixels
                    : this.graphic.bitmap),
                  this._matrix.translate(0, -e),
                  this.drawTextFieldTo(d),
                  this._matrix.translate(e, 0),
                  (e += b);
              break;
            case 3:
              for (
                this.applyFormats(this._formatAdjusted, !0), e = b, c = 0;
                c < a;

              )
                c++,
                  (d = this._hasBorderAlpha
                    ? this._borderPixels
                    : this.graphic.bitmap),
                  this._matrix.translate(-e, -e),
                  this.drawTextFieldTo(d),
                  (d = this._hasBorderAlpha
                    ? this._borderPixels
                    : this.graphic.bitmap),
                  this._matrix.translate(2 * e, 0),
                  this.drawTextFieldTo(d),
                  (d = this._hasBorderAlpha
                    ? this._borderPixels
                    : this.graphic.bitmap),
                  this._matrix.translate(0, 2 * e),
                  this.drawTextFieldTo(d),
                  (d = this._hasBorderAlpha
                    ? this._borderPixels
                    : this.graphic.bitmap),
                  this._matrix.translate(2 * -e, 0),
                  this.drawTextFieldTo(d),
                  this._matrix.translate(e, -e),
                  (e += b);
          }
        },
        applyFormats: function (a, b) {
          null == b && (b = !1);
          this.copyTextFormat(this._defaultFormat, a, !1);
          a.color = b ? this.borderColor & 16777215 : this._defaultFormat.color;
          this.textField.setTextFormat(a);
          for (var c = 0, d = this._formatRanges; c < d.length; ) {
            var e = d[c];
            ++c;
            if (this.textField.get_text().length - 1 < e.range.start) break;
            else {
              var f = e.format.format;
              this.copyTextFormat(f, a, !1);
              a.color = b ? e.format.borderColor & 16777215 : f.color;
            }
            this.textField.setTextFormat(
              a,
              e.range.start,
              Math.min(e.range.end, this.textField.get_text().length) | 0
            );
          }
        },
        copyTextFormat: function (a, b, c) {
          null == c && (c = !0);
          b.font = a.font;
          b.bold = a.bold;
          b.italic = a.italic;
          b.size = a.size;
          b.color = a.color;
          b.leading = a.leading;
          c && (b.align = a.align);
        },
        set_frames: function (a) {
          F.prototype.set_frames.call(this, a);
          this._regen = !1;
          return a;
        },
        __class__: W,
        __properties__: q(F.prototype.__properties__, {
          set_alignment: "set_alignment",
          set_wordWrap: "set_wordWrap",
          set_systemFont: "set_systemFont",
          set_font: "set_font",
          set_size: "set_size",
          set_autoSize: "set_autoSize",
          set_fieldWidth: "set_fieldWidth",
          get_fieldWidth: "get_fieldWidth",
          set_borderQuality: "set_borderQuality",
          set_borderSize: "set_borderSize",
          set_borderColor: "set_borderColor",
          set_borderStyle: "set_borderStyle",
          set_text: "set_text",
        }),
      });
      var Om = function (a, b, c, d) {
        W.call(this, a, b, d, c, 16);
        this.setFormat(
          "assets/fonts/vcr.ttf",
          16,
          -1,
          "center",
          Ya.OUTLINE,
          -16777216
        );
        this.set_cameras([C.instance.camHUD]);
        a = this.scrollFactor;
        a.set_x(0);
        a.set_y(0);
        this.set_borderSize(2);
      };
      h.ModchartText = Om;
      Om.__name__ = "ModchartText";
      Om.__super__ = W;
      Om.prototype = q(W.prototype, { __class__: Om });
      var Pm = function (a, b, c) {
        this.disableTime = 6;
        this.parentGroup = b;
        W.call(this, 10, 10, 0, a, 16);
        this.setFormat(
          "assets/fonts/vcr.ttf",
          20,
          c,
          "left",
          Ya.OUTLINE,
          -16777216
        );
        a = this.scrollFactor;
        a.set_x(0);
        a.set_y(0);
        this.set_borderSize(1);
      };
      h.DebugLuaText = Pm;
      Pm.__name__ = "DebugLuaText";
      Pm.__super__ = W;
      Pm.prototype = q(W.prototype, {
        update: function (a) {
          W.prototype.update.call(this, a);
          this.disableTime -= a;
          0 > this.disableTime && (this.disableTime = 0);
          1 > this.disableTime && this.set_alpha(this.disableTime);
        },
        __class__: Pm,
      });
      var tf = function (a) {
        tf.$name = a;
        La.call(this);
        this.set_cameras([g.cameras.list[g.cameras.list.length - 1]]);
      };
      h.CustomSubstate = tf;
      tf.__name__ = "CustomSubstate";
      tf.__super__ = La;
      tf.prototype = q(La.prototype, {
        create: function () {
          tf.instance = this;
          C.instance.callOnLuas("onCustomSubstateCreate", [tf.$name]);
          La.prototype.create.call(this);
          C.instance.callOnLuas("onCustomSubstateCreatePost", [tf.$name]);
        },
        update: function (a) {
          C.instance.callOnLuas("onCustomSubstateUpdate", [tf.$name, a]);
          La.prototype.update.call(this, a);
          C.instance.callOnLuas("onCustomSubstateUpdatePost", [tf.$name, a]);
        },
        destroy: function () {
          C.instance.callOnLuas("onCustomSubstateDestroy", [tf.$name]);
          La.prototype.destroy.call(this);
        },
        __class__: tf,
      });
      var Qo = function () {};
      h.HScript = Qo;
      Qo.__name__ = "HScript";
      var hd = function (a, b, c, d) {
        this.isFollowingAlready = this.isEnding = !1;
        this.stageSuffix = "";
        this.updateCamera = this.playingDeathSound = !1;
        La.call(this);
        C.instance.setOnLuas("inGameOver", !0);
        P.songPosition = 0;
        a = this.boyfriend = new Kh(a, b, hd.characterName);
        a.set_x(a.x + this.boyfriend.positionArray[0]);
        a = this.boyfriend;
        a.set_y(a.y + this.boyfriend.positionArray[1]);
        this.add(this.boyfriend);
        a = this.boyfriend.getGraphicMidpoint().x;
        b = this.boyfriend.getGraphicMidpoint().y;
        null == b && (b = 0);
        null == a && (a = 0);
        this.camFollow = a = new ba(a, b);
        g.sound.play(G.sound(hd.deathSoundName));
        P.changeBPM(100);
        a = g.camera.scroll;
        a.set_x(0);
        a.set_y(0);
        g.camera.target = null;
        this.boyfriend.playAnim("firstDeath");
        this.camFollowPos = new ca(0, 0, 1, 1);
        this.camFollowPos.setPosition(
          g.camera.scroll.x + g.camera.width / 2,
          g.camera.scroll.y + g.camera.height / 2
        );
        this.add(this.camFollowPos);
      };
      h.GameOverSubstate = hd;
      hd.__name__ = "GameOverSubstate";
      hd.resetVariables = function () {
        hd.characterName = "bf-dead";
        hd.deathSoundName = "fnf_loss_sfx";
        hd.loopSoundName = "gameOver";
        hd.endSoundName = "gameOverEnd";
      };
      hd.__super__ = La;
      hd.prototype = q(La.prototype, {
        create: function () {
          hd.instance = this;
          C.instance.callOnLuas("onGameOverStart", []);
          La.prototype.create.call(this);
        },
        update: function (a) {
          var b = this;
          La.prototype.update.call(this, a);
          C.instance.callOnLuas("onUpdate", [a]);
          if (this.updateCamera) {
            var c = Math.max(0, Math.min(1, 0.6 * a)),
              d = this.camFollowPos.x,
              e = this.camFollowPos.y;
            this.camFollowPos.setPosition(
              d + c * (this.camFollow.x - d),
              e + c * (this.camFollow.y - e)
            );
          }
          ia.player1.controls._accept.check() && this.endBullshit();
          ia.player1.controls._back.check() &&
            ((c = g.sound.music),
            c.cleanup(c.autoDestroy, !0),
            (C.deathCounter = 0),
            (C.seenCutscene = !1),
            (C.chartingMode = !1),
            ab.loadTheFirstEnabledMod(),
            C.isStoryMode ? I.switchState(new Ab()) : I.switchState(new rb()),
            (c = g.sound),
            (d = G.returnSound("music", "freakyMenu", null)),
            c.playMusic(d),
            C.instance.callOnLuas("onGameOverConfirm", [!1]));
          null != this.boyfriend.animation._curAnim &&
            "firstDeath" == this.boyfriend.animation._curAnim.name &&
            (12 <= this.boyfriend.animation._curAnim.curFrame &&
              !this.isFollowingAlready &&
              (g.camera.follow(this.camFollowPos, og.LOCKON, 1),
              (this.isFollowingAlready = this.updateCamera = !0)),
            this.boyfriend.animation._curAnim.finished &&
              !this.playingDeathSound &&
              ("tank" == C.SONG.stage
                ? ((this.playingDeathSound = !0),
                  this.coolStartDeath(0.2),
                  g.sound.play(
                    G.sound(
                      "jeffGameover/jeffGameover-" + g.random.int(1, 25, [])
                    ),
                    1,
                    !1,
                    null,
                    !0,
                    function () {
                      if (!b.isEnding) {
                        var a = g.sound.music,
                          c = 0.2,
                          d = 1,
                          e = 4;
                        null == e && (e = 1);
                        null == d && (d = 0);
                        null == c && (c = 1);
                        null == a._channel && a.play();
                        null != a.fadeTween && a.fadeTween.cancel();
                        a.fadeTween = la.num(
                          d,
                          e,
                          c,
                          { onComplete: null },
                          n(a, a.volumeTween)
                        );
                      }
                    }
                  ))
                : this.coolStartDeath(),
              (this.boyfriend.startedDeath = !0)));
          null != g.sound.music._channel &&
            (P.songPosition = g.sound.music._time);
          C.instance.callOnLuas("onUpdatePost", [a]);
        },
        beatHit: function () {
          La.prototype.beatHit.call(this);
        },
        coolStartDeath: function (a) {
          null == a && (a = 1);
          var b = g.sound,
            c = G.returnSound("music", hd.loopSoundName, null);
          b.playMusic(c, a);
        },
        endBullshit: function () {
          if (!this.isEnding) {
            this.isEnding = !0;
            this.boyfriend.playAnim("deathConfirm", !0);
            var a = g.sound.music;
            a.cleanup(a.autoDestroy, !0);
            a = g.sound;
            var b = G.returnSound("music", hd.endSoundName, null);
            a.play(b);
            new fc().start(0.7, function (a) {
              g.camera.fade(-16777216, 2, !1, function () {
                I.resetState();
              });
            });
            C.instance.callOnLuas("onGameOverConfirm", [!0]);
          }
        },
        __class__: hd,
      });
      var sf = function (a, b) {
        null == b && (b = !1);
        null == a && (a = "bf");
        this.iconOffsets = [0, 0];
        this.char = "";
        this.isOldIcon = this.isPlayer = !1;
        F.call(this);
        this.isOldIcon = "bf-old" == a;
        this.isPlayer = b;
        this.changeIcon(a);
        a = this.scrollFactor;
        a.set_x(0);
        a.set_y(0);
      };
      h.HealthIcon = sf;
      sf.__name__ = "HealthIcon";
      sf.__super__ = F;
      sf.prototype = q(F.prototype, {
        update: function (a) {
          F.prototype.update.call(this, a);
          null != this.sprTracker &&
            this.setPosition(
              this.sprTracker.x + this.sprTracker.get_width() + 12,
              this.sprTracker.y - 30
            );
        },
        changeIcon: function (a) {
          if (this.char != a) {
            var b = "icons/" + a;
            aa.exists(G.getPath("images/" + b + ".png", "IMAGE")) ||
              (b = "icons/icon-" + a);
            aa.exists(G.getPath("images/" + b + ".png", "IMAGE")) ||
              (b = "icons/icon-face");
            b = G.returnGraphic(b, null);
            this.loadGraphic(b);
            this.loadGraphic(
              b,
              !0,
              Math.floor(this.get_width() / 2),
              Math.floor(this.get_height())
            );
            this.iconOffsets[0] = (this.get_width() - 150) / 2;
            this.iconOffsets[1] = (this.get_width() - 150) / 2;
            this.updateHitbox();
            this.animation.add(a, [0, 1], 0, !1, this.isPlayer);
            this.animation.play(a);
            this.char = a;
            this.set_antialiasing(y.globalAntialiasing);
            K.endsWith(a, "-pixel") && this.set_antialiasing(!1);
          }
        },
        updateHitbox: function () {
          F.prototype.updateHitbox.call(this);
          this.offset.set_x(this.iconOffsets[0]);
          this.offset.set_y(this.iconOffsets[1]);
        },
        getCharacter: function () {
          return this.char;
        },
        __class__: sf,
      });
      var Sa = function () {};
      h.Highscore = Sa;
      Sa.__name__ = "Highscore";
      Sa.resetSong = function (a, b) {
        null == b && (b = 0);
        a = Sa.formatSong(a, b);
        Sa.setScore(a, 0);
        Sa.setRating(a, 0);
      };
      Sa.resetWeek = function (a, b) {
        null == b && (b = 0);
        a = Sa.formatSong(a, b);
        Sa.setWeekScore(a, 0);
      };
      Sa.floorDecimal = function (a, b) {
        if (1 > b) return Math.floor(a);
        for (var c = 1, d = 0; d < b; ) d++, (c *= 10);
        return Math.floor(a * c) / c;
      };
      Sa.saveScore = function (a, b, c, d) {
        null == d && (d = -1);
        null == c && (c = 0);
        null == b && (b = 0);
        a = Sa.formatSong(a, c);
        Object.prototype.hasOwnProperty.call(Sa.songScores.h, a)
          ? Sa.songScores.h[a] < b &&
            (Sa.setScore(a, b), 0 <= d && Sa.setRating(a, d))
          : (Sa.setScore(a, b), 0 <= d && Sa.setRating(a, d));
      };
      Sa.saveWeekScore = function (a, b, c) {
        null == c && (c = 0);
        null == b && (b = 0);
        a = Sa.formatSong(a, c);
        Object.prototype.hasOwnProperty.call(Sa.weekScores.h, a)
          ? Sa.weekScores.h[a] < b && Sa.setWeekScore(a, b)
          : Sa.setWeekScore(a, b);
      };
      Sa.setScore = function (a, b) {
        Sa.songScores.h[a] = b;
        g.save.data.songScores = Sa.songScores;
        g.save.flush();
      };
      Sa.setWeekScore = function (a, b) {
        Sa.weekScores.h[a] = b;
        g.save.data.weekScores = Sa.weekScores;
        g.save.flush();
      };
      Sa.setRating = function (a, b) {
        Sa.songRating.h[a] = b;
        g.save.data.songRating = Sa.songRating;
        g.save.flush();
      };
      Sa.formatSong = function (a, b) {
        var c = new ya("[~&\\\\;:<>#]", ""),
          d = new ya("[.,'\"%?!]", "");
        a = c.split(K.replace(a, " ", "-")).join("-");
        return d.split(a).join("").toLowerCase() + Ta.getDifficultyFilePath(b);
      };
      Sa.getScore = function (a, b) {
        a = Sa.formatSong(a, b);
        Object.prototype.hasOwnProperty.call(Sa.songScores.h, a) ||
          Sa.setScore(a, 0);
        return Sa.songScores.h[a];
      };
      Sa.getRating = function (a, b) {
        a = Sa.formatSong(a, b);
        Object.prototype.hasOwnProperty.call(Sa.songRating.h, a) ||
          Sa.setRating(a, 0);
        return Sa.songRating.h[a];
      };
      Sa.getWeekScore = function (a, b) {
        a = Sa.formatSong(a, b);
        Object.prototype.hasOwnProperty.call(Sa.weekScores.h, a) ||
          Sa.setWeekScore(a, 0);
        return Sa.weekScores.h[a];
      };
      Sa.load = function () {
        null != g.save.data.weekScores &&
          (Sa.weekScores = g.save.data.weekScores);
        null != g.save.data.songScores &&
          (Sa.songScores = g.save.data.songScores);
        null != g.save.data.songRating &&
          (Sa.songRating = g.save.data.songRating);
      };
      var X = function () {};
      h.HxOverrides = X;
      X.__name__ = "HxOverrides";
      X.strDate = function (a) {
        switch (a.length) {
          case 8:
            a = a.split(":");
            var b = new Date();
            b.setTime(0);
            b.setUTCHours(a[0]);
            b.setUTCMinutes(a[1]);
            b.setUTCSeconds(a[2]);
            return b;
          case 10:
            return (a = a.split("-")), new Date(a[0], a[1] - 1, a[2], 0, 0, 0);
          case 19:
            return (
              (a = a.split(" ")),
              (b = a[0].split("-")),
              (a = a[1].split(":")),
              new Date(b[0], b[1] - 1, b[2], a[0], a[1], a[2])
            );
          default:
            throw N.thrown("Invalid date format : " + a);
        }
      };
      X.cca = function (a, b) {
        a = a.charCodeAt(b);
        if (a == a) return a;
      };
      X.substr = function (a, b, c) {
        if (null == c) c = a.length;
        else if (0 > c)
          if (0 == b) c = a.length + c;
          else return "";
        return a.substr(b, c);
      };
      X.remove = function (a, b) {
        b = a.indexOf(b);
        if (-1 == b) return !1;
        a.splice(b, 1);
        return !0;
      };
      X.now = function () {
        return Date.now();
      };
      var Qm = function () {};
      h.InputFormatter = Qm;
      Qm.__name__ = "InputFormatter";
      Qm.getKeyName = function (a) {
        switch (a) {
          case -1:
            return "---";
          case 8:
            return "BckSpc";
          case 17:
            return "Ctrl";
          case 18:
            return "Alt";
          case 20:
            return "Caps";
          case 33:
            return "PgUp";
          case 34:
            return "PgDown";
          case 48:
            return "0";
          case 49:
            return "1";
          case 50:
            return "2";
          case 51:
            return "3";
          case 52:
            return "4";
          case 53:
            return "5";
          case 54:
            return "6";
          case 55:
            return "7";
          case 56:
            return "8";
          case 57:
            return "9";
          case 96:
            return "#0";
          case 97:
            return "#1";
          case 98:
            return "#2";
          case 99:
            return "#3";
          case 100:
            return "#4";
          case 101:
            return "#5";
          case 102:
            return "#6";
          case 103:
            return "#7";
          case 104:
            return "#8";
          case 105:
            return "#9";
          case 106:
            return "#*";
          case 107:
            return "#+";
          case 109:
            return "#-";
          case 110:
            return "#.";
          case 186:
            return ";";
          case 188:
            return ",";
          case 190:
            return ".";
          case 192:
            return "`";
          case 219:
            return "[";
          case 221:
            return "]";
          case 222:
            return "'";
          case 301:
            return "PrtScrn";
          default:
            return (
              (a = "" + (null == a ? "null" : qo.toStringMap.h[a])),
              "null" == a.toLowerCase()
                ? "---"
                : "" +
                  a.charAt(0).toUpperCase() +
                  X.substr(a, 1, null).toLowerCase()
            );
        }
      };
      var ro = function (a, b) {
        this.min = a;
        this.max = b;
      };
      h.IntIterator = ro;
      ro.__name__ = "IntIterator";
      ro.prototype = {
        hasNext: function () {
          return this.min < this.max;
        },
        next: function () {
          return this.min++;
        },
        __class__: ro,
      };
      var Rm = function () {};
      h.Lambda = Rm;
      Rm.__name__ = "Lambda";
      Rm.array = function (a) {
        var b = [];
        for (a = T(a); a.hasNext(); ) {
          var c = a.next();
          b.push(c);
        }
        return b;
      };
      var Lb = function (a, b, c) {
        this.targetShit = 0;
        this.stopMusic = !1;
        I.call(this);
        this.target = a;
        this.stopMusic = b;
        this.directory = c;
      };
      h.LoadingState = Lb;
      Lb.__name__ = "LoadingState";
      Lb.getSongPath = function () {
        return (
          "songs:assets/songs/" +
          K.replace(C.SONG.song.toLowerCase(), " ", "-") +
          "/Inst.mp3"
        );
      };
      Lb.getVocalPath = function () {
        return (
          "songs:assets/songs/" +
          K.replace(C.SONG.song.toLowerCase(), " ", "-") +
          "/Voices.mp3"
        );
      };
      Lb.loadAndSwitchState = function (a, b) {
        null == b && (b = !1);
        I.switchState(Lb.getNextState(a, b));
      };
      Lb.getNextState = function (a, b) {
        null == b && (b = !1);
        var c = "shared",
          d = pg.forceNextDirectory;
        pg.forceNextDirectory = null;
        null != d && 0 < d.length && "" != d && (c = d);
        G.setCurrentLevel(c);
        wb.trace("Setting asset folder to " + c, {
          fileName: "source/LoadingState.hx",
          lineNumber: 167,
          className: "LoadingState",
          methodName: "getNextState",
        });
        d = !1;
        null != C.SONG &&
          (d =
            Lb.isSoundLoaded(Lb.getSongPath()) &&
            (!C.SONG.needsVoices || Lb.isSoundLoaded(Lb.getVocalPath())) &&
            Lb.isLibraryLoaded("shared") &&
            Lb.isLibraryLoaded(c));
        if (!d) return new Lb(a, b, c);
        b &&
          null != g.sound.music &&
          ((b = g.sound.music), b.cleanup(b.autoDestroy, !0));
        return a;
      };
      Lb.isSoundLoaded = function (a) {
        return aa.cache.hasSound(a);
      };
      Lb.isLibraryLoaded = function (a) {
        return null != aa.getLibrary(a);
      };
      Lb.initSongsManifest = function () {
        var a = new Gd(),
          b = ra.getLibrary("songs");
        if (null != b) return Ua.withValue(b);
        b = "songs";
        var c = null;
        c = ra.libraryPaths;
        Object.prototype.hasOwnProperty.call(c.h, "songs")
          ? ((b = c.h.songs), (c = Hd.directory(b)))
          : (K.endsWith(b, ".bundle")
              ? ((c = b), (b += "/library.json"))
              : (c = Hd.directory(b)),
            (b = ra.__cacheBreak(b)));
        Pd.loadFromFile(b, c)
          .onComplete(function (b) {
            null == b
              ? a.error('Cannot parse asset manifest for library "songs"')
              : ((b = Wb.fromManifest(b)),
                null == b
                  ? a.error('Cannot open library "songs"')
                  : ((ra.libraries.h.songs = b),
                    b.onChange.add(((x = ra.onChange), n(x, x.dispatch))),
                    a.completeWith(Ua.withValue(b))));
          })
          .onError(function (b) {
            a.error('There is no asset library with an ID of "songs"');
          });
        return a.future;
      };
      Lb.__super__ = I;
      Lb.prototype = q(I.prototype, {
        create: function () {
          var a = this,
            b = new F(0, 0).makeGraphic(g.width, g.height, -3473587);
          this.add(b);
          this.funkay = new F(0, 0).loadGraphic(
            G.getPath("images/funkay.png", "IMAGE")
          );
          this.funkay.setGraphicSize(0, g.height);
          this.funkay.updateHitbox();
          this.funkay.set_antialiasing(y.globalAntialiasing);
          this.add(this.funkay);
          b = this.funkay.scrollFactor;
          b.set_x(0);
          b.set_y(0);
          b = this.funkay;
          b.set_x((g.width - b.get_width()) / 2);
          b.set_y((g.height - b.get_height()) / 2);
          b = this.loadBar = new F(0, g.height - 20).makeGraphic(
            g.width,
            10,
            -59694
          );
          var c = 1;
          null == c && (c = 17);
          (1 != c && 17 != c) || b.set_x((g.width - b.get_width()) / 2);
          (16 != c && 17 != c) || b.set_y((g.height - b.get_height()) / 2);
          this.loadBar.set_antialiasing(y.globalAntialiasing);
          this.add(this.loadBar);
          Lb.initSongsManifest().onComplete(function (b) {
            a.callbacks = new Sm(n(a, a.onLoad));
            var c = a.callbacks.add("introComplete");
            null != C.SONG &&
              (a.checkLoadSong(Lb.getSongPath()),
              C.SONG.needsVoices && a.checkLoadSong(Lb.getVocalPath()));
            a.checkLibrary("shared");
            null != a.directory &&
              0 < a.directory.length &&
              "shared" != a.directory &&
              a.checkLibrary(a.directory);
            g.camera.fade(g.camera.bgColor, 0.5, !0);
            new fc().start(1.5, function (a) {
              c();
            });
          });
        },
        checkLoadSong: function (a) {
          if (!aa.cache.hasSound(a)) {
            aa.getLibrary("songs");
            a.split(":").pop();
            var b = this.callbacks.add("song:" + a);
            aa.loadSound(a).onComplete(function (a) {
              b();
            });
          }
        },
        checkLibrary: function (a) {
          wb.trace(aa.hasLibrary(a), {
            fileName: "source/LoadingState.hx",
            lineNumber: 101,
            className: "LoadingState",
            methodName: "checkLibrary",
          });
          if (null == aa.getLibrary(a)) {
            if (!Object.prototype.hasOwnProperty.call(ra.libraryPaths.h, a))
              throw N.thrown("Missing library: " + a);
            var b = this.callbacks.add("library:" + a);
            aa.loadLibrary(a).onComplete(function (a) {
              b();
            });
          }
        },
        update: function (a) {
          I.prototype.update.call(this, a);
          this.funkay.setGraphicSize(
            (0.88 * g.width +
              0.9 * (this.funkay.get_width() - 0.88 * g.width)) |
              0
          );
          this.funkay.updateHitbox();
          ia.player1.controls._accept.check() &&
            (this.funkay.setGraphicSize((this.funkay.get_width() + 60) | 0),
            this.funkay.updateHitbox());
          null != this.callbacks &&
            ((this.targetShit = hc.remapToRange(
              this.callbacks.numRemaining / this.callbacks.length,
              1,
              0,
              0,
              1
            )),
            (a = this.loadBar),
            a.scale.set_x(
              a.scale.x + 0.5 * (this.targetShit - this.loadBar.scale.x)
            ));
        },
        onLoad: function () {
          if (this.stopMusic && null != g.sound.music) {
            var a = g.sound.music;
            a.cleanup(a.autoDestroy, !0);
          }
          I.switchState(this.target);
        },
        destroy: function () {
          I.prototype.destroy.call(this);
          this.callbacks = null;
        },
        __class__: Lb,
      });
      var Sm = function (a, b) {
        this.fired = [];
        this.unfired = new Q();
        this.length = this.numRemaining = 0;
        this.logId = null;
        this.callback = a;
        this.logId = b;
      };
      h.MultiCallback = Sm;
      Sm.__name__ = "MultiCallback";
      Sm.prototype = {
        add: function (a) {
          null == a && (a = "untitled");
          var b = this;
          a = "" + this.length + ":" + a;
          this.length++;
          this.numRemaining++;
          var c = null;
          c = function () {
            if (Object.prototype.hasOwnProperty.call(b.unfired.h, a)) {
              var c = b.unfired;
              Object.prototype.hasOwnProperty.call(c.h, a) && delete c.h[a];
              b.fired.push(a);
              b.numRemaining--;
              null != b.logId &&
                null != b.logId &&
                wb.trace(
                  "" +
                    b.logId +
                    ": fired " +
                    (a + ", " + b.numRemaining + " remaining"),
                  {
                    fileName: "source/LoadingState.hx",
                    lineNumber: 324,
                    className: "MultiCallback",
                    methodName: "log",
                  }
                );
              0 == b.numRemaining &&
                (null != b.logId &&
                  null != b.logId &&
                  wb.trace("" + b.logId + ": all callbacks fired", {
                    fileName: "source/LoadingState.hx",
                    lineNumber: 324,
                    className: "MultiCallback",
                    methodName: "log",
                  }),
                b.callback());
            } else
              null != b.logId &&
                wb.trace("" + b.logId + ": already fired " + a, {
                  fileName: "source/LoadingState.hx",
                  lineNumber: 324,
                  className: "MultiCallback",
                  methodName: "log",
                });
          };
          return (this.unfired.h[a] = c);
        },
        __class__: Sm,
      };
      var zc = function (a, b) {
        this.selectedSomethin = !1;
        this.optionShit = ["freeplay", "credits", "options"];
        I.call(this, a, b);
      };
      h.MainMenuState = zc;
      zc.__name__ = "MainMenuState";
      zc.__super__ = I;
      zc.prototype = q(I.prototype, {
        create: function () {
          ab.loadTheFirstEnabledMod();
          this.debugKeys = y.copyKey(y.keyBinds.h.debug_1);
          this.camGame = new Ob();
          this.camAchievement = new Ob();
          this.camAchievement.bgColor &= 16777215;
          this.camAchievement.bgColor |= 0;
          g.cameras.reset(this.camGame);
          g.cameras.add(this.camAchievement, !1);
          g.cameras.setDefaultDrawTarget(this.camGame, !0);
          this.transIn = Z.defaultTransIn;
          this.transOut = Z.defaultTransOut;
          this.persistentUpdate = this.persistentDraw = !0;
          var a = Math.max(0.25 - 0.05 * (this.optionShit.length - 4), 0.1),
            b = new F(-80),
            c = G.returnGraphic("menuBG", null);
          b = b.loadGraphic(c);
          c = b.scrollFactor;
          var d = 0,
            e = a;
          null == e && (e = 0);
          null == d && (d = 0);
          c.set_x(d);
          c.set_y(e);
          b.setGraphicSize((1.175 * b.get_width()) | 0);
          b.updateHitbox();
          b.set_x((g.width - b.get_width()) / 2);
          b.set_y((g.height - b.get_height()) / 2);
          b.set_antialiasing(y.globalAntialiasing);
          this.camFollow = new ca(0, 0, 1, 1);
          this.camFollowPos = new ca(0, 0, 1, 1);
          this.add(this.camFollow);
          this.add(this.camFollowPos);
          this.menuItems = new ma();
          this.add(this.menuItems);
          a = 0;
          for (b = this.optionShit.length; a < b; ) {
            d = a++;
            var f = new F(
              0,
              140 * d + (108 - 80 * (Math.max(this.optionShit.length, 4) - 4))
            );
            f.scale.set_x(1);
            f.scale.set_y(1);
            e = "mainmenu/menu_" + this.optionShit[d];
            c = G.returnGraphic(e, null);
            f.set_frames(
              jb.fromSparrow(c, G.getPath("images/" + e + ".xml", "TEXT", null))
            );
            f.animation.addByPrefix("idle", this.optionShit[d] + " basic", 24);
            f.animation.addByPrefix(
              "selected",
              this.optionShit[d] + " white",
              24
            );
            f.animation.play("idle");
            f.ID = d;
            c = 1;
            null == c && (c = 17);
            (1 != c && 17 != c) || f.set_x((g.width - f.get_width()) / 2);
            (16 != c && 17 != c) || f.set_y((g.height - f.get_height()) / 2);
            this.menuItems.add(f);
            e = 0.135 * (this.optionShit.length - 4);
            6 > this.optionShit.length && (e = 0);
            c = f.scrollFactor;
            d = 0;
            null == e && (e = 0);
            null == d && (d = 0);
            c.set_x(d);
            c.set_y(e);
            f.set_antialiasing(y.globalAntialiasing);
            f.updateHitbox();
          }
          g.camera.follow(this.camFollowPos, null, 1);
          a = new F(5, g.height - 80);
          c = G.returnGraphic("wwwwwww", null);
          a = a.loadGraphic(c);
          c = a.scrollFactor;
          e = d = 0;
          null == e && (e = 0);
          null == d && (d = 0);
          c.set_x(d);
          c.set_y(e);
          a.setGraphicSize((0.7 * a.get_width()) | 0);
          a.updateHitbox();
          a.set_antialiasing(y.globalAntialiasing);
          this.add(a);
          a = new W(
            110,
            g.height - 64,
            0,
            "Psych Engine v" + zc.psychEngineVersion,
            12
          );
          c = a.scrollFactor;
          c.set_x(0);
          c.set_y(0);
          a.setFormat("VCR OSD Mono", 16, -1, "left", Ya.OUTLINE, -16777216);
          this.add(a);
          a = new W(
            110,
            g.height - 44,
            0,
            "Friday Night Funkin' v" + B.current.meta.h.version,
            12
          );
          c = a.scrollFactor;
          c.set_x(0);
          c.set_y(0);
          a.setFormat("VCR OSD Mono", 16, -1, "left", Ya.OUTLINE, -16777216);
          this.add(a);
          a = new W(110, g.height - 24, 0, "", 12);
          c = a.scrollFactor;
          c.set_x(0);
          c.set_y(0);
          a.setFormat("VCR OSD Mono", 16, -1, "left", Ya.OUTLINE, -16777216);
          this.add(a);
          this.changeItem();
          I.prototype.create.call(this);
        },
        update: function (a) {
          var b = this;
          if (0.8 > g.sound.music._volume) {
            var c = g.sound.music;
            c.set_volume(c._volume + 0.5 * g.elapsed);
            null != rb.vocals &&
              ((c = rb.vocals), c.set_volume(c._volume + 0.5 * a));
          }
          c = Math.max(0, Math.min(1, 7.5 * a));
          var d = this.camFollowPos.x,
            e = this.camFollowPos.y;
          this.camFollowPos.setPosition(
            d + c * (this.camFollow.x - d),
            e + c * (this.camFollow.y - e)
          );
          this.selectedSomethin ||
            (ia.player1.controls._ui_upP.check() &&
              (g.sound.play(G.sound("scrollMenu")), this.changeItem(-1)),
            ia.player1.controls._ui_downP.check() &&
              (g.sound.play(G.sound("scrollMenu")), this.changeItem(1)),
            ia.player1.controls._back.check() &&
              ((this.selectedSomethin = !0),
              g.sound.play(G.sound("cancelMenu")),
              I.switchState(new cb())),
            ia.player1.controls._accept.check() &&
              ("donate" == this.optionShit[zc.curSelected]
                ? Ta.browserLoad("https://ninja-muffin24.itch.io/funkin")
                : ((this.selectedSomethin = !0),
                  g.sound.play(G.sound("confirmMenu")),
                  this.menuItems.forEach(function (a) {
                    zc.curSelected != a.ID
                      ? la.tween(a, { alpha: 0 }, 0.4, {
                          ease: Aa.quadOut,
                          onComplete: function (b) {
                            a.kill();
                          },
                        })
                      : ed.flicker(a, 1, 0.06, !1, !1, function (a) {
                          switch (b.optionShit[zc.curSelected]) {
                            case "awards":
                              I.switchState(new Oc());
                              break;
                            case "credits":
                              I.switchState(new ek());
                              break;
                            case "freeplay":
                              I.switchState(new rb());
                              break;
                            case "options":
                              I.switchState(Lb.getNextState(new me(), !1));
                              break;
                            case "story_mode":
                              I.switchState(new Ab());
                          }
                        });
                  }))));
          I.prototype.update.call(this, a);
          this.menuItems.forEach(function (a) {
            var b = 1;
            null == b && (b = 17);
            (1 != b && 17 != b) || a.set_x((g.width - a.get_width()) / 2);
            (16 != b && 17 != b) || a.set_y((g.height - a.get_height()) / 2);
          });
        },
        changeItem: function (a) {
          null == a && (a = 0);
          var b = this;
          zc.curSelected += a;
          zc.curSelected >= this.menuItems.length && (zc.curSelected = 0);
          0 > zc.curSelected && (zc.curSelected = this.menuItems.length - 1);
          this.menuItems.forEach(function (a) {
            a.animation.play("idle");
            a.updateHitbox();
            if (a.ID == zc.curSelected) {
              a.animation.play("selected");
              var c = 0;
              4 < b.menuItems.length && (c = 8 * b.menuItems.length);
              b.camFollow.setPosition(
                a.getGraphicMidpoint().x,
                a.getGraphicMidpoint().y - c
              );
              a.centerOffsets();
            }
          });
        },
        __class__: zc,
      });
      var Qc = function () {};
      h.ManifestResources = Qc;
      Qc.__name__ = "ManifestResources";
      Qc.init = function (a) {
        Qc.preloadLibraries = [];
        Qc.preloadLibraryNames = [];
        Qc.rootPath = null;
        null != a &&
          Object.prototype.hasOwnProperty.call(a, "rootPath") &&
          ((Qc.rootPath = qa.field(a, "rootPath")),
          K.endsWith(Qc.rootPath, "/") || (Qc.rootPath += "/"));
        null == Qc.rootPath && (Qc.rootPath = "./");
        Sb.registerFont(nk);
        Sb.registerFont(ok);
        Sb.registerFont(pk);
        Sb.registerFont(qk);
        a = Qc.rootPath + "manifest/videos.json";
        ra.libraryPaths.h.videos = a;
        a = Qc.rootPath + "manifest/songs.json";
        ra.libraryPaths.h.songs = a;
        a = Qc.rootPath + "manifest/shared.json";
        ra.libraryPaths.h.shared = a;
        a = Pd.parse(
          '{"name":null,"assets":"aoy4:pathy34:assets%2Fcharacters%2Fbf-dead.jsony4:sizei709y4:typey4:TEXTy2:idR1y7:preloadtgoR0y29:assets%2Fcharacters%2Fbf.jsonR2i2467R3R4R5R7R6tgoR0y30:assets%2Fcharacters%2Fdad.jsonR2i1762R3R4R5R8R6tgoR0y32:assets%2Fcharacters%2Fdaddy.jsonR2i954R3R4R5R9R6tgoR0y31:assets%2Fcharacters%2Fdetg.jsonR2i980R3R4R5R10R6tgoR0y45:assets%2Fcharacters%2Fdoes-bad-thing-guy.jsonR2i1033R3R4R5R11R6tgoR0y29:assets%2Fcharacters%2Fgf.jsonR2i2326R3R4R5R12R6tgoR0y36:assets%2Fcharacters%2Finvisible.jsonR2i2335R3R4R5R13R6tgoR0y33:assets%2Fcharacters%2Fmarvin.jsonR2i1527R3R4R5R14R6tgoR0y32:assets%2Fcharacters%2Freadme.txtR2i43R3R4R5R15R6tgoR0y31:assets%2Fcharacters%2Frose.jsonR2i1008R3R4R5R16R6tgoR0y34:assets%2Fcharacters%2FroseRTX.jsonR2i983R3R4R5R17R6tgoR0y33:assets%2Fdata%2FcharacterList.txtR2i9R3R4R5R18R6tgoR0y34:assets%2Fdata%2Fdata-goes-here.txtR2zR3R4R5R19R6tgoR0y34:assets%2Fdata%2FfreeplayColors.txtR2i76R3R4R5R20R6tgoR0y29:assets%2Fdata%2FintroText.txtR2i2252R3R4R5R21R6tgoR0y29:assets%2Fdata%2Fmain-view.xmlR2i123R3R4R5R22R6tgoR0y26:assets%2Fdata%2Freadme.txtR2i27R3R4R5R23R6tgoR0y47:assets%2Fdata%2Fshucks-v2%2Fshucks-v2-hard.jsonR2i262444R3R4R5R24R6tgoR0y33:assets%2Fdata%2FspecialThanks.txtR2i300R3R4R5R25R6tgoR0y29:assets%2Fdata%2FstageList.txtR2i5R3R4R5R26R6tgoR0y45:assets%2Fimages%2Fachievements%2Fdebugger.pngR2i5061R3y5:IMAGER5R27R6tgoR0y54:assets%2Fimages%2Fachievements%2Ffriday_night_play.pngR2i4848R3R28R5R29R6tgoR0y41:assets%2Fimages%2Fachievements%2Fhype.pngR2i9206R3R28R5R30R6tgoR0y54:assets%2Fimages%2Fachievements%2Flockedachievement.pngR2i1709R3R28R5R31R6tgoR0y48:assets%2Fimages%2Fachievements%2Foversinging.pngR2i8691R3R28R5R32R6tgoR0y56:assets%2Fimages%2Fachievements%2Froadkill_enthusiast.pngR2i4731R3R28R5R33R6tgoR0y44:assets%2Fimages%2Fachievements%2Ftoastie.pngR2i3094R3R28R5R34R6tgoR0y45:assets%2Fimages%2Fachievements%2Ftwo_keys.pngR2i11315R3R28R5R35R6tgoR0y43:assets%2Fimages%2Fachievements%2Fur_bad.pngR2i9450R3R28R5R36R6tgoR0y44:assets%2Fimages%2Fachievements%2Fur_good.pngR2i3467R3R28R5R37R6tgoR0y49:assets%2Fimages%2Fachievements%2Fweek1_nomiss.pngR2i9146R3R28R5R38R6tgoR0y49:assets%2Fimages%2Fachievements%2Fweek2_nomiss.pngR2i5933R3R28R5R39R6tgoR0y49:assets%2Fimages%2Fachievements%2Fweek3_nomiss.pngR2i9542R3R28R5R40R6tgoR0y49:assets%2Fimages%2Fachievements%2Fweek4_nomiss.pngR2i7202R3R28R5R41R6tgoR0y49:assets%2Fimages%2Fachievements%2Fweek5_nomiss.pngR2i8966R3R28R5R42R6tgoR0y49:assets%2Fimages%2Fachievements%2Fweek6_nomiss.pngR2i552R3R28R5R43R6tgoR0y49:assets%2Fimages%2Fachievements%2Fweek7_nomiss.pngR2i4813R3R28R5R44R6tgoR0y30:assets%2Fimages%2Falphabet.pngR2i93997R3R28R5R45R6tgoR0y30:assets%2Fimages%2Falphabet.xmlR2i57385R3R4R5R46R6tgoR0y45:assets%2Fimages%2Fcampaign_menu_UI_assets.pngR2i3044R3R28R5R47R6tgoR0y45:assets%2Fimages%2Fcampaign_menu_UI_assets.xmlR2i597R3R4R5R48R6tgoR0y44:assets%2Fimages%2Fcharacters%2FBOYFRIEND.pngR2i790309R3R28R5R49R6tgoR0y44:assets%2Fimages%2Fcharacters%2FBOYFRIEND.xmlR2i52069R3R4R5R50R6tgoR0y49:assets%2Fimages%2Fcharacters%2FBOYFRIEND_DEAD.pngR2i684424R3R28R5R51R6tgoR0y49:assets%2Fimages%2Fcharacters%2FBOYFRIEND_DEAD.xmlR2i15438R3R4R5R52R6tgoR0y55:assets%2Fimages%2Fcharacters%2FdoesEVILthingsguyRTX.pngR2i2665694R3R28R5R53R6tgoR0y55:assets%2Fimages%2Fcharacters%2FdoesEVILthingsguyRTX.xmlR2i8173R3R4R5R54R6tgoR0y54:assets%2Fimages%2Fcharacters%2Fdoes_bad_things_guy.pngR2i3055700R3R28R5R55R6tgoR0y54:assets%2Fimages%2Fcharacters%2Fdoes_bad_things_guy.xmlR2i3677R3R4R5R56R6tgoR0y44:assets%2Fimages%2Fcharacters%2FGF_assets.pngR2i394704R3R28R5R57R6tgoR0y44:assets%2Fimages%2Fcharacters%2FGF_assets.xmlR2i7285R3R4R5R58R6tgoR0y46:assets%2Fimages%2Fcharacters%2FmarmvipsRTX.pngR2i798657R3R28R5R59R6tgoR0y46:assets%2Fimages%2Fcharacters%2FmarmvipsRTX.xmlR2i9266R3R4R5R60R6tgoR0y41:assets%2Fimages%2Fcharacters%2Fmarvin.pngR2i640495R3R28R5R61R6tgoR0y41:assets%2Fimages%2Fcharacters%2Fmarvin.xmlR2i8306R3R4R5R62R6tgoR0y39:assets%2Fimages%2Fcharacters%2Frose.pngR2i1610148R3R28R5R63R6tgoR0y39:assets%2Fimages%2Fcharacters%2Frose.xmlR2i3022R3R4R5R64R6tgoR0y42:assets%2Fimages%2Fcharacters%2FRoseRTX.pngR2i78743R3R28R5R65R6tgoR0y42:assets%2Fimages%2Fcharacters%2FRoseRTX.xmlR2i761R3R4R5R66R6tgoR0y33:assets%2Fimages%2Fchart_quant.pngR2i2666R3R28R5R67R6tgoR0y33:assets%2Fimages%2Fchart_quant.xmlR2i1028R3R4R5R68R6tgoR0y34:assets%2Fimages%2Fcheckboxanim.pngR2i16546R3R28R5R69R6tgoR0y34:assets%2Fimages%2Fcheckboxanim.xmlR2i1976R3R4R5R70R6tgoR0y34:assets%2Fimages%2Fcredits%2Fbb.pngR2i3573R3R28R5R71R6tgoR0y39:assets%2Fimages%2Fcredits%2Fdiscord.pngR2i1510R3R28R5R72R6tgoR0y40:assets%2Fimages%2Fcredits%2Fevilsk8r.pngR2i4397R3R28R5R73R6tgoR0y38:assets%2Fimages%2Fcredits%2Fflicky.pngR2i3889R3R28R5R74R6tgoR0y36:assets%2Fimages%2Fcredits%2Fkade.pngR2i5550R3R28R5R75R6tgoR0y43:assets%2Fimages%2Fcredits%2Fkawaisprite.pngR2i2854R3R28R5R76R6tgoR0y38:assets%2Fimages%2Fcredits%2Fkeoiki.pngR2i3917R3R28R5R77R6tgoR0y42:assets%2Fimages%2Fcredits%2Fmastereric.pngR2i4704R3R28R5R78R6tgoR0y38:assets%2Fimages%2Fcredits%2Fnebula.pngR2i4007R3R28R5R79R6tgoR0y45:assets%2Fimages%2Fcredits%2Fninjamuffin99.pngR2i3652R3R28R5R80R6tgoR0y45:assets%2Fimages%2Fcredits%2Fphantomarcade.pngR2i4968R3R28R5R81R6tgoR0y37:assets%2Fimages%2Fcredits%2Fproxy.pngR2i4409R3R28R5R82R6tgoR0y37:assets%2Fimages%2Fcredits%2Friver.pngR2i4605R3R28R5R83R6tgoR0y43:assets%2Fimages%2Fcredits%2Fshadowmario.pngR2i3679R3R28R5R84R6tgoR0y37:assets%2Fimages%2Fcredits%2Fshubs.pngR2i4618R3R28R5R85R6tgoR0y38:assets%2Fimages%2Fcredits%2Fsmokey.pngR2i5213R3R28R5R86R6tgoR0y38:assets%2Fimages%2Fcredits%2Fsqirra.pngR2i4518R3R28R5R87R6tgoR0y34:assets%2Fimages%2Fcry_about_it.pngR2i79388R3R28R5R88R6tgoR0y36:assets%2Fimages%2Fdialogue%2Fbf.jsonR2i987R3R4R5R89R6tgoR0y36:assets%2Fimages%2Fdialogue%2Fgf.jsonR2i807R3R4R5R90R6tgoR0y39:assets%2Fimages%2Fdialogue%2Freadme.txtR2i189R3R4R5R91R6tgoR0y28:assets%2Fimages%2Ffunkay.pngR2i96575R3R28R5R92R6tgoR0y35:assets%2Fimages%2FgfDanceTitle.jsonR2i124R3R4R5R93R6tgoR0y41:assets%2Fimages%2Ficons%2Ficon-bf-old.pngR2i4101R3R28R5R94R6tgoR0y37:assets%2Fimages%2Ficons%2Ficon-bf.pngR2i8724R3R28R5R95R6tgoR0y39:assets%2Fimages%2Ficons%2Ficon-dady.pngR2i3360R3R28R5R96R6tgoR0y39:assets%2Fimages%2Ficons%2Ficon-dbtg.pngR2i17864R3R28R5R97R6tgoR0y39:assets%2Fimages%2Ficons%2Ficon-face.pngR2i3549R3R28R5R98R6tgoR0y37:assets%2Fimages%2Ficons%2Ficon-gf.pngR2i6437R3R28R5R99R6tgoR0y41:assets%2Fimages%2Ficons%2Ficon-marvin.pngR2i16392R3R28R5R100R6tgoR0y36:assets%2Fimages%2Ficons%2Freadme.txtR2i142R3R4R5R101R6tgoR0y26:assets%2Fimages%2Flogo.pngR2i29909R3R28R5R102R6tgoR0y32:assets%2Fimages%2FlogoBumpin.pngR2i197471R3R28R5R103R6tgoR0y32:assets%2Fimages%2FlogoBumpin.xmlR2i2177R3R4R5R104R6tgoR0y44:assets%2Fimages%2Fmainmenu%2Fmenu_awards.pngR2i28858R3R28R5R105R6tgoR0y44:assets%2Fimages%2Fmainmenu%2Fmenu_awards.xmlR2i1380R3R4R5R106R6tgoR0y45:assets%2Fimages%2Fmainmenu%2Fmenu_credits.pngR2i28734R3R28R5R107R6tgoR0y45:assets%2Fimages%2Fmainmenu%2Fmenu_credits.xmlR2i1385R3R4R5R108R6tgoR0y44:assets%2Fimages%2Fmainmenu%2Fmenu_donate.pngR2i24842R3R28R5R109R6tgoR0y44:assets%2Fimages%2Fmainmenu%2Fmenu_donate.xmlR2i1375R3R4R5R110R6tgoR0y46:assets%2Fimages%2Fmainmenu%2Fmenu_freeplay.pngR2i30316R3R28R5R111R6tgoR0y46:assets%2Fimages%2Fmainmenu%2Fmenu_freeplay.xmlR2i1399R3R4R5R112R6tgoR0y42:assets%2Fimages%2Fmainmenu%2Fmenu_mods.pngR2i22741R3R28R5R113R6tgoR0y42:assets%2Fimages%2Fmainmenu%2Fmenu_mods.xmlR2i1644R3R4R5R114R6tgoR0y45:assets%2Fimages%2Fmainmenu%2Fmenu_options.pngR2i27299R3R28R5R115R6tgoR0y45:assets%2Fimages%2Fmainmenu%2Fmenu_options.xmlR2i1332R3R4R5R116R6tgoR0y48:assets%2Fimages%2Fmainmenu%2Fmenu_story_mode.pngR2i54659R3R28R5R117R6tgoR0y48:assets%2Fimages%2Fmainmenu%2Fmenu_story_mode.xmlR2i1444R3R4R5R118R6tgoR0y50:assets%2Fimages%2Fmenubackgrounds%2Fmenu_stage.pngR2i21287R3R28R5R119R6tgoR0y46:assets%2Fimages%2Fmenubackgrounds%2Freadme.txtR2i61R3R4R5R120R6tgoR0y28:assets%2Fimages%2FmenuBG.pngR2i261484R3R28R5R121R6tgoR0y32:assets%2Fimages%2FmenuBGBlue.pngR2i260857R3R28R5R122R6tgoR0y35:assets%2Fimages%2FmenuBGMagenta.pngR2i261090R3R28R5R123R6tgoR0y42:assets%2Fimages%2Fmenucharacters%2Fbf.jsonR2i125R3R4R5R124R6tgoR0y43:assets%2Fimages%2Fmenucharacters%2Fdad.jsonR2i126R3R4R5R125R6tgoR0y42:assets%2Fimages%2Fmenucharacters%2Fgf.jsonR2i125R3R4R5R126R6tgoR0y46:assets%2Fimages%2Fmenucharacters%2FMenu_BF.pngR2i90275R3R28R5R127R6tgoR0y46:assets%2Fimages%2Fmenucharacters%2FMenu_BF.xmlR2i5582R3R4R5R128R6tgoR0y47:assets%2Fimages%2Fmenucharacters%2FMenu_Dad.pngR2i43974R3R28R5R129R6tgoR0y47:assets%2Fimages%2Fmenucharacters%2FMenu_Dad.xmlR2i2115R3R4R5R130R6tgoR0y46:assets%2Fimages%2Fmenucharacters%2FMenu_GF.pngR2i107215R3R28R5R131R6tgoR0y46:assets%2Fimages%2Fmenucharacters%2FMenu_GF.xmlR2i3802R3R4R5R132R6tgoR0y45:assets%2Fimages%2Fmenucharacters%2Freadme.txtR2i35R3R4R5R133R6tgoR0y31:assets%2Fimages%2FmenuDesat.pngR2i215613R3R28R5R134R6tgoR0y45:assets%2Fimages%2Fmenudifficulties%2Feasy.pngR2i1782R3R28R5R135R6tgoR0y45:assets%2Fimages%2Fmenudifficulties%2Fhard.pngR2i1956R3R28R5R136R6tgoR0y47:assets%2Fimages%2Fmenudifficulties%2Fnormal.pngR2i2584R3R28R5R137R6tgoR0y33:assets%2Fimages%2FMenu_Tracks.pngR2i1254R3R28R5R138R6tgoR0y37:assets%2Fimages%2Fnewgrounds_logo.pngR2i22682R3R28R5R139R6tgoR0y26:assets%2Fimages%2Fnum0.pngR2i1816R3R28R5R140R6tgoR0y26:assets%2Fimages%2Fnum1.pngR2i1639R3R28R5R141R6tgoR0y26:assets%2Fimages%2Fnum2.pngR2i1985R3R28R5R142R6tgoR0y26:assets%2Fimages%2Fnum3.pngR2i1990R3R28R5R143R6tgoR0y26:assets%2Fimages%2Fnum4.pngR2i1955R3R28R5R144R6tgoR0y26:assets%2Fimages%2Fnum5.pngR2i2023R3R28R5R145R6tgoR0y26:assets%2Fimages%2Fnum6.pngR2i2082R3R28R5R146R6tgoR0y26:assets%2Fimages%2Fnum7.pngR2i1881R3R28R5R147R6tgoR0y26:assets%2Fimages%2Fnum8.pngR2i2024R3R28R5R148R6tgoR0y26:assets%2Fimages%2Fnum9.pngR2i1851R3R28R5R149R6tgoR0y25:assets%2Fimages%2Fred.pngR2i223R3R28R5R150R6tgoR0y27:assets%2Fimages%2FRedVG.pngR2i133613R3R28R5R151R6tgoR0y31:assets%2Fimages%2Fshuckback.pngR2i4721518R3R28R5R152R6tgoR0y32:assets%2Fimages%2Fshuckfront.pngR2i1924993R3R28R5R153R6tgoR0y29:assets%2Fimages%2Fwwwwwww.pngR2i4191R3R28R5R154R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek1.pngR2i3482R3R28R5R155R6tgoR0y32:assets%2Fimages%2FtitleEnter.pngR2i26291R3R28R5R156R6tgoR0y32:assets%2Fimages%2FtitleEnter.xmlR2i518R3R4R5R157R6tgoR0y32:assets%2Fimages%2FunknownMod.pngR2i2387R3R28R5R158R6tgoR0y27:assets%2Fimages%2Fwhite.pngR2i223R3R28R5R159R6tgoR2i1380445R3y5:MUSICR5y30:assets%2Fmusic%2Fbreakfast.mp3y9:pathGroupaR161hR6tgoR2i2359131R3R160R5y31:assets%2Fmusic%2FfreakyMenu.mp3R162aR163hR6tgoR2i879230R3R160R5y29:assets%2Fmusic%2FgameOver.mp3R162aR164hR6tgoR2i132260R3R160R5y32:assets%2Fmusic%2FgameOverEnd.mp3R162aR165hR6tgoR2i1288573R3R160R5y31:assets%2Fmusic%2FoffsetSong.mp3R162aR166hR6tgoR2i5304717R3R160R5y29:assets%2Fmusic%2Ftea-time.mp3R162aR167hR6tgoR2i3285R3R160R5y27:assets%2Fsounds%2FANGRY.mp3R162aR168hR6tgoR2i38016R3R160R5y36:assets%2Fsounds%2FANGRY_TEXT_BOX.mp3R162aR169hR6tgoR2i9609R3R160R5y32:assets%2Fsounds%2FcancelMenu.mp3R162aR170hR6tgoR2i6242R3R160R5y31:assets%2Fsounds%2FclickText.mp3R162aR171hR6tgoR2i37727R3R160R5y33:assets%2Fsounds%2FconfirmMenu.mp3R162aR172hR6tgoR2i4493R3R160R5y30:assets%2Fsounds%2Fdialogue.mp3R162aR173hR6tgoR2i8208R3R160R5y35:assets%2Fsounds%2FdialogueClose.mp3R162aR174hR6tgoR2i75745R3R160R5y34:assets%2Fsounds%2Ffnf_loss_sfx.mp3R162aR175hR6tgoR2i9662R3R160R5y26:assets%2Fsounds%2FGF_1.mp3R162aR176hR6tgoR2i10524R3R160R5y26:assets%2Fsounds%2FGF_2.mp3R162aR177hR6tgoR2i11072R3R160R5y26:assets%2Fsounds%2FGF_3.mp3R162aR178hR6tgoR2i10734R3R160R5y26:assets%2Fsounds%2FGF_4.mp3R162aR179hR6tgoR2i4964R3R160R5y30:assets%2Fsounds%2Fhitsound.mp3R162aR180hR6tgoR2i9009R3R160R5y34:assets%2Fsounds%2Fintro1-pixel.mp3R162aR181hR6tgoR2i10829R3R160R5y28:assets%2Fsounds%2Fintro1.mp3R162aR182hR6tgoR2i10316R3R160R5y34:assets%2Fsounds%2Fintro2-pixel.mp3R162aR183hR6tgoR2i11612R3R160R5y28:assets%2Fsounds%2Fintro2.mp3R162aR184hR6tgoR2i9141R3R160R5y34:assets%2Fsounds%2Fintro3-pixel.mp3R162aR185hR6tgoR2i11273R3R160R5y28:assets%2Fsounds%2Fintro3.mp3R162aR186hR6tgoR2i20209R3R160R5y35:assets%2Fsounds%2FintroGo-pixel.mp3R162aR187hR6tgoR2i12216R3R160R5y29:assets%2Fsounds%2FintroGo.mp3R162aR188hR6tgoR2i2730R3R160R5y36:assets%2Fsounds%2FMetronome_Tick.mp3R162aR189hR6tgoR2i7837R3R160R5y31:assets%2Fsounds%2Fmissnote1.mp3R162aR190hR6tgoR2i18762R3R160R5y31:assets%2Fsounds%2Fmissnote2.mp3R162aR191hR6tgoR2i20303R3R160R5y31:assets%2Fsounds%2Fmissnote3.mp3R162aR192hR6tgoR2i6841R3R160R5y32:assets%2Fsounds%2FscrollMenu.mp3R162aR193hR6tgoR2i151967R3R160R5y31:assets%2Fsounds%2FsoundTest.mp3R162aR194hR6tgoR0y34:assets%2Fstages%2Fshuck_stage.jsonR2i151R3R4R5R195R6tgoR0y33:assets%2Fstages%2Fshuck_stage.luaR2i635R3R4R5R196R6tgoR0y28:assets%2Fstages%2Fstage.jsonR2i279R3R4R5R197R6tgoR0y37:assets%2Fweeks%2Faow%20shuckisis.jsonR2i422R3R4R5R198R6tgoR0y29:assets%2Fweeks%2FweekList.txtR2i13R3R4R5R199R6tgoR0y34:assets%2Ffonts%2Ffonts-go-here.txtR2zR3R4R5R200R6tgoR2i14656R3y4:FONTy9:classNamey31:__ASSET__assets_fonts_pixel_otfR5y26:assets%2Ffonts%2Fpixel.otfR6tgoR2i75864R3R201R202y29:__ASSET__assets_fonts_vcr_ttfR5y24:assets%2Ffonts%2Fvcr.ttfR6tgoR2i8220R3R160R5y26:flixel%2Fsounds%2Fbeep.mp3R162aR207y26:flixel%2Fsounds%2Fbeep.ogghR6tgoR2i39706R3R160R5y28:flixel%2Fsounds%2Fflixel.mp3R162aR209y28:flixel%2Fsounds%2Fflixel.ogghR6tgoR2i6840R3y5:SOUNDR5R208R162aR207R208hgoR2i33629R3R211R5R210R162aR209R210hgoR2i15744R3R201R202y35:__ASSET__flixel_fonts_nokiafc22_ttfR5y30:flixel%2Ffonts%2Fnokiafc22.ttfR6tgoR2i29724R3R201R202y36:__ASSET__flixel_fonts_monsterrat_ttfR5y31:flixel%2Ffonts%2Fmonsterrat.ttfR6tgoR0y33:flixel%2Fimages%2Fui%2Fbutton.pngR2i248R3R28R5R216R6tgoR0y36:flixel%2Fimages%2Flogo%2Fdefault.pngR2i505R3R28R5R217R6tgoR0y42:flixel%2Fimages%2Ftransitions%2Fcircle.pngR2i824R3R28R5R218R6tgoR0y53:flixel%2Fimages%2Ftransitions%2Fdiagonal_gradient.pngR2i3812R3R28R5R219R6tgoR0y43:flixel%2Fimages%2Ftransitions%2Fdiamond.pngR2i788R3R28R5R220R6tgoR0y42:flixel%2Fimages%2Ftransitions%2Fsquare.pngR2i383R3R28R5R221R6tgoR0y34:flixel%2Fflixel-ui%2Fimg%2Fbox.pngR2i912R3R28R5R222R6tgoR0y37:flixel%2Fflixel-ui%2Fimg%2Fbutton.pngR2i433R3R28R5R223R6tgoR0y48:flixel%2Fflixel-ui%2Fimg%2Fbutton_arrow_down.pngR2i446R3R28R5R224R6tgoR0y48:flixel%2Fflixel-ui%2Fimg%2Fbutton_arrow_left.pngR2i459R3R28R5R225R6tgoR0y49:flixel%2Fflixel-ui%2Fimg%2Fbutton_arrow_right.pngR2i511R3R28R5R226R6tgoR0y46:flixel%2Fflixel-ui%2Fimg%2Fbutton_arrow_up.pngR2i493R3R28R5R227R6tgoR0y42:flixel%2Fflixel-ui%2Fimg%2Fbutton_thin.pngR2i247R3R28R5R228R6tgoR0y44:flixel%2Fflixel-ui%2Fimg%2Fbutton_toggle.pngR2i534R3R28R5R229R6tgoR0y40:flixel%2Fflixel-ui%2Fimg%2Fcheck_box.pngR2i922R3R28R5R230R6tgoR0y41:flixel%2Fflixel-ui%2Fimg%2Fcheck_mark.pngR2i946R3R28R5R231R6tgoR0y37:flixel%2Fflixel-ui%2Fimg%2Fchrome.pngR2i253R3R28R5R232R6tgoR0y42:flixel%2Fflixel-ui%2Fimg%2Fchrome_flat.pngR2i212R3R28R5R233R6tgoR0y43:flixel%2Fflixel-ui%2Fimg%2Fchrome_inset.pngR2i192R3R28R5R234R6tgoR0y43:flixel%2Fflixel-ui%2Fimg%2Fchrome_light.pngR2i214R3R28R5R235R6tgoR0y44:flixel%2Fflixel-ui%2Fimg%2Fdropdown_mark.pngR2i156R3R28R5R236R6tgoR0y41:flixel%2Fflixel-ui%2Fimg%2Ffinger_big.pngR2i1724R3R28R5R237R6tgoR0y43:flixel%2Fflixel-ui%2Fimg%2Ffinger_small.pngR2i294R3R28R5R238R6tgoR0y38:flixel%2Fflixel-ui%2Fimg%2Fhilight.pngR2i129R3R28R5R239R6tgoR0y36:flixel%2Fflixel-ui%2Fimg%2Finvis.pngR2i128R3R28R5R240R6tgoR0y41:flixel%2Fflixel-ui%2Fimg%2Fminus_mark.pngR2i136R3R28R5R241R6tgoR0y40:flixel%2Fflixel-ui%2Fimg%2Fplus_mark.pngR2i147R3R28R5R242R6tgoR0y36:flixel%2Fflixel-ui%2Fimg%2Fradio.pngR2i191R3R28R5R243R6tgoR0y40:flixel%2Fflixel-ui%2Fimg%2Fradio_dot.pngR2i153R3R28R5R244R6tgoR0y37:flixel%2Fflixel-ui%2Fimg%2Fswatch.pngR2i185R3R28R5R245R6tgoR0y34:flixel%2Fflixel-ui%2Fimg%2Ftab.pngR2i201R3R28R5R246R6tgoR0y39:flixel%2Fflixel-ui%2Fimg%2Ftab_back.pngR2i210R3R28R5R247R6tgoR0y44:flixel%2Fflixel-ui%2Fimg%2Ftooltip_arrow.pngR2i18509R3R28R5R248R6tgoR0y39:flixel%2Fflixel-ui%2Fxml%2Fdefaults.xmlR2i1263R3R4R5R249R6tgoR0y53:flixel%2Fflixel-ui%2Fxml%2Fdefault_loading_screen.xmlR2i1953R3R4R5R250R6tgoR0y44:flixel%2Fflixel-ui%2Fxml%2Fdefault_popup.xmlR2i1848R3R4R5R251R6tgh","rootPath":null,"version":2,"libraryArgs":[],"libraryType":null}',
          Qc.rootPath
        );
        a = Wb.fromManifest(a);
        ra.registerLibrary("default", a);
        a = ra.getLibrary("videos");
        null != a
          ? Qc.preloadLibraries.push(a)
          : Qc.preloadLibraryNames.push("videos");
        a = ra.getLibrary("default");
        null != a
          ? Qc.preloadLibraries.push(a)
          : Qc.preloadLibraryNames.push("default");
      };
      var Zb = function (a) {
        null != a && (this.name = a);
        this.__init ||
          (void 0 == this.ascender && (this.ascender = 0),
          void 0 == this.descender && (this.descender = 0),
          void 0 == this.height && (this.height = 0),
          void 0 == this.numGlyphs && (this.numGlyphs = 0),
          void 0 == this.underlinePosition && (this.underlinePosition = 0),
          void 0 == this.underlineThickness && (this.underlineThickness = 0),
          void 0 == this.unitsPerEM && (this.unitsPerEM = 0),
          null != this.__fontID
            ? ra.isLocal(this.__fontID) &&
              this.__fromBytes(ra.getBytes(this.__fontID))
            : null != this.__fontPath && this.__fromFile(this.__fontPath));
      };
      h["lime.text.Font"] = Zb;
      Zb.__name__ = "lime.text.Font";
      Zb.fromFile = function (a) {
        if (null == a) return null;
        var b = new Zb();
        b.__fromFile(a);
        return b;
      };
      Zb.loadFromName = function (a) {
        return new Zb().__loadFromName(a);
      };
      Zb.__measureFontNode = function (a) {
        var b = window.document.createElement("span");
        b.setAttribute("aria-hidden", "true");
        var c = window.document.createTextNode("BESbswy");
        b.appendChild(c);
        c = b.style;
        c.display = "block";
        c.position = "absolute";
        c.top = "-9999px";
        c.left = "-9999px";
        c.fontSize = "300px";
        c.width = "auto";
        c.height = "auto";
        c.lineHeight = "normal";
        c.margin = "0";
        c.padding = "0";
        c.fontVariant = "normal";
        c.whiteSpace = "nowrap";
        c.fontFamily = a;
        window.document.body.appendChild(b);
        return b;
      };
      Zb.prototype = {
        __copyFrom: function (a) {
          null != a &&
            ((this.ascender = a.ascender),
            (this.descender = a.descender),
            (this.height = a.height),
            (this.name = a.name),
            (this.numGlyphs = a.numGlyphs),
            (this.src = a.src),
            (this.underlinePosition = a.underlinePosition),
            (this.underlineThickness = a.underlineThickness),
            (this.unitsPerEM = a.unitsPerEM),
            (this.__fontID = a.__fontID),
            (this.__fontPath = a.__fontPath),
            (this.__init = !0));
        },
        __fromBytes: function (a) {
          this.__fontPath = null;
        },
        __fromFile: function (a) {
          this.__fontPath = a;
        },
        __loadFromName: function (a) {
          var b = this,
            c = new Gd();
          this.name = a;
          var d = H.navigator.userAgent.toLowerCase(),
            e = 0 <= d.indexOf(" safari/") && 0 > d.indexOf(" chrome/");
          d = new ya("(iPhone|iPod|iPad).*AppleWebKit(?!.*Version)", "i").match(
            d
          );
          if (
            !e &&
            !d &&
            window.document.fonts &&
            ((x = window.document.fonts), n(x, x.load))
          )
            window.document.fonts.load("1em '" + a + "'").then(
              function (a) {
                c.complete(b);
              },
              function (d) {
                Ka.warn('Could not load web font "' + a + '"', {
                  fileName: "lime/text/Font.hx",
                  lineNumber: 515,
                  className: "lime.text.Font",
                  methodName: "__loadFromName",
                });
                c.complete(b);
              }
            );
          else {
            var f = Zb.__measureFontNode("'" + a + "', sans-serif"),
              k = Zb.__measureFontNode("'" + a + "', serif"),
              r = f.offsetWidth,
              l = k.offsetWidth,
              g = -1,
              u = 0,
              m,
              h;
            g = window.setInterval(function () {
              u += 1;
              m = f.offsetWidth != r || k.offsetWidth != l;
              h = 3e3 <= 50 * u;
              if (m || h)
                window.clearInterval(g),
                  f.parentNode.removeChild(f),
                  k.parentNode.removeChild(k),
                  (k = f = null),
                  h &&
                    Ka.warn('Could not load web font "' + a + '"', {
                      fileName: "lime/text/Font.hx",
                      lineNumber: 550,
                      className: "lime.text.Font",
                      methodName: "__loadFromName",
                    }),
                  c.complete(b);
            }, 50);
          }
          return c.future;
        },
        __class__: Zb,
      };
      var rk = (v.__ASSET__assets_fonts_pixel_otf = function () {
        this.ascender = 1125;
        this.descender = -250;
        this.height = 1375;
        this.numGlyphs = 262;
        this.underlinePosition = -143;
        this.underlineThickness = 20;
        this.unitsPerEM = 1e3;
        this.name = "Pixel Arial 11 Bold";
        Zb.call(this);
      });
      h.__ASSET__assets_fonts_pixel_otf = rk;
      rk.__name__ = "__ASSET__assets_fonts_pixel_otf";
      rk.__super__ = Zb;
      rk.prototype = q(Zb.prototype, { __class__: rk });
      var sk = (v.__ASSET__assets_fonts_vcr_ttf = function () {
        this.ascender = 1800;
        this.descender = 0;
        this.height = 2e3;
        this.numGlyphs = 204;
        this.underlinePosition = -292;
        this.underlineThickness = 150;
        this.unitsPerEM = 2048;
        this.name = "VCR OSD Mono";
        Zb.call(this);
      });
      h.__ASSET__assets_fonts_vcr_ttf = sk;
      sk.__name__ = "__ASSET__assets_fonts_vcr_ttf";
      sk.__super__ = Zb;
      sk.prototype = q(Zb.prototype, { __class__: sk });
      var tk = (v.__ASSET__flixel_fonts_nokiafc22_ttf = function () {
        this.ascender = 2048;
        this.descender = -512;
        this.height = 2816;
        this.numGlyphs = 172;
        this.underlinePosition = -640;
        this.underlineThickness = 256;
        this.unitsPerEM = 2048;
        this.name = "Nokia Cellphone FC Small";
        Zb.call(this);
      });
      h.__ASSET__flixel_fonts_nokiafc22_ttf = tk;
      tk.__name__ = "__ASSET__flixel_fonts_nokiafc22_ttf";
      tk.__super__ = Zb;
      tk.prototype = q(Zb.prototype, { __class__: tk });
      var uk = (v.__ASSET__flixel_fonts_monsterrat_ttf = function () {
        this.ascender = 968;
        this.descender = -251;
        this.height = 1219;
        this.numGlyphs = 263;
        this.underlinePosition = -150;
        this.underlineThickness = 50;
        this.unitsPerEM = 1e3;
        this.name = "Monsterrat";
        Zb.call(this);
      });
      h.__ASSET__flixel_fonts_monsterrat_ttf = uk;
      uk.__name__ = "__ASSET__flixel_fonts_monsterrat_ttf";
      uk.__super__ = Zb;
      uk.prototype = q(Zb.prototype, { __class__: uk });
      var Sb = function (a) {
        Zb.call(this, a);
      };
      h["openfl.text.Font"] = Sb;
      Sb.__name__ = "openfl.text.Font";
      Sb.fromFile = function (a) {
        if (null == a) return null;
        var b = new Sb();
        b.__fromFile(a);
        return b;
      };
      Sb.loadFromName = function (a) {
        return Zb.loadFromName(a).then(function (a) {
          var b = new Sb();
          b.__fromLimeFont(a);
          return Ua.withValue(b);
        });
      };
      Sb.registerFont = function (a) {
        a =
          null == za.getClass(a)
            ? za.__cast(zb.createInstance(a, []), Sb)
            : za.__cast(a, Sb);
        null != a &&
          (Sb.__registeredFonts.push(a), (Sb.__fontByName.h[a.name] = a));
      };
      Sb.__super__ = Zb;
      Sb.prototype = q(Zb.prototype, {
        __fromLimeFont: function (a) {
          this.__copyFrom(a);
        },
        __class__: Sb,
      });
      var nk = (v.__ASSET__OPENFL__assets_fonts_pixel_otf = function () {
        this.__fromLimeFont(new rk());
        Zb.call(this, void 0);
      });
      h.__ASSET__OPENFL__assets_fonts_pixel_otf = nk;
      nk.__name__ = "__ASSET__OPENFL__assets_fonts_pixel_otf";
      nk.__super__ = Sb;
      nk.prototype = q(Sb.prototype, { __class__: nk });
      var ok = (v.__ASSET__OPENFL__assets_fonts_vcr_ttf = function () {
        this.__fromLimeFont(new sk());
        Zb.call(this, void 0);
      });
      h.__ASSET__OPENFL__assets_fonts_vcr_ttf = ok;
      ok.__name__ = "__ASSET__OPENFL__assets_fonts_vcr_ttf";
      ok.__super__ = Sb;
      ok.prototype = q(Sb.prototype, { __class__: ok });
      var pk = (v.__ASSET__OPENFL__flixel_fonts_nokiafc22_ttf = function () {
        this.__fromLimeFont(new tk());
        Zb.call(this, void 0);
      });
      h.__ASSET__OPENFL__flixel_fonts_nokiafc22_ttf = pk;
      pk.__name__ = "__ASSET__OPENFL__flixel_fonts_nokiafc22_ttf";
      pk.__super__ = Sb;
      pk.prototype = q(Sb.prototype, { __class__: pk });
      var qk = (v.__ASSET__OPENFL__flixel_fonts_monsterrat_ttf = function () {
        this.__fromLimeFont(new uk());
        Zb.call(this, void 0);
      });
      h.__ASSET__OPENFL__flixel_fonts_monsterrat_ttf = qk;
      qk.__name__ = "__ASSET__OPENFL__flixel_fonts_monsterrat_ttf";
      qk.__super__ = Sb;
      qk.prototype = q(Sb.prototype, { __class__: qk });
      Math.__name__ = "Math";
      var $d = function (a, b) {
        null == b && (b = "bf");
        this.hasConfirmAnimation = !1;
        F.call(this, a);
        this.changeCharacter(b);
      };
      h.MenuCharacter = $d;
      $d.__name__ = "MenuCharacter";
      $d.__super__ = F;
      $d.prototype = q(F.prototype, {
        changeCharacter: function (a) {
          null == a && (a = "bf");
          null == a && (a = "");
          if (a != this.character) {
            this.character = a;
            this.set_antialiasing(y.globalAntialiasing);
            this.set_visible(!0);
            var b = this.scale,
              c = 1,
              d = 1;
            null == d && (d = 0);
            null == c && (c = 0);
            b.set_x(c);
            b.set_y(d);
            this.updateHitbox();
            this.hasConfirmAnimation = !1;
            null == a
              ? ((a = "images/menucharacters/" + a + ".json"),
                null == a && (a = ""),
                (a = "assets/" + a),
                aa.exists(a) ||
                  ((a =
                    "images/menucharacters/" + $d.DEFAULT_CHARACTER + ".json"),
                  null == a && (a = ""),
                  (a = "assets/" + a)),
                (a = aa.getText(a)),
                (a = JSON.parse(a)),
                (b = "menucharacters/" + a.image),
                (c = null),
                (d = G.returnGraphic(b, c)),
                this.set_frames(
                  jb.fromSparrow(
                    d,
                    G.getPath("images/" + b + ".xml", "TEXT", c)
                  )
                ),
                this.animation.addByPrefix("idle", a.idle_anim, 24),
                (b = a.confirm_anim),
                null != b &&
                  0 < b.length &&
                  b != a.idle_anim &&
                  (this.animation.addByPrefix("confirm", b, 24, !1),
                  null != this.animation._animations.h.confirm &&
                    (this.hasConfirmAnimation = !0)),
                this.set_flipX(1 == a.flipX),
                1 != a.scale &&
                  ((b = this.scale),
                  (d = c = a.scale),
                  null == d && (d = 0),
                  null == c && (c = 0),
                  b.set_x(c),
                  b.set_y(d),
                  this.updateHitbox()),
                (b = this.offset),
                (c = a.position[0]),
                (d = a.position[1]),
                null == d && (d = 0),
                null == c && (c = 0),
                b.set_x(c),
                b.set_y(d),
                this.animation.play("idle"))
              : "" == a
              ? this.set_visible(!1)
              : ((a = "images/menucharacters/" + a + ".json"),
                null == a && (a = ""),
                (a = "assets/" + a),
                aa.exists(a) ||
                  ((a =
                    "images/menucharacters/" + $d.DEFAULT_CHARACTER + ".json"),
                  null == a && (a = ""),
                  (a = "assets/" + a)),
                (a = aa.getText(a)),
                (a = JSON.parse(a)),
                (b = "menucharacters/" + a.image),
                (c = null),
                (d = G.returnGraphic(b, c)),
                this.set_frames(
                  jb.fromSparrow(
                    d,
                    G.getPath("images/" + b + ".xml", "TEXT", c)
                  )
                ),
                this.animation.addByPrefix("idle", a.idle_anim, 24),
                (b = a.confirm_anim),
                null != b &&
                  0 < b.length &&
                  b != a.idle_anim &&
                  (this.animation.addByPrefix("confirm", b, 24, !1),
                  null != this.animation._animations.h.confirm &&
                    (this.hasConfirmAnimation = !0)),
                this.set_flipX(1 == a.flipX),
                1 != a.scale &&
                  ((b = this.scale),
                  (d = c = a.scale),
                  null == d && (d = 0),
                  null == c && (c = 0),
                  b.set_x(c),
                  b.set_y(d),
                  this.updateHitbox()),
                (b = this.offset),
                (c = a.position[0]),
                (d = a.position[1]),
                null == d && (d = 0),
                null == c && (c = 0),
                b.set_x(c),
                b.set_y(d),
                this.animation.play("idle"));
          }
        },
        __class__: $d,
      });
      var Ri = function (a, b, c) {
        null == c && (c = "");
        this.fakeFramerate = Math.round(1 / g.elapsed / 10);
        this.isFlashing = !1;
        this.targetY = this.flashingInt = 0;
        F.call(this, a, b);
        a = G.returnGraphic("storymenu/" + c, null);
        this.loadGraphic(a);
        this.set_antialiasing(y.globalAntialiasing);
      };
      h.MenuItem = Ri;
      Ri.__name__ = "MenuItem";
      Ri.__super__ = F;
      Ri.prototype = q(F.prototype, {
        startFlashing: function () {
          this.isFlashing = !0;
        },
        update: function (a) {
          F.prototype.update.call(this, a);
          var b = this.y;
          this.set_y(
            b +
              Math.max(0, Math.min(1, 10.2 * a)) *
                (120 * this.targetY + 480 - b)
          );
          this.isFlashing && (this.flashingInt += 1);
          this.flashingInt % this.fakeFramerate >=
          Math.floor(this.fakeFramerate / 2)
            ? this.set_color(-13369345)
            : this.set_color(-1);
        },
        __class__: Ri,
      });
      var Id = function (a, b, c, d, e) {
        null == e && (e = !1);
        null == d && (d = !1);
        this.originalHeightForCalcs = 6;
        this.lastNoteOffsetXForPixelAutoAdjusting = 0;
        this.hitsoundDisabled = !1;
        this.distance = 2e3;
        this.noAnimation = this.noMissAnimation = this.hitCausesMiss = !1;
        this.texture = null;
        this.ratingDisabled = !1;
        this.ratingMod = 0;
        this.rating = "unknown";
        this.missHealth = 0.0475;
        this.hitHealth = 0.023;
        this.copyX = this.copyY = this.copyAngle = this.copyAlpha = !0;
        this.multAlpha = this.multSpeed = 1;
        this.noteSplashHue =
          this.noteSplashSat =
          this.noteSplashBrt =
          this.offsetX =
          this.offsetY =
          this.offsetAngle =
            0;
        this.noteSplashTexture = null;
        this.noteSplashDisabled = !1;
        this.pixelInt = [0, 1, 2, 3];
        this.colArray = ["purple", "blue", "green", "red"];
        this.lowPriority = !1;
        this.lateHitMult = 1;
        this.earlyHitMult = 0.5;
        this.gfNote = !1;
        this.animSuffix = "";
        this.inEditor = !1;
        this.eventVal1 = this.eventVal2 = "";
        this.eventLength = 0;
        this.eventName = "";
        this.noteType = null;
        this.isSustainNote = !1;
        this.sustainLength = 0;
        this.blockHit = !1;
        this.tail = [];
        this.canBeHit =
          this.tooLate =
          this.wasGoodHit =
          this.ignoreNote =
          this.hitByOpponent =
          this.spawned =
            !1;
        this.noteData = 0;
        this.mustPress = !1;
        this.strumTime = 0;
        F.call(this);
        null == c && (c = this);
        this.prevNote = c;
        this.isSustainNote = d;
        this.inEditor = e;
        this.set_x(
          this.x + ((y.middleScroll ? C.STRUM_X_MIDDLESCROLL : C.STRUM_X) + 50)
        );
        this.set_y(this.y - 2e3);
        this.strumTime = a;
        e || (this.strumTime += y.noteOffset);
        this.noteData = b;
        -1 < b &&
          (this.set_texture(""),
          (this.colorSwap = new Kg()),
          (this.shader = this.colorSwap.shader),
          this.set_x(this.x + Id.swagWidth * b),
          !this.isSustainNote &&
            -1 < b &&
            4 > b &&
            this.animation.play(this.colArray[b % 4] + "Scroll"));
        null != c && (c.nextNote = this);
        this.isSustainNote && null != c
          ? (this.set_alpha(0.6),
            (this.multAlpha = 0.6),
            (this.hitsoundDisabled = !0),
            y.downScroll && this.set_flipY(!0),
            (this.offsetX += this.get_width() / 2),
            (this.copyAngle = !1),
            this.animation.play(this.colArray[b % 4] + "holdend"),
            this.updateHitbox(),
            (this.offsetX -= this.get_width() / 2),
            C.isPixelStage && (this.offsetX += 30),
            c.isSustainNote &&
              (c.animation.play(this.colArray[c.noteData % 4] + "hold"),
              c.scale.set_y((P.stepCrochet / 100) * c.scale.y * 1.05),
              null != C.instance &&
                c.scale.set_y(c.scale.y * C.instance.songSpeed),
              C.isPixelStage &&
                (c.scale.set_y(1.19 * c.scale.y),
                c.scale.set_y(c.scale.y * (6 / this.get_height()))),
              c.updateHitbox()),
            C.isPixelStage &&
              (this.scale.set_y(this.scale.y * C.daPixelZoom),
              this.updateHitbox()))
          : this.isSustainNote || (this.earlyHitMult = 1);
        this.set_x(this.x + this.offsetX);
      };
      h.Note = Id;
      Id.__name__ = "Note";
      Id.__super__ = F;
      Id.prototype = q(F.prototype, {
        resizeByRatio: function (a) {
          this.isSustainNote &&
            !K.endsWith(this.animation._curAnim.name, "end") &&
            (this.scale.set_y(this.scale.y * a), this.updateHitbox());
        },
        set_texture: function (a) {
          this.texture != a && this.reloadNote("", a);
          return (this.texture = a);
        },
        set_noteType: function (a) {
          this.noteSplashTexture = C.SONG.splashSkin;
          -1 < this.noteData &&
            this.noteData < y.arrowHSV.length &&
            (this.colorSwap.set_hue(y.arrowHSV[this.noteData][0] / 360),
            this.colorSwap.set_saturation(y.arrowHSV[this.noteData][1] / 100),
            this.colorSwap.set_brightness(y.arrowHSV[this.noteData][2] / 100));
          if (-1 < this.noteData && this.noteType != a) {
            switch (a) {
              case "Alt Animation":
                this.animSuffix = "-alt";
                break;
              case "GF Sing":
                this.gfNote = !0;
                break;
              case "Hurt Note":
                this.ignoreNote = this.mustPress;
                this.reloadNote("HURT");
                this.noteSplashTexture = "HURTnoteSplashes";
                this.colorSwap.set_hue(0);
                this.colorSwap.set_saturation(0);
                this.colorSwap.set_brightness(0);
                this.lowPriority = !0;
                this.missHealth = this.isSustainNote ? 0.1 : 0.3;
                this.hitCausesMiss = !0;
                break;
              case "No Animation":
                this.noMissAnimation = this.noAnimation = !0;
            }
            this.noteType = a;
          }
          this.noteSplashHue = this.colorSwap.hue;
          this.noteSplashSat = this.colorSwap.saturation;
          this.noteSplashBrt = this.colorSwap.brightness;
          return a;
        },
        reloadNote: function (a, b, c) {
          null == c && (c = "");
          null == b && (b = "");
          null == a && (a = "");
          null == a && (a = "");
          null == b && (b = "");
          null == c && (c = "");
          var d = b;
          1 > b.length &&
            ((d = C.SONG.arrowSkin), null == d || 1 > d.length) &&
            (d = "NOTE_assets");
          b = null;
          null != this.animation._curAnim && (b = this.animation._curAnim.name);
          d = d.split("/");
          d[d.length - 1] = a + d[d.length - 1] + c;
          a = this.scale.y;
          c = d.join("/");
          C.isPixelStage
            ? (this.isSustainNote
                ? ((d = G.returnGraphic("pixelUI/" + c + "ENDS", null)),
                  this.loadGraphic(d),
                  this.set_width(this.get_width() / 4),
                  this.set_height(this.get_height() / 2),
                  (this.originalHeightForCalcs = this.get_height()),
                  (d = G.returnGraphic("pixelUI/" + c + "ENDS", null)))
                : ((d = G.returnGraphic("pixelUI/" + c, null)),
                  this.loadGraphic(d),
                  this.set_width(this.get_width() / 4),
                  this.set_height(this.get_height() / 5),
                  (d = G.returnGraphic("pixelUI/" + c, null))),
              this.loadGraphic(
                d,
                !0,
                Math.floor(this.get_width()),
                Math.floor(this.get_height())
              ),
              this.setGraphicSize((this.get_width() * C.daPixelZoom) | 0),
              this.loadPixelNoteAnims(),
              this.set_antialiasing(!1),
              this.isSustainNote &&
                ((this.offsetX += this.lastNoteOffsetXForPixelAutoAdjusting),
                (this.lastNoteOffsetXForPixelAutoAdjusting =
                  (this.get_width() - 7) * (C.daPixelZoom / 2)),
                (this.offsetX -= this.lastNoteOffsetXForPixelAutoAdjusting)))
            : ((d = G.returnGraphic(c, null)),
              this.set_frames(
                jb.fromSparrow(
                  d,
                  G.getPath("images/" + c + ".xml", "TEXT", null)
                )
              ),
              this.loadNoteAnims(),
              this.set_antialiasing(y.globalAntialiasing));
          this.isSustainNote && this.scale.set_y(a);
          this.updateHitbox();
          null != b && this.animation.play(b, !0);
          this.inEditor &&
            (this.setGraphicSize(da.GRID_SIZE, da.GRID_SIZE),
            this.updateHitbox());
        },
        loadNoteAnims: function () {
          this.animation.addByPrefix(
            this.colArray[this.noteData] + "Scroll",
            this.colArray[this.noteData] + "0"
          );
          this.isSustainNote &&
            (this.animation.addByPrefix("purpleholdend", "pruple end hold"),
            this.animation.addByPrefix(
              this.colArray[this.noteData] + "holdend",
              this.colArray[this.noteData] + " hold end"
            ),
            this.animation.addByPrefix(
              this.colArray[this.noteData] + "hold",
              this.colArray[this.noteData] + " hold piece"
            ));
          this.setGraphicSize((0.7 * this.get_width()) | 0);
          this.updateHitbox();
        },
        loadPixelNoteAnims: function () {
          this.isSustainNote
            ? (this.animation.add(this.colArray[this.noteData] + "holdend", [
                this.pixelInt[this.noteData] + 4,
              ]),
              this.animation.add(this.colArray[this.noteData] + "hold", [
                this.pixelInt[this.noteData],
              ]))
            : this.animation.add(this.colArray[this.noteData] + "Scroll", [
                this.pixelInt[this.noteData] + 4,
              ]);
        },
        update: function (a) {
          F.prototype.update.call(this, a);
          this.mustPress
            ? ((this.canBeHit =
                this.strumTime >
                  P.songPosition - P.safeZoneOffset * this.lateHitMult &&
                this.strumTime <
                  P.songPosition + P.safeZoneOffset * this.earlyHitMult
                  ? !0
                  : !1),
              this.strumTime < P.songPosition - P.safeZoneOffset &&
                !this.wasGoodHit &&
                (this.tooLate = !0))
            : ((this.canBeHit = !1),
              this.strumTime <
                P.songPosition + P.safeZoneOffset * this.earlyHitMult &&
                ((this.isSustainNote && this.prevNote.wasGoodHit) ||
                  this.strumTime <= P.songPosition) &&
                (this.wasGoodHit = !0));
          this.tooLate &&
            !this.inEditor &&
            0.3 < this.alpha &&
            this.set_alpha(0.3);
        },
        __class__: Id,
        __properties__: q(F.prototype.__properties__, {
          set_texture: "set_texture",
          set_noteType: "set_noteType",
        }),
      });
      var rh = function (a, b, c) {
        null == c && (c = 0);
        null == b && (b = 0);
        null == a && (a = 0);
        this.colorSwap = this.textureLoaded = null;
        F.call(this, a, b);
        var d = "noteSplashes";
        null != C.SONG.splashSkin &&
          0 < C.SONG.splashSkin.length &&
          (d = C.SONG.splashSkin);
        this.loadAnims(d);
        this.colorSwap = new Kg();
        this.shader = this.colorSwap.shader;
        this.setupNoteSplash(a, b, c);
        this.set_antialiasing(y.globalAntialiasing);
      };
      h.NoteSplash = rh;
      rh.__name__ = "NoteSplash";
      rh.__super__ = F;
      rh.prototype = q(F.prototype, {
        setupNoteSplash: function (a, b, c, d, e, f, k) {
          null == k && (k = 0);
          null == f && (f = 0);
          null == e && (e = 0);
          null == c && (c = 0);
          this.setPosition(a - 0.95 * Id.swagWidth, b - Id.swagWidth);
          this.set_alpha(0.6);
          null == d &&
            ((d = "noteSplashes"),
            null != C.SONG.splashSkin &&
              0 < C.SONG.splashSkin.length &&
              (d = C.SONG.splashSkin));
          this.textureLoaded != d && this.loadAnims(d);
          this.colorSwap.set_hue(e);
          this.colorSwap.set_saturation(f);
          this.colorSwap.set_brightness(k);
          d = this.offset;
          b = a = 10;
          null == b && (b = 0);
          null == a && (a = 0);
          d.set_x(a);
          d.set_y(b);
          a = g.random.int(1, 2);
          this.animation.play("note" + c + "-" + a, !0);
          null != this.animation._curAnim &&
            this.animation._curAnim.set_frameRate(24 + g.random.int(-2, 2));
        },
        loadAnims: function (a) {
          var b = G.returnGraphic(a, null);
          this.set_frames(
            jb.fromSparrow(b, G.getPath("images/" + a + ".xml", "TEXT", null))
          );
          this.animation.addByPrefix("note1-1", "note splash blue 1", 24, !1);
          this.animation.addByPrefix("note2-1", "note splash green 1", 24, !1);
          this.animation.addByPrefix("note0-1", "note splash purple 1", 24, !1);
          this.animation.addByPrefix("note3-1", "note splash red 1", 24, !1);
          this.animation.addByPrefix("note1-2", "note splash blue 2", 24, !1);
          this.animation.addByPrefix("note2-2", "note splash green 2", 24, !1);
          this.animation.addByPrefix("note0-2", "note splash purple 2", 24, !1);
          this.animation.addByPrefix("note3-2", "note splash red 2", 24, !1);
        },
        update: function (a) {
          null != this.animation._curAnim &&
            this.animation._curAnim.finished &&
            this.kill();
          F.prototype.update.call(this, a);
        },
        __class__: rh,
      });
      var qg = function (a, b) {
        I.call(this, a, b);
      };
      h.OutdatedState = qg;
      qg.__name__ = "OutdatedState";
      qg.__super__ = I;
      qg.prototype = q(I.prototype, {
        create: function () {
          I.prototype.create.call(this);
          var a = new F().makeGraphic(g.width, g.height, -16777216);
          this.add(a);
          this.warnText = new W(
            0,
            0,
            g.width,
            "Sup bro, looks like you're running an   \n\n\t\t\toutdated version of Psych Engine (" +
              zc.psychEngineVersion +
              "),\n\n\t\t\tplease update to " +
              cb.updateVersion +
              "!\n\n\t\t\tPress ESCAPE to proceed anyway.\n\n\t\t\t\n\n\t\t\tThank you for using the Engine!",
            32
          );
          this.warnText.setFormat("VCR OSD Mono", 32, -1, "center");
          a = this.warnText;
          var b = 16;
          null == b && (b = 17);
          (1 != b && 17 != b) || a.set_x((g.width - a.get_width()) / 2);
          (16 != b && 17 != b) || a.set_y((g.height - a.get_height()) / 2);
          this.add(this.warnText);
        },
        update: function (a) {
          qg.leftState ||
            (ia.player1.controls._accept.check()
              ? ((qg.leftState = !0),
                Ta.browserLoad(
                  "https://github.com/ShadowMario/FNF-PsychEngine/releases"
                ))
              : ia.player1.controls._back.check() && (qg.leftState = !0),
            qg.leftState &&
              (g.sound.play(G.sound("cancelMenu")),
              la.tween(this.warnText, { alpha: 0 }, 1, {
                onComplete: function (a) {
                  I.switchState(new zc());
                },
              })));
          I.prototype.update.call(this, a);
        },
        __class__: qg,
      });
      var G = function () {};
      h.Paths = G;
      G.__name__ = "Paths";
      G.clearUnusedMemory = function () {
        for (
          var a = Object.keys(G.currentTrackedAssets.h), b = a.length, c = 0;
          c < b;

        ) {
          var d = a[c++];
          if (
            -1 == G.localTrackedAssets.indexOf(d) &&
            -1 == G.dumpExclusions.indexOf(d)
          ) {
            var e = G.currentTrackedAssets.h[d];
            if (null != e) {
              aa.cache.removeBitmapData(d);
              var f = g.bitmap._cache;
              Object.prototype.hasOwnProperty.call(f.h, d) && delete f.h[d];
              e.destroy();
              e = G.currentTrackedAssets;
              Object.prototype.hasOwnProperty.call(e.h, d) && delete e.h[d];
            }
          }
        }
      };
      G.clearStoredMemory = function (a) {
        a = g.bitmap._cache.h;
        a = Object.keys(a);
        for (var b = a.length, c = 0; c < b; ) {
          var d = a[c++],
            e = g.bitmap._cache.h[d];
          if (
            null != e &&
            !Object.prototype.hasOwnProperty.call(G.currentTrackedAssets.h, d)
          ) {
            aa.cache.removeBitmapData(d);
            var f = g.bitmap._cache;
            Object.prototype.hasOwnProperty.call(f.h, d) && delete f.h[d];
            e.destroy();
          }
        }
        a = G.currentTrackedSounds.h;
        a = Object.keys(a);
        b = a.length;
        for (c = 0; c < b; )
          (d = a[c++]),
            -1 == G.localTrackedAssets.indexOf(d) &&
              -1 == G.dumpExclusions.indexOf(d) &&
              null != d &&
              (ra.cache.clear(d),
              (f = G.currentTrackedSounds),
              Object.prototype.hasOwnProperty.call(f.h, d) && delete f.h[d]);
        G.localTrackedAssets = [];
      };
      G.setCurrentLevel = function (a) {
        G.currentLevel = a.toLowerCase();
      };
      G.getPath = function (a, b, c) {
        if (null != c) return G.getLibraryPath(a, c);
        if (null != G.currentLevel) {
          if (
            "shared" != G.currentLevel &&
            ((c = G.currentLevel),
            (c = "" + c + ":assets/" + c + "/" + a),
            aa.exists(c, b))
          )
            return c;
          c = "shared:assets/shared/" + a;
          if (aa.exists(c, b)) return c;
        }
        null == a && (a = "");
        return "assets/" + a;
      };
      G.getLibraryPath = function (a, b) {
        null == b && (b = "preload");
        return "preload" == b || "default" == b
          ? (null == a && (a = ""), "assets/" + a)
          : "" + b + ":assets/" + b + "/" + a;
      };
      G.video = function (a) {
        return "assets/videos/" + a + ".mp4";
      };
      G.sound = function (a, b) {
        return G.returnSound("sounds", a, b);
      };
      G.getTextFromFile = function (a, b) {
        return ra.getText(G.getPath(a, "TEXT"));
      };
      G.returnGraphic = function (a, b) {
        a = G.getPath("images/" + a + ".png", "IMAGE", b);
        if (aa.exists(a, "IMAGE"))
          return (
            Object.prototype.hasOwnProperty.call(G.currentTrackedAssets.h, a) ||
              ((b = g.bitmap.add(a, !1, a)),
              (b.persist = !0),
              (G.currentTrackedAssets.h[a] = b)),
            G.localTrackedAssets.push(a),
            G.currentTrackedAssets.h[a]
          );
        wb.trace(a + " oh no its returning null NOOOO", {
          fileName: "source/Paths.hx",
          lineNumber: 308,
          className: "Paths",
          methodName: "returnGraphic",
        });
        return null;
      };
      G.returnSound = function (a, b, c) {
        var d = G.getPath("" + a + "/" + b + ".mp3", "SOUND", c);
        d = d.substring(d.indexOf(":") + 1, d.length);
        if (
          !Object.prototype.hasOwnProperty.call(G.currentTrackedSounds.h, d)
        ) {
          var e = "";
          "songs" == a && (e = "songs:");
          var f = G.currentTrackedSounds;
          a = aa.getSound(e + G.getPath("" + a + "/" + b + ".mp3", "SOUND", c));
          f.h[d] = a;
        }
        G.localTrackedAssets.push(d);
        return G.currentTrackedSounds.h[d];
      };
      var ae = function (a, b) {
        this.cantUnpause = 0.1;
        this.holdTime = 0;
        this.curTime = Math.max(0, P.songPosition);
        this.curSelected = 0;
        this.difficultyChoices = [];
        this.menuItemsOG = [
          "Resume",
          "Restart Song",
          "Change Difficulty",
          "Botplay",
          "Exit to menu",
        ];
        this.menuItems = [];
        La.call(this);
        2 > Ta.difficulties.length &&
          X.remove(this.menuItemsOG, "Change Difficulty");
        C.chartingMode &&
          (this.menuItemsOG.splice(2, 0, "Leave Charting Mode"),
          (a = 0),
          C.instance.startingSong ||
            ((a = 1), this.menuItemsOG.splice(3, 0, "Skip Time")),
          this.menuItemsOG.splice(3 + a, 0, "End Song"),
          this.menuItemsOG.splice(4 + a, 0, "Practice Mode"));
        this.menuItems = this.menuItemsOG;
        a = 0;
        for (b = Ta.difficulties.length; a < b; ) {
          var c = a++;
          this.difficultyChoices.push("" + Ta.difficulties[c]);
        }
        this.difficultyChoices.push("BACK");
        this.pauseMusic = new Ce();
        if (null != ae.songName)
          (a = this.pauseMusic),
            (b = G.returnSound("music", ae.songName, null)),
            a.loadEmbedded(b, !0, !0);
        else if ("None" != ae.songName) {
          a = this.pauseMusic;
          c = y.pauseMusic;
          var d = new ya("[~&\\\\;:<>#]", "");
          b = new ya("[.,'\"%?!]", "");
          c = d.split(K.replace(c, " ", "-")).join("-");
          b = G.returnSound("music", b.split(c).join("").toLowerCase(), null);
          a.loadEmbedded(b, !0, !0);
        }
        this.pauseMusic.set_volume(0);
        this.pauseMusic.play(
          !1,
          g.random.int(0, (this.pauseMusic._length / 2) | 0)
        );
        g.sound.list.add(this.pauseMusic);
        a = new F().makeGraphic(g.width, g.height, -16777216);
        a.set_alpha(0);
        b = a.scrollFactor;
        b.set_x(0);
        b.set_y(0);
        this.add(a);
        c = new W(20, 15, 0, "", 32);
        c.set_text(c.text + C.SONG.song);
        b = c.scrollFactor;
        b.set_x(0);
        b.set_y(0);
        c.setFormat("assets/fonts/vcr.ttf", 32);
        c.updateHitbox();
        this.add(c);
        d = new W(20, 47, 0, "", 32);
        d.set_text(d.text + Ta.difficultyString());
        b = d.scrollFactor;
        b.set_x(0);
        b.set_y(0);
        d.setFormat("assets/fonts/vcr.ttf", 32);
        d.updateHitbox();
        this.add(d);
        var e = new W(20, 79, 0, "", 32);
        e.set_text("Blueballed: " + C.deathCounter);
        b = e.scrollFactor;
        b.set_x(0);
        b.set_y(0);
        e.setFormat("assets/fonts/vcr.ttf", 32);
        e.updateHitbox();
        this.add(e);
        this.practiceText = new W(20, 116, 0, "PRACTICE MODE", 32);
        b = this.practiceText.scrollFactor;
        b.set_x(0);
        b.set_y(0);
        this.practiceText.setFormat("assets/fonts/vcr.ttf", 32);
        this.practiceText.set_x(g.width - (this.practiceText.get_width() + 20));
        this.practiceText.updateHitbox();
        this.practiceText.set_visible(C.instance.practiceMode);
        this.add(this.practiceText);
        var f = new W(20, 116, 0, "CHARTING MODE", 32);
        b = f.scrollFactor;
        b.set_x(0);
        b.set_y(0);
        f.setFormat("assets/fonts/vcr.ttf", 32);
        f.set_x(g.width - (f.get_width() + 20));
        f.set_y(g.height - (f.get_height() + 20));
        f.updateHitbox();
        f.set_visible(C.chartingMode);
        this.add(f);
        e.set_alpha(0);
        d.set_alpha(0);
        c.set_alpha(0);
        c.set_x(g.width - (c.get_width() + 20));
        d.set_x(g.width - (d.get_width() + 20));
        e.set_x(g.width - (e.get_width() + 20));
        la.tween(a, { alpha: 0.6 }, 0.4, { ease: Aa.quartInOut });
        la.tween(c, { alpha: 1, y: 20 }, 0.4, {
          ease: Aa.quartInOut,
          startDelay: 0.3,
        });
        la.tween(d, { alpha: 1, y: d.y + 5 }, 0.4, {
          ease: Aa.quartInOut,
          startDelay: 0.5,
        });
        la.tween(e, { alpha: 1, y: e.y + 5 }, 0.4, {
          ease: Aa.quartInOut,
          startDelay: 0.7,
        });
        this.grpMenuShit = new ma();
        this.add(this.grpMenuShit);
        this.regenMenu();
        this.set_cameras([g.cameras.list[g.cameras.list.length - 1]]);
      };
      h.PauseSubState = ae;
      ae.__name__ = "PauseSubState";
      ae.restartSong = function (a) {
        null == a && (a = !1);
        C.instance.paused = !0;
        g.sound.music.set_volume(0);
        C.instance.vocals.set_volume(0);
        if (a) {
          Z.skipNextTransOut = !0;
          var b = zb.createInstance(za.getClass(g.game._state), []),
            c = g.game._state;
          qa.field(g.game._state, "switchTo")(b) &&
            g.game._state.startOutro(function () {
              g.game._state == c
                ? (g.game._requestedState = b)
                : g.log.advanced(
                    "`onOutroComplete` was called after the state was switched. This will be ignored",
                    Ja.WARNING,
                    !0
                  );
            });
        } else I.resetState();
      };
      ae.__super__ = La;
      ae.prototype = q(La.prototype, {
        update: function (a) {
          this.cantUnpause -= a;
          if (0.5 > this.pauseMusic._volume) {
            var b = this.pauseMusic;
            b.set_volume(b._volume + 0.01 * a);
          }
          La.prototype.update.call(this, a);
          this.updateSkipTextStuff();
          var c = ia.player1.controls._ui_upP.check(),
            d = ia.player1.controls._ui_downP.check();
          b = ia.player1.controls._accept.check();
          c && this.changeSelection(-1);
          d && this.changeSelection(1);
          c = this.menuItems[this.curSelected];
          "Skip Time" == c &&
            (ia.player1.controls._ui_leftP.check() &&
              (g.sound.play(G.sound("scrollMenu"), 0.4),
              (this.curTime -= 1e3),
              (this.holdTime = 0)),
            ia.player1.controls._ui_rightP.check() &&
              (g.sound.play(G.sound("scrollMenu"), 0.4),
              (this.curTime += 1e3),
              (this.holdTime = 0)),
            ia.player1.controls._ui_left.check() ||
              ia.player1.controls._ui_right.check()) &&
            ((this.holdTime += a),
            0.5 < this.holdTime &&
              (this.curTime +=
                45e3 * a * (ia.player1.controls._ui_left.check() ? -1 : 1)),
            this.curTime >= g.sound.music._length
              ? (this.curTime -= g.sound.music._length)
              : 0 > this.curTime && (this.curTime += g.sound.music._length),
            this.updateSkipTimeText());
          if (b && (0 >= this.cantUnpause || !y.controllerMode)) {
            if (this.menuItems == this.difficultyChoices) {
              if (
                this.menuItems.length - 1 != this.curSelected &&
                -1 != this.difficultyChoices.indexOf(c)
              ) {
                a = C.SONG.song;
                b = Sa.formatSong(a, this.curSelected);
                C.SONG = Dd.loadFromJson(b, a);
                C.storyDifficulty = this.curSelected;
                I.resetState();
                g.sound.music.set_volume(0);
                C.changedDifficulty = !0;
                C.chartingMode = !1;
                return;
              }
              this.menuItems = this.menuItemsOG;
              this.regenMenu();
            }
            switch (c) {
              case "Botplay":
                C.instance.cpuControlled = !C.instance.cpuControlled;
                C.changedDifficulty = !0;
                C.instance.botplayTxt.set_visible(C.instance.cpuControlled);
                C.instance.botplayTxt.set_alpha(1);
                C.instance.botplaySine = 0;
                break;
              case "Change Difficulty":
                this.menuItems = this.difficultyChoices;
                this.deleteSkipTimeText();
                this.regenMenu();
                break;
              case "End Song":
                this.close();
                C.instance.finishSong(!0);
                break;
              case "Exit to menu":
                C.deathCounter = 0;
                C.seenCutscene = !1;
                ab.loadTheFirstEnabledMod();
                C.isStoryMode
                  ? I.switchState(new Ab())
                  : I.switchState(new rb());
                C.cancelMusicFadeTween();
                a = g.sound;
                b = G.returnSound("music", "freakyMenu", null);
                a.playMusic(b);
                C.changedDifficulty = !1;
                C.chartingMode = !1;
                break;
              case "Leave Charting Mode":
                ae.restartSong();
                C.chartingMode = !1;
                break;
              case "Practice Mode":
                C.instance.practiceMode = !C.instance.practiceMode;
                C.changedDifficulty = !0;
                this.practiceText.set_visible(C.instance.practiceMode);
                break;
              case "Restart Song":
                ae.restartSong();
                break;
              case "Resume":
                this.close();
                break;
              case "Skip Time":
                this.curTime < P.songPosition
                  ? ((C.startOnTime = this.curTime), ae.restartSong(!0))
                  : (this.curTime != P.songPosition &&
                      (C.instance.clearNotesBefore(this.curTime),
                      C.instance.setSongTime(this.curTime)),
                    this.close());
            }
          }
        },
        deleteSkipTimeText: function () {
          null != this.skipTimeText &&
            (this.skipTimeText.kill(),
            this.remove(this.skipTimeText),
            this.skipTimeText.destroy());
          this.skipTimeTracker = this.skipTimeText = null;
        },
        destroy: function () {
          this.pauseMusic.destroy();
          La.prototype.destroy.call(this);
        },
        changeSelection: function (a) {
          null == a && (a = 0);
          this.curSelected += a;
          g.sound.play(G.sound("scrollMenu"), 0.4);
          0 > this.curSelected &&
            (this.curSelected = this.menuItems.length - 1);
          this.curSelected >= this.menuItems.length && (this.curSelected = 0);
          for (var b = (a = 0), c = this.grpMenuShit.members; b < c.length; ) {
            var d = c[b];
            ++b;
            d.targetY = a - this.curSelected;
            ++a;
            d.set_alpha(0.6);
            0 == d.targetY &&
              (d.set_alpha(1),
              d == this.skipTimeTracker &&
                ((this.curTime = Math.max(0, P.songPosition)),
                this.updateSkipTimeText()));
          }
        },
        regenMenu: function () {
          for (var a = 0, b = this.grpMenuShit.members.length; a < b; ) {
            a++;
            var c = this.grpMenuShit.members[0];
            c.kill();
            this.grpMenuShit.remove(c, !0);
            c.destroy();
          }
          a = 0;
          for (b = this.menuItems.length; a < b; ) {
            var d = a++;
            c = new ib(90, 320, this.menuItems[d], !0);
            c.isMenuItem = !0;
            c.targetY = d;
            this.grpMenuShit.add(c);
            "Skip Time" == this.menuItems[d] &&
              ((this.skipTimeText = new W(0, 0, 0, "", 64)),
              this.skipTimeText.setFormat(
                "assets/fonts/vcr.ttf",
                64,
                -1,
                "center",
                Ya.OUTLINE,
                -16777216
              ),
              (d = this.skipTimeText.scrollFactor),
              d.set_x(0),
              d.set_y(0),
              this.skipTimeText.set_borderSize(2),
              (this.skipTimeTracker = c),
              this.add(this.skipTimeText),
              this.updateSkipTextStuff(),
              this.updateSkipTimeText());
          }
          this.curSelected = 0;
          this.changeSelection();
        },
        updateSkipTextStuff: function () {
          null != this.skipTimeText &&
            null != this.skipTimeTracker &&
            (this.skipTimeText.set_x(
              this.skipTimeTracker.x + this.skipTimeTracker.get_width() + 60
            ),
            this.skipTimeText.set_y(this.skipTimeTracker.y),
            this.skipTimeText.set_visible(1 <= this.skipTimeTracker.alpha));
        },
        updateSkipTimeText: function () {
          this.skipTimeText.set_text(
            Bb.formatTime(Math.max(0, Math.floor(this.curTime / 1e3)), !1) +
              " / " +
              Bb.formatTime(
                Math.max(0, Math.floor(g.sound.music._length / 1e3)),
                !1
              )
          );
        },
        __class__: ae,
      });
      var Rh = function (a, b, c) {
        this.originalScale = 1;
        this.lifeTime = this.decay = 0;
        F.call(this, a, b);
        this.set_color(c);
        a = G.returnGraphic("philly/particle", null);
        this.loadGraphic(a);
        this.set_antialiasing(y.globalAntialiasing);
        this.lifeTime = g.random.float(0.6, 0.9);
        this.decay = g.random.float(0.8, 1);
        y.flashing || ((this.decay *= 0.5), this.set_alpha(0.5));
        this.originalScale = g.random.float(0.75, 1);
        c = this.scale;
        b = a = this.originalScale;
        null == b && (b = 0);
        null == a && (a = 0);
        c.set_x(a);
        c.set_y(b);
        c = this.scrollFactor;
        a = g.random.float(0.3, 0.75);
        b = g.random.float(0.65, 0.75);
        null == b && (b = 0);
        null == a && (a = 0);
        c.set_x(a);
        c.set_y(b);
        c = this.velocity;
        a = g.random.float(-40, 40);
        b = g.random.float(-175, -250);
        null == b && (b = 0);
        null == a && (a = 0);
        c.set_x(a);
        c.set_y(b);
        c = this.acceleration;
        a = g.random.float(-10, 10);
        b = 25;
        null == b && (b = 0);
        null == a && (a = 0);
        c.set_x(a);
        c.set_y(b);
      };
      h.PhillyGlowParticle = Rh;
      Rh.__name__ = "PhillyGlowParticle";
      Rh.__super__ = F;
      Rh.prototype = q(F.prototype, {
        update: function (a) {
          this.lifeTime -= a;
          if (
            0 > this.lifeTime &&
            ((this.lifeTime = 0),
            this.set_alpha(this.alpha - this.decay * a),
            0 < this.alpha)
          ) {
            var b = this.scale,
              c = this.originalScale * this.alpha,
              d = this.originalScale * this.alpha;
            null == d && (d = 0);
            null == c && (c = 0);
            b.set_x(c);
            b.set_y(d);
          }
          F.prototype.update.call(this, a);
        },
        __class__: Rh,
      });
      var vk = function (a, b) {
        this.intendedAlpha = 1;
        this.originalHeight = 400;
        F.call(this, a, b);
        this.originalY = b;
        a = G.returnGraphic("philly/gradient", null);
        this.loadGraphic(a);
        this.set_antialiasing(y.globalAntialiasing);
        var c = this.scrollFactor;
        a = 0;
        b = 0.75;
        null == b && (b = 0);
        null == a && (a = 0);
        c.set_x(a);
        c.set_y(b);
        this.setGraphicSize(2e3, this.originalHeight);
        this.updateHitbox();
      };
      h.PhillyGlowGradient = vk;
      vk.__name__ = "PhillyGlowGradient";
      vk.__super__ = F;
      vk.prototype = q(F.prototype, {
        update: function (a) {
          var b = Math.round(this.get_height() - 1e3 * a);
          0 < b
            ? (this.set_alpha(this.intendedAlpha),
              this.setGraphicSize(2e3, b),
              this.updateHitbox(),
              this.set_y(
                this.originalY + (this.originalHeight - this.get_height())
              ))
            : (this.set_alpha(0), this.set_y(-5e3));
          F.prototype.update.call(this, a);
        },
        bop: function () {
          this.setGraphicSize(2e3, this.originalHeight);
          this.updateHitbox();
          this.set_y(this.originalY);
          this.set_alpha(this.intendedAlpha);
        },
        __class__: vk,
      });
      var C = function (a, b) {
        this.curLight = this.curLightEvent = -1;
        this.ratingName = "?";
        this.lastBeatHit = -1;
        this.lightningOffset = 8;
        this.lightningStrikeBeat = 0;
        this.lastStepHit = -1;
        this.startedMoving = !1;
        this.trainCooldown = 0;
        this.trainFinishing = !1;
        this.trainCars = 8;
        this.trainFrameTiming = 0;
        this.trainMoving = !1;
        this.fastCarCanDrive = !0;
        this.strumsBlocked = [];
        this.showCombo = this.showComboNum = this.showRating = !1;
        this.totalPlayed = this.totalNotesHit = 0;
        this.isDead = this.transitioning = !1;
        this.limoSpeed = 0;
        this.canPause = !0;
        this.startedCountdown = !1;
        this.canReset = !0;
        this.skipArrowStartTween = this.paused = !1;
        this.eventPushedMap = new Q();
        this.noteTypeMap = new Q();
        this.previousFrameTime =
          this.lastReportedPlayheadPosition =
          this.songTime =
          this.debugNum =
            0;
        this.finishTimer = null;
        this.dialogueCount = 0;
        this.lowY = 720;
        this.upY = -350;
        this.ofs = 50;
        this.yy2 = 550;
        this.xx2 = 850;
        this.yy = 500;
        this.xx = 420;
        this.mustHit = this.followChars = !1;
        this.useDirectionalCamera = !0;
        this.defaultOpponentStrumY = [];
        this.defaultOpponentStrumX = [];
        this.defaultPlayerStrumY = [];
        this.defaultPlayerStrumX = [];
        this.precacheList = new Q();
        this.introSoundsSuffix = "";
        this.luaArray = [];
        this.boyfriendIdled = !1;
        this.boyfriendIdleTime = 0;
        this.keysPressed = [];
        this.boyfriendCameraOffset =
          this.opponentCameraOffset =
          this.girlfriendCameraOffset =
            null;
        this.songLength = 0;
        this.inCutscene = this.skipCountdown = !1;
        this.singAnimations = ["singLEFT", "singDOWN", "singUP", "singRIGHT"];
        this.defaultCamZoom = 1.05;
        this.songScore = this.songHits = this.songMisses = 0;
        this.wiggleShit = new Tm();
        this.limoKillingState = 0;
        this.dialogueJson = null;
        this.dialogue = ["blah blah blah", "coolswag"];
        this.cameraSpeed = 1;
        this.botplaySine = 0;
        this.instakillOnMiss = this.cpuControlled = this.practiceMode = !1;
        this.healthGain = this.healthLoss = 1;
        this.updateTime = !0;
        this.generatedMusic = this.endingSong = this.startingSong = !1;
        this.sicks = this.goods = this.bads = this.shits = 0;
        this.ratingsData = [];
        this.combo = this.songPercent = 0;
        this.gfSpeed = this.health = 1;
        this.curSong = "";
        this.camZoomingMult = this.camZoomingDecay = 1;
        this.camZooming = !1;
        this.eventNotes = [];
        this.unspawnNotes = [];
        this.dad = this.gf = this.boyfriend = null;
        this.spawnTime = 2e3;
        this.playbackRate = 1;
        this.noteKillOffset = 350;
        this.songSpeedType = "multiplicative";
        this.songSpeed = 1;
        this.GF_Y = 130;
        this.GF_X = 400;
        this.BF_Y = this.DAD_X = this.DAD_Y = 100;
        this.BF_X = 770;
        this.modchartSaves = new Q();
        this.modchartTexts = new Q();
        this.modchartSounds = new Q();
        this.modchartTimers = new Q();
        this.modchartSprites = new Q();
        this.modchartTweens = new Q();
        this.variables = new Q();
        this.gfMap = new Q();
        this.dadMap = new Q();
        this.boyfriendMap = new Q();
        this.isCameraOnForcedPos = !1;
        I.call(this, a, b);
      };
      h.PlayState = C;
      C.__name__ = "PlayState";
      C.cancelMusicFadeTween = function () {
        null != g.sound.music.fadeTween && g.sound.music.fadeTween.cancel();
        g.sound.music.fadeTween = null;
      };
      C.__super__ = I;
      C.prototype = q(I.prototype, {
        create: function () {
          G.clearStoredMemory();
          C.instance = this;
          this.debugKeysChart = y.copyKey(y.keyBinds.h.debug_1);
          this.debugKeysCharacter = y.copyKey(y.keyBinds.h.debug_2);
          ae.songName = null;
          this.set_playbackRate(
            Object.prototype.hasOwnProperty.call(
              y.gameplaySettings.h,
              "songspeed"
            )
              ? y.gameplaySettings.h.songspeed
              : 1
          );
          this.keysArray = [
            y.copyKey(y.keyBinds.h.note_left),
            y.copyKey(y.keyBinds.h.note_down),
            y.copyKey(y.keyBinds.h.note_up),
            y.copyKey(y.keyBinds.h.note_right),
          ];
          this.controlArray = [
            "NOTE_LEFT",
            "NOTE_DOWN",
            "NOTE_UP",
            "NOTE_RIGHT",
          ];
          this.ratingsData.push(new Lh("sick"));
          var a = new Lh("good");
          a.ratingMod = 0.7;
          a.score = 200;
          a.noteSplash = !1;
          this.ratingsData.push(a);
          a = new Lh("bad");
          a.ratingMod = 0.4;
          a.score = 100;
          a.noteSplash = !1;
          this.ratingsData.push(a);
          a = new Lh("shit");
          a.ratingMod = 0;
          a.score = 50;
          a.noteSplash = !1;
          this.ratingsData.push(a);
          a = 0;
          for (var b = this.keysArray.length; a < b; )
            a++, this.keysPressed.push(!1);
          if (null != g.sound.music) {
            var c = g.sound.music;
            c.cleanup(c.autoDestroy, !0);
          }
          this.healthGain = Object.prototype.hasOwnProperty.call(
            y.gameplaySettings.h,
            "healthgain"
          )
            ? y.gameplaySettings.h.healthgain
            : 1;
          this.healthLoss = Object.prototype.hasOwnProperty.call(
            y.gameplaySettings.h,
            "healthloss"
          )
            ? y.gameplaySettings.h.healthloss
            : 1;
          this.instakillOnMiss =
            Object.prototype.hasOwnProperty.call(
              y.gameplaySettings.h,
              "instakill"
            ) && y.gameplaySettings.h.instakill;
          this.practiceMode =
            Object.prototype.hasOwnProperty.call(
              y.gameplaySettings.h,
              "practice"
            ) && y.gameplaySettings.h.practice;
          this.cpuControlled = !1;
          this.camGame = new Ob();
          this.camHUD = new Ob();
          this.camOther = new Ob();
          this.camHUD.bgColor &= 16777215;
          this.camHUD.bgColor |= 0;
          this.camOther.bgColor &= 16777215;
          this.camOther.bgColor |= 0;
          this.camGame.set_alpha(1);
          this.camHUD.set_alpha(1);
          this.camOther.set_alpha(1);
          g.cameras.reset(this.camGame);
          g.cameras.add(this.camHUD, !1);
          g.cameras.add(this.camOther, !1);
          this.grpNoteSplashes = new ma();
          g.cameras.setDefaultDrawTarget(this.camGame, !0);
          od.nextCamera = this.camOther;
          this.persistentDraw = this.persistentUpdate = !0;
          null == C.SONG && (C.SONG = Dd.loadFromJson("tutorial"));
          P.mapBPMChanges(C.SONG);
          P.changeBPM(C.SONG.bpm);
          hd.resetVariables();
          c = C.SONG.song;
          var d = new ya("[~&\\\\;:<>#]", "");
          b = new ya("[.,'\"%?!]", "");
          c = d.split(K.replace(c, " ", "-")).join("-");
          this.curSong = b = b.split(c).join("").toLowerCase();
          C.curStage = C.SONG.stage;
          wb.trace("stage is: " + C.curStage, {
            fileName: "source/PlayState.hx",
            lineNumber: 446,
            className: "PlayState",
            methodName: "create",
          });
          if (null == C.SONG.stage || 1 > C.SONG.stage.length)
            switch (b) {
              case "cocoa":
              case "eggnog":
                C.curStage = "mall";
                break;
              case "monster":
              case "south":
              case "spookeez":
                C.curStage = "spooky";
                break;
              case "blammed":
              case "philly":
              case "philly-nice":
              case "pico":
                C.curStage = "philly";
                break;
              case "high":
              case "milf":
              case "satin-panties":
                C.curStage = "limo";
                break;
              case "roses":
              case "senpai":
                C.curStage = "school";
                break;
              case "thorns":
                C.curStage = "schoolEvil";
                break;
              case "guns":
              case "stress":
              case "ugh":
                C.curStage = "tank";
                break;
              case "winter-horrorland":
                C.curStage = "mallEvil";
                break;
              default:
                C.curStage = "stage";
            }
          C.SONG.stage = C.curStage;
          d = pg.getStageFile(C.curStage);
          null == d &&
            (d = {
              directory: "",
              defaultZoom: 0.9,
              isPixelStage: !1,
              boyfriend: [770, 100],
              girlfriend: [400, 130],
              opponent: [100, 100],
              hide_girlfriend: !1,
              camera_boyfriend: [0, 0],
              camera_opponent: [0, 0],
              camera_girlfriend: [0, 0],
              camera_speed: 1,
            });
          this.defaultCamZoom = d.defaultZoom;
          C.isPixelStage = d.isPixelStage;
          this.BF_X = d.boyfriend[0];
          this.BF_Y = d.boyfriend[1];
          this.GF_X = d.girlfriend[0];
          this.GF_Y = d.girlfriend[1];
          this.DAD_X = d.opponent[0];
          this.DAD_Y = d.opponent[1];
          null != d.camera_speed && (this.cameraSpeed = d.camera_speed);
          this.boyfriendCameraOffset = d.camera_boyfriend;
          null == this.boyfriendCameraOffset &&
            (this.boyfriendCameraOffset = [0, 0]);
          this.opponentCameraOffset = d.camera_opponent;
          null == this.opponentCameraOffset &&
            (this.opponentCameraOffset = [0, 0]);
          this.girlfriendCameraOffset = d.camera_girlfriend;
          null == this.girlfriendCameraOffset &&
            (this.girlfriendCameraOffset = [0, 0]);
          this.boyfriendGroup = new wa(this.BF_X, this.BF_Y);
          this.dadGroup = new wa(this.DAD_X, this.DAD_Y);
          this.gfGroup = new wa(this.GF_X, this.GF_Y);
          switch (C.curStage) {
            case "shuck_stage":
              var e = new cc("shuckback", -1250, -200);
              a = e.scrollFactor;
              var f = 0.9;
              c = 0.9;
              null == c && (c = 0);
              null == f && (f = 0);
              a.set_x(f);
              a.set_y(c);
              a = e.scale;
              c = f = 0.65;
              null == c && (c = 0);
              null == f && (f = 0);
              a.set_x(f);
              a.set_y(c);
              e.updateHitbox();
              this.add(e);
              c = this.redScreen = new F(-500, -500).makeGraphic(
                2 * g.width,
                2 * g.height,
                -65536
              );
              c.set_x((g.width - c.get_width()) / 2);
              c.set_y((g.height - c.get_height()) / 2);
              this.redScreen.set_alpha(0);
              this.add(this.redScreen);
              c = this.WBG = new F(-500, -500).makeGraphic(
                2 * g.width,
                2 * g.height,
                -16777216
              );
              c.set_x((g.width - c.get_width()) / 2);
              c.set_y((g.height - c.get_height()) / 2);
              this.WBG.set_alpha(0);
              this.add(this.WBG);
              break;
            case "stage":
              (a = new cc("stageback", -600, -200, 0.9, 0.9)),
                this.add(a),
                (a = new cc("stagefront", -650, 600, 0.9, 0.9)),
                a.setGraphicSize((1.1 * a.get_width()) | 0),
                a.updateHitbox(),
                this.add(a),
                y.lowQuality ||
                  ((a = new cc("stage_light", -125, -100, 0.9, 0.9)),
                  a.setGraphicSize((1.1 * a.get_width()) | 0),
                  a.updateHitbox(),
                  this.add(a),
                  (a = new cc("stage_light", 1225, -100, 0.9, 0.9)),
                  a.setGraphicSize((1.1 * a.get_width()) | 0),
                  a.updateHitbox(),
                  a.set_flipX(!0),
                  this.add(a),
                  (a = new cc("stagecurtains", -500, -300, 1.3, 1.3)),
                  a.setGraphicSize((0.9 * a.get_width()) | 0),
                  a.updateHitbox(),
                  this.add(a)),
                (this.dadbattleSmokes = new wa());
          }
          C.isPixelStage && (this.introSoundsSuffix = "-pixel");
          this.add(this.gfGroup);
          this.add(this.dadGroup);
          this.add(this.boyfriendGroup);
          a = C.SONG.gfVersion;
          if (null == a || 1 > a.length) {
            switch (C.curStage) {
              case "limo":
                a = "gf-car";
                break;
              case "mall":
              case "mallEvil":
                a = "gf-christmas";
                break;
              case "school":
              case "schoolEvil":
                a = "gf-pixel";
                break;
              case "tank":
                a = "gf-tankmen";
                break;
              default:
                a = "gf";
            }
            C.SONG.gfVersion = a;
          }
          d.hide_girlfriend ||
            ((this.gf = new yc(0, 0, a)),
            this.startCharacterPos(this.gf),
            (a = this.gf.scrollFactor),
            (c = f = 0.95),
            null == c && (c = 0),
            null == f && (f = 0),
            a.set_x(f),
            a.set_y(c),
            this.gfGroup.add(this.gf),
            this.startCharacterLua(this.gf.curCharacter));
          this.dad = new yc(0, 0, C.SONG.player2);
          this.startCharacterPos(this.dad, !0);
          this.dadGroup.add(this.dad);
          this.startCharacterLua(this.dad.curCharacter);
          this.boyfriend = new Kh(0, 0, C.SONG.player1);
          this.startCharacterPos(this.boyfriend);
          this.boyfriendGroup.add(this.boyfriend);
          this.startCharacterLua(this.boyfriend.curCharacter);
          f = this.girlfriendCameraOffset[0];
          c = this.girlfriendCameraOffset[1];
          null == c && (c = 0);
          null == f && (f = 0);
          d = a = new ba(f, c);
          null != this.gf &&
            (d.set_x(
              d.x + (this.gf.getGraphicMidpoint().x + this.gf.cameraPosition[0])
            ),
            d.set_y(
              d.y + (this.gf.getGraphicMidpoint().y + this.gf.cameraPosition[1])
            ));
          K.startsWith(this.dad.curCharacter, "gf") &&
            (this.dad.setPosition(this.GF_X, this.GF_Y),
            null != this.gf && this.gf.set_visible(!1));
          "shuck_stage" == C.curStage &&
            ((e = new cc("shuckfront", -1250, -200)),
            (a = e.scrollFactor),
            (c = f = 0.9),
            null == c && (c = 0),
            null == f && (f = 0),
            a.set_x(f),
            a.set_y(c),
            (a = e.scale),
            (c = f = 0.65),
            null == c && (c = 0),
            null == f && (f = 0),
            a.set_x(f),
            a.set_y(c),
            e.updateHitbox(),
            this.add(e));
          a = G.getPath("data/" + (b + "/dialogue.json"), "TEXT", null);
          aa.exists(a) && (this.dialogueJson = Ib.parseDialogue(a));
          a = G.getPath("data/" + (b + "/" + b + "Dialogue.txt"), "TEXT", null);
          aa.exists(a) && (this.dialogue = Ta.coolTextFile(a));
          b = new gk(!1, this.dialogue);
          a = b.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          b.finishThing = n(this, this.startCountdown);
          b.nextDialogueThing = n(this, this.startNextDialogue);
          b.skipDialogueThing = n(this, this.skipDialogue);
          P.songPosition = -5e3 / P.songPosition;
          this.strumLine = new F(
            y.middleScroll ? C.STRUM_X_MIDDLESCROLL : C.STRUM_X,
            50
          ).makeGraphic(g.width, 10);
          y.downScroll && this.strumLine.set_y(g.height - 150);
          a = this.strumLine.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          c = "Disabled" != y.timeBarType;
          this.timeTxt = new W(C.STRUM_X + g.width / 2 - 248, 19, 400, "", 32);
          this.timeTxt.setFormat(
            "assets/fonts/vcr.ttf",
            32,
            -1,
            "center",
            Ya.OUTLINE,
            -16777216
          );
          a = this.timeTxt.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.timeTxt.set_alpha(0);
          this.timeTxt.set_borderSize(2);
          this.timeTxt.set_visible(c);
          y.downScroll && this.timeTxt.set_y(g.height - 44);
          "Song Name" == y.timeBarType && this.timeTxt.set_text(C.SONG.song);
          this.updateTime = c;
          this.timeBarBG = new qf("timeBar");
          this.timeBarBG.set_x(this.timeTxt.x);
          this.timeBarBG.set_y(this.timeTxt.y + this.timeTxt.get_height() / 4);
          a = this.timeBarBG.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.timeBarBG.set_alpha(0);
          this.timeBarBG.set_visible(c);
          this.timeBarBG.set_color(-16777216);
          this.timeBarBG.xAdd = -4;
          this.timeBarBG.yAdd = -4;
          this.add(this.timeBarBG);
          this.timeBar = new Xf(
            this.timeBarBG.x + 4,
            this.timeBarBG.y + 4,
            jd.LEFT_TO_RIGHT,
            (this.timeBarBG.get_width() - 8) | 0,
            (this.timeBarBG.get_height() - 8) | 0,
            this,
            "songPercent",
            0,
            1
          );
          a = this.timeBar.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.timeBar.createFilledBar(-16777216, -1);
          this.timeBar.set_numDivisions(800);
          this.timeBar.set_alpha(0);
          this.timeBar.set_visible(c);
          this.add(this.timeBar);
          this.add(this.timeTxt);
          this.timeBarBG.sprTracker = this.timeBar;
          this.strumLineNotes = new ma();
          this.add(this.strumLineNotes);
          this.add(this.grpNoteSplashes);
          "Song Name" == y.timeBarType &&
            (this.timeTxt.set_size(24), (a = this.timeTxt), a.set_y(a.y + 3));
          var k = new rh(100, 100, 0);
          this.grpNoteSplashes.add(k);
          new fc().start(0.1, function (a) {
            k.set_alpha(0);
          });
          this.opponentStrums = new ma();
          this.playerStrums = new ma();
          this.generateSong(C.SONG.song);
          this.camFollow = a = new ba(0, 0);
          this.camFollowPos = new ca(0, 0, 1, 1);
          this.snapCamFollowToPos(d.x, d.y);
          null != C.prevCamFollow &&
            ((this.camFollow = C.prevCamFollow), (C.prevCamFollow = null));
          null != C.prevCamFollowPos &&
            ((this.camFollowPos = C.prevCamFollowPos),
            (C.prevCamFollowPos = null));
          this.add(this.camFollowPos);
          g.camera.follow(this.camFollowPos, og.LOCKON, 1);
          g.camera.set_zoom(this.defaultCamZoom);
          c = g.camera;
          d = this.camFollow;
          a = c.scroll;
          f = d.x - 0.5 * c.width;
          c = d.y - 0.5 * c.height;
          null == c && (c = 0);
          null == f && (f = 0);
          a.set_x(f);
          a.set_y(c);
          d._weak && d.put();
          c = g.worldBounds;
          d = a = 0;
          f = g.width;
          e = g.height;
          null == e && (e = 0);
          null == f && (f = 0);
          null == d && (d = 0);
          null == a && (a = 0);
          c.x = a;
          c.y = d;
          c.width = f;
          c.height = e;
          g.fixedTimestep = !1;
          this.moveCameraSection();
          this.healthBarBG = new qf("healthBar");
          this.healthBarBG.set_y(0.89 * g.height);
          c = this.healthBarBG;
          a = 1;
          null == a && (a = 17);
          (1 != a && 17 != a) || c.set_x((g.width - c.get_width()) / 2);
          (16 != a && 17 != a) || c.set_y((g.height - c.get_height()) / 2);
          a = this.healthBarBG.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.healthBarBG.set_visible(!y.hideHud);
          this.healthBarBG.xAdd = -4;
          this.healthBarBG.yAdd = -4;
          this.add(this.healthBarBG);
          y.downScroll && this.healthBarBG.set_y(0.11 * g.height);
          this.healthBar = new Xf(
            this.healthBarBG.x + 4,
            this.healthBarBG.y + 4,
            jd.RIGHT_TO_LEFT,
            (this.healthBarBG.get_width() - 8) | 0,
            (this.healthBarBG.get_height() - 8) | 0,
            this,
            "health",
            0,
            2
          );
          a = this.healthBar.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.healthBar.set_visible(!y.hideHud);
          this.healthBar.set_alpha(y.healthBarAlpha);
          this.add(this.healthBar);
          this.healthBarBG.sprTracker = this.healthBar;
          this.iconP1 = new sf(this.boyfriend.healthIcon, !0);
          this.iconP1.set_y(this.healthBar.y - 75);
          this.iconP1.set_visible(!y.hideHud);
          this.iconP1.set_alpha(y.healthBarAlpha);
          this.add(this.iconP1);
          this.iconP2 = new sf(this.dad.healthIcon, !1);
          this.iconP2.set_y(this.healthBar.y - 75);
          this.iconP2.set_visible(!y.hideHud);
          this.iconP2.set_alpha(y.healthBarAlpha);
          this.add(this.iconP2);
          this.reloadHealthBarColors();
          this.scoreTxt = new W(0, this.healthBarBG.y + 36, g.width, "", 20);
          this.scoreTxt.setFormat(
            "assets/fonts/vcr.ttf",
            20,
            -1,
            "center",
            Ya.OUTLINE,
            -16777216
          );
          a = this.scoreTxt.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.scoreTxt.set_borderSize(1.25);
          this.scoreTxt.set_visible(!y.hideHud);
          this.add(this.scoreTxt);
          this.botplayTxt = new W(
            400,
            this.timeBarBG.y + 55,
            g.width - 800,
            "BOTPLAY",
            32
          );
          this.botplayTxt.setFormat(
            "assets/fonts/vcr.ttf",
            32,
            -1,
            "center",
            Ya.OUTLINE,
            -16777216
          );
          a = this.botplayTxt.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.botplayTxt.set_borderSize(1.25);
          this.botplayTxt.set_visible(this.cpuControlled);
          this.add(this.botplayTxt);
          y.downScroll && this.botplayTxt.set_y(this.timeBarBG.y - 78);
          this.strumLineNotes.set_cameras([this.camHUD]);
          this.grpNoteSplashes.set_cameras([this.camHUD]);
          this.notes.set_cameras([this.camHUD]);
          this.healthBar.set_cameras([this.camHUD]);
          this.healthBarBG.set_cameras([this.camHUD]);
          this.iconP1.set_cameras([this.camHUD]);
          this.iconP2.set_cameras([this.camHUD]);
          this.scoreTxt.set_cameras([this.camHUD]);
          this.botplayTxt.set_cameras([this.camHUD]);
          this.timeBar.set_cameras([this.camHUD]);
          this.timeBarBG.set_cameras([this.camHUD]);
          this.timeTxt.set_cameras([this.camHUD]);
          b.set_cameras([this.camHUD]);
          this.startingSong = !0;
          this.noteTypeMap.h = Object.create(null);
          this.noteTypeMap = null;
          this.eventPushedMap.h = Object.create(null);
          this.eventPushedMap = null;
          C.isStoryMode && !C.seenCutscene
            ? ((a = this.curSong), this.startCountdown(), (C.seenCutscene = !0))
            : this.startCountdown();
          this.RecalculateRating();
          0 < y.hitsoundVolume && (this.precacheList.h.hitsound = "sound");
          this.precacheList.h.missnote1 = "sound";
          this.precacheList.h.missnote2 = "sound";
          this.precacheList.h.missnote3 = "sound";
          null != ae.songName
            ? (this.precacheList.h[ae.songName] = "music")
            : "None" != y.pauseMusic &&
              ((a = this.precacheList),
              (c = y.pauseMusic),
              (d = new ya("[~&\\\\;:<>#]", "")),
              (b = new ya("[.,'\"%?!]", "")),
              (c = d.split(K.replace(c, " ", "-")).join("-")),
              (b = b.split(c).join("").toLowerCase()),
              (a.h[b] = "music"));
          this.precacheList.h.alphabet = "image";
          y.controllerMode ||
            (sa
              .get_current()
              .stage.addEventListener("keyDown", n(this, this.onKeyPress)),
            sa
              .get_current()
              .stage.addEventListener("keyUp", n(this, this.onKeyRelease)));
          this.callOnLuas("onCreatePost", []);
          c = this.blackScreen = new F().makeGraphic(
            g.width,
            g.height,
            -16777216
          );
          c.set_x((g.width - c.get_width()) / 2);
          c.set_y((g.height - c.get_height()) / 2);
          this.blackScreen.set_cameras([this.camOther]);
          this.add(this.blackScreen);
          this.upperBar = new F(-110, -350).makeGraphic(1500, 350, -16777216);
          this.upperBar.set_cameras([this.camHUD]);
          this.add(this.upperBar);
          this.lowerBar = new F(-110, 720).makeGraphic(1500, 350, -16777216);
          this.lowerBar.set_cameras([this.camHUD]);
          this.add(this.lowerBar);
          this.upY = this.upperBar.y;
          this.lowY = this.lowerBar.y;
          this.redVG = new cc("RedVG", 0, 0);
          this.redVG.set_cameras([this.camOther]);
          c = this.redVG;
          c.set_x((g.width - c.get_width()) / 2);
          c.set_y((g.height - c.get_height()) / 2);
          this.redVG.set_alpha(1e-5);
          this.add(this.redVG);
          this.lyrics = new W(0, 480, g.width, "", 28);
          this.lyrics.setFormat(
            "assets/fonts/vcr.ttf",
            28,
            -65536,
            "center",
            Ya.OUTLINE,
            -16777216
          );
          a = this.lyrics.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.lyrics.set_borderSize(2);
          this.lyrics.set_antialiasing(y.globalAntialiasing);
          this.lyrics.set_cameras([this.camHUD]);
          this.add(this.lyrics);
          I.prototype.create.call(this);
          this.cacheCountdown();
          this.cachePopUpScore();
          c = this.precacheList.h;
          d = Object.keys(c);
          f = d.length;
          for (e = 0; e < f; )
            switch (((a = b = d[e++]), c[b])) {
              case "image":
                G.returnGraphic(a, null);
                break;
              case "music":
                a = G.returnSound("music", a, null);
                break;
              case "sound":
                G.sound(a);
            }
          G.clearUnusedMemory();
          od.nextCamera = this.camOther;
        },
        set_songSpeed: function (a) {
          if (this.generatedMusic) {
            for (
              var b = a / this.songSpeed, c = new Mg(this.notes.members, null);
              c.hasNext();

            )
              c.next().resizeByRatio(b);
            for (var d = 0, e = this.unspawnNotes; d < e.length; )
              (c = e[d]), ++d, c.resizeByRatio(b);
          }
          this.songSpeed = a;
          this.noteKillOffset = 350 / this.songSpeed;
          return a;
        },
        set_playbackRate: function (a) {
          this.generatedMusic &&
            (null != this.vocals && this.vocals.set_pitch(a),
            g.sound.music.set_pitch(a));
          this.playbackRate = a;
          g.animationTimeScale = a;
          P.safeZoneOffset = (y.safeFrames / 60) * 1e3 * a;
          this.setOnLuas("playbackRate", this.playbackRate);
          return this.playbackRate;
        },
        reloadHealthBarColors: function () {
          var a = this.healthBar,
            b = this.dad.healthColorArray[0],
            c = this.dad.healthColorArray[1],
            d = this.dad.healthColorArray[2],
            e = ob._new(),
            f = 255;
          null == f && (f = 255);
          e =
            (((e & -16711681) | ((255 < b ? 255 : 0 > b ? 0 : b) << 16)) &
              -65281) |
            ((255 < c ? 255 : 0 > c ? 0 : c) << 8);
          e &= -256;
          e |= 255 < d ? 255 : 0 > d ? 0 : d;
          e &= 16777215;
          e |= (255 < f ? 255 : 0 > f ? 0 : f) << 24;
          b = this.boyfriend.healthColorArray[0];
          c = this.boyfriend.healthColorArray[1];
          d = this.boyfriend.healthColorArray[2];
          var k = ob._new();
          f = 255;
          null == f && (f = 255);
          k =
            (((k & -16711681) | ((255 < b ? 255 : 0 > b ? 0 : b) << 16)) &
              -65281) |
            ((255 < c ? 255 : 0 > c ? 0 : c) << 8);
          k &= -256;
          k |= 255 < d ? 255 : 0 > d ? 0 : d;
          k &= 16777215;
          k |= (255 < f ? 255 : 0 > f ? 0 : f) << 24;
          a.createFilledBar(e, k);
          this.healthBar.updateBar();
        },
        addCharacterToList: function (a, b) {
          switch (b) {
            case 0:
              Object.prototype.hasOwnProperty.call(this.boyfriendMap.h, a) ||
                ((b = new Kh(0, 0, a)),
                (this.boyfriendMap.h[a] = b),
                this.boyfriendGroup.add(b),
                this.startCharacterPos(b),
                b.set_alpha(1e-5),
                this.startCharacterLua(b.curCharacter));
              break;
            case 1:
              Object.prototype.hasOwnProperty.call(this.dadMap.h, a) ||
                ((b = new yc(0, 0, a)),
                (this.dadMap.h[a] = b),
                this.dadGroup.add(b),
                this.startCharacterPos(b, !0),
                b.set_alpha(1e-5),
                this.startCharacterLua(b.curCharacter));
              break;
            case 2:
              if (
                null != this.gf &&
                !Object.prototype.hasOwnProperty.call(this.gfMap.h, a)
              ) {
                b = new yc(0, 0, a);
                var c = b.scrollFactor,
                  d = 0.95,
                  e = 0.95;
                null == e && (e = 0);
                null == d && (d = 0);
                c.set_x(d);
                c.set_y(e);
                this.gfMap.h[a] = b;
                this.gfGroup.add(b);
                this.startCharacterPos(b);
                b.set_alpha(1e-5);
                this.startCharacterLua(b.curCharacter);
              }
          }
        },
        startCharacterLua: function (a) {},
        getLuaObject: function (a, b) {
          null == b && (b = !0);
          return Object.prototype.hasOwnProperty.call(this.modchartSprites.h, a)
            ? this.modchartSprites.h[a]
            : b && Object.prototype.hasOwnProperty.call(this.modchartTexts.h, a)
            ? this.modchartTexts.h[a]
            : Object.prototype.hasOwnProperty.call(this.variables.h, a)
            ? this.variables.h[a]
            : null;
        },
        startCharacterPos: function (a, b) {
          null == b && (b = !1);
          if (b && K.startsWith(a.curCharacter, "gf")) {
            a.setPosition(this.GF_X, this.GF_Y);
            b = a.scrollFactor;
            var c = 0.95,
              d = 0.95;
            null == d && (d = 0);
            null == c && (c = 0);
            b.set_x(c);
            b.set_y(d);
            a.danceEveryNumBeats = 2;
          }
          a.set_x(a.x + a.positionArray[0]);
          a.set_y(a.y + a.positionArray[1]);
        },
        startVideo: function (a) {
          var b = this;
          this.inCutscene = !0;
          var c = G.video(a);
          aa.exists(c)
            ? ((this.videoCurrentlyPlaying = new Tc(c)),
              (this.isVideoCurrentlyPlaying = !0),
              (this.videoCurrentlyPlaying.finishCallback = function () {
                b.inCutscene = !1;
                b.startAndEnd();
              }))
            : (g.log.advanced("Couldnt find video file: " + a, Ja.WARNING, !0),
              this.startAndEnd());
        },
        startAndEnd: function () {
          this.endingSong ? this.endSong() : this.startCountdown();
        },
        startDialogue: function (a, b) {
          var c = this;
          null == this.psychDialogue &&
            (0 < a.dialogue.length
              ? ((this.inCutscene = !0),
                (this.precacheList.h.dialogue = "sound"),
                (this.precacheList.h.dialogueClose = "sound"),
                (this.psychDialogue = new Ib(a, b)),
                (a = this.psychDialogue.scrollFactor),
                a.set_x(0),
                a.set_y(0),
                (this.psychDialogue.finishThing = this.endingSong
                  ? function () {
                      c.psychDialogue = null;
                      c.endSong();
                    }
                  : function () {
                      c.psychDialogue = null;
                      c.startCountdown();
                    }),
                (this.psychDialogue.nextDialogueThing = n(
                  this,
                  this.startNextDialogue
                )),
                (this.psychDialogue.skipDialogueThing = n(
                  this,
                  this.skipDialogue
                )),
                this.psychDialogue.set_cameras([this.camHUD]),
                this.add(this.psychDialogue))
              : (g.log.advanced(
                  "Your dialogue file is badly formatted!",
                  Ja.WARNING,
                  !0
                ),
                this.endingSong ? this.endSong() : this.startCountdown()));
        },
        schoolIntro: function (a) {
          var b = this;
          this.inCutscene = !0;
          var c = new F(-100, -100).makeGraphic(
              2 * g.width,
              2 * g.height,
              -16777216
            ),
            d = c.scrollFactor;
          d.set_x(0);
          d.set_y(0);
          this.add(c);
          var e = new F(-100, -100).makeGraphic(
            2 * g.width,
            2 * g.height,
            -58575
          );
          d = e.scrollFactor;
          d.set_x(0);
          d.set_y(0);
          var f = new F();
          d = G.returnGraphic("weeb/senpaiCrazy", null);
          f.set_frames(
            jb.fromSparrow(
              d,
              G.getPath("images/weeb/senpaiCrazy.xml", "TEXT", null)
            )
          );
          f.animation.addByPrefix("idle", "Senpai Pre Explosion", 24, !1);
          f.setGraphicSize((6 * f.get_width()) | 0);
          d = f.scrollFactor;
          d.set_x(0);
          d.set_y(0);
          f.updateHitbox();
          f.set_x((g.width - f.get_width()) / 2);
          f.set_y((g.height - f.get_height()) / 2);
          f.set_x(f.x + 300);
          var k = C.SONG.song,
            r = new ya("[~&\\\\;:<>#]", "");
          d = new ya("[.,'\"%?!]", "");
          k = r.split(K.replace(k, " ", "-")).join("-");
          d = d.split(k).join("").toLowerCase();
          if ("roses" == d || "thorns" == d)
            this.remove(c),
              "thorns" == d && (this.add(e), this.camHUD.set_visible(!1));
          new fc().start(0.3, function (d) {
            c.set_alpha(c.alpha - 0.15);
            if (0 < c.alpha) d.reset(0.3);
            else {
              if (null != a) {
                var k = C.SONG.song,
                  l = new ya("[~&\\\\;:<>#]", "");
                d = new ya("[.,'\"%?!]", "");
                k = l.split(K.replace(k, " ", "-")).join("-");
                "thorns" == d.split(k).join("").toLowerCase()
                  ? (b.add(f),
                    f.set_alpha(0),
                    new fc().start(0.3, function (c) {
                      f.set_alpha(f.alpha + 0.15);
                      1 > f.alpha
                        ? c.reset()
                        : (f.animation.play("idle"),
                          g.sound.play(
                            G.sound("Senpai_Dies"),
                            1,
                            !1,
                            null,
                            !0,
                            function () {
                              b.remove(f);
                              b.remove(e);
                              g.camera.fade(
                                -1,
                                0.01,
                                !0,
                                function () {
                                  b.add(a);
                                  b.camHUD.set_visible(!0);
                                },
                                !0
                              );
                            }
                          ),
                          new fc().start(3.2, function (a) {
                            g.camera.fade(-1, 1.6, !1);
                          }));
                    }))
                  : b.add(a);
              } else b.startCountdown();
              b.remove(c);
            }
          });
        },
        cacheCountdown: function () {
          var a = Object.create(null);
          a["default"] = ["ready", "set", "go"];
          a.pixel = [
            "pixelUI/ready-pixel",
            "pixelUI/set-pixel",
            "pixelUI/date-pixel",
          ];
          var b = a["default"];
          C.isPixelStage && (b = a.pixel);
          for (a = 0; a < b.length; ) {
            var c = b[a];
            ++a;
            G.returnGraphic(c, null);
          }
          G.sound("intro3" + this.introSoundsSuffix);
          G.sound("intro2" + this.introSoundsSuffix);
          G.sound("intro1" + this.introSoundsSuffix);
          G.sound("introGo" + this.introSoundsSuffix);
        },
        startCountdown: function () {
          var a = this;
          if (this.startedCountdown) this.callOnLuas("onStartCountdown", []);
          else if (
            ((this.inCutscene = !1),
            this.callOnLuas("onStartCountdown", [], !1) != Ec.Function_Stop)
          ) {
            if (this.skipCountdown || 0 < C.startOnTime)
              this.skipArrowStartTween = !0;
            this.generateStaticArrows(0);
            this.generateStaticArrows(1);
            for (var b = 0, c = this.playerStrums.length; b < c; ) {
              var d = b++;
              this.defaultPlayerStrumX[d] = this.playerStrums.members[d].x;
              this.defaultPlayerStrumY[d] = this.playerStrums.members[d].y;
            }
            b = 0;
            for (c = this.opponentStrums.length; b < c; )
              (d = b++),
                (this.defaultOpponentStrumX[d] =
                  this.opponentStrums.members[d].x),
                (this.defaultOpponentStrumY[d] =
                  this.opponentStrums.members[d].y);
            this.startedCountdown = !0;
            P.songPosition = 5 * -P.crochet;
            this.setOnLuas("startedCountdown", !0);
            this.callOnLuas("onCountdownStarted", []);
            var e = 0;
            0 > C.startOnTime && (C.startOnTime = 0);
            0 < C.startOnTime
              ? (this.clearNotesBefore(C.startOnTime),
                this.setSongTime(C.startOnTime - 350))
              : this.skipCountdown
              ? this.setSongTime(0)
              : (this.startTimer = new fc().start(
                  P.crochet / 1e3 / this.playbackRate,
                  function (b) {
                    null == a.gf ||
                      0 !=
                        (b.loops - b._loopsCounter) %
                          Math.round(a.gfSpeed * a.gf.danceEveryNumBeats) ||
                      null == a.gf.animation._curAnim ||
                      K.startsWith(a.gf.animation._curAnim.name, "sing") ||
                      a.gf.stunned ||
                      a.gf.dance();
                    0 !=
                      (b.loops - b._loopsCounter) %
                        a.boyfriend.danceEveryNumBeats ||
                      null == a.boyfriend.animation._curAnim ||
                      K.startsWith(
                        a.boyfriend.animation._curAnim.name,
                        "sing"
                      ) ||
                      a.boyfriend.stunned ||
                      a.boyfriend.dance();
                    0 !=
                      (b.loops - b._loopsCounter) % a.dad.danceEveryNumBeats ||
                      null == a.dad.animation._curAnim ||
                      K.startsWith(a.dad.animation._curAnim.name, "sing") ||
                      a.dad.stunned ||
                      a.dad.dance();
                    var c = Object.create(null);
                    c["default"] = ["ready", "set", "go"];
                    c.pixel = [
                      "pixelUI/ready-pixel",
                      "pixelUI/set-pixel",
                      "pixelUI/date-pixel",
                    ];
                    var d = c["default"];
                    b = y.globalAntialiasing;
                    C.isPixelStage && ((d = c.pixel), (b = !1));
                    "mall" == C.curStage &&
                      (y.lowQuality || a.upperBoppers.dance(!0),
                      a.bottomBoppers.dance(!0),
                      a.santa.dance(!0));
                    switch (e) {
                      case 0:
                        g.sound.play(
                          G.sound("intro3" + a.introSoundsSuffix),
                          0.6
                        );
                        break;
                      case 1:
                        c = new F();
                        d = G.returnGraphic(d[0], null);
                        a.countdownReady = c.loadGraphic(d);
                        a.countdownReady.set_cameras([a.camHUD]);
                        d = a.countdownReady.scrollFactor;
                        d.set_x(0);
                        d.set_y(0);
                        a.countdownReady.updateHitbox();
                        C.isPixelStage &&
                          a.countdownReady.setGraphicSize(
                            (a.countdownReady.get_width() * C.daPixelZoom) | 0
                          );
                        d = a.countdownReady;
                        d.set_x((g.width - d.get_width()) / 2);
                        d.set_y((g.height - d.get_height()) / 2);
                        a.countdownReady.set_antialiasing(b);
                        a.insert(a.members.indexOf(a.notes), a.countdownReady);
                        la.tween(
                          a.countdownReady,
                          { alpha: 0 },
                          P.crochet / 1e3,
                          {
                            ease: Aa.cubeInOut,
                            onComplete: function (b) {
                              a.remove(a.countdownReady);
                              a.countdownReady.destroy();
                            },
                          }
                        );
                        g.sound.play(
                          G.sound("intro2" + a.introSoundsSuffix),
                          0.6
                        );
                        break;
                      case 2:
                        c = new F();
                        d = G.returnGraphic(d[1], null);
                        a.countdownSet = c.loadGraphic(d);
                        a.countdownSet.set_cameras([a.camHUD]);
                        d = a.countdownSet.scrollFactor;
                        d.set_x(0);
                        d.set_y(0);
                        C.isPixelStage &&
                          a.countdownSet.setGraphicSize(
                            (a.countdownSet.get_width() * C.daPixelZoom) | 0
                          );
                        d = a.countdownSet;
                        d.set_x((g.width - d.get_width()) / 2);
                        d.set_y((g.height - d.get_height()) / 2);
                        a.countdownSet.set_antialiasing(b);
                        a.insert(a.members.indexOf(a.notes), a.countdownSet);
                        la.tween(
                          a.countdownSet,
                          { alpha: 0 },
                          P.crochet / 1e3,
                          {
                            ease: Aa.cubeInOut,
                            onComplete: function (b) {
                              a.remove(a.countdownSet);
                              a.countdownSet.destroy();
                            },
                          }
                        );
                        g.sound.play(
                          G.sound("intro1" + a.introSoundsSuffix),
                          0.6
                        );
                        break;
                      case 3:
                        (c = new F()),
                          (d = G.returnGraphic(d[2], null)),
                          (a.countdownGo = c.loadGraphic(d)),
                          a.countdownGo.set_cameras([a.camHUD]),
                          (d = a.countdownGo.scrollFactor),
                          d.set_x(0),
                          d.set_y(0),
                          C.isPixelStage &&
                            a.countdownGo.setGraphicSize(
                              (a.countdownGo.get_width() * C.daPixelZoom) | 0
                            ),
                          a.countdownGo.updateHitbox(),
                          (d = a.countdownGo),
                          d.set_x((g.width - d.get_width()) / 2),
                          d.set_y((g.height - d.get_height()) / 2),
                          a.countdownGo.set_antialiasing(b),
                          a.insert(a.members.indexOf(a.notes), a.countdownGo),
                          la.tween(
                            a.countdownGo,
                            { alpha: 0 },
                            P.crochet / 1e3,
                            {
                              ease: Aa.cubeInOut,
                              onComplete: function (b) {
                                a.remove(a.countdownGo);
                                a.countdownGo.destroy();
                              },
                            }
                          ),
                          g.sound.play(
                            G.sound("introGo" + a.introSoundsSuffix),
                            0.6
                          );
                    }
                    a.notes.forEachAlive(function (a) {
                      if (y.opponentStrums || a.mustPress)
                        (a.copyAlpha = !1),
                          a.set_alpha(a.multAlpha),
                          y.middleScroll &&
                            !a.mustPress &&
                            a.set_alpha(0.35 * a.alpha);
                    });
                    a.callOnLuas("onCountdownTick", [e]);
                    e += 1;
                  },
                  5
                ));
          }
        },
        addBehindGF: function (a) {
          this.insert(this.members.indexOf(this.gfGroup), a);
        },
        addBehindBF: function (a) {
          this.insert(this.members.indexOf(this.boyfriendGroup), a);
        },
        addBehindDad: function (a) {
          this.insert(this.members.indexOf(this.dadGroup), a);
        },
        clearNotesBefore: function (a) {
          for (var b = this.unspawnNotes.length - 1; 0 <= b; ) {
            var c = this.unspawnNotes[b];
            c.strumTime - 350 < a &&
              (c.set_active(!1),
              c.set_visible(!1),
              (c.ignoreNote = !0),
              c.kill(),
              X.remove(this.unspawnNotes, c),
              c.destroy());
            --b;
          }
          for (b = this.notes.length - 1; 0 <= b; )
            (c = this.notes.members[b]),
              c.strumTime - 350 < a &&
                (c.set_active(!1),
                c.set_visible(!1),
                (c.ignoreNote = !0),
                c.kill(),
                this.notes.remove(c, !0),
                c.destroy()),
              --b;
        },
        updateScore: function (a) {
          null == a && (a = !1);
          var b = this;
          this.scoreTxt.set_text(
            "Score: " +
              this.songScore +
              " | Misses: " +
              this.songMisses +
              " | Rating: " +
              this.ratingName +
              ("?" != this.ratingName
                ? " (" +
                  Sa.floorDecimal(100 * this.ratingPercent, 2) +
                  "%) - " +
                  this.ratingFC
                : "")
          );
          !y.scoreZoom ||
            a ||
            this.cpuControlled ||
            (null != this.scoreTxtTween && this.scoreTxtTween.cancel(),
            this.scoreTxt.scale.set_x(1.075),
            this.scoreTxt.scale.set_y(1.075),
            (this.scoreTxtTween = la.tween(
              this.scoreTxt.scale,
              { x: 1, y: 1 },
              0.2,
              {
                onComplete: function (a) {
                  b.scoreTxtTween = null;
                },
              }
            )));
          this.callOnLuas("onUpdateScore", [a]);
        },
        setSongTime: function (a) {
          0 > a && (a = 0);
          g.sound.music.pause();
          this.vocals.pause();
          g.sound.music.set_time(a);
          g.sound.music.set_pitch(this.playbackRate);
          g.sound.music.play();
          P.songPosition <= this.vocals._length &&
            (this.vocals.set_time(a), this.vocals.set_pitch(this.playbackRate));
          this.vocals.play();
          this.songTime = P.songPosition = a;
        },
        startNextDialogue: function () {
          this.dialogueCount++;
          this.callOnLuas("onNextDialogue", [this.dialogueCount]);
        },
        skipDialogue: function () {
          this.callOnLuas("onSkipDialogue", [this.dialogueCount]);
        },
        startSong: function () {
          this.startingSong = !1;
          this.previousFrameTime = g.game.ticks;
          this.lastReportedPlayheadPosition = 0;
          g.sound.playMusic(
            "songs:assets/songs/" +
              K.replace(C.SONG.song.toLowerCase(), " ", "-") +
              "/Inst.mp3",
            1,
            !1
          );
          g.sound.music.set_pitch(this.playbackRate);
          var a = n(this, this.finishSong);
          g.sound.music.onComplete = function () {
            a();
          };
          this.vocals.play();
          0 < C.startOnTime && this.setSongTime(C.startOnTime - 500);
          C.startOnTime = 0;
          this.paused && (g.sound.music.pause(), this.vocals.pause());
          this.songLength = g.sound.music._length;
          la.tween(this.timeBar, { alpha: 1 }, 0.5, { ease: Aa.circOut });
          la.tween(this.timeTxt, { alpha: 1 }, 0.5, { ease: Aa.circOut });
          this.setOnLuas("songLength", this.songLength);
          this.callOnLuas("onSongStart", []);
        },
        generateSong: function (a) {
          this.songSpeedType = Object.prototype.hasOwnProperty.call(
            y.gameplaySettings.h,
            "scrolltype"
          )
            ? y.gameplaySettings.h.scrolltype
            : "multiplicative";
          switch (this.songSpeedType) {
            case "constant":
              this.set_songSpeed(
                Object.prototype.hasOwnProperty.call(
                  y.gameplaySettings.h,
                  "scrollspeed"
                )
                  ? y.gameplaySettings.h.scrollspeed
                  : 1
              );
              break;
            case "multiplicative":
              this.set_songSpeed(
                C.SONG.speed *
                  (Object.prototype.hasOwnProperty.call(
                    y.gameplaySettings.h,
                    "scrollspeed"
                  )
                    ? y.gameplaySettings.h.scrollspeed
                    : 1)
              );
          }
          a = C.SONG;
          P.changeBPM(a.bpm);
          this.vocals = C.SONG.needsVoices
            ? new Ce().loadEmbedded(
                "songs:assets/songs/" +
                  K.replace(C.SONG.song.toLowerCase(), " ", "-") +
                  "/Voices.mp3"
              )
            : new Ce();
          this.vocals.set_pitch(this.playbackRate);
          g.sound.list.add(this.vocals);
          g.sound.list.add(
            new Ce().loadEmbedded(
              "songs:assets/songs/" +
                K.replace(C.SONG.song.toLowerCase(), " ", "-") +
                "/Inst.mp3"
            )
          );
          this.notes = new ma();
          this.add(this.notes);
          var b = a.notes,
            c = 0,
            d = C.SONG.song,
            e = new ya("[~&\\\\;:<>#]", ""),
            f = new ya("[.,'\"%?!]", "");
          d = e.split(K.replace(d, " ", "-")).join("-");
          f = f.split(d).join("").toLowerCase();
          d = G.getPath("data/" + (f + "/events.json"), "TEXT", null);
          if (aa.exists(d)) {
            var k = Dd.loadFromJson("events", f).events;
            for (f = 0; f < k.length; ) {
              var r = k[f];
              ++f;
              d = 0;
              for (e = r[1].length; d < e; ) {
                var l = d++,
                  J = r[0],
                  u = r[1][l][0],
                  m = r[1][l][1];
                l = r[1][l][2];
                J = {
                  strumTime: J + y.noteOffset,
                  event: u,
                  value1: m,
                  value2: l,
                };
                J.strumTime -= this.eventNoteEarlyTrigger(J);
                this.eventNotes.push(J);
                this.eventPushed(J);
              }
            }
          }
          for (f = 0; f < b.length; ) {
            r = b[f];
            ++f;
            d = 0;
            for (e = r.sectionNotes; d < e.length; ) {
              J = e[d];
              ++d;
              u = J[0];
              m = J[1] % 4 | 0;
              l = r.mustHitSection;
              3 < J[1] && (l = !r.mustHitSection);
              var h =
                0 < this.unspawnNotes.length
                  ? this.unspawnNotes[(this.unspawnNotes.length - 1) | 0]
                  : null;
              var p = new Id(u, m, h);
              p.mustPress = l;
              p.sustainLength = J[2];
              p.gfNote = r.gfSection && 4 > J[1];
              p.set_noteType(J[3]);
              "string" != typeof J[3] && p.set_noteType(da.noteTypeList[J[3]]);
              k = p.scrollFactor;
              k.set_x(0);
              k.set_y(0);
              k = p.sustainLength;
              k /= P.stepCrochet;
              this.unspawnNotes.push(p);
              var Hb = Math.floor(k);
              if (0 < Hb)
                for (k = 0, Hb += 1; k < Hb; ) {
                  var q = k++;
                  h = this.unspawnNotes[(this.unspawnNotes.length - 1) | 0];
                  h = new Id(
                    u +
                      P.stepCrochet * q +
                      P.stepCrochet / hc.roundDecimal(this.songSpeed, 2),
                    m,
                    h,
                    !0
                  );
                  h.mustPress = l;
                  h.gfNote = r.gfSection && 4 > J[1];
                  h.set_noteType(p.noteType);
                  q = h.scrollFactor;
                  q.set_x(0);
                  q.set_y(0);
                  p.tail.push(h);
                  h.parent = p;
                  this.unspawnNotes.push(h);
                  h.mustPress
                    ? h.set_x(h.x + g.width / 2)
                    : y.middleScroll &&
                      (h.set_x(h.x + 310),
                      1 < m && h.set_x(h.x + (g.width / 2 + 25)));
                }
              p.mustPress
                ? p.set_x(p.x + g.width / 2)
                : y.middleScroll &&
                  (p.set_x(p.x + 310),
                  1 < m && p.set_x(p.x + (g.width / 2 + 25)));
              Object.prototype.hasOwnProperty.call(
                this.noteTypeMap.h,
                p.noteType
              ) || (this.noteTypeMap.h[p.noteType] = !0);
            }
            ++c;
          }
          f = 0;
          for (d = a.events; f < d.length; )
            for (r = d[f], ++f, e = 0, k = r[1].length; e < k; )
              (l = e++),
                (J = r[0]),
                (u = r[1][l][0]),
                (m = r[1][l][1]),
                (l = r[1][l][2]),
                (J = {
                  strumTime: J + y.noteOffset,
                  event: u,
                  value1: m,
                  value2: l,
                }),
                (J.strumTime -= this.eventNoteEarlyTrigger(J)),
                this.eventNotes.push(J),
                this.eventPushed(J);
          this.unspawnNotes.sort(n(this, this.sortByShit));
          1 < this.eventNotes.length &&
            this.eventNotes.sort(n(this, this.sortByTime));
          this.checkEventNote();
          this.generatedMusic = !0;
        },
        eventPushed: function (a) {
          switch (a.event) {
            case "Change Character":
              switch (a.value1.toLowerCase()) {
                case "1":
                case "gf":
                case "girlfriend":
                  var b = 2;
                  break;
                case "0":
                case "dad":
                case "opponent":
                  b = 1;
                  break;
                default:
                  b = 0;
              }
              this.addCharacterToList(a.value2, b);
              break;
            case "Dadbattle Spotlight":
              this.dadbattleBlack = new cc(null, -800, -400, 0, 0);
              this.dadbattleBlack.makeGraphic(
                (2 * g.width) | 0,
                (2 * g.height) | 0,
                -16777216
              );
              this.dadbattleBlack.set_alpha(0.25);
              this.dadbattleBlack.set_visible(!1);
              this.add(this.dadbattleBlack);
              this.dadbattleLight = new cc("spotlight", 400, -400);
              this.dadbattleLight.set_alpha(0.375);
              this.dadbattleLight.set_blend(0);
              this.dadbattleLight.set_visible(!1);
              this.dadbattleSmokes.set_alpha(0.7);
              this.dadbattleSmokes.set_blend(0);
              this.dadbattleSmokes.set_visible(!1);
              this.add(this.dadbattleLight);
              this.add(this.dadbattleSmokes);
              b = new cc(
                "smoke",
                -1350,
                660 + g.random.float(-20, 20),
                1.2,
                1.05
              );
              b.setGraphicSize((b.get_width() * g.random.float(1.1, 1.22)) | 0);
              b.updateHitbox();
              b.velocity.set_x(g.random.float(15, 22));
              b.set_active(!0);
              this.dadbattleSmokes.add(b);
              b = new cc(
                "smoke",
                1750,
                660 + g.random.float(-20, 20),
                1.2,
                1.05
              );
              b.setGraphicSize((b.get_width() * g.random.float(1.1, 1.22)) | 0);
              b.updateHitbox();
              b.velocity.set_x(g.random.float(-15, -22));
              b.set_active(!0);
              b.set_flipX(!0);
              this.dadbattleSmokes.add(b);
              break;
            case "Philly Glow":
              (this.blammedLightsBlack = new F(
                -0.5 * g.width,
                -0.5 * g.height
              ).makeGraphic((2 * g.width) | 0, (2 * g.height) | 0, -16777216)),
                this.blammedLightsBlack.set_visible(!1),
                this.insert(
                  this.members.indexOf(this.phillyStreet),
                  this.blammedLightsBlack
                ),
                (this.phillyWindowEvent = new cc(
                  "philly/window",
                  this.phillyWindow.x,
                  this.phillyWindow.y,
                  0.3,
                  0.3
                )),
                this.phillyWindowEvent.setGraphicSize(
                  (0.85 * this.phillyWindowEvent.get_width()) | 0
                ),
                this.phillyWindowEvent.updateHitbox(),
                this.phillyWindowEvent.set_visible(!1),
                this.insert(
                  this.members.indexOf(this.blammedLightsBlack) + 1,
                  this.phillyWindowEvent
                ),
                (this.phillyGlowGradient = new vk(-400, 225)),
                this.phillyGlowGradient.set_visible(!1),
                this.insert(
                  this.members.indexOf(this.blammedLightsBlack) + 1,
                  this.phillyGlowGradient
                ),
                y.flashing || (this.phillyGlowGradient.intendedAlpha = 0.7),
                (this.precacheList.h["philly/particle"] = "image"),
                (this.phillyGlowParticles = new ma()),
                this.phillyGlowParticles.set_visible(!1),
                this.insert(
                  this.members.indexOf(this.phillyGlowGradient) + 1,
                  this.phillyGlowParticles
                );
          }
          Object.prototype.hasOwnProperty.call(
            this.eventPushedMap.h,
            a.event
          ) || (this.eventPushedMap.h[a.event] = !0);
        },
        eventNoteEarlyTrigger: function (a) {
          var b = this.callOnLuas("eventEarlyTrigger", [a.event]);
          return 0 != b ? b : "Kill Henchmen" == a.event ? 280 : 0;
        },
        sortByShit: function (a, b) {
          a = a.strumTime;
          b = b.strumTime;
          var c = 0;
          a < b ? (c = -1) : a > b && (c = 1);
          return c;
        },
        sortByTime: function (a, b) {
          a = a.strumTime;
          b = b.strumTime;
          var c = 0;
          a < b ? (c = -1) : a > b && (c = 1);
          return c;
        },
        generateStaticArrows: function (a) {
          for (var b = 0; 4 > b; ) {
            var c = b++,
              d = 1;
            1 > a &&
              (y.opponentStrums ? y.middleScroll && (d = 0.35) : (d = 0));
            var e = new Sh(
              y.middleScroll ? C.STRUM_X_MIDDLESCROLL : C.STRUM_X,
              this.strumLine.y,
              c,
              a
            );
            e.downScroll = y.downScroll;
            C.isStoryMode || this.skipArrowStartTween
              ? e.set_alpha(d)
              : (e.set_alpha(0),
                la.tween(e, { alpha: d }, 1, {
                  ease: Aa.circOut,
                  startDelay: 0.5 + 0.2 * c,
                }));
            1 == a
              ? this.playerStrums.add(e)
              : (y.middleScroll &&
                  (e.set_x(e.x + 310),
                  1 < c && e.set_x(e.x + (g.width / 2 + 25))),
                this.opponentStrums.add(e));
            this.strumLineNotes.add(e);
            e.postAddedToGroup();
          }
        },
        openSubState: function (a) {
          if (this.paused) {
            null != g.sound.music &&
              (g.sound.music.pause(), this.vocals.pause());
            null == this.startTimer ||
              this.startTimer.finished ||
              (this.startTimer.active = !1);
            null == this.finishTimer ||
              this.finishTimer.finished ||
              (this.finishTimer.active = !1);
            null != this.songSpeedTween && this.songSpeedTween.set_active(!1);
            null != this.carTimer && (this.carTimer.active = !1);
            for (
              var b = [this.boyfriend, this.gf, this.dad], c = 0;
              c < b.length;

            ) {
              var d = b[c];
              ++c;
              null != d && null != d.colorTween && d.colorTween.set_active(!1);
            }
            b = c = this.modchartTweens.h;
            c = Object.keys(c);
            d = c.length;
            for (var e = 0; e < d; ) b[c[e++]].set_active(!1);
            b = c = this.modchartTimers.h;
            c = Object.keys(c);
            d = c.length;
            for (e = 0; e < d; ) b[c[e++]].active = !1;
          }
          I.prototype.openSubState.call(this, a);
        },
        closeSubState: function () {
          if (this.paused) {
            null == g.sound.music || this.startingSong || this.resyncVocals();
            null == this.startTimer ||
              this.startTimer.finished ||
              (this.startTimer.active = !0);
            null == this.finishTimer ||
              this.finishTimer.finished ||
              (this.finishTimer.active = !0);
            null != this.songSpeedTween && this.songSpeedTween.set_active(!0);
            null != this.carTimer && (this.carTimer.active = !0);
            for (
              var a = [this.boyfriend, this.gf, this.dad], b = 0;
              b < a.length;

            ) {
              var c = a[b];
              ++b;
              null != c && null != c.colorTween && c.colorTween.set_active(!0);
            }
            a = b = this.modchartTweens.h;
            b = Object.keys(b);
            c = b.length;
            for (var d = 0; d < c; ) a[b[d++]].set_active(!0);
            a = b = this.modchartTimers.h;
            b = Object.keys(b);
            c = b.length;
            for (d = 0; d < c; ) a[b[d++]].active = !0;
            this.paused = !1;
            this.callOnLuas("onResume", []);
          }
          I.prototype.closeSubState.call(this);
        },
        resyncVocals: function () {
          null == this.finishTimer &&
            (this.vocals.pause(),
            g.sound.music.play(),
            g.sound.music.set_pitch(this.playbackRate),
            (P.songPosition = g.sound.music._time),
            P.songPosition <= this.vocals._length &&
              (this.vocals.set_time(P.songPosition),
              this.vocals.set_pitch(this.playbackRate)),
            this.vocals.play());
        },
        update: function (a) {
          var b = this;
          this.callOnLuas("onUpdate", [a]);
          var c = 0,
            d = 0;
          if (
            this.useDirectionalCamera &&
            null != this.focusedCharacter &&
            null != this.focusedCharacter.animation._curAnim
          )
            switch (
              this.focusedCharacter.animation._curAnim.name.substring(4)
            ) {
              case "DOWN":
              case "DOWN-F":
              case "DOWN-alt":
              case "DOWNmiss":
                d += 10;
                break;
              case "LEFT":
              case "LEFT-F":
              case "LEFT-alt":
              case "LEFTmiss":
                c -= 10;
                break;
              case "RIGHT":
              case "RIGHT-F":
              case "RIGHT-alt":
              case "RIGHTmiss":
                c += 10;
                break;
              case "UP":
              case "UP-F":
              case "UP-alt":
              case "UPmiss":
                d -= 10;
            }
          if (!this.inCutscene) {
            var e = Math.max(0, Math.min(1, 2.4 * a * this.cameraSpeed)),
              f = this.camFollowPos.x,
              k = this.camFollowPos.y;
            this.camFollowPos.setPosition(
              f + e * (this.camFollow.x + c - f),
              k + e * (this.camFollow.y + d - k)
            );
            this.startingSong ||
            this.endingSong ||
            !K.startsWith(this.boyfriend.animation._curAnim.name, "idle")
              ? (this.boyfriendIdleTime = 0)
              : ((this.boyfriendIdleTime += a),
                0.15 <= this.boyfriendIdleTime && (this.boyfriendIdled = !0));
          }
          I.prototype.update.call(this, a);
          this.setOnLuas("curDecStep", this.curDecStep);
          this.setOnLuas("curDecBeat", this.curDecBeat);
          this.botplayTxt.visible &&
            ((this.botplaySine += 180 * a),
            this.botplayTxt.set_alpha(
              1 - Math.sin((Math.PI * this.botplaySine) / 180)
            ));
          ia.player1.controls._pause.check() &&
            this.startedCountdown &&
            this.canPause &&
            this.callOnLuas("onPause", [], !1) != Ec.Function_Stop &&
            this.openPauseMenu();
          !g.keys.checkKeyArrayState(this.debugKeysChart, 2) ||
            this.endingSong ||
            this.inCutscene ||
            this.openChartEditor();
          e =
            1 +
            Math.max(0, Math.min(1, 1 - 9 * a * this.playbackRate)) *
              (this.iconP1.scale.x - 1);
          c = this.iconP1.scale;
          d = e;
          null == e && (e = 0);
          null == d && (d = 0);
          c.set_x(d);
          c.set_y(e);
          this.iconP1.updateHitbox();
          e =
            1 +
            Math.max(0, Math.min(1, 1 - 9 * a * this.playbackRate)) *
              (this.iconP2.scale.x - 1);
          c = this.iconP2.scale;
          d = e;
          null == e && (e = 0);
          null == d && (d = 0);
          c.set_x(d);
          c.set_y(e);
          this.iconP2.updateHitbox();
          this.iconP1.set_x(
            this.healthBar.x +
              0.01 *
                this.healthBar.get_width() *
                hc.remapToRange(this.healthBar.get_percent(), 0, 100, 100, 0) +
              (150 * this.iconP1.scale.x - 150) / 2 -
              26
          );
          this.iconP2.set_x(
            this.healthBar.x +
              0.01 *
                this.healthBar.get_width() *
                hc.remapToRange(this.healthBar.get_percent(), 0, 100, 100, 0) -
              (150 * this.iconP2.scale.x) / 2 -
              52
          );
          2 < this.health && (this.health = 2);
          20 > this.healthBar.get_percent()
            ? this.iconP1.animation._curAnim.set_curFrame(1)
            : this.iconP1.animation._curAnim.set_curFrame(0);
          80 < this.healthBar.get_percent()
            ? this.iconP2.animation._curAnim.set_curFrame(1)
            : this.iconP2.animation._curAnim.set_curFrame(0);
          !g.keys.checkKeyArrayState(this.debugKeysCharacter, 2) ||
            this.endingSong ||
            this.inCutscene ||
            ((this.persistentUpdate = !1),
            (this.paused = !0),
            C.cancelMusicFadeTween(),
            I.switchState(new Si(C.SONG.player2)));
          this.startedCountdown &&
            (P.songPosition += 1e3 * g.elapsed * this.playbackRate);
          this.startingSong
            ? this.startedCountdown && 0 <= P.songPosition
              ? this.startSong()
              : this.startedCountdown || (P.songPosition = 5 * -P.crochet)
            : this.paused ||
              ((this.songTime += g.game.ticks - this.previousFrameTime),
              (this.previousFrameTime = g.game.ticks),
              P.lastSongPos != P.songPosition &&
                ((this.songTime = (this.songTime + P.songPosition) / 2),
                (P.lastSongPos = P.songPosition)),
              this.updateTime &&
                ((c = P.songPosition - y.noteOffset),
                0 > c && (c = 0),
                (this.songPercent = c / this.songLength),
                (d = this.songLength - c),
                "Time Elapsed" == y.timeBarType && (d = c),
                (c = Math.floor(d / 1e3)),
                0 > c && (c = 0),
                "Song Name" != y.timeBarType &&
                  this.timeTxt.set_text(Bb.formatTime(c, !1))));
          this.camZooming &&
            ((f = this.defaultCamZoom),
            g.camera.set_zoom(
              f +
                Math.max(
                  0,
                  Math.min(
                    1,
                    1 - 3.125 * a * this.camZoomingDecay * this.playbackRate
                  )
                ) *
                  (g.camera.zoom - f)
            ),
            this.camHUD.set_zoom(
              1 +
                Math.max(
                  0,
                  Math.min(
                    1,
                    1 - 3.125 * a * this.camZoomingDecay * this.playbackRate
                  )
                ) *
                  (this.camHUD.zoom - 1)
            ));
          !y.noReset &&
            ia.player1.controls._reset.check() &&
            this.canReset &&
            !this.inCutscene &&
            this.startedCountdown &&
            !this.endingSong &&
            ((this.health = 0),
            wb.trace("RESET = True", {
              fileName: "source/PlayState.hx",
              lineNumber: 2303,
              className: "PlayState",
              methodName: "update",
            }));
          this.doDeathCheck();
          if (null != this.unspawnNotes[0])
            for (
              c = this.spawnTime,
                1 > this.songSpeed && (c /= this.songSpeed),
                1 > this.unspawnNotes[0].multSpeed &&
                  (c /= this.unspawnNotes[0].multSpeed);
              0 < this.unspawnNotes.length &&
              this.unspawnNotes[0].strumTime - P.songPosition < c;

            )
              (d = this.unspawnNotes[0]),
                this.notes.insert(0, d),
                (d.spawned = !0),
                this.callOnLuas("onSpawnNote", [
                  this.notes.members.indexOf(d),
                  d.noteData,
                  d.noteType,
                  d.isSustainNote,
                ]),
                (d = this.unspawnNotes.indexOf(d)),
                this.unspawnNotes.splice(d, 1);
          if (this.generatedMusic && !this.inCutscene)
            if (
              (this.cpuControlled
                ? null != this.boyfriend.animation._curAnim &&
                  this.boyfriend.holdTimer >
                    (0.0011 / g.sound.music._pitch) *
                      P.stepCrochet *
                      this.boyfriend.singDuration &&
                  K.startsWith(
                    this.boyfriend.animation._curAnim.name,
                    "sing"
                  ) &&
                  !K.endsWith(this.boyfriend.animation._curAnim.name, "miss") &&
                  this.boyfriend.dance()
                : this.keyShit(),
              this.startedCountdown)
            ) {
              var r = (60 / C.SONG.bpm) * 1e3;
              this.notes.forEachAlive(function (a) {
                var c = b.playerStrums;
                a.mustPress || (c = b.opponentStrums);
                var d = c.members[a.noteData].x,
                  e = c.members[a.noteData].y,
                  f = c.members[a.noteData].angle,
                  k = c.members[a.noteData].direction,
                  l = c.members[a.noteData].alpha,
                  g = c.members[a.noteData].downScroll;
                d += a.offsetX;
                e += a.offsetY;
                f += a.offsetAngle;
                l *= a.multAlpha;
                a.distance = g
                  ? 0.45 *
                    (P.songPosition - a.strumTime) *
                    b.songSpeed *
                    a.multSpeed
                  : -0.45 *
                    (P.songPosition - a.strumTime) *
                    b.songSpeed *
                    a.multSpeed;
                var h = (k * Math.PI) / 180;
                a.copyAngle && a.set_angle(k - 90 + f);
                a.copyAlpha && a.set_alpha(l);
                a.copyX && a.set_x(d + Math.cos(h) * a.distance);
                a.copyY &&
                  (a.set_y(e + Math.sin(h) * a.distance),
                  g &&
                    a.isSustainNote &&
                    (K.endsWith(a.animation._curAnim.name, "end") &&
                      (a.set_y(
                        a.y +
                          ((r / 400) * 15.75 * b.songSpeed +
                            46 * (b.songSpeed - 1))
                      ),
                      a.set_y(a.y - 46 * (1 - r / 600) * b.songSpeed),
                      C.isPixelStage
                        ? a.set_y(
                            a.y +
                              (8 +
                                (6 - a.originalHeightForCalcs) * C.daPixelZoom)
                          )
                        : a.set_y(a.y - 19)),
                    a.set_y(
                      a.y + (Id.swagWidth / 2 - 60.5 * (b.songSpeed - 1))
                    ),
                    a.set_y(
                      a.y + 27.5 * (C.SONG.bpm / 100 - 1) * (b.songSpeed - 1)
                    )));
                a.mustPress ||
                  !a.wasGoodHit ||
                  a.hitByOpponent ||
                  a.ignoreNote ||
                  b.opponentNoteHit(a);
                !a.blockHit &&
                  a.mustPress &&
                  b.cpuControlled &&
                  a.canBeHit &&
                  (a.isSustainNote
                    ? a.canBeHit && b.goodNoteHit(a)
                    : (a.strumTime <= P.songPosition || a.isSustainNote) &&
                      b.goodNoteHit(a));
                d = e + Id.swagWidth / 2;
                c.members[a.noteData].sustainReduce &&
                  a.isSustainNote &&
                  (a.mustPress || !a.ignoreNote) &&
                  (!a.mustPress ||
                    a.wasGoodHit ||
                    (a.prevNote.wasGoodHit && !a.canBeHit)) &&
                  (g
                    ? a.y - a.offset.y * a.scale.y + a.get_height() >= d &&
                      ((c = new Ga(0, 0, a.frameWidth, a.frameHeight)),
                      (c.height = (d - a.y) / a.scale.y),
                      (c.y = a.frameHeight - c.height),
                      a.set_clipRect(c))
                    : a.y + a.offset.y * a.scale.y <= d &&
                      ((c = new Ga(
                        0,
                        0,
                        a.get_width() / a.scale.x,
                        a.get_height() / a.scale.y
                      )),
                      (c.y = (d - a.y) / a.scale.y),
                      (c.height -= c.y),
                      a.set_clipRect(c)));
                P.songPosition > b.noteKillOffset + a.strumTime &&
                  (!a.mustPress ||
                    b.cpuControlled ||
                    a.ignoreNote ||
                    b.endingSong ||
                    (!a.tooLate && a.wasGoodHit) ||
                    b.noteMiss(a),
                  a.set_active(!1),
                  a.set_visible(!1),
                  a.kill(),
                  b.notes.remove(a, !0),
                  a.destroy());
              });
            } else
              this.notes.forEachAlive(function (a) {
                a.canBeHit = !1;
                a.wasGoodHit = !1;
              });
          this.checkEventNote();
          this.isVideoCurrentlyPlaying &&
            ((c = g.keys.justPressed),
            c.keyManager.checkStatusUnsafe(13, c.status)
              ? (c = !0)
              : ((c = g.keys.justPressed),
                (c = c.keyManager.checkStatusUnsafe(32, c.status))),
            c
              ? (c = !0)
              : ((c = g.keys.justPressed),
                (c = c.keyManager.checkStatusUnsafe(27, c.status))),
            c &&
              (this.videoCurrentlyPlaying.skipVideo(),
              (this.isVideoCurrentlyPlaying = !1)));
          if (this.followChars)
            if (this.mustHit)
              switch (this.boyfriend.animation._curAnim.name) {
                case "singDOWN":
                case "singDOWN-alt":
                  c = this.camFollow;
                  d = this.xx2;
                  e = this.yy2 + this.ofs;
                  null == e && (e = 0);
                  null == d && (d = 0);
                  c.set_x(d);
                  c.set_y(e);
                  break;
                case "singLEFT":
                case "singLEFT-alt":
                  c = this.camFollow;
                  d = this.xx2 - this.ofs;
                  e = this.yy2;
                  null == e && (e = 0);
                  null == d && (d = 0);
                  c.set_x(d);
                  c.set_y(e);
                  break;
                case "singRIGHT":
                case "singRIGHT-alt":
                  c = this.camFollow;
                  d = this.xx2 + this.ofs;
                  e = this.yy2;
                  null == e && (e = 0);
                  null == d && (d = 0);
                  c.set_x(d);
                  c.set_y(e);
                  break;
                case "singUP":
                case "singUP-alt":
                  c = this.camFollow;
                  d = this.xx2;
                  e = this.yy2 - this.ofs;
                  null == e && (e = 0);
                  null == d && (d = 0);
                  c.set_x(d);
                  c.set_y(e);
                  break;
                default:
                  (c = this.camFollow),
                    (d = this.xx2),
                    (e = this.yy2),
                    null == e && (e = 0),
                    null == d && (d = 0),
                    c.set_x(d),
                    c.set_y(e);
              }
            else
              switch (this.dad.animation._curAnim.name) {
                case "singDOWN":
                case "singDOWN-alt":
                  c = this.camFollow;
                  d = this.xx;
                  e = this.yy + this.ofs;
                  null == e && (e = 0);
                  null == d && (d = 0);
                  c.set_x(d);
                  c.set_y(e);
                  break;
                case "singLEFT":
                case "singLEFT-alt":
                  c = this.camFollow;
                  d = this.xx - this.ofs;
                  e = this.yy;
                  null == e && (e = 0);
                  null == d && (d = 0);
                  c.set_x(d);
                  c.set_y(e);
                  break;
                case "singRIGHT":
                case "singRIGHT-alt":
                  c = this.camFollow;
                  d = this.xx + this.ofs;
                  e = this.yy;
                  null == e && (e = 0);
                  null == d && (d = 0);
                  c.set_x(d);
                  c.set_y(e);
                  break;
                case "singUP":
                case "singUP-alt":
                  c = this.camFollow;
                  d = this.xx;
                  e = this.yy - this.ofs;
                  null == e && (e = 0);
                  null == d && (d = 0);
                  c.set_x(d);
                  c.set_y(e);
                  break;
                default:
                  (c = this.camFollow),
                    (d = this.xx),
                    (e = this.yy),
                    null == e && (e = 0),
                    null == d && (d = 0),
                    c.set_x(d),
                    c.set_y(e);
              }
          this.setOnLuas("cameraX", this.camFollowPos.x);
          this.setOnLuas("cameraY", this.camFollowPos.y);
          this.setOnLuas("botPlay", this.cpuControlled);
          this.callOnLuas("onUpdatePost", [a]);
        },
        openPauseMenu: function () {
          this.persistentUpdate = !1;
          this.paused = this.persistentDraw = !0;
          null != g.sound.music && (g.sound.music.pause(), this.vocals.pause());
          this.openSubState(
            new ae(
              this.boyfriend.getScreenPosition().x,
              this.boyfriend.getScreenPosition().y
            )
          );
        },
        openChartEditor: function () {
          this.persistentUpdate = !1;
          this.paused = !0;
          C.cancelMusicFadeTween();
          I.switchState(new da());
          C.chartingMode = !0;
        },
        doDeathCheck: function (a) {
          null == a && (a = !1);
          if (
            ((a && this.instakillOnMiss) || 0 >= this.health) &&
            !this.practiceMode &&
            !this.isDead &&
            this.callOnLuas("onGameOver", [], !1) != Ec.Function_Stop
          ) {
            this.boyfriend.stunned = !0;
            C.deathCounter++;
            this.paused = !0;
            a = this.vocals;
            a.cleanup(a.autoDestroy, !0);
            a = g.sound.music;
            a.cleanup(a.autoDestroy, !0);
            this.persistentDraw = this.persistentUpdate = !1;
            var b = this.modchartTweens.h;
            a = b;
            b = Object.keys(b);
            for (var c = b.length, d = 0; d < c; ) a[b[d++]].set_active(!0);
            a = b = this.modchartTimers.h;
            b = Object.keys(b);
            c = b.length;
            for (d = 0; d < c; ) a[b[d++]].active = !0;
            this.openSubState(
              new hd(
                this.boyfriend.getScreenPosition().x -
                  this.boyfriend.positionArray[0],
                this.boyfriend.getScreenPosition().y -
                  this.boyfriend.positionArray[1],
                this.camFollowPos.x,
                this.camFollowPos.y
              )
            );
            return (this.isDead = !0);
          }
          return !1;
        },
        checkEventNote: function () {
          for (
            ;
            0 < this.eventNotes.length &&
            !(P.songPosition < this.eventNotes[0].strumTime);

          ) {
            var a = "";
            null != this.eventNotes[0].value1 &&
              (a = this.eventNotes[0].value1);
            var b = "";
            null != this.eventNotes[0].value2 &&
              (b = this.eventNotes[0].value2);
            this.triggerEventNote(this.eventNotes[0].event, a, b);
            this.eventNotes.shift();
          }
        },
        getControl: function (a) {
          return qa.getProperty(ia.player1.controls, a);
        },
        triggerEventNote: function (a, b, c) {
          var d = this;
          switch (a) {
            case "Add Camera Zoom":
              if (y.camZooms && 1.35 > g.camera.zoom) {
                var e = parseFloat(b),
                  f = parseFloat(c);
                isNaN(e) && (e = 0.015);
                isNaN(f) && (f = 0.03);
                0.2 == e && (e = 0.02);
                0.1 == f && (f = 0.02);
                var k = g.camera;
                k.set_zoom(k.zoom + e);
                k = this.camHUD;
                k.set_zoom(k.zoom + f);
              }
              break;
            case "Alt Idle Animation":
              k = this.dad;
              switch (K.trim(b.toLowerCase())) {
                case "bf":
                case "boyfriend":
                  k = this.boyfriend;
                  break;
                case "gf":
                case "girlfriend":
                  k = this.gf;
                  break;
                default:
                  switch (((e = M.parseInt(b)), isNaN(e) && (e = 0), e)) {
                    case 1:
                      k = this.boyfriend;
                      break;
                    case 2:
                      k = this.gf;
                  }
              }
              null != k && ((k.idleSuffix = c), k.recalculateDanceIdle());
              break;
            case "BG Freaks Expression":
              null != this.bgGirls && this.bgGirls.swapDanceType();
              break;
            case "Black Camera Fades":
              la.tween(this.blackScreen, { alpha: 0 }, parseFloat(c), {
                ease: Aa.sineInOut,
              });
              break;
            case "Camera Follow Pos":
              null != this.camFollow &&
                ((k = parseFloat(b)),
                (e = parseFloat(c)),
                isNaN(k) && (k = 0),
                isNaN(e) && (e = 0),
                (this.isCameraOnForcedPos = !1),
                (f = parseFloat(b)),
                isNaN(f) ? ((f = parseFloat(c)), (f = !isNaN(f))) : (f = !0),
                f &&
                  (this.camFollow.set_x(k),
                  this.camFollow.set_y(e),
                  (this.isCameraOnForcedPos = !0)));
              break;
            case "Camera Switch":
              switch (c) {
                case "off":
                  la.tween(this.camHUD, { alpha: 0 }, parseFloat(b), {
                    ease: Aa.linear,
                  });
                  la.tween(this.camGame, { alpha: 0 }, parseFloat(b), {
                    ease: Aa.linear,
                  });
                  break;
                case "on":
                  la.tween(this.camHUD, { alpha: 1 }, parseFloat(b), {
                    ease: Aa.linear,
                  }),
                    la.tween(this.camGame, { alpha: 1 }, parseFloat(b), {
                      ease: Aa.linear,
                    });
              }
              break;
            case "Change Character":
              e = 0;
              switch (K.trim(b.toLowerCase())) {
                case "gf":
                case "girlfriend":
                  e = 2;
                  break;
                case "dad":
                case "opponent":
                  e = 1;
                  break;
                default:
                  e = 0;
              }
              switch (e) {
                case 0:
                  this.boyfriend.curCharacter != c &&
                    (Object.prototype.hasOwnProperty.call(
                      this.boyfriendMap.h,
                      c
                    ) || this.addCharacterToList(c, e),
                    (e = this.boyfriend.alpha),
                    this.boyfriend.set_alpha(1e-5),
                    (this.boyfriend = this.boyfriendMap.h[c]),
                    this.boyfriend.set_alpha(e),
                    this.iconP1.changeIcon(this.boyfriend.healthIcon));
                  this.setOnLuas("boyfriendName", this.boyfriend.curCharacter);
                  break;
                case 1:
                  this.dad.curCharacter != c &&
                    (Object.prototype.hasOwnProperty.call(this.dadMap.h, c) ||
                      this.addCharacterToList(c, e),
                    (k = K.startsWith(this.dad.curCharacter, "gf")),
                    (e = this.dad.alpha),
                    this.dad.set_alpha(1e-5),
                    (this.dad = this.dadMap.h[c]),
                    K.startsWith(this.dad.curCharacter, "gf")
                      ? null != this.gf && this.gf.set_visible(!1)
                      : k && null != this.gf && this.gf.set_visible(!0),
                    this.dad.set_alpha(e),
                    this.iconP2.changeIcon(this.dad.healthIcon));
                  this.setOnLuas("dadName", this.dad.curCharacter);
                  break;
                case 2:
                  null != this.gf &&
                    (this.gf.curCharacter != c &&
                      (Object.prototype.hasOwnProperty.call(this.gfMap.h, c) ||
                        this.addCharacterToList(c, e),
                      (e = this.gf.alpha),
                      this.gf.set_alpha(1e-5),
                      (this.gf = this.gfMap.h[c]),
                      this.gf.set_alpha(e)),
                    this.setOnLuas("gfName", this.gf.curCharacter));
              }
              this.reloadHealthBarColors();
              break;
            case "Change Scroll Speed":
              if ("constant" == this.songSpeedType) return;
              k = parseFloat(b);
              e = parseFloat(c);
              isNaN(k) && (k = 1);
              isNaN(e) && (e = 0);
              k *=
                C.SONG.speed *
                (Object.prototype.hasOwnProperty.call(
                  y.gameplaySettings.h,
                  "scrollspeed"
                )
                  ? y.gameplaySettings.h.scrollspeed
                  : 1);
              0 >= e
                ? this.set_songSpeed(k)
                : (this.songSpeedTween = la.tween(
                    this,
                    { songSpeed: k },
                    e / this.playbackRate,
                    {
                      ease: Aa.linear,
                      onComplete: function (a) {
                        d.songSpeedTween = null;
                      },
                    }
                  ));
              break;
            case "Cinematics (UnderLap)":
              var r = parseFloat(b),
                l = parseFloat(c);
              null != this.upTween && this.upTween.cancel();
              null != this.downTween && this.downTween.cancel();
              if (0 == l) {
                k = 0;
                for (e = this.playerStrums.length; k < e; )
                  (f = k++),
                    la.tween(
                      this.playerStrums.members[f],
                      { y: this.defaultPlayerStrumY[f] },
                      r,
                      { ease: Aa.quadOut }
                    ),
                    la.tween(
                      this.opponentStrums.members[f],
                      { y: this.defaultOpponentStrumY[f] },
                      r,
                      { ease: Aa.quadOut }
                    );
                this.upTween = la.tween(this.upperBar, { y: this.upY }, r, {
                  ease: Aa.quadOut,
                });
                this.downTween = la.tween(this.lowerBar, { y: this.lowY }, r, {
                  ease: Aa.quadOut,
                });
                la.tween(this.healthBarBG, { alpha: 1 }, r - 0.1);
                la.tween(this.healthBar, { alpha: 1 }, r - 0.1);
                la.tween(this.scoreTxt, { alpha: 1 }, r - 0.1);
                la.tween(this.iconP1, { alpha: 1 }, r - 0.1);
                la.tween(this.iconP2, { alpha: 1 }, r - 0.1);
                la.tween(this.timeBar, { alpha: 1 }, r - 0.1);
                la.tween(this.timeBarBG, { alpha: 1 }, r - 0.1);
                la.tween(this.timeTxt, { alpha: 1 }, r - 0.1);
              } else {
                k = 0;
                for (e = this.playerStrums.length; k < e; )
                  (f = k++),
                    y.downScroll
                      ? (la.tween(
                          this.playerStrums.members[f],
                          { y: this.defaultPlayerStrumY[f] - l + 35 },
                          r,
                          { ease: Aa.quadOut }
                        ),
                        la.tween(
                          this.opponentStrums.members[f],
                          { y: this.defaultOpponentStrumY[f] - l + 35 },
                          r,
                          { ease: Aa.quadOut }
                        ))
                      : (la.tween(
                          this.playerStrums.members[f],
                          { y: this.defaultPlayerStrumY[f] + l - 35 },
                          r,
                          { ease: Aa.quadOut }
                        ),
                        la.tween(
                          this.opponentStrums.members[f],
                          { y: this.defaultOpponentStrumY[f] + l - 35 },
                          r,
                          { ease: Aa.quadOut }
                        ));
                this.upTween = la.tween(this.upperBar, { y: this.upY + l }, r, {
                  ease: Aa.quadOut,
                });
                this.downTween = la.tween(
                  this.lowerBar,
                  { y: this.lowY - l },
                  r,
                  { ease: Aa.quadOut }
                );
                la.tween(this.healthBarBG, { alpha: 0 }, r - 0.1);
                la.tween(this.healthBar, { alpha: 0 }, r - 0.1);
                la.tween(this.scoreTxt, { alpha: 0 }, r - 0.1);
                la.tween(this.iconP1, { alpha: 0 }, r - 0.1);
                la.tween(this.iconP2, { alpha: 0 }, r - 0.1);
                la.tween(this.timeBar, { alpha: 0 }, r - 0.1);
                la.tween(this.timeBarBG, { alpha: 0 }, r - 0.1);
                la.tween(this.timeTxt, { alpha: 0 }, r - 0.1);
              }
              break;
            case "Dadbattle Spotlight":
              e = M.parseInt(b);
              null == e && (e = 0);
              k = M.parseInt(b);
              if (null == k)
                this.dadbattleBlack.set_visible(!1),
                  this.dadbattleLight.set_visible(!1),
                  (this.defaultCamZoom -= 0.12),
                  la.tween(this.dadbattleSmokes, { alpha: 0 }, 1, {
                    onComplete: function (a) {
                      d.dadbattleSmokes.set_visible(!1);
                    },
                  });
              else
                switch (k) {
                  case 1:
                  case 2:
                  case 3:
                    1 == e &&
                      (this.dadbattleBlack.set_visible(!0),
                      this.dadbattleLight.set_visible(!0),
                      this.dadbattleSmokes.set_visible(!0),
                      (this.defaultCamZoom += 0.12));
                    r = this.dad;
                    2 < e && (r = this.boyfriend);
                    this.dadbattleLight.set_alpha(0);
                    new fc().start(0.12, function (a) {
                      d.dadbattleLight.set_alpha(0.375);
                    });
                    this.dadbattleLight.setPosition(
                      r.getGraphicMidpoint().x -
                        this.dadbattleLight.get_width() / 2,
                      r.y +
                        r.get_height() -
                        this.dadbattleLight.get_height() +
                        50
                    );
                    break;
                  default:
                    this.dadbattleBlack.set_visible(!1),
                      this.dadbattleLight.set_visible(!1),
                      (this.defaultCamZoom -= 0.12),
                      la.tween(this.dadbattleSmokes, { alpha: 0 }, 1, {
                        onComplete: function (a) {
                          d.dadbattleSmokes.set_visible(!1);
                        },
                      });
                }
              break;
            case "Flash Camera":
              this.camGame.flash(-1, parseFloat(b));
              break;
            case "HUD Switch":
              switch (c) {
                case "off":
                  la.tween(this.camHUD, { alpha: 0 }, parseFloat(b), {
                    ease: Aa.linear,
                  });
                  break;
                case "on":
                  la.tween(this.camHUD, { alpha: 1 }, parseFloat(b), {
                    ease: Aa.linear,
                  });
              }
              break;
            case "Hey!":
              e = 2;
              switch (K.trim(b.toLowerCase())) {
                case "1":
                case "gf":
                case "girlfriend":
                  e = 1;
                  break;
                case "0":
                case "bf":
                case "boyfriend":
                  e = 0;
              }
              k = parseFloat(c);
              if (isNaN(k) || 0 >= k) k = 0.6;
              0 != e &&
                (K.startsWith(this.dad.curCharacter, "gf")
                  ? (this.dad.playAnim("cheer", !0),
                    (this.dad.specialAnim = !0),
                    (this.dad.heyTimer = k))
                  : null != this.gf &&
                    (this.gf.playAnim("cheer", !0),
                    (this.gf.specialAnim = !0),
                    (this.gf.heyTimer = k)),
                "mall" == C.curStage &&
                  (this.bottomBoppers.animation.play("hey", !0),
                  (this.heyTimer = k)));
              1 != e &&
                (this.boyfriend.playAnim("hey", !0),
                (this.boyfriend.specialAnim = !0),
                (this.boyfriend.heyTimer = k));
              break;
            case "Kill Henchmen":
              this.killHenchmen();
              break;
            case "Philly Glow":
              k = M.parseInt(b);
              isNaN(k) && (k = 0);
              f = function () {
                var a = -1;
                y.flashing || (a = (a & 16777215) | -2147483648);
                g.camera.flash(a, 0.15, null, !0);
              };
              e = [this.boyfriend, this.gf, this.dad];
              switch (k) {
                case 0:
                  if (this.phillyGlowGradient.visible) {
                    f();
                    y.camZooms &&
                      ((k = g.camera),
                      k.set_zoom(k.zoom + 0.5),
                      (k = this.camHUD),
                      k.set_zoom(k.zoom + 0.1));
                    this.blammedLightsBlack.set_visible(!1);
                    this.phillyWindowEvent.set_visible(!1);
                    this.phillyGlowGradient.set_visible(!1);
                    this.phillyGlowParticles.set_visible(!1);
                    this.curLightEvent = -1;
                    for (k = 0; k < e.length; )
                      (r = e[k]), ++k, r.set_color(-1);
                    this.phillyStreet.set_color(-1);
                  }
                  break;
                case 1:
                  this.curLightEvent = g.random.int(
                    0,
                    this.phillyLightsColors.length - 1,
                    [this.curLightEvent]
                  );
                  var J = this.phillyLightsColors[this.curLightEvent];
                  if (!this.phillyGlowGradient.visible)
                    f(),
                      y.camZooms &&
                        ((k = g.camera),
                        k.set_zoom(k.zoom + 0.5),
                        (k = this.camHUD),
                        k.set_zoom(k.zoom + 0.1)),
                      this.blammedLightsBlack.set_visible(!0),
                      this.blammedLightsBlack.set_alpha(1),
                      this.phillyWindowEvent.set_visible(!0),
                      this.phillyGlowGradient.set_visible(!0),
                      this.phillyGlowParticles.set_visible(!0);
                  else if (y.flashing) {
                    var u = 64;
                    k =
                      (J & 16777215) | ((255 < u ? 255 : 0 > u ? 0 : u) << 24);
                    g.camera.flash(k, 0.5, null, !0);
                  }
                  f = J;
                  if (y.flashing)
                    switch (
                      ((r =
                        ((Math.max(
                          ((f >> 16) & 255) / 255,
                          Math.max(((f >> 8) & 255) / 255, (f & 255) / 255)
                        ) -
                          Math.min(
                            ((f >> 16) & 255) / 255,
                            Math.min(((f >> 8) & 255) / 255, (f & 255) / 255)
                          )) /
                          Math.max(
                            ((f >> 16) & 255) / 255,
                            Math.max(((f >> 8) & 255) / 255, (f & 255) / 255)
                          )) *
                        0.75),
                      (m = ob.get_hue(f)),
                      (u = Math.max(
                        ((f >> 16) & 255) / 255,
                        Math.max(((f >> 8) & 255) / 255, (f & 255) / 255)
                      )),
                      (k = ((f >> 24) & 255) / 255),
                      (l = u * r),
                      (r = u - l),
                      (u = (m % 360) / 60),
                      (m = l * (1 - Math.abs((u % 2) - 1)) + r),
                      (l += r),
                      u | 0)
                    ) {
                      case 0:
                        null == k && (k = 1);
                        u = Math.round(255 * l);
                        f =
                          (f & -16711681) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 16);
                        u = Math.round(255 * m);
                        f =
                          (f & -65281) | ((255 < u ? 255 : 0 > u ? 0 : u) << 8);
                        u = Math.round(255 * r);
                        f = (f & -256) | (255 < u ? 255 : 0 > u ? 0 : u);
                        u = Math.round(255 * k);
                        f =
                          (f & 16777215) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 24);
                        break;
                      case 1:
                        null == k && (k = 1);
                        u = Math.round(255 * m);
                        f =
                          (f & -16711681) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 16);
                        u = Math.round(255 * l);
                        f =
                          (f & -65281) | ((255 < u ? 255 : 0 > u ? 0 : u) << 8);
                        u = Math.round(255 * r);
                        f = (f & -256) | (255 < u ? 255 : 0 > u ? 0 : u);
                        u = Math.round(255 * k);
                        f =
                          (f & 16777215) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 24);
                        break;
                      case 2:
                        null == k && (k = 1);
                        u = Math.round(255 * r);
                        f =
                          (f & -16711681) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 16);
                        u = Math.round(255 * l);
                        f =
                          (f & -65281) | ((255 < u ? 255 : 0 > u ? 0 : u) << 8);
                        u = Math.round(255 * m);
                        f = (f & -256) | (255 < u ? 255 : 0 > u ? 0 : u);
                        u = Math.round(255 * k);
                        f =
                          (f & 16777215) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 24);
                        break;
                      case 3:
                        null == k && (k = 1);
                        u = Math.round(255 * r);
                        f =
                          (f & -16711681) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 16);
                        u = Math.round(255 * m);
                        f =
                          (f & -65281) | ((255 < u ? 255 : 0 > u ? 0 : u) << 8);
                        u = Math.round(255 * l);
                        f = (f & -256) | (255 < u ? 255 : 0 > u ? 0 : u);
                        u = Math.round(255 * k);
                        f =
                          (f & 16777215) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 24);
                        break;
                      case 4:
                        null == k && (k = 1);
                        u = Math.round(255 * m);
                        f =
                          (f & -16711681) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 16);
                        u = Math.round(255 * r);
                        f =
                          (f & -65281) | ((255 < u ? 255 : 0 > u ? 0 : u) << 8);
                        u = Math.round(255 * l);
                        f = (f & -256) | (255 < u ? 255 : 0 > u ? 0 : u);
                        u = Math.round(255 * k);
                        f =
                          (f & 16777215) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 24);
                        break;
                      case 5:
                        null == k && (k = 1),
                          (u = Math.round(255 * l)),
                          (f =
                            (f & -16711681) |
                            ((255 < u ? 255 : 0 > u ? 0 : u) << 16)),
                          (u = Math.round(255 * r)),
                          (f =
                            (f & -65281) |
                            ((255 < u ? 255 : 0 > u ? 0 : u) << 8)),
                          (u = Math.round(255 * m)),
                          (f = (f & -256) | (255 < u ? 255 : 0 > u ? 0 : u)),
                          (u = Math.round(255 * k)),
                          (f =
                            (f & 16777215) |
                            ((255 < u ? 255 : 0 > u ? 0 : u) << 24));
                    }
                  else {
                    r =
                      ((Math.max(
                        ((f >> 16) & 255) / 255,
                        Math.max(((f >> 8) & 255) / 255, (f & 255) / 255)
                      ) -
                        Math.min(
                          ((f >> 16) & 255) / 255,
                          Math.min(((f >> 8) & 255) / 255, (f & 255) / 255)
                        )) /
                        Math.max(
                          ((f >> 16) & 255) / 255,
                          Math.max(((f >> 8) & 255) / 255, (f & 255) / 255)
                        )) *
                      0.5;
                    var m = ob.get_hue(f);
                    u = Math.max(
                      ((f >> 16) & 255) / 255,
                      Math.max(((f >> 8) & 255) / 255, (f & 255) / 255)
                    );
                    k = ((f >> 24) & 255) / 255;
                    l = u * r;
                    r = u - l;
                    u = (m % 360) / 60;
                    m = l * (1 - Math.abs((u % 2) - 1)) + r;
                    l += r;
                    switch (u | 0) {
                      case 0:
                        null == k && (k = 1);
                        u = Math.round(255 * l);
                        f =
                          (f & -16711681) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 16);
                        u = Math.round(255 * m);
                        f =
                          (f & -65281) | ((255 < u ? 255 : 0 > u ? 0 : u) << 8);
                        u = Math.round(255 * r);
                        f = (f & -256) | (255 < u ? 255 : 0 > u ? 0 : u);
                        u = Math.round(255 * k);
                        f =
                          (f & 16777215) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 24);
                        break;
                      case 1:
                        null == k && (k = 1);
                        u = Math.round(255 * m);
                        f =
                          (f & -16711681) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 16);
                        u = Math.round(255 * l);
                        f =
                          (f & -65281) | ((255 < u ? 255 : 0 > u ? 0 : u) << 8);
                        u = Math.round(255 * r);
                        f = (f & -256) | (255 < u ? 255 : 0 > u ? 0 : u);
                        u = Math.round(255 * k);
                        f =
                          (f & 16777215) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 24);
                        break;
                      case 2:
                        null == k && (k = 1);
                        u = Math.round(255 * r);
                        f =
                          (f & -16711681) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 16);
                        u = Math.round(255 * l);
                        f =
                          (f & -65281) | ((255 < u ? 255 : 0 > u ? 0 : u) << 8);
                        u = Math.round(255 * m);
                        f = (f & -256) | (255 < u ? 255 : 0 > u ? 0 : u);
                        u = Math.round(255 * k);
                        f =
                          (f & 16777215) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 24);
                        break;
                      case 3:
                        null == k && (k = 1);
                        u = Math.round(255 * r);
                        f =
                          (f & -16711681) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 16);
                        u = Math.round(255 * m);
                        f =
                          (f & -65281) | ((255 < u ? 255 : 0 > u ? 0 : u) << 8);
                        u = Math.round(255 * l);
                        f = (f & -256) | (255 < u ? 255 : 0 > u ? 0 : u);
                        u = Math.round(255 * k);
                        f =
                          (f & 16777215) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 24);
                        break;
                      case 4:
                        null == k && (k = 1);
                        u = Math.round(255 * m);
                        f =
                          (f & -16711681) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 16);
                        u = Math.round(255 * r);
                        f =
                          (f & -65281) | ((255 < u ? 255 : 0 > u ? 0 : u) << 8);
                        u = Math.round(255 * l);
                        f = (f & -256) | (255 < u ? 255 : 0 > u ? 0 : u);
                        u = Math.round(255 * k);
                        f =
                          (f & 16777215) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 24);
                        break;
                      case 5:
                        null == k && (k = 1),
                          (u = Math.round(255 * l)),
                          (f =
                            (f & -16711681) |
                            ((255 < u ? 255 : 0 > u ? 0 : u) << 16)),
                          (u = Math.round(255 * r)),
                          (f =
                            (f & -65281) |
                            ((255 < u ? 255 : 0 > u ? 0 : u) << 8)),
                          (u = Math.round(255 * m)),
                          (f = (f & -256) | (255 < u ? 255 : 0 > u ? 0 : u)),
                          (u = Math.round(255 * k)),
                          (f =
                            (f & 16777215) |
                            ((255 < u ? 255 : 0 > u ? 0 : u) << 24));
                    }
                  }
                  for (k = 0; k < e.length; ) (r = e[k]), ++k, r.set_color(f);
                  this.phillyGlowParticles.forEachAlive(function (a) {
                    a.set_color(J);
                  });
                  this.phillyGlowGradient.set_color(J);
                  this.phillyWindowEvent.set_color(J);
                  r =
                    0.5 *
                    Math.max(
                      ((J >> 16) & 255) / 255,
                      Math.max(((J >> 8) & 255) / 255, (J & 255) / 255)
                    );
                  m = ob.get_hue(J);
                  k = ((J >> 24) & 255) / 255;
                  l =
                    ((Math.max(
                      ((J >> 16) & 255) / 255,
                      Math.max(((J >> 8) & 255) / 255, (J & 255) / 255)
                    ) -
                      Math.min(
                        ((J >> 16) & 255) / 255,
                        Math.min(((J >> 8) & 255) / 255, (J & 255) / 255)
                      )) /
                      Math.max(
                        ((J >> 16) & 255) / 255,
                        Math.max(((J >> 8) & 255) / 255, (J & 255) / 255)
                      )) *
                    r;
                  r -= l;
                  u = (m % 360) / 60;
                  m = l * (1 - Math.abs((u % 2) - 1)) + r;
                  l += r;
                  switch (u | 0) {
                    case 0:
                      null == k && (k = 1);
                      u = Math.round(255 * l);
                      J =
                        (J &= -16711681) |
                        ((255 < u ? 255 : 0 > u ? 0 : u) << 16);
                      u = Math.round(255 * m);
                      J =
                        (J &= -65281) | ((255 < u ? 255 : 0 > u ? 0 : u) << 8);
                      u = Math.round(255 * r);
                      J &= -256;
                      J |= 255 < u ? 255 : 0 > u ? 0 : u;
                      u = Math.round(255 * k);
                      J =
                        (J &= 16777215) |
                        ((255 < u ? 255 : 0 > u ? 0 : u) << 24);
                      break;
                    case 1:
                      null == k && (k = 1);
                      u = Math.round(255 * m);
                      J =
                        (J &= -16711681) |
                        ((255 < u ? 255 : 0 > u ? 0 : u) << 16);
                      u = Math.round(255 * l);
                      J =
                        (J &= -65281) | ((255 < u ? 255 : 0 > u ? 0 : u) << 8);
                      u = Math.round(255 * r);
                      J &= -256;
                      J |= 255 < u ? 255 : 0 > u ? 0 : u;
                      u = Math.round(255 * k);
                      J =
                        (J &= 16777215) |
                        ((255 < u ? 255 : 0 > u ? 0 : u) << 24);
                      break;
                    case 2:
                      null == k && (k = 1);
                      u = Math.round(255 * r);
                      J =
                        (J &= -16711681) |
                        ((255 < u ? 255 : 0 > u ? 0 : u) << 16);
                      u = Math.round(255 * l);
                      J =
                        (J &= -65281) | ((255 < u ? 255 : 0 > u ? 0 : u) << 8);
                      u = Math.round(255 * m);
                      J &= -256;
                      J |= 255 < u ? 255 : 0 > u ? 0 : u;
                      u = Math.round(255 * k);
                      J =
                        (J &= 16777215) |
                        ((255 < u ? 255 : 0 > u ? 0 : u) << 24);
                      break;
                    case 3:
                      null == k && (k = 1);
                      u = Math.round(255 * r);
                      J =
                        (J &= -16711681) |
                        ((255 < u ? 255 : 0 > u ? 0 : u) << 16);
                      u = Math.round(255 * m);
                      J =
                        (J &= -65281) | ((255 < u ? 255 : 0 > u ? 0 : u) << 8);
                      u = Math.round(255 * l);
                      J &= -256;
                      J |= 255 < u ? 255 : 0 > u ? 0 : u;
                      u = Math.round(255 * k);
                      J =
                        (J &= 16777215) |
                        ((255 < u ? 255 : 0 > u ? 0 : u) << 24);
                      break;
                    case 4:
                      null == k && (k = 1);
                      u = Math.round(255 * m);
                      J =
                        (J &= -16711681) |
                        ((255 < u ? 255 : 0 > u ? 0 : u) << 16);
                      u = Math.round(255 * r);
                      J =
                        (J &= -65281) | ((255 < u ? 255 : 0 > u ? 0 : u) << 8);
                      u = Math.round(255 * l);
                      J &= -256;
                      J |= 255 < u ? 255 : 0 > u ? 0 : u;
                      u = Math.round(255 * k);
                      J =
                        (J &= 16777215) |
                        ((255 < u ? 255 : 0 > u ? 0 : u) << 24);
                      break;
                    case 5:
                      null == k && (k = 1),
                        (u = Math.round(255 * l)),
                        (J =
                          (J &= -16711681) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 16)),
                        (u = Math.round(255 * r)),
                        (J =
                          (J &= -65281) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 8)),
                        (u = Math.round(255 * m)),
                        (J &= -256),
                        (J |= 255 < u ? 255 : 0 > u ? 0 : u),
                        (u = Math.round(255 * k)),
                        (J =
                          (J &= 16777215) |
                          ((255 < u ? 255 : 0 > u ? 0 : u) << 24));
                  }
                  this.phillyStreet.set_color(J);
                  break;
                case 2:
                  if (!y.lowQuality) {
                    l = g.random.int(8, 12);
                    m = 2e3 / l;
                    r = this.phillyLightsColors[this.curLightEvent];
                    k = 0;
                    for (e = l; k < e; )
                      (f = k++),
                        (f = new Rh(
                          -400 + m * f + g.random.float(-m / 5, m / 5),
                          this.phillyGlowGradient.originalY +
                            200 +
                            g.random.float(0, 125),
                          r
                        )),
                        this.phillyGlowParticles.add(f);
                    k = 0;
                    for (e = l; k < e; )
                      (f = k++),
                        (f = new Rh(
                          -400 + m * f + g.random.float(-m / 5, m / 5),
                          this.phillyGlowGradient.originalY +
                            200 +
                            (g.random.float(0, 125) + 40),
                          r
                        )),
                        this.phillyGlowParticles.add(f);
                    k = 0;
                    for (e = l; k < e; )
                      (f = k++),
                        (f = new Rh(
                          -400 + m * f + g.random.float(-m / 5, m / 5),
                          this.phillyGlowGradient.originalY +
                            200 +
                            (g.random.float(0, 125) + 80),
                          r
                        )),
                        this.phillyGlowParticles.add(f);
                  }
                  this.phillyGlowGradient.bop();
              }
              break;
            case "Play Animation":
              k = this.dad;
              switch (K.trim(c.toLowerCase())) {
                case "bf":
                case "boyfriend":
                  k = this.boyfriend;
                  break;
                case "gf":
                case "girlfriend":
                  k = this.gf;
                  break;
                default:
                  switch (((e = M.parseInt(c)), isNaN(e) && (e = 0), e)) {
                    case 1:
                      k = this.boyfriend;
                      break;
                    case 2:
                      k = this.gf;
                  }
              }
              null != k && (k.playAnim(b, !0), (k.specialAnim = !0));
              break;
            case "RedFlash":
              this.camGame.flash(-65536, parseFloat(b));
              break;
            case "RedVG":
              null != this.redTween && this.redTween.cancel();
              "" != b &&
                (this.redTween = la.tween(
                  this.redVG,
                  { alpha: 1 },
                  parseFloat(b),
                  { ease: Aa.quadInOut }
                ));
              "" != c &&
                (this.redTween = la.tween(
                  this.redVG,
                  { alpha: 0 },
                  parseFloat(c),
                  { ease: Aa.quadInOut }
                ));
              break;
            case "Screen Shake":
              r = [b, c];
              l = [this.camGame, this.camHUD];
              k = 0;
              for (e = l.length; k < e; ) {
                f = k++;
                m = r[f].split(",");
                var h = (u = 0);
                null != m[0] && (u = parseFloat(K.trim(m[0])));
                null != m[1] && (h = parseFloat(K.trim(m[1])));
                isNaN(u) && (u = 0);
                isNaN(h) && (h = 0);
                0 < u && 0 != h && l[f].shake(h, u);
              }
              break;
            case "Set Cam Zoom":
              e = parseFloat(b);
              k = parseFloat(c);
              "" == c
                ? (this.defaultCamZoom = e)
                : (null != this.zoomTween && this.zoomTween.cancel(),
                  (this.zoomTween = la.tween(this.camGame, { zoom: e }, k, {
                    ease: Aa.sineInOut,
                    onComplete: function (a) {
                      d.defaultCamZoom = d.camGame.zoom;
                    },
                  })));
              break;
            case "Set GF Speed":
              e = M.parseInt(b);
              if (isNaN(e) || 1 > e) e = 1;
              this.gfSpeed = e;
              break;
            case "Set Property":
              e = b.split(".");
              1 < e.length
                ? Ec.setVarInArray(
                    Ec.getPropertyLoopThingWhatever(e, !0, !0),
                    e[e.length - 1],
                    c
                  )
                : Ec.setVarInArray(this, b, c);
              break;
            case "Trigger BG Ghouls":
              "schoolEvil" != C.curStage ||
                y.lowQuality ||
                (this.bgGhouls.dance(!0), this.bgGhouls.set_visible(!0));
              break;
            case "WBG":
              switch (b) {
                case "Bon":
                  this.WBG.set_alpha(1);
                  this.iconP1.set_visible(!1);
                  this.healthBarBG.set_visible(!1);
                  this.healthBar.set_visible(!1);
                  this.iconP2.set_visible(!1);
                  this.scoreTxt.set_visible(!1);
                  this.timeTxt.set_visible(!1);
                  this.timeBarBG.set_visible(!1);
                  this.timeBar.set_visible(!1);
                  break;
                case "Won":
                  this.WBG.set_alpha(1);
                  this.iconP1.set_visible(!1);
                  this.healthBarBG.set_visible(!1);
                  this.healthBar.set_visible(!1);
                  this.iconP2.set_visible(!1);
                  this.scoreTxt.set_visible(!1);
                  this.timeTxt.set_visible(!1);
                  this.timeBarBG.set_visible(!1);
                  this.timeBar.set_visible(!1);
                  break;
                case "off":
                  this.WBG.set_alpha(0),
                    this.iconP1.set_visible(!0),
                    this.healthBarBG.set_visible(!0),
                    this.healthBar.set_visible(!0),
                    this.iconP2.set_visible(!0),
                    this.timeTxt.set_visible(!0),
                    this.timeBarBG.set_visible(!0),
                    this.timeBar.set_visible(!0),
                    this.scoreTxt.set_visible(!0);
              }
              break;
            case "WBG red":
              switch (b) {
                case "off":
                  la.tween(this.iconP1, { alpha: 1 }, 1, { ease: Aa.linear });
                  la.tween(this.healthBarBG, { alpha: 1 }, 1, {
                    ease: Aa.linear,
                  });
                  la.tween(this.healthBar, { alpha: 1 }, 1, {
                    ease: Aa.linear,
                  });
                  la.tween(this.timeTxt, { alpha: 1 }, 1, { ease: Aa.linear });
                  la.tween(this.timeBar, { alpha: 1 }, 1, { ease: Aa.linear });
                  la.tween(this.timeBarBG, { alpha: 1 }, 1, {
                    ease: Aa.linear,
                  });
                  la.tween(this.scoreTxt, { alpha: 1 }, 1, { ease: Aa.linear });
                  la.tween(this.iconP2, { alpha: 1 }, 1, { ease: Aa.linear });
                  break;
                case "off i":
                  la.tween(this.iconP1, { alpha: 1 }, 0.001, {
                    ease: Aa.linear,
                  });
                  la.tween(this.healthBarBG, { alpha: 1 }, 0.001, {
                    ease: Aa.linear,
                  });
                  la.tween(this.healthBar, { alpha: 1 }, 0.001, {
                    ease: Aa.linear,
                  });
                  la.tween(this.timeTxt, { alpha: 1 }, 0.001, {
                    ease: Aa.linear,
                  });
                  la.tween(this.timeBarBG, { alpha: 1 }, 0.001, {
                    ease: Aa.linear,
                  });
                  la.tween(this.timeBar, { alpha: 1 }, 0.001, {
                    ease: Aa.linear,
                  });
                  la.tween(this.scoreTxt, { alpha: 1 }, 0.001, {
                    ease: Aa.linear,
                  });
                  la.tween(this.iconP2, { alpha: 1 }, 0.001, {
                    ease: Aa.linear,
                  });
                  break;
                case "on":
                  la.tween(this.iconP1, { alpha: 0 }, 1, { ease: Aa.linear });
                  la.tween(this.healthBarBG, { alpha: 0 }, 1, {
                    ease: Aa.linear,
                  });
                  la.tween(this.healthBar, { alpha: 0 }, 1, {
                    ease: Aa.linear,
                  });
                  la.tween(this.timeTxt, { alpha: 0 }, 1, { ease: Aa.linear });
                  la.tween(this.timeBarBG, { alpha: 0 }, 1, {
                    ease: Aa.linear,
                  });
                  la.tween(this.timeBar, { alpha: 0 }, 1, { ease: Aa.linear });
                  la.tween(this.scoreTxt, { alpha: 0 }, 1, { ease: Aa.linear });
                  la.tween(this.iconP2, { alpha: 0 }, 1, { ease: Aa.linear });
                  break;
                case "on i":
                  la.tween(this.iconP1, { alpha: 0 }, 0.001, {
                    ease: Aa.linear,
                  }),
                    la.tween(this.healthBarBG, { alpha: 0 }, 0.001, {
                      ease: Aa.linear,
                    }),
                    la.tween(this.healthBar, { alpha: 0 }, 0.001, {
                      ease: Aa.linear,
                    }),
                    la.tween(this.timeTxt, { alpha: 0 }, 0.001, {
                      ease: Aa.linear,
                    }),
                    la.tween(this.timeBarBG, { alpha: 0 }, 0.001, {
                      ease: Aa.linear,
                    }),
                    la.tween(this.timeBar, { alpha: 0 }, 0.001, {
                      ease: Aa.linear,
                    }),
                    la.tween(this.scoreTxt, { alpha: 0 }, 0.001, {
                      ease: Aa.linear,
                    }),
                    la.tween(this.iconP2, { alpha: 0 }, 0.001, {
                      ease: Aa.linear,
                    });
              }
              break;
            case "light Flash Camera":
              f = this.camGame;
              k = 100;
              null == k && (k = 255);
              r = ob._new();
              null == k && (k = 255);
              f.flash(
                (((((((r & -16711681) | 16711680) & -65281) | 65280) & -256) |
                  255) &
                  16777215) |
                  ((255 < k ? 255 : 0 > k ? 0 : k) << 24),
                parseFloat(b)
              );
              break;
            case "light redFlash Camera":
              f = this.camGame;
              k = 100;
              null == k && (k = 255);
              r = ob._new();
              null == k && (k = 255);
              f.flash(
                (((((((r & -16711681) | 16711680) & -65281) | 0) & -256) | 0) &
                  16777215) |
                  ((255 < k ? 255 : 0 > k ? 0 : k) << 24),
                parseFloat(b)
              );
              break;
            case "lyrics":
              "" == b ? this.lyrics.set_text(" ") : this.lyrics.set_text(b);
              break;
            case "reddick":
              this.redScreen.set_alpha(1);
              la.tween(this.redScreen, { alpha: 0 }, parseFloat(b));
              break;
            case "whitedick":
              this.WBG.set_alpha(1),
                la.tween(this.WBG, { alpha: 0 }, parseFloat(b));
          }
          this.callOnLuas("onEvent", [a, b, c]);
        },
        moveCameraSection: function () {
          if (null != C.SONG.notes[this.curSection])
            if (null != this.gf && C.SONG.notes[this.curSection].gfSection) {
              this.focusedCharacter = this.gf;
              var a = this.camFollow,
                b = this.gf.getMidpoint().x,
                c = this.gf.getMidpoint().y;
              null == c && (c = 0);
              null == b && (b = 0);
              a.set_x(b);
              a.set_y(c);
              this.camFollow.set_x(
                this.camFollow.x +
                  (this.gf.cameraPosition[0] + this.girlfriendCameraOffset[0])
              );
              this.camFollow.set_y(
                this.camFollow.y +
                  (this.gf.cameraPosition[1] + this.girlfriendCameraOffset[1])
              );
              this.tweenCamIn();
              this.callOnLuas("onMoveCamera", ["gf"]);
            } else
              C.SONG.notes[this.curSection].mustHitSection
                ? (this.moveCamera(!1),
                  this.callOnLuas("onMoveCamera", ["boyfriend"]))
                : (this.moveCamera(!0),
                  this.callOnLuas("onMoveCamera", ["dad"]));
        },
        moveCamera: function (a) {
          if (a) {
            this.focusedCharacter = this.dad;
            a = this.camFollow;
            var b = this.dad.getMidpoint().x + 150,
              c = this.dad.getMidpoint().y - 100;
            null == c && (c = 0);
            null == b && (b = 0);
            a.set_x(b);
            a.set_y(c);
            this.camFollow.set_x(
              this.camFollow.x +
                (this.dad.cameraPosition[0] + this.opponentCameraOffset[0])
            );
            this.camFollow.set_y(
              this.camFollow.y +
                (this.dad.cameraPosition[1] + this.opponentCameraOffset[1])
            );
            this.tweenCamIn();
          } else
            (this.focusedCharacter = this.boyfriend),
              (a = this.camFollow),
              (b = this.boyfriend.getMidpoint().x - 100),
              (c = this.boyfriend.getMidpoint().y - 100),
              null == c && (c = 0),
              null == b && (b = 0),
              a.set_x(b),
              a.set_y(c),
              this.camFollow.set_x(
                this.camFollow.x -
                  (this.boyfriend.cameraPosition[0] -
                    this.boyfriendCameraOffset[0])
              ),
              this.camFollow.set_y(
                this.camFollow.y +
                  (this.boyfriend.cameraPosition[1] +
                    this.boyfriendCameraOffset[1])
              );
        },
        tweenCamIn: function () {
          var a = this,
            b = C.SONG.song,
            c = new ya("[~&\\\\;:<>#]", ""),
            d = new ya("[.,'\"%?!]", "");
          b = c.split(K.replace(b, " ", "-")).join("-");
          "tutorial" == d.split(b).join("").toLowerCase() &&
            null == this.cameraTwn &&
            1.3 != g.camera.zoom &&
            (this.cameraTwn = la.tween(
              g.camera,
              { zoom: 1.3 },
              (4 * P.stepCrochet) / 1e3,
              {
                ease: Aa.elasticInOut,
                onComplete: function (b) {
                  a.cameraTwn = null;
                },
              }
            ));
        },
        snapCamFollowToPos: function (a, b) {
          var c = this.camFollow,
            d = a,
            e = b;
          null == e && (e = 0);
          null == d && (d = 0);
          c.set_x(d);
          c.set_y(e);
          this.camFollowPos.setPosition(a, b);
        },
        finishSong: function (a) {
          null == a && (a = !1);
          var b = n(this, this.endSong);
          this.updateTime = !1;
          g.sound.music.set_volume(0);
          this.vocals.set_volume(0);
          this.vocals.pause();
          0 >= y.noteOffset || a
            ? b()
            : (this.finishTimer = new fc().start(
                y.noteOffset / 1e3,
                function (a) {
                  b();
                }
              ));
        },
        endVid: function () {
          this.endingSong = !0;
          this.canPause = !1;
        },
        endSong: function () {
          var a = this;
          if (!this.startingSong) {
            this.notes.forEach(function (b) {
              b.strumTime < a.songLength - P.safeZoneOffset &&
                (a.health -= 0.05 * a.healthLoss);
            });
            for (var b = 0, c = this.unspawnNotes; b < c.length; ) {
              var d = c[b];
              ++b;
              d.strumTime < this.songLength - P.safeZoneOffset &&
                (this.health -= 0.05 * this.healthLoss);
            }
            if (this.doDeathCheck()) return;
          }
          this.timeBarBG.set_visible(!1);
          this.timeBar.set_visible(!1);
          this.timeTxt.set_visible(!1);
          this.canPause = !1;
          this.endingSong = !0;
          this.updateTime = this.inCutscene = this.camZooming = !1;
          C.deathCounter = 0;
          C.seenCutscene = !1;
          if (
            this.callOnLuas("onEndSong", [], !1) != Ec.Function_Stop &&
            !this.transitioning
          )
            if (
              (C.SONG.validScore &&
                ((b = this.ratingPercent),
                isNaN(b) && (b = 0),
                Sa.saveScore(
                  C.SONG.song,
                  this.songScore,
                  C.storyDifficulty,
                  b
                )),
              this.set_playbackRate(1),
              C.chartingMode)
            )
              this.openChartEditor();
            else {
              if (C.isStoryMode)
                if (
                  ((C.campaignScore += this.songScore),
                  (C.campaignMisses += this.songMisses),
                  X.remove(C.storyPlaylist, C.storyPlaylist[0]),
                  0 >= C.storyPlaylist.length)
                )
                  ab.loadTheFirstEnabledMod(),
                    (b = g.sound),
                    (c = G.returnSound("music", "freakyMenu", null)),
                    b.playMusic(c),
                    C.cancelMusicFadeTween(),
                    Z.skipNextTransIn && (od.nextCamera = null),
                    I.switchState(new Ab()),
                    (Object.prototype.hasOwnProperty.call(
                      y.gameplaySettings.h,
                      "practice"
                    ) &&
                      y.gameplaySettings.h.practice) ||
                      (Object.prototype.hasOwnProperty.call(
                        y.gameplaySettings.h,
                        "botplay"
                      ) &&
                        y.gameplaySettings.h.botplay) ||
                      ((Ab.weekCompleted.h[ab.weeksList[C.storyWeek]] = !0),
                      C.SONG.validScore &&
                        Sa.saveWeekScore(
                          ab.getWeekFileName(),
                          C.campaignScore,
                          C.storyDifficulty
                        ),
                      (g.save.data.weekCompleted = Ab.weekCompleted),
                      g.save.flush()),
                    (C.changedDifficulty = !1);
                else {
                  b = Ta.getDifficultyFilePath();
                  wb.trace("LOADING NEXT SONG", {
                    fileName: "source/PlayState.hx",
                    lineNumber: 3685,
                    className: "PlayState",
                    methodName: "endSong",
                  });
                  d = C.storyPlaylist[0];
                  var e = new ya("[~&\\\\;:<>#]", "");
                  c = new ya("[.,'\"%?!]", "");
                  d = e.split(K.replace(d, " ", "-")).join("-");
                  wb.trace(c.split(d).join("").toLowerCase() + b, {
                    fileName: "source/PlayState.hx",
                    lineNumber: 3686,
                    className: "PlayState",
                    methodName: "endSong",
                  });
                  d = C.SONG.song;
                  e = new ya("[~&\\\\;:<>#]", "");
                  c = new ya("[.,'\"%?!]", "");
                  d = e.split(K.replace(d, " ", "-")).join("-");
                  if ((c = "eggnog" == c.split(d).join("").toLowerCase()))
                    (d = new F(
                      -g.width * g.camera.zoom,
                      -g.height * g.camera.zoom
                    ).makeGraphic(3 * g.width, 3 * g.height, -16777216)),
                      (e = d.scrollFactor),
                      e.set_x(0),
                      e.set_y(0),
                      this.add(d),
                      this.camHUD.set_visible(!1),
                      g.sound.play(G.sound("Lights_Shut_off"));
                  Z.skipNextTransIn = !0;
                  Z.skipNextTransOut = !0;
                  C.prevCamFollow = this.camFollow;
                  C.prevCamFollowPos = this.camFollowPos;
                  C.SONG = Dd.loadFromJson(
                    C.storyPlaylist[0] + b,
                    C.storyPlaylist[0]
                  );
                  b = g.sound.music;
                  b.cleanup(b.autoDestroy, !0);
                  c
                    ? new fc().start(1.5, function (a) {
                        C.cancelMusicFadeTween();
                        I.switchState(Lb.getNextState(new C(), !1));
                      })
                    : (C.cancelMusicFadeTween(),
                      I.switchState(Lb.getNextState(new C(), !1)));
                }
              else
                wb.trace("WENT BACK TO FREEPLAY??", {
                  fileName: "source/PlayState.hx",
                  lineNumber: 3726,
                  className: "PlayState",
                  methodName: "endSong",
                }),
                  ab.loadTheFirstEnabledMod(),
                  C.cancelMusicFadeTween(),
                  Z.skipNextTransIn && (od.nextCamera = null),
                  I.switchState(new rb()),
                  (b = g.sound),
                  (c = G.returnSound("music", "freakyMenu", null)),
                  b.playMusic(c),
                  (C.changedDifficulty = !1);
              this.transitioning = !0;
            }
        },
        KillNotes: function () {
          for (; 0 < this.notes.length; ) {
            var a = this.notes.members[0];
            a.set_active(!1);
            a.set_visible(!1);
            a.kill();
            this.notes.remove(a, !0);
            a.destroy();
          }
          this.unspawnNotes = [];
          this.eventNotes = [];
        },
        cachePopUpScore: function () {
          var a = "",
            b = "";
          C.isPixelStage && ((a = "pixelUI/"), (b = "-pixel"));
          G.returnGraphic(a + "sick" + b, null);
          G.returnGraphic(a + "good" + b, null);
          G.returnGraphic(a + "bad" + b, null);
          G.returnGraphic(a + "shit" + b, null);
          G.returnGraphic(a + "combo" + b, null);
          G.returnGraphic(a + "num0" + b, null);
          G.returnGraphic(a + "num1" + b, null);
          G.returnGraphic(a + "num2" + b, null);
          G.returnGraphic(a + "num3" + b, null);
          G.returnGraphic(a + "num4" + b, null);
          G.returnGraphic(a + "num5" + b, null);
          G.returnGraphic(a + "num6" + b, null);
          G.returnGraphic(a + "num7" + b, null);
          G.returnGraphic(a + "num8" + b, null);
          G.returnGraphic(a + "num9" + b, null);
        },
        popUpScore: function (a) {
          var b = Math.abs(a.strumTime - P.songPosition + y.ratingOffset);
          this.vocals.set_volume(1);
          var c = M.string(this.combo),
            d = new W(0, 0, 0, c, 32);
          d.set_x((g.width - d.get_width()) / 2);
          d.set_y((g.height - d.get_height()) / 2);
          d.set_x(0.35 * g.width);
          var e = new F(),
            f = 350;
          c = P.judgeNote(a, b / this.playbackRate);
          this.totalNotesHit += c.ratingMod;
          a.ratingMod = c.ratingMod;
          a.ratingDisabled || c.increase();
          a.rating = c.name;
          f = c.score;
          c.noteSplash &&
            !a.noteSplashDisabled &&
            this.spawnNoteSplashOnNote(a);
          this.practiceMode ||
            this.cpuControlled ||
            ((this.songScore += f),
            a.ratingDisabled ||
              (this.songHits++,
              this.totalPlayed++,
              this.RecalculateRating(!1)));
          b = a = "";
          C.isPixelStage && ((a = "pixelUI/"), (b = "-pixel"));
          var k = G.returnGraphic(a + c.image + b, null);
          e.loadGraphic(k);
          e.set_cameras([this.camHUD]);
          e.set_x((g.width - e.get_width()) / 2);
          e.set_y((g.height - e.get_height()) / 2);
          e.set_x(d.x - 40);
          e.set_y(e.y - 60);
          e.acceleration.set_y(550 * this.playbackRate * this.playbackRate);
          e.velocity.set_y(
            e.velocity.y - g.random.int(140, 175) * this.playbackRate
          );
          e.velocity.set_x(
            e.velocity.x - g.random.int(0, 10) * this.playbackRate
          );
          e.set_visible(!y.hideHud && this.showRating);
          e.set_x(e.x + y.comboOffset[0]);
          e.set_y(e.y - y.comboOffset[1]);
          c = new F();
          k = G.returnGraphic(a + "combo" + b, null);
          var r = c.loadGraphic(k);
          r.set_cameras([this.camHUD]);
          r.set_x((g.width - r.get_width()) / 2);
          r.set_y((g.height - r.get_height()) / 2);
          r.set_x(d.x);
          r.acceleration.set_y(
            g.random.int(200, 300) * this.playbackRate * this.playbackRate
          );
          r.velocity.set_y(
            r.velocity.y - g.random.int(140, 160) * this.playbackRate
          );
          r.set_visible(!y.hideHud && this.showCombo);
          r.set_x(r.x + y.comboOffset[0]);
          r.set_y(r.y - y.comboOffset[1]);
          r.set_y(r.y + 60);
          r.velocity.set_x(
            r.velocity.x + g.random.int(1, 10) * this.playbackRate
          );
          this.insert(this.members.indexOf(this.strumLineNotes), e);
          y.comboStacking ||
            (null != C.lastRating && C.lastRating.kill(), (C.lastRating = e));
          C.isPixelStage
            ? (e.setGraphicSize((e.get_width() * C.daPixelZoom * 0.85) | 0),
              r.setGraphicSize((r.get_width() * C.daPixelZoom * 0.85) | 0))
            : (e.setGraphicSize((0.7 * e.get_width()) | 0),
              e.set_antialiasing(y.globalAntialiasing),
              r.setGraphicSize((0.7 * r.get_width()) | 0),
              r.set_antialiasing(y.globalAntialiasing));
          r.updateHitbox();
          e.updateHitbox();
          c = [];
          1e3 <= this.combo && c.push(Math.floor(this.combo / 1e3) % 10);
          c.push(Math.floor(this.combo / 100) % 10);
          c.push(Math.floor(this.combo / 10) % 10);
          c.push(this.combo % 10);
          var l = (f = 0);
          this.showCombo &&
            this.insert(this.members.indexOf(this.strumLineNotes), r);
          y.comboStacking ||
            (null != C.lastCombo && C.lastCombo.kill(), (C.lastCombo = r));
          if (null != C.lastScore)
            for (; 0 < C.lastScore.length; )
              C.lastScore[0].kill(), X.remove(C.lastScore, C.lastScore[0]);
          for (var J = 0; J < c.length; ) {
            k = c[J];
            ++J;
            var u = new F();
            k = G.returnGraphic(a + "num" + (k | 0) + b, null);
            k = [u.loadGraphic(k)];
            k[0].set_cameras([this.camHUD]);
            k[0].set_x((g.width - k[0].get_width()) / 2);
            k[0].set_y((g.height - k[0].get_height()) / 2);
            k[0].set_x(d.x + 43 * f - 90);
            k[0].set_y(k[0].y + 80);
            k[0].set_x(k[0].x + y.comboOffset[2]);
            k[0].set_y(k[0].y - y.comboOffset[3]);
            y.comboStacking || C.lastScore.push(k[0]);
            C.isPixelStage
              ? k[0].setGraphicSize((k[0].get_width() * C.daPixelZoom) | 0)
              : (k[0].set_antialiasing(y.globalAntialiasing),
                k[0].setGraphicSize((0.5 * k[0].get_width()) | 0));
            k[0].updateHitbox();
            k[0].acceleration.set_y(
              g.random.int(200, 300) * this.playbackRate * this.playbackRate
            );
            k[0].velocity.set_y(
              k[0].velocity.y - g.random.int(140, 160) * this.playbackRate
            );
            k[0].velocity.set_x(g.random.float(-5, 5) * this.playbackRate);
            k[0].set_visible(!y.hideHud);
            this.showComboNum &&
              this.insert(this.members.indexOf(this.strumLineNotes), k[0]);
            u = 0.002 * P.crochet;
            la.tween(k[0], { alpha: 0 }, 0.2 / this.playbackRate, {
              onComplete: (function (a) {
                return function (b) {
                  a[0].destroy();
                };
              })(k),
              startDelay: u / this.playbackRate,
            });
            ++f;
            k[0].x > l && (l = k[0].x);
          }
          r.set_x(l + 50);
          d.set_text(M.string(c));
          la.tween(e, { alpha: 0 }, 0.2 / this.playbackRate, {
            startDelay: (0.001 * P.crochet) / this.playbackRate,
          });
          la.tween(r, { alpha: 0 }, 0.2 / this.playbackRate, {
            onComplete: function (a) {
              d.destroy();
              r.destroy();
              e.destroy();
            },
            startDelay: (0.002 * P.crochet) / this.playbackRate,
          });
        },
        onKeyPress: function (a) {
          var b = this;
          a = a.keyCode;
          var c = this.getKeyFromEvent(a);
          if (
            !this.cpuControlled &&
            this.startedCountdown &&
            !this.paused &&
            -1 < c &&
            (g.keys.checkStatus(a, 2) || y.controllerMode)
          ) {
            if (
              !this.boyfriend.stunned &&
              this.generatedMusic &&
              !this.endingSong
            ) {
              a = P.songPosition;
              P.songPosition = g.sound.music._time;
              var d = !y.ghostTapping,
                e = [],
                f = !1,
                k = [];
              this.notes.forEachAlive(function (a) {
                1 == b.strumsBlocked[a.noteData] ||
                  !a.canBeHit ||
                  !a.mustPress ||
                  a.tooLate ||
                  a.wasGoodHit ||
                  a.isSustainNote ||
                  a.blockHit ||
                  (a.noteData == c && k.push(a), (d = !0));
              });
              k.sort(n(this, this.sortHitNotes));
              if (0 < k.length)
                for (var r = 0; r < k.length; ) {
                  var l = k[r];
                  ++r;
                  for (var J = 0; J < e.length; ) {
                    var u = e[J];
                    ++J;
                    1 > Math.abs(u.strumTime - l.strumTime)
                      ? (u.kill(), this.notes.remove(u, !0), u.destroy())
                      : (f = !0);
                  }
                  f || (this.goodNoteHit(l), e.push(l));
                }
              else
                this.callOnLuas("onGhostTap", [c]), d && this.noteMissPress(c);
              this.keysPressed[c] = !0;
              P.songPosition = a;
            }
            a = this.playerStrums.members[c];
            1 != this.strumsBlocked[c] &&
              null != a &&
              "confirm" != a.animation._curAnim.name &&
              (a.playAnim("pressed"), (a.resetAnim = 0));
            this.callOnLuas("onKeyPress", [c]);
          }
        },
        sortHitNotes: function (a, b) {
          if (a.lowPriority && !b.lowPriority) return 1;
          if (!a.lowPriority && b.lowPriority) return -1;
          a = a.strumTime;
          b = b.strumTime;
          var c = 0;
          a < b ? (c = -1) : a > b && (c = 1);
          return c;
        },
        onKeyRelease: function (a) {
          a = this.getKeyFromEvent(a.keyCode);
          if (
            !this.cpuControlled &&
            this.startedCountdown &&
            !this.paused &&
            -1 < a
          ) {
            var b = this.playerStrums.members[a];
            null != b && (b.playAnim("static"), (b.resetAnim = 0));
            this.callOnLuas("onKeyRelease", [a]);
          }
        },
        getKeyFromEvent: function (a) {
          if (-1 != a)
            for (var b = 0, c = this.keysArray.length; b < c; )
              for (var d = b++, e = 0, f = this.keysArray[d].length; e < f; ) {
                var k = e++;
                if (a == this.keysArray[d][k]) return d;
              }
          return -1;
        },
        keyShit: function () {
          var a = this,
            b = ia.player1.controls._note_up.check(),
            c = ia.player1.controls._note_right.check(),
            d = ia.player1.controls._note_down.check(),
            e = [ia.player1.controls._note_left.check(), d, b, c];
          if (
            y.controllerMode &&
            ((b = this.parseKeys("_P")), -1 != b.indexOf(!0))
          )
            for (c = 0, d = b.length; c < d; ) {
              var f = c++;
              if (b[f] && 1 != this.strumsBlocked[f])
                this.onKeyPress(
                  new Ng("keyDown", !0, !0, -1, this.keysArray[f][0])
                );
            }
          this.startedCountdown &&
            !this.boyfriend.stunned &&
            this.generatedMusic &&
            (this.notes.forEachAlive(function (b) {
              1 != a.strumsBlocked[b.noteData] &&
                b.isSustainNote &&
                e[b.noteData] &&
                b.canBeHit &&
                b.mustPress &&
                !b.tooLate &&
                !b.wasGoodHit &&
                !b.blockHit &&
                a.goodNoteHit(b);
            }),
            (-1 == e.indexOf(!0) || this.endingSong) &&
              null != this.boyfriend.animation._curAnim &&
              this.boyfriend.holdTimer >
                (0.0011 / g.sound.music._pitch) *
                  P.stepCrochet *
                  this.boyfriend.singDuration &&
              K.startsWith(this.boyfriend.animation._curAnim.name, "sing") &&
              !K.endsWith(this.boyfriend.animation._curAnim.name, "miss") &&
              this.boyfriend.dance());
          if (y.controllerMode || -1 != this.strumsBlocked.indexOf(!0))
            if (((b = this.parseKeys("_R")), -1 != b.indexOf(!0)))
              for (c = 0, d = b.length; c < d; )
                if (((f = c++), b[f] || 1 == this.strumsBlocked[f]))
                  this.onKeyRelease(
                    new Ng("keyUp", !0, !0, -1, this.keysArray[f][0])
                  );
        },
        parseKeys: function (a) {
          null == a && (a = "");
          for (var b = [], c = 0, d = this.controlArray.length; c < d; ) {
            var e = c++;
            b[e] = qa.getProperty(
              ia.player1.controls,
              this.controlArray[e] + a
            );
          }
          return b;
        },
        noteMiss: function (a) {
          var b = this;
          this.notes.forEachAlive(function (c) {
            a != c &&
              a.mustPress &&
              a.noteData == c.noteData &&
              a.isSustainNote == c.isSustainNote &&
              1 > Math.abs(a.strumTime - c.strumTime) &&
              (c.kill(), b.notes.remove(c, !0), c.destroy());
          });
          this.combo = 0;
          this.health -= a.missHealth * this.healthLoss;
          this.instakillOnMiss &&
            (this.vocals.set_volume(0), this.doDeathCheck(!0));
          this.songMisses++;
          this.vocals.set_volume(0);
          this.practiceMode || (this.songScore -= 10);
          this.totalPlayed++;
          this.RecalculateRating(!0);
          var c = this.boyfriend;
          a.gfNote && (c = this.gf);
          null != c &&
            !a.noMissAnimation &&
            c.hasMissAnimations &&
            c.playAnim(
              this.singAnimations[Math.abs(a.noteData) | 0] +
                "miss" +
                a.animSuffix,
              !0
            );
          this.callOnLuas("noteMiss", [
            this.notes.members.indexOf(a),
            a.noteData,
            a.noteType,
            a.isSustainNote,
          ]);
        },
        noteMissPress: function (a) {
          null == a && (a = 1);
          y.ghostTapping ||
            (this.boyfriend.stunned ||
              ((this.health -= 0.05 * this.healthLoss),
              this.instakillOnMiss &&
                (this.vocals.set_volume(0), this.doDeathCheck(!0)),
              5 < this.combo &&
                null != this.gf &&
                Object.prototype.hasOwnProperty.call(
                  this.gf.animOffsets.h,
                  "sad"
                ) &&
                this.gf.playAnim("sad"),
              (this.combo = 0),
              this.practiceMode || (this.songScore -= 10),
              this.endingSong || this.songMisses++,
              this.totalPlayed++,
              this.RecalculateRating(!0),
              g.sound.play(
                G.sound("missnote" + g.random.int(1, 3), null),
                g.random.float(0.1, 0.2)
              ),
              this.boyfriend.hasMissAnimations &&
                this.boyfriend.playAnim(
                  this.singAnimations[Math.abs(a) | 0] + "miss",
                  !0
                ),
              this.vocals.set_volume(0)),
            this.callOnLuas("noteMissPress", [a]));
        },
        opponentNoteHit: function (a) {
          var b = C.SONG.song,
            c = new ya("[~&\\\\;:<>#]", ""),
            d = new ya("[.,'\"%?!]", "");
          b = c.split(K.replace(b, " ", "-")).join("-");
          "tutorial" != d.split(b).join("").toLowerCase() &&
            (this.camZooming = !0);
          "Hey!" == a.noteType &&
          Object.prototype.hasOwnProperty.call(this.dad.animOffsets.h, "hey")
            ? (this.dad.playAnim("hey", !0),
              (this.dad.specialAnim = !0),
              (this.dad.heyTimer = 0.6))
            : a.noAnimation ||
              ((b = a.animSuffix),
              null != C.SONG.notes[this.curSection] &&
                C.SONG.notes[this.curSection].altAnim &&
                !C.SONG.notes[this.curSection].gfSection &&
                (b = "-alt"),
              (d = this.dad),
              (b = this.singAnimations[Math.abs(a.noteData) | 0] + b),
              a.gfNote && (d = this.gf),
              null != d && (d.playAnim(b, !0), (d.holdTimer = 0)));
          C.SONG.needsVoices && this.vocals.set_volume(1);
          d = 0.15;
          a.isSustainNote &&
            !K.endsWith(a.animation._curAnim.name, "end") &&
            (d += 0.15);
          this.StrumPlayAnim(!0, Math.abs(a.noteData) | 0, d);
          a.hitByOpponent = !0;
          this.callOnLuas("opponentNoteHit", [
            this.notes.members.indexOf(a),
            Math.abs(a.noteData),
            a.noteType,
            a.isSustainNote,
          ]);
          a.isSustainNote || (a.kill(), this.notes.remove(a, !0), a.destroy());
        },
        goodNoteHit: function (a) {
          if (
            !(
              a.wasGoodHit ||
              (this.cpuControlled && (a.ignoreNote || a.hitCausesMiss))
            )
          ) {
            0 < y.hitsoundVolume &&
              !a.hitsoundDisabled &&
              g.sound.play(G.sound("hitsound"), y.hitsoundVolume);
            if (a.hitCausesMiss)
              this.noteMiss(a),
                a.noteSplashDisabled ||
                  a.isSustainNote ||
                  this.spawnNoteSplashOnNote(a),
                a.noMissAnimation ||
                  "Hurt Note" != a.noteType ||
                  null == this.boyfriend.animation._animations.h.hurt ||
                  (this.boyfriend.playAnim("hurt", !0),
                  (this.boyfriend.specialAnim = !0)),
                (a.wasGoodHit = !0);
            else {
              a.isSustainNote ||
                ((this.combo += 1),
                9999 < this.combo && (this.combo = 9999),
                this.popUpScore(a));
              this.health += a.hitHealth * this.healthGain;
              if (!a.noAnimation) {
                var b = this.singAnimations[Math.abs(a.noteData) | 0];
                a.gfNote
                  ? null != this.gf &&
                    (this.gf.playAnim(b + a.animSuffix, !0),
                    (this.gf.holdTimer = 0))
                  : (this.boyfriend.playAnim(b + a.animSuffix, !0),
                    (this.boyfriend.holdTimer = 0));
                "Hey!" == a.noteType &&
                  (Object.prototype.hasOwnProperty.call(
                    this.boyfriend.animOffsets.h,
                    "hey"
                  ) &&
                    (this.boyfriend.playAnim("hey", !0),
                    (this.boyfriend.specialAnim = !0),
                    (this.boyfriend.heyTimer = 0.6)),
                  null != this.gf &&
                    Object.prototype.hasOwnProperty.call(
                      this.gf.animOffsets.h,
                      "cheer"
                    ) &&
                    (this.gf.playAnim("cheer", !0),
                    (this.gf.specialAnim = !0),
                    (this.gf.heyTimer = 0.6)));
              }
              this.cpuControlled
                ? ((b = 0.15),
                  a.isSustainNote &&
                    !K.endsWith(a.animation._curAnim.name, "end") &&
                    (b += 0.15),
                  this.StrumPlayAnim(!1, Math.abs(a.noteData) | 0, b))
                : ((b = this.playerStrums.members[a.noteData]),
                  null != b && b.playAnim("confirm", !0));
              a.wasGoodHit = !0;
              this.vocals.set_volume(1);
              b = a.isSustainNote;
              var c = Math.round(Math.abs(a.noteData)),
                d = a.noteType;
              this.callOnLuas("goodNoteHit", [
                this.notes.members.indexOf(a),
                c,
                d,
                b,
              ]);
            }
            a.isSustainNote ||
              (a.kill(), this.notes.remove(a, !0), a.destroy());
          }
        },
        spawnNoteSplashOnNote: function (a) {
          if (y.noteSplashes && null != a) {
            var b = this.playerStrums.members[a.noteData];
            null != b && this.spawnNoteSplash(b.x, b.y, a.noteData, a);
          }
        },
        spawnNoteSplash: function (a, b, c, d) {
          var e = "noteSplashes";
          null != C.SONG.splashSkin &&
            0 < C.SONG.splashSkin.length &&
            (e = C.SONG.splashSkin);
          var f = 0,
            k = 0,
            r = 0;
          -1 < c &&
            c < y.arrowHSV.length &&
            ((f = y.arrowHSV[c][0] / 360),
            (k = y.arrowHSV[c][1] / 100),
            (r = y.arrowHSV[c][2] / 100),
            null != d &&
              ((e = d.noteSplashTexture),
              (f = d.noteSplashHue),
              (k = d.noteSplashSat),
              (r = d.noteSplashBrt)));
          d = this.grpNoteSplashes.recycle(rh);
          d.setupNoteSplash(a, b, c, e, f, k, r);
          this.grpNoteSplashes.add(d);
        },
        resetFastCar: function () {
          this.fastCar.set_x(-12600);
          this.fastCar.set_y(g.random.int(140, 250));
          this.fastCar.velocity.set_x(0);
          this.fastCarCanDrive = !0;
        },
        fastCarDrive: function () {
          var a = this;
          g.sound.play(G.sound("carPass" + g.random.int(0, 1), null), 0.7);
          this.fastCar.velocity.set_x((g.random.int(170, 220) / g.elapsed) * 3);
          this.fastCarCanDrive = !1;
          this.carTimer = new fc().start(2, function (b) {
            a.resetFastCar();
            a.carTimer = null;
          });
        },
        trainStart: function () {
          this.trainMoving = !0;
          null == this.trainSound._channel && this.trainSound.play(!0);
        },
        updateTrainPos: function () {
          4700 <= this.trainSound._time &&
            ((this.startedMoving = !0),
            null != this.gf &&
              (this.gf.playAnim("hairBlow"), (this.gf.specialAnim = !0)));
          if (this.startedMoving) {
            var a = this.phillyTrain;
            a.set_x(a.x - 400);
            -2e3 > this.phillyTrain.x &&
              !this.trainFinishing &&
              (this.phillyTrain.set_x(-1150),
              --this.trainCars,
              0 >= this.trainCars && (this.trainFinishing = !0));
            -4e3 > this.phillyTrain.x &&
              this.trainFinishing &&
              this.trainReset();
          }
        },
        trainReset: function () {
          null != this.gf &&
            ((this.gf.danced = !1),
            this.gf.playAnim("hairFall"),
            (this.gf.specialAnim = !0));
          this.phillyTrain.set_x(g.width + 200);
          this.trainMoving = !1;
          this.trainCars = 8;
          this.startedMoving = this.trainFinishing = !1;
        },
        lightningStrikeShit: function () {
          g.sound.play(G.sound("thunder_" + g.random.int(1, 2), null));
          y.lowQuality ||
            this.halloweenBG.animation.play("halloweem bg lightning strike");
          this.lightningStrikeBeat = this.curBeat;
          this.lightningOffset = g.random.int(8, 24);
          Object.prototype.hasOwnProperty.call(
            this.boyfriend.animOffsets.h,
            "scared"
          ) && this.boyfriend.playAnim("scared", !0);
          null != this.gf &&
            Object.prototype.hasOwnProperty.call(
              this.gf.animOffsets.h,
              "scared"
            ) &&
            this.gf.playAnim("scared", !0);
          if (y.camZooms) {
            var a = g.camera;
            a.set_zoom(a.zoom + 0.015);
            a = this.camHUD;
            a.set_zoom(a.zoom + 0.03);
            this.camZooming ||
              (la.tween(g.camera, { zoom: this.defaultCamZoom }, 0.5),
              la.tween(this.camHUD, { zoom: 1 }, 0.5));
          }
          y.flashing &&
            (this.halloweenWhite.set_alpha(0.4),
            la.tween(this.halloweenWhite, { alpha: 0.5 }, 0.075),
            la.tween(this.halloweenWhite, { alpha: 0 }, 0.25, {
              startDelay: 0.15,
            }));
        },
        killHenchmen: function () {
          !y.lowQuality &&
            y.violence &&
            "limo" == C.curStage &&
            1 > this.limoKillingState &&
            (this.limoMetalPole.set_x(-400),
            this.limoMetalPole.set_visible(!0),
            this.limoLight.set_visible(!0),
            this.limoCorpse.set_visible(!1),
            this.limoCorpseTwo.set_visible(!1),
            (this.limoKillingState = 1));
        },
        resetLimoKill: function () {
          "limo" == C.curStage &&
            (this.limoMetalPole.set_x(-500),
            this.limoMetalPole.set_visible(!1),
            this.limoLight.set_x(-500),
            this.limoLight.set_visible(!1),
            this.limoCorpse.set_x(-500),
            this.limoCorpse.set_visible(!1),
            this.limoCorpseTwo.set_x(-500),
            this.limoCorpseTwo.set_visible(!1));
        },
        destroy: function () {
          for (var a = 0, b = this.luaArray; a < b.length; ) {
            var c = b[a];
            ++a;
            c.call("onDestroy", []);
            c.stop();
          }
          this.luaArray = [];
          null != Ec.hscript && (Ec.hscript = null);
          y.controllerMode ||
            (sa
              .get_current()
              .stage.removeEventListener("keyDown", n(this, this.onKeyPress)),
            sa
              .get_current()
              .stage.removeEventListener("keyUp", n(this, this.onKeyRelease)));
          g.animationTimeScale = 1;
          g.sound.music.set_pitch(1);
          I.prototype.destroy.call(this);
        },
        stepHit: function () {
          I.prototype.stepHit.call(this);
          (Math.abs(g.sound.music._time - (P.songPosition - P.offset)) >
            20 * this.playbackRate ||
            (C.SONG.needsVoices &&
              Math.abs(this.vocals._time - (P.songPosition - P.offset)) >
                20 * this.playbackRate)) &&
            this.resyncVocals();
          this.curStep != this.lastStepHit &&
            ((this.lastStepHit = this.curStep),
            this.setOnLuas("curStep", this.curStep),
            this.callOnLuas("onStepHit", []));
        },
        beatHit: function () {
          I.prototype.beatHit.call(this);
          if (!(this.lastBeatHit >= this.curBeat)) {
            if (this.generatedMusic) {
              var a = y.downScroll ? -1 : 1;
              null == a && (a = -1);
              var b = Um.byY,
                c = a;
              this.notes.members.sort(function (a, d) {
                return b(c, a, d);
              });
            }
            a = this.iconP1.scale;
            var d = 1.2,
              e = 1.2;
            null == e && (e = 0);
            null == d && (d = 0);
            a.set_x(d);
            a.set_y(e);
            a = this.iconP2.scale;
            e = d = 1.2;
            null == e && (e = 0);
            null == d && (d = 0);
            a.set_x(d);
            a.set_y(e);
            this.iconP1.updateHitbox();
            this.iconP2.updateHitbox();
            null == this.gf ||
              0 !=
                this.curBeat %
                  Math.round(this.gfSpeed * this.gf.danceEveryNumBeats) ||
              null == this.gf.animation._curAnim ||
              K.startsWith(this.gf.animation._curAnim.name, "sing") ||
              this.gf.stunned ||
              this.gf.dance();
            0 != this.curBeat % this.boyfriend.danceEveryNumBeats ||
              null == this.boyfriend.animation._curAnim ||
              K.startsWith(this.boyfriend.animation._curAnim.name, "sing") ||
              this.boyfriend.stunned ||
              this.boyfriend.dance();
            0 != this.curBeat % this.dad.danceEveryNumBeats ||
              null == this.dad.animation._curAnim ||
              K.startsWith(this.dad.animation._curAnim.name, "sing") ||
              this.dad.stunned ||
              this.dad.dance();
            this.lastBeatHit = this.curBeat;
            this.setOnLuas("curBeat", this.curBeat);
            this.callOnLuas("onBeatHit", []);
          }
        },
        sectionHit: function () {
          I.prototype.sectionHit.call(this);
          if (null != C.SONG.notes[this.curSection]) {
            !this.generatedMusic ||
              this.endingSong ||
              this.isCameraOnForcedPos ||
              this.moveCameraSection();
            if (this.camZooming && 1.35 > g.camera.zoom && y.camZooms) {
              var a = g.camera;
              a.set_zoom(a.zoom + 0.015 * this.camZoomingMult);
              a = this.camHUD;
              a.set_zoom(a.zoom + 0.03 * this.camZoomingMult);
            }
            C.SONG.notes[this.curSection].changeBPM &&
              (P.changeBPM(C.SONG.notes[this.curSection].bpm),
              this.setOnLuas("curBpm", P.bpm),
              this.setOnLuas("crochet", P.crochet),
              this.setOnLuas("stepCrochet", P.stepCrochet));
            this.mustHit = C.SONG.notes[this.curSection].mustHitSection;
            this.setOnLuas(
              "mustHitSection",
              C.SONG.notes[this.curSection].mustHitSection
            );
            this.setOnLuas("altAnim", C.SONG.notes[this.curSection].altAnim);
            this.setOnLuas(
              "gfSection",
              C.SONG.notes[this.curSection].gfSection
            );
          }
          this.setOnLuas("curSection", this.curSection);
          this.callOnLuas("onSectionHit", []);
        },
        callOnLuas: function (a, b, c, d) {
          return Ec.Function_Continue;
        },
        setOnLuas: function (a, b) {},
        StrumPlayAnim: function (a, b, c) {
          a = a ? this.strumLineNotes.members[b] : this.playerStrums.members[b];
          null != a && (a.playAnim("confirm", !0), (a.resetAnim = c));
        },
        RecalculateRating: function (a) {
          null == a && (a = !1);
          this.setOnLuas("score", this.songScore);
          this.setOnLuas("misses", this.songMisses);
          this.setOnLuas("hits", this.songHits);
          if (
            this.callOnLuas("onRecalculateRating", [], !1) != Ec.Function_Stop
          ) {
            if (1 > this.totalPlayed) this.ratingName = "?";
            else if (
              ((this.ratingPercent = Math.min(
                1,
                Math.max(0, this.totalNotesHit / this.totalPlayed)
              )),
              1 <= this.ratingPercent)
            )
              this.ratingName = C.ratingStuff[C.ratingStuff.length - 1][0];
            else
              for (var b = 0, c = C.ratingStuff.length - 1; b < c; ) {
                var d = b++;
                if (this.ratingPercent < C.ratingStuff[d][1]) {
                  this.ratingName = C.ratingStuff[d][0];
                  break;
                }
              }
            this.ratingFC = "";
            0 < this.sicks && (this.ratingFC = "SFC");
            0 < this.goods && (this.ratingFC = "GFC");
            if (0 < this.bads || 0 < this.shits) this.ratingFC = "FC";
            0 < this.songMisses && 10 > this.songMisses
              ? (this.ratingFC = "SDCB")
              : 10 <= this.songMisses && (this.ratingFC = "Clear");
          }
          this.updateScore(a);
          this.setOnLuas("rating", this.ratingPercent);
          this.setOnLuas("ratingName", this.ratingName);
          this.setOnLuas("ratingFC", this.ratingFC);
        },
        __class__: C,
        __properties__: q(I.prototype.__properties__, {
          set_playbackRate: "set_playbackRate",
          set_songSpeed: "set_songSpeed",
        }),
      });
      var ia = function (a, b) {
        this.id = a;
        this.controls = new dk("player" + a, b);
      };
      h.PlayerSettings = ia;
      ia.__name__ = "PlayerSettings";
      ia.init = function () {
        null == ia.player1 &&
          ((ia.player1 = new ia(0, Jg.Solo)), ++ia.numPlayers);
        var a = g.gamepads.get_numActiveGamepads();
        if (0 < a) {
          var b = g.gamepads._activeGamepads[0];
          if (null == b) throw N.thrown("Unexpected null gamepad. id:0");
          ia.player1.controls.addDefaultGamepad(0);
        }
        if (1 < a) {
          null == ia.player2 &&
            ((ia.player2 = new ia(1, Jg.None)), ++ia.numPlayers);
          b = g.gamepads._activeGamepads[1];
          if (null == b) throw N.thrown("Unexpected null gamepad. id:0");
          ia.player2.controls.addDefaultGamepad(1);
        }
      };
      ia.prototype = { __class__: ia };
      var Th = function (a, b, c, d, e, f, k) {
        null == e && (e = !1);
        null == b && (b = 0);
        null == a && (a = "");
        this.cornerSize = 10;
        this.goAnyway = !1;
        this.theText = "";
        this.buttons = new F(473.3, 450);
        this.selected = 0;
        var r = this;
        this.selected = b;
        this.okc = c;
        this.cancelc = d;
        this.theText = a;
        this.goAnyway = e;
        a = "OK";
        b = "CANCEL";
        null != f && (a = f);
        null != k && (b = k);
        this.buttonAccept = new lb(473.3, 450, a, function () {
          null != r.okc && r.okc();
          r.close();
        });
        this.buttonNo = new lb(633.3, 450, b, function () {
          null != r.cancelc && r.cancelc();
          r.close();
        });
        La.call(this);
      };
      h.Prompt = Th;
      Th.__name__ = "Prompt";
      Th.__super__ = La;
      Th.prototype = q(La.prototype, {
        create: function () {
          La.prototype.create.call(this);
          if (this.goAnyway) null != this.okc && this.okc(), this.close();
          else {
            this.panel = new F(0, 0);
            this.panelbg = new F(0, 0);
            this.makeSelectorGraphic(this.panel, 300, 150, -6710887);
            this.makeSelectorGraphic(this.panelbg, 304, 154, -16777216);
            var a = this.panel.scrollFactor;
            a.set_x(0);
            a.set_y(0);
            var b = this.panel;
            b.set_x((g.width - b.get_width()) / 2);
            b.set_y((g.height - b.get_height()) / 2);
            a = this.panelbg.scrollFactor;
            a.set_x(0);
            a.set_y(0);
            b = this.panelbg;
            b.set_x((g.width - b.get_width()) / 2);
            b.set_y((g.height - b.get_height()) / 2);
            this.add(this.panelbg);
            this.add(this.panel);
            this.add(this.buttonAccept);
            this.add(this.buttonNo);
            a = new W(
              2 * this.buttonNo.get_width(),
              this.panel.y,
              300,
              this.theText,
              16
            );
            a.set_alignment("center");
            this.add(a);
            a.set_x((g.width - a.get_width()) / 2);
            a.set_y((g.height - a.get_height()) / 2);
            b = this.buttonAccept;
            b.set_x((g.width - b.get_width()) / 2);
            b.set_y((g.height - b.get_height()) / 2);
            b = this.buttonNo;
            b.set_x((g.width - b.get_width()) / 2);
            b.set_y((g.height - b.get_height()) / 2);
            b = this.buttonAccept;
            b.set_x(b.x - this.buttonNo.get_width() / 1.5);
            this.buttonAccept.set_y(
              this.panel.y + this.panel.get_height() - 30
            );
            b = this.buttonNo;
            b.set_x(b.x + this.buttonNo.get_width() / 1.5);
            this.buttonNo.set_y(this.panel.y + this.panel.get_height() - 30);
            a = a.scrollFactor;
            a.set_x(0);
            a.set_y(0);
          }
        },
        makeSelectorGraphic: function (a, b, c, d) {
          a.makeGraphic(b, c, d);
          a.get_pixels().fillRect(new ha(0, 190, a.get_width(), 5), 0);
          a.get_pixels().fillRect(
            new ha(0, 0, this.cornerSize, this.cornerSize),
            0
          );
          this.drawCircleCornerOnSelector(a, !1, !1, d);
          a.get_pixels().fillRect(
            new ha(
              a.get_width() - this.cornerSize,
              0,
              this.cornerSize,
              this.cornerSize
            ),
            0
          );
          this.drawCircleCornerOnSelector(a, !0, !1, d);
          a.get_pixels().fillRect(
            new ha(
              0,
              a.get_height() - this.cornerSize,
              this.cornerSize,
              this.cornerSize
            ),
            0
          );
          this.drawCircleCornerOnSelector(a, !1, !0, d);
          a.get_pixels().fillRect(
            new ha(
              a.get_width() - this.cornerSize,
              a.get_height() - this.cornerSize,
              this.cornerSize,
              this.cornerSize
            ),
            0
          );
          this.drawCircleCornerOnSelector(a, !0, !0, d);
        },
        drawCircleCornerOnSelector: function (a, b, c, d) {
          var e = a.get_width() - this.cornerSize,
            f = c ? a.get_height() - 1 : 0;
          c && (f -= 2);
          a.get_pixels().fillRect(
            new ha(b ? e : 1, Math.abs(f - 8) | 0, 10, 3),
            d
          );
          c && ++f;
          a.get_pixels().fillRect(
            new ha(b ? e : 2, Math.abs(f - 6) | 0, 9, 2),
            d
          );
          c && ++f;
          a.get_pixels().fillRect(
            new ha(b ? e : 3, Math.abs(f - 5) | 0, 8, 1),
            d
          );
          a.get_pixels().fillRect(
            new ha(b ? e : 4, Math.abs(f - 4) | 0, 7, 1),
            d
          );
          a.get_pixels().fillRect(
            new ha(b ? e : 5, Math.abs(f - 3) | 0, 6, 1),
            d
          );
          a.get_pixels().fillRect(
            new ha(b ? e : 6, Math.abs(f - 2) | 0, 5, 1),
            d
          );
          a.get_pixels().fillRect(
            new ha(b ? e : 8, Math.abs(f - 1) | 0, 3, 1),
            d
          );
        },
        __class__: Th,
      });
      var qa = function () {};
      h.Reflect = qa;
      qa.__name__ = "Reflect";
      qa.field = function (a, b) {
        try {
          return a[b];
        } catch (c) {
          return null;
        }
      };
      qa.getProperty = function (a, b) {
        var c;
        if (null == a) return null;
        var d = a.__properties__ ? (c = a.__properties__["get_" + b]) : !1;
        return d ? a[c]() : a[b];
      };
      qa.setProperty = function (a, b, c) {
        var d;
        var e = a.__properties__ ? (d = a.__properties__["set_" + b]) : !1;
        if (e) a[d](c);
        else a[b] = c;
      };
      qa.fields = function (a) {
        var b = [];
        if (null != a) {
          var c = Object.prototype.hasOwnProperty,
            d;
          for (d in a)
            "__id__" != d && "hx__closures__" != d && c.call(a, d) && b.push(d);
        }
        return b;
      };
      qa.isFunction = function (a) {
        return "function" == typeof a ? !(a.__name__ || a.__ename__) : !1;
      };
      qa.compare = function (a, b) {
        return a == b ? 0 : a > b ? 1 : -1;
      };
      qa.compareMethods = function (a, b) {
        return a == b
          ? !0
          : qa.isFunction(a) && qa.isFunction(b)
          ? a.scope == b.scope && a.method == b.method
            ? null != a.method
            : !1
          : !1;
      };
      qa.isObject = function (a) {
        if (null == a) return !1;
        var b = typeof a;
        return "string" == b || ("object" == b && null == a.__enum__)
          ? !0
          : "function" == b
          ? null != (a.__name__ || a.__ename__)
          : !1;
      };
      qa.isEnumValue = function (a) {
        return null != a ? null != a.__enum__ : !1;
      };
      qa.deleteField = function (a, b) {
        if (!Object.prototype.hasOwnProperty.call(a, b)) return !1;
        delete a[b];
        return !0;
      };
      var Qi = function (a, b, c, d) {
        null == d && (d = -1);
        this.onYes = !1;
        this.alphabetArray = [];
        this.song = a;
        this.difficulty = b;
        this.week = d;
        La.call(this);
        -1 < d && (a = ab.weeksLoaded.h[ab.weeksList[d]].weekName);
        a += " (" + Ta.difficulties[b] + ")?";
        this.bg = new F().makeGraphic(g.width, g.height, -16777216);
        this.bg.set_alpha(0);
        b = this.bg.scrollFactor;
        b.set_x(0);
        b.set_y(0);
        this.add(this.bg);
        var e = 18 < a.length ? 0.8 : 1,
          f = new ib(0, 180, "Reset the score of", !0);
        b = 1;
        null == b && (b = 17);
        (1 != b && 17 != b) || f.set_x((g.width - f.get_width()) / 2);
        (16 != b && 17 != b) || f.set_y((g.height - f.get_height()) / 2);
        this.alphabetArray.push(f);
        f.set_alpha(0);
        this.add(f);
        a = new ib(0, f.y + 90, a, !0);
        a.set_scaleX(e);
        b = 1;
        null == b && (b = 17);
        (1 != b && 17 != b) || a.set_x((g.width - a.get_width()) / 2);
        (16 != b && 17 != b) || a.set_y((g.height - a.get_height()) / 2);
        -1 == d && a.set_x(a.x + 60 * e);
        this.alphabetArray.push(a);
        a.set_alpha(0);
        this.add(a);
        -1 == d &&
          ((this.icon = new sf(c)),
          this.icon.setGraphicSize((this.icon.get_width() * e) | 0),
          this.icon.updateHitbox(),
          this.icon.setPosition(a.x - this.icon.get_width() + 10 * e, a.y - 30),
          this.icon.set_alpha(0),
          this.add(this.icon));
        c = this.yesText = new ib(0, a.y + 150, "Yes", !0);
        b = 1;
        null == b && (b = 17);
        (1 != b && 17 != b) || c.set_x((g.width - c.get_width()) / 2);
        (16 != b && 17 != b) || c.set_y((g.height - c.get_height()) / 2);
        c = this.yesText;
        c.set_x(c.x - 200);
        this.add(this.yesText);
        c = this.noText = new ib(0, a.y + 150, "No", !0);
        b = 1;
        null == b && (b = 17);
        (1 != b && 17 != b) || c.set_x((g.width - c.get_width()) / 2);
        (16 != b && 17 != b) || c.set_y((g.height - c.get_height()) / 2);
        c = this.noText;
        c.set_x(c.x + 200);
        this.add(this.noText);
        this.updateOptions();
      };
      h.ResetScoreSubState = Qi;
      Qi.__name__ = "ResetScoreSubState";
      Qi.__super__ = La;
      Qi.prototype = q(La.prototype, {
        update: function (a) {
          var b = this.bg;
          b.set_alpha(b.alpha + 1.5 * a);
          0.6 < this.bg.alpha && this.bg.set_alpha(0.6);
          b = 0;
          for (var c = this.alphabetArray.length; b < c; ) {
            var d = b++;
            d = this.alphabetArray[d];
            d.set_alpha(d.alpha + 2.5 * a);
          }
          -1 == this.week && ((b = this.icon), b.set_alpha(b.alpha + 2.5 * a));
          if (
            ia.player1.controls._ui_leftP.check() ||
            ia.player1.controls._ui_rightP.check()
          )
            g.sound.play(G.sound("scrollMenu"), 1),
              (this.onYes = !this.onYes),
              this.updateOptions();
          ia.player1.controls._back.check()
            ? (g.sound.play(G.sound("cancelMenu"), 1), this.close())
            : ia.player1.controls._accept.check() &&
              (this.onYes &&
                (-1 == this.week
                  ? Sa.resetSong(this.song, this.difficulty)
                  : Sa.resetWeek(ab.weeksList[this.week], this.difficulty)),
              g.sound.play(G.sound("cancelMenu"), 1),
              this.close());
          La.prototype.update.call(this, a);
        },
        updateOptions: function () {
          var a = [0.75, 1],
            b = [0.6, 1.25],
            c = this.onYes ? 1 : 0;
          this.yesText.set_alpha(b[c]);
          var d = this.yesText.scale,
            e = a[c],
            f = a[c];
          null == f && (f = 0);
          null == e && (e = 0);
          d.set_x(e);
          d.set_y(f);
          this.noText.set_alpha(b[1 - c]);
          d = this.noText.scale;
          e = a[1 - c];
          f = a[1 - c];
          null == f && (f = 0);
          null == e && (e = 0);
          d.set_x(e);
          d.set_y(f);
          -1 == this.week && this.icon.animation._curAnim.set_curFrame(c);
        },
        __class__: Qi,
      });
      var Dd = function () {};
      h.Song = Dd;
      Dd.__name__ = "Song";
      Dd.onLoadJson = function (a) {
        null == a.gfVersion && ((a.gfVersion = a.player3), (a.player3 = null));
        if (null == a.events) {
          a.events = [];
          for (var b = 0, c = a.notes.length; b < c; ) {
            var d = b++,
              e = 0;
            d = a.notes[d].sectionNotes;
            for (var f = d.length; e < f; ) {
              var k = d[e];
              0 > k[1]
                ? (a.events.push([k[0], [[k[2], k[3], k[4]]]]),
                  X.remove(d, k),
                  (f = d.length))
                : ++e;
            }
          }
        }
      };
      Dd.loadFromJson = function (a, b) {
        var c = null,
          d = new ya("[~&\\\\;:<>#]", ""),
          e = new ya("[.,'\"%?!]", "");
        d = d.split(K.replace(b, " ", "-")).join("-");
        b = e.split(d).join("").toLowerCase();
        d = new ya("[~&\\\\;:<>#]", "");
        e = new ya("[.,'\"%?!]", "");
        d = d.split(K.replace(a, " ", "-")).join("-");
        e = e.split(d).join("").toLowerCase();
        for (
          null == c &&
          (c = K.trim(
            ra.getText(
              G.getPath("data/" + (b + "/" + e) + ".json", "TEXT", null)
            )
          ));
          !K.endsWith(c, "}");

        )
          c = X.substr(c, 0, c.length - 1);
        c = Dd.parseJSONshit(c);
        "events" != a && pg.loadDirectory(c);
        Dd.onLoadJson(c);
        return c;
      };
      Dd.parseJSONshit = function (a) {
        a = JSON.parse(a).song;
        a.validScore = !0;
        return a;
      };
      var pg = function () {};
      h.StageData = pg;
      pg.__name__ = "StageData";
      pg.loadDirectory = function (a) {
        if (null != a.stage) a = a.stage;
        else if (null != a.song)
          switch (K.replace(a.song.toLowerCase(), " ", "-")) {
            case "cocoa":
            case "eggnog":
              a = "mall";
              break;
            case "monster":
            case "south":
            case "spookeez":
              a = "spooky";
              break;
            case "blammed":
            case "philly":
            case "philly-nice":
            case "pico":
              a = "philly";
              break;
            case "high":
            case "milf":
            case "satin-panties":
              a = "limo";
              break;
            case "roses":
            case "senpai":
              a = "school";
              break;
            case "thorns":
              a = "schoolEvil";
              break;
            case "guns":
            case "stress":
            case "ugh":
              a = "tank";
              break;
            case "winter-horrorland":
              a = "mallEvil";
              break;
            default:
              a = "stage";
          }
        else a = "stage";
        a = pg.getStageFile(a);
        pg.forceNextDirectory = null == a ? "" : a.directory;
      };
      pg.getStageFile = function (a) {
        a = "stages/" + a + ".json";
        null == a && (a = "");
        a = "assets/" + a;
        if (aa.exists(a)) a = aa.getText(a);
        else return null;
        return JSON.parse(a);
      };
      var M = function () {};
      h.Std = M;
      M.__name__ = "Std";
      M.string = function (a) {
        return za.__string_rec(a, "");
      };
      M.parseInt = function (a) {
        if (null != a)
          for (var b = 0, c = a.length; b < c; ) {
            var d = b++,
              e = a.charCodeAt(d);
            if (8 >= e || (14 <= e && 32 != e && 45 != e))
              if (
                ((b = a.charCodeAt(d + 1)),
                (a = parseInt(a, 120 == b || 88 == b ? 16 : 10)),
                isNaN(a))
              )
                break;
              else return a;
          }
        return null;
      };
      var Ab = function (a, b) {
        this.lerpScore = this.intendedScore = 0;
        this.movedBack = this.selectedWeek = this.stopspamming = !1;
        this.loadedWeeks = [];
        this.curDifficulty = 1;
        I.call(this, a, b);
      };
      h.StoryMenuState = Ab;
      Ab.__name__ = "StoryMenuState";
      Ab.__super__ = I;
      Ab.prototype = q(I.prototype, {
        create: function () {
          G.clearStoredMemory();
          G.clearUnusedMemory();
          C.isStoryMode = !0;
          ab.reloadWeekFiles(!0);
          Ab.curWeek >= ab.weeksList.length && (Ab.curWeek = 0);
          this.persistentUpdate = this.persistentDraw = !0;
          this.scoreText = new W(10, 10, 0, "SCORE: 49324858", 36);
          this.scoreText.setFormat("VCR OSD Mono", 32);
          this.txtWeekTitle = new W(0.7 * g.width, 10, 0, "", 32);
          this.txtWeekTitle.setFormat("VCR OSD Mono", 32, -1, "right");
          this.txtWeekTitle.set_alpha(0.7);
          var a = new W(0, 10);
          a.set_text("RANK: GREAT");
          a.setFormat("assets/fonts/vcr.ttf", 32);
          a.set_size(this.scoreText._defaultFormat.size | 0);
          var b = 1;
          null == b && (b = 17);
          (1 != b && 17 != b) || a.set_x((g.width - a.get_width()) / 2);
          (16 != b && 17 != b) || a.set_y((g.height - a.get_height()) / 2);
          var c = G.returnGraphic("campaign_menu_UI_assets", null);
          c = jb.fromSparrow(
            c,
            G.getPath("images/campaign_menu_UI_assets.xml", "TEXT", null)
          );
          var d = new F(0, 56).makeGraphic(g.width, 386, -405679);
          this.bgSprite = new F(0, 56);
          this.bgSprite.set_antialiasing(y.globalAntialiasing);
          this.grpWeekText = new ma();
          this.add(this.grpWeekText);
          var e = new F().makeGraphic(g.width, 56, -16777216);
          this.add(e);
          this.grpWeekCharacters = new ma();
          this.grpLocks = new ma();
          this.add(this.grpLocks);
          for (var f = (e = 0), k = ab.weeksList.length; f < k; ) {
            var r = f++;
            b = ab.weeksLoaded.h[ab.weeksList[r]];
            var l = this.weekIsLocked(ab.weeksList[r]);
            if (!l || !b.hiddenUntilUnlocked) {
              this.loadedWeeks.push(b);
              ab.setDirectoryFromWeek(b);
              var J = new Ri(0, this.bgSprite.y + 396, ab.weeksList[r]);
              J.set_y(J.y + (J.get_height() + 20) * e);
              J.targetY = e;
              this.grpWeekText.add(J);
              b = 1;
              null == b && (b = 17);
              (1 != b && 17 != b) || J.set_x((g.width - J.get_width()) / 2);
              (16 != b && 17 != b) || J.set_y((g.height - J.get_height()) / 2);
              J.set_antialiasing(y.globalAntialiasing);
              l &&
                ((l = new F(J.get_width() + 10 + J.x)),
                l.set_frames(c),
                l.animation.addByPrefix("lock", "lock"),
                l.animation.play("lock"),
                (l.ID = r),
                l.set_antialiasing(y.globalAntialiasing),
                this.grpLocks.add(l));
              ++e;
            }
          }
          ab.setDirectoryFromWeek(this.loadedWeeks[0]);
          e = this.loadedWeeks[0].weekCharacters;
          f = new $d(0.25 * g.width - 150, e[0]);
          f.set_y(f.y + 70);
          this.grpWeekCharacters.add(f);
          f = new $d(0.5 * g.width - 150, e[1]);
          f.set_y(f.y + 70);
          this.grpWeekCharacters.add(f);
          f = new $d(0.75 * g.width - 150, e[2]);
          f.set_y(f.y + 70);
          this.grpWeekCharacters.add(f);
          this.difficultySelectors = new ma();
          this.add(this.difficultySelectors);
          this.leftArrow = new F(
            this.grpWeekText.members[0].x +
              this.grpWeekText.members[0].get_width() +
              10,
            this.grpWeekText.members[0].y + 10
          );
          this.leftArrow.set_frames(c);
          this.leftArrow.animation.addByPrefix("idle", "arrow left");
          this.leftArrow.animation.addByPrefix("press", "arrow push left");
          this.leftArrow.animation.play("idle");
          this.leftArrow.set_antialiasing(y.globalAntialiasing);
          this.difficultySelectors.add(this.leftArrow);
          Ta.difficulties = Ta.defaultDifficulties.slice();
          "" == Ab.lastDifficultyName &&
            (Ab.lastDifficultyName = Ta.defaultDifficulty);
          this.curDifficulty = Math.round(
            Math.max(0, Ta.defaultDifficulties.indexOf(Ab.lastDifficultyName))
          );
          this.sprDifficulty = new F(0, this.leftArrow.y);
          this.sprDifficulty.set_antialiasing(y.globalAntialiasing);
          this.difficultySelectors.add(this.sprDifficulty);
          this.rightArrow = new F(this.leftArrow.x + 376, this.leftArrow.y);
          this.rightArrow.set_frames(c);
          this.rightArrow.animation.addByPrefix("idle", "arrow right");
          this.rightArrow.animation.addByPrefix(
            "press",
            "arrow push right",
            24,
            !1
          );
          this.rightArrow.animation.play("idle");
          this.rightArrow.set_antialiasing(y.globalAntialiasing);
          this.difficultySelectors.add(this.rightArrow);
          this.add(d);
          this.add(this.bgSprite);
          this.add(this.grpWeekCharacters);
          d = new F(0.07 * g.width, this.bgSprite.y + 425);
          c = G.returnGraphic("Menu_Tracks", null);
          c = d.loadGraphic(c);
          c.set_antialiasing(y.globalAntialiasing);
          this.add(c);
          this.txtTracklist = new W(0.05 * g.width, c.y + 60, 0, "", 32);
          this.txtTracklist.set_alignment("center");
          this.txtTracklist.set_font(a._font);
          this.txtTracklist.set_color(-1747081);
          this.add(this.txtTracklist);
          this.add(this.scoreText);
          this.add(this.txtWeekTitle);
          this.changeWeek();
          this.changeDifficulty();
          I.prototype.create.call(this);
        },
        closeSubState: function () {
          this.persistentUpdate = !0;
          this.changeWeek();
          I.prototype.closeSubState.call(this);
        },
        update: function (a) {
          var b = this,
            c = this.lerpScore;
          this.lerpScore = Math.floor(
            c + Math.max(0, Math.min(1, 30 * a)) * (this.intendedScore - c)
          );
          10 > Math.abs(this.intendedScore - this.lerpScore) &&
            (this.lerpScore = this.intendedScore);
          this.scoreText.set_text("WEEK SCORE:" + this.lerpScore);
          if (!this.movedBack && !this.selectedWeek) {
            c = ia.player1.controls._ui_upP.check();
            var d = ia.player1.controls._ui_downP.check();
            c && (this.changeWeek(-1), g.sound.play(G.sound("scrollMenu")));
            d && (this.changeWeek(1), g.sound.play(G.sound("scrollMenu")));
            0 != g.mouse.wheel &&
              (g.sound.play(G.sound("scrollMenu"), 0.4),
              this.changeWeek(-g.mouse.wheel),
              this.changeDifficulty());
            ia.player1.controls._ui_right.check()
              ? this.rightArrow.animation.play("press")
              : this.rightArrow.animation.play("idle");
            ia.player1.controls._ui_left.check()
              ? this.leftArrow.animation.play("press")
              : this.leftArrow.animation.play("idle");
            ia.player1.controls._ui_rightP.check()
              ? this.changeDifficulty(1)
              : ia.player1.controls._ui_leftP.check()
              ? this.changeDifficulty(-1)
              : (c || d) && this.changeDifficulty();
            ia.player1.controls._reset.check()
              ? ((this.persistentUpdate = !1),
                this.openSubState(
                  new Qi("", this.curDifficulty, "", Ab.curWeek)
                ))
              : ia.player1.controls._accept.check() && this.selectWeek();
          }
          !ia.player1.controls._back.check() ||
            this.movedBack ||
            this.selectedWeek ||
            (g.sound.play(G.sound("cancelMenu")),
            (this.movedBack = !0),
            I.switchState(new zc()));
          I.prototype.update.call(this, a);
          this.grpLocks.forEach(function (a) {
            a.set_y(b.grpWeekText.members[a.ID].y);
            a.set_visible(a.y > g.height / 2);
          });
        },
        selectWeek: function () {
          if (this.weekIsLocked(this.loadedWeeks[Ab.curWeek].fileName))
            g.sound.play(G.sound("cancelMenu"));
          else {
            if (0 == this.stopspamming) {
              g.sound.play(G.sound("confirmMenu"));
              this.grpWeekText.members[Ab.curWeek].startFlashing();
              for (
                var a = 0, b = this.grpWeekCharacters.members;
                a < b.length;

              ) {
                var c = b[a];
                ++a;
                "" != c.character &&
                  c.hasConfirmAnimation &&
                  c.animation.play("confirm");
              }
              this.stopspamming = !0;
            }
            c = [];
            var d = this.loadedWeeks[Ab.curWeek].songs;
            a = 0;
            for (b = d.length; a < b; ) {
              var e = a++;
              c.push(d[e][0]);
            }
            C.storyPlaylist = c;
            this.selectedWeek = C.isStoryMode = !0;
            a = Ta.getDifficultyFilePath(this.curDifficulty);
            null == a && (a = "");
            C.storyDifficulty = this.curDifficulty;
            C.SONG = Dd.loadFromJson(
              C.storyPlaylist[0].toLowerCase() + a,
              C.storyPlaylist[0].toLowerCase()
            );
            C.campaignScore = 0;
            C.campaignMisses = 0;
            new fc().start(1, function (a) {
              a = new C();
              var b = !0;
              null == b && (b = !1);
              I.switchState(Lb.getNextState(a, b));
              rb.destroyFreeplayVocals();
            });
          }
        },
        changeDifficulty: function (a) {
          null == a && (a = 0);
          var b = this;
          this.curDifficulty += a;
          0 > this.curDifficulty &&
            (this.curDifficulty = Ta.difficulties.length - 1);
          this.curDifficulty >= Ta.difficulties.length &&
            (this.curDifficulty = 0);
          ab.setDirectoryFromWeek(this.loadedWeeks[Ab.curWeek]);
          a = Ta.difficulties[this.curDifficulty];
          var c = new ya("[~&\\\\;:<>#]", ""),
            d = new ya("[.,'\"%?!]", "");
          c = c.split(K.replace(a, " ", "-")).join("-");
          d = G.returnGraphic(
            "menudifficulties/" + d.split(c).join("").toLowerCase(),
            null
          );
          this.sprDifficulty.graphic != d &&
            (this.sprDifficulty.loadGraphic(d),
            this.sprDifficulty.set_x(this.leftArrow.x + 60),
            (d = this.sprDifficulty),
            d.set_x(d.x + (308 - this.sprDifficulty.get_width()) / 3),
            this.sprDifficulty.set_alpha(0),
            this.sprDifficulty.set_y(this.leftArrow.y - 15),
            null != this.tweenDifficulty && this.tweenDifficulty.cancel(),
            (this.tweenDifficulty = la.tween(
              this.sprDifficulty,
              { y: this.leftArrow.y + 15, alpha: 1 },
              0.07,
              {
                onComplete: function (a) {
                  b.tweenDifficulty = null;
                },
              }
            )));
          Ab.lastDifficultyName = a;
          this.intendedScore = Sa.getWeekScore(
            this.loadedWeeks[Ab.curWeek].fileName,
            this.curDifficulty
          );
        },
        changeWeek: function (a) {
          null == a && (a = 0);
          Ab.curWeek += a;
          Ab.curWeek >= this.loadedWeeks.length && (Ab.curWeek = 0);
          0 > Ab.curWeek && (Ab.curWeek = this.loadedWeeks.length - 1);
          var b = this.loadedWeeks[Ab.curWeek];
          ab.setDirectoryFromWeek(b);
          this.txtWeekTitle.set_text(b.storyName.toUpperCase());
          this.txtWeekTitle.set_x(
            g.width - (this.txtWeekTitle.get_width() + 10)
          );
          var c = 0;
          a = !this.weekIsLocked(b.fileName);
          for (var d = 0, e = this.grpWeekText.members; d < e.length; ) {
            var f = e[d];
            ++d;
            f.targetY = c - Ab.curWeek;
            0 == f.targetY && a ? f.set_alpha(1) : f.set_alpha(0.6);
            ++c;
          }
          this.bgSprite.set_visible(!0);
          c = b.weekBackground;
          null == c || 1 > c.length
            ? this.bgSprite.set_visible(!1)
            : ((b = this.bgSprite),
              (c = G.returnGraphic("menubackgrounds/menu_" + c, null)),
              b.loadGraphic(c));
          C.storyWeek = Ab.curWeek;
          Ta.difficulties = Ta.defaultDifficulties.slice();
          b = ab.getCurrentWeek().difficulties;
          null != b && (b = K.trim(b));
          this.difficultySelectors.set_visible(a);
          if (null != b && 0 < b.length) {
            a = b.split(",");
            for (b = a.length - 1; 0 < b; )
              null != a[b] &&
                ((a[b] = K.trim(a[b])), 1 > a[b].length && X.remove(a, a[b])),
                --b;
            0 < a.length && 0 < a[0].length && (Ta.difficulties = a);
          }
          -1 != Ta.difficulties.indexOf(Ta.defaultDifficulty)
            ? (this.curDifficulty = Math.round(
                Math.max(
                  0,
                  Ta.defaultDifficulties.indexOf(Ta.defaultDifficulty)
                )
              ))
            : (this.curDifficulty = 0);
          a = Ta.difficulties.indexOf(Ab.lastDifficultyName);
          -1 < a && (this.curDifficulty = a);
          this.updateText();
        },
        weekIsLocked: function (a) {
          a = ab.weeksLoaded.h[a];
          return !a.startUnlocked && 0 < a.weekBefore.length
            ? Object.prototype.hasOwnProperty.call(
                Ab.weekCompleted.h,
                a.weekBefore
              )
              ? !Ab.weekCompleted.h[a.weekBefore]
              : !0
            : !1;
        },
        updateText: function () {
          for (
            var a = this.loadedWeeks[Ab.curWeek].weekCharacters,
              b = 0,
              c = this.grpWeekCharacters.length;
            b < c;

          ) {
            var d = b++;
            this.grpWeekCharacters.members[d].changeCharacter(a[d]);
          }
          var e = this.loadedWeeks[Ab.curWeek];
          a = [];
          b = 0;
          for (c = e.songs.length; b < c; ) (d = b++), a.push(e.songs[d][0]);
          this.txtTracklist.set_text("");
          b = 0;
          for (c = a.length; b < c; )
            (d = b++),
              (e = this.txtTracklist),
              e.set_text(e.text + (a[d] + "\n"));
          this.txtTracklist.set_text(this.txtTracklist.text.toUpperCase());
          b = this.txtTracklist;
          c = 1;
          null == c && (c = 17);
          (1 != c && 17 != c) || b.set_x((g.width - b.get_width()) / 2);
          (16 != c && 17 != c) || b.set_y((g.height - b.get_height()) / 2);
          e = this.txtTracklist;
          e.set_x(e.x - 0.35 * g.width);
          this.intendedScore = Sa.getWeekScore(
            this.loadedWeeks[Ab.curWeek].fileName,
            this.curDifficulty
          );
        },
        __class__: Ab,
      });
      var so = function () {};
      h["_String.String_Impl_"] = so;
      so.__name__ = "_String.String_Impl_";
      so.fromCharCode = function (a) {
        return String.fromCodePoint(a);
      };
      var Yf = function () {
        this.b = "";
      };
      h.StringBuf = Yf;
      Yf.__name__ = "StringBuf";
      Yf.prototype = { __class__: Yf };
      var K = function () {};
      h.StringTools = K;
      K.__name__ = "StringTools";
      K.htmlEscape = function (a, b) {
        for (var c = "", d = 0, e = a; d < e.length; ) {
          a = e;
          var f = d++,
            k = a.charCodeAt(f);
          55296 <= k &&
            56319 >= k &&
            (k = ((k - 55232) << 10) | (a.charCodeAt(f + 1) & 1023));
          a = k;
          65536 <= a && ++d;
          switch (a) {
            case 34:
              c = b ? c + "&quot;" : c + String.fromCodePoint(a);
              break;
            case 38:
              c += "&amp;";
              break;
            case 39:
              c = b ? c + "&#039;" : c + String.fromCodePoint(a);
              break;
            case 60:
              c += "&lt;";
              break;
            case 62:
              c += "&gt;";
              break;
            default:
              c += String.fromCodePoint(a);
          }
        }
        return c;
      };
      K.htmlUnescape = function (a) {
        return a
          .split("&gt;")
          .join(">")
          .split("&lt;")
          .join("<")
          .split("&quot;")
          .join('"')
          .split("&#039;")
          .join("'")
          .split("&amp;")
          .join("&");
      };
      K.startsWith = function (a, b) {
        return a.length >= b.length ? 0 == a.lastIndexOf(b, 0) : !1;
      };
      K.endsWith = function (a, b) {
        var c = b.length,
          d = a.length;
        return d >= c ? a.indexOf(b, d - c) == d - c : !1;
      };
      K.isSpace = function (a, b) {
        a = X.cca(a, b);
        return 8 < a && 14 > a ? !0 : 32 == a;
      };
      K.ltrim = function (a) {
        for (var b = a.length, c = 0; c < b && K.isSpace(a, c); ) ++c;
        return 0 < c ? X.substr(a, c, b - c) : a;
      };
      K.rtrim = function (a) {
        for (var b = a.length, c = 0; c < b && K.isSpace(a, b - c - 1); ) ++c;
        return 0 < c ? X.substr(a, 0, b - c) : a;
      };
      K.trim = function (a) {
        return K.ltrim(K.rtrim(a));
      };
      K.replace = function (a, b, c) {
        return a.split(b).join(c);
      };
      K.hex = function (a, b) {
        for (
          var c = "";
          (c = "0123456789ABCDEF".charAt(a & 15) + c), (a >>>= 4), 0 < a;

        );
        if (null != b) for (; c.length < b; ) c = "0" + c;
        return c;
      };
      var Sh = function (a, b, c, d) {
        this.texture = null;
        this.sustainReduce = !0;
        this.downScroll = !1;
        this.direction = 90;
        this.resetAnim = this.noteData = 0;
        this.colorSwap = new Kg();
        this.shader = this.colorSwap.shader;
        this.player = d;
        this.noteData = c;
        F.call(this, a, b);
        a = "NOTE_assets";
        null != C.SONG.arrowSkin &&
          1 < C.SONG.arrowSkin.length &&
          (a = C.SONG.arrowSkin);
        this.set_texture(a);
        a = this.scrollFactor;
        a.set_x(0);
        a.set_y(0);
      };
      h.StrumNote = Sh;
      Sh.__name__ = "StrumNote";
      Sh.__super__ = F;
      Sh.prototype = q(F.prototype, {
        set_texture: function (a) {
          this.texture != a && ((this.texture = a), this.reloadNote());
          return a;
        },
        reloadNote: function () {
          var a = null;
          null != this.animation._curAnim && (a = this.animation._curAnim.name);
          if (C.isPixelStage) {
            var b = G.returnGraphic("pixelUI/" + this.texture, null);
            this.loadGraphic(b);
            this.set_width(this.get_width() / 4);
            this.set_height(this.get_height() / 5);
            b = G.returnGraphic("pixelUI/" + this.texture, null);
            this.loadGraphic(
              b,
              !0,
              Math.floor(this.get_width()),
              Math.floor(this.get_height())
            );
            this.set_antialiasing(!1);
            this.setGraphicSize((this.get_width() * C.daPixelZoom) | 0);
            this.animation.add("green", [6]);
            this.animation.add("red", [7]);
            this.animation.add("blue", [5]);
            this.animation.add("purple", [4]);
            switch (Math.abs(this.noteData) % 4) {
              case 0:
                this.animation.add("static", [0]);
                this.animation.add("pressed", [4, 8], 12, !1);
                this.animation.add("confirm", [12, 16], 24, !1);
                break;
              case 1:
                this.animation.add("static", [1]);
                this.animation.add("pressed", [5, 9], 12, !1);
                this.animation.add("confirm", [13, 17], 24, !1);
                break;
              case 2:
                this.animation.add("static", [2]);
                this.animation.add("pressed", [6, 10], 12, !1);
                this.animation.add("confirm", [14, 18], 12, !1);
                break;
              case 3:
                this.animation.add("static", [3]),
                  this.animation.add("pressed", [7, 11], 12, !1),
                  this.animation.add("confirm", [15, 19], 24, !1);
            }
          } else {
            var c = this.texture;
            b = G.returnGraphic(c, null);
            this.set_frames(
              jb.fromSparrow(b, G.getPath("images/" + c + ".xml", "TEXT", null))
            );
            this.animation.addByPrefix("green", "arrowUP");
            this.animation.addByPrefix("blue", "arrowDOWN");
            this.animation.addByPrefix("purple", "arrowLEFT");
            this.animation.addByPrefix("red", "arrowRIGHT");
            this.set_antialiasing(y.globalAntialiasing);
            this.setGraphicSize((0.7 * this.get_width()) | 0);
            switch (Math.abs(this.noteData) % 4) {
              case 0:
                this.animation.addByPrefix("static", "arrowLEFT");
                this.animation.addByPrefix("pressed", "left press", 24, !1);
                this.animation.addByPrefix("confirm", "left confirm", 24, !1);
                break;
              case 1:
                this.animation.addByPrefix("static", "arrowDOWN");
                this.animation.addByPrefix("pressed", "down press", 24, !1);
                this.animation.addByPrefix("confirm", "down confirm", 24, !1);
                break;
              case 2:
                this.animation.addByPrefix("static", "arrowUP");
                this.animation.addByPrefix("pressed", "up press", 24, !1);
                this.animation.addByPrefix("confirm", "up confirm", 24, !1);
                break;
              case 3:
                this.animation.addByPrefix("static", "arrowRIGHT"),
                  this.animation.addByPrefix("pressed", "right press", 24, !1),
                  this.animation.addByPrefix(
                    "confirm",
                    "right confirm",
                    24,
                    !1
                  );
            }
          }
          this.updateHitbox();
          null != a && this.playAnim(a, !0);
        },
        postAddedToGroup: function () {
          this.playAnim("static");
          this.set_x(this.x + Id.swagWidth * this.noteData);
          this.set_x(this.x + 50);
          this.set_x(this.x + (g.width / 2) * this.player);
          this.ID = this.noteData;
        },
        update: function (a) {
          0 < this.resetAnim &&
            ((this.resetAnim -= a),
            0 >= this.resetAnim &&
              (this.playAnim("static"), (this.resetAnim = 0)));
          if ("confirm" == this.animation._curAnim.name && !C.isPixelStage) {
            var b = this.origin,
              c = 0.5 * this.frameWidth,
              d = 0.5 * this.frameHeight;
            null == d && (d = 0);
            null == c && (c = 0);
            b.set_x(c);
            b.set_y(d);
          }
          F.prototype.update.call(this, a);
        },
        playAnim: function (a, b) {
          null == b && (b = !1);
          this.animation.play(a, b);
          this.centerOffsets();
          a = this.origin;
          b = 0.5 * this.frameWidth;
          var c = 0.5 * this.frameHeight;
          null == c && (c = 0);
          null == b && (b = 0);
          a.set_x(b);
          a.set_y(c);
          null == this.animation._curAnim ||
          "static" == this.animation._curAnim.name
            ? (this.colorSwap.set_hue(0),
              this.colorSwap.set_saturation(0),
              this.colorSwap.set_brightness(0))
            : (-1 < this.noteData &&
                this.noteData < y.arrowHSV.length &&
                (this.colorSwap.set_hue(y.arrowHSV[this.noteData][0] / 360),
                this.colorSwap.set_saturation(
                  y.arrowHSV[this.noteData][1] / 100
                ),
                this.colorSwap.set_brightness(
                  y.arrowHSV[this.noteData][2] / 100
                )),
              "confirm" != this.animation._curAnim.name ||
                C.isPixelStage ||
                ((a = this.origin),
                (b = 0.5 * this.frameWidth),
                (c = 0.5 * this.frameHeight),
                null == c && (c = 0),
                null == b && (b = 0),
                a.set_x(b),
                a.set_y(c)));
        },
        __class__: Sh,
        __properties__: q(F.prototype.__properties__, {
          set_texture: "set_texture",
        }),
      });
      var Mi = function (a, b, c) {
        this.tankSpeed = 0.7;
        this.strumTime = 0;
        this.goingRight = c;
        F.call(this, a, b);
        a = G.returnGraphic("tankmanKilled1", null);
        this.set_frames(
          jb.fromSparrow(
            a,
            G.getPath("images/tankmanKilled1.xml", "TEXT", null)
          )
        );
        this.animation.addByPrefix("run", "tankman running", 24, !0);
        this.animation.addByPrefix(
          "shot",
          "John Shot " + g.random.int(1, 2),
          24,
          !1
        );
        this.animation.play("run");
        this.animation._curAnim.set_curFrame(
          g.random.int(0, this.animation._curAnim.frames.length - 1)
        );
        this.set_antialiasing(y.globalAntialiasing);
        this.updateHitbox();
        this.setGraphicSize((0.8 * this.get_width()) | 0);
        this.updateHitbox();
      };
      h.TankmenBG = Mi;
      Mi.__name__ = "TankmenBG";
      Mi.__super__ = F;
      Mi.prototype = q(F.prototype, {
        update: function (a) {
          F.prototype.update.call(this, a);
          this.set_visible(this.x > -0.5 * g.width && this.x < 1.2 * g.width);
          "run" == this.animation._curAnim.name
            ? ((a = (P.songPosition - this.strumTime) * this.tankSpeed),
              this.goingRight
                ? this.set_x(0.02 * g.width - this.endingOffset + a)
                : this.set_x(0.74 * g.width + this.endingOffset - a))
            : this.animation._curAnim.finished && this.kill();
          P.songPosition > this.strumTime &&
            (this.animation.play("shot"),
            this.goingRight &&
              (this.offset.set_x(300), this.offset.set_y(200)));
        },
        __class__: Mi,
      });
      var cb = function (a, b) {
        this.skippedIntro = this.increaseVolume = !1;
        this.titleTimer = this.sickBeats = 0;
        this.transitioning = this.newTitle = !1;
        this.swagShader = null;
        this.mustUpdate = this.danceLeft = !1;
        this.curWacky = [];
        this.titleTextAlphas = [1, 0.64];
        this.titleTextColors = [-13369345, -13421620];
        I.call(this, a, b);
      };
      h.TitleState = cb;
      cb.__name__ = "TitleState";
      cb.__super__ = I;
      cb.prototype = q(I.prototype, {
        create: function () {
          var a = this;
          G.clearStoredMemory();
          G.clearUnusedMemory();
          ab.loadTheFirstEnabledMod();
          g.game.focusLostFramerate = 60;
          g.sound.muteKeys = cb.muteKeys;
          g.sound.volumeDownKeys = cb.volumeDownKeys;
          g.sound.volumeUpKeys = cb.volumeUpKeys;
          g.keys.preventDefaultKeys = [9];
          ia.init();
          this.curWacky = g.random.getObject_Array_String(
            this.getIntroTextShit()
          );
          this.swagShader = new Kg();
          I.prototype.create.call(this);
          g.save.bind("funkin", "SucksV2");
          y.loadPrefs();
          Sa.load();
          this.titleJSON = JSON.parse(
            G.getTextFromFile("images/gfDanceTitle.json")
          );
          cb.initialized ||
            (null != g.save.data &&
              g.save.data.fullscreen &&
              g.set_fullscreen(g.save.data.fullscreen),
            (this.persistentDraw = this.persistentUpdate = !0));
          null != g.save.data.weekCompleted &&
            (Ab.weekCompleted = g.save.data.weekCompleted);
          g.mouse.set_visible(!1);
          null != g.save.data.flashing || Lg.leftState
            ? cb.initialized
              ? this.startIntro()
              : new fc().start(1, function (b) {
                  a.startIntro();
                })
            : ((Z.skipNextTransIn = !0),
              (Z.skipNextTransOut = !0),
              I.switchState(new Lg()));
        },
        startIntro: function () {
          if (!cb.initialized && null == g.sound.music) {
            var a = g.sound,
              b = G.returnSound("music", "freakyMenu", null);
            a.playMusic(b, 0);
          }
          P.changeBPM(this.titleJSON.bpm);
          this.persistentUpdate = !0;
          a = new F();
          null != this.titleJSON.backgroundSprite &&
          0 < this.titleJSON.backgroundSprite.length &&
          "none" != this.titleJSON.backgroundSprite
            ? ((b = G.returnGraphic(this.titleJSON.backgroundSprite, null)),
              a.loadGraphic(b))
            : a.makeGraphic(g.width, g.height, -16777216);
          this.add(a);
          a = this.logoBl = new F(this.titleJSON.titlex, this.titleJSON.titley);
          var c = null;
          b = G.returnGraphic("logoBumpin", c);
          a.set_frames(
            jb.fromSparrow(b, G.getPath("images/logoBumpin.xml", "TEXT", c))
          );
          this.logoBl.set_antialiasing(y.globalAntialiasing);
          this.logoBl.animation.addByPrefix("bump", "logo bumpin", 24, !1);
          this.logoBl.animation.play("bump");
          this.logoBl.updateHitbox();
          this.swagShader = new Kg();
          a = this.gfDance = new F(this.titleJSON.gfx, this.titleJSON.gfy);
          c = null;
          b = G.returnGraphic("characters/marmvipsRTX", c);
          a.set_frames(
            jb.fromSparrow(
              b,
              G.getPath("images/characters/marmvipsRTX.xml", "TEXT", c)
            )
          );
          this.gfDance.animation.addByPrefix("bump", "idle", 24, !1);
          this.gfDance.set_antialiasing(y.globalAntialiasing);
          this.add(this.gfDance);
          this.gfDance.shader = this.swagShader.shader;
          this.add(this.logoBl);
          this.logoBl.shader = this.swagShader.shader;
          a = this.titleText = new F(
            this.titleJSON.startx,
            this.titleJSON.starty
          );
          c = null;
          b = G.returnGraphic("titleEnter", c);
          a.set_frames(
            jb.fromSparrow(b, G.getPath("images/titleEnter.xml", "TEXT", c))
          );
          b = [];
          this.titleText.animation.findByPrefix(b, "ENTER IDLE");
          this.titleText.animation.findByPrefix(b, "ENTER FREEZE");
          0 < b.length
            ? ((this.newTitle = !0),
              this.titleText.animation.addByPrefix("idle", "ENTER IDLE", 24),
              this.titleText.animation.addByPrefix(
                "press",
                y.flashing ? "ENTER PRESSED" : "ENTER FREEZE",
                24
              ))
            : ((this.newTitle = !1),
              this.titleText.animation.addByPrefix(
                "idle",
                "Press Enter to Begin",
                24
              ),
              this.titleText.animation.addByPrefix(
                "press",
                "ENTER PRESSED",
                24
              ));
          this.titleText.set_antialiasing(y.globalAntialiasing);
          this.titleText.animation.play("idle");
          this.titleText.updateHitbox();
          this.add(this.titleText);
          a = new F();
          b = G.returnGraphic("logo", null);
          b = a.loadGraphic(b);
          b.set_x((g.width - b.get_width()) / 2);
          b.set_y((g.height - b.get_height()) / 2);
          b.set_antialiasing(y.globalAntialiasing);
          this.credGroup = new ma();
          this.add(this.credGroup);
          this.textGroup = new ma();
          this.blackScreen = new F().makeGraphic(g.width, g.height, -16777216);
          this.credGroup.add(this.blackScreen);
          b = this.credTextShit = new ib(0, 0, "", !0);
          b.set_x((g.width - b.get_width()) / 2);
          b.set_y((g.height - b.get_height()) / 2);
          this.credTextShit.set_visible(!1);
          a = new F(0, 0.52 * g.height);
          b = G.returnGraphic("newgrounds_logo", null);
          this.ngSpr = a.loadGraphic(b);
          this.add(this.ngSpr);
          this.ngSpr.set_visible(!1);
          this.ngSpr.setGraphicSize((0.8 * this.ngSpr.get_width()) | 0);
          this.ngSpr.updateHitbox();
          b = this.ngSpr;
          a = 1;
          null == a && (a = 17);
          (1 != a && 17 != a) || b.set_x((g.width - b.get_width()) / 2);
          (16 != a && 17 != a) || b.set_y((g.height - b.get_height()) / 2);
          this.ngSpr.set_antialiasing(y.globalAntialiasing);
          la.tween(this.credTextShit, { y: this.credTextShit.y + 20 }, 2.9, {
            ease: Aa.quadInOut,
            type: 4,
          });
          cb.initialized ? this.skipIntro() : (cb.initialized = !0);
        },
        getIntroTextShit: function () {
          for (
            var a = aa
                .getText(G.getPath("data/introText.txt", "TEXT", null))
                .split("\n"),
              b = [],
              c = 0;
            c < a.length;

          ) {
            var d = a[c];
            ++c;
            b.push(d.split("--"));
          }
          return b;
        },
        update: function (a) {
          var b = this;
          null != g.sound.music && (P.songPosition = g.sound.music._time);
          var c = g.keys.justPressed,
            d =
              c.keyManager.checkStatusUnsafe(13, c.status) ||
              ia.player1.controls._accept.check(),
            e = g.gamepads.lastActive;
          if (null != e) {
            c = e.justPressed;
            e = c.gamepad;
            c = c.status;
            var f = e.mapping.getRawID(7);
            e = e.buttons[f];
            (c = null != e && e.hasState(c)) && (d = !0);
          }
          this.newTitle &&
            ((this.titleTimer += Math.max(0, Math.min(1, a))),
            2 < this.titleTimer && (this.titleTimer -= 2));
          if (cb.initialized && !this.transitioning && this.skippedIntro) {
            if (this.newTitle && !d) {
              e = this.titleTimer;
              1 <= e && (e = -e + 2);
              e = 0.5 >= e ? e * e * 2 : 1 - --e * e * 2;
              c = this.titleText;
              var k = this.titleTextColors[0],
                r = this.titleTextColors[1],
                l = e;
              null == l && (l = 0.5);
              f =
                ((((r >> 16) & 255) - ((k >> 16) & 255)) * l +
                  ((k >> 16) & 255)) |
                0;
              var J =
                  ((((r >> 8) & 255) - ((k >> 8) & 255)) * l +
                    ((k >> 8) & 255)) |
                  0,
                u = (((r & 255) - (k & 255)) * l + (k & 255)) | 0;
              r =
                ((((r >> 24) & 255) - ((k >> 24) & 255)) * l +
                  ((k >> 24) & 255)) |
                0;
              null == r && (r = 255);
              k = ob._new();
              null == r && (r = 255);
              k =
                (((k & -16711681) | ((255 < f ? 255 : 0 > f ? 0 : f) << 16)) &
                  -65281) |
                ((255 < J ? 255 : 0 > J ? 0 : J) << 8);
              k &= -256;
              k |= 255 < u ? 255 : 0 > u ? 0 : u;
              k &= 16777215;
              k |= (255 < r ? 255 : 0 > r ? 0 : r) << 24;
              c.set_color(k);
              c = this.titleTextAlphas[0];
              this.titleText.set_alpha(c + e * (this.titleTextAlphas[1] - c));
            }
            d &&
              (this.titleText.set_color(-1),
              this.titleText.set_alpha(1),
              null != this.titleText && this.titleText.animation.play("press"),
              g.camera.flash(y.flashing ? -1 : 1291845631, 1),
              g.sound.play(G.sound("confirmMenu"), 0.7),
              (this.transitioning = !0),
              new fc().start(1, function (a) {
                b.mustUpdate
                  ? I.switchState(new qg())
                  : I.switchState(new zc());
                cb.closedState = !0;
              }));
          }
          cb.initialized && d && !this.skippedIntro && this.skipIntro();
          null != this.swagShader &&
            (ia.player1.controls._ui_left.check() &&
              ((d = this.swagShader), d.set_hue(d.hue - 0.1 * a)),
            ia.player1.controls._ui_right.check() &&
              ((d = this.swagShader), d.set_hue(d.hue + 0.1 * a)));
          I.prototype.update.call(this, a);
        },
        createCoolText: function (a, b) {
          null == b && (b = 0);
          for (var c = 0, d = a.length; c < d; ) {
            var e = c++,
              f = new ib(0, 0, a[e], !0),
              k = 1;
            null == k && (k = 17);
            (1 != k && 17 != k) || f.set_x((g.width - f.get_width()) / 2);
            (16 != k && 17 != k) || f.set_y((g.height - f.get_height()) / 2);
            f.set_y(f.y + (60 * e + 200 + b));
            null != this.credGroup &&
              null != this.textGroup &&
              (this.credGroup.add(f), this.textGroup.add(f));
          }
        },
        addMoreText: function (a, b) {
          null == b && (b = 0);
          if (null != this.textGroup && null != this.credGroup) {
            a = new ib(0, 0, a, !0);
            var c = 1;
            null == c && (c = 17);
            (1 != c && 17 != c) || a.set_x((g.width - a.get_width()) / 2);
            (16 != c && 17 != c) || a.set_y((g.height - a.get_height()) / 2);
            a.set_y(a.y + (60 * this.textGroup.length + 200 + b));
            this.credGroup.add(a);
            this.textGroup.add(a);
          }
        },
        deleteCoolText: function () {
          for (; 0 < this.textGroup.members.length; )
            this.credGroup.remove(this.textGroup.members[0], !0),
              this.textGroup.remove(this.textGroup.members[0], !0);
        },
        beatHit: function () {
          I.prototype.beatHit.call(this);
          null != this.logoBl && this.logoBl.animation.play("bump", !0);
          null != this.gfDance && this.gfDance.animation.play("bump", !0);
          if (!cb.closedState)
            switch ((this.sickBeats++, this.sickBeats)) {
              case 1:
                var a = g.sound,
                  b = G.returnSound("music", "freakyMenu", null);
                a.playMusic(b, 0);
                a = g.sound.music;
                b = 4;
                var c = 0,
                  d = 0.7;
                null == d && (d = 1);
                null == c && (c = 0);
                null == b && (b = 1);
                null == a._channel && a.play();
                null != a.fadeTween && a.fadeTween.cancel();
                a.fadeTween = la.num(
                  c,
                  d,
                  b,
                  { onComplete: null },
                  n(a, a.volumeTween)
                );
                break;
              case 2:
                this.createCoolText(["Psych Engine by"], 15);
                break;
              case 4:
                this.addMoreText("Shadow Mario", 15);
                this.addMoreText("RiverOaken", 15);
                this.addMoreText("shubs", 15);
                break;
              case 5:
                this.deleteCoolText();
                break;
              case 6:
                this.createCoolText(["Not associated", "with"], -40);
                break;
              case 8:
                this.addMoreText("newgrounds", -40);
                this.ngSpr.set_visible(!0);
                break;
              case 9:
                this.deleteCoolText();
                this.ngSpr.set_visible(!1);
                break;
              case 10:
                this.createCoolText([this.curWacky[0]]);
                break;
              case 12:
                this.addMoreText(this.curWacky[1]);
                break;
              case 13:
                this.deleteCoolText();
                break;
              case 14:
                this.addMoreText("Friday");
                break;
              case 15:
                this.addMoreText("Night");
                break;
              case 16:
                this.addMoreText("Funkin");
                break;
              case 17:
                this.skipIntro();
            }
        },
        skipIntro: function () {
          var a = this;
          if (!this.skippedIntro) {
            if (cb.playJingle) {
              var b = g.save.data.psychDevsEasterEgg;
              null == b && (b = "");
              b = b.toUpperCase();
              var c = null;
              switch (b) {
                case "BBPANZU":
                  c = g.sound.play(G.sound("JingleBB"));
                  break;
                case "RIVER":
                  c = g.sound.play(G.sound("JingleRiver"));
                  break;
                case "SHADOW":
                  g.sound.play(G.sound("JingleShadow"));
                  break;
                case "SHUBS":
                  c = g.sound.play(G.sound("JingleShubs"));
                  break;
                default:
                  this.remove(this.ngSpr);
                  this.remove(this.credGroup);
                  g.camera.flash(-1, 2);
                  this.skippedIntro = !0;
                  cb.playJingle = !1;
                  b = g.sound;
                  c = G.returnSound("music", "freakyMenu", null);
                  b.playMusic(c, 0);
                  b = g.sound.music;
                  c = 4;
                  var d = 0,
                    e = 0.7;
                  null == e && (e = 1);
                  null == d && (d = 0);
                  null == c && (c = 1);
                  null == b._channel && b.play();
                  null != b.fadeTween && b.fadeTween.cancel();
                  b.fadeTween = la.num(
                    d,
                    e,
                    c,
                    { onComplete: null },
                    n(b, b.volumeTween)
                  );
                  return;
              }
              this.transitioning = !0;
              "SHADOW" == b
                ? new fc().start(3.2, function (b) {
                    a.remove(a.ngSpr);
                    a.remove(a.credGroup);
                    g.camera.flash(-1, 0.6);
                    a.transitioning = !1;
                  })
                : (this.remove(this.ngSpr),
                  this.remove(this.credGroup),
                  g.camera.flash(-1, 3),
                  (c.onComplete = function () {
                    var b = g.sound,
                      c = G.returnSound("music", "freakyMenu", null);
                    b.playMusic(c, 0);
                    b = g.sound.music;
                    c = 4;
                    var d = 0,
                      e = 0.7;
                    null == e && (e = 1);
                    null == d && (d = 0);
                    null == c && (c = 1);
                    null == b._channel && b.play();
                    null != b.fadeTween && b.fadeTween.cancel();
                    b.fadeTween = la.num(
                      d,
                      e,
                      c,
                      { onComplete: null },
                      n(b, b.volumeTween)
                    );
                    a.transitioning = !1;
                  }));
              cb.playJingle = !1;
            } else
              this.remove(this.ngSpr),
                this.remove(this.credGroup),
                g.camera.flash(-1, 4);
            this.skippedIntro = !0;
          }
        },
        __class__: cb,
      });
      var Lc = (w.ValueType = {
        __ename__: "ValueType",
        __constructs__: null,
        TNull: {
          _hx_name: "TNull",
          _hx_index: 0,
          __enum__: "ValueType",
          toString: p,
        },
        TInt: {
          _hx_name: "TInt",
          _hx_index: 1,
          __enum__: "ValueType",
          toString: p,
        },
        TFloat: {
          _hx_name: "TFloat",
          _hx_index: 2,
          __enum__: "ValueType",
          toString: p,
        },
        TBool: {
          _hx_name: "TBool",
          _hx_index: 3,
          __enum__: "ValueType",
          toString: p,
        },
        TObject: {
          _hx_name: "TObject",
          _hx_index: 4,
          __enum__: "ValueType",
          toString: p,
        },
        TFunction: {
          _hx_name: "TFunction",
          _hx_index: 5,
          __enum__: "ValueType",
          toString: p,
        },
        TClass:
          ((x = function (a) {
            return { _hx_index: 6, c: a, __enum__: "ValueType", toString: p };
          }),
          (x._hx_name = "TClass"),
          (x.__params__ = ["c"]),
          x),
        TEnum:
          ((x = function (a) {
            return { _hx_index: 7, e: a, __enum__: "ValueType", toString: p };
          }),
          (x._hx_name = "TEnum"),
          (x.__params__ = ["e"]),
          x),
        TUnknown: {
          _hx_name: "TUnknown",
          _hx_index: 8,
          __enum__: "ValueType",
          toString: p,
        },
      });
      Lc.__constructs__ = [
        Lc.TNull,
        Lc.TInt,
        Lc.TFloat,
        Lc.TBool,
        Lc.TObject,
        Lc.TFunction,
        Lc.TClass,
        Lc.TEnum,
        Lc.TUnknown,
      ];
      var zb = function () {};
      h.Type = zb;
      zb.__name__ = "Type";
      zb.resolveEnum = function (a) {
        return w[a];
      };
      zb.createInstance = function (a, b) {
        return new (Function.prototype.bind.apply(a, [null].concat(b)))();
      };
      zb.createEnum = function (a, b, c) {
        var d = qa.field(a, b);
        if (null == d) throw N.thrown("No such constructor " + b);
        if (qa.isFunction(d)) {
          if (null == c)
            throw N.thrown("Constructor " + b + " need parameters");
          return d.apply(a, c);
        }
        if (null != c && 0 != c.length)
          throw N.thrown("Constructor " + b + " does not need parameters");
        return d;
      };
      zb.typeof = function (a) {
        switch (typeof a) {
          case "boolean":
            return Lc.TBool;
          case "function":
            return a.__name__ || a.__ename__ ? Lc.TObject : Lc.TFunction;
          case "number":
            return Math.ceil(a) == a % 2147483648 ? Lc.TInt : Lc.TFloat;
          case "object":
            if (null == a) return Lc.TNull;
            var b = a.__enum__;
            if (null != b) return Lc.TEnum(w[b]);
            a = za.getClass(a);
            return null != a ? Lc.TClass(a) : Lc.TObject;
          case "string":
            return Lc.TClass(String);
          case "undefined":
            return Lc.TNull;
          default:
            return Lc.TUnknown;
        }
      };
      zb.enumParameters = function (a) {
        var b = w[a.__enum__].__constructs__[a._hx_index].__params__;
        if (null != b) {
          for (var c = [], d = 0; d < b.length; ) {
            var e = b[d];
            ++d;
            c.push(a[e]);
          }
          return c;
        }
        return [];
      };
      var Ph = function (a, b, c, d, e) {
        null == e && (e = !1);
        null == d && (d = 0.05);
        null == c && (c = "");
        this._timeToUpdate = 0;
        this._curLetter = -1;
        this.volume = 1;
        this.sound = "dialogue";
        this.delay = 0.05;
        this.finishedText = !1;
        this.onFinish = null;
        ib.call(this, a, b, c, e);
        this.delay = d;
      };
      h.TypedAlphabet = Ph;
      Ph.__name__ = "TypedAlphabet";
      Ph.__super__ = ib;
      Ph.prototype = q(ib.prototype, {
        set_text: function (a) {
          ib.prototype.set_text.call(this, a);
          this.resetDialogue();
          return a;
        },
        update: function (a) {
          if (!this.finishedText) {
            var b = !1;
            for (this._timeToUpdate += a; this._timeToUpdate >= this.delay; ) {
              this.showCharacterUpTo(this._curLetter + 1);
              !b &&
                "" != this.sound &&
                (0.025 < this.delay || 0 == this._curLetter % 2) &&
                g.sound.play(G.sound(this.sound), this.volume);
              b = !0;
              this._curLetter++;
              if (this._curLetter >= this.letters.length - 1) {
                this.finishedText = !0;
                if (null != this.onFinish) this.onFinish();
                this._timeToUpdate = 0;
                break;
              }
              this._timeToUpdate = 0;
            }
          }
          ib.prototype.update.call(this, a);
        },
        showCharacterUpTo: function (a) {
          var b = this._curLetter;
          0 > b && (b = 0);
          for (a += 1; b < a; ) {
            var c = b++;
            null != this.letters[c] && this.letters[c].set_visible(!0);
          }
        },
        resetDialogue: function () {
          this._curLetter = -1;
          this.finishedText = !1;
          for (
            var a = (this._timeToUpdate = 0), b = this.letters;
            a < b.length;

          ) {
            var c = b[a];
            ++a;
            c.set_visible(!1);
          }
        },
        finishText: function () {
          if (!this.finishedText) {
            this.showCharacterUpTo(this.letters.length - 1);
            "" != this.sound && g.sound.play(G.sound(this.sound), this.volume);
            this.finishedText = !0;
            if (null != this.onFinish) this.onFinish();
            this._timeToUpdate = 0;
          }
        },
        __class__: Ph,
      });
      var rc = {
          gt: function (a, b) {
            var c = 0 > a;
            return c != 0 > b ? c : a > b;
          },
          toFloat: function (a) {
            return 0 > a ? 4294967296 + a : a + 0;
          },
        },
        ab = function (a, b) {
          this.folder = "";
          this.songs = a.songs;
          this.weekCharacters = a.weekCharacters;
          this.weekBackground = a.weekBackground;
          this.weekBefore = a.weekBefore;
          this.storyName = a.storyName;
          this.weekName = a.weekName;
          this.freeplayColor = a.freeplayColor;
          this.startUnlocked = a.startUnlocked;
          this.hiddenUntilUnlocked = a.hiddenUntilUnlocked;
          this.hideStoryMode = a.hideStoryMode;
          this.hideFreeplay = a.hideFreeplay;
          this.difficulties = a.difficulties;
          this.fileName = b;
        };
      h.WeekData = ab;
      ab.__name__ = "WeekData";
      ab.createWeekFile = function () {
        return {
          songs: [
            ["Bopeebo", "dad", [146, 113, 253]],
            ["Fresh", "dad", [146, 113, 253]],
            ["Dad Battle", "dad", [146, 113, 253]],
          ],
          weekCharacters: ["dad", "bf", "gf"],
          weekBackground: "stage",
          weekBefore: "tutorial",
          storyName: "Your New Week",
          weekName: "Custom Week",
          freeplayColor: [146, 113, 253],
          startUnlocked: !0,
          hiddenUntilUnlocked: !1,
          hideStoryMode: !1,
          hideFreeplay: !1,
          difficulties: "",
        };
      };
      ab.reloadWeekFiles = function (a) {
        null == a && (a = !1);
        ab.weeksList = [];
        ab.weeksLoaded.h = Object.create(null);
        var b = ["assets/"],
          c = "weeks/weekList.txt";
        null == c && (c = "");
        c = Ta.coolTextFile("assets/" + c);
        for (var d = 0, e = c.length; d < e; )
          for (var f = d++, k = 0, r = b.length; k < r; ) {
            var l = k++;
            l = b[l] + "weeks/" + c[f] + ".json";
            Object.prototype.hasOwnProperty.call(ab.weeksLoaded.h, c[f]) ||
              ((l = ab.getWeekFile(l)),
              null != l &&
                ((l = new ab(l, c[f])),
                null != l &&
                  (null == a ||
                    (a && !l.hideStoryMode) ||
                    (!a && !l.hideFreeplay)) &&
                  ((ab.weeksLoaded.h[c[f]] = l), ab.weeksList.push(c[f]))));
          }
      };
      ab.getWeekFile = function (a) {
        var b = null;
        aa.exists(a) && (b = ra.getText(a));
        return null != b && 0 < b.length ? JSON.parse(b) : null;
      };
      ab.getWeekFileName = function () {
        return ab.weeksList[C.storyWeek];
      };
      ab.getCurrentWeek = function () {
        return ab.weeksLoaded.h[ab.weeksList[C.storyWeek]];
      };
      ab.setDirectoryFromWeek = function (a) {
        G.currentModDirectory = "";
        null != a &&
          null != a.folder &&
          0 < a.folder.length &&
          (G.currentModDirectory = a.folder);
      };
      ab.loadTheFirstEnabledMod = function () {
        G.currentModDirectory = "";
      };
      ab.prototype = { __class__: ab };
      var Tm = function () {
        this.shader = new wk();
        this.shader.uTime.value = [0];
      };
      h.WiggleEffect = Tm;
      Tm.__name__ = "WiggleEffect";
      Tm.prototype = { __class__: Tm };
      var wk = function () {
        null == this.__glFragmentSource &&
          (this.__glFragmentSource =
            "\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tuniform bool hasTransform;\n\t\tuniform bool hasColorTransform;\n\n\t\tvec4 flixel_texture2D(sampler2D bitmap, vec2 coord)\n\t\t{\n\t\t\tvec4 color = texture2D(bitmap, coord);\n\t\t\tif (!hasTransform)\n\t\t\t{\n\t\t\t\treturn color;\n\t\t\t}\n\n\t\t\tif (color.a == 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t}\n\n\t\t\tif (!hasColorTransform)\n\t\t\t{\n\t\t\t\treturn color * openfl_Alphav;\n\t\t\t}\n\n\t\t\tcolor = vec4(color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4(0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp(openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t}\n\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t}\n\t\n\n\t\t//uniform float tx, ty; // x,y waves phase\n\t\tuniform float uTime;\n\t\t\n\t\tconst int EFFECT_TYPE_DREAMY = 0;\n\t\tconst int EFFECT_TYPE_WAVY = 1;\n\t\tconst int EFFECT_TYPE_HEAT_WAVE_HORIZONTAL = 2;\n\t\tconst int EFFECT_TYPE_HEAT_WAVE_VERTICAL = 3;\n\t\tconst int EFFECT_TYPE_FLAG = 4;\n\t\t\n\t\tuniform int effectType;\n\t\t\n\t\t/**\n\t\t * How fast the waves move over time\n\t\t */\n\t\tuniform float uSpeed;\n\t\t\n\t\t/**\n\t\t * Number of waves over time\n\t\t */\n\t\tuniform float uFrequency;\n\t\t\n\t\t/**\n\t\t * How much the pixels are going to stretch over the waves\n\t\t */\n\t\tuniform float uWaveAmplitude;\n\n\t\tvec2 sineWave(vec2 pt)\n\t\t{\n\t\t\tfloat x = 0.0;\n\t\t\tfloat y = 0.0;\n\t\t\t\n\t\t\tif (effectType == EFFECT_TYPE_DREAMY) \n\t\t\t{\n\t\t\t\tfloat offsetX = sin(pt.y * uFrequency + uTime * uSpeed) * uWaveAmplitude;\n                pt.x += offsetX; // * (pt.y - 1.0); // <- Uncomment to stop bottom part of the screen from moving\n\t\t\t}\n\t\t\telse if (effectType == EFFECT_TYPE_WAVY) \n\t\t\t{\n\t\t\t\tfloat offsetY = sin(pt.x * uFrequency + uTime * uSpeed) * uWaveAmplitude;\n\t\t\t\tpt.y += offsetY; // * (pt.y - 1.0); // <- Uncomment to stop bottom part of the screen from moving\n\t\t\t}\n\t\t\telse if (effectType == EFFECT_TYPE_HEAT_WAVE_HORIZONTAL)\n\t\t\t{\n\t\t\t\tx = sin(pt.x * uFrequency + uTime * uSpeed) * uWaveAmplitude;\n\t\t\t}\n\t\t\telse if (effectType == EFFECT_TYPE_HEAT_WAVE_VERTICAL)\n\t\t\t{\n\t\t\t\ty = sin(pt.y * uFrequency + uTime * uSpeed) * uWaveAmplitude;\n\t\t\t}\n\t\t\telse if (effectType == EFFECT_TYPE_FLAG)\n\t\t\t{\n\t\t\t\ty = sin(pt.y * uFrequency + 10.0 * pt.x + uTime * uSpeed) * uWaveAmplitude;\n\t\t\t\tx = sin(pt.x * uFrequency + 5.0 * pt.y + uTime * uSpeed) * uWaveAmplitude;\n\t\t\t}\n\t\t\t\n\t\t\treturn vec2(pt.x + x, pt.y + y);\n\t\t}\n\n\t\tvoid main()\n\t\t{\n\t\t\tvec2 uv = sineWave(openfl_TextureCoordv);\n\t\t\tgl_FragColor = texture2D(bitmap, uv);\n\t\t}");
        null == this.__glVertexSource &&
          (this.__glVertexSource =
            "\n\t\tattribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\t\n\t\tattribute float alpha;\n\t\tattribute vec4 colorMultiplier;\n\t\tattribute vec4 colorOffset;\n\t\tuniform bool hasColorTransform;\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t\t\n\t\t\topenfl_Alphav = openfl_Alpha * alpha;\n\t\t\t\n\t\t\tif (hasColorTransform)\n\t\t\t{\n\t\t\t\topenfl_ColorOffsetv = colorOffset / 255.0;\n\t\t\t\topenfl_ColorMultiplierv = colorMultiplier;\n\t\t\t}\n\t\t}");
        ze.call(this);
        this.__isGenerated = !0;
        this.__initGL();
      };
      h.WiggleShader = wk;
      wk.__name__ = "WiggleShader";
      wk.__super__ = ze;
      wk.prototype = q(ze.prototype, { __class__: wk });
      var bb = {
          toString: function (a) {
            switch (a) {
              case 0:
                return "Element";
              case 1:
                return "PCData";
              case 2:
                return "CData";
              case 3:
                return "Comment";
              case 4:
                return "DocType";
              case 5:
                return "ProcessingInstruction";
              case 6:
                return "Document";
            }
          },
        },
        oa = function (a) {
          this.nodeType = a;
          this.children = [];
          this.attributeMap = new Q();
        };
      h.Xml = oa;
      oa.__name__ = "Xml";
      oa.parse = function (a) {
        return Og.parse(a);
      };
      oa.createElement = function (a) {
        var b = new oa(oa.Element);
        if (b.nodeType != oa.Element)
          throw N.thrown(
            "Bad node type, expected Element but found " +
              (null == b.nodeType ? "null" : bb.toString(b.nodeType))
          );
        b.nodeName = a;
        return b;
      };
      oa.createPCData = function (a) {
        var b = new oa(oa.PCData);
        if (b.nodeType == oa.Document || b.nodeType == oa.Element)
          throw N.thrown(
            "Bad node type, unexpected " +
              (null == b.nodeType ? "null" : bb.toString(b.nodeType))
          );
        b.nodeValue = a;
        return b;
      };
      oa.createCData = function (a) {
        var b = new oa(oa.CData);
        if (b.nodeType == oa.Document || b.nodeType == oa.Element)
          throw N.thrown(
            "Bad node type, unexpected " +
              (null == b.nodeType ? "null" : bb.toString(b.nodeType))
          );
        b.nodeValue = a;
        return b;
      };
      oa.createComment = function (a) {
        var b = new oa(oa.Comment);
        if (b.nodeType == oa.Document || b.nodeType == oa.Element)
          throw N.thrown(
            "Bad node type, unexpected " +
              (null == b.nodeType ? "null" : bb.toString(b.nodeType))
          );
        b.nodeValue = a;
        return b;
      };
      oa.createDocType = function (a) {
        var b = new oa(oa.DocType);
        if (b.nodeType == oa.Document || b.nodeType == oa.Element)
          throw N.thrown(
            "Bad node type, unexpected " +
              (null == b.nodeType ? "null" : bb.toString(b.nodeType))
          );
        b.nodeValue = a;
        return b;
      };
      oa.createProcessingInstruction = function (a) {
        var b = new oa(oa.ProcessingInstruction);
        if (b.nodeType == oa.Document || b.nodeType == oa.Element)
          throw N.thrown(
            "Bad node type, unexpected " +
              (null == b.nodeType ? "null" : bb.toString(b.nodeType))
          );
        b.nodeValue = a;
        return b;
      };
      oa.createDocument = function () {
        return new oa(oa.Document);
      };
      oa.prototype = {
        get: function (a) {
          if (this.nodeType != oa.Element)
            throw N.thrown(
              "Bad node type, expected Element but found " +
                (null == this.nodeType ? "null" : bb.toString(this.nodeType))
            );
          return this.attributeMap.h[a];
        },
        set: function (a, b) {
          if (this.nodeType != oa.Element)
            throw N.thrown(
              "Bad node type, expected Element but found " +
                (null == this.nodeType ? "null" : bb.toString(this.nodeType))
            );
          this.attributeMap.h[a] = b;
        },
        exists: function (a) {
          if (this.nodeType != oa.Element)
            throw N.thrown(
              "Bad node type, expected Element but found " +
                (null == this.nodeType ? "null" : bb.toString(this.nodeType))
            );
          return Object.prototype.hasOwnProperty.call(this.attributeMap.h, a);
        },
        attributes: function () {
          if (this.nodeType != oa.Element)
            throw N.thrown(
              "Bad node type, expected Element but found " +
                (null == this.nodeType ? "null" : bb.toString(this.nodeType))
            );
          return new Vj(this.attributeMap.h);
        },
        elements: function () {
          if (this.nodeType != oa.Document && this.nodeType != oa.Element)
            throw N.thrown(
              "Bad node type, expected Element or Document but found " +
                (null == this.nodeType ? "null" : bb.toString(this.nodeType))
            );
          for (var a = [], b = 0, c = this.children; b < c.length; ) {
            var d = c[b];
            ++b;
            d.nodeType == oa.Element && a.push(d);
          }
          return new Vf(a);
        },
        elementsNamed: function (a) {
          if (this.nodeType != oa.Document && this.nodeType != oa.Element)
            throw N.thrown(
              "Bad node type, expected Element or Document but found " +
                (null == this.nodeType ? "null" : bb.toString(this.nodeType))
            );
          for (var b = [], c = 0, d = this.children; c < d.length; ) {
            var e = d[c];
            ++c;
            if (e.nodeType == oa.Element) {
              if (e.nodeType != oa.Element)
                throw N.thrown(
                  "Bad node type, expected Element but found " +
                    (null == e.nodeType ? "null" : bb.toString(e.nodeType))
                );
              var f = e.nodeName == a;
            } else f = !1;
            f && b.push(e);
          }
          return new Vf(b);
        },
        firstElement: function () {
          if (this.nodeType != oa.Document && this.nodeType != oa.Element)
            throw N.thrown(
              "Bad node type, expected Element or Document but found " +
                (null == this.nodeType ? "null" : bb.toString(this.nodeType))
            );
          for (var a = 0, b = this.children; a < b.length; ) {
            var c = b[a];
            ++a;
            if (c.nodeType == oa.Element) return c;
          }
          return null;
        },
        addChild: function (a) {
          if (this.nodeType != oa.Document && this.nodeType != oa.Element)
            throw N.thrown(
              "Bad node type, expected Element or Document but found " +
                (null == this.nodeType ? "null" : bb.toString(this.nodeType))
            );
          null != a.parent && a.parent.removeChild(a);
          this.children.push(a);
          a.parent = this;
        },
        removeChild: function (a) {
          if (this.nodeType != oa.Document && this.nodeType != oa.Element)
            throw N.thrown(
              "Bad node type, expected Element or Document but found " +
                (null == this.nodeType ? "null" : bb.toString(this.nodeType))
            );
          return X.remove(this.children, a) ? ((a.parent = null), !0) : !1;
        },
        insertChild: function (a, b) {
          if (this.nodeType != oa.Document && this.nodeType != oa.Element)
            throw N.thrown(
              "Bad node type, expected Element or Document but found " +
                (null == this.nodeType ? "null" : bb.toString(this.nodeType))
            );
          null != a.parent && X.remove(a.parent.children, a);
          this.children.splice(b, 0, a);
          a.parent = this;
        },
        toString: function () {
          return Pg.print(this);
        },
        __class__: oa,
      };
      var qd = function (a, b, c) {
        this.parent = a;
        this.type = b;
        null == c
          ? ((c = b = 0),
            null == c && (c = 0),
            null == b && (b = 0),
            (b = ba.pool.get().set(b, c)),
            (b._inPool = !1))
          : (b = c);
        this.border = b;
        this.frames = [];
        this.framesByName = new Q();
        null != a && a.addFrameCollection(this);
      };
      h["flixel.graphics.frames.FlxFramesCollection"] = qd;
      qd.__name__ = "flixel.graphics.frames.FlxFramesCollection";
      qd.__interfaces__ = [U];
      qd.prototype = {
        destroy: function () {
          this.frames = V.destroyArray(this.frames);
          this.border = V.put(this.border);
          this.type = this.parent = this.framesByName = null;
        },
        addSpriteSheetFrame: function (a) {
          var b = new Za(this.parent);
          b.set_frame(this.checkFrame(a));
          var c = b.sourceSize,
            d = a.width;
          a = a.height;
          null == a && (a = 0);
          null == d && (d = 0);
          c.set_x(d);
          c.set_y(a);
          c = b.offset;
          a = d = 0;
          null == a && (a = 0);
          null == d && (d = 0);
          c.set_x(d);
          c.set_y(a);
          return this.pushFrame(b);
        },
        addAtlasFrame: function (a, b, c, d, e, f, k, r) {
          null == r && (r = 0);
          null == k && (k = !1);
          null == f && (f = !1);
          null == e && (e = 0);
          if (
            null != d &&
            Object.prototype.hasOwnProperty.call(this.framesByName.h, d)
          )
            return this.framesByName.h[d];
          e = new Za(this.parent, e, f, k, r);
          e.name = d;
          f = e.sourceSize;
          k = b.x;
          r = b.y;
          null == r && (r = 0);
          null == k && (k = 0);
          f.set_x(k);
          f.set_y(r);
          f = e.offset;
          k = c.x;
          r = c.y;
          null == r && (r = 0);
          null == k && (k = 0);
          f.set_x(k);
          f.set_y(r);
          e.set_frame(this.checkFrame(a, d));
          V.put(b);
          V.put(c);
          return this.pushFrame(e);
        },
        checkFrame: function (a, b) {
          var c = a.x,
            d = this.parent.width,
            e = 0 > c ? 0 : c,
            f = null != d && e > d ? d : e;
          c = a.y;
          d = this.parent.height;
          e = 0 > c ? 0 : c;
          var k = null != d && e > d ? d : e;
          c = a.x + a.width;
          d = this.parent.width;
          e = 0 > c ? 0 : c;
          var r = null != d && e > d ? d : e;
          c = a.y + a.height;
          d = this.parent.height;
          e = 0 > c ? 0 : c;
          c = f;
          var l = k;
          f = r - f;
          d = (null != d && e > d ? d : e) - k;
          null == d && (d = 0);
          null == f && (f = 0);
          null == l && (l = 0);
          null == c && (c = 0);
          a.x = c;
          a.y = l;
          a.width = f;
          a.height = d;
          (0 >= a.width || 0 >= a.height) &&
            g.log.advanced(
              "The frame " +
                b +
                " has incorrect data and results in an image with the size of (0, 0)",
              Ja.WARNING,
              !0
            );
          return a;
        },
        pushFrame: function (a, b) {
          null == b && (b = !1);
          var c = a.name;
          if (
            null != c &&
            Object.prototype.hasOwnProperty.call(this.framesByName.h, c) &&
            !b
          )
            return this.framesByName.h[c];
          this.frames.push(a);
          a.cacheFrameMatrix();
          null != c && (this.framesByName.h[c] = a);
          return a;
        },
        __class__: qd,
      };
      var Ig = function (a, b, c) {
        qd.call(this, a, b, c);
      };
      h["animateatlas.AtlasFrameMaker"] = Ig;
      Ig.__name__ = "animateatlas.AtlasFrameMaker";
      Ig.construct = function (a, b, c) {
        null == c && (c = !1);
        var d = [];
        if (aa.exists(G.getPath("images/" + a + "/spritemap1.json", "TEXT")))
          return (
            wb.trace(
              "Only Spritemaps made with Adobe Animate 2018 are supported",
              {
                fileName: "source/animateatlas/AtlasFrameMaker.hx",
                lineNumber: 53,
                className: "animateatlas.AtlasFrameMaker",
                methodName: "construct",
              }
            ),
            null
          );
        var e = JSON.parse(
            G.getTextFromFile("images/" + a + "/Animation.json")
          ),
          f = JSON.parse(
            K.replace(
              G.getTextFromFile("images/" + a + "/spritemap.json"),
              "\ufeff",
              ""
            )
          );
        a = G.returnGraphic("" + a + "/spritemap", null);
        var k = new Ti(e, f, a.bitmap).createAnimation(c);
        null == b && (b = k.getFrameLabels());
        wb.trace("Creating: " + M.string(b), {
          fileName: "source/animateatlas/AtlasFrameMaker.hx",
          lineNumber: 68,
          className: "animateatlas.AtlasFrameMaker",
          methodName: "construct",
        });
        c = new qd(a, Se.IMAGE);
        for (e = 0; e < b.length; )
          (f = b[e]), ++e, d.push(Ig.getFramesArray(k, f));
        for (e = 0; e < d.length; )
          for (f = d[e], ++e, b = 0; b < f.length; )
            (a = f[b]), ++b, c.pushFrame(a);
        return c;
      };
      Ig.getFramesArray = function (a, b) {
        var c;
        new ha(0, 0);
        a.set_currentLabel(b);
        var d = [],
          e = [],
          f = !0,
          k = (c = 0);
        null == k && (k = 0);
        null == c && (c = 0);
        for (
          var r = new ba(c, k), l = r, g = a.getFrame(b), u = a.get_numFrames();
          g < u;

        ) {
          var m = g++;
          a.set_currentFrame(m);
          if (a.get_currentLabel() == b)
            (c = a.getBounds(a)),
              (m = new S((c.width + c.x) | 0, (c.height + c.y) | 0, !0, 0)),
              m.draw(a, null, null, null, null, !0),
              d.push(m),
              f &&
                ((c = m.width),
                (k = m.height),
                null == k && (k = 0),
                null == c && (c = 0),
                l.set_x(c),
                l.set_y(k),
                (f = !1));
          else break;
        }
        g = 0;
        for (u = d.length; g < u; )
          (m = g++),
            (f = Xb.fromBitmapData(d[m])),
            (a = new Za(f)),
            (a.parent = f),
            (a.name = b + m),
            (r = a.sourceSize),
            (c = l.x),
            (k = l.y),
            null == k && (k = 0),
            null == c && (c = 0),
            r.set_x(c),
            r.set_y(k),
            a.set_frame(new Ga(0, 0, d[m].width, d[m].height)),
            e.push(a);
        return e;
      };
      Ig.__super__ = qd;
      Ig.prototype = q(qd.prototype, { __class__: Ig });
      var Ti = function (a, b, c) {
        this.smoothing = !0;
        this.parseAnimationData(a);
        this.parseAtlasData(b);
        this._texture = c;
        this._symbolPool = new Q();
      };
      h["animateatlas.displayobject.SpriteAnimationLibrary"] = Ti;
      Ti.__name__ = "animateatlas.displayobject.SpriteAnimationLibrary";
      Ti.prototype = {
        createAnimation: function (a, b) {
          this.smoothing = !a;
          null == b && (b = this._defaultSymbolName);
          if (!this.hasSymbol(b)) throw new oh("Symbol not found: " + b);
          return new xk(this.getSymbol(b));
        },
        getSpriteData: function (a) {
          return this._atlas.h[a];
        },
        hasSymbol: function (a) {
          return Object.prototype.hasOwnProperty.call(this._symbolData.h, a);
        },
        getSymbol: function (a) {
          var b = this.getSymbolPool(a);
          return 0 == b.length
            ? ((a = new Jd(this.getSymbolData(a), this, this._texture)),
              (a.smoothing = this.smoothing),
              a)
            : b.pop();
        },
        putSymbol: function (a) {
          a.reset();
          this.getSymbolPool(a.get_symbolName()).push(a);
          a.set_currentFrame(0);
        },
        getSymbolPool: function (a) {
          var b = this._symbolPool.h[a];
          null == b && ((b = []), (this._symbolPool.h[a] = b));
          return b;
        },
        parseAnimationData: function (a) {
          var b = a.metadata;
          this.frameRate =
            null != b && null != b.framerate && 0 < b.framerate
              ? b.framerate
              : 24;
          this._symbolData = new Q();
          b = a.SYMBOL_DICTIONARY.Symbols;
          for (var c = 0; c < b.length; ) {
            var d = b[c];
            ++c;
            var e = this._symbolData,
              f = d.SYMBOL_name;
            d = this.preprocessSymbolData(d);
            e.h[f] = d;
          }
          a = this.preprocessSymbolData(a.ANIMATION);
          this._defaultSymbolName = a.SYMBOL_name;
          this._symbolData.h[this._defaultSymbolName] = a;
          this._symbolData.h.___atlas_sprite___ = {
            SYMBOL_name: "___atlas_sprite___",
            TIMELINE: { LAYERS: [] },
          };
        },
        preprocessSymbolData: function (a) {
          var b = a.TIMELINE,
            c = b.LAYERS;
          b.sortedForRender || ((b.sortedForRender = !0), c.reverse());
          for (b = 0; b < c.length; ) {
            var d = c[b];
            ++b;
            d = d.Frames;
            for (var e = 0; e < d.length; ) {
              var f = d[e];
              ++e;
              f = f.elements;
              for (var k = 0, r = f.length; k < r; ) {
                var l = k++,
                  g = f[l];
                null != g.ATLAS_SPRITE_instance &&
                  (f[l] = {
                    SYMBOL_Instance: {
                      SYMBOL_name: "___atlas_sprite___",
                      Instance_Name: "InstName",
                      bitmap: g.ATLAS_SPRITE_instance,
                      symbolType: "graphic",
                      firstFrame: 0,
                      loop: "loop",
                      transformationPoint: { x: 0, y: 0 },
                      Matrix3D: Ti.STD_MATRIX3D_DATA,
                    },
                  });
              }
            }
          }
          return a;
        },
        parseAtlasData: function (a) {
          this._atlas = new Q();
          if (null != a.ATLAS && null != a.ATLAS.SPRITES) {
            var b = 0;
            for (a = a.ATLAS.SPRITES; b < a.length; ) {
              var c = a[b];
              ++b;
              this._atlas.h[c.SPRITE.name] = c.SPRITE;
            }
          }
        },
        getSymbolData: function (a) {
          return this._symbolData.h[a];
        },
        __class__: Ti,
      };
      var xk = function (a) {
        t.call(this);
        this.symbol = a;
        this.addChild(this.symbol);
      };
      h["animateatlas.displayobject.SpriteMovieClip"] = xk;
      xk.__name__ = "animateatlas.displayobject.SpriteMovieClip";
      xk.__super__ = t;
      xk.prototype = q(t.prototype, {
        getFrameLabels: function () {
          return this.symbol.getFrameLabels();
        },
        getFrame: function (a) {
          return this.symbol.getFrame(a);
        },
        set_currentLabel: function (a) {
          this.symbol.set_currentFrame(this.symbol.getFrame(a));
          return a;
        },
        get_currentLabel: function () {
          return this.symbol.get_currentLabel();
        },
        set_currentFrame: function (a) {
          this.symbol.set_currentFrame(a);
          return a;
        },
        get_numFrames: function () {
          return this.symbol.get_numFrames();
        },
        __class__: xk,
        __properties__: q(t.prototype.__properties__, {
          set_currentFrame: "set_currentFrame",
          get_numFrames: "get_numFrames",
          set_currentLabel: "set_currentLabel",
          get_currentLabel: "get_currentLabel",
        }),
      });
      var to = function (a, b, c, d, e, f) {
        null == f && (f = 0);
        null == e && (e = 0);
        null == d && (d = 1);
        null == c && (c = 0);
        null == b && (b = 0);
        null == a && (a = 1);
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.tx = e;
        this.ty = f;
      };
      h["lime.math.Matrix3"] = to;
      to.__name__ = "lime.math.Matrix3";
      to.prototype = { __class__: to };
      var xa = function (a, b, c, d, e, f) {
        null == f && (f = 0);
        null == e && (e = 0);
        null == d && (d = 1);
        null == c && (c = 0);
        null == b && (b = 0);
        null == a && (a = 1);
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.tx = e;
        this.ty = f;
      };
      h["openfl.geom.Matrix"] = xa;
      xa.__name__ = "openfl.geom.Matrix";
      xa.prototype = {
        clone: function () {
          return new xa(this.a, this.b, this.c, this.d, this.tx, this.ty);
        },
        concat: function (a) {
          var b = this.a * a.a + this.b * a.c;
          this.b = this.a * a.b + this.b * a.d;
          this.a = b;
          b = this.c * a.a + this.d * a.c;
          this.d = this.c * a.b + this.d * a.d;
          this.c = b;
          b = this.tx * a.a + this.ty * a.c + a.tx;
          this.ty = this.tx * a.b + this.ty * a.d + a.ty;
          this.tx = b;
        },
        copyFrom: function (a) {
          this.a = a.a;
          this.b = a.b;
          this.c = a.c;
          this.d = a.d;
          this.tx = a.tx;
          this.ty = a.ty;
        },
        createGradientBox: function (a, b, c, d, e) {
          null == e && (e = 0);
          null == d && (d = 0);
          null == c && (c = 0);
          this.a = a / 1638.4;
          this.d = b / 1638.4;
          if (0 != c) {
            var f = Math.cos(c);
            c = Math.sin(c);
            this.b = c * this.d;
            this.c = -c * this.a;
            this.a *= f;
            this.d *= f;
          } else this.c = this.b = 0;
          this.tx = d + a / 2;
          this.ty = e + b / 2;
        },
        equals: function (a) {
          return null != a &&
            this.tx == a.tx &&
            this.ty == a.ty &&
            this.a == a.a &&
            this.b == a.b &&
            this.c == a.c
            ? this.d == a.d
            : !1;
        },
        identity: function () {
          this.a = 1;
          this.c = this.b = 0;
          this.d = 1;
          this.ty = this.tx = 0;
        },
        invert: function () {
          var a = this.a * this.d - this.b * this.c;
          if (0 == a)
            (this.a = this.b = this.c = this.d = 0),
              (this.tx = -this.tx),
              (this.ty = -this.ty);
          else {
            a = 1 / a;
            var b = this.d * a;
            this.d = this.a * a;
            this.a = b;
            this.b *= -a;
            this.c *= -a;
            a = -this.a * this.tx - this.c * this.ty;
            this.ty = -this.b * this.tx - this.d * this.ty;
            this.tx = a;
          }
          return this;
        },
        rotate: function (a) {
          var b = Math.cos(a);
          a = Math.sin(a);
          var c = this.a * b - this.b * a;
          this.b = this.a * a + this.b * b;
          this.a = c;
          c = this.c * b - this.d * a;
          this.d = this.c * a + this.d * b;
          this.c = c;
          c = this.tx * b - this.ty * a;
          this.ty = this.tx * a + this.ty * b;
          this.tx = c;
        },
        scale: function (a, b) {
          this.a *= a;
          this.b *= b;
          this.c *= a;
          this.d *= b;
          this.tx *= a;
          this.ty *= b;
        },
        setTo: function (a, b, c, d, e, f) {
          this.a = a;
          this.b = b;
          this.c = c;
          this.d = d;
          this.tx = e;
          this.ty = f;
        },
        translate: function (a, b) {
          this.tx += a;
          this.ty += b;
        },
        __class__: xa,
      };
      var Jd = function (a, b, c) {
        this.smoothing = !0;
        this._zeroPoint = new gb(0, 0);
        this._tempRect = new ha();
        t.call(this);
        this._data = a;
        this._library = b;
        this._composedFrame = -1;
        this._numLayers = a.TIMELINE.LAYERS.length;
        this._numFrames = this.getNumFrames();
        this._frameLabels = this._getFrameLabels();
        this._symbolName = a.SYMBOL_name;
        this._type = "graphic";
        this._loopMode = "loop";
        this._texture = c;
        this.createLayers();
        b = 0;
        for (a = a.TIMELINE.LAYERS; b < a.length; ) {
          c = a[b];
          ++b;
          if (null != c.FrameMap) break;
          for (var d = new kc(), e = 0, f = c.Frames.length; e < f; )
            for (var k = e++, r = c.Frames[k], l = 0, g = r.duration; l < g; ) {
              var u = l++;
              d.h[k + u] = r;
            }
          c.FrameMap = d;
        }
      };
      h["animateatlas.displayobject.SpriteSymbol"] = Jd;
      Jd.__name__ = "animateatlas.displayobject.SpriteSymbol";
      Jd.__super__ = t;
      Jd.prototype = q(t.prototype, {
        reset: function () {
          Jd.sMatrix.identity();
          this.get_transform().set_matrix(Jd.sMatrix.clone());
          this.set_alpha(1);
          this._currentFrame = 0;
          this._composedFrame = -1;
        },
        update: function () {
          for (var a = 0, b = this._numLayers; a < b; ) {
            var c = a++;
            this.updateLayer(c);
          }
          this._composedFrame = this._currentFrame;
        },
        updateLayer: function (a) {
          var b = this.getLayer(a),
            c = this.getFrameData(a, this._currentFrame),
            d = null != c ? c.elements : null;
          a = null != d ? d.length : 0;
          for (var e = 0, f = a; e < f; ) {
            var k = e++,
              r = d[k].SYMBOL_Instance;
            if (null != r) {
              if (b.get_numChildren() > k)
                try {
                  var l = za.__cast(b.getChildAt(k), Jd);
                } catch (u) {
                  l = null;
                }
              else l = null;
              var g = r.SYMBOL_name;
              this._library.hasSymbol(g) || (g = "___atlas_sprite___");
              null != l && l._symbolName == g
                ? (g = l)
                : (null != l &&
                    (null != l.parent && l.removeChild(l),
                    this._library.putSymbol(l)),
                  (g = this._library.getSymbol(g)),
                  b.addChildAt(g, k));
              g.setTransformationMatrix(r.Matrix3D);
              g.setBitmap(r.bitmap);
              g.setFilterData(r.filters);
              g.setColor(r.color);
              g.setLoop(r.loop);
              g.setType(r.symbolType);
              "graphic" == g.get_type() &&
                ((k = r.firstFrame),
                (r = (this._currentFrame - c.index) | 0),
                "singleframe" == g.get_loopMode()
                  ? g.set_currentFrame(k)
                  : "loop" == g.get_loopMode()
                  ? g.set_currentFrame((k + r) % g._numFrames)
                  : g.set_currentFrame(k + r));
            }
          }
          c = b.get_numChildren() - a;
          e = 0;
          for (f = c; e < f; ) {
            e++;
            try {
              (l = za.__cast(b.removeChildAt(a), Jd)),
                null != l && this._library.putSymbol(l);
            } catch (u) {}
          }
        },
        createLayers: function () {
          if (null != this._layers)
            throw new Cb("You must not call this twice");
          this._layers = [];
          if (1 >= this._numLayers) this._layers.push(this);
          else
            for (var a = 0, b = this._numLayers; a < b; ) {
              var c = a++,
                d = new t();
              d.set_name(this.getLayerData(c).Layer_name);
              this.addChild(d);
              this._layers.push(d);
            }
        },
        setBitmap: function (a) {
          if (null != a) {
            var b = this._library.getSpriteData(a.name + "");
            null == this._bitmap &&
              ((this._bitmap = new lc(new S(1, 1), 1, this.smoothing)),
              this.addChild(this._bitmap));
            if (
              this._tempRect.x != b.x ||
              this._tempRect.y != b.y ||
              this._tempRect.width != b.w ||
              this._tempRect.height != b.h
            ) {
              var c = new S(b.w, b.h);
              this._tempRect.setTo(b.x, b.y, b.w, b.h);
              c.copyPixels(this._texture, this._tempRect, this._zeroPoint);
              this._bitmap.set_bitmapData(c);
              this._bitmap.smoothing = this.smoothing;
            }
            b.rotated
              ? (this._bitmap.set_rotation(-90),
                this._bitmap.set_x(a.Position.x),
                this._bitmap.set_y(a.Position.y + b.w))
              : (this._bitmap.set_rotation(0),
                this._bitmap.set_x(a.Position.x),
                this._bitmap.set_y(a.Position.y));
            this.addChildAt(this._bitmap, 0);
          } else
            null != this._bitmap &&
              null != this._bitmap.parent &&
              this._bitmap.parent.removeChild(this._bitmap);
        },
        setFilterData: function (a) {
          if (null != a && null != a.BlurFilter) {
            var b = new uf();
            b.set_blurX(a.BlurFilter.blurX);
            b.set_blurY(a.BlurFilter.blurY);
            b.set_quality(a.BlurFilter.quality);
          }
        },
        setTransformationMatrix: function (a) {
          Jd.sMatrix.setTo(a.m00, a.m01, a.m10, a.m11, a.m30, a.m31);
          (Jd.sMatrix.a == this.get_transform().get_matrix().a &&
            Jd.sMatrix.b == this.get_transform().get_matrix().b &&
            Jd.sMatrix.c == this.get_transform().get_matrix().c &&
            Jd.sMatrix.d == this.get_transform().get_matrix().d &&
            Jd.sMatrix.tx == this.get_transform().get_matrix().tx &&
            Jd.sMatrix.ty == this.get_transform().get_matrix().ty) ||
            this.get_transform().set_matrix(Jd.sMatrix.clone());
        },
        setColor: function (a) {
          var b = new Qb();
          null != a &&
            ((b.redOffset = null == a.redOffset ? 0 : a.redOffset),
            (b.greenOffset = null == a.greenOffset ? 0 : a.greenOffset),
            (b.blueOffset = null == a.blueOffset ? 0 : a.blueOffset),
            (b.alphaOffset = null == a.AlphaOffset ? 0 : a.AlphaOffset),
            (b.redMultiplier = null == a.RedMultiplier ? 1 : a.RedMultiplier),
            (b.greenMultiplier =
              null == a.greenMultiplier ? 1 : a.greenMultiplier),
            (b.blueMultiplier =
              null == a.blueMultiplier ? 1 : a.blueMultiplier),
            (b.alphaMultiplier =
              null == a.alphaMultiplier ? 1 : a.alphaMultiplier));
          this.get_transform().set_colorTransform(b);
        },
        setLoop: function (a) {
          this._loopMode = null != a ? a : "loop";
        },
        setType: function (a) {
          null != a && (this._type = a);
        },
        getNumFrames: function () {
          for (var a = 0, b = 0, c = this._numLayers; b < c; ) {
            var d = b++;
            d = this.getLayerData(d);
            d = null == d ? [] : d.Frames;
            for (
              var e = null != d ? d.length : 0,
                f = 0 != e ? d[0].index : 0,
                k = 0;
              k < e;

            ) {
              var r = k++;
              f += d[r].duration;
            }
            f > a && (a = f);
          }
          return 0 == a ? 1 : a;
        },
        _getFrameLabels: function () {
          for (var a = [], b = 0, c = this._numLayers; b < c; ) {
            var d = b++;
            d = this.getLayerData(d);
            d = null == d ? [] : d.Frames;
            for (var e = 0, f = null != d ? d.length : 0; e < f; ) {
              var k = e++;
              k = d[k];
              null != k.name && a.push(new yk(k.name, k.index));
            }
          }
          a.sort(n(this, this.sortLabels));
          return a;
        },
        getFrameLabels: function () {
          for (
            var a = this._frameLabels, b = Array(a.length), c = 0, d = a.length;
            c < d;

          ) {
            var e = c++;
            b[e] = a[e].name;
          }
          return b;
        },
        sortLabels: function (a, b) {
          a = a.frame;
          b = b.frame;
          return a < b ? -1 : a > b ? 1 : 0;
        },
        getLayer: function (a) {
          return this._layers[a];
        },
        get_currentLabel: function () {
          for (
            var a = this._frameLabels.length,
              b = 0 != a ? this._frameLabels[0] : null,
              c = 1;
            c < a;

          ) {
            var d = c++;
            d = this._frameLabels[d];
            if (d.frame <= this._currentFrame) b = d;
            else break;
          }
          return null != b ? b.name : null;
        },
        getFrame: function (a) {
          for (var b = 0, c = this._frameLabels.length; b < c; ) {
            var d = b++;
            d = this._frameLabels[d];
            if (d.name == a) return d.frame;
          }
          return -1;
        },
        set_currentFrame: function (a) {
          for (; 0 > a; ) a += this._numFrames;
          this._currentFrame =
            "playonce" == this._loopMode
              ? Math.min(Math.max(a, 0), this._numFrames - 1) | 0
              : Math.abs(a % this._numFrames) | 0;
          this._composedFrame != this._currentFrame && this.update();
          return a;
        },
        get_type: function () {
          return this._type;
        },
        get_loopMode: function () {
          return this._loopMode;
        },
        get_symbolName: function () {
          return this._symbolName;
        },
        get_numFrames: function () {
          return this._numFrames;
        },
        getLayerData: function (a) {
          return this._data.TIMELINE.LAYERS[a];
        },
        getFrameData: function (a, b) {
          a = this.getLayerData(a);
          return null == a ? null : a.FrameMap.h[b];
        },
        __class__: Jd,
        __properties__: q(t.prototype.__properties__, {
          set_currentFrame: "set_currentFrame",
          get_numFrames: "get_numFrames",
          get_symbolName: "get_symbolName",
          get_loopMode: "get_loopMode",
          get_type: "get_type",
          get_currentLabel: "get_currentLabel",
        }),
      });
      var Si = function (a, b) {
        null == b && (b = !0);
        null == a && (a = "spooky");
        this.TemplateCharacter =
          '{\n\t\t\t"animations": [\n\t\t\t\t{\n\t\t\t\t\t"loop": false,\n\t\t\t\t\t"offsets": [\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t0\n\t\t\t\t\t],\n\t\t\t\t\t"fps": 24,\n\t\t\t\t\t"anim": "idle",\n\t\t\t\t\t"indices": [],\n\t\t\t\t\t"name": "Dad idle dance"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"offsets": [\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t0\n\t\t\t\t\t],\n\t\t\t\t\t"indices": [],\n\t\t\t\t\t"fps": 24,\n\t\t\t\t\t"anim": "singLEFT",\n\t\t\t\t\t"loop": false,\n\t\t\t\t\t"name": "Dad Sing Note LEFT"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"offsets": [\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t0\n\t\t\t\t\t],\n\t\t\t\t\t"indices": [],\n\t\t\t\t\t"fps": 24,\n\t\t\t\t\t"anim": "singDOWN",\n\t\t\t\t\t"loop": false,\n\t\t\t\t\t"name": "Dad Sing Note DOWN"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"offsets": [\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t0\n\t\t\t\t\t],\n\t\t\t\t\t"indices": [],\n\t\t\t\t\t"fps": 24,\n\t\t\t\t\t"anim": "singUP",\n\t\t\t\t\t"loop": false,\n\t\t\t\t\t"name": "Dad Sing Note UP"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t"offsets": [\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t0\n\t\t\t\t\t],\n\t\t\t\t\t"indices": [],\n\t\t\t\t\t"fps": 24,\n\t\t\t\t\t"anim": "singRIGHT",\n\t\t\t\t\t"loop": false,\n\t\t\t\t\t"name": "Dad Sing Note RIGHT"\n\t\t\t\t}\n\t\t\t],\n\t\t\t"no_antialiasing": false,\n\t\t\t"image": "characters/DADDY_DEAREST",\n\t\t\t"position": [\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t"healthicon": "face",\n\t\t\t"flip_x": false,\n\t\t\t"healthbar_colors": [\n\t\t\t\t161,\n\t\t\t\t161,\n\t\t\t\t161\n\t\t\t],\n\t\t\t"camera_position": [\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t"sing_duration": 6.1,\n\t\t\t"scale": 1\n\t\t}';
        this.OFFSET_X = 300;
        this.onPixelBG = !1;
        this.characterList = [];
        this.goToPlayState = !0;
        this.daAnim = "spooky";
        this.curAnim = 0;
        I.call(this);
        this.daAnim = a;
        this.goToPlayState = b;
      };
      h["editors.CharacterEditorState"] = Si;
      Si.__name__ = "editors.CharacterEditorState";
      Si.__super__ = I;
      Si.prototype = q(I.prototype, {
        create: function () {
          var a = this;
          this.camEditor = new Ob();
          this.camHUD = new Ob();
          this.camHUD.bgColor &= 16777215;
          this.camHUD.bgColor |= 0;
          this.camMenu = new Ob();
          this.camMenu.bgColor &= 16777215;
          this.camMenu.bgColor |= 0;
          g.cameras.reset(this.camEditor);
          g.cameras.add(this.camHUD, !1);
          g.cameras.add(this.camMenu, !1);
          g.cameras.setDefaultDrawTarget(this.camEditor, !0);
          this.bgLayer = new ma();
          this.add(this.bgLayer);
          this.charLayer = new ma();
          this.add(this.charLayer);
          var b = Xb.fromClass(ne);
          this.cameraFollowPointer = new F().loadGraphic(b);
          this.cameraFollowPointer.setGraphicSize(40, 40);
          this.cameraFollowPointer.updateHitbox();
          this.cameraFollowPointer.set_color(-1);
          this.add(this.cameraFollowPointer);
          this.changeBGbutton = new lb(g.width - 360, 25, "", function () {
            a.onPixelBG = !a.onPixelBG;
            a.reloadBGs();
          });
          this.changeBGbutton.set_cameras([this.camMenu]);
          this.loadChar(!K.startsWith(this.daAnim, "bf"), !1);
          b = new F(30, g.height - 75);
          var c = G.returnGraphic("healthBar", null);
          this.healthBarBG = b.loadGraphic(c);
          var d = this.healthBarBG.scrollFactor;
          d.set_x(0);
          d.set_y(0);
          this.add(this.healthBarBG);
          this.healthBarBG.set_cameras([this.camHUD]);
          this.leHealthIcon = new sf(this.char.healthIcon, !1);
          this.leHealthIcon.set_y(g.height - 150);
          this.add(this.leHealthIcon);
          this.leHealthIcon.set_cameras([this.camHUD]);
          this.dumbTexts = new ma();
          this.add(this.dumbTexts);
          this.dumbTexts.set_cameras([this.camHUD]);
          this.textAnim = new W(300, 16);
          this.textAnim.setFormat(
            "assets/fonts/vcr.ttf",
            16,
            -1,
            "right",
            Ya.OUTLINE,
            -16777216
          );
          this.textAnim.set_borderSize(1);
          this.textAnim.set_size(32);
          d = this.textAnim.scrollFactor;
          d.set_x(0);
          d.set_y(0);
          this.textAnim.set_cameras([this.camHUD]);
          this.add(this.textAnim);
          this.genBoyOffsets();
          b = this.camFollow = new ca(0, 0, 2, 2);
          b.set_x((g.width - b.get_width()) / 2);
          b.set_y((g.height - b.get_height()) / 2);
          this.add(this.camFollow);
          b =
            "E/Q - Camera Zoom In/Out;\t\t;R - Reset Camera Zoom;\t\t;JKLI - Move Camera;\t\t;W/S - Previous/Next Animation;\t\t;Space - Play Animation;\t\t;Arrow Keys - Move Character Offset;\t\t;T - Reset Current Offset;\t\t;Hold Shift to Move 10x faster;".split(
              ";"
            );
          c = 0;
          for (var e = b.length - 1; c < e; ) {
            d = c++;
            var f = new W(
              g.width - 320,
              g.height - 15 - 16 * (b.length - d),
              300,
              b[d],
              12
            );
            f.set_cameras([this.camHUD]);
            f.setFormat(null, 12, -1, "right", Ya.OUTLINE_FAST, -16777216);
            d = f.scrollFactor;
            d.set_x(0);
            d.set_y(0);
            f.set_borderSize(1);
            this.add(f);
          }
          g.camera.follow(this.camFollow);
          b = [{ name: "Settings", label: "Settings" }];
          this.UI_box = new be(null, null, b, null, !0);
          this.UI_box.set_cameras([this.camMenu]);
          this.UI_box.resize(250, 120);
          this.UI_box.set_x(g.width - 275);
          this.UI_box.set_y(25);
          d = this.UI_box.scrollFactor;
          d.set_x(0);
          d.set_y(0);
          b = [
            { name: "Character", label: "Character" },
            { name: "Animations", label: "Animations" },
          ];
          this.UI_characterbox = new be(null, null, b, null, !0);
          this.UI_characterbox.set_cameras([this.camMenu]);
          this.UI_characterbox.resize(350, 250);
          this.UI_characterbox.set_x(this.UI_box.x - 100);
          this.UI_characterbox.set_y(this.UI_box.y + this.UI_box.get_height());
          d = this.UI_characterbox.scrollFactor;
          d.set_x(0);
          d.set_y(0);
          this.add(this.UI_characterbox);
          this.add(this.UI_box);
          this.add(this.changeBGbutton);
          this.addSettingsUI();
          this.addCharacterUI();
          this.addAnimationsUI();
          this.UI_characterbox.set_selected_tab_id("Character");
          g.mouse.set_visible(!0);
          this.reloadCharacterOptions();
          I.prototype.create.call(this);
        },
        reloadBGs: function () {
          for (var a = this.bgLayer.members.length - 1; 0 <= a; ) {
            var b = this.bgLayer.members[a];
            null != b && (b.kill(), this.bgLayer.remove(b), b.destroy());
            --a;
          }
          this.bgLayer.clear();
          b = 0;
          this.char.isPlayer && (b = 670);
          if (this.onPixelBG) {
            var c = 0;
            this.char.isPlayer && ((b += 200), (c = 220));
            a = new cc(
              "weeb/weebSky",
              this.OFFSET_X - b / 2 - 300,
              0 - c,
              0.1,
              0.1
            );
            this.bgLayer.add(a);
            a.set_antialiasing(!1);
            var d = -200 + this.OFFSET_X - b;
            b = new cc("weeb/weebSchool", d, -c + 6, 0.6, 0.9);
            this.bgLayer.add(b);
            b.set_antialiasing(!1);
            var e = new cc("weeb/weebStreet", d, -c, 0.95, 0.95);
            this.bgLayer.add(e);
            e.set_antialiasing(!1);
            var f = (6 * a.get_width()) | 0;
            c = new F(d - 380, -800 - c);
            d = G.returnGraphic("weeb/weebTrees", null);
            c.set_frames(
              jb.fromSpriteSheetPacker(
                d,
                G.getPath("images/weeb/weebTrees.txt", "TEXT", null)
              )
            );
            c.animation.add(
              "treeLoop",
              [
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
                18,
              ],
              12
            );
            c.animation.play("treeLoop");
            d = c.scrollFactor;
            var k = 0.85,
              r = 0.85;
            null == r && (r = 0);
            null == k && (k = 0);
            d.set_x(k);
            d.set_y(r);
            this.bgLayer.add(c);
            c.set_antialiasing(!1);
            a.setGraphicSize(f);
            b.setGraphicSize(f);
            e.setGraphicSize(f);
            c.setGraphicSize((1.4 * f) | 0);
            a.updateHitbox();
            b.updateHitbox();
            e.updateHitbox();
            c.updateHitbox();
            a = this.changeBGbutton;
            null == a.label
              ? (a.set_label(
                  new W(
                    a.x + a.labelOffsets[0].x,
                    a.y + a.labelOffsets[0].y,
                    80,
                    "Regular BG"
                  )
                ),
                a.label.setFormat(null, 8, 3355443, "center"),
                a.label.set_alpha(a.labelAlphas[a.status]),
                a.label.drawFrame(!0))
              : a.label.set_text("Regular BG");
          } else
            (a = new cc("stageback", -600 + this.OFFSET_X - b, -300, 0.9, 0.9)),
              this.bgLayer.add(a),
              (a = new cc(
                "stagefront",
                -650 + this.OFFSET_X - b,
                500,
                0.9,
                0.9
              )),
              a.setGraphicSize((1.1 * a.get_width()) | 0),
              a.updateHitbox(),
              this.bgLayer.add(a),
              (a = this.changeBGbutton),
              null == a.label
                ? (a.set_label(
                    new W(
                      a.x + a.labelOffsets[0].x,
                      a.y + a.labelOffsets[0].y,
                      80,
                      "Pixel BG"
                    )
                  ),
                  a.label.setFormat(null, 8, 3355443, "center"),
                  a.label.set_alpha(a.labelAlphas[a.status]),
                  a.label.drawFrame(!0))
                : a.label.set_text("Pixel BG");
        },
        addSettingsUI: function () {
          var a = this,
            b = new Ea(null, this.UI_box);
          b.name = "Settings";
          var c = new tb(10, 60, null, null, "Playable Character", 100);
          c.set_checked(K.startsWith(this.daAnim, "bf"));
          c.callback = function () {
            a.char.isPlayer = !a.char.isPlayer;
            a.char.set_flipX(!a.char.flipX);
            a.updatePointerPos();
            a.reloadBGs();
            a.ghostChar.set_flipX(a.char.flipX);
          };
          this.charDropDown = new gc(
            10,
            30,
            gc.makeStrIdLabelArray([""], !0),
            function (b) {
              a.daAnim = a.characterList[M.parseInt(b)];
              c.set_checked(K.startsWith(a.daAnim, "bf"));
              a.loadChar(!c.checked);
              a.updatePresence();
              a.reloadCharacterDropDown();
            }
          );
          this.charDropDown.set_selectedLabel(this.daAnim);
          this.reloadCharacterDropDown();
          var d = new lb(140, 20, "Reload Char", function () {
              a.loadChar(!c.checked);
              a.reloadCharacterDropDown();
            }),
            e = new lb(140, 50, "Load Template", function () {
              for (
                var b = JSON.parse(a.TemplateCharacter),
                  c = [a.char, a.ghostChar],
                  d = 0;
                d < c.length;

              ) {
                var e = c[d];
                ++d;
                e.animOffsets.h = Object.create(null);
                e.animationsArray = b.animations;
                for (var g = 0, u = e.animationsArray; g < u.length; ) {
                  var m = u[g];
                  ++g;
                  e.addOffset(m.anim, m.offsets[0], m.offsets[1]);
                }
                null != e.animationsArray[0] &&
                  e.playAnim(e.animationsArray[0].anim, !0);
                e.singDuration = b.sing_duration;
                e.positionArray = b.position;
                e.cameraPosition = b.camera_position;
                e.imageFile = b.image;
                e.jsonScale = b.scale;
                e.noAntialiasing = b.no_antialiasing;
                e.originalFlipX = b.flip_x;
                e.healthIcon = b.healthicon;
                e.healthColorArray = b.healthbar_colors;
                e.setPosition(
                  e.positionArray[0] + a.OFFSET_X + 100,
                  e.positionArray[1]
                );
              }
              a.reloadCharacterImage();
              a.reloadCharacterDropDown();
              a.reloadCharacterOptions();
              a.resetHealthBarColor();
              a.updatePointerPos();
              a.genBoyOffsets();
            });
          e.set_color(-65536);
          e.label.set_color(-1);
          b.add(
            new W(
              this.charDropDown.x,
              this.charDropDown.y - 18,
              0,
              "Character:"
            )
          );
          b.add(c);
          b.add(d);
          b.add(this.charDropDown);
          b.add(d);
          b.add(e);
          this.UI_box.addGroup(b);
        },
        addCharacterUI: function () {
          var a = this,
            b = new Ea(null, this.UI_box);
          b.name = "Character";
          this.imageInputText = new qb(15, 30, 200, "characters/BOYFRIEND", 8);
          var c = new lb(
              this.imageInputText.x + 210,
              this.imageInputText.y - 3,
              "Reload Image",
              function () {
                a.char.imageFile = a.imageInputText.text;
                a.reloadCharacterImage();
                null != a.char.animation._curAnim &&
                  a.char.playAnim(a.char.animation._curAnim.name, !0);
              }
            ),
            d = new lb(c.x, c.y + 30, "Get Icon Color", function () {
              var b = ob._new(Ta.dominantColor(a.leHealthIcon));
              a.healthColorStepperR.set_value((b >> 16) & 255);
              a.healthColorStepperG.set_value((b >> 8) & 255);
              a.healthColorStepperB.set_value(b & 255);
              a.getEvent("change_numeric_stepper", a.healthColorStepperR, null);
              a.getEvent("change_numeric_stepper", a.healthColorStepperG, null);
              a.getEvent("change_numeric_stepper", a.healthColorStepperB, null);
            });
          this.healthIconInputText = new qb(
            15,
            this.imageInputText.y + 35,
            75,
            this.leHealthIcon.getCharacter(),
            8
          );
          this.singDurationStepper = new Jb(
            15,
            this.healthIconInputText.y + 45,
            0.1,
            4,
            0,
            999,
            1
          );
          this.scaleStepper = new Jb(
            15,
            this.singDurationStepper.y + 40,
            0.1,
            1,
            0.05,
            10,
            1
          );
          this.flipXCheckBox = new tb(
            this.singDurationStepper.x + 80,
            this.singDurationStepper.y,
            null,
            null,
            "Flip X",
            50
          );
          this.flipXCheckBox.set_checked(this.char.flipX);
          this.char.isPlayer &&
            this.flipXCheckBox.set_checked(!this.flipXCheckBox.checked);
          this.flipXCheckBox.callback = function () {
            a.char.originalFlipX = !a.char.originalFlipX;
            a.char.set_flipX(a.char.originalFlipX);
            a.char.isPlayer && a.char.set_flipX(!a.char.flipX);
            a.ghostChar.set_flipX(a.char.flipX);
          };
          this.noAntialiasingCheckBox = new tb(
            this.flipXCheckBox.x,
            this.flipXCheckBox.y + 40,
            null,
            null,
            "No Antialiasing",
            80
          );
          this.noAntialiasingCheckBox.set_checked(this.char.noAntialiasing);
          this.noAntialiasingCheckBox.callback = function () {
            a.char.set_antialiasing(!1);
            !a.noAntialiasingCheckBox.checked &&
              y.globalAntialiasing &&
              a.char.set_antialiasing(!0);
            a.char.noAntialiasing = a.noAntialiasingCheckBox.checked;
            a.ghostChar.set_antialiasing(a.char.antialiasing);
          };
          this.positionXStepper = new Jb(
            this.flipXCheckBox.x + 110,
            this.flipXCheckBox.y,
            10,
            this.char.positionArray[0],
            -9e3,
            9e3,
            0
          );
          this.positionYStepper = new Jb(
            this.positionXStepper.x + 60,
            this.positionXStepper.y,
            10,
            this.char.positionArray[1],
            -9e3,
            9e3,
            0
          );
          this.positionCameraXStepper = new Jb(
            this.positionXStepper.x,
            this.positionXStepper.y + 40,
            10,
            this.char.cameraPosition[0],
            -9e3,
            9e3,
            0
          );
          this.positionCameraYStepper = new Jb(
            this.positionYStepper.x,
            this.positionYStepper.y + 40,
            10,
            this.char.cameraPosition[1],
            -9e3,
            9e3,
            0
          );
          var e = new lb(
            c.x,
            this.noAntialiasingCheckBox.y + 40,
            "Save Character",
            function () {
              a.saveCharacter();
            }
          );
          this.healthColorStepperR = new Jb(
            this.singDurationStepper.x,
            e.y,
            20,
            this.char.healthColorArray[0],
            0,
            255,
            0
          );
          this.healthColorStepperG = new Jb(
            this.singDurationStepper.x + 65,
            e.y,
            20,
            this.char.healthColorArray[1],
            0,
            255,
            0
          );
          this.healthColorStepperB = new Jb(
            this.singDurationStepper.x + 130,
            e.y,
            20,
            this.char.healthColorArray[2],
            0,
            255,
            0
          );
          b.add(new W(15, this.imageInputText.y - 18, 0, "Image file name:"));
          b.add(
            new W(15, this.healthIconInputText.y - 18, 0, "Health icon name:")
          );
          b.add(
            new W(
              15,
              this.singDurationStepper.y - 18,
              0,
              "Sing Animation length:"
            )
          );
          b.add(new W(15, this.scaleStepper.y - 18, 0, "Scale:"));
          b.add(
            new W(
              this.positionXStepper.x,
              this.positionXStepper.y - 18,
              0,
              "Character X/Y:"
            )
          );
          b.add(
            new W(
              this.positionCameraXStepper.x,
              this.positionCameraXStepper.y - 18,
              0,
              "Camera X/Y:"
            )
          );
          b.add(
            new W(
              this.healthColorStepperR.x,
              this.healthColorStepperR.y - 18,
              0,
              "Health bar R/G/B:"
            )
          );
          b.add(this.imageInputText);
          b.add(c);
          b.add(d);
          b.add(this.healthIconInputText);
          b.add(this.singDurationStepper);
          b.add(this.scaleStepper);
          b.add(this.flipXCheckBox);
          b.add(this.noAntialiasingCheckBox);
          b.add(this.positionXStepper);
          b.add(this.positionYStepper);
          b.add(this.positionCameraXStepper);
          b.add(this.positionCameraYStepper);
          b.add(this.healthColorStepperR);
          b.add(this.healthColorStepperG);
          b.add(this.healthColorStepperB);
          b.add(e);
          this.UI_characterbox.addGroup(b);
        },
        addAnimationsUI: function () {
          var a = this,
            b = new Ea(null, this.UI_box);
          b.name = "Animations";
          this.animationInputText = new qb(15, 85, 80, "", 8);
          this.animationNameInputText = new qb(
            this.animationInputText.x,
            this.animationInputText.y + 35,
            150,
            "",
            8
          );
          this.animationIndicesInputText = new qb(
            this.animationNameInputText.x,
            this.animationNameInputText.y + 40,
            250,
            "",
            8
          );
          this.animationNameFramerate = new Jb(
            this.animationInputText.x + 170,
            this.animationInputText.y,
            1,
            24,
            0,
            240,
            0
          );
          this.animationLoopCheckBox = new tb(
            this.animationNameInputText.x + 170,
            this.animationNameInputText.y - 1,
            null,
            null,
            "Should it Loop?",
            100
          );
          this.animationDropDown = new gc(
            15,
            this.animationInputText.y - 55,
            gc.makeStrIdLabelArray([""], !0),
            function (b) {
              b = M.parseInt(b);
              b = a.char.animationsArray[b];
              a.animationInputText.set_text(b.anim);
              a.animationNameInputText.set_text(b.name);
              a.animationLoopCheckBox.set_checked(b.loop);
              a.animationNameFramerate.set_value(b.fps);
              b = b.indices.toString();
              a.animationIndicesInputText.set_text(
                X.substr(b, 1, b.length - 2)
              );
            }
          );
          this.ghostDropDown = new gc(
            this.animationDropDown.x + 150,
            this.animationDropDown.y,
            gc.makeStrIdLabelArray([""], !0),
            function (b) {
              b = M.parseInt(b);
              a.ghostChar.set_visible(!1);
              a.char.set_alpha(1);
              0 < b &&
                (a.ghostChar.set_visible(!0),
                a.ghostChar.playAnim(
                  a.ghostChar.animationsArray[b - 1].anim,
                  !0
                ),
                a.char.set_alpha(0.85));
            }
          );
          var c = new lb(
              70,
              this.animationIndicesInputText.y + 30,
              "Add/Update",
              function () {
                var b = [],
                  c = K.trim(a.animationIndicesInputText.text).split(",");
                if (1 < c.length)
                  for (var d = 0, r = c.length; d < r; ) {
                    var l = d++,
                      g = M.parseInt(c[l]);
                    null != c[l] &&
                      "" != c[l] &&
                      !isNaN(g) &&
                      -1 < g &&
                      b.push(g);
                  }
                l = "";
                null != a.char.animationsArray[a.curAnim] &&
                  (l = a.char.animationsArray[a.curAnim].anim);
                c = [0, 0];
                d = 0;
                for (r = a.char.animationsArray; d < r.length; )
                  (g = r[d]),
                    ++d,
                    a.animationInputText.text == g.anim &&
                      ((c = g.offsets),
                      null !=
                        a.char.animation._animations.h[
                          a.animationInputText.text
                        ] && a.char.animation.remove(a.animationInputText.text),
                      X.remove(a.char.animationsArray, g));
                d = {
                  anim: a.animationInputText.text,
                  name: a.animationNameInputText.text,
                  fps: Math.round(a.animationNameFramerate.value),
                  loop: a.animationLoopCheckBox.checked,
                  indices: b,
                  offsets: c,
                };
                null != b && 0 < b.length
                  ? a.char.animation.addByIndices(
                      d.anim,
                      d.name,
                      d.indices,
                      "",
                      d.fps,
                      d.loop
                    )
                  : a.char.animation.addByPrefix(d.anim, d.name, d.fps, d.loop);
                Object.prototype.hasOwnProperty.call(
                  a.char.animOffsets.h,
                  d.anim
                ) || a.char.addOffset(d.anim, 0, 0);
                a.char.animationsArray.push(d);
                if (l == a.animationInputText.text)
                  if (
                    ((b = a.char.animation._animations.h[l]),
                    null != b && 0 < b.frames.length)
                  )
                    a.char.playAnim(l, !0);
                  else
                    for (d = 0, r = a.char.animationsArray.length; d < r; )
                      if (
                        ((l = d++),
                        null != a.char.animationsArray[l] &&
                          ((b =
                            a.char.animation._animations.h[
                              a.char.animationsArray[l].anim
                            ]),
                          null != b && 0 < b.frames.length))
                      ) {
                        a.char.playAnim(a.char.animationsArray[l].anim, !0);
                        a.curAnim = l;
                        break;
                      }
                a.reloadAnimationDropDown();
                a.genBoyOffsets();
                wb.trace(
                  "Added/Updated animation: " + a.animationInputText.text,
                  {
                    fileName: "source/editors/CharacterEditorState.hx",
                    lineNumber: 712,
                    className: "editors.CharacterEditorState",
                    methodName: "addAnimationsUI",
                  }
                );
              }
            ),
            d = new lb(
              180,
              this.animationIndicesInputText.y + 30,
              "Remove",
              function () {
                for (var b = 0, c = a.char.animationsArray; b < c.length; ) {
                  var d = c[b];
                  ++b;
                  if (a.animationInputText.text == d.anim) {
                    b = !1;
                    null != a.char.animation._curAnim &&
                      d.anim == a.char.animation._curAnim.name &&
                      (b = !0);
                    null != a.char.animation._animations.h[d.anim] &&
                      a.char.animation.remove(d.anim);
                    if (
                      Object.prototype.hasOwnProperty.call(
                        a.char.animOffsets.h,
                        d.anim
                      )
                    ) {
                      c = d.anim;
                      var r = a.char.animOffsets;
                      Object.prototype.hasOwnProperty.call(r.h, c) &&
                        delete r.h[c];
                    }
                    X.remove(a.char.animationsArray, d);
                    b &&
                      0 < a.char.animationsArray.length &&
                      a.char.playAnim(a.char.animationsArray[0].anim, !0);
                    a.reloadAnimationDropDown();
                    a.genBoyOffsets();
                    wb.trace(
                      "Removed animation: " + a.animationInputText.text,
                      {
                        fileName: "source/editors/CharacterEditorState.hx",
                        lineNumber: 734,
                        className: "editors.CharacterEditorState",
                        methodName: "addAnimationsUI",
                      }
                    );
                    break;
                  }
                }
              }
            );
          b.add(
            new W(
              this.animationDropDown.x,
              this.animationDropDown.y - 18,
              0,
              "Animations:"
            )
          );
          b.add(
            new W(
              this.ghostDropDown.x,
              this.ghostDropDown.y - 18,
              0,
              "Animation Ghost:"
            )
          );
          b.add(
            new W(
              this.animationInputText.x,
              this.animationInputText.y - 18,
              0,
              "Animation name:"
            )
          );
          b.add(
            new W(
              this.animationNameFramerate.x,
              this.animationNameFramerate.y - 18,
              0,
              "Framerate:"
            )
          );
          b.add(
            new W(
              this.animationNameInputText.x,
              this.animationNameInputText.y - 18,
              0,
              "Animation on .XML/.TXT file:"
            )
          );
          b.add(
            new W(
              this.animationIndicesInputText.x,
              this.animationIndicesInputText.y - 18,
              0,
              "ADVANCED - Animation Indices:"
            )
          );
          b.add(this.animationInputText);
          b.add(this.animationNameInputText);
          b.add(this.animationIndicesInputText);
          b.add(this.animationNameFramerate);
          b.add(this.animationLoopCheckBox);
          b.add(c);
          b.add(d);
          b.add(this.ghostDropDown);
          b.add(this.animationDropDown);
          this.UI_characterbox.addGroup(b);
        },
        getEvent: function (a, b, c, d) {
          if ("change_input_text" == a && b instanceof qb)
            b == this.healthIconInputText
              ? (this.leHealthIcon.changeIcon(this.healthIconInputText.text),
                (this.char.healthIcon = this.healthIconInputText.text),
                this.updatePresence())
              : b == this.imageInputText &&
                (this.char.imageFile = this.imageInputText.text);
          else if ("change_numeric_stepper" == a && b instanceof Jb)
            if (b == this.scaleStepper)
              this.reloadCharacterImage(),
                (this.char.jsonScale = b.value),
                this.char.setGraphicSize(
                  (this.char.get_width() * this.char.jsonScale) | 0
                ),
                this.char.updateHitbox(),
                this.ghostChar.setGraphicSize(
                  (this.ghostChar.get_width() * this.char.jsonScale) | 0
                ),
                this.ghostChar.updateHitbox(),
                this.reloadGhost(),
                this.updatePointerPos(),
                null != this.char.animation._curAnim &&
                  this.char.playAnim(this.char.animation._curAnim.name, !0);
            else if (b == this.positionXStepper)
              (this.char.positionArray[0] = this.positionXStepper.value),
                this.char.set_x(
                  this.char.positionArray[0] + this.OFFSET_X + 100
                ),
                this.updatePointerPos();
            else if (b == this.singDurationStepper)
              this.char.singDuration = this.singDurationStepper.value;
            else if (b == this.positionYStepper)
              (this.char.positionArray[1] = this.positionYStepper.value),
                this.char.set_y(this.char.positionArray[1]),
                this.updatePointerPos();
            else if (b == this.positionCameraXStepper)
              (this.char.cameraPosition[0] = this.positionCameraXStepper.value),
                this.updatePointerPos();
            else if (b == this.positionCameraYStepper)
              (this.char.cameraPosition[1] = this.positionCameraYStepper.value),
                this.updatePointerPos();
            else if (b == this.healthColorStepperR) {
              this.char.healthColorArray[0] = Math.round(
                this.healthColorStepperR.value
              );
              a = this.healthBarBG;
              b = this.char.healthColorArray[0];
              c = this.char.healthColorArray[1];
              d = this.char.healthColorArray[2];
              var e = ob._new(),
                f = 255;
              null == f && (f = 255);
              e =
                (((e & -16711681) | ((255 < b ? 255 : 0 > b ? 0 : b) << 16)) &
                  -65281) |
                ((255 < c ? 255 : 0 > c ? 0 : c) << 8);
              e &= -256;
              e |= 255 < d ? 255 : 0 > d ? 0 : d;
              e &= 16777215;
              e |= (255 < f ? 255 : 0 > f ? 0 : f) << 24;
              a.set_color(e);
            } else
              b == this.healthColorStepperG
                ? ((this.char.healthColorArray[1] = Math.round(
                    this.healthColorStepperG.value
                  )),
                  (a = this.healthBarBG),
                  (b = this.char.healthColorArray[0]),
                  (c = this.char.healthColorArray[1]),
                  (d = this.char.healthColorArray[2]),
                  (e = ob._new()),
                  (f = 255),
                  null == f && (f = 255),
                  (e &= -16711681),
                  (e =
                    ((e | ((255 < b ? 255 : 0 > b ? 0 : b) << 16)) & -65281) |
                    ((255 < c ? 255 : 0 > c ? 0 : c) << 8)),
                  (e &= -256),
                  (e |= 255 < d ? 255 : 0 > d ? 0 : d),
                  (e &= 16777215),
                  (e |= (255 < f ? 255 : 0 > f ? 0 : f) << 24),
                  a.set_color(e))
                : b == this.healthColorStepperB &&
                  ((this.char.healthColorArray[2] = Math.round(
                    this.healthColorStepperB.value
                  )),
                  (a = this.healthBarBG),
                  (b = this.char.healthColorArray[0]),
                  (c = this.char.healthColorArray[1]),
                  (d = this.char.healthColorArray[2]),
                  (e = ob._new()),
                  (f = 255),
                  null == f && (f = 255),
                  (e &= -16711681),
                  (e =
                    ((e | ((255 < b ? 255 : 0 > b ? 0 : b) << 16)) & -65281) |
                    ((255 < c ? 255 : 0 > c ? 0 : c) << 8)),
                  (e &= -256),
                  (e |= 255 < d ? 255 : 0 > d ? 0 : d),
                  (e &= 16777215),
                  (e |= (255 < f ? 255 : 0 > f ? 0 : f) << 24),
                  a.set_color(e));
        },
        reloadCharacterImage: function () {
          var a = "";
          null != this.char.animation._curAnim &&
            (a = this.char.animation._curAnim.name);
          this.char.animationsArray.slice();
          if (
            aa.exists(
              G.getPath(
                "images/" + this.char.imageFile + "/Animation.json",
                "TEXT"
              )
            )
          )
            this.char.set_frames(Ig.construct(this.char.imageFile));
          else if (
            aa.exists(
              G.getPath("images/" + this.char.imageFile + ".txt", "TEXT")
            )
          ) {
            var b = this.char,
              c = this.char.imageFile,
              d = null,
              e = G.returnGraphic(c, d);
            b.set_frames(
              jb.fromSpriteSheetPacker(
                e,
                G.getPath("images/" + c + ".txt", "TEXT", d)
              )
            );
          } else
            (b = this.char),
              (c = this.char.imageFile),
              (d = null),
              (e = G.returnGraphic(c, d)),
              b.set_frames(
                jb.fromSparrow(e, G.getPath("images/" + c + ".xml", "TEXT", d))
              );
          if (
            null != this.char.animationsArray &&
            0 < this.char.animationsArray.length
          )
            for (b = 0, c = this.char.animationsArray; b < c.length; ) {
              var f = c[b];
              ++b;
              d = "" + f.anim;
              e = "" + f.name;
              var k = f.fps,
                r = f.loop;
              f = f.indices;
              null != f && 0 < f.length
                ? this.char.animation.addByIndices(d, e, f, "", k, r)
                : this.char.animation.addByPrefix(d, e, k, r);
            }
          else this.char.quickAnimAdd("idle", "BF idle dance");
          "" != a ? this.char.playAnim(a, !0) : this.char.dance();
          this.ghostDropDown.set_selectedLabel("");
          this.reloadGhost();
        },
        genBoyOffsets: function () {
          for (var a = 0, b = this.dumbTexts.members.length - 1; 0 <= b; ) {
            var c = this.dumbTexts.members[b];
            null != c && (c.kill(), this.dumbTexts.remove(c), c.destroy());
            --b;
          }
          this.dumbTexts.clear();
          b = this.char.animOffsets.h;
          c = Object.keys(b);
          for (var d = c.length, e = 0; e < d; ) {
            var f = c[e++];
            f = new W(10, 20 + 18 * a, 0, f + ": " + M.string(b[f]), 15);
            f.setFormat(null, 16, -1, "center", Ya.OUTLINE, -16777216);
            var k = f.scrollFactor;
            k.set_x(0);
            k.set_y(0);
            f.set_borderSize(1);
            this.dumbTexts.add(f);
            f.set_cameras([this.camHUD]);
            ++a;
          }
          this.textAnim.set_visible(!0);
          1 > this.dumbTexts.length &&
            ((f = new W(10, 38, 0, "ERROR! No animations found.", 15)),
            (k = f.scrollFactor),
            k.set_x(0),
            k.set_y(0),
            f.set_borderSize(1),
            this.dumbTexts.add(f),
            this.textAnim.set_visible(!1));
        },
        loadChar: function (a, b) {
          null == b && (b = !0);
          for (var c = this.charLayer.members.length - 1; 0 <= c; ) {
            var d = this.charLayer.members[c];
            null != d && (d.kill(), this.charLayer.remove(d), d.destroy());
            --c;
          }
          this.charLayer.clear();
          this.ghostChar = new yc(0, 0, this.daAnim, !a);
          this.ghostChar.debugMode = !0;
          this.ghostChar.set_alpha(0.6);
          this.char = new yc(0, 0, this.daAnim, !a);
          null != this.char.animationsArray[0] &&
            this.char.playAnim(this.char.animationsArray[0].anim, !0);
          this.char.debugMode = !0;
          this.charLayer.add(this.ghostChar);
          this.charLayer.add(this.char);
          this.char.setPosition(
            this.char.positionArray[0] + this.OFFSET_X + 100,
            this.char.positionArray[1]
          );
          b && this.genBoyOffsets();
          this.reloadCharacterOptions();
          this.reloadBGs();
          this.updatePointerPos();
        },
        updatePointerPos: function () {
          var a = this.char.getMidpoint().x,
            b = this.char.getMidpoint().y;
          a = this.char.isPlayer
            ? a - (100 + this.char.cameraPosition[0])
            : a + (150 + this.char.cameraPosition[0]);
          b -= 100 - this.char.cameraPosition[1];
          a -= this.cameraFollowPointer.get_width() / 2;
          b -= this.cameraFollowPointer.get_height() / 2;
          this.cameraFollowPointer.setPosition(a, b);
        },
        findAnimationByName: function (a) {
          for (var b = 0, c = this.char.animationsArray; b < c.length; ) {
            var d = c[b];
            ++b;
            if (d.anim == a) return d;
          }
          return null;
        },
        reloadCharacterOptions: function () {
          null != this.UI_characterbox &&
            (this.imageInputText.set_text(this.char.imageFile),
            this.healthIconInputText.set_text(this.char.healthIcon),
            this.singDurationStepper.set_value(this.char.singDuration),
            this.scaleStepper.set_value(this.char.jsonScale),
            this.flipXCheckBox.set_checked(this.char.originalFlipX),
            this.noAntialiasingCheckBox.set_checked(this.char.noAntialiasing),
            this.resetHealthBarColor(),
            this.leHealthIcon.changeIcon(this.healthIconInputText.text),
            this.positionXStepper.set_value(this.char.positionArray[0]),
            this.positionYStepper.set_value(this.char.positionArray[1]),
            this.positionCameraXStepper.set_value(this.char.cameraPosition[0]),
            this.positionCameraYStepper.set_value(this.char.cameraPosition[1]),
            this.reloadAnimationDropDown(),
            this.updatePresence());
        },
        reloadAnimationDropDown: function () {
          for (
            var a = [], b = [""], c = 0, d = this.char.animationsArray;
            c < d.length;

          ) {
            var e = d[c];
            ++c;
            a.push(e.anim);
            b.push(e.anim);
          }
          1 > a.length && a.push("NO ANIMATIONS");
          this.animationDropDown.setData(gc.makeStrIdLabelArray(a, !0));
          this.ghostDropDown.setData(gc.makeStrIdLabelArray(b, !0));
          this.reloadGhost();
        },
        reloadGhost: function () {
          this.ghostChar.set_frames(this.char.frames);
          for (var a = 0, b = this.char.animationsArray; a < b.length; ) {
            var c = b[a];
            ++a;
            var d = "" + c.anim,
              e = "" + c.name,
              f = c.fps,
              k = c.loop,
              r = c.indices;
            null != r && 0 < r.length
              ? this.ghostChar.animation.addByIndices(d, e, r, "", f, k)
              : this.ghostChar.animation.addByPrefix(d, e, f, k);
            null != c.offsets &&
              1 < c.offsets.length &&
              this.ghostChar.addOffset(c.anim, c.offsets[0], c.offsets[1]);
          }
          this.char.set_alpha(0.85);
          this.ghostChar.set_visible(!0);
          "" == this.ghostDropDown.get_selectedLabel() &&
            (this.ghostChar.set_visible(!1), this.char.set_alpha(1));
          this.ghostChar.set_color(-10066296);
          this.ghostChar.set_antialiasing(this.char.antialiasing);
        },
        reloadCharacterDropDown: function () {
          Object.create(null);
          this.characterList = Ta.coolTextFile(
            G.getPath("data/characterList.txt", "TEXT", null)
          );
          this.charDropDown.setData(
            gc.makeStrIdLabelArray(this.characterList, !0)
          );
          this.charDropDown.set_selectedLabel(this.daAnim);
        },
        resetHealthBarColor: function () {
          this.healthColorStepperR.set_value(this.char.healthColorArray[0]);
          this.healthColorStepperG.set_value(this.char.healthColorArray[1]);
          this.healthColorStepperB.set_value(this.char.healthColorArray[2]);
          var a = this.healthBarBG,
            b = this.char.healthColorArray[0],
            c = this.char.healthColorArray[1],
            d = this.char.healthColorArray[2],
            e = ob._new(),
            f = 255;
          null == f && (f = 255);
          e =
            (((e & -16711681) | ((255 < b ? 255 : 0 > b ? 0 : b) << 16)) &
              -65281) |
            ((255 < c ? 255 : 0 > c ? 0 : c) << 8);
          e &= -256;
          e |= 255 < d ? 255 : 0 > d ? 0 : d;
          e &= 16777215;
          e |= (255 < f ? 255 : 0 > f ? 0 : f) << 24;
          a.set_color(e);
        },
        updatePresence: function () {},
        update: function (a) {
          I.camBeat = g.camera;
          if (null != this.char.animationsArray[this.curAnim]) {
            this.textAnim.set_text(
              this.char.animationsArray[this.curAnim].anim
            );
            var b =
              this.char.animation._animations.h[
                this.char.animationsArray[this.curAnim].anim
              ];
            if (null == b || 1 > b.frames.length)
              (b = this.textAnim), b.set_text(b.text + " (ERROR!)");
          } else this.textAnim.set_text("");
          b = [
            this.animationInputText,
            this.imageInputText,
            this.healthIconInputText,
            this.animationNameInputText,
            this.animationIndicesInputText,
          ];
          for (var c = 0, d = b.length; c < d; ) {
            var e = c++;
            if (b[e].hasFocus) {
              g.sound.muteKeys = [];
              g.sound.volumeDownKeys = [];
              g.sound.volumeUpKeys = [];
              I.prototype.update.call(this, a);
              return;
            }
          }
          g.sound.muteKeys = cb.muteKeys;
          g.sound.volumeDownKeys = cb.volumeDownKeys;
          g.sound.volumeUpKeys = cb.volumeUpKeys;
          if (!this.charDropDown.dropPanel.visible) {
            b = g.keys.justPressed;
            if (b.keyManager.checkStatusUnsafe(27, b.status)) {
              this.goToPlayState
                ? I.switchState(new C())
                : (I.switchState(new Zf()),
                  (b = g.sound),
                  (a = G.returnSound("music", "freakyMenu", null)),
                  b.playMusic(a));
              g.mouse.set_visible(!1);
              return;
            }
            b = g.keys.justPressed;
            b.keyManager.checkStatusUnsafe(82, b.status) &&
              g.camera.set_zoom(1);
            b = g.keys.pressed;
            b.keyManager.checkStatusUnsafe(69, b.status) &&
              3 > g.camera.zoom &&
              ((b = g.camera),
              b.set_zoom(b.zoom + a * g.camera.zoom),
              3 < g.camera.zoom && g.camera.set_zoom(3));
            b = g.keys.pressed;
            b.keyManager.checkStatusUnsafe(81, b.status) &&
              0.1 < g.camera.zoom &&
              ((b = g.camera),
              b.set_zoom(b.zoom - a * g.camera.zoom),
              0.1 > g.camera.zoom && g.camera.set_zoom(0.1));
            b = g.keys.pressed;
            b.keyManager.checkStatusUnsafe(73, b.status)
              ? (b = !0)
              : ((b = g.keys.pressed),
                (b = b.keyManager.checkStatusUnsafe(74, b.status)));
            b
              ? (b = !0)
              : ((b = g.keys.pressed),
                (b = b.keyManager.checkStatusUnsafe(75, b.status)));
            b
              ? (b = !0)
              : ((b = g.keys.pressed),
                (b = b.keyManager.checkStatusUnsafe(76, b.status)));
            b &&
              ((c = 500 * a),
              (b = g.keys.pressed),
              b.keyManager.checkStatusUnsafe(16, b.status) && (c *= 4),
              (b = g.keys.pressed),
              b.keyManager.checkStatusUnsafe(73, b.status)
                ? ((b = this.camFollow), b.set_y(b.y - c))
                : ((b = g.keys.pressed),
                  b.keyManager.checkStatusUnsafe(75, b.status) &&
                    ((b = this.camFollow), b.set_y(b.y + c))),
              (b = g.keys.pressed),
              b.keyManager.checkStatusUnsafe(74, b.status)
                ? ((b = this.camFollow), b.set_x(b.x - c))
                : ((b = g.keys.pressed),
                  b.keyManager.checkStatusUnsafe(76, b.status) &&
                    ((b = this.camFollow), b.set_x(b.x + c))));
            if (0 < this.char.animationsArray.length) {
              b = g.keys.justPressed;
              b.keyManager.checkStatusUnsafe(87, b.status) && --this.curAnim;
              b = g.keys.justPressed;
              b.keyManager.checkStatusUnsafe(83, b.status) &&
                (this.curAnim += 1);
              0 > this.curAnim &&
                (this.curAnim = this.char.animationsArray.length - 1);
              this.curAnim >= this.char.animationsArray.length &&
                (this.curAnim = 0);
              b = g.keys.justPressed;
              b.keyManager.checkStatusUnsafe(83, b.status)
                ? (b = !0)
                : ((b = g.keys.justPressed),
                  (b = b.keyManager.checkStatusUnsafe(87, b.status)));
              b
                ? (b = !0)
                : ((b = g.keys.justPressed),
                  (b = b.keyManager.checkStatusUnsafe(32, b.status)));
              b &&
                (this.char.playAnim(
                  this.char.animationsArray[this.curAnim].anim,
                  !0
                ),
                this.genBoyOffsets());
              b = g.keys.justPressed;
              b.keyManager.checkStatusUnsafe(84, b.status) &&
                ((this.char.animationsArray[this.curAnim].offsets = [0, 0]),
                this.char.addOffset(
                  this.char.animationsArray[this.curAnim].anim,
                  this.char.animationsArray[this.curAnim].offsets[0],
                  this.char.animationsArray[this.curAnim].offsets[1]
                ),
                this.ghostChar.addOffset(
                  this.char.animationsArray[this.curAnim].anim,
                  this.char.animationsArray[this.curAnim].offsets[0],
                  this.char.animationsArray[this.curAnim].offsets[1]
                ),
                this.genBoyOffsets());
              b = g.keys.justPressed;
              c = b.keyManager.checkStatusUnsafe(37, b.status);
              b = g.keys.justPressed;
              d = b.keyManager.checkStatusUnsafe(39, b.status);
              b = g.keys.justPressed;
              e = b.keyManager.checkStatusUnsafe(38, b.status);
              b = g.keys.justPressed;
              var f = [c, d, e, b.keyManager.checkStatusUnsafe(40, b.status)];
              c = 0;
              for (d = f.length; c < d; )
                if (((e = c++), f[e])) {
                  b = g.keys.pressed;
                  var k = 1;
                  b.keyManager.checkStatusUnsafe(16, b.status) && (k = 10);
                  b = 0;
                  1 < e && (b = 1);
                  var r = 1;
                  1 == e % 2 && (r = -1);
                  this.char.animationsArray[this.curAnim].offsets[b] += r * k;
                  this.char.addOffset(
                    this.char.animationsArray[this.curAnim].anim,
                    this.char.animationsArray[this.curAnim].offsets[0],
                    this.char.animationsArray[this.curAnim].offsets[1]
                  );
                  this.ghostChar.addOffset(
                    this.char.animationsArray[this.curAnim].anim,
                    this.char.animationsArray[this.curAnim].offsets[0],
                    this.char.animationsArray[this.curAnim].offsets[1]
                  );
                  this.char.playAnim(
                    this.char.animationsArray[this.curAnim].anim,
                    !1
                  );
                  null != this.ghostChar.animation._curAnim &&
                    null != this.char.animation._curAnim &&
                    this.char.animation._curAnim.name ==
                      this.ghostChar.animation._curAnim.name &&
                    this.ghostChar.playAnim(
                      this.char.animation._curAnim.name,
                      !1
                    );
                  this.genBoyOffsets();
                }
            }
          }
          this.ghostChar.setPosition(this.char.x, this.char.y);
          I.prototype.update.call(this, a);
        },
        onSaveComplete: function (a) {
          this._file.removeEventListener(
            "complete",
            n(this, this.onSaveComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onSaveCancel));
          this._file.removeEventListener("ioError", n(this, this.onSaveError));
          this._file = null;
          g.log.advanced("Successfully saved file.", Ja.NOTICE);
        },
        onSaveCancel: function (a) {
          this._file.removeEventListener(
            "complete",
            n(this, this.onSaveComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onSaveCancel));
          this._file.removeEventListener("ioError", n(this, this.onSaveError));
          this._file = null;
        },
        onSaveError: function (a) {
          this._file.removeEventListener(
            "complete",
            n(this, this.onSaveComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onSaveCancel));
          this._file.removeEventListener("ioError", n(this, this.onSaveError));
          this._file = null;
          g.log.advanced("Problem saving file", Ja.ERROR, !0);
        },
        saveCharacter: function () {
          var a = JSON.stringify(
            {
              animations: this.char.animationsArray,
              image: this.char.imageFile,
              scale: this.char.jsonScale,
              sing_duration: this.char.singDuration,
              healthicon: this.char.healthIcon,
              position: this.char.positionArray,
              camera_position: this.char.cameraPosition,
              flip_x: this.char.originalFlipX,
              no_antialiasing: this.char.noAntialiasing,
              healthbar_colors: this.char.healthColorArray,
            },
            null,
            "\t"
          );
          0 < a.length &&
            ((this._file = new oe()),
            this._file.addEventListener(
              "complete",
              n(this, this.onSaveComplete)
            ),
            this._file.addEventListener("cancel", n(this, this.onSaveCancel)),
            this._file.addEventListener("ioError", n(this, this.onSaveError)),
            this._file.save(a, this.daAnim + ".json"));
        },
        ClipboardAdd: function (a) {
          null == a && (a = "");
          K.endsWith(a.toLowerCase(), "v") &&
            (a = a.substring(0, a.length - 1));
          return a + K.replace(mc.get_text(), "\n", "");
        },
        __class__: Si,
      });
      var da = function (a, b) {
        this.wavData = [
          [[0], [0]],
          [[0], [0]],
        ];
        this.waveformPrinted = !0;
        this.colorSine = this.lastSecBeats = this.lastSecBeatsNext = 0;
        this.updatedSection = !1;
        this.sectionToCopy = this.currentType = 0;
        this.check_mute_inst =
          this.check_vortex =
          this.check_warnings =
          this.playSoundBf =
          this.playSoundDad =
            null;
        this.mouseQuant = !1;
        this.text = "";
        this.quantizations = [4, 8, 12, 16, 20, 24, 32, 48, 64, 96, 192];
        this.blockPressWhileScrolling = [];
        this.blockPressWhileTypingOnStepper = [];
        this.blockPressWhileTypingOn = [];
        this.curZoom = 2;
        this.zoomList = [0.25, 0.5, 1, 2, 3, 4, 6, 8, 12, 16, 24];
        this.vocals = null;
        this.playbackSpeed = 1;
        this.tempBpm = 0;
        this.curSelectedNote = null;
        this.daquantspot =
          this.curEventSelected =
          this.curUndoIndex =
          this.curRedoIndex =
            0;
        this.CAM_OFFSET = 360;
        this.amountSteps = 0;
        this.curSong = "Test";
        this.eventStuff = [
          ["", "Nothing. Yep, that's right."],
          [
            "Dadbattle Spotlight",
            "Used in Dad Battle,\nValue 1: 0/1 = ON/OFF,\n2 = Target Dad\n3 = Target BF",
          ],
          [
            "Hey!",
            'Plays the "Hey!" animation from Bopeebo,\nValue 1: BF = Only Boyfriend, GF = Only Girlfriend,\nSomething else = Both.\nValue 2: Custom animation duration,\nleave it blank for 0.6s',
          ],
          [
            "Set GF Speed",
            "Sets GF head bopping speed,\nValue 1: 1 = Normal speed,\n2 = 1/2 speed, 4 = 1/4 speed etc.\nUsed on Fresh during the beatbox parts.\n\nWarning: Value must be integer!",
          ],
          [
            "Philly Glow",
            "Exclusive to Week 3\nValue 1: 0/1/2 = OFF/ON/Reset Gradient\n \nNo, i won't add it to other weeks.",
          ],
          [
            "Kill Henchmen",
            "For Mom's songs, don't use this please, i love them :(",
          ],
          [
            "Add Camera Zoom",
            'Used on MILF on that one "hard" part\nValue 1: Camera zoom add (Default: 0.015)\nValue 2: UI zoom add (Default: 0.03)\nLeave the values blank if you want to use Default.',
          ],
          ["BG Freaks Expression", 'Should be used only in "school" Stage!'],
          ["Trigger BG Ghouls", 'Should be used only in "schoolEvil" Stage!'],
          [
            "Play Animation",
            "Plays an animation on a Character,\nonce the animation is completed,\nthe animation changes to Idle\n\nValue 1: Animation to play.\nValue 2: Character (Dad, BF, GF)",
          ],
          [
            "Camera Follow Pos",
            "Value 1: X\nValue 2: Y\n\nThe camera won't change the follow point\nafter using this, for getting it back\nto normal, leave both values blank.",
          ],
          [
            "Alt Idle Animation",
            "Sets a specified suffix after the idle animation name.\nYou can use this to trigger 'idle-alt' if you set\nValue 2 to -alt\n\nValue 1: Character to set (Dad, BF or GF)\nValue 2: New suffix (Leave it blank to disable)",
          ],
          [
            "Screen Shake",
            'Value 1: Camera shake\nValue 2: HUD shake\n\nEvery value works as the following example: "1, 0.05".\nThe first number (1) is the duration.\nThe second number (0.05) is the intensity.',
          ],
          [
            "Change Character",
            "Value 1: Character to change (Dad, BF, GF)\nValue 2: New character's name",
          ],
          [
            "Change Scroll Speed",
            "Value 1: Scroll Speed Multiplier (1 is default)\nValue 2: Time it takes to change fully in seconds.",
          ],
          ["Set Property", "Value 1: Variable name\nValue 2: New value"],
        ];
        this.redos = [];
        this.undos = [];
        this.ignoreWarnings = !1;
        this.noteTypeMap = new Q();
        this.noteTypeIntMap = new kc();
        I.call(this, a, b);
      };
      h["editors.ChartingState"] = da;
      da.__name__ = "editors.ChartingState";
      da.__super__ = I;
      da.prototype = q(I.prototype, {
        create: function () {
          null != C.SONG
            ? (this._song = C.SONG)
            : ((Ta.difficulties = Ta.defaultDifficulties.slice()),
              (this._song = {
                song: "Test",
                notes: [],
                events: [],
                bpm: 150,
                needsVoices: !0,
                arrowSkin: "",
                splashSkin: "noteSplashes",
                player1: "bf",
                player2: "dad",
                gfVersion: "gf",
                speed: 1,
                stage: "stage",
                validScore: !1,
              }),
              this.addSection(),
              (C.SONG = this._song));
          da.vortex = g.save.data.chart_vortex;
          this.ignoreWarnings = g.save.data.ignoreWarnings;
          var a = new F(),
            b = G.returnGraphic("menuDesat", null);
          a = a.loadGraphic(b);
          b = a.scrollFactor;
          b.set_x(0);
          b.set_y(0);
          a.set_color(-14540254);
          this.add(a);
          this.gridLayer = new ma();
          this.add(this.gridLayer);
          this.waveformSprite = new F(da.GRID_SIZE, 0).makeGraphic(
            g.width,
            g.height,
            16777215
          );
          this.add(this.waveformSprite);
          a = new F(-da.GRID_SIZE - 5, -90);
          b = G.returnGraphic("eventArrow", null);
          a = a.loadGraphic(b);
          this.leftIcon = new sf("bf");
          this.rightIcon = new sf("dad");
          b = a.scrollFactor;
          var c = 1,
            d = 1;
          null == d && (d = 0);
          null == c && (c = 0);
          b.set_x(c);
          b.set_y(d);
          b = this.leftIcon.scrollFactor;
          d = c = 1;
          null == d && (d = 0);
          null == c && (c = 0);
          b.set_x(c);
          b.set_y(d);
          b = this.rightIcon.scrollFactor;
          d = c = 1;
          null == d && (d = 0);
          null == c && (c = 0);
          b.set_x(c);
          b.set_y(d);
          a.setGraphicSize(30, 30);
          this.leftIcon.setGraphicSize(0, 45);
          this.rightIcon.setGraphicSize(0, 45);
          this.add(a);
          this.add(this.leftIcon);
          this.add(this.rightIcon);
          this.leftIcon.setPosition(da.GRID_SIZE + 10, -100);
          this.rightIcon.setPosition(5.2 * da.GRID_SIZE, -100);
          this.curRenderedSustains = new ma();
          this.curRenderedNotes = new ma();
          this.curRenderedNoteType = new ma();
          this.nextRenderedSustains = new ma();
          this.nextRenderedNotes = new ma();
          da.curSec >= this._song.notes.length &&
            (da.curSec = this._song.notes.length - 1);
          g.mouse.set_visible(!0);
          this.tempBpm = this._song.bpm;
          this.addSection();
          a = this._song.song;
          c = new ya("[~&\\\\;:<>#]", "");
          b = new ya("[.,'\"%?!]", "");
          a = c.split(K.replace(a, " ", "-")).join("-");
          this.currentSongName = b.split(a).join("").toLowerCase();
          this.loadSong();
          this.reloadGridLayer();
          P.changeBPM(this._song.bpm);
          P.mapBPMChanges(this._song);
          this.bpmTxt = new W(1e3, 50, 0, "", 16);
          b = this.bpmTxt.scrollFactor;
          b.set_x(0);
          b.set_y(0);
          this.add(this.bpmTxt);
          this.strumLine = new F(0, 50).makeGraphic((9 * da.GRID_SIZE) | 0, 4);
          this.add(this.strumLine);
          this.quant = new qf("chart_quant", "chart_quant");
          this.quant.animation.addByPrefix("q", "chart_quant", 0, !1);
          this.quant.animation.play("q", !0, !1, 0);
          this.quant.sprTracker = this.strumLine;
          this.quant.xAdd = -32;
          this.quant.yAdd = 8;
          this.add(this.quant);
          this.strumLineNotes = new ma();
          for (a = 0; 8 > a; )
            (b = a++),
              (b = new Sh(da.GRID_SIZE * (b + 1), this.strumLine.y, b % 4, 0)),
              b.setGraphicSize(da.GRID_SIZE, da.GRID_SIZE),
              b.updateHitbox(),
              b.playAnim("static", !0),
              this.strumLineNotes.add(b),
              (b = b.scrollFactor),
              (d = c = 1),
              null == d && (d = 0),
              null == c && (c = 0),
              b.set_x(c),
              b.set_y(d);
          this.add(this.strumLineNotes);
          this.camPos = new ca(0, 0, 1, 1);
          this.camPos.setPosition(
            this.strumLine.x + this.CAM_OFFSET,
            this.strumLine.y
          );
          this.dummyArrow = new F().makeGraphic(da.GRID_SIZE, da.GRID_SIZE);
          this.add(this.dummyArrow);
          this.UI_box = new be(
            null,
            null,
            [
              { name: "Song", label: "Song" },
              { name: "Section", label: "Section" },
              { name: "Note", label: "Note" },
              { name: "Events", label: "Events" },
              { name: "Charting", label: "Charting" },
            ],
            null,
            !0
          );
          this.UI_box.resize(300, 400);
          this.UI_box.set_x(640 + da.GRID_SIZE / 2);
          this.UI_box.set_y(25);
          b = this.UI_box.scrollFactor;
          b.set_x(0);
          b.set_y(0);
          this.text =
            "W/S or Mouse Wheel - Change Conductor's strum time\n\t\t\nA/D - Go to the previous/next section\n\t\t\nLeft/Right - Change Snap\n\t\t\nUp/Down - Change Conductor's Strum Time with Snapping\n\t\t\nLeft Bracket / Right Bracket - Change Song Playback Rate (SHIFT to go Faster)\n\t\t\nALT + Left Bracket / Right Bracket - Reset Song Playback Rate\n\t\t\nHold Shift to move 4x faster\n\t\t\nHold Control and click on an arrow to select it\n\t\t\nZ/X - Zoom in/out\n\t\t\n\n\t\t\nEsc - Test your chart inside Chart Editor\n\t\t\nEnter - Play your chart\n\t\t\nQ/E - Decrease/Increase Note Sustain Length\n\t\t\nSpace - Stop/Resume song";
          c = this.text.split("\n");
          a = 0;
          for (d = c.length; a < d; ) {
            b = a++;
            var e = new W(
              this.UI_box.x,
              this.UI_box.y + this.UI_box.get_height() + 8,
              0,
              c[b],
              16
            );
            e.set_y(e.y + 12 * b);
            e.setFormat("assets/fonts/vcr.ttf", 14, -1, "left");
            b = e.scrollFactor;
            b.set_x(0);
            b.set_y(0);
            this.add(e);
          }
          this.add(this.UI_box);
          this.addSongUI();
          this.addSectionUI();
          this.addNoteUI();
          this.addEventsUI();
          this.addChartingUI();
          this.updateHeads();
          this.updateWaveform();
          this.add(this.curRenderedSustains);
          this.add(this.curRenderedNotes);
          this.add(this.curRenderedNoteType);
          this.add(this.nextRenderedSustains);
          this.add(this.nextRenderedNotes);
          da.lastSong != this.currentSongName && this.changeSection();
          da.lastSong = this.currentSongName;
          this.zoomTxt = new W(10, 10, 0, "Zoom: 1 / 1", 16);
          b = this.zoomTxt.scrollFactor;
          b.set_x(0);
          b.set_y(0);
          this.add(this.zoomTxt);
          this.updateGrid();
          I.prototype.create.call(this);
        },
        addSongUI: function () {
          var a = this;
          this.UI_songTitle = new qb(10, 10, 70, this._song.song, 8);
          this.blockPressWhileTypingOn.push(this.UI_songTitle);
          var b = new tb(10, 25, null, null, "Has voice track", 100);
          b.set_checked(this._song.needsVoices);
          b.callback = function () {
            a._song.needsVoices = b.checked;
          };
          var c = new lb(110, 8, "Save", function () {
              a.saveLevel();
            }),
            d = new lb(c.x + 90, c.y, "Reload Audio", function () {
              var b = a.UI_songTitle.text,
                c = new ya("[~&\\\\;:<>#]", ""),
                d = new ya("[.,'\"%?!]", "");
              b = c.split(K.replace(b, " ", "-")).join("-");
              d = d.split(b).join("").toLowerCase();
              a.currentSongName = d;
              a.loadSong();
              a.updateWaveform();
            }),
            e = new lb(d.x, c.y + 30, "Reload JSON", function () {
              a.openSubState(
                new Th(
                  "This action will clear current progress.\n\nProceed?",
                  0,
                  function () {
                    a.loadJson(a._song.song.toLowerCase());
                  },
                  null,
                  a.ignoreWarnings
                )
              );
            }),
            f = new lb(e.x, e.y + 30, "Load Autosave", function () {
              C.SONG = Dd.parseJSONshit(g.save.data.autosave);
              I.resetState();
            }),
            k = new lb(f.x, f.y + 30, "Load Events", function () {
              var b = a._song.song,
                c = new ya("[~&\\\\;:<>#]", ""),
                d = new ya("[.,'\"%?!]", "");
              b = c.split(K.replace(b, " ", "-")).join("-");
              d = d.split(b).join("").toLowerCase();
              b = G.getPath("data/" + (d + "/events.json"), "TEXT", null);
              aa.exists(b) &&
                (a.clearEvents(),
                (d = Dd.loadFromJson("events", d)),
                (a._song.events = d.events),
                a.changeSection(da.curSec));
            }),
            r = new lb(110, e.y, "Save Events", function () {
              a.saveEvents();
            }),
            l = new lb(320, 310, "Clear events", function () {
              a.openSubState(
                new Th(
                  "This action will clear current progress.\n\nProceed?",
                  0,
                  n(a, a.clearEvents),
                  null,
                  a.ignoreWarnings
                )
              );
            });
          l.set_color(-65536);
          l.label.set_color(-1);
          var J = new lb(320, l.y + 30, "Clear notes", function () {
            a.openSubState(
              new Th(
                "This action will clear current progress.\n\nProceed?",
                0,
                function () {
                  for (var b = 0, c = a._song.notes.length; b < c; ) {
                    var d = b++;
                    a._song.notes[d].sectionNotes = [];
                  }
                  a.updateGrid();
                },
                null,
                a.ignoreWarnings
              )
            );
          });
          J.set_color(-65536);
          J.label.set_color(-1);
          var u = new Jb(10, 70, 1, 1, 1, 400, 3);
          u.set_value(P.bpm);
          u.name = "song_bpm";
          this.blockPressWhileTypingOnStepper.push(u);
          var m = new Jb(10, u.y + 35, 0.1, 1, 0.1, 10, 1);
          m.set_value(this._song.speed);
          m.name = "song_speed";
          this.blockPressWhileTypingOnStepper.push(m);
          var h = "characters/";
          null == h && (h = "");
          h = Object.create(null);
          for (
            var p = Ta.coolTextFile(
                G.getPath("data/characterList.txt", "TEXT", null)
              ),
              Hb = 0,
              q = p.length;
            Hb < q;

          ) {
            var z = Hb++;
            h[p[z]] = !0;
          }
          var t = new gc(10, m.y + 45, gc.makeStrIdLabelArray(p, !0), function (
            b
          ) {
            a._song.player1 = p[M.parseInt(b)];
            a.updateHeads();
          });
          t.set_selectedLabel(this._song.player1);
          this.blockPressWhileScrolling.push(t);
          var w = new gc(
            t.x,
            t.y + 40,
            gc.makeStrIdLabelArray(p, !0),
            function (b) {
              a._song.gfVersion = p[M.parseInt(b)];
              a.updateHeads();
            }
          );
          w.set_selectedLabel(this._song.gfVersion);
          this.blockPressWhileScrolling.push(w);
          var x = new gc(
            t.x,
            w.y + 40,
            gc.makeStrIdLabelArray(p, !0),
            function (b) {
              a._song.player2 = p[M.parseInt(b)];
              a.updateHeads();
            }
          );
          x.set_selectedLabel(this._song.player2);
          this.blockPressWhileScrolling.push(x);
          h = "stages/";
          null == h && (h = "");
          h = Object.create(null);
          var y = Ta.coolTextFile(
              G.getPath("data/stageList.txt", "TEXT", null)
            ),
            D = [];
          Hb = 0;
          for (q = y.length; Hb < q; )
            (z = Hb++),
              (z = y[z]),
              Object.prototype.hasOwnProperty.call(h, z) || D.push(z),
              (h[z] = !0);
          1 > D.length && D.push("stage");
          this.stageDropDown = new gc(
            t.x + 140,
            t.y,
            gc.makeStrIdLabelArray(D, !0),
            function (b) {
              a._song.stage = D[M.parseInt(b)];
            }
          );
          this.stageDropDown.set_selectedLabel(this._song.stage);
          this.blockPressWhileScrolling.push(this.stageDropDown);
          h = C.SONG.arrowSkin;
          null == h && (h = "");
          this.noteSkinInputText = new qb(x.x, x.y + 50, 150, h, 8);
          this.blockPressWhileTypingOn.push(this.noteSkinInputText);
          this.noteSplashesInputText = new qb(
            this.noteSkinInputText.x,
            this.noteSkinInputText.y + 35,
            150,
            this._song.splashSkin,
            8
          );
          this.blockPressWhileTypingOn.push(this.noteSplashesInputText);
          h = new lb(
            this.noteSplashesInputText.x + 5,
            this.noteSplashesInputText.y + 20,
            "Change Notes",
            function () {
              a._song.arrowSkin = a.noteSkinInputText.text;
              a.updateGrid();
            }
          );
          Hb = new Ea(null, this.UI_box);
          Hb.name = "Song";
          Hb.add(this.UI_songTitle);
          Hb.add(b);
          Hb.add(l);
          Hb.add(J);
          Hb.add(c);
          Hb.add(r);
          Hb.add(d);
          Hb.add(e);
          Hb.add(f);
          Hb.add(k);
          Hb.add(u);
          Hb.add(m);
          Hb.add(h);
          Hb.add(this.noteSkinInputText);
          Hb.add(this.noteSplashesInputText);
          Hb.add(new W(u.x, u.y - 15, 0, "Song BPM:"));
          Hb.add(new W(u.x + 100, u.y - 15, 0, "Song Offset:"));
          Hb.add(new W(m.x, m.y - 15, 0, "Song Speed:"));
          Hb.add(new W(x.x, x.y - 15, 0, "Opponent:"));
          Hb.add(new W(w.x, w.y - 15, 0, "Girlfriend:"));
          Hb.add(new W(t.x, t.y - 15, 0, "Boyfriend:"));
          Hb.add(
            new W(this.stageDropDown.x, this.stageDropDown.y - 15, 0, "Stage:")
          );
          Hb.add(
            new W(
              this.noteSkinInputText.x,
              this.noteSkinInputText.y - 15,
              0,
              "Note Texture:"
            )
          );
          Hb.add(
            new W(
              this.noteSplashesInputText.x,
              this.noteSplashesInputText.y - 15,
              0,
              "Note Splashes Texture:"
            )
          );
          Hb.add(x);
          Hb.add(w);
          Hb.add(t);
          Hb.add(this.stageDropDown);
          this.UI_box.addGroup(Hb);
          g.camera.follow(this.camPos);
        },
        addSectionUI: function () {
          var a = this,
            b = new Ea(null, this.UI_box);
          b.name = "Section";
          this.check_mustHitSection = new tb(
            10,
            15,
            null,
            null,
            "Must hit section",
            100
          );
          this.check_mustHitSection.name = "check_mustHit";
          this.check_mustHitSection.set_checked(
            this._song.notes[da.curSec].mustHitSection
          );
          this.check_gfSection = new tb(
            10,
            this.check_mustHitSection.y + 22,
            null,
            null,
            "GF section",
            100
          );
          this.check_gfSection.name = "check_gf";
          this.check_gfSection.set_checked(
            this._song.notes[da.curSec].gfSection
          );
          this.check_altAnim = new tb(
            this.check_gfSection.x + 120,
            this.check_gfSection.y,
            null,
            null,
            "Alt Animation",
            100
          );
          this.check_altAnim.set_checked(this._song.notes[da.curSec].altAnim);
          this.stepperBeats = new Jb(10, 100, 1, 4, 1, 6, 2);
          this.stepperBeats.set_value(this.getSectionBeats());
          this.stepperBeats.name = "section_beats";
          this.blockPressWhileTypingOnStepper.push(this.stepperBeats);
          this.check_altAnim.name = "check_altAnim";
          this.check_changeBPM = new tb(
            10,
            this.stepperBeats.y + 30,
            null,
            null,
            "Change BPM",
            100
          );
          this.check_changeBPM.set_checked(
            this._song.notes[da.curSec].changeBPM
          );
          this.check_changeBPM.name = "check_changeBPM";
          this.stepperSectionBPM = new Jb(
            10,
            this.check_changeBPM.y + 20,
            1,
            P.bpm,
            0,
            999,
            1
          );
          this.check_changeBPM.checked
            ? this.stepperSectionBPM.set_value(this._song.notes[da.curSec].bpm)
            : this.stepperSectionBPM.set_value(P.bpm);
          this.stepperSectionBPM.name = "section_bpm";
          this.blockPressWhileTypingOnStepper.push(this.stepperSectionBPM);
          var c = null,
            d = null,
            e = new lb(10, 190, "Copy Section", function () {
              a.notesCopied = [];
              a.sectionToCopy = da.curSec;
              for (
                var b = 0, c = a._song.notes[da.curSec].sectionNotes.length;
                b < c;

              ) {
                var d = b++;
                a.notesCopied.push(a._song.notes[da.curSec].sectionNotes[d]);
              }
              var e = a.sectionStartTime(),
                f = a.sectionStartTime(1);
              b = 0;
              for (c = a._song.events; b < c.length; ) {
                var k = c[b];
                ++b;
                var r = k[0];
                if (f > k[0] && k[0] >= e) {
                  for (var l = [], m = 0, g = k[1].length; m < g; )
                    (d = m++), (d = k[1][d]), l.push([d[0], d[1], d[2]]);
                  a.notesCopied.push([r, -1, l]);
                }
              }
            }),
            f = new lb(e.x + 100, e.y, "Paste Section", function () {
              if (!(null == a.notesCopied || 1 > a.notesCopied.length)) {
                for (
                  var b =
                      4 *
                      P.stepCrochet *
                      a.getSectionBeats() *
                      (da.curSec - a.sectionToCopy),
                    e = 0,
                    f = a.notesCopied;
                  e < f.length;

                ) {
                  var k = f[e];
                  ++e;
                  var r = k[0] + b;
                  if (0 > k[1]) {
                    if (c.checked) {
                      for (var l = [], m = 0, g = k[2].length; m < g; ) {
                        var J = m++;
                        J = k[2][J];
                        l.push([J[0], J[1], J[2]]);
                      }
                      a._song.events.push([r, l]);
                    }
                  } else
                    d.checked &&
                      ((k =
                        null != k[4]
                          ? [r, k[1], k[2], k[3], k[4]]
                          : [r, k[1], k[2], k[3]]),
                      a._song.notes[da.curSec].sectionNotes.push(k));
                }
                a.updateGrid();
              }
            }),
            k = new lb(f.x + 100, f.y, "Clear", function () {
              d.checked && (a._song.notes[da.curSec].sectionNotes = []);
              if (c.checked)
                for (
                  var b = a._song.events.length - 1,
                    e = a.sectionStartTime(),
                    f = a.sectionStartTime(1);
                  -1 < b;

                ) {
                  var k = a._song.events[b];
                  null != k &&
                    f > k[0] &&
                    k[0] >= e &&
                    X.remove(a._song.events, k);
                  --b;
                }
              a.updateGrid();
              a.updateNoteUI();
            });
          k.set_color(-65536);
          k.label.set_color(-1);
          d = new tb(10, k.y + 25, null, null, "Notes", 100);
          d.set_checked(!0);
          c = new tb(d.x + 100, d.y, null, null, "Events", 100);
          c.set_checked(!0);
          var r = new lb(10, d.y + 40, "Swap section", function () {
              for (
                var b = 0, c = a._song.notes[da.curSec].sectionNotes.length;
                b < c;

              ) {
                var d = b++,
                  e = a._song.notes[da.curSec].sectionNotes[d];
                e[1] = (e[1] + 4) % 8;
                a._song.notes[da.curSec].sectionNotes[d] = e;
              }
              a.updateGrid();
            }),
            l = null,
            g = new lb(10, r.y + 30, "Copy last section", function () {
              var b = l.value | 0;
              if (0 != b) {
                var c = da.curSec;
                c = c > b ? c : b;
                for (
                  var d = 0, e = a._song.notes[c - b].sectionNotes;
                  d < e.length;

                ) {
                  var f = e[d];
                  ++d;
                  f = [
                    f[0] + 4 * P.stepCrochet * a.getSectionBeats(c) * b,
                    f[1],
                    f[2],
                    f[3],
                  ];
                  a._song.notes[c].sectionNotes.push(f);
                }
                f = a.sectionStartTime(-b);
                var k = a.sectionStartTime(-b + 1);
                d = 0;
                for (e = a._song.events; d < e.length; ) {
                  var r = e[d];
                  ++d;
                  var m = r[0];
                  if (k > r[0] && r[0] >= f) {
                    m += 4 * P.stepCrochet * a.getSectionBeats(c) * b;
                    for (var g = [], J = 0, u = r[1].length; J < u; ) {
                      var h = J++;
                      h = r[1][h];
                      g.push([h[0], h[1], h[2]]);
                    }
                    a._song.events.push([m, g]);
                  }
                }
                a.updateGrid();
              }
            });
          g.setGraphicSize(80, 30);
          g.updateHitbox();
          l = new Jb(g.x + 100, g.y, 1, 1, -999, 999, 0);
          this.blockPressWhileTypingOnStepper.push(l);
          var u = new lb(10, g.y + 45, "Duet Notes", function () {
              for (
                var b = [], c = 0, d = a._song.notes[da.curSec].sectionNotes;
                c < d.length;

              ) {
                var e = d[c];
                ++c;
                var f = e[1];
                f = 3 < f ? f - 4 : f + 4;
                b.push([e[0], f, e[2], e[3]]);
              }
              for (c = 0; c < b.length; )
                (d = b[c]), ++c, a._song.notes[da.curSec].sectionNotes.push(d);
              a.updateGrid();
            }),
            m = new lb(u.x + 100, u.y, "Mirror Notes", function () {
              for (
                var b = [], c = 0, d = a._song.notes[da.curSec].sectionNotes;
                c < d.length;

              ) {
                var e = d[c];
                ++c;
                var f = e[1] % 4;
                f = 3 - f;
                3 < e[1] && (f += 4);
                e[1] = f;
              }
              for (c = 0; c < b.length; ) ++c;
              a.updateGrid();
            });
          b.add(
            new W(
              this.stepperBeats.x,
              this.stepperBeats.y - 15,
              0,
              "Beats per Section:"
            )
          );
          b.add(this.stepperBeats);
          b.add(this.stepperSectionBPM);
          b.add(this.check_mustHitSection);
          b.add(this.check_gfSection);
          b.add(this.check_altAnim);
          b.add(this.check_changeBPM);
          b.add(e);
          b.add(f);
          b.add(k);
          b.add(d);
          b.add(c);
          b.add(r);
          b.add(l);
          b.add(g);
          b.add(u);
          b.add(m);
          this.UI_box.addGroup(b);
        },
        addNoteUI: function () {
          var a = this,
            b = new Ea(null, this.UI_box);
          b.name = "Note";
          this.stepperSusLength = new Jb(
            10,
            25,
            P.stepCrochet / 2,
            0,
            0,
            64 * P.stepCrochet
          );
          this.stepperSusLength.set_value(0);
          this.stepperSusLength.name = "note_susLength";
          this.blockPressWhileTypingOnStepper.push(this.stepperSusLength);
          this.strumTimeInputText = new qb(10, 65, 180, "0");
          b.add(this.strumTimeInputText);
          this.blockPressWhileTypingOn.push(this.strumTimeInputText);
          for (var c = 0, d = []; c < da.noteTypeList.length; )
            d.push(da.noteTypeList[c]),
              (this.noteTypeMap.h[da.noteTypeList[c]] = c),
              (this.noteTypeIntMap.h[c] = da.noteTypeList[c]),
              ++c;
          c = 1;
          for (var e = d.length; c < e; ) {
            var f = c++;
            d[f] = f + ". " + d[f];
          }
          this.noteTypeDropDown = new gc(
            10,
            105,
            gc.makeStrIdLabelArray(d, !0),
            function (b) {
              a.currentType = M.parseInt(b);
              null != a.curSelectedNote &&
                -1 < a.curSelectedNote[1] &&
                ((a.curSelectedNote[3] = a.noteTypeIntMap.h[a.currentType]),
                a.updateGrid());
            }
          );
          this.blockPressWhileScrolling.push(this.noteTypeDropDown);
          b.add(new W(10, 10, 0, "Sustain length:"));
          b.add(new W(10, 50, 0, "Strum time (in miliseconds):"));
          b.add(new W(10, 90, 0, "Note type:"));
          b.add(this.stepperSusLength);
          b.add(this.strumTimeInputText);
          b.add(this.noteTypeDropDown);
          this.UI_box.addGroup(b);
        },
        addEventsUI: function () {
          var a = this,
            b = new Ea(null, this.UI_box);
          b.name = "Events";
          this.descText = new W(20, 200, 0, this.eventStuff[0][0]);
          for (var c = [], d = 0, e = this.eventStuff.length; d < e; ) {
            var f = d++;
            c.push(this.eventStuff[f][0]);
          }
          d = new W(20, 30, 0, "Event:");
          b.add(d);
          this.eventDropDown = new gc(
            20,
            50,
            gc.makeStrIdLabelArray(c, !0),
            function (b) {
              b = M.parseInt(b);
              a.descText.set_text(a.eventStuff[b][1]);
              null != a.curSelectedNote &&
                null != a.eventStuff &&
                (null != a.curSelectedNote &&
                  null == a.curSelectedNote[2] &&
                  (a.curSelectedNote[1][a.curEventSelected][0] =
                    a.eventStuff[b][0]),
                a.updateGrid());
            }
          );
          this.blockPressWhileScrolling.push(this.eventDropDown);
          d = new W(20, 90, 0, "Value 1:");
          b.add(d);
          this.value1InputText = new qb(20, 110, 100, "");
          this.blockPressWhileTypingOn.push(this.value1InputText);
          d = new W(20, 130, 0, "Value 2:");
          b.add(d);
          this.value2InputText = new qb(20, 150, 100, "");
          this.blockPressWhileTypingOn.push(this.value2InputText);
          d = new lb(
            this.eventDropDown.x + this.eventDropDown.get_width() + 10,
            this.eventDropDown.y,
            "-",
            function () {
              if (null != a.curSelectedNote && null == a.curSelectedNote[2]) {
                2 > a.curSelectedNote[1].length
                  ? (X.remove(a._song.events, a.curSelectedNote),
                    (a.curSelectedNote = null))
                  : a.curSelectedNote[1].remove(
                      a.curSelectedNote[1][a.curEventSelected]
                    );
                --a.curEventSelected;
                if (0 > a.curEventSelected) a.curEventSelected = 0;
                else {
                  if (null != a.curSelectedNote) {
                    var b = a.curSelectedNote[1];
                    var c = a.curEventSelected >= b.length;
                  } else c = !1;
                  c && (a.curEventSelected = b.length - 1);
                }
                a.changeEventSelected();
                a.updateGrid();
              }
            }
          );
          d.setGraphicSize(d.get_height() | 0, d.get_height() | 0);
          d.updateHitbox();
          d.set_color(-65536);
          d.label.set_color(-1);
          d.label.set_size(12);
          this.setAllLabelsOffset(d, -30, 0);
          b.add(d);
          c = new lb(d.x + d.get_width() + 10, d.y, "+", function () {
            null != a.curSelectedNote &&
              null == a.curSelectedNote[2] &&
              (a.curSelectedNote[1].push(["", "", ""]),
              a.changeEventSelected(1),
              a.updateGrid());
          });
          c.setGraphicSize(d.get_width() | 0, d.get_height() | 0);
          c.updateHitbox();
          c.set_color(-16744448);
          c.label.set_color(-1);
          c.label.set_size(12);
          this.setAllLabelsOffset(c, -30, 0);
          b.add(c);
          d = new lb(c.x + c.get_width() + 20, c.y, "<", function () {
            a.changeEventSelected(-1);
          });
          d.setGraphicSize(c.get_width() | 0, c.get_height() | 0);
          d.updateHitbox();
          d.label.set_size(12);
          this.setAllLabelsOffset(d, -30, 0);
          b.add(d);
          e = new lb(d.x + d.get_width() + 10, d.y, ">", function () {
            a.changeEventSelected(1);
          });
          e.setGraphicSize(d.get_width() | 0, d.get_height() | 0);
          e.updateHitbox();
          e.label.set_size(12);
          this.setAllLabelsOffset(e, -30, 0);
          b.add(e);
          this.selectedEventText = new W(
            c.x - 100,
            c.y + c.get_height() + 6,
            e.x - c.x + 186,
            "Selected Event: None"
          );
          this.selectedEventText.set_alignment("center");
          b.add(this.selectedEventText);
          b.add(this.descText);
          b.add(this.value1InputText);
          b.add(this.value2InputText);
          b.add(this.eventDropDown);
          this.UI_box.addGroup(b);
        },
        changeEventSelected: function (a) {
          null == a && (a = 0);
          null != this.curSelectedNote && null == this.curSelectedNote[2]
            ? ((this.curEventSelected += a),
              0 > this.curEventSelected
                ? (this.curEventSelected =
                    (this.curSelectedNote[1].length | 0) - 1)
                : this.curEventSelected >= this.curSelectedNote[1].length &&
                  (this.curEventSelected = 0),
              this.selectedEventText.set_text(
                "Selected Event: " +
                  (this.curEventSelected + 1) +
                  " / " +
                  M.string(this.curSelectedNote[1].length)
              ))
            : ((this.curEventSelected = 0),
              this.selectedEventText.set_text("Selected Event: None"));
          this.updateNoteUI();
        },
        setAllLabelsOffset: function (a, b, c) {
          var d = 0;
          for (a = a.labelOffsets; d < a.length; ) {
            var e = a[d];
            ++d;
            var f = b,
              k = c;
            null == k && (k = 0);
            null == f && (f = 0);
            e.set_x(f);
            e.set_y(k);
          }
        },
        addChartingUI: function () {
          var a = this,
            b = new Ea(null, this.UI_box);
          b.name = "Charting";
          this.check_mute_inst = new tb(
            10,
            310,
            null,
            null,
            "Mute Instrumental (in editor)",
            100
          );
          this.check_mute_inst.set_checked(!1);
          this.check_mute_inst.callback = function () {
            var b = 1;
            a.check_mute_inst.checked && (b = 0);
            g.sound.music.set_volume(b);
          };
          this.mouseScrollingQuant = new tb(
            10,
            200,
            null,
            null,
            "Mouse Scrolling Quantization",
            100
          );
          null == g.save.data.mouseScrollingQuant &&
            (g.save.data.mouseScrollingQuant = !1);
          this.mouseScrollingQuant.set_checked(g.save.data.mouseScrollingQuant);
          this.mouseScrollingQuant.callback = function () {
            g.save.data.mouseScrollingQuant = a.mouseScrollingQuant.checked;
            a.mouseQuant = g.save.data.mouseScrollingQuant;
          };
          this.check_vortex = new tb(
            10,
            160,
            null,
            null,
            "Vortex Editor (BETA)",
            100
          );
          null == g.save.data.chart_vortex && (g.save.data.chart_vortex = !1);
          this.check_vortex.set_checked(g.save.data.chart_vortex);
          this.check_vortex.callback = function () {
            g.save.data.chart_vortex = a.check_vortex.checked;
            da.vortex = g.save.data.chart_vortex;
            a.reloadGridLayer();
          };
          this.check_warnings = new tb(
            10,
            120,
            null,
            null,
            "Ignore Progress Warnings",
            100
          );
          null == g.save.data.ignoreWarnings &&
            (g.save.data.ignoreWarnings = !1);
          this.check_warnings.set_checked(g.save.data.ignoreWarnings);
          this.check_warnings.callback = function () {
            g.save.data.ignoreWarnings = a.check_warnings.checked;
            a.ignoreWarnings = g.save.data.ignoreWarnings;
          };
          var c = new tb(
            this.check_mute_inst.x + 120,
            this.check_mute_inst.y,
            null,
            null,
            "Mute Vocals (in editor)",
            100
          );
          c.set_checked(!1);
          c.callback = function () {
            if (null != a.vocals) {
              var b = 1;
              c.checked && (b = 0);
              a.vocals.set_volume(b);
            }
          };
          this.playSoundBf = new tb(
            this.check_mute_inst.x,
            c.y + 30,
            null,
            null,
            "Play Sound (Boyfriend notes)",
            100,
            null,
            function () {
              g.save.data.chart_playSoundBf = a.playSoundBf.checked;
            }
          );
          null == g.save.data.chart_playSoundBf &&
            (g.save.data.chart_playSoundBf = !1);
          this.playSoundBf.set_checked(g.save.data.chart_playSoundBf);
          this.playSoundDad = new tb(
            this.check_mute_inst.x + 120,
            this.playSoundBf.y,
            null,
            null,
            "Play Sound (Opponent notes)",
            100,
            null,
            function () {
              g.save.data.chart_playSoundDad = a.playSoundDad.checked;
            }
          );
          null == g.save.data.chart_playSoundDad &&
            (g.save.data.chart_playSoundDad = !1);
          this.playSoundDad.set_checked(g.save.data.chart_playSoundDad);
          this.metronome = new tb(
            10,
            15,
            null,
            null,
            "Metronome Enabled",
            100,
            null,
            function () {
              g.save.data.chart_metronome = a.metronome.checked;
            }
          );
          null == g.save.data.chart_metronome &&
            (g.save.data.chart_metronome = !1);
          this.metronome.set_checked(g.save.data.chart_metronome);
          this.metronomeStepper = new Jb(15, 55, 5, this._song.bpm, 1, 1500, 1);
          this.metronomeOffsetStepper = new Jb(
            this.metronomeStepper.x + 100,
            this.metronomeStepper.y,
            25,
            0,
            0,
            1e3,
            1
          );
          this.blockPressWhileTypingOnStepper.push(this.metronomeStepper);
          this.blockPressWhileTypingOnStepper.push(this.metronomeOffsetStepper);
          this.disableAutoScrolling = new tb(
            this.metronome.x + 120,
            this.metronome.y,
            null,
            null,
            "Disable Autoscroll (Not Recommended)",
            120,
            null,
            function () {
              g.save.data.chart_noAutoScroll = a.disableAutoScrolling.checked;
            }
          );
          null == g.save.data.chart_noAutoScroll &&
            (g.save.data.chart_noAutoScroll = !1);
          this.disableAutoScrolling.set_checked(g.save.data.chart_noAutoScroll);
          this.instVolume = new Jb(
            this.metronomeStepper.x,
            270,
            0.1,
            1,
            0,
            1,
            1
          );
          this.instVolume.set_value(g.sound.music._volume);
          this.instVolume.name = "inst_volume";
          this.blockPressWhileTypingOnStepper.push(this.instVolume);
          this.voicesVolume = new Jb(
            this.instVolume.x + 100,
            this.instVolume.y,
            0.1,
            1,
            0,
            1,
            1
          );
          this.voicesVolume.set_value(this.vocals._volume);
          this.voicesVolume.name = "voices_volume";
          this.blockPressWhileTypingOnStepper.push(this.voicesVolume);
          b.add(
            new W(
              this.metronomeStepper.x,
              this.metronomeStepper.y - 15,
              0,
              "BPM:"
            )
          );
          b.add(
            new W(
              this.metronomeOffsetStepper.x,
              this.metronomeOffsetStepper.y - 15,
              0,
              "Offset (ms):"
            )
          );
          b.add(
            new W(this.instVolume.x, this.instVolume.y - 15, 0, "Inst Volume")
          );
          b.add(
            new W(
              this.voicesVolume.x,
              this.voicesVolume.y - 15,
              0,
              "Voices Volume"
            )
          );
          b.add(this.metronome);
          b.add(this.disableAutoScrolling);
          b.add(this.metronomeStepper);
          b.add(this.metronomeOffsetStepper);
          b.add(this.instVolume);
          b.add(this.voicesVolume);
          b.add(this.check_mute_inst);
          b.add(c);
          b.add(this.check_vortex);
          b.add(this.mouseScrollingQuant);
          b.add(this.check_warnings);
          b.add(this.playSoundBf);
          b.add(this.playSoundDad);
          this.UI_box.addGroup(b);
        },
        loadSong: function () {
          if (null != g.sound.music) {
            var a = g.sound.music;
            a.cleanup(a.autoDestroy, !0);
          }
          a =
            "songs:assets/songs/" +
            K.replace(this.currentSongName.toLowerCase(), " ", "-") +
            "/Voices.mp3";
          this.vocals = new Ce();
          if (a instanceof De || aa.exists(a))
            this.vocals.loadEmbedded(a), g.sound.list.add(this.vocals);
          this.generateSong();
          g.sound.music.pause();
          P.songPosition = this.sectionStartTime();
          g.sound.music.set_time(P.songPosition);
        },
        generateSong: function () {
          var a = this;
          g.sound.playMusic(
            "songs:assets/songs/" +
              K.replace(this.currentSongName.toLowerCase(), " ", "-") +
              "/Inst.mp3",
            0.6
          );
          null != this.instVolume &&
            g.sound.music.set_volume(this.instVolume.value);
          null != this.check_mute_inst &&
            this.check_mute_inst.checked &&
            g.sound.music.set_volume(0);
          g.sound.music.onComplete = function () {
            g.sound.music.pause();
            P.songPosition = 0;
            null != a.vocals && (a.vocals.pause(), a.vocals.set_time(0));
            a.changeSection();
            da.curSec = 0;
            a.updateGrid();
            a.updateSectionUI();
            a.vocals.play();
          };
        },
        generateUI: function () {
          for (; 0 < this.bullshitUI.members.length; )
            this.bullshitUI.remove(this.bullshitUI.members[0], !0);
          var a = new W(this.UI_box.x + 20, this.UI_box.y + 20, 0);
          this.bullshitUI.add(a);
        },
        getEvent: function (a, b, c, d) {
          if ("click_check_box" == a)
            switch (b.getLabel().text) {
              case "Alt Animation":
                this._song.notes[da.curSec].altAnim = b.checked;
                break;
              case "Change BPM":
                this._song.notes[da.curSec].changeBPM = b.checked;
                g.log.advanced("changed bpm shit", Ja.NORMAL);
                break;
              case "GF section":
                this._song.notes[da.curSec].gfSection = b.checked;
                this.updateGrid();
                this.updateHeads();
                break;
              case "Must hit section":
                (this._song.notes[da.curSec].mustHitSection = b.checked),
                  this.updateGrid(),
                  this.updateHeads();
            }
          else
            "change_numeric_stepper" == a && b instanceof Jb
              ? ((a = b.name),
                g.log.advanced(a, Ja.NORMAL),
                "section_beats" == a
                  ? ((this._song.notes[da.curSec].sectionBeats = b.value),
                    this.reloadGridLayer())
                  : "song_speed" == a
                  ? (this._song.speed = b.value)
                  : "song_bpm" == a
                  ? ((this.tempBpm = b.value),
                    P.mapBPMChanges(this._song),
                    P.changeBPM(b.value))
                  : "note_susLength" == a
                  ? null != this.curSelectedNote &&
                    null != this.curSelectedNote[2] &&
                    ((this.curSelectedNote[2] = b.value), this.updateGrid())
                  : "section_bpm" == a
                  ? ((this._song.notes[da.curSec].bpm = b.value),
                    this.updateGrid())
                  : "inst_volume" == a
                  ? g.sound.music.set_volume(b.value)
                  : "voices_volume" == a && this.vocals.set_volume(b.value))
              : "change_input_text" == a && b instanceof qb
              ? b == this.noteSplashesInputText
                ? (this._song.splashSkin = this.noteSplashesInputText.text)
                : null != this.curSelectedNote &&
                  (b == this.value1InputText
                    ? null != this.curSelectedNote[1][this.curEventSelected] &&
                      ((this.curSelectedNote[1][this.curEventSelected][1] =
                        this.value1InputText.text),
                      this.updateGrid())
                    : b == this.value2InputText
                    ? null != this.curSelectedNote[1][this.curEventSelected] &&
                      ((this.curSelectedNote[1][this.curEventSelected][2] =
                        this.value2InputText.text),
                      this.updateGrid())
                    : b == this.strumTimeInputText &&
                      ((b = parseFloat(this.strumTimeInputText.text)),
                      isNaN(b) && (b = 0),
                      (this.curSelectedNote[0] = b),
                      this.updateGrid()))
              : "change_slider" == a &&
                b instanceof Ui &&
                "playbackSpeed" == b &&
                (this.playbackSpeed = this.sliderRate.value | 0);
        },
        sectionStartTime: function (a) {
          null == a && (a = 0);
          var b = this._song.bpm,
            c = 0,
            d = 0;
          for (a = da.curSec + a; d < a; ) {
            var e = d++;
            null != this._song.notes[e] &&
              (this._song.notes[e].changeBPM && (b = this._song.notes[e].bpm),
              (c += this.getSectionBeats(e) * (6e4 / b)));
          }
          return c;
        },
        update: function (a) {
          var b = this;
          this.curStep = this.recalculateSteps();
          0 > g.sound.music._time
            ? (g.sound.music.pause(), g.sound.music.set_time(0))
            : g.sound.music._time > g.sound.music._length &&
              (g.sound.music.pause(),
              g.sound.music.set_time(0),
              this.changeSection());
          P.songPosition = g.sound.music._time;
          this._song.song = this.UI_songTitle.text;
          this.strumLineUpdateY();
          this.strumLineNotes.members[0].set_y(this.strumLine.y);
          this.strumLineNotes.members[1].set_y(this.strumLine.y);
          this.strumLineNotes.members[2].set_y(this.strumLine.y);
          this.strumLineNotes.members[3].set_y(this.strumLine.y);
          this.strumLineNotes.members[4].set_y(this.strumLine.y);
          this.strumLineNotes.members[5].set_y(this.strumLine.y);
          this.strumLineNotes.members[6].set_y(this.strumLine.y);
          this.strumLineNotes.members[7].set_y(this.strumLine.y);
          g.mouse.set_visible(!0);
          this.camPos.set_y(this.strumLine.y);
          this.disableAutoScrolling.checked ||
            (Math.ceil(this.strumLine.y) >= this.gridBG.get_height()
              ? (null == this._song.notes[da.curSec + 1] && this.addSection(),
                this.changeSection(da.curSec + 1, !1))
              : -10 > this.strumLine.y &&
                this.changeSection(da.curSec - 1, !1));
          if (
            g.mouse.x > this.gridBG.x &&
            g.mouse.x < this.gridBG.x + this.gridBG.get_width() &&
            g.mouse.y > this.gridBG.y &&
            g.mouse.y <
              this.gridBG.y +
                da.GRID_SIZE *
                  this.getSectionBeats() *
                  4 *
                  this.zoomList[this.curZoom]
          ) {
            this.dummyArrow.set_visible(!0);
            this.dummyArrow.set_x(
              Math.floor(g.mouse.x / da.GRID_SIZE) * da.GRID_SIZE
            );
            var c = g.keys.pressed;
            c.keyManager.checkStatusUnsafe(16, c.status)
              ? this.dummyArrow.set_y(g.mouse.y)
              : ((c = da.GRID_SIZE / (da.quantization / 16)),
                this.dummyArrow.set_y(Math.floor(g.mouse.y / c) * c));
          } else this.dummyArrow.set_visible(!1);
          2 == g.mouse._leftButton.current &&
            (g.mouse.overlaps(this.curRenderedNotes)
              ? this.curRenderedNotes.forEachAlive(function (a) {
                  if (g.mouse.overlaps(a)) {
                    var c = g.keys.pressed;
                    c.keyManager.checkStatusUnsafe(17, c.status)
                      ? b.selectNote(a)
                      : ((c = g.keys.pressed),
                        c.keyManager.checkStatusUnsafe(18, c.status)
                          ? (b.selectNote(a),
                            (b.curSelectedNote[3] =
                              b.noteTypeIntMap.h[b.currentType]),
                            b.updateGrid())
                          : b.deleteNote(a));
                  }
                })
              : g.mouse.x > this.gridBG.x &&
                g.mouse.x < this.gridBG.x + this.gridBG.get_width() &&
                g.mouse.y > this.gridBG.y &&
                g.mouse.y <
                  this.gridBG.y +
                    da.GRID_SIZE *
                      this.getSectionBeats() *
                      4 *
                      this.zoomList[this.curZoom] &&
                (g.log.advanced("added note", Ja.NORMAL), this.addNote()));
          var d = !1;
          c = 0;
          for (var e = this.blockPressWhileTypingOn; c < e.length; ) {
            var f = e[c];
            ++c;
            if (f.hasFocus) {
              g.sound.muteKeys = [];
              g.sound.volumeDownKeys = [];
              g.sound.volumeUpKeys = [];
              d = !0;
              break;
            }
          }
          if (!d)
            for (c = 0, e = this.blockPressWhileTypingOnStepper; c < e.length; )
              if (((f = e[c]), ++c, f.text_field.hasFocus)) {
                g.sound.muteKeys = [];
                g.sound.volumeDownKeys = [];
                g.sound.volumeUpKeys = [];
                d = !0;
                break;
              }
          if (!d)
            for (
              g.sound.muteKeys = cb.muteKeys,
                g.sound.volumeDownKeys = cb.volumeDownKeys,
                g.sound.volumeUpKeys = cb.volumeUpKeys,
                c = 0,
                e = this.blockPressWhileScrolling;
              c < e.length;

            )
              if (((f = e[c]), ++c, f.dropPanel.visible)) {
                d = !0;
                break;
              }
          if (d) {
            if (
              ((c = g.keys.justPressed),
              c.keyManager.checkStatusUnsafe(13, c.status))
            )
              for (c = 0, e = this.blockPressWhileTypingOn.length; c < e; )
                (h = c++),
                  this.blockPressWhileTypingOn[h].hasFocus &&
                    this.blockPressWhileTypingOn[h].set_hasFocus(!1);
          } else {
            c = g.keys.justPressed;
            c.keyManager.checkStatusUnsafe(27, c.status) &&
              (this.autosaveSong(),
              I.switchState(
                Lb.getNextState(new Vi(this.sectionStartTime()), !1)
              ));
            c = g.keys.justPressed;
            c.keyManager.checkStatusUnsafe(13, c.status) &&
              (this.autosaveSong(),
              g.mouse.set_visible(!1),
              (C.SONG = this._song),
              (c = g.sound.music),
              c.cleanup(c.autoDestroy, !0),
              null != this.vocals &&
                ((c = this.vocals), c.cleanup(c.autoDestroy, !0)),
              pg.loadDirectory(this._song),
              I.switchState(Lb.getNextState(new C(), !1)));
            null != this.curSelectedNote &&
              -1 < this.curSelectedNote[1] &&
              ((c = g.keys.justPressed),
              c.keyManager.checkStatusUnsafe(69, c.status) &&
                this.changeNoteSustain(P.stepCrochet),
              (c = g.keys.justPressed),
              c.keyManager.checkStatusUnsafe(81, c.status) &&
                this.changeNoteSustain(-P.stepCrochet));
            c = g.keys.justPressed;
            if (c.keyManager.checkStatusUnsafe(8, c.status)) {
              C.chartingMode = !1;
              I.switchState(new Zf());
              c = g.sound;
              d = G.returnSound("music", "freakyMenu", null);
              c.playMusic(d);
              g.mouse.set_visible(!1);
              return;
            }
            c = g.keys.justPressed;
            c.keyManager.checkStatusUnsafe(90, c.status)
              ? ((c = g.keys.pressed),
                (c = c.keyManager.checkStatusUnsafe(17, c.status)))
              : (c = !1);
            c && this.undo();
            c = g.keys.justPressed;
            c.keyManager.checkStatusUnsafe(90, c.status) && 0 < this.curZoom
              ? ((c = g.keys.pressed),
                (c = !c.keyManager.checkStatusUnsafe(17, c.status)))
              : (c = !1);
            c && (--this.curZoom, this.updateZoom());
            c = g.keys.justPressed;
            c.keyManager.checkStatusUnsafe(88, c.status) &&
              this.curZoom < this.zoomList.length - 1 &&
              (this.curZoom++, this.updateZoom());
            c = g.keys.justPressed;
            c.keyManager.checkStatusUnsafe(9, c.status) &&
              ((c = g.keys.pressed),
              c.keyManager.checkStatusUnsafe(16, c.status)
                ? ((c = this.UI_box),
                  c.set_selected_tab(c.get_selected_tab() - 1),
                  0 > this.UI_box.get_selected_tab() &&
                    this.UI_box.set_selected_tab(2))
                : ((c = this.UI_box),
                  c.set_selected_tab(c.get_selected_tab() + 1),
                  3 <= this.UI_box.get_selected_tab() &&
                    this.UI_box.set_selected_tab(0)));
            c = g.keys.justPressed;
            c.keyManager.checkStatusUnsafe(32, c.status) &&
              (null != g.sound.music._channel
                ? (g.sound.music.pause(),
                  null != this.vocals && this.vocals.pause())
                : (null != this.vocals &&
                    (this.vocals.play(),
                    this.vocals.pause(),
                    this.vocals.set_time(g.sound.music._time),
                    this.vocals.play()),
                  g.sound.music.play()));
            c = g.keys.pressed;
            c.keyManager.checkStatusUnsafe(18, c.status)
              ? (c = !1)
              : ((c = g.keys.justPressed),
                (c = c.keyManager.checkStatusUnsafe(82, c.status)));
            c &&
              ((c = g.keys.pressed),
              c.keyManager.checkStatusUnsafe(16, c.status)
                ? this.resetSection(!0)
                : this.resetSection());
            if (0 != g.mouse.wheel) {
              g.sound.music.pause();
              if (this.mouseQuant) {
                e = this.curDecBeat;
                f = da.quantization / 4;
                var k = 1 / f;
                0 < g.mouse.wheel
                  ? ((c = Math.round(e * f)),
                    wb.trace(f, {
                      fileName: "source/CoolUtil.hx",
                      lineNumber: 29,
                      className: "CoolUtil",
                      methodName: "quantize",
                    }),
                    g.sound.music.set_time(P.beatToSeconds(c / f - k)))
                  : ((c = Math.round(e * f)),
                    wb.trace(f, {
                      fileName: "source/CoolUtil.hx",
                      lineNumber: 29,
                      className: "CoolUtil",
                      methodName: "quantize",
                    }),
                    g.sound.music.set_time(P.beatToSeconds(c / f + k)));
              } else
                (c = g.sound.music),
                  c.set_time(c._time - g.mouse.wheel * P.stepCrochet * 0.8);
              null != this.vocals &&
                (this.vocals.pause(),
                this.vocals.set_time(g.sound.music._time));
            }
            c = g.keys.pressed;
            c.keyManager.checkStatusUnsafe(87, c.status)
              ? (c = !0)
              : ((c = g.keys.pressed),
                (c = c.keyManager.checkStatusUnsafe(83, c.status)));
            c &&
              (g.sound.music.pause(),
              (f = 1),
              (c = g.keys.pressed),
              c.keyManager.checkStatusUnsafe(17, c.status)
                ? (f = 0.25)
                : ((c = g.keys.pressed),
                  c.keyManager.checkStatusUnsafe(16, c.status) && (f = 4)),
              (f *= 700 * g.elapsed),
              (c = g.keys.pressed),
              c.keyManager.checkStatusUnsafe(87, c.status)
                ? ((c = g.sound.music), c.set_time(c._time - f))
                : ((c = g.sound.music), c.set_time(c._time + f)),
              null != this.vocals &&
                (this.vocals.pause(),
                this.vocals.set_time(g.sound.music._time)));
            da.vortex ||
              ((c = g.keys.justPressed),
              c.keyManager.checkStatusUnsafe(38, c.status)
                ? (c = !0)
                : ((c = g.keys.justPressed),
                  (c = c.keyManager.checkStatusUnsafe(40, c.status))),
              c &&
                (g.sound.music.pause(),
                this.updateCurStep(),
                (e = this.curDecBeat),
                (f = da.quantization / 4),
                (k = 1 / f),
                (c = g.keys.pressed),
                c.keyManager.checkStatusUnsafe(38, c.status)
                  ? ((c = Math.round(e * f)),
                    wb.trace(f, {
                      fileName: "source/CoolUtil.hx",
                      lineNumber: 29,
                      className: "CoolUtil",
                      methodName: "quantize",
                    }),
                    g.sound.music.set_time(P.beatToSeconds(c / f - k)))
                  : ((c = Math.round(e * f)),
                    wb.trace(f, {
                      fileName: "source/CoolUtil.hx",
                      lineNumber: 29,
                      className: "CoolUtil",
                      methodName: "quantize",
                    }),
                    g.sound.music.set_time(P.beatToSeconds(c / f + k)))));
            f = this.currentType;
            c = g.keys.pressed;
            c.keyManager.checkStatusUnsafe(16, c.status) && (f = 3);
            k = P.songPosition;
            d ||
              ((c = g.keys.justPressed),
              c.keyManager.checkStatusUnsafe(39, c.status) &&
                (da.curQuant++,
                da.curQuant > this.quantizations.length - 1 &&
                  (da.curQuant = 0),
                (da.quantization = this.quantizations[da.curQuant])),
              (c = g.keys.justPressed),
              c.keyManager.checkStatusUnsafe(37, c.status) &&
                (da.curQuant--,
                0 > da.curQuant &&
                  (da.curQuant = this.quantizations.length - 1),
                (da.quantization = this.quantizations[da.curQuant])),
              this.quant.animation.play("q", !0, !1, da.curQuant));
            if (da.vortex && !d) {
              c = g.keys.justPressed;
              e = c.keyManager.checkStatusUnsafe(49, c.status);
              c = g.keys.justPressed;
              var r = c.keyManager.checkStatusUnsafe(50, c.status);
              c = g.keys.justPressed;
              h = c.keyManager.checkStatusUnsafe(51, c.status);
              c = g.keys.justPressed;
              var l = c.keyManager.checkStatusUnsafe(52, c.status);
              c = g.keys.justPressed;
              var J = c.keyManager.checkStatusUnsafe(53, c.status);
              c = g.keys.justPressed;
              var u = c.keyManager.checkStatusUnsafe(54, c.status);
              c = g.keys.justPressed;
              var m = c.keyManager.checkStatusUnsafe(55, c.status);
              c = g.keys.justPressed;
              r = [
                e,
                r,
                h,
                l,
                J,
                u,
                m,
                c.keyManager.checkStatusUnsafe(56, c.status),
              ];
              if (-1 != r.indexOf(!0))
                for (c = 0, e = r.length; c < e; ) {
                  var h = c++;
                  r[h] && this.doANoteThing(k, h, f);
                }
              c = g.keys.justPressed;
              c.keyManager.checkStatusUnsafe(38, c.status)
                ? (c = !0)
                : ((c = g.keys.justPressed),
                  (c = c.keyManager.checkStatusUnsafe(40, c.status)));
              if (
                c &&
                (g.sound.music.pause(),
                this.updateCurStep(),
                (e = this.curDecBeat),
                (f = da.quantization / 4),
                (k = 1 / f),
                (c = g.keys.pressed),
                c.keyManager.checkStatusUnsafe(38, c.status)
                  ? ((c = Math.round(e * f)),
                    wb.trace(f, {
                      fileName: "source/CoolUtil.hx",
                      lineNumber: 29,
                      className: "CoolUtil",
                      methodName: "quantize",
                    }),
                    (c = P.beatToSeconds(c / f - k)))
                  : ((c = Math.round(e * f)),
                    wb.trace(f, {
                      fileName: "source/CoolUtil.hx",
                      lineNumber: 29,
                      className: "CoolUtil",
                      methodName: "quantize",
                    }),
                    (c = P.beatToSeconds(c / f + k))),
                la.tween(g.sound.music, { time: c }, 0.1, { ease: Aa.circOut }),
                null != this.vocals &&
                  (this.vocals.pause(),
                  this.vocals.set_time(g.sound.music._time)),
                (d = 0),
                null != this.curSelectedNote && (d = this.curSelectedNote[0]),
                (f = this.sectionStartTime()),
                (d = c - f - (d - f)),
                null != this.curSelectedNote &&
                  ((c = g.keys.pressed),
                  (e = c.keyManager.checkStatusUnsafe(49, c.status)),
                  (c = g.keys.pressed),
                  (r = c.keyManager.checkStatusUnsafe(50, c.status)),
                  (c = g.keys.pressed),
                  (h = c.keyManager.checkStatusUnsafe(51, c.status)),
                  (c = g.keys.pressed),
                  (l = c.keyManager.checkStatusUnsafe(52, c.status)),
                  (c = g.keys.pressed),
                  (J = c.keyManager.checkStatusUnsafe(53, c.status)),
                  (c = g.keys.pressed),
                  (u = c.keyManager.checkStatusUnsafe(54, c.status)),
                  (c = g.keys.pressed),
                  (m = c.keyManager.checkStatusUnsafe(55, c.status)),
                  (c = g.keys.pressed),
                  (r = [
                    e,
                    r,
                    h,
                    l,
                    J,
                    u,
                    m,
                    c.keyManager.checkStatusUnsafe(56, c.status),
                  ]),
                  -1 != r.indexOf(!0)))
              ) {
                c = 0;
                for (e = r.length; c < e; )
                  (h = c++),
                    r[h] &&
                      this.curSelectedNote[1] == h &&
                      (this.curSelectedNote[2] +=
                        d - this.curSelectedNote[2] - P.stepCrochet);
                this.updateGrid();
                this.updateNoteUI();
              }
            }
            d = 1;
            c = g.keys.pressed;
            c.keyManager.checkStatusUnsafe(16, c.status) && (d = 4);
            c = g.keys.justPressed;
            c.keyManager.checkStatusUnsafe(68, c.status) &&
              this.changeSection(da.curSec + d);
            c = g.keys.justPressed;
            c.keyManager.checkStatusUnsafe(65, c.status) &&
              (0 >= da.curSec
                ? this.changeSection(this._song.notes.length - 1)
                : this.changeSection(da.curSec - d));
          }
          this._song.bpm = this.tempBpm;
          this.strumLineNotes.set_visible(this.quant.set_visible(da.vortex));
          0 > g.sound.music._time
            ? (g.sound.music.pause(), g.sound.music.set_time(0))
            : g.sound.music._time > g.sound.music._length &&
              (g.sound.music.pause(),
              g.sound.music.set_time(0),
              this.changeSection());
          P.songPosition = g.sound.music._time;
          this.strumLineUpdateY();
          this.camPos.set_y(this.strumLine.y);
          this.strumLineNotes.members[0].set_y(this.strumLine.y);
          this.strumLineNotes.members[0].set_alpha(
            null != g.sound.music._channel ? 1 : 0.35
          );
          this.strumLineNotes.members[1].set_y(this.strumLine.y);
          this.strumLineNotes.members[1].set_alpha(
            null != g.sound.music._channel ? 1 : 0.35
          );
          this.strumLineNotes.members[2].set_y(this.strumLine.y);
          this.strumLineNotes.members[2].set_alpha(
            null != g.sound.music._channel ? 1 : 0.35
          );
          this.strumLineNotes.members[3].set_y(this.strumLine.y);
          this.strumLineNotes.members[3].set_alpha(
            null != g.sound.music._channel ? 1 : 0.35
          );
          this.strumLineNotes.members[4].set_y(this.strumLine.y);
          this.strumLineNotes.members[4].set_alpha(
            null != g.sound.music._channel ? 1 : 0.35
          );
          this.strumLineNotes.members[5].set_y(this.strumLine.y);
          this.strumLineNotes.members[5].set_alpha(
            null != g.sound.music._channel ? 1 : 0.35
          );
          this.strumLineNotes.members[6].set_y(this.strumLine.y);
          this.strumLineNotes.members[6].set_alpha(
            null != g.sound.music._channel ? 1 : 0.35
          );
          this.strumLineNotes.members[7].set_y(this.strumLine.y);
          this.strumLineNotes.members[7].set_alpha(
            null != g.sound.music._channel ? 1 : 0.35
          );
          c = g.keys.pressed;
          f = c.keyManager.checkStatusUnsafe(16, c.status);
          c = g.keys.pressed;
          d = c.keyManager.checkStatusUnsafe(219, c.status);
          c = g.keys.pressed;
          k = c.keyManager.checkStatusUnsafe(221, c.status);
          c = g.keys.justPressed;
          e = c.keyManager.checkStatusUnsafe(219, c.status);
          c = g.keys.justPressed;
          r = c.keyManager.checkStatusUnsafe(221, c.status);
          if ((!f && e) || (f && d)) this.playbackSpeed -= 0.01;
          if ((!f && r) || (f && k)) this.playbackSpeed += 0.01;
          c = g.keys.pressed;
          c.keyManager.checkStatusUnsafe(18, c.status) &&
            (e || r || d || k) &&
            (this.playbackSpeed = 1);
          0.5 >= this.playbackSpeed && (this.playbackSpeed = 0.5);
          3 <= this.playbackSpeed && (this.playbackSpeed = 3);
          g.sound.music.set_pitch(this.playbackSpeed);
          this.vocals.set_pitch(this.playbackSpeed);
          this.bpmTxt.set_text(
            M.string(hc.roundDecimal(P.songPosition / 1e3, 2)) +
              " / " +
              M.string(hc.roundDecimal(g.sound.music._length / 1e3, 2)) +
              "\nSection: " +
              da.curSec +
              "\n\nBeat: " +
              M.string(this.curDecBeat).substring(0, 4) +
              "\n\nStep: " +
              this.curStep +
              "\n\nBeat Snap: " +
              da.quantization +
              "th"
          );
          var p = [!1, !1, !1, !1];
          this.curRenderedNotes.forEachAlive(function (c) {
            c.set_alpha(1);
            if (null != b.curSelectedNote) {
              var d = c.noteData;
              -1 < d &&
                c.mustPress != b._song.notes[da.curSec].mustHitSection &&
                (d += 4);
              if (
                b.curSelectedNote[0] == c.strumTime &&
                ((null == b.curSelectedNote[2] && 0 > d) ||
                  (null != b.curSelectedNote[2] && b.curSelectedNote[1] == d))
              ) {
                b.colorSine += a;
                var e = 0.7 + 0.3 * Math.sin(Math.PI * b.colorSine),
                  f = 0.999;
                null == f && (f = 1);
                d = ob._new();
                null == f && (f = 1);
                var k = Math.round(255 * e);
                d = (d & -16711681) | ((255 < k ? 255 : 0 > k ? 0 : k) << 16);
                k = Math.round(255 * e);
                d = (d & -65281) | ((255 < k ? 255 : 0 > k ? 0 : k) << 8);
                k = Math.round(255 * e);
                d = (d & -256) | (255 < k ? 255 : 0 > k ? 0 : k);
                k = Math.round(255 * f);
                c.set_color(
                  (d & 16777215) | ((255 < k ? 255 : 0 > k ? 0 : k) << 24)
                );
              }
            }
            c.strumTime <= P.songPosition &&
              (c.set_alpha(0.4),
              c.strumTime > b.lastConductorPos &&
                null != g.sound.music._channel &&
                -1 < c.noteData &&
                ((e = c.noteData % 4),
                (d = c.noteData),
                -1 < d &&
                  c.mustPress != b._song.notes[da.curSec].mustHitSection &&
                  (d += 4),
                b.strumLineNotes.members[d].playAnim("confirm", !0),
                (b.strumLineNotes.members[d].resetAnim =
                  c.sustainLength / 1e3 + 0.15),
                !p[e] &&
                  ((b.playSoundBf.checked && c.mustPress) ||
                    (b.playSoundDad.checked && !c.mustPress)) &&
                  ((d = "hitsound"),
                  "gf" == b._song.player1 && (d = "GF_" + M.string(e + 1)),
                  (g.sound.play(G.sound(d))._transform.pan =
                    4 > c.noteData ? -0.3 : 0.3),
                  (p[e] = !0))));
          });
          this.metronome.checked &&
            this.lastConductorPos != P.songPosition &&
            ((c = 60 / this.metronomeStepper.value),
            Math.floor(
              (P.songPosition + this.metronomeOffsetStepper.value) / c / 1e3
            ) !=
              Math.floor(
                (this.lastConductorPos + this.metronomeOffsetStepper.value) /
                  c /
                  1e3
              ) && g.sound.play(G.sound("Metronome_Tick")));
          this.lastConductorPos = P.songPosition;
          I.prototype.update.call(this, a);
        },
        updateZoom: function () {
          var a = this.zoomList[this.curZoom],
            b = "1 / " + a;
          1 > a && (b = Math.round(1 / a) + " / 1");
          this.zoomTxt.set_text("Zoom: " + b);
          this.reloadGridLayer();
        },
        reloadGridLayer: function () {
          this.gridLayer.clear();
          this.gridBG = Wi.create(
            da.GRID_SIZE,
            da.GRID_SIZE,
            9 * da.GRID_SIZE,
            (da.GRID_SIZE *
              this.getSectionBeats() *
              4 *
              this.zoomList[this.curZoom]) |
              0
          );
          var a = this.gridBG.get_height() | 0,
            b = !1;
          this.sectionStartTime(1) <= g.sound.music._length
            ? ((this.nextGridBG = Wi.create(
                da.GRID_SIZE,
                da.GRID_SIZE,
                9 * da.GRID_SIZE,
                (da.GRID_SIZE *
                  this.getSectionBeats(da.curSec + 1) *
                  4 *
                  this.zoomList[this.curZoom]) |
                  0
              )),
              (a =
                (this.gridBG.get_height() + this.nextGridBG.get_height()) | 0),
              (b = !0))
            : (this.nextGridBG = new F().makeGraphic(1, 1, 0));
          this.nextGridBG.set_y(this.gridBG.get_height());
          this.gridLayer.add(this.nextGridBG);
          this.gridLayer.add(this.gridBG);
          b &&
            ((b = new F(0, this.gridBG.get_height()).makeGraphic(
              (9 * da.GRID_SIZE) | 0,
              this.nextGridBG.get_height() | 0,
              -16777216
            )),
            b.set_alpha(0.4),
            this.gridLayer.add(b));
          b = new F(
            this.gridBG.x + this.gridBG.get_width() - 4 * da.GRID_SIZE
          ).makeGraphic(2, a, -16777216);
          this.gridLayer.add(b);
          b = new F(this.gridBG.x, 4 * da.GRID_SIZE * this.curZoom).makeGraphic(
            this.gridBG.get_width() | 0,
            1,
            1157562368
          );
          da.vortex && this.gridLayer.add(b);
          b = new F(
            this.gridBG.x,
            4 * da.GRID_SIZE * this.curZoom * 2
          ).makeGraphic(this.gridBG.get_width() | 0, 1, 1157562368);
          da.vortex && this.gridLayer.add(b);
          b = new F(
            this.gridBG.x,
            4 * da.GRID_SIZE * this.curZoom * 3
          ).makeGraphic(this.gridBG.get_width() | 0, 1, 1157562368);
          da.vortex && this.gridLayer.add(b);
          b = new F(this.gridBG.x + da.GRID_SIZE).makeGraphic(2, a, -16777216);
          this.gridLayer.add(b);
          this.updateGrid();
          this.lastSecBeats = this.getSectionBeats();
          this.sectionStartTime(1) > g.sound.music._length
            ? (this.lastSecBeatsNext = 0)
            : this.getSectionBeats(da.curSec + 1);
        },
        strumLineUpdateY: function () {
          this.strumLine.set_y(
            this.getYfromStrum(
              (P.songPosition - this.sectionStartTime()) /
                (this.zoomList[this.curZoom] % (16 * P.stepCrochet))
            ) /
              (this.getSectionBeats() / 4)
          );
        },
        updateWaveform: function () {},
        waveformData: function (a, b, c, d, e, f, k) {
          return [
            [[0], [0]],
            [[0], [0]],
          ];
        },
        changeNoteSustain: function (a) {
          null != this.curSelectedNote &&
            null != this.curSelectedNote[2] &&
            ((this.curSelectedNote[2] += a),
            (this.curSelectedNote[2] = Math.max(this.curSelectedNote[2], 0)));
          this.updateNoteUI();
          this.updateGrid();
        },
        recalculateSteps: function (a) {
          null == a && (a = 0);
          for (
            var b = { stepTime: 0, songTime: 0, bpm: 0 },
              c = 0,
              d = P.bpmChangeMap.length;
            c < d;

          ) {
            var e = c++;
            g.sound.music._time > P.bpmChangeMap[e].songTime &&
              (b = P.bpmChangeMap[e]);
          }
          this.curStep =
            b.stepTime +
            Math.floor((g.sound.music._time - b.songTime + a) / P.stepCrochet);
          this.updateBeat();
          return this.curStep;
        },
        resetSection: function (a) {
          null == a && (a = !1);
          this.updateGrid();
          g.sound.music.pause();
          g.sound.music.set_time(this.sectionStartTime());
          a && (g.sound.music.set_time(0), (da.curSec = 0));
          null != this.vocals &&
            (this.vocals.pause(), this.vocals.set_time(g.sound.music._time));
          this.updateCurStep();
          this.updateGrid();
          this.updateSectionUI();
          this.updateWaveform();
        },
        changeSection: function (a, b) {
          null == b && (b = !0);
          null == a && (a = 0);
          null != this._song.notes[a]
            ? ((da.curSec = a),
              b &&
                (g.sound.music.pause(),
                g.sound.music.set_time(this.sectionStartTime()),
                null != this.vocals &&
                  (this.vocals.pause(),
                  this.vocals.set_time(g.sound.music._time)),
                this.updateCurStep()),
              (a = this.getSectionBeats()),
              (b = this.getSectionBeats(da.curSec + 1)),
              this.sectionStartTime(1) > g.sound.music._length && (b = 0),
              a != this.lastSecBeats || b != this.lastSecBeatsNext
                ? this.reloadGridLayer()
                : this.updateGrid(),
              this.updateSectionUI())
            : this.changeSection();
          P.songPosition = g.sound.music._time;
          this.updateWaveform();
        },
        updateSectionUI: function () {
          var a = this._song.notes[da.curSec];
          this.stepperBeats.set_value(this.getSectionBeats());
          this.check_mustHitSection.set_checked(a.mustHitSection);
          this.check_gfSection.set_checked(a.gfSection);
          this.check_altAnim.set_checked(a.altAnim);
          this.check_changeBPM.set_checked(a.changeBPM);
          this.stepperSectionBPM.set_value(a.bpm);
          this.updateHeads();
        },
        updateHeads: function () {
          var a = this.loadHealthIconFromCharacter(this._song.player1),
            b = this.loadHealthIconFromCharacter(this._song.player2);
          this._song.notes[da.curSec].mustHitSection
            ? (this.leftIcon.changeIcon(a), this.rightIcon.changeIcon(b))
            : (this.leftIcon.changeIcon(b), this.rightIcon.changeIcon(a));
          this._song.notes[da.curSec].gfSection &&
            this.leftIcon.changeIcon("gf");
        },
        loadHealthIconFromCharacter: function (a) {
          a = "characters/" + a + ".json";
          null == a && (a = "");
          a = "assets/" + a;
          aa.exists(a) ||
            ((a = "characters/" + yc.DEFAULT_CHARACTER + ".json"),
            null == a && (a = ""),
            (a = "assets/" + a));
          a = aa.getText(a);
          return JSON.parse(a).healthicon;
        },
        updateNoteUI: function () {
          if (null != this.curSelectedNote) {
            if (null != this.curSelectedNote[2])
              this.stepperSusLength.set_value(this.curSelectedNote[2]),
                null != this.curSelectedNote[3] &&
                  ((this.currentType =
                    this.noteTypeMap.h[this.curSelectedNote[3]]),
                  0 >= this.currentType
                    ? this.noteTypeDropDown.set_selectedLabel("")
                    : this.noteTypeDropDown.set_selectedLabel(
                        this.currentType +
                          ". " +
                          M.string(this.curSelectedNote[3])
                      ));
            else {
              this.eventDropDown.set_selectedLabel(
                this.curSelectedNote[1][this.curEventSelected][0]
              );
              var a = M.parseInt(this.eventDropDown.get_selectedId());
              0 < a &&
                a < this.eventStuff.length &&
                this.descText.set_text(this.eventStuff[a][1]);
              this.value1InputText.set_text(
                this.curSelectedNote[1][this.curEventSelected][1]
              );
              this.value2InputText.set_text(
                this.curSelectedNote[1][this.curEventSelected][2]
              );
            }
            this.strumTimeInputText.set_text(
              "" + M.string(this.curSelectedNote[0])
            );
          }
        },
        updateGrid: function () {
          this.curRenderedNotes.clear();
          this.curRenderedSustains.clear();
          this.curRenderedNoteType.clear();
          this.nextRenderedNotes.clear();
          this.nextRenderedSustains.clear();
          if (
            this._song.notes[da.curSec].changeBPM &&
            0 < this._song.notes[da.curSec].bpm
          )
            P.changeBPM(this._song.notes[da.curSec].bpm);
          else {
            for (var a = this._song.bpm, b = 0, c = da.curSec; b < c; ) {
              var d = b++;
              this._song.notes[d].changeBPM && (a = this._song.notes[d].bpm);
            }
            P.changeBPM(a);
          }
          var e = this.getSectionBeats();
          b = 0;
          for (c = this._song.notes[da.curSec].sectionNotes; b < c.length; ) {
            d = c[b];
            ++b;
            a = this.setupNoteData(d, !1);
            this.curRenderedNotes.add(a);
            0 < a.sustainLength &&
              this.curRenderedSustains.add(this.setupSusNote(a, e));
            if (null != d[3] && null != a.noteType && 0 < a.noteType.length) {
              var f = this.noteTypeMap.h[d[3]],
                k = "" + f;
              null == f && (k = "?");
              f = new Xi(0, 0, 100, k, 24);
              f.setFormat(
                "assets/fonts/vcr.ttf",
                24,
                -1,
                "center",
                Ya.OUTLINE,
                -16777216
              );
              f.xAdd = -32;
              f.yAdd = 6;
              f.set_borderSize(1);
              this.curRenderedNoteType.add(f);
              f.sprTracker = a;
            }
            a.mustPress = this._song.notes[da.curSec].mustHitSection;
            3 < d[1] && (a.mustPress = !a.mustPress);
          }
          e = this.sectionStartTime();
          k = this.sectionStartTime(1);
          b = 0;
          for (c = this._song.events; b < c.length; )
            (d = c[b]),
              ++b,
              k > d[0] &&
                d[0] >= e &&
                ((a = this.setupNoteData(d, !1)),
                this.curRenderedNotes.add(a),
                (d =
                  "Event: " +
                  a.eventName +
                  " (" +
                  Math.floor(a.strumTime) +
                  " ms)\nValue 1: " +
                  a.eventVal1 +
                  "\nValue 2: " +
                  a.eventVal2),
                1 < a.eventLength &&
                  (d = a.eventLength + " Events:\n" + a.eventName),
                (f = new Xi(0, 0, 400, d, 12)),
                f.setFormat(
                  "assets/fonts/vcr.ttf",
                  12,
                  -1,
                  "right",
                  Ya.OUTLINE_FAST,
                  -16777216
                ),
                (f.xAdd = -410),
                f.set_borderSize(1),
                1 < a.eventLength && (f.yAdd += 8),
                this.curRenderedNoteType.add(f),
                (f.sprTracker = a));
          e = this.getSectionBeats(1);
          if (da.curSec < this._song.notes.length - 1)
            for (
              b = 0, c = this._song.notes[da.curSec + 1].sectionNotes;
              b < c.length;

            )
              (d = c[b]),
                ++b,
                (a = this.setupNoteData(d, !0)),
                a.set_alpha(0.6),
                this.nextRenderedNotes.add(a),
                0 < a.sustainLength &&
                  this.nextRenderedSustains.add(this.setupSusNote(a, e));
          e = this.sectionStartTime(1);
          k = this.sectionStartTime(2);
          b = 0;
          for (c = this._song.events; b < c.length; )
            (d = c[b]),
              ++b,
              k > d[0] &&
                d[0] >= e &&
                ((a = this.setupNoteData(d, !0)),
                a.set_alpha(0.6),
                this.nextRenderedNotes.add(a));
        },
        setupNoteData: function (a, b) {
          var c = a[1],
            d = a[0],
            e = a[2],
            f = new Id(d, c % 4, null, null, !0);
          null != e
            ? ("string" != typeof a[3] && (a[3] = this.noteTypeIntMap.h[a[3]]),
              3 < a.length &&
                (null == a[3] || 1 > a[3].length) &&
                X.remove(a, a[3]),
              (f.sustainLength = e),
              f.set_noteType(a[3]))
            : ((c = G.returnGraphic("eventArrow", null)),
              f.loadGraphic(c),
              (f.eventName = this.getEventName(a[1])),
              (f.eventLength = a[1].length),
              2 > a[1].length &&
                ((f.eventVal1 = a[1][0][1]), (f.eventVal2 = a[1][0][2])),
              (c = f.noteData = -1));
          f.setGraphicSize(da.GRID_SIZE, da.GRID_SIZE);
          f.updateHitbox();
          f.set_x(Math.floor(c * da.GRID_SIZE) + da.GRID_SIZE);
          b &&
            this._song.notes[da.curSec].mustHitSection !=
              this._song.notes[da.curSec + 1].mustHitSection &&
            (3 < c
              ? f.set_x(f.x - 4 * da.GRID_SIZE)
              : null != e && f.set_x(f.x + 4 * da.GRID_SIZE));
          a = this.getSectionBeats(b ? 1 : 0);
          f.set_y(this.getYfromStrumNotes(d - this.sectionStartTime(), a));
          -150 > f.y && f.set_y(-150);
          return f;
        },
        getEventName: function (a) {
          for (var b = "", c = !1, d = 0, e = a.length; d < e; ) {
            var f = d++;
            c && (b += ", ");
            b += a[f][0];
            c = !0;
          }
          return b;
        },
        setupSusNote: function (a, b) {
          b = Math.floor(
            hc.remapToRange(
              a.sustainLength,
              0,
              16 * P.stepCrochet,
              0,
              16 * da.GRID_SIZE * this.zoomList[this.curZoom]
            ) +
              da.GRID_SIZE * this.zoomList[this.curZoom] -
              da.GRID_SIZE / 2
          );
          var c =
            ((da.GRID_SIZE * this.zoomList[this.curZoom]) / 2 +
              da.GRID_SIZE / 2) |
            0;
          b < c && (b = c);
          1 > b && (b = 1);
          return new F(
            a.x + 0.5 * da.GRID_SIZE - 4,
            a.y + da.GRID_SIZE / 2
          ).makeGraphic(8, b);
        },
        addSection: function (a) {
          null == a && (a = 4);
          this._song.notes.push({
            sectionBeats: a,
            bpm: this._song.bpm,
            changeBPM: !1,
            mustHitSection: !0,
            gfSection: !1,
            sectionNotes: [],
            typeOfSection: 0,
            altAnim: !1,
          });
        },
        selectNote: function (a) {
          var b = a.noteData;
          if (-1 < b) {
            a.mustPress != this._song.notes[da.curSec].mustHitSection &&
              (b += 4);
            for (
              var c = 0, d = this._song.notes[da.curSec].sectionNotes;
              c < d.length;

            ) {
              var e = d[c];
              ++c;
              if (
                e != this.curSelectedNote &&
                2 < e.length &&
                e[0] == a.strumTime &&
                e[1] == b
              ) {
                this.curSelectedNote = e;
                break;
              }
            }
          } else
            for (c = 0, d = this._song.events; c < d.length; )
              if (
                ((e = d[c]),
                ++c,
                e != this.curSelectedNote && e[0] == a.strumTime)
              ) {
                this.curSelectedNote = e;
                this.curEventSelected =
                  (this.curSelectedNote[1].length | 0) - 1;
                break;
              }
          this.changeEventSelected();
          this.updateGrid();
          this.updateNoteUI();
        },
        deleteNote: function (a) {
          var b = a.noteData;
          -1 < b &&
            a.mustPress != this._song.notes[da.curSec].mustHitSection &&
            (b += 4);
          if (-1 < a.noteData)
            for (
              var c = 0, d = this._song.notes[da.curSec].sectionNotes;
              c < d.length;

            ) {
              var e = d[c];
              ++c;
              if (e[0] == a.strumTime && e[1] == b) {
                e == this.curSelectedNote && (this.curSelectedNote = null);
                X.remove(this._song.notes[da.curSec].sectionNotes, e);
                break;
              }
            }
          else
            for (c = 0, d = this._song.events; c < d.length; )
              if (((e = d[c]), ++c, e[0] == a.strumTime)) {
                e == this.curSelectedNote &&
                  ((this.curSelectedNote = null), this.changeEventSelected());
                X.remove(this._song.events, e);
                break;
              }
          this.updateGrid();
        },
        doANoteThing: function (a, b, c) {
          var d = this,
            e = !1;
          this.strumLineNotes.members[b].overlaps(this.curRenderedNotes) &&
            this.curRenderedNotes.forEachAlive(function (a) {
              var c = d.strumLineNotes.members[b].x + 1,
                f = d.strumLine.y + 1;
              null == f && (f = 0);
              null == c && (c = 0);
              c = new ba(c, f);
              a.overlapsPoint(c) &&
                a.noteData == b % 4 &&
                (e || d.deleteNote(a), (e = !0));
            });
          e || this.addNote(a, b, c);
        },
        clearSong: function () {
          for (var a = 0, b = this._song.notes.length; a < b; ) {
            var c = a++;
            this._song.notes[c].sectionNotes = [];
          }
          this.updateGrid();
        },
        addNote: function (a, b, c) {
          var d =
              this.getStrumTime(
                this.dummyArrow.y * (this.getSectionBeats() / 4),
                !1
              ) + this.sectionStartTime(),
            e = Math.floor((g.mouse.x - da.GRID_SIZE) / da.GRID_SIZE),
            f = this.currentType;
          null != a && (d = a);
          null != b && (e = b);
          null != c && (f = c);
          -1 < e
            ? (this._song.notes[da.curSec].sectionNotes.push([
                d,
                e,
                0,
                this.noteTypeIntMap.h[f],
              ]),
              (this.curSelectedNote =
                this._song.notes[da.curSec].sectionNotes[
                  this._song.notes[da.curSec].sectionNotes.length - 1
                ]))
            : ((a =
                this.eventStuff[
                  M.parseInt(this.eventDropDown.get_selectedId())
                ][0]),
              this._song.events.push([
                d,
                [[a, this.value1InputText.text, this.value2InputText.text]],
              ]),
              (this.curSelectedNote =
                this._song.events[this._song.events.length - 1]),
              (this.curEventSelected = 0));
          this.changeEventSelected();
          a = g.keys.pressed;
          a.keyManager.checkStatusUnsafe(17, a.status) &&
            -1 < e &&
            this._song.notes[da.curSec].sectionNotes.push([
              d,
              (e + 4) % 8,
              0,
              this.noteTypeIntMap.h[f],
            ]);
          this.strumTimeInputText.set_text(
            "" + M.string(this.curSelectedNote[0])
          );
          this.updateGrid();
          this.updateNoteUI();
        },
        redo: function () {},
        undo: function () {
          this.undos.pop();
        },
        getStrumTime: function (a, b) {
          null == b && (b = !0);
          var c = this.zoomList[this.curZoom];
          b || (c = 1);
          return hc.remapToRange(
            a,
            this.gridBG.y,
            this.gridBG.y + this.gridBG.get_height() * c,
            0,
            16 * P.stepCrochet
          );
        },
        getYfromStrum: function (a, b) {
          null == b && (b = !0);
          var c = this.zoomList[this.curZoom];
          b || (c = 1);
          return hc.remapToRange(
            a,
            0,
            16 * P.stepCrochet,
            this.gridBG.y,
            this.gridBG.y + this.gridBG.get_height() * c
          );
        },
        getYfromStrumNotes: function (a, b) {
          return (
            (a / (4 * b * P.stepCrochet)) *
              b *
              4 *
              this.zoomList[this.curZoom] *
              da.GRID_SIZE +
            this.gridBG.y
          );
        },
        getNotes: function () {
          for (var a = [], b = 0, c = this._song.notes; b < c.length; ) {
            var d = c[b];
            ++b;
            a.push(d.sectionNotes);
          }
          return a;
        },
        loadJson: function (a) {
          C.SONG =
            Ta.difficulties[C.storyDifficulty] != Ta.defaultDifficulty
              ? null == Ta.difficulties[C.storyDifficulty]
                ? Dd.loadFromJson(a.toLowerCase(), a.toLowerCase())
                : Dd.loadFromJson(
                    a.toLowerCase() + "-" + Ta.difficulties[C.storyDifficulty],
                    a.toLowerCase()
                  )
              : Dd.loadFromJson(a.toLowerCase(), a.toLowerCase());
          I.resetState();
        },
        autosaveSong: function () {
          g.save.data.autosave = JSON.stringify({ song: this._song });
          g.save.flush();
        },
        clearEvents: function () {
          this._song.events = [];
          this.updateGrid();
        },
        saveLevel: function () {
          null != this._song.events &&
            1 < this._song.events.length &&
            this._song.events.sort(n(this, this.sortByTime));
          var a = JSON.stringify({ song: this._song }, null, "\t");
          if (null != a && 0 < a.length) {
            this._file = new oe();
            this._file.addEventListener(
              "complete",
              n(this, this.onSaveComplete)
            );
            this._file.addEventListener("cancel", n(this, this.onSaveCancel));
            this._file.addEventListener("ioError", n(this, this.onSaveError));
            var b = this._file;
            a = K.trim(a);
            var c = this._song.song,
              d = new ya("[~&\\\\;:<>#]", ""),
              e = new ya("[.,'\"%?!]", "");
            c = d.split(K.replace(c, " ", "-")).join("-");
            b.save(a, e.split(c).join("").toLowerCase() + ".json");
          }
        },
        sortByTime: function (a, b) {
          a = a[0];
          b = b[0];
          var c = 0;
          a < b ? (c = -1) : a > b && (c = 1);
          return c;
        },
        saveEvents: function () {
          null != this._song.events &&
            1 < this._song.events.length &&
            this._song.events.sort(n(this, this.sortByTime));
          var a = JSON.stringify(
            { song: { events: this._song.events } },
            null,
            "\t"
          );
          null != a &&
            0 < a.length &&
            ((this._file = new oe()),
            this._file.addEventListener(
              "complete",
              n(this, this.onSaveComplete)
            ),
            this._file.addEventListener("cancel", n(this, this.onSaveCancel)),
            this._file.addEventListener("ioError", n(this, this.onSaveError)),
            this._file.save(K.trim(a), "events.json"));
        },
        onSaveComplete: function (a) {
          this._file.removeEventListener(
            "complete",
            n(this, this.onSaveComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onSaveCancel));
          this._file.removeEventListener("ioError", n(this, this.onSaveError));
          this._file = null;
          g.log.advanced("Successfully saved LEVEL DATA.", Ja.NOTICE);
        },
        onSaveCancel: function (a) {
          this._file.removeEventListener(
            "complete",
            n(this, this.onSaveComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onSaveCancel));
          this._file.removeEventListener("ioError", n(this, this.onSaveError));
          this._file = null;
        },
        onSaveError: function (a) {
          this._file.removeEventListener(
            "complete",
            n(this, this.onSaveComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onSaveCancel));
          this._file.removeEventListener("ioError", n(this, this.onSaveError));
          this._file = null;
          g.log.advanced("Problem saving Level data", Ja.ERROR, !0);
        },
        getSectionBeats: function (a) {
          null == a && (a = da.curSec);
          var b = null;
          null != this._song.notes[a] && (b = this._song.notes[a].sectionBeats);
          return null != b ? b : 4;
        },
        __class__: da,
      });
      var Xi = function (a, b, c, d, e, f) {
        null == f && (f = !0);
        null == e && (e = 8);
        null == c && (c = 0);
        null == b && (b = 0);
        null == a && (a = 0);
        this.xAdd = this.yAdd = 0;
        W.call(this, a, b, c, d, e, f);
      };
      h["editors.AttachedFlxText"] = Xi;
      Xi.__name__ = "editors.AttachedFlxText";
      Xi.__super__ = W;
      Xi.prototype = q(W.prototype, {
        update: function (a) {
          W.prototype.update.call(this, a);
          null != this.sprTracker &&
            (this.setPosition(
              this.sprTracker.x + this.xAdd,
              this.sprTracker.y + this.yAdd
            ),
            this.set_angle(this.sprTracker.angle),
            this.set_alpha(this.sprTracker.alpha));
        },
        __class__: Xi,
      });
      var vf = function (a, b) {
        this._file = null;
        this.transitioning = !1;
        this.lastTab = "Character";
        this.currentGhosts = 0;
        this.blockPressWhileTypingOn = [];
        this.animationArray = [];
        this.curAnim = 0;
        this.daText = null;
        I.call(this, a, b);
      };
      h["editors.DialogueCharacterEditorState"] = vf;
      vf.__name__ = "editors.DialogueCharacterEditorState";
      vf.__super__ = I;
      vf.prototype = q(I.prototype, {
        create: function () {
          this.persistentUpdate = this.persistentDraw = !0;
          this.camGame = new Ob();
          this.camHUD = new Ob();
          var a = ob._new(),
            b = 0,
            c = 0 * b + 0.5,
            d = 1;
          null == d && (d = 1);
          b = Math.round(255 * (b + 0.5));
          a = (a & -16711681) | ((255 < b ? 255 : 0 > b ? 0 : b) << 16);
          b = Math.round(255 * c);
          a = (a & -65281) | ((255 < b ? 255 : 0 > b ? 0 : b) << 8);
          b = 128;
          a = (a & -256) | (255 < b ? 255 : 0 > b ? 0 : b);
          b = Math.round(255 * d);
          this.camGame.bgColor =
            (a & 16777215) | ((255 < b ? 255 : 0 > b ? 0 : b) << 24);
          this.camHUD.bgColor &= 16777215;
          this.camHUD.bgColor |= 0;
          g.cameras.reset(this.camGame);
          g.cameras.add(this.camHUD, !1);
          g.cameras.setDefaultDrawTarget(this.camGame, !0);
          this.mainGroup = new wa();
          this.mainGroup.set_cameras([this.camGame]);
          this.hudGroup = new wa();
          this.hudGroup.set_cameras([this.camGame]);
          this.add(this.mainGroup);
          this.add(this.hudGroup);
          this.character = new dd();
          a = this.character.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.mainGroup.add(this.character);
          this.ghostLoop = new dd();
          this.ghostLoop.set_alpha(0);
          this.ghostLoop.set_color(-65536);
          this.ghostLoop.isGhost = !0;
          this.ghostLoop.jsonFile = this.character.jsonFile;
          this.ghostLoop.set_cameras([this.camGame]);
          this.add(this.ghostLoop);
          this.ghostIdle = new dd();
          this.ghostIdle.set_alpha(0);
          this.ghostIdle.set_color(-16776961);
          this.ghostIdle.isGhost = !0;
          this.ghostIdle.jsonFile = this.character.jsonFile;
          this.ghostIdle.set_cameras([this.camGame]);
          this.add(this.ghostIdle);
          a = this.box = new F(70, 370);
          c = G.returnGraphic("speech_bubble", null);
          a.set_frames(
            jb.fromSparrow(
              c,
              G.getPath("images/speech_bubble.xml", "TEXT", null)
            )
          );
          a = this.box.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.box.set_antialiasing(y.globalAntialiasing);
          this.box.animation.addByPrefix("normal", "speech bubble normal", 24);
          this.box.animation.addByPrefix("center", "speech bubble middle", 24);
          this.box.animation.play("normal", !0);
          this.box.setGraphicSize((0.9 * this.box.get_width()) | 0);
          this.box.updateHitbox();
          this.hudGroup.add(this.box);
          this.tipText = new W(10, 10, g.width - 20, vf.TIP_TEXT_MAIN, 8);
          this.tipText.setFormat(
            "assets/fonts/vcr.ttf",
            16,
            -1,
            "right",
            Ya.OUTLINE,
            -16777216
          );
          this.tipText.set_cameras([this.camHUD]);
          a = this.tipText.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.add(this.tipText);
          this.offsetLoopText = new W(10, 10, 0, "", 32);
          this.offsetLoopText.setFormat(
            "assets/fonts/vcr.ttf",
            32,
            -1,
            "left",
            Ya.OUTLINE,
            -16777216
          );
          this.offsetLoopText.set_cameras([this.camHUD]);
          a = this.offsetLoopText.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.add(this.offsetLoopText);
          this.offsetLoopText.set_visible(!1);
          this.offsetIdleText = new W(10, 46, 0, "", 32);
          this.offsetIdleText.setFormat(
            "assets/fonts/vcr.ttf",
            32,
            -1,
            "left",
            Ya.OUTLINE,
            -16777216
          );
          this.offsetIdleText.set_cameras([this.camHUD]);
          a = this.offsetIdleText.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.add(this.offsetIdleText);
          this.offsetIdleText.set_visible(!1);
          this.animText = new W(10, 22, g.width - 20, "", 8);
          this.animText.setFormat(
            "assets/fonts/vcr.ttf",
            24,
            -1,
            "left",
            Ya.OUTLINE,
            -16777216
          );
          a = this.animText.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.animText.set_cameras([this.camHUD]);
          this.add(this.animText);
          this.reloadCharacter();
          this.updateTextBox();
          this.daText = new Ph(
            Ib.DEFAULT_TEXT_X,
            Ib.DEFAULT_TEXT_Y,
            "",
            0.05,
            !1
          );
          this.daText.set_scaleX(0.7);
          this.daText.set_scaleY(0.7);
          this.daText.set_text(vf.DEFAULT_TEXT);
          this.hudGroup.add(this.daText);
          this.addEditorBox();
          g.mouse.set_visible(!0);
          this.updateCharTypeBox();
          I.prototype.create.call(this);
        },
        addEditorBox: function () {
          var a = [{ name: "Character Type", label: "Character Type" }];
          this.UI_typebox = new be(null, null, a, null, !0);
          this.UI_typebox.resize(120, 180);
          this.UI_typebox.set_x(900);
          this.UI_typebox.set_y(g.height - this.UI_typebox.get_height() - 50);
          a = this.UI_typebox.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.UI_typebox.set_camera(this.camHUD);
          this.addTypeUI();
          this.add(this.UI_typebox);
          a = [
            { name: "Animations", label: "Animations" },
            { name: "Character", label: "Character" },
          ];
          this.UI_mainbox = new be(null, null, a, null, !0);
          this.UI_mainbox.resize(200, 250);
          this.UI_mainbox.set_x(
            this.UI_typebox.x + this.UI_typebox.get_width()
          );
          this.UI_mainbox.set_y(g.height - this.UI_mainbox.get_height() - 50);
          a = this.UI_mainbox.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.UI_mainbox.set_camera(this.camHUD);
          this.addAnimationsUI();
          this.addCharacterUI();
          this.add(this.UI_mainbox);
          this.UI_mainbox.set_selected_tab_id("Character");
          this.lastTab = this.UI_mainbox.get_selected_tab_id();
        },
        addTypeUI: function () {
          var a = this,
            b = new Ea(null, this.UI_typebox);
          b.name = "Character Type";
          this.leftCheckbox = new tb(10, 20, null, null, "Left", 100);
          this.leftCheckbox.callback = function () {
            a.character.jsonFile.dialogue_pos = "left";
            a.updateCharTypeBox();
          };
          this.centerCheckbox = new tb(
            this.leftCheckbox.x,
            this.leftCheckbox.y + 40,
            null,
            null,
            "Center",
            100
          );
          this.centerCheckbox.callback = function () {
            a.character.jsonFile.dialogue_pos = "center";
            a.updateCharTypeBox();
          };
          this.rightCheckbox = new tb(
            this.centerCheckbox.x,
            this.centerCheckbox.y + 40,
            null,
            null,
            "Right",
            100
          );
          this.rightCheckbox.callback = function () {
            a.character.jsonFile.dialogue_pos = "right";
            a.updateCharTypeBox();
          };
          b.add(this.leftCheckbox);
          b.add(this.centerCheckbox);
          b.add(this.rightCheckbox);
          this.UI_typebox.addGroup(b);
        },
        addAnimationsUI: function () {
          var a = this,
            b = new Ea(null, this.UI_mainbox);
          b.name = "Animations";
          this.animationDropDown = new gc(
            10,
            30,
            gc.makeStrIdLabelArray([""], !0),
            function (b) {
              b = a.animationArray[M.parseInt(b)];
              Object.prototype.hasOwnProperty.call(
                a.character.dialogueAnimations.h,
                b
              ) &&
                (a.ghostLoop.playAnim(b),
                a.ghostIdle.playAnim(b, !0),
                (a.curSelectedAnim = b),
                (b = a.character.dialogueAnimations.h[a.curSelectedAnim]),
                a.offsetLoopText.set_text("Loop: " + M.string(b.loop_offsets)),
                a.offsetIdleText.set_text("Idle: " + M.string(b.idle_offsets)),
                a.animationInputText.set_text(b.anim),
                a.loopInputText.set_text(b.loop_name),
                a.idleInputText.set_text(b.idle_name));
            }
          );
          this.animationInputText = new qb(15, 85, 80, "", 8);
          this.blockPressWhileTypingOn.push(this.animationInputText);
          this.loopInputText = new qb(
            this.animationInputText.x,
            this.animationInputText.y + 35,
            150,
            "",
            8
          );
          this.blockPressWhileTypingOn.push(this.loopInputText);
          this.idleInputText = new qb(
            this.loopInputText.x,
            this.loopInputText.y + 40,
            150,
            "",
            8
          );
          this.blockPressWhileTypingOn.push(this.idleInputText);
          var c = new lb(
              10,
              this.idleInputText.y + 30,
              "Add/Update",
              function () {
                var b = K.trim(a.animationInputText.text);
                if (
                  Object.prototype.hasOwnProperty.call(
                    a.character.dialogueAnimations.h,
                    b
                  )
                ) {
                  for (
                    var c = 0, d = a.character.jsonFile.animations.length;
                    c < d;

                  ) {
                    var r = c++;
                    r = a.character.jsonFile.animations[r];
                    if (K.trim(r.anim) == b) {
                      r.loop_name = a.loopInputText.text;
                      r.idle_name = a.idleInputText.text;
                      break;
                    }
                  }
                  a.character.reloadAnimations();
                  a.ghostLoop.reloadAnimations();
                  a.ghostIdle.reloadAnimations();
                  a.curSelectedAnim == b &&
                    (a.ghostLoop.playAnim(b), a.ghostIdle.playAnim(b, !0));
                } else
                  a.character.jsonFile.animations.push({
                    anim: b,
                    loop_name: a.loopInputText.text,
                    loop_offsets: [0, 0],
                    idle_name: a.idleInputText.text,
                    idle_offsets: [0, 0],
                  }),
                    (b = a.animationDropDown.get_selectedLabel()),
                    a.character.reloadAnimations(),
                    a.ghostLoop.reloadAnimations(),
                    a.ghostIdle.reloadAnimations(),
                    a.reloadAnimationsDropDown(),
                    a.animationDropDown.set_selectedLabel(b);
              }
            ),
            d = new lb(100, c.y, "Remove", function () {
              for (
                var b = 0, c = a.character.jsonFile.animations.length;
                b < c;

              ) {
                var d = b++;
                d = a.character.jsonFile.animations[d];
                if (
                  null != d &&
                  K.trim(d.anim) == K.trim(a.animationInputText.text)
                ) {
                  b = a.animationDropDown.get_selectedLabel();
                  X.remove(a.character.jsonFile.animations, d);
                  a.character.reloadAnimations();
                  a.ghostLoop.reloadAnimations();
                  a.ghostIdle.reloadAnimations();
                  a.reloadAnimationsDropDown();
                  0 < a.character.jsonFile.animations.length &&
                    b == K.trim(d.anim) &&
                    ((c = a.character.jsonFile.animations[0].anim),
                    a.ghostLoop.playAnim(c),
                    a.ghostIdle.playAnim(c, !0));
                  a.animationDropDown.set_selectedLabel(b);
                  a.animationInputText.set_text("");
                  a.loopInputText.set_text("");
                  a.idleInputText.set_text("");
                  break;
                }
              }
            });
          b.add(
            new W(
              this.animationDropDown.x,
              this.animationDropDown.y - 18,
              0,
              "Animations:"
            )
          );
          b.add(
            new W(
              this.animationInputText.x,
              this.animationInputText.y - 18,
              0,
              "Animation name:"
            )
          );
          b.add(
            new W(
              this.loopInputText.x,
              this.loopInputText.y - 18,
              0,
              "Loop name on .XML file:"
            )
          );
          b.add(
            new W(
              this.idleInputText.x,
              this.idleInputText.y - 18,
              0,
              "Idle/Finished name on .XML file:"
            )
          );
          b.add(this.animationInputText);
          b.add(this.loopInputText);
          b.add(this.idleInputText);
          b.add(c);
          b.add(d);
          b.add(this.animationDropDown);
          this.UI_mainbox.addGroup(b);
          this.reloadAnimationsDropDown();
        },
        reloadAnimationsDropDown: function () {
          this.animationArray = [];
          for (
            var a = 0, b = this.character.jsonFile.animations;
            a < b.length;

          ) {
            var c = b[a];
            ++a;
            this.animationArray.push(c.anim);
          }
          1 > this.animationArray.length && (this.animationArray = [""]);
          this.animationDropDown.setData(
            gc.makeStrIdLabelArray(this.animationArray, !0)
          );
        },
        addCharacterUI: function () {
          var a = this,
            b = new Ea(null, this.UI_mainbox);
          b.name = "Character";
          this.imageInputText = new qb(
            10,
            30,
            80,
            this.character.jsonFile.image,
            8
          );
          this.blockPressWhileTypingOn.push(this.imageInputText);
          this.xStepper = new Jb(
            this.imageInputText.x,
            this.imageInputText.y + 50,
            10,
            this.character.jsonFile.position[0],
            -2e3,
            2e3,
            0
          );
          this.yStepper = new Jb(
            this.imageInputText.x + 80,
            this.xStepper.y,
            10,
            this.character.jsonFile.position[1],
            -2e3,
            2e3,
            0
          );
          this.scaleStepper = new Jb(
            this.imageInputText.x,
            this.xStepper.y + 50,
            0.05,
            this.character.jsonFile.scale,
            0.1,
            10,
            2
          );
          var c = new tb(
            this.scaleStepper.x + 80,
            this.scaleStepper.y,
            null,
            null,
            "No Antialiasing",
            100
          );
          c.set_checked(1 == this.character.jsonFile.no_antialiasing);
          c.callback = function () {
            a.character.jsonFile.no_antialiasing = c.checked;
            a.character.set_antialiasing(!a.character.jsonFile.no_antialiasing);
          };
          b.add(new W(10, this.imageInputText.y - 18, 0, "Image file name:"));
          b.add(new W(10, this.xStepper.y - 18, 0, "Position Offset:"));
          b.add(new W(10, this.scaleStepper.y - 18, 0, "Scale:"));
          b.add(this.imageInputText);
          b.add(this.xStepper);
          b.add(this.yStepper);
          b.add(this.scaleStepper);
          b.add(c);
          var d = new lb(
              10,
              this.scaleStepper.y + 60,
              "Reload Image",
              function () {
                a.reloadCharacter();
              }
            ),
            e = new lb(d.x + 100, d.y, "Load Character", function () {
              a.loadCharacter();
            }),
            f = new lb(e.x, d.y - 25, "Save Character", function () {
              a.saveCharacter();
            });
          b.add(d);
          b.add(e);
          b.add(f);
          this.UI_mainbox.addGroup(b);
        },
        updateCharTypeBox: function () {
          this.leftCheckbox.set_checked(!1);
          this.centerCheckbox.set_checked(!1);
          this.rightCheckbox.set_checked(!1);
          switch (this.character.jsonFile.dialogue_pos) {
            case "center":
              this.centerCheckbox.set_checked(!0);
              break;
            case "left":
              this.leftCheckbox.set_checked(!0);
              break;
            case "right":
              this.rightCheckbox.set_checked(!0);
          }
          this.reloadCharacter();
          this.updateTextBox();
        },
        reloadCharacter: function () {
          for (
            var a = [this.character, this.ghostLoop, this.ghostIdle], b = 0;
            b < a.length;

          ) {
            var c = a[b];
            ++b;
            var d = "dialogue/" + this.character.jsonFile.image,
              e = G.returnGraphic(d, null);
            c.set_frames(
              jb.fromSparrow(e, G.getPath("images/" + d + ".xml", "TEXT", null))
            );
            c.jsonFile = this.character.jsonFile;
            c.reloadAnimations();
            c.setGraphicSize(
              (c.get_width() *
                dd.DEFAULT_SCALE *
                this.character.jsonFile.scale) |
                0
            );
            c.updateHitbox();
          }
          this.character.set_x(Ib.LEFT_CHAR_X);
          this.character.set_y(Ib.DEFAULT_CHAR_Y);
          switch (this.character.jsonFile.dialogue_pos) {
            case "center":
              this.character.set_x(g.width / 2);
              a = this.character;
              a.set_x(a.x - this.character.get_width() / 2);
              break;
            case "right":
              this.character.set_x(
                g.width - this.character.get_width() + Ib.RIGHT_CHAR_X
              );
          }
          a = this.character;
          a.set_x(
            a.x + (this.character.jsonFile.position[0] + this.mainGroup.x)
          );
          a = this.character;
          a.set_y(
            a.y + (this.character.jsonFile.position[1] + this.mainGroup.y)
          );
          this.character.playAnim(this.character.jsonFile.animations[0].anim);
          0 < this.character.jsonFile.animations.length &&
            ((this.curSelectedAnim =
              this.character.jsonFile.animations[0].anim),
            (a = this.character.dialogueAnimations.h[this.curSelectedAnim]),
            this.ghostLoop.playAnim(a.anim),
            this.ghostIdle.playAnim(a.anim, !0),
            this.offsetLoopText.set_text("Loop: " + M.string(a.loop_offsets)),
            this.offsetIdleText.set_text("Idle: " + M.string(a.idle_offsets)));
          this.curAnim = 0;
          this.animText.set_text(
            "Animation: " +
              this.character.jsonFile.animations[this.curAnim].anim +
              " (" +
              (this.curAnim + 1) +
              " / " +
              this.character.jsonFile.animations.length +
              ") - Press W or S to scroll"
          );
        },
        updateTextBox: function () {
          this.box.set_flipX(!1);
          var a = "normal";
          switch (this.character.jsonFile.dialogue_pos) {
            case "center":
              a = "center";
              break;
            case "left":
              this.box.set_flipX(!0);
          }
          this.box.animation.play(a, !0);
          Ib.updateBoxOffsets(this.box);
        },
        getEvent: function (a, b, c, d) {
          "change_input_text" == a && b == this.imageInputText
            ? (this.character.jsonFile.image = this.imageInputText.text)
            : "change_numeric_stepper" == a &&
              b instanceof Jb &&
              (b == this.scaleStepper
                ? ((this.character.jsonFile.scale = this.scaleStepper.value),
                  this.reloadCharacter())
                : b == this.xStepper
                ? ((this.character.jsonFile.position[0] = this.xStepper.value),
                  this.reloadCharacter())
                : b == this.yStepper &&
                  ((this.character.jsonFile.position[1] = this.yStepper.value),
                  this.reloadCharacter()));
        },
        update: function (a) {
          I.camBeat = g.camera;
          if (!this.transitioning) {
            null != this.character.animation._curAnim &&
              (this.daText.finishedText
                ? this.character.animationIsLoop() &&
                  this.character.playAnim(
                    this.character.animation._curAnim.name,
                    !0
                  )
                : this.character.animation._curAnim.finished &&
                  this.character.animation._curAnim.restart());
            for (
              var b = !1, c = 0, d = this.blockPressWhileTypingOn;
              c < d.length;

            ) {
              var e = d[c];
              ++c;
              if (e.hasFocus) {
                g.sound.muteKeys = [];
                g.sound.volumeDownKeys = [];
                g.sound.volumeUpKeys = [];
                b = !0;
                c = g.keys.justPressed;
                c.keyManager.checkStatusUnsafe(13, c.status) &&
                  e.set_hasFocus(!1);
                break;
              }
            }
            if (!b && !this.animationDropDown.dropPanel.visible) {
              g.sound.muteKeys = cb.muteKeys;
              g.sound.volumeDownKeys = cb.volumeDownKeys;
              g.sound.volumeUpKeys = cb.volumeUpKeys;
              c = g.keys.justPressed;
              c.keyManager.checkStatusUnsafe(32, c.status) &&
                "Character" == this.UI_mainbox.get_selected_tab_id() &&
                (this.character.playAnim(
                  this.character.jsonFile.animations[this.curAnim].anim
                ),
                this.daText.resetDialogue(),
                this.updateTextBox());
              e = 1;
              var f = 300;
              c = g.keys.pressed;
              c.keyManager.checkStatusUnsafe(16, c.status) &&
                ((f = 1200), (e = 10));
              b = [1, 1, -1, -1];
              c = g.keys.pressed;
              d = c.keyManager.checkStatusUnsafe(74, c.status);
              c = g.keys.pressed;
              var k = c.keyManager.checkStatusUnsafe(73, c.status);
              c = g.keys.pressed;
              var r = c.keyManager.checkStatusUnsafe(76, c.status);
              c = g.keys.pressed;
              k = [d, k, r, c.keyManager.checkStatusUnsafe(75, c.status)];
              c = 0;
              for (d = k.length; c < d; )
                if (((r = c++), k[r]))
                  if (1 == r % 2) {
                    var l = this.mainGroup;
                    l.set_y(l.y + f * a * b[r]);
                  } else (l = this.mainGroup), l.set_x(l.x + f * a * b[r]);
              if (
                "Animations" == this.UI_mainbox.get_selected_tab_id() &&
                null != this.curSelectedAnim &&
                Object.prototype.hasOwnProperty.call(
                  this.character.dialogueAnimations.h,
                  this.curSelectedAnim
                )
              ) {
                k = !1;
                f = this.character.dialogueAnimations.h[this.curSelectedAnim];
                c = g.keys.justPressed;
                d = c.keyManager.checkStatusUnsafe(65, c.status);
                c = g.keys.justPressed;
                r = c.keyManager.checkStatusUnsafe(87, c.status);
                c = g.keys.justPressed;
                l = c.keyManager.checkStatusUnsafe(68, c.status);
                c = g.keys.justPressed;
                l = [d, r, l, c.keyManager.checkStatusUnsafe(83, c.status)];
                c = g.keys.justPressed;
                d = c.keyManager.checkStatusUnsafe(37, c.status);
                c = g.keys.justPressed;
                r = c.keyManager.checkStatusUnsafe(38, c.status);
                c = g.keys.justPressed;
                var J = c.keyManager.checkStatusUnsafe(39, c.status);
                c = g.keys.justPressed;
                J = [d, r, J, c.keyManager.checkStatusUnsafe(40, c.status)];
                c = 0;
                for (d = l.length; c < d; )
                  (r = c++),
                    l[r] &&
                      (1 == r % 2
                        ? (f.loop_offsets[1] += e * b[r])
                        : (f.loop_offsets[0] += e * b[r]),
                      (k = !0));
                c = 0;
                for (d = J.length; c < d; )
                  (r = c++),
                    J[r] &&
                      (1 == r % 2
                        ? (f.idle_offsets[1] += e * b[r])
                        : (f.idle_offsets[0] += e * b[r]),
                      (k = !0));
                k &&
                  (this.offsetLoopText.set_text(
                    "Loop: " + M.string(f.loop_offsets)
                  ),
                  this.offsetIdleText.set_text(
                    "Idle: " + M.string(f.idle_offsets)
                  ),
                  (b = this.ghostLoop.offset),
                  (e = f.loop_offsets[0]),
                  (c = f.loop_offsets[1]),
                  null == c && (c = 0),
                  null == e && (e = 0),
                  b.set_x(e),
                  b.set_y(c),
                  (b = this.ghostIdle.offset),
                  (e = f.idle_offsets[0]),
                  (c = f.idle_offsets[1]),
                  null == c && (c = 0),
                  null == e && (e = 0),
                  b.set_x(e),
                  b.set_y(c));
              }
              c = g.keys.pressed;
              c.keyManager.checkStatusUnsafe(81, c.status) &&
                0.1 < this.camGame.zoom &&
                ((l = this.camGame),
                l.set_zoom(l.zoom - a * this.camGame.zoom),
                0.1 > this.camGame.zoom && this.camGame.set_zoom(0.1));
              c = g.keys.pressed;
              c.keyManager.checkStatusUnsafe(69, c.status) &&
                1 > this.camGame.zoom &&
                ((l = this.camGame),
                l.set_zoom(l.zoom + a * this.camGame.zoom),
                1 < this.camGame.zoom && this.camGame.set_zoom(1));
              c = g.keys.justPressed;
              c.keyManager.checkStatusUnsafe(72, c.status) &&
                ("Animations" == this.UI_mainbox.get_selected_tab_id()
                  ? (this.currentGhosts++,
                    2 < this.currentGhosts && (this.currentGhosts = 0),
                    this.ghostLoop.set_visible(1 != this.currentGhosts),
                    this.ghostIdle.set_visible(2 != this.currentGhosts),
                    this.ghostLoop.set_alpha(2 == this.currentGhosts ? 1 : 0.6),
                    this.ghostIdle.set_alpha(1 == this.currentGhosts ? 1 : 0.6))
                  : this.hudGroup.set_visible(!this.hudGroup.visible));
              c = g.keys.justPressed;
              c.keyManager.checkStatusUnsafe(82, c.status) &&
                (this.camGame.set_zoom(1),
                this.mainGroup.setPosition(0, 0),
                this.hudGroup.set_visible(!0));
              this.UI_mainbox.get_selected_tab_id() != this.lastTab &&
                ("Animations" == this.UI_mainbox.get_selected_tab_id()
                  ? (this.hudGroup.set_alpha(0),
                    this.mainGroup.set_alpha(0),
                    this.ghostLoop.set_alpha(0.6),
                    this.ghostIdle.set_alpha(0.6),
                    this.tipText.set_text(vf.TIP_TEXT_OFFSET),
                    this.offsetLoopText.set_visible(!0),
                    this.offsetIdleText.set_visible(!0),
                    this.animText.set_visible(!1),
                    (this.currentGhosts = 0))
                  : (this.hudGroup.set_alpha(1),
                    this.mainGroup.set_alpha(1),
                    this.ghostLoop.set_alpha(0),
                    this.ghostIdle.set_alpha(0),
                    this.tipText.set_text(vf.TIP_TEXT_MAIN),
                    this.offsetLoopText.set_visible(!1),
                    this.offsetIdleText.set_visible(!1),
                    this.animText.set_visible(!0),
                    this.updateTextBox(),
                    this.daText.resetDialogue(),
                    0 > this.curAnim
                      ? (this.curAnim =
                          this.character.jsonFile.animations.length - 1)
                      : this.curAnim >=
                          this.character.jsonFile.animations.length &&
                        (this.curAnim = 0),
                    this.character.playAnim(
                      this.character.jsonFile.animations[this.curAnim].anim
                    ),
                    this.animText.set_text(
                      "Animation: " +
                        this.character.jsonFile.animations[this.curAnim].anim +
                        " (" +
                        (this.curAnim + 1) +
                        " / " +
                        this.character.jsonFile.animations.length +
                        ") - Press W or S to scroll"
                    )),
                (this.lastTab = this.UI_mainbox.get_selected_tab_id()),
                (this.currentGhosts = 0));
              if (
                "Character" == this.UI_mainbox.get_selected_tab_id() &&
                ((b = [1, -1]),
                (c = g.keys.justPressed),
                (e = c.keyManager.checkStatusUnsafe(87, c.status)),
                (c = g.keys.justPressed),
                (e = [e, c.keyManager.checkStatusUnsafe(83, c.status)]),
                -1 != e.indexOf(!0))
              ) {
                c = 0;
                for (d = e.length; c < d; )
                  (r = c++),
                    e[r] &&
                      0 < this.character.jsonFile.animations.length &&
                      ((this.curAnim -= b[r]),
                      0 > this.curAnim
                        ? (this.curAnim =
                            this.character.jsonFile.animations.length - 1)
                        : this.curAnim >=
                            this.character.jsonFile.animations.length &&
                          (this.curAnim = 0),
                      (f =
                        this.character.jsonFile.animations[this.curAnim].anim),
                      Object.prototype.hasOwnProperty.call(
                        this.character.dialogueAnimations.h,
                        f
                      ) &&
                        this.character.playAnim(f, this.daText.finishedText));
                this.animText.set_text(
                  "Animation: " +
                    this.character.jsonFile.animations[this.curAnim].anim +
                    " (" +
                    (this.curAnim + 1) +
                    " / " +
                    this.character.jsonFile.animations.length +
                    ") - Press W or S to scroll"
                );
              }
              c = g.keys.justPressed;
              c.keyManager.checkStatusUnsafe(27, c.status) &&
                (I.switchState(new Zf()),
                (b = g.sound),
                (e = G.returnSound("music", "freakyMenu", null)),
                b.playMusic(e, 1),
                (this.transitioning = !0));
              this.ghostLoop.setPosition(this.character.x, this.character.y);
              this.ghostIdle.setPosition(this.character.x, this.character.y);
              this.hudGroup.set_x(this.mainGroup.x);
              this.hudGroup.set_y(this.mainGroup.y);
            }
          }
          I.prototype.update.call(this, a);
        },
        loadCharacter: function () {
          var a = new Uh("JSON", "json");
          this._file = new oe();
          this._file.addEventListener("select", n(this, this.onLoadComplete));
          this._file.addEventListener("cancel", n(this, this.onLoadCancel));
          this._file.addEventListener("ioError", n(this, this.onLoadError));
          this._file.browse([a]);
        },
        onLoadComplete: function (a) {
          this._file.removeEventListener(
            "select",
            n(this, this.onLoadComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onLoadCancel));
          this._file.removeEventListener("ioError", n(this, this.onLoadError));
          wb.trace("File couldn't be loaded! You aren't on Desktop, are you?", {
            fileName: "source/editors/DialogueCharacterEditorState.hx",
            lineNumber: 866,
            className: "editors.DialogueCharacterEditorState",
            methodName: "onLoadComplete",
          });
        },
        onLoadCancel: function (a) {
          this._file.removeEventListener(
            "select",
            n(this, this.onLoadComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onLoadCancel));
          this._file.removeEventListener("ioError", n(this, this.onLoadError));
          this._file = null;
          wb.trace("Cancelled file loading.", {
            fileName: "source/editors/DialogueCharacterEditorState.hx",
            lineNumber: 879,
            className: "editors.DialogueCharacterEditorState",
            methodName: "onLoadCancel",
          });
        },
        onLoadError: function (a) {
          this._file.removeEventListener(
            "select",
            n(this, this.onLoadComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onLoadCancel));
          this._file.removeEventListener("ioError", n(this, this.onLoadError));
          this._file = null;
          wb.trace("Problem loading file", {
            fileName: "source/editors/DialogueCharacterEditorState.hx",
            lineNumber: 891,
            className: "editors.DialogueCharacterEditorState",
            methodName: "onLoadError",
          });
        },
        saveCharacter: function () {
          var a = JSON.stringify(this.character.jsonFile, null, "\t");
          if (0 < a.length) {
            var b = K.trim(this.imageInputText.text).split("_");
            b = K.replace(b[0].toLowerCase(), " ", "");
            this._file = new oe();
            this._file.addEventListener(
              "complete",
              n(this, this.onSaveComplete)
            );
            this._file.addEventListener("cancel", n(this, this.onSaveCancel));
            this._file.addEventListener("ioError", n(this, this.onSaveError));
            this._file.save(a, b + ".json");
          }
        },
        onSaveComplete: function (a) {
          this._file.removeEventListener(
            "complete",
            n(this, this.onSaveComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onSaveCancel));
          this._file.removeEventListener("ioError", n(this, this.onSaveError));
          this._file = null;
          g.log.advanced("Successfully saved file.", Ja.NOTICE);
        },
        onSaveCancel: function (a) {
          this._file.removeEventListener(
            "complete",
            n(this, this.onSaveComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onSaveCancel));
          this._file.removeEventListener("ioError", n(this, this.onSaveError));
          this._file = null;
        },
        onSaveError: function (a) {
          this._file.removeEventListener(
            "complete",
            n(this, this.onSaveComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onSaveCancel));
          this._file.removeEventListener("ioError", n(this, this.onSaveError));
          this._file = null;
          g.log.advanced("Problem saving file", Ja.ERROR, !0);
        },
        ClipboardAdd: function (a) {
          null == a && (a = "");
          K.endsWith(a.toLowerCase(), "v") &&
            (a = a.substring(0, a.length - 1));
          return a + K.replace(mc.get_text(), "\n", "");
        },
        __class__: vf,
      });
      var wf = function (a, b) {
        this._file = null;
        this.transitioning = !1;
        this.blockPressWhileTypingOn = [];
        this.curSelected = this.curAnim = 0;
        this.dialogueFile = null;
        I.call(this, a, b);
      };
      h["editors.DialogueEditorState"] = wf;
      wf.__name__ = "editors.DialogueEditorState";
      wf.__super__ = I;
      wf.prototype = q(I.prototype, {
        create: function () {
          this.persistentUpdate = this.persistentDraw = !0;
          var a = ob._new(),
            b = 0,
            c = 0 * b + 0.5,
            d = 1;
          null == d && (d = 1);
          b = Math.round(255 * (b + 0.5));
          a = (a & -16711681) | ((255 < b ? 255 : 0 > b ? 0 : b) << 16);
          b = Math.round(255 * c);
          a = (a & -65281) | ((255 < b ? 255 : 0 > b ? 0 : b) << 8);
          b = 128;
          a = (a & -256) | (255 < b ? 255 : 0 > b ? 0 : b);
          b = Math.round(255 * d);
          g.camera.bgColor =
            (a & 16777215) | ((255 < b ? 255 : 0 > b ? 0 : b) << 24);
          this.defaultLine = {
            portrait: dd.DEFAULT_CHARACTER,
            expression: "talk",
            text: wf.DEFAULT_TEXT,
            boxState: wf.DEFAULT_BUBBLETYPE,
            speed: 0.05,
            sound: "",
          };
          this.dialogueFile = { dialogue: [this.copyDefaultLine()] };
          this.character = new dd();
          a = this.character.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.add(this.character);
          a = this.box = new F(70, 370);
          c = G.returnGraphic("speech_bubble", null);
          a.set_frames(
            jb.fromSparrow(
              c,
              G.getPath("images/speech_bubble.xml", "TEXT", null)
            )
          );
          a = this.box.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.box.set_antialiasing(y.globalAntialiasing);
          this.box.animation.addByPrefix("normal", "speech bubble normal", 24);
          this.box.animation.addByPrefix("angry", "AHH speech bubble", 24);
          this.box.animation.addByPrefix("center", "speech bubble middle", 24);
          this.box.animation.addByPrefix(
            "center-angry",
            "AHH Speech Bubble middle",
            24
          );
          this.box.animation.play("normal", !0);
          this.box.setGraphicSize((0.9 * this.box.get_width()) | 0);
          this.box.updateHitbox();
          this.add(this.box);
          this.addEditorBox();
          g.mouse.set_visible(!0);
          c = new W(
            10,
            10,
            g.width - 20,
            "Press O to remove the current dialogue line, Press P to add another line after the current one.",
            8
          );
          c.setFormat(
            "assets/fonts/vcr.ttf",
            16,
            -1,
            "left",
            Ya.OUTLINE,
            -16777216
          );
          a = c.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.add(c);
          this.selectedText = new W(10, 32, g.width - 20, "", 8);
          this.selectedText.setFormat(
            "assets/fonts/vcr.ttf",
            24,
            -1,
            "left",
            Ya.OUTLINE,
            -16777216
          );
          a = this.selectedText.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.add(this.selectedText);
          this.animText = new W(10, 62, g.width - 20, "", 8);
          this.animText.setFormat(
            "assets/fonts/vcr.ttf",
            24,
            -1,
            "left",
            Ya.OUTLINE,
            -16777216
          );
          a = this.animText.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.add(this.animText);
          this.daText = new Ph(
            Ib.DEFAULT_TEXT_X,
            Ib.DEFAULT_TEXT_Y,
            wf.DEFAULT_TEXT
          );
          this.daText.set_scaleX(0.7);
          this.daText.set_scaleY(0.7);
          this.add(this.daText);
          this.changeText();
          I.prototype.create.call(this);
        },
        addEditorBox: function () {
          this.UI_box = new be(
            null,
            null,
            [{ name: "Dialogue Line", label: "Dialogue Line" }],
            null,
            !0
          );
          this.UI_box.resize(250, 210);
          this.UI_box.set_x(g.width - this.UI_box.get_width() - 10);
          this.UI_box.set_y(10);
          var a = this.UI_box.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.UI_box.set_alpha(0.8);
          this.addDialogueLineUI();
          this.add(this.UI_box);
        },
        addDialogueLineUI: function () {
          var a = this,
            b = new Ea(null, this.UI_box);
          b.name = "Dialogue Line";
          this.characterInputText = new qb(10, 20, 80, dd.DEFAULT_CHARACTER, 8);
          this.blockPressWhileTypingOn.push(this.characterInputText);
          this.speedStepper = new Jb(
            10,
            this.characterInputText.y + 40,
            0.005,
            0.05,
            0,
            0.5,
            3
          );
          this.angryCheckbox = new tb(
            this.speedStepper.x + 120,
            this.speedStepper.y,
            null,
            null,
            "Angry Textbox",
            200
          );
          this.angryCheckbox.callback = function () {
            a.updateTextBox();
            a.dialogueFile.dialogue[a.curSelected].boxState = a.angryCheckbox
              .checked
              ? "angry"
              : "normal";
          };
          this.soundInputText = new qb(
            10,
            this.speedStepper.y + 40,
            150,
            "",
            8
          );
          this.blockPressWhileTypingOn.push(this.soundInputText);
          this.lineInputText = new qb(
            10,
            this.soundInputText.y + 35,
            200,
            wf.DEFAULT_TEXT,
            8
          );
          this.blockPressWhileTypingOn.push(this.lineInputText);
          var c = new lb(
              20,
              this.lineInputText.y + 25,
              "Load Dialogue",
              function () {
                a.loadDialogue();
              }
            ),
            d = new lb(c.x + 120, c.y, "Save Dialogue", function () {
              a.saveDialogue();
            });
          b.add(new W(10, this.speedStepper.y - 18, 0, "Interval/Speed (ms):"));
          b.add(new W(10, this.characterInputText.y - 18, 0, "Character:"));
          b.add(new W(10, this.soundInputText.y - 18, 0, "Sound file name:"));
          b.add(new W(10, this.lineInputText.y - 18, 0, "Text:"));
          b.add(this.characterInputText);
          b.add(this.angryCheckbox);
          b.add(this.speedStepper);
          b.add(this.soundInputText);
          b.add(this.lineInputText);
          b.add(c);
          b.add(d);
          this.UI_box.addGroup(b);
        },
        copyDefaultLine: function () {
          return {
            portrait: this.defaultLine.portrait,
            expression: this.defaultLine.expression,
            text: this.defaultLine.text,
            boxState: this.defaultLine.boxState,
            speed: this.defaultLine.speed,
            sound: "",
          };
        },
        updateTextBox: function () {
          this.box.set_flipX(!1);
          var a = this.angryCheckbox.checked,
            b = a ? "angry" : "normal";
          switch (this.character.jsonFile.dialogue_pos) {
            case "center":
              b = a ? "center-angry" : "center";
              break;
            case "left":
              this.box.set_flipX(!0);
          }
          this.box.animation.play(b, !0);
          Ib.updateBoxOffsets(this.box);
        },
        reloadCharacter: function () {
          var a = this.character,
            b = "dialogue/" + this.character.jsonFile.image,
            c = G.returnGraphic(b, null);
          a.set_frames(
            jb.fromSparrow(c, G.getPath("images/" + b + ".xml", "TEXT", null))
          );
          this.character.jsonFile = this.character.jsonFile;
          this.character.reloadAnimations();
          this.character.setGraphicSize(
            (this.character.get_width() *
              dd.DEFAULT_SCALE *
              this.character.jsonFile.scale) |
              0
          );
          this.character.updateHitbox();
          this.character.set_x(Ib.LEFT_CHAR_X);
          this.character.set_y(Ib.DEFAULT_CHAR_Y);
          switch (this.character.jsonFile.dialogue_pos) {
            case "center":
              this.character.set_x(g.width / 2);
              a = this.character;
              a.set_x(a.x - this.character.get_width() / 2);
              break;
            case "right":
              this.character.set_x(
                g.width - this.character.get_width() + Ib.RIGHT_CHAR_X
              );
          }
          a = this.character;
          a.set_x(a.x + this.character.jsonFile.position[0]);
          a = this.character;
          a.set_y(a.y + this.character.jsonFile.position[1]);
          this.character.playAnim();
          this.characterAnimSpeed();
          null != this.character.animation._curAnim &&
          null != this.character.jsonFile.animations
            ? this.animText.set_text(
                "Animation: " +
                  this.character.jsonFile.animations[this.curAnim].anim +
                  " (" +
                  (this.curAnim + 1) +
                  " / " +
                  this.character.jsonFile.animations.length +
                  ") - Press W or S to scroll"
              )
            : this.animText.set_text("ERROR! NO ANIMATIONS FOUND");
        },
        reloadText: function (a) {
          var b = this.lineInputText.text;
          if (null == b || 1 > b.length) b = " ";
          this.daText.set_text(b);
          this.daText.resetDialogue();
          a
            ? this.daText.finishText()
            : 0 < this.daText.delay &&
              (this.character.jsonFile.animations.length > this.curAnim &&
                null != this.character.jsonFile.animations[this.curAnim] &&
                this.character.playAnim(
                  this.character.jsonFile.animations[this.curAnim].anim
                ),
              this.characterAnimSpeed());
          this.daText.set_y(Ib.DEFAULT_TEXT_Y);
          2 < this.daText.rows &&
            ((a = this.daText), a.set_y(a.y - Ib.LONG_TEXT_ADD));
        },
        getEvent: function (a, b, c, d) {
          if ("change_input_text" == a && b instanceof qb)
            b == this.characterInputText
              ? (this.character.reloadCharacterJson(
                  this.characterInputText.text
                ),
                this.reloadCharacter(),
                0 < this.character.jsonFile.animations.length &&
                  ((this.curAnim = 0),
                  this.character.jsonFile.animations.length > this.curAnim &&
                  null != this.character.jsonFile.animations[this.curAnim]
                    ? (this.character.playAnim(
                        this.character.jsonFile.animations[this.curAnim].anim,
                        this.daText.finishedText
                      ),
                      this.animText.set_text(
                        "Animation: " +
                          this.character.jsonFile.animations[this.curAnim]
                            .anim +
                          " (" +
                          (this.curAnim + 1) +
                          " / " +
                          this.character.jsonFile.animations.length +
                          ") - Press W or S to scroll"
                      ))
                    : this.animText.set_text("ERROR! NO ANIMATIONS FOUND"),
                  this.characterAnimSpeed()),
                (this.dialogueFile.dialogue[this.curSelected].portrait =
                  this.characterInputText.text),
                this.reloadText(!1),
                this.updateTextBox())
              : b == this.lineInputText
              ? ((this.dialogueFile.dialogue[this.curSelected].text =
                  this.lineInputText.text),
                this.daText.set_text(this.lineInputText.text),
                null == this.daText.text && this.daText.set_text(""),
                this.reloadText(!0))
              : b == this.soundInputText &&
                (this.daText.finishText(),
                (this.dialogueFile.dialogue[this.curSelected].sound =
                  this.soundInputText.text),
                (this.daText.sound = this.soundInputText.text),
                null == this.daText.sound && (this.daText.sound = ""));
          else if ("change_numeric_stepper" == a && b == this.speedStepper) {
            this.dialogueFile.dialogue[this.curSelected].speed =
              this.speedStepper.value;
            if (
              isNaN(this.dialogueFile.dialogue[this.curSelected].speed) ||
              null == this.dialogueFile.dialogue[this.curSelected].speed ||
              0.001 > this.dialogueFile.dialogue[this.curSelected].speed
            )
              this.dialogueFile.dialogue[this.curSelected].speed = 0;
            this.daText.delay =
              this.dialogueFile.dialogue[this.curSelected].speed;
            this.reloadText(!1);
          }
        },
        update: function (a) {
          if (!this.transitioning) {
            null != this.character.animation._curAnim &&
              (this.daText.finishedText
                ? this.character.animationIsLoop() &&
                  this.character.animation._curAnim.finished &&
                  this.character.playAnim(
                    this.character.animation._curAnim.name,
                    !0
                  )
                : this.character.animation._curAnim.finished &&
                  this.character.animation._curAnim.restart());
            for (
              var b = !1, c = 0, d = this.blockPressWhileTypingOn;
              c < d.length;

            ) {
              var e = d[c];
              ++c;
              if (e.hasFocus) {
                g.sound.muteKeys = [];
                g.sound.volumeDownKeys = [];
                g.sound.volumeUpKeys = [];
                b = !0;
                c = g.keys.justPressed;
                c.keyManager.checkStatusUnsafe(13, c.status) &&
                  (e == this.lineInputText
                    ? (e.set_text(e.text + "\\n"),
                      e.set_caretIndex(e.caretIndex + 2))
                    : e.set_hasFocus(!1));
                break;
              }
            }
            if (!b) {
              g.sound.muteKeys = cb.muteKeys;
              g.sound.volumeDownKeys = cb.volumeDownKeys;
              g.sound.volumeUpKeys = cb.volumeUpKeys;
              c = g.keys.justPressed;
              c.keyManager.checkStatusUnsafe(32, c.status) &&
                this.reloadText(!1);
              c = g.keys.justPressed;
              c.keyManager.checkStatusUnsafe(27, c.status) &&
                (I.switchState(new Zf()),
                (b = g.sound),
                (c = G.returnSound("music", "freakyMenu", null)),
                b.playMusic(c, 1),
                (this.transitioning = !0));
              b = [1, -1];
              c = g.keys.justPressed;
              d = c.keyManager.checkStatusUnsafe(87, c.status);
              c = g.keys.justPressed;
              e = [d, c.keyManager.checkStatusUnsafe(83, c.status)];
              c = g.keys.justPressed;
              d = c.keyManager.checkStatusUnsafe(68, c.status);
              c = g.keys.justPressed;
              var f = [d, c.keyManager.checkStatusUnsafe(65, c.status)];
              c = 0;
              for (d = e.length; c < d; ) {
                var k = c++;
                if (e[k] && 0 < this.character.jsonFile.animations.length) {
                  this.curAnim -= b[k];
                  0 > this.curAnim
                    ? (this.curAnim =
                        this.character.jsonFile.animations.length - 1)
                    : this.curAnim >=
                        this.character.jsonFile.animations.length &&
                      (this.curAnim = 0);
                  var r = this.character.jsonFile.animations[this.curAnim].anim;
                  Object.prototype.hasOwnProperty.call(
                    this.character.dialogueAnimations.h,
                    r
                  ) &&
                    (this.character.playAnim(r, this.daText.finishedText),
                    (this.dialogueFile.dialogue[this.curSelected].expression =
                      r));
                  this.animText.set_text(
                    "Animation: " +
                      r +
                      " (" +
                      (this.curAnim + 1) +
                      " / " +
                      this.character.jsonFile.animations.length +
                      ") - Press W or S to scroll"
                  );
                }
                f[k] && this.changeText(b[k]);
              }
              c = g.keys.justPressed;
              c.keyManager.checkStatusUnsafe(79, c.status)
                ? (X.remove(
                    this.dialogueFile.dialogue,
                    this.dialogueFile.dialogue[this.curSelected]
                  ),
                  1 > this.dialogueFile.dialogue.length &&
                    ((b = this.copyDefaultLine()),
                    (this.dialogueFile.dialogue = [b])),
                  this.changeText())
                : ((c = g.keys.justPressed),
                  c.keyManager.checkStatusUnsafe(80, c.status) &&
                    ((c = this.dialogueFile.dialogue),
                    (b = this.curSelected + 1),
                    (d = this.copyDefaultLine()),
                    c.splice(b, 0, d),
                    this.changeText(1)));
            }
          }
          I.prototype.update.call(this, a);
        },
        changeText: function (a) {
          null == a && (a = 0);
          this.curSelected += a;
          0 > this.curSelected
            ? (this.curSelected = this.dialogueFile.dialogue.length - 1)
            : this.curSelected >= this.dialogueFile.dialogue.length &&
              (this.curSelected = 0);
          a = this.dialogueFile.dialogue[this.curSelected];
          this.characterInputText.set_text(a.portrait);
          this.lineInputText.set_text(a.text);
          this.angryCheckbox.set_checked("angry" == a.boxState);
          this.speedStepper.set_value(a.speed);
          null == a.sound && (a.sound = "");
          this.soundInputText.set_text(a.sound);
          this.daText.delay = this.speedStepper.value;
          this.daText.sound = this.soundInputText.text;
          null != this.daText.sound &&
            "" == K.trim(this.daText.sound) &&
            (this.daText.sound = "dialogue");
          this.curAnim = 0;
          this.character.reloadCharacterJson(this.characterInputText.text);
          this.reloadCharacter();
          this.reloadText(!1);
          this.updateTextBox();
          var b = this.character.jsonFile.animations.length;
          if (0 < b) {
            for (var c = 0; c < b; ) {
              var d = c++,
                e = this.character.jsonFile.animations[d];
              if (null != e && e.anim == a.expression) {
                this.curAnim = d;
                break;
              }
            }
            this.character.playAnim(
              this.character.jsonFile.animations[this.curAnim].anim,
              this.daText.finishedText
            );
            this.animText.set_text(
              "Animation: " +
                this.character.jsonFile.animations[this.curAnim].anim +
                " (" +
                (this.curAnim + 1) +
                " / " +
                b +
                ") - Press W or S to scroll"
            );
          } else this.animText.set_text("ERROR! NO ANIMATIONS FOUND");
          this.characterAnimSpeed();
          this.selectedText.set_text(
            "Line: (" +
              (this.curSelected + 1) +
              " / " +
              this.dialogueFile.dialogue.length +
              ") - Press A or D to scroll"
          );
        },
        characterAnimSpeed: function () {
          if (null != this.character.animation._curAnim) {
            var a = 24 - ((this.speedStepper.value - 0.05) / 5) * 480;
            12 > a ? (a = 12) : 48 < a && (a = 48);
            this.character.animation._curAnim.set_frameRate(a);
          }
        },
        loadDialogue: function () {
          var a = new Uh("JSON", "json");
          this._file = new oe();
          this._file.addEventListener("select", n(this, this.onLoadComplete));
          this._file.addEventListener("cancel", n(this, this.onLoadCancel));
          this._file.addEventListener("ioError", n(this, this.onLoadError));
          this._file.browse([a]);
        },
        onLoadComplete: function (a) {
          this._file.removeEventListener(
            "select",
            n(this, this.onLoadComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onLoadCancel));
          this._file.removeEventListener("ioError", n(this, this.onLoadError));
          wb.trace("File couldn't be loaded! You aren't on Desktop, are you?", {
            fileName: "source/editors/DialogueEditorState.hx",
            lineNumber: 589,
            className: "editors.DialogueEditorState",
            methodName: "onLoadComplete",
          });
        },
        onLoadCancel: function (a) {
          this._file.removeEventListener(
            "select",
            n(this, this.onLoadComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onLoadCancel));
          this._file.removeEventListener("ioError", n(this, this.onLoadError));
          this._file = null;
          wb.trace("Cancelled file loading.", {
            fileName: "source/editors/DialogueEditorState.hx",
            lineNumber: 602,
            className: "editors.DialogueEditorState",
            methodName: "onLoadCancel",
          });
        },
        onLoadError: function (a) {
          this._file.removeEventListener(
            "select",
            n(this, this.onLoadComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onLoadCancel));
          this._file.removeEventListener("ioError", n(this, this.onLoadError));
          this._file = null;
          wb.trace("Problem loading file", {
            fileName: "source/editors/DialogueEditorState.hx",
            lineNumber: 614,
            className: "editors.DialogueEditorState",
            methodName: "onLoadError",
          });
        },
        saveDialogue: function () {
          var a = JSON.stringify(this.dialogueFile, null, "\t");
          0 < a.length &&
            ((this._file = new oe()),
            this._file.addEventListener(
              "complete",
              n(this, this.onSaveComplete)
            ),
            this._file.addEventListener("cancel", n(this, this.onSaveCancel)),
            this._file.addEventListener("ioError", n(this, this.onSaveError)),
            this._file.save(a, "dialogue.json"));
        },
        onSaveComplete: function (a) {
          this._file.removeEventListener(
            "complete",
            n(this, this.onSaveComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onSaveCancel));
          this._file.removeEventListener("ioError", n(this, this.onSaveError));
          this._file = null;
          g.log.advanced("Successfully saved file.", Ja.NOTICE);
        },
        onSaveCancel: function (a) {
          this._file.removeEventListener(
            "complete",
            n(this, this.onSaveComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onSaveCancel));
          this._file.removeEventListener("ioError", n(this, this.onSaveError));
          this._file = null;
        },
        onSaveError: function (a) {
          this._file.removeEventListener(
            "complete",
            n(this, this.onSaveComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onSaveCancel));
          this._file.removeEventListener("ioError", n(this, this.onSaveError));
          this._file = null;
          g.log.advanced("Problem saving file", Ja.ERROR, !0);
        },
        __class__: wf,
      });
      var Vi = function (a) {
        this.COMBO_Y = 340;
        this.COMBO_X = 400;
        this.combo = 0;
        this.spawnTime = 2e3;
        this.noteKillOffset = 350;
        this.startingSong = !0;
        this.songHits = this.songMisses = 0;
        this.noteTypeMap = new Q();
        this.startOffset = this.startPos = this.timerToStart = 0;
        this.generatedMusic = !1;
        this.unspawnNotes = [];
        this.startPos = a;
        P.songPosition = a - this.startOffset;
        this.timerToStart = this.startOffset = P.crochet;
        I.call(this);
      };
      h["editors.EditorPlayState"] = Vi;
      Vi.__name__ = "editors.EditorPlayState";
      Vi.__super__ = I;
      Vi.prototype = q(I.prototype, {
        create: function () {
          Vi.instance = this;
          var a = new F(),
            b = G.returnGraphic("menuDesat", null);
          b = a.loadGraphic(b);
          a = b.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          b.set_color(
            ob.fromHSB(
              g.random.int(0, 359),
              g.random.float(0, 0.8),
              g.random.float(0.3, 1)
            )
          );
          this.add(b);
          this.keysArray = [
            y.copyKey(y.keyBinds.h.note_left),
            y.copyKey(y.keyBinds.h.note_down),
            y.copyKey(y.keyBinds.h.note_up),
            y.copyKey(y.keyBinds.h.note_right),
          ];
          this.strumLine = new F(
            y.middleScroll ? C.STRUM_X_MIDDLESCROLL : C.STRUM_X,
            50
          ).makeGraphic(g.width, 10);
          y.downScroll && this.strumLine.set_y(g.height - 150);
          a = this.strumLine.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.comboGroup = new ma();
          this.add(this.comboGroup);
          this.strumLineNotes = new ma();
          this.opponentStrums = new ma();
          this.playerStrums = new ma();
          this.add(this.strumLineNotes);
          this.generateStaticArrows(0);
          this.generateStaticArrows(1);
          this.grpNoteSplashes = new ma();
          this.add(this.grpNoteSplashes);
          a = new rh(100, 100, 0);
          this.grpNoteSplashes.add(a);
          a.set_alpha(0);
          this.vocals = C.SONG.needsVoices
            ? new Ce().loadEmbedded(
                "songs:assets/songs/" +
                  K.replace(C.SONG.song.toLowerCase(), " ", "-") +
                  "/Voices.mp3"
              )
            : new Ce();
          this.generateSong(C.SONG.song);
          this.noteTypeMap.h = Object.create(null);
          this.noteTypeMap = null;
          this.scoreTxt = new W(
            10,
            g.height - 50,
            g.width - 20,
            "Hits: 0 | Misses: 0",
            20
          );
          this.scoreTxt.setFormat(
            "assets/fonts/vcr.ttf",
            20,
            -1,
            "center",
            Ya.OUTLINE,
            -16777216
          );
          a = this.scoreTxt.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.scoreTxt.set_borderSize(1.25);
          this.scoreTxt.set_visible(!y.hideHud);
          this.add(this.scoreTxt);
          this.sectionTxt = new W(10, 580, g.width - 20, "Section: 0", 20);
          this.sectionTxt.setFormat(
            "assets/fonts/vcr.ttf",
            20,
            -1,
            "center",
            Ya.OUTLINE,
            -16777216
          );
          a = this.sectionTxt.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.sectionTxt.set_borderSize(1.25);
          this.add(this.sectionTxt);
          this.beatTxt = new W(
            10,
            this.sectionTxt.y + 30,
            g.width - 20,
            "Beat: 0",
            20
          );
          this.beatTxt.setFormat(
            "assets/fonts/vcr.ttf",
            20,
            -1,
            "center",
            Ya.OUTLINE,
            -16777216
          );
          a = this.beatTxt.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.beatTxt.set_borderSize(1.25);
          this.add(this.beatTxt);
          this.stepTxt = new W(
            10,
            this.beatTxt.y + 30,
            g.width - 20,
            "Step: 0",
            20
          );
          this.stepTxt.setFormat(
            "assets/fonts/vcr.ttf",
            20,
            -1,
            "center",
            Ya.OUTLINE,
            -16777216
          );
          a = this.stepTxt.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.stepTxt.set_borderSize(1.25);
          this.add(this.stepTxt);
          b = new W(
            10,
            g.height - 24,
            0,
            "Press ESC to Go Back to Chart Editor",
            16
          );
          b.setFormat(
            "assets/fonts/vcr.ttf",
            16,
            -1,
            "left",
            Ya.OUTLINE,
            -16777216
          );
          b.set_borderSize(2);
          a = b.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.add(b);
          g.mouse.set_visible(!1);
          y.controllerMode ||
            (sa
              .get_current()
              .stage.addEventListener("keyDown", n(this, this.onKeyPress)),
            sa
              .get_current()
              .stage.addEventListener("keyUp", n(this, this.onKeyRelease)));
          I.prototype.create.call(this);
        },
        sayGo: function () {
          var a = new F(),
            b = G.returnGraphic("go", null),
            c = a.loadGraphic(b);
          a = c.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          c.updateHitbox();
          c.set_x((g.width - c.get_width()) / 2);
          c.set_y((g.height - c.get_height()) / 2);
          c.set_antialiasing(y.globalAntialiasing);
          this.add(c);
          la.tween(c, { y: c.set_y(c.y + 100), alpha: 0 }, P.crochet / 1e3, {
            ease: Aa.cubeInOut,
            onComplete: function (a) {
              c.destroy();
            },
          });
          g.sound.play(G.sound("introGo"), 0.6);
        },
        generateSong: function (a) {
          g.sound.playMusic(
            "songs:assets/songs/" +
              K.replace(C.SONG.song.toLowerCase(), " ", "-") +
              "/Inst.mp3",
            0,
            !1
          );
          g.sound.music.pause();
          g.sound.music.onComplete = n(this, this.endSong);
          this.vocals.pause();
          this.vocals.set_volume(0);
          a = C.SONG;
          P.changeBPM(a.bpm);
          this.notes = new ma();
          this.add(this.notes);
          a = a.notes;
          for (var b = 0, c = 0; c < a.length; ) {
            var d = a[c];
            ++c;
            for (var e = 0, f = d.sectionNotes; e < f.length; ) {
              var k = f[e];
              ++e;
              if (-1 < k[1]) {
                var r = k[0];
                if (r >= this.startPos) {
                  var l = k[1] % 4 | 0,
                    J = d.mustHitSection;
                  3 < k[1] && (J = !d.mustHitSection);
                  var u =
                    0 < this.unspawnNotes.length
                      ? this.unspawnNotes[(this.unspawnNotes.length - 1) | 0]
                      : null;
                  var m = new Id(r, l, u);
                  m.mustPress = J;
                  m.sustainLength = k[2];
                  m.set_noteType(k[3]);
                  "string" != typeof k[3] &&
                    m.set_noteType(da.noteTypeList[k[3]]);
                  k = m.scrollFactor;
                  k.set_x(0);
                  k.set_y(0);
                  k = m.sustainLength;
                  k /= P.stepCrochet;
                  this.unspawnNotes.push(m);
                  var h = Math.floor(k);
                  if (0 < h)
                    for (k = 0, h += 1; k < h; ) {
                      var p = k++;
                      u = this.unspawnNotes[(this.unspawnNotes.length - 1) | 0];
                      u = new Id(
                        r +
                          P.stepCrochet * p +
                          P.stepCrochet / hc.roundDecimal(C.SONG.speed, 2),
                        l,
                        u,
                        !0
                      );
                      u.mustPress = J;
                      u.set_noteType(m.noteType);
                      p = u.scrollFactor;
                      p.set_x(0);
                      p.set_y(0);
                      this.unspawnNotes.push(u);
                      u.mustPress
                        ? u.set_x(u.x + g.width / 2)
                        : y.middleScroll &&
                          (u.set_x(u.x + 310),
                          1 < l && u.set_x(u.x + (g.width / 2 + 25)));
                    }
                  m.mustPress
                    ? m.set_x(m.x + g.width / 2)
                    : y.middleScroll &&
                      (m.set_x(m.x + 310),
                      1 < l && m.set_x(m.x + (g.width / 2 + 25)));
                  Object.prototype.hasOwnProperty.call(
                    this.noteTypeMap.h,
                    m.noteType
                  ) || (this.noteTypeMap.h[m.noteType] = !0);
                }
              }
            }
            ++b;
          }
          this.unspawnNotes.sort(n(this, this.sortByShit));
          this.generatedMusic = !0;
        },
        startSong: function () {
          this.startingSong = !1;
          g.sound.music.set_time(this.startPos);
          g.sound.music.play();
          g.sound.music.set_volume(1);
          this.vocals.set_volume(1);
          this.vocals.set_time(this.startPos);
          this.vocals.play();
        },
        sortByShit: function (a, b) {
          a = a.strumTime;
          b = b.strumTime;
          var c = 0;
          a < b ? (c = -1) : a > b && (c = 1);
          return c;
        },
        endSong: function () {
          I.switchState(Lb.getNextState(new da(), !1));
        },
        update: function (a) {
          var b = this,
            c = g.keys.justPressed;
          c.keyManager.checkStatusUnsafe(27, c.status) &&
            (g.sound.music.pause(),
            this.vocals.pause(),
            I.switchState(Lb.getNextState(new da(), !1)));
          this.startingSong
            ? ((this.timerToStart -= 1e3 * a),
              (P.songPosition = this.startPos - this.timerToStart),
              0 > this.timerToStart && this.startSong())
            : (P.songPosition += 1e3 * a);
          if (null != this.unspawnNotes[0])
            for (
              c = this.spawnTime,
                1 > C.SONG.speed && (c /= C.SONG.speed),
                1 > this.unspawnNotes[0].multSpeed &&
                  (c /= this.unspawnNotes[0].multSpeed);
              0 < this.unspawnNotes.length &&
              this.unspawnNotes[0].strumTime - P.songPosition < c;

            ) {
              var d = this.unspawnNotes[0];
              this.notes.insert(0, d);
              d.spawned = !0;
              d = this.unspawnNotes.indexOf(d);
              this.unspawnNotes.splice(d, 1);
            }
          if (this.generatedMusic) {
            var e = (60 / C.SONG.bpm) * 1e3;
            this.notes.forEachAlive(function (a) {
              var c = 0,
                d = 0,
                f = 0;
              a.mustPress
                ? ((c = b.playerStrums.members[a.noteData].x),
                  (d = b.playerStrums.members[a.noteData].y),
                  (f = b.playerStrums.members[a.noteData].alpha))
                : ((c = b.opponentStrums.members[a.noteData].x),
                  (d = b.opponentStrums.members[a.noteData].y),
                  (f = b.opponentStrums.members[a.noteData].alpha));
              c += a.offsetX;
              d += a.offsetY;
              var g = d + Id.swagWidth / 2;
              a.copyAlpha && a.set_alpha(f * a.multAlpha);
              a.copyX && a.set_x(c);
              a.copyY &&
                (y.downScroll
                  ? (a.set_y(
                      d + 0.45 * (P.songPosition - a.strumTime) * C.SONG.speed
                    ),
                    a.isSustainNote &&
                      (K.endsWith(a.animation._curAnim.name, "end") &&
                        (a.set_y(
                          a.y +
                            ((e / 400) * 15.75 * C.SONG.speed +
                              46 * (C.SONG.speed - 1))
                        ),
                        a.set_y(a.y - 46 * (1 - e / 600) * C.SONG.speed),
                        C.isPixelStage ? a.set_y(a.y + 8) : a.set_y(a.y - 19)),
                      a.set_y(
                        a.y + (Id.swagWidth / 2 - 60.5 * (C.SONG.speed - 1))
                      ),
                      a.set_y(
                        a.y + 27.5 * (C.SONG.bpm / 100 - 1) * (C.SONG.speed - 1)
                      ),
                      (a.mustPress || !a.ignoreNote) &&
                        a.y - a.offset.y * a.scale.y + a.get_height() >= g &&
                        (!a.mustPress ||
                          a.wasGoodHit ||
                          (a.prevNote.wasGoodHit && !a.canBeHit)) &&
                        ((c = new Ga(0, 0, a.frameWidth, a.frameHeight)),
                        (c.height = (g - a.y) / a.scale.y),
                        (c.y = a.frameHeight - c.height),
                        a.set_clipRect(c))))
                  : (a.set_y(
                      d - 0.45 * (P.songPosition - a.strumTime) * C.SONG.speed
                    ),
                    (a.mustPress || !a.ignoreNote) &&
                      a.isSustainNote &&
                      a.y + a.offset.y * a.scale.y <= g &&
                      (!a.mustPress ||
                        a.wasGoodHit ||
                        (a.prevNote.wasGoodHit && !a.canBeHit)) &&
                      ((c = new Ga(
                        0,
                        0,
                        a.get_width() / a.scale.x,
                        a.get_height() / a.scale.y
                      )),
                      (c.y = (g - a.y) / a.scale.y),
                      (c.height -= c.y),
                      a.set_clipRect(c))));
              a.mustPress ||
                !a.wasGoodHit ||
                a.hitByOpponent ||
                a.ignoreNote ||
                (C.SONG.needsVoices && b.vocals.set_volume(1),
                (g = 0.15),
                a.isSustainNote &&
                  !K.endsWith(a.animation._curAnim.name, "end") &&
                  (g += 0.15),
                b.StrumPlayAnim(!0, (Math.abs(a.noteData) | 0) % 4, g),
                (a.hitByOpponent = !0),
                a.isSustainNote ||
                  (a.kill(), b.notes.remove(a, !0), a.destroy()));
              P.songPosition > b.noteKillOffset / C.SONG.speed + a.strumTime &&
                (!a.mustPress ||
                  (!a.tooLate && a.wasGoodHit) ||
                  (b.notes.forEachAlive(function (c) {
                    a != c &&
                      a.mustPress &&
                      a.noteData == c.noteData &&
                      a.isSustainNote == c.isSustainNote &&
                      10 > Math.abs(a.strumTime - c.strumTime) &&
                      (c.kill(), b.notes.remove(c, !0), c.destroy());
                  }),
                  a.ignoreNote || (b.songMisses++, b.vocals.set_volume(0))),
                a.set_active(!1),
                a.set_visible(!1),
                a.kill(),
                b.notes.remove(a, !0),
                a.destroy());
            });
          }
          this.keyShit();
          this.scoreTxt.set_text(
            "Hits: " + this.songHits + " | Misses: " + this.songMisses
          );
          this.sectionTxt.set_text("Beat: " + this.curSection);
          this.beatTxt.set_text("Beat: " + this.curBeat);
          this.stepTxt.set_text("Step: " + this.curStep);
          I.prototype.update.call(this, a);
        },
        onFocus: function () {
          this.vocals.play();
          I.prototype.onFocus.call(this);
        },
        onFocusLost: function () {
          this.vocals.pause();
          I.prototype.onFocusLost.call(this);
        },
        beatHit: function () {
          I.prototype.beatHit.call(this);
          if (this.generatedMusic) {
            var a = y.downScroll ? -1 : 1;
            null == a && (a = -1);
            var b = Um.byY,
              c = a;
            this.notes.members.sort(function (a, e) {
              return b(c, a, e);
            });
          }
        },
        stepHit: function () {
          I.prototype.stepHit.call(this);
          (g.sound.music._time > P.songPosition + 20 ||
            g.sound.music._time < P.songPosition - 20) &&
            this.resyncVocals();
        },
        resyncVocals: function () {
          this.vocals.pause();
          g.sound.music.play();
          P.songPosition = g.sound.music._time;
          this.vocals.set_time(P.songPosition);
          this.vocals.play();
        },
        onKeyPress: function (a) {
          a = a.keyCode;
          var b = this.getKeyFromEvent(a);
          if (-1 < b && (g.keys.checkStatus(a, 2) || y.controllerMode)) {
            if (this.generatedMusic) {
              a = P.songPosition;
              P.songPosition = g.sound.music._time;
              var c = !y.ghostTapping,
                d = [],
                e = !1,
                f = [];
              this.notes.forEachAlive(function (a) {
                !a.canBeHit ||
                  !a.mustPress ||
                  a.tooLate ||
                  a.wasGoodHit ||
                  a.isSustainNote ||
                  (a.noteData == b && f.push(a), (c = !0));
              });
              f.sort(n(this, this.sortHitNotes));
              if (0 < f.length)
                for (var k = 0; k < f.length; ) {
                  var r = f[k];
                  ++k;
                  for (var l = 0; l < d.length; ) {
                    var J = d[l];
                    ++l;
                    1 > Math.abs(J.strumTime - r.strumTime)
                      ? (J.kill(), this.notes.remove(J, !0), J.destroy())
                      : (e = !0);
                  }
                  e || (this.goodNoteHit(r), d.push(r));
                }
              else c && y.ghostTapping && this.noteMiss();
              P.songPosition = a;
            }
            a = this.playerStrums.members[b];
            null != a &&
              "confirm" != a.animation._curAnim.name &&
              (a.playAnim("pressed"), (a.resetAnim = 0));
          }
        },
        sortHitNotes: function (a, b) {
          if (a.lowPriority && !b.lowPriority) return 1;
          if (!a.lowPriority && b.lowPriority) return -1;
          a = a.strumTime;
          b = b.strumTime;
          var c = 0;
          a < b ? (c = -1) : a > b && (c = 1);
          return c;
        },
        onKeyRelease: function (a) {
          a = this.getKeyFromEvent(a.keyCode);
          -1 < a &&
            ((a = this.playerStrums.members[a]),
            null != a && (a.playAnim("static"), (a.resetAnim = 0)));
        },
        getKeyFromEvent: function (a) {
          if (-1 != a)
            for (var b = 0, c = this.keysArray.length; b < c; )
              for (var d = b++, e = 0, f = this.keysArray[d].length; e < f; ) {
                var k = e++;
                if (a == this.keysArray[d][k]) return d;
              }
          return -1;
        },
        keyShit: function () {
          var a = this,
            b = ia.player1.controls._note_up.check(),
            c = ia.player1.controls._note_right.check(),
            d = ia.player1.controls._note_down.check(),
            e = [ia.player1.controls._note_left.check(), d, b, c];
          if (
            y.controllerMode &&
            ((b = [
              ia.player1.controls._note_leftP.check(),
              ia.player1.controls._note_downP.check(),
              ia.player1.controls._note_upP.check(),
              ia.player1.controls._note_rightP.check(),
            ]),
            -1 != b.indexOf(!0))
          )
            for (c = 0, d = b.length; c < d; ) {
              var f = c++;
              if (b[f])
                this.onKeyPress(
                  new Ng("keyDown", !0, !0, -1, this.keysArray[f][0])
                );
            }
          this.generatedMusic &&
            this.notes.forEachAlive(function (b) {
              b.isSustainNote &&
                e[b.noteData] &&
                b.canBeHit &&
                b.mustPress &&
                !b.tooLate &&
                !b.wasGoodHit &&
                a.goodNoteHit(b);
            });
          if (
            y.controllerMode &&
            ((b = [
              ia.player1.controls._note_leftR.check(),
              ia.player1.controls._note_downR.check(),
              ia.player1.controls._note_upR.check(),
              ia.player1.controls._note_rightR.check(),
            ]),
            -1 != b.indexOf(!0))
          )
            for (c = 0, d = b.length; c < d; )
              if (((f = c++), b[f]))
                this.onKeyRelease(
                  new Ng("keyUp", !0, !0, -1, this.keysArray[f][0])
                );
        },
        goodNoteHit: function (a) {
          a.wasGoodHit ||
            ("Hurt Note" == a.noteType
              ? (this.noteMiss(),
                --this.songMisses,
                a.isSustainNote ||
                  a.noteSplashDisabled ||
                  this.spawnNoteSplashOnNote(a),
                (a.wasGoodHit = !0),
                this.vocals.set_volume(0))
              : (a.isSustainNote ||
                  ((this.combo += 1),
                  9999 < this.combo && (this.combo = 9999),
                  this.popUpScore(a),
                  this.songHits++),
                this.playerStrums.forEach(function (b) {
                  Math.abs(a.noteData) == b.ID && b.playAnim("confirm", !0);
                }),
                (a.wasGoodHit = !0),
                this.vocals.set_volume(1)),
            a.isSustainNote ||
              (a.kill(), this.notes.remove(a, !0), a.destroy()));
        },
        noteMiss: function () {
          this.combo = 0;
          this.songMisses++;
          g.sound.play(
            G.sound("missnote" + g.random.int(1, 3), null),
            g.random.float(0.1, 0.2)
          );
          this.vocals.set_volume(0);
        },
        popUpScore: function (a) {
          var b = Math.abs(a.strumTime - P.songPosition + y.ratingOffset);
          this.vocals.set_volume(1);
          var c = M.string(this.combo),
            d = new W(0, 0, 0, c, 32);
          d.set_x(this.COMBO_X);
          d.set_y(this.COMBO_Y);
          var e = new F();
          c = "sick";
          b > 0.75 * P.safeZoneOffset
            ? (c = "shit")
            : b > 0.5 * P.safeZoneOffset
            ? (c = "bad")
            : b > 0.25 * P.safeZoneOffset && (c = "good");
          "sick" != c || a.noteSplashDisabled || this.spawnNoteSplashOnNote(a);
          b = a = "";
          C.isPixelStage && ((a = "pixelUI/"), (b = "-pixel"));
          var f = G.returnGraphic(a + c + b, null);
          e.loadGraphic(f);
          e.set_x((g.width - e.get_width()) / 2);
          e.set_y((g.height - e.get_height()) / 2);
          e.set_x(d.x - 40);
          e.set_y(e.y - 60);
          e.acceleration.set_y(550);
          e.velocity.set_y(e.velocity.y - g.random.int(140, 175));
          e.velocity.set_x(e.velocity.x - g.random.int(0, 10));
          e.set_visible(!y.hideHud);
          e.set_x(e.x + y.comboOffset[0]);
          e.set_y(e.y - y.comboOffset[1]);
          c = new F();
          f = G.returnGraphic(a + "combo" + b, null);
          var k = c.loadGraphic(f);
          k.set_x((g.width - k.get_width()) / 2);
          k.set_y((g.height - k.get_height()) / 2);
          k.set_x(d.x);
          k.acceleration.set_y(600);
          k.velocity.set_y(k.velocity.y - 150);
          k.set_visible(!y.hideHud);
          k.set_x(k.x + y.comboOffset[0]);
          k.set_y(k.y - y.comboOffset[1]);
          k.velocity.set_x(k.velocity.x + g.random.int(1, 10));
          this.comboGroup.add(e);
          C.isPixelStage
            ? (e.setGraphicSize((e.get_width() * C.daPixelZoom * 0.85) | 0),
              k.setGraphicSize((k.get_width() * C.daPixelZoom * 0.85) | 0))
            : (e.setGraphicSize((0.7 * e.get_width()) | 0),
              e.set_antialiasing(y.globalAntialiasing),
              k.setGraphicSize((0.7 * k.get_width()) | 0),
              k.set_antialiasing(y.globalAntialiasing));
          k.updateHitbox();
          e.updateHitbox();
          c = [];
          1e3 <= this.combo && c.push(Math.floor(this.combo / 1e3) % 10);
          c.push(Math.floor(this.combo / 100) % 10);
          c.push(Math.floor(this.combo / 10) % 10);
          c.push(this.combo % 10);
          for (var r = 0, l = 0; l < c.length; ) {
            f = c[l];
            ++l;
            var J = new F();
            f = G.returnGraphic(a + "num" + (f | 0) + b, null);
            f = [J.loadGraphic(f)];
            f[0].set_x((g.width - f[0].get_width()) / 2);
            f[0].set_y((g.height - f[0].get_height()) / 2);
            f[0].set_x(d.x + 43 * r - 90);
            f[0].set_y(f[0].y + 80);
            f[0].set_x(f[0].x + y.comboOffset[2]);
            f[0].set_y(f[0].y - y.comboOffset[3]);
            C.isPixelStage
              ? f[0].setGraphicSize((f[0].get_width() * C.daPixelZoom) | 0)
              : (f[0].set_antialiasing(y.globalAntialiasing),
                f[0].setGraphicSize((0.5 * f[0].get_width()) | 0));
            f[0].updateHitbox();
            f[0].acceleration.set_y(g.random.int(200, 300));
            f[0].velocity.set_y(f[0].velocity.y - g.random.int(140, 160));
            f[0].velocity.set_x(g.random.float(-5, 5));
            f[0].set_visible(!y.hideHud);
            this.insert(this.members.indexOf(this.strumLineNotes), f[0]);
            la.tween(f[0], { alpha: 0 }, 0.2, {
              onComplete: (function (a) {
                return function (b) {
                  a[0].destroy();
                };
              })(f),
              startDelay: 0.002 * P.crochet,
            });
            ++r;
          }
          d.set_text(M.string(c));
          la.tween(e, { alpha: 0 }, 0.2, { startDelay: 0.001 * P.crochet });
          la.tween(k, { alpha: 0 }, 0.2, {
            onComplete: function (a) {
              d.destroy();
              k.destroy();
              e.destroy();
            },
            startDelay: 0.001 * P.crochet,
          });
        },
        generateStaticArrows: function (a) {
          for (var b = 0; 4 > b; ) {
            var c = b++,
              d = 1;
            1 > a &&
              (y.opponentStrums ? y.middleScroll && (d = 0.35) : (d = 0));
            var e = new Sh(
              y.middleScroll ? C.STRUM_X_MIDDLESCROLL : C.STRUM_X,
              this.strumLine.y,
              c,
              a
            );
            e.set_alpha(d);
            1 == a
              ? this.playerStrums.add(e)
              : (y.middleScroll &&
                  (e.set_x(e.x + 310),
                  1 < c && e.set_x(e.x + (g.width / 2 + 25))),
                this.opponentStrums.add(e));
            this.strumLineNotes.add(e);
            e.postAddedToGroup();
          }
        },
        StrumPlayAnim: function (a, b, c) {
          a = a ? this.strumLineNotes.members[b] : this.playerStrums.members[b];
          null != a && (a.playAnim("confirm", !0), (a.resetAnim = c));
        },
        spawnNoteSplashOnNote: function (a) {
          if (y.noteSplashes && null != a) {
            var b = this.playerStrums.members[a.noteData];
            null != b && this.spawnNoteSplash(b.x, b.y, a.noteData, a);
          }
        },
        spawnNoteSplash: function (a, b, c, d) {
          var e = "noteSplashes";
          null != C.SONG.splashSkin &&
            0 < C.SONG.splashSkin.length &&
            (e = C.SONG.splashSkin);
          var f = y.arrowHSV[c % 4][0] / 360,
            k = y.arrowHSV[c % 4][1] / 100,
            r = y.arrowHSV[c % 4][2] / 100;
          null != d &&
            ((e = d.noteSplashTexture),
            (f = d.noteSplashHue),
            (k = d.noteSplashSat),
            (r = d.noteSplashBrt));
          d = this.grpNoteSplashes.recycle(rh);
          d.setupNoteSplash(a, b, c, e, f, k, r);
          this.grpNoteSplashes.add(d);
        },
        destroy: function () {
          var a = g.sound.music;
          a.cleanup(a.autoDestroy, !0);
          a = this.vocals;
          a.cleanup(a.autoDestroy, !0);
          this.vocals.destroy();
          y.controllerMode ||
            (sa
              .get_current()
              .stage.removeEventListener("keyDown", n(this, this.onKeyPress)),
            sa
              .get_current()
              .stage.removeEventListener("keyUp", n(this, this.onKeyRelease)));
          I.prototype.destroy.call(this);
        },
        __class__: Vi,
      });
      var Zf = function (a, b) {
        this.curSelected = this.curDirectory = 0;
        this.directories = [null];
        this.options =
          "Week Editor;Menu Character Editor;Dialogue Editor;Dialogue Portrait Editor;Character Editor;Chart Editor".split(
            ";"
          );
        I.call(this, a, b);
      };
      h["editors.MasterEditorMenu"] = Zf;
      Zf.__name__ = "editors.MasterEditorMenu";
      Zf.__super__ = I;
      Zf.prototype = q(I.prototype, {
        create: function () {
          g.camera.bgColor = -16777216;
          var a = new F(),
            b = G.returnGraphic("menuDesat", null);
          a = a.loadGraphic(b);
          b = a.scrollFactor;
          b.set_x(0);
          b.set_y(0);
          a.set_color(-13290187);
          this.add(a);
          this.grpTexts = new ma();
          this.add(this.grpTexts);
          a = 0;
          for (b = this.options.length; a < b; ) {
            var c = a++,
              d = new ib(90, 320, this.options[c], !0);
            d.isMenuItem = !0;
            d.targetY = c;
            this.grpTexts.add(d);
            d.snapToPosition();
          }
          this.changeSelection();
          g.mouse.set_visible(!1);
          I.prototype.create.call(this);
        },
        update: function (a) {
          ia.player1.controls._ui_upP.check() && this.changeSelection(-1);
          ia.player1.controls._ui_downP.check() && this.changeSelection(1);
          ia.player1.controls._back.check() && I.switchState(new zc());
          if (ia.player1.controls._accept.check()) {
            switch (this.options[this.curSelected]) {
              case "Character Editor":
                I.switchState(
                  Lb.getNextState(new Si(yc.DEFAULT_CHARACTER, !1), !1)
                );
                break;
              case "Chart Editor":
                var b = new da(),
                  c = !1;
                null == c && (c = !1);
                I.switchState(Lb.getNextState(b, c));
                break;
              case "Dialogue Editor":
                b = new wf();
                c = !1;
                null == c && (c = !1);
                I.switchState(Lb.getNextState(b, c));
                break;
              case "Dialogue Portrait Editor":
                b = new vf();
                c = !1;
                null == c && (c = !1);
                I.switchState(Lb.getNextState(b, c));
                break;
              case "Menu Character Editor":
                I.switchState(new zk());
                break;
              case "Week Editor":
                I.switchState(new Da());
            }
            g.sound.music.set_volume(0);
          }
          c = b = 0;
          for (var d = this.grpTexts.members; c < d.length; ) {
            var e = d[c];
            ++c;
            e.targetY = b - this.curSelected;
            ++b;
            e.set_alpha(0.6);
            0 == e.targetY && e.set_alpha(1);
          }
          I.prototype.update.call(this, a);
        },
        changeSelection: function (a) {
          null == a && (a = 0);
          g.sound.play(G.sound("scrollMenu"), 0.4);
          this.curSelected += a;
          0 > this.curSelected && (this.curSelected = this.options.length - 1);
          this.curSelected >= this.options.length && (this.curSelected = 0);
        },
        __class__: Zf,
      });
      var zk = function (a, b) {
        this._file = null;
        this.curTypeSelected = 0;
        this.blockPressWhileTypingOn = [];
        this.defaultCharacters = ["dad", "bf", "gf"];
        this.characterFile = null;
        I.call(this, a, b);
      };
      h["editors.MenuCharacterEditorState"] = zk;
      zk.__name__ = "editors.MenuCharacterEditorState";
      zk.__super__ = I;
      zk.prototype = q(I.prototype, {
        create: function () {
          this.characterFile = {
            image: "Menu_Dad",
            scale: 1,
            position: [0, 0],
            idle_anim: "M Dad Idle",
            confirm_anim: "M Dad Idle",
            flipX: !1,
          };
          this.grpWeekCharacters = new ma();
          var a = new $d(0.25 * g.width - 150, this.defaultCharacters[0]);
          a.set_y(a.y + 70);
          a.set_alpha(0.2);
          this.grpWeekCharacters.add(a);
          a = new $d(0.5 * g.width - 150, this.defaultCharacters[1]);
          a.set_y(a.y + 70);
          a.set_alpha(0.2);
          this.grpWeekCharacters.add(a);
          a = new $d(0.75 * g.width - 150, this.defaultCharacters[2]);
          a.set_y(a.y + 70);
          a.set_alpha(0.2);
          this.grpWeekCharacters.add(a);
          this.add(new F(0, 56).makeGraphic(g.width, 386, -405679));
          this.add(this.grpWeekCharacters);
          this.txtOffsets = new W(20, 10, 0, "[0, 0]", 32);
          this.txtOffsets.setFormat("VCR OSD Mono", 32, -1, "center");
          this.txtOffsets.set_alpha(0.7);
          this.add(this.txtOffsets);
          a = new W(
            0,
            540,
            g.width,
            'Arrow Keys - Change Offset (Hold shift for 10x speed)\n\t\t\t\nSpace - Play "Start Press" animation (Boyfriend Character Type)',
            16
          );
          a.setFormat("assets/fonts/vcr.ttf", 16, -1, "center");
          var b = a.scrollFactor;
          b.set_x(0);
          b.set_y(0);
          this.add(a);
          this.addEditorBox();
          g.mouse.set_visible(!0);
          this.updateCharTypeBox();
          I.prototype.create.call(this);
        },
        addEditorBox: function () {
          var a = this,
            b = [{ name: "Character Type", label: "Character Type" }];
          this.UI_typebox = new be(null, null, b, null, !0);
          this.UI_typebox.resize(120, 180);
          this.UI_typebox.set_x(100);
          this.UI_typebox.set_y(g.height - this.UI_typebox.get_height() - 50);
          b = this.UI_typebox.scrollFactor;
          b.set_x(0);
          b.set_y(0);
          this.addTypeUI();
          this.add(this.UI_typebox);
          b = [{ name: "Character", label: "Character" }];
          this.UI_mainbox = new be(null, null, b, null, !0);
          this.UI_mainbox.resize(240, 180);
          this.UI_mainbox.set_x(g.width - this.UI_mainbox.get_width() - 100);
          this.UI_mainbox.set_y(g.height - this.UI_mainbox.get_height() - 50);
          b = this.UI_mainbox.scrollFactor;
          b.set_x(0);
          b.set_y(0);
          this.addCharacterUI();
          this.add(this.UI_mainbox);
          var c = new lb(0, 480, "Load Character", function () {
            a.loadCharacter();
          });
          b = 1;
          null == b && (b = 17);
          (1 != b && 17 != b) || c.set_x((g.width - c.get_width()) / 2);
          (16 != b && 17 != b) || c.set_y((g.height - c.get_height()) / 2);
          c.set_x(c.x - 60);
          this.add(c);
          c = new lb(0, 480, "Save Character", function () {
            a.saveCharacter();
          });
          b = 1;
          null == b && (b = 17);
          (1 != b && 17 != b) || c.set_x((g.width - c.get_width()) / 2);
          (16 != b && 17 != b) || c.set_y((g.height - c.get_height()) / 2);
          c.set_x(c.x + 60);
          this.add(c);
        },
        addTypeUI: function () {
          var a = this,
            b = new Ea(null, this.UI_typebox);
          b.name = "Character Type";
          this.opponentCheckbox = new tb(10, 20, null, null, "Opponent", 100);
          this.opponentCheckbox.callback = function () {
            a.curTypeSelected = 0;
            a.updateCharTypeBox();
          };
          this.boyfriendCheckbox = new tb(
            this.opponentCheckbox.x,
            this.opponentCheckbox.y + 40,
            null,
            null,
            "Boyfriend",
            100
          );
          this.boyfriendCheckbox.callback = function () {
            a.curTypeSelected = 1;
            a.updateCharTypeBox();
          };
          this.girlfriendCheckbox = new tb(
            this.boyfriendCheckbox.x,
            this.boyfriendCheckbox.y + 40,
            null,
            null,
            "Girlfriend",
            100
          );
          this.girlfriendCheckbox.callback = function () {
            a.curTypeSelected = 2;
            a.updateCharTypeBox();
          };
          b.add(this.opponentCheckbox);
          b.add(this.boyfriendCheckbox);
          b.add(this.girlfriendCheckbox);
          this.UI_typebox.addGroup(b);
        },
        addCharacterUI: function () {
          var a = this,
            b = new Ea(null, this.UI_mainbox);
          b.name = "Character";
          this.imageInputText = new qb(10, 20, 80, this.characterFile.image, 8);
          this.blockPressWhileTypingOn.push(this.imageInputText);
          this.idleInputText = new qb(
            10,
            this.imageInputText.y + 35,
            100,
            this.characterFile.idle_anim,
            8
          );
          this.blockPressWhileTypingOn.push(this.idleInputText);
          this.confirmInputText = new qb(
            10,
            this.idleInputText.y + 35,
            100,
            this.characterFile.confirm_anim,
            8
          );
          this.blockPressWhileTypingOn.push(this.confirmInputText);
          this.flipXCheckbox = new tb(
            10,
            this.confirmInputText.y + 30,
            null,
            null,
            "Flip X",
            100
          );
          this.flipXCheckbox.callback = function () {
            a.grpWeekCharacters.members[a.curTypeSelected].set_flipX(
              a.flipXCheckbox.checked
            );
            a.characterFile.flipX = a.flipXCheckbox.checked;
          };
          var c = new lb(
            140,
            this.confirmInputText.y + 30,
            "Reload Char",
            function () {
              a.reloadSelectedCharacter();
            }
          );
          this.scaleStepper = new Jb(
            140,
            this.imageInputText.y,
            0.05,
            1,
            0.1,
            30,
            2
          );
          var d = new W(
            10,
            this.confirmInputText.y - 18,
            0,
            "Start Press animation on the .XML:"
          );
          b.add(new W(10, this.imageInputText.y - 18, 0, "Image file name:"));
          b.add(
            new W(
              10,
              this.idleInputText.y - 18,
              0,
              "Idle animation on the .XML:"
            )
          );
          b.add(
            new W(this.scaleStepper.x, this.scaleStepper.y - 18, 0, "Scale:")
          );
          b.add(this.flipXCheckbox);
          b.add(c);
          b.add(d);
          b.add(this.imageInputText);
          b.add(this.idleInputText);
          b.add(this.confirmInputText);
          b.add(this.scaleStepper);
          this.UI_mainbox.addGroup(b);
        },
        updateCharTypeBox: function () {
          this.opponentCheckbox.set_checked(!1);
          this.boyfriendCheckbox.set_checked(!1);
          this.girlfriendCheckbox.set_checked(!1);
          switch (this.curTypeSelected) {
            case 0:
              this.opponentCheckbox.set_checked(!0);
              break;
            case 1:
              this.boyfriendCheckbox.set_checked(!0);
              break;
            case 2:
              this.girlfriendCheckbox.set_checked(!0);
          }
          this.updateCharacters();
        },
        updateCharacters: function () {
          var a = this.grpWeekCharacters.members[0];
          a.set_alpha(0.2);
          a.character = "";
          a.changeCharacter(this.defaultCharacters[0]);
          a = this.grpWeekCharacters.members[1];
          a.set_alpha(0.2);
          a.character = "";
          a.changeCharacter(this.defaultCharacters[1]);
          a = this.grpWeekCharacters.members[2];
          a.set_alpha(0.2);
          a.character = "";
          a.changeCharacter(this.defaultCharacters[2]);
          this.reloadSelectedCharacter();
        },
        reloadSelectedCharacter: function () {
          var a = this.grpWeekCharacters.members[this.curTypeSelected];
          a.set_alpha(1);
          var b = "menucharacters/" + this.characterFile.image,
            c = G.returnGraphic(b, null);
          a.set_frames(
            jb.fromSparrow(c, G.getPath("images/" + b + ".xml", "TEXT", null))
          );
          a.animation.addByPrefix("idle", this.characterFile.idle_anim, 24);
          1 == this.curTypeSelected &&
            a.animation.addByPrefix(
              "confirm",
              this.characterFile.confirm_anim,
              24,
              !1
            );
          a.set_flipX(1 == this.characterFile.flipX);
          b = a.scale;
          var d = (c = this.characterFile.scale);
          null == d && (d = 0);
          null == c && (c = 0);
          b.set_x(c);
          b.set_y(d);
          a.updateHitbox();
          a.animation.play("idle");
          this.updateOffset();
        },
        getEvent: function (a, b, c, d) {
          "change_input_text" == a && b instanceof qb
            ? b == this.imageInputText
              ? (this.characterFile.image = this.imageInputText.text)
              : b == this.idleInputText
              ? (this.characterFile.idle_anim = this.idleInputText.text)
              : b == this.confirmInputText &&
                (this.characterFile.confirm_anim = this.confirmInputText.text)
            : "change_numeric_stepper" == a &&
              b instanceof Jb &&
              b == this.scaleStepper &&
              ((this.characterFile.scale = this.scaleStepper.value),
              this.reloadSelectedCharacter());
        },
        update: function (a) {
          for (
            var b = !1, c = 0, d = this.blockPressWhileTypingOn;
            c < d.length;

          ) {
            var e = d[c];
            ++c;
            if (e.hasFocus) {
              g.sound.muteKeys = [];
              g.sound.volumeDownKeys = [];
              g.sound.volumeUpKeys = [];
              b = !0;
              c = g.keys.justPressed;
              c.keyManager.checkStatusUnsafe(13, c.status) &&
                e.set_hasFocus(!1);
              break;
            }
          }
          b ||
            ((g.sound.muteKeys = cb.muteKeys),
            (g.sound.volumeDownKeys = cb.volumeDownKeys),
            (g.sound.volumeUpKeys = cb.volumeUpKeys),
            (c = g.keys.justPressed),
            c.keyManager.checkStatusUnsafe(27, c.status) &&
              (I.switchState(new Zf()),
              (b = g.sound),
              (e = G.returnSound("music", "freakyMenu", null)),
              b.playMusic(e)),
            (b = 1),
            (c = g.keys.pressed),
            c.keyManager.checkStatusUnsafe(16, c.status) && (b = 10),
            (c = g.keys.justPressed),
            c.keyManager.checkStatusUnsafe(37, c.status) &&
              ((this.characterFile.position[0] += b), this.updateOffset()),
            (c = g.keys.justPressed),
            c.keyManager.checkStatusUnsafe(39, c.status) &&
              ((this.characterFile.position[0] -= b), this.updateOffset()),
            (c = g.keys.justPressed),
            c.keyManager.checkStatusUnsafe(38, c.status) &&
              ((this.characterFile.position[1] += b), this.updateOffset()),
            (c = g.keys.justPressed),
            c.keyManager.checkStatusUnsafe(40, c.status) &&
              ((this.characterFile.position[1] -= b), this.updateOffset()),
            (c = g.keys.justPressed),
            c.keyManager.checkStatusUnsafe(32, c.status) &&
              1 == this.curTypeSelected &&
              this.grpWeekCharacters.members[
                this.curTypeSelected
              ].animation.play("confirm", !0));
          b = this.grpWeekCharacters.members[1];
          null != b.animation._curAnim &&
            "confirm" == b.animation._curAnim.name &&
            b.animation._curAnim.finished &&
            b.animation.play("idle", !0);
          I.prototype.update.call(this, a);
        },
        updateOffset: function () {
          var a = this.grpWeekCharacters.members[this.curTypeSelected].offset,
            b = this.characterFile.position[0],
            c = this.characterFile.position[1];
          null == c && (c = 0);
          null == b && (b = 0);
          a.set_x(b);
          a.set_y(c);
          this.txtOffsets.set_text("" + M.string(this.characterFile.position));
        },
        loadCharacter: function () {
          var a = new Uh("JSON", "json");
          this._file = new oe();
          this._file.addEventListener("select", n(this, this.onLoadComplete));
          this._file.addEventListener("cancel", n(this, this.onLoadCancel));
          this._file.addEventListener("ioError", n(this, this.onLoadError));
          this._file.browse([a]);
        },
        onLoadComplete: function (a) {
          this._file.removeEventListener(
            "select",
            n(this, this.onLoadComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onLoadCancel));
          this._file.removeEventListener("ioError", n(this, this.onLoadError));
          wb.trace("File couldn't be loaded! You aren't on Desktop, are you?", {
            fileName: "source/editors/MenuCharacterEditorState.hx",
            lineNumber: 415,
            className: "editors.MenuCharacterEditorState",
            methodName: "onLoadComplete",
          });
        },
        onLoadCancel: function (a) {
          this._file.removeEventListener(
            "select",
            n(this, this.onLoadComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onLoadCancel));
          this._file.removeEventListener("ioError", n(this, this.onLoadError));
          this._file = null;
          wb.trace("Cancelled file loading.", {
            fileName: "source/editors/MenuCharacterEditorState.hx",
            lineNumber: 428,
            className: "editors.MenuCharacterEditorState",
            methodName: "onLoadCancel",
          });
        },
        onLoadError: function (a) {
          this._file.removeEventListener(
            "select",
            n(this, this.onLoadComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onLoadCancel));
          this._file.removeEventListener("ioError", n(this, this.onLoadError));
          this._file = null;
          wb.trace("Problem loading file", {
            fileName: "source/editors/MenuCharacterEditorState.hx",
            lineNumber: 440,
            className: "editors.MenuCharacterEditorState",
            methodName: "onLoadError",
          });
        },
        saveCharacter: function () {
          var a = JSON.stringify(this.characterFile, null, "\t");
          if (0 < a.length) {
            var b = K.trim(this.imageInputText.text).split("_");
            b = K.replace(b[b.length - 1].toLowerCase(), " ", "");
            this._file = new oe();
            this._file.addEventListener(
              "complete",
              n(this, this.onSaveComplete)
            );
            this._file.addEventListener("cancel", n(this, this.onSaveCancel));
            this._file.addEventListener("ioError", n(this, this.onSaveError));
            this._file.save(a, b + ".json");
          }
        },
        onSaveComplete: function (a) {
          this._file.removeEventListener(
            "complete",
            n(this, this.onSaveComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onSaveCancel));
          this._file.removeEventListener("ioError", n(this, this.onSaveError));
          this._file = null;
          g.log.advanced("Successfully saved file.", Ja.NOTICE);
        },
        onSaveCancel: function (a) {
          this._file.removeEventListener(
            "complete",
            n(this, this.onSaveComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onSaveCancel));
          this._file.removeEventListener("ioError", n(this, this.onSaveError));
          this._file = null;
        },
        onSaveError: function (a) {
          this._file.removeEventListener(
            "complete",
            n(this, this.onSaveComplete)
          );
          this._file.removeEventListener("cancel", n(this, this.onSaveCancel));
          this._file.removeEventListener("ioError", n(this, this.onSaveError));
          this._file = null;
          g.log.advanced("Problem saving file", Ja.ERROR, !0);
        },
        __class__: zk,
      });
      var Da = function (a) {
        this.blockPressWhileTypingOn = [];
        this.weekFile = null;
        I.call(this);
        this.weekFile = ab.createWeekFile();
        null != a ? (this.weekFile = a) : (Da.weekFileName = "week1");
      };
      h["editors.WeekEditorState"] = Da;
      Da.__name__ = "editors.WeekEditorState";
      Da.loadWeek = function () {
        var a = new Uh("JSON", "json");
        Da._file = new oe();
        Da._file.addEventListener("select", Da.onLoadComplete);
        Da._file.addEventListener("cancel", Da.onLoadCancel);
        Da._file.addEventListener("ioError", Da.onLoadError);
        Da._file.browse([a]);
      };
      Da.onLoadComplete = function (a) {
        Da._file.removeEventListener("select", Da.onLoadComplete);
        Da._file.removeEventListener("cancel", Da.onLoadCancel);
        Da._file.removeEventListener("ioError", Da.onLoadError);
        wb.trace("File couldn't be loaded! You aren't on Desktop, are you?", {
          fileName: "source/editors/WeekEditorState.hx",
          lineNumber: 564,
          className: "editors.WeekEditorState",
          methodName: "onLoadComplete",
        });
      };
      Da.onLoadCancel = function (a) {
        Da._file.removeEventListener("select", Da.onLoadComplete);
        Da._file.removeEventListener("cancel", Da.onLoadCancel);
        Da._file.removeEventListener("ioError", Da.onLoadError);
        Da._file = null;
        wb.trace("Cancelled file loading.", {
          fileName: "source/editors/WeekEditorState.hx",
          lineNumber: 577,
          className: "editors.WeekEditorState",
          methodName: "onLoadCancel",
        });
      };
      Da.onLoadError = function (a) {
        Da._file.removeEventListener("select", Da.onLoadComplete);
        Da._file.removeEventListener("cancel", Da.onLoadCancel);
        Da._file.removeEventListener("ioError", Da.onLoadError);
        Da._file = null;
        wb.trace("Problem loading file", {
          fileName: "source/editors/WeekEditorState.hx",
          lineNumber: 589,
          className: "editors.WeekEditorState",
          methodName: "onLoadError",
        });
      };
      Da.saveWeek = function (a) {
        a = JSON.stringify(a, null, "\t");
        0 < a.length &&
          ((Da._file = new oe()),
          Da._file.addEventListener("complete", Da.onSaveComplete),
          Da._file.addEventListener("cancel", Da.onSaveCancel),
          Da._file.addEventListener("ioError", Da.onSaveError),
          Da._file.save(a, Da.weekFileName + ".json"));
      };
      Da.onSaveComplete = function (a) {
        Da._file.removeEventListener("complete", Da.onSaveComplete);
        Da._file.removeEventListener("cancel", Da.onSaveCancel);
        Da._file.removeEventListener("ioError", Da.onSaveError);
        Da._file = null;
        g.log.advanced("Successfully saved file.", Ja.NOTICE);
      };
      Da.onSaveCancel = function (a) {
        Da._file.removeEventListener("complete", Da.onSaveComplete);
        Da._file.removeEventListener("cancel", Da.onSaveCancel);
        Da._file.removeEventListener("ioError", Da.onSaveError);
        Da._file = null;
      };
      Da.onSaveError = function (a) {
        Da._file.removeEventListener("complete", Da.onSaveComplete);
        Da._file.removeEventListener("cancel", Da.onSaveCancel);
        Da._file.removeEventListener("ioError", Da.onSaveError);
        Da._file = null;
        g.log.advanced("Problem saving file", Ja.ERROR, !0);
      };
      Da.__super__ = I;
      Da.prototype = q(I.prototype, {
        create: function () {
          this.txtWeekTitle = new W(0.7 * g.width, 10, 0, "", 32);
          this.txtWeekTitle.setFormat("VCR OSD Mono", 32, -1, "right");
          this.txtWeekTitle.set_alpha(0.7);
          var a = G.returnGraphic("campaign_menu_UI_assets", null),
            b = jb.fromSparrow(
              a,
              G.getPath("images/campaign_menu_UI_assets.xml", "TEXT", null)
            );
          a = new F(0, 56).makeGraphic(g.width, 386, -405679);
          this.bgSprite = new F(0, 56);
          this.bgSprite.set_antialiasing(y.globalAntialiasing);
          var c = (this.weekThing = new Ri(
            0,
            this.bgSprite.y + 396,
            Da.weekFileName
          ));
          c.set_y(c.y + (this.weekThing.get_height() + 20));
          this.weekThing.set_antialiasing(y.globalAntialiasing);
          this.add(this.weekThing);
          c = new F().makeGraphic(g.width, 56, -16777216);
          this.add(c);
          this.grpWeekCharacters = new ma();
          this.lock = new F();
          this.lock.set_frames(b);
          this.lock.animation.addByPrefix("lock", "lock");
          this.lock.animation.play("lock");
          this.lock.set_antialiasing(y.globalAntialiasing);
          this.add(this.lock);
          this.missingFileText = new W(0, 0, g.width, "");
          this.missingFileText.setFormat(
            "assets/fonts/vcr.ttf",
            24,
            -1,
            "center",
            Ya.OUTLINE,
            -16777216
          );
          this.missingFileText.set_borderSize(2);
          this.missingFileText.set_visible(!1);
          this.add(this.missingFileText);
          b = this.weekFile.weekCharacters;
          c = new $d(0.25 * g.width - 150, b[0]);
          c.set_y(c.y + 70);
          this.grpWeekCharacters.add(c);
          c = new $d(0.5 * g.width - 150, b[1]);
          c.set_y(c.y + 70);
          this.grpWeekCharacters.add(c);
          c = new $d(0.75 * g.width - 150, b[2]);
          c.set_y(c.y + 70);
          this.grpWeekCharacters.add(c);
          this.add(a);
          this.add(this.bgSprite);
          this.add(this.grpWeekCharacters);
          b = new F(0.07 * g.width, this.bgSprite.y + 435);
          a = G.returnGraphic("Menu_Tracks", null);
          a = b.loadGraphic(a);
          a.set_antialiasing(y.globalAntialiasing);
          this.add(a);
          this.txtTracklist = new W(0.05 * g.width, a.y + 60, 0, "", 32);
          this.txtTracklist.set_alignment("center");
          this.txtTracklist.set_font("assets/fonts/vcr.ttf");
          this.txtTracklist.set_color(-1747081);
          this.add(this.txtTracklist);
          this.add(this.txtWeekTitle);
          this.addEditorBox();
          this.reloadAllShit();
          g.mouse.set_visible(!0);
          I.prototype.create.call(this);
        },
        addEditorBox: function () {
          var a = this;
          this.UI_box = new be(
            null,
            null,
            [
              { name: "Week", label: "Week" },
              { name: "Other", label: "Other" },
            ],
            null,
            !0
          );
          this.UI_box.resize(250, 375);
          this.UI_box.set_x(g.width - this.UI_box.get_width());
          this.UI_box.set_y(g.height - this.UI_box.get_height());
          var b = this.UI_box.scrollFactor;
          b.set_x(0);
          b.set_y(0);
          this.addWeekUI();
          this.addOtherUI();
          this.UI_box.set_selected_tab_id("Week");
          this.add(this.UI_box);
          var c = new lb(0, 650, "Load Week", function () {
            Da.loadWeek();
          });
          b = 1;
          null == b && (b = 17);
          (1 != b && 17 != b) || c.set_x((g.width - c.get_width()) / 2);
          (16 != b && 17 != b) || c.set_y((g.height - c.get_height()) / 2);
          c.set_x(c.x - 120);
          this.add(c);
          c = new lb(0, 650, "Freeplay", function () {
            I.switchState(new Yi(a.weekFile));
          });
          b = 1;
          null == b && (b = 17);
          (1 != b && 17 != b) || c.set_x((g.width - c.get_width()) / 2);
          (16 != b && 17 != b) || c.set_y((g.height - c.get_height()) / 2);
          this.add(c);
          c = new lb(0, 650, "Save Week", function () {
            Da.saveWeek(a.weekFile);
          });
          b = 1;
          null == b && (b = 17);
          (1 != b && 17 != b) || c.set_x((g.width - c.get_width()) / 2);
          (16 != b && 17 != b) || c.set_y((g.height - c.get_height()) / 2);
          c.set_x(c.x + 120);
          this.add(c);
        },
        addWeekUI: function () {
          var a = this,
            b = new Ea(null, this.UI_box);
          b.name = "Week";
          this.songsInputText = new qb(10, 30, 200, "", 8);
          this.blockPressWhileTypingOn.push(this.songsInputText);
          this.opponentInputText = new qb(
            10,
            this.songsInputText.y + 40,
            70,
            "",
            8
          );
          this.blockPressWhileTypingOn.push(this.opponentInputText);
          this.boyfriendInputText = new qb(
            this.opponentInputText.x + 75,
            this.opponentInputText.y,
            70,
            "",
            8
          );
          this.blockPressWhileTypingOn.push(this.boyfriendInputText);
          this.girlfriendInputText = new qb(
            this.boyfriendInputText.x + 75,
            this.opponentInputText.y,
            70,
            "",
            8
          );
          this.blockPressWhileTypingOn.push(this.girlfriendInputText);
          this.backgroundInputText = new qb(
            10,
            this.opponentInputText.y + 40,
            120,
            "",
            8
          );
          this.blockPressWhileTypingOn.push(this.backgroundInputText);
          this.displayNameInputText = new qb(
            10,
            this.backgroundInputText.y + 60,
            200,
            "",
            8
          );
          this.blockPressWhileTypingOn.push(this.backgroundInputText);
          this.weekNameInputText = new qb(
            10,
            this.displayNameInputText.y + 60,
            150,
            "",
            8
          );
          this.blockPressWhileTypingOn.push(this.weekNameInputText);
          this.weekFileInputText = new qb(
            10,
            this.weekNameInputText.y + 40,
            100,
            "",
            8
          );
          this.blockPressWhileTypingOn.push(this.weekFileInputText);
          this.reloadWeekThing();
          this.hideCheckbox = new tb(
            10,
            this.weekFileInputText.y + 40,
            null,
            null,
            "Hide Week from Story Mode?",
            100
          );
          this.hideCheckbox.callback = function () {
            a.weekFile.hideStoryMode = a.hideCheckbox.checked;
          };
          b.add(
            new W(
              this.songsInputText.x,
              this.songsInputText.y - 18,
              0,
              "Songs:"
            )
          );
          b.add(
            new W(
              this.opponentInputText.x,
              this.opponentInputText.y - 18,
              0,
              "Characters:"
            )
          );
          b.add(
            new W(
              this.backgroundInputText.x,
              this.backgroundInputText.y - 18,
              0,
              "Background Asset:"
            )
          );
          b.add(
            new W(
              this.displayNameInputText.x,
              this.displayNameInputText.y - 18,
              0,
              "Display Name:"
            )
          );
          b.add(
            new W(
              this.weekNameInputText.x,
              this.weekNameInputText.y - 18,
              0,
              "Week Name (for Reset Score Menu):"
            )
          );
          b.add(
            new W(
              this.weekFileInputText.x,
              this.weekFileInputText.y - 18,
              0,
              "Week File:"
            )
          );
          b.add(this.songsInputText);
          b.add(this.opponentInputText);
          b.add(this.boyfriendInputText);
          b.add(this.girlfriendInputText);
          b.add(this.backgroundInputText);
          b.add(this.displayNameInputText);
          b.add(this.weekNameInputText);
          b.add(this.weekFileInputText);
          b.add(this.hideCheckbox);
          this.UI_box.addGroup(b);
        },
        addOtherUI: function () {
          var a = this,
            b = new Ea(null, this.UI_box);
          b.name = "Other";
          this.lockedCheckbox = new tb(
            10,
            30,
            null,
            null,
            "Week starts Locked",
            100
          );
          this.lockedCheckbox.callback = function () {
            a.weekFile.startUnlocked = !a.lockedCheckbox.checked;
            a.lock.set_visible(a.lockedCheckbox.checked);
            a.hiddenUntilUnlockCheckbox.set_alpha(
              0.4 + 0.6 * (a.lockedCheckbox.checked ? 1 : 0)
            );
          };
          this.hiddenUntilUnlockCheckbox = new tb(
            10,
            this.lockedCheckbox.y + 25,
            null,
            null,
            "Hidden until Unlocked",
            110
          );
          this.hiddenUntilUnlockCheckbox.callback = function () {
            a.weekFile.hiddenUntilUnlocked =
              a.hiddenUntilUnlockCheckbox.checked;
          };
          this.hiddenUntilUnlockCheckbox.set_alpha(0.4);
          this.weekBeforeInputText = new qb(
            10,
            this.hiddenUntilUnlockCheckbox.y + 55,
            100,
            "",
            8
          );
          this.blockPressWhileTypingOn.push(this.weekBeforeInputText);
          this.difficultiesInputText = new qb(
            10,
            this.weekBeforeInputText.y + 60,
            200,
            "",
            8
          );
          this.blockPressWhileTypingOn.push(this.difficultiesInputText);
          b.add(
            new W(
              this.weekBeforeInputText.x,
              this.weekBeforeInputText.y - 28,
              0,
              "Week File name of the Week you have\nto finish for Unlocking:"
            )
          );
          b.add(
            new W(
              this.difficultiesInputText.x,
              this.difficultiesInputText.y - 20,
              0,
              "Difficulties:"
            )
          );
          b.add(
            new W(
              this.difficultiesInputText.x,
              this.difficultiesInputText.y + 20,
              0,
              'Default difficulties are "Easy, Normal, Hard"\nwithout quotes.'
            )
          );
          b.add(this.weekBeforeInputText);
          b.add(this.difficultiesInputText);
          b.add(this.hiddenUntilUnlockCheckbox);
          b.add(this.lockedCheckbox);
          this.UI_box.addGroup(b);
        },
        reloadAllShit: function () {
          for (
            var a = this.weekFile.songs[0][0],
              b = 1,
              c = this.weekFile.songs.length;
            b < c;

          ) {
            var d = b++;
            a += ", " + this.weekFile.songs[d][0];
          }
          this.songsInputText.set_text(a);
          this.backgroundInputText.set_text(this.weekFile.weekBackground);
          this.displayNameInputText.set_text(this.weekFile.storyName);
          this.weekNameInputText.set_text(this.weekFile.weekName);
          this.weekFileInputText.set_text(Da.weekFileName);
          this.opponentInputText.set_text(this.weekFile.weekCharacters[0]);
          this.boyfriendInputText.set_text(this.weekFile.weekCharacters[1]);
          this.girlfriendInputText.set_text(this.weekFile.weekCharacters[2]);
          this.hideCheckbox.set_checked(this.weekFile.hideStoryMode);
          this.weekBeforeInputText.set_text(this.weekFile.weekBefore);
          this.difficultiesInputText.set_text("");
          null != this.weekFile.difficulties &&
            this.difficultiesInputText.set_text(this.weekFile.difficulties);
          this.lockedCheckbox.set_checked(!this.weekFile.startUnlocked);
          this.lock.set_visible(this.lockedCheckbox.checked);
          this.hiddenUntilUnlockCheckbox.set_checked(
            this.weekFile.hiddenUntilUnlocked
          );
          this.hiddenUntilUnlockCheckbox.set_alpha(
            0.4 + 0.6 * (this.lockedCheckbox.checked ? 1 : 0)
          );
          this.reloadBG();
          this.reloadWeekThing();
          this.updateText();
        },
        updateText: function () {
          for (var a = 0, b = this.grpWeekCharacters.length; a < b; ) {
            var c = a++;
            this.grpWeekCharacters.members[c].changeCharacter(
              this.weekFile.weekCharacters[c]
            );
          }
          var d = [];
          a = 0;
          for (b = this.weekFile.songs.length; a < b; )
            (c = a++), d.push(this.weekFile.songs[c][0]);
          this.txtTracklist.set_text("");
          a = 0;
          for (b = d.length; a < b; ) {
            c = a++;
            var e = this.txtTracklist;
            e.set_text(e.text + (d[c] + "\n"));
          }
          this.txtTracklist.set_text(this.txtTracklist.text.toUpperCase());
          a = this.txtTracklist;
          b = 1;
          null == b && (b = 17);
          (1 != b && 17 != b) || a.set_x((g.width - a.get_width()) / 2);
          (16 != b && 17 != b) || a.set_y((g.height - a.get_height()) / 2);
          e = this.txtTracklist;
          e.set_x(e.x - 0.35 * g.width);
          this.txtWeekTitle.set_text(this.weekFile.storyName.toUpperCase());
          this.txtWeekTitle.set_x(
            g.width - (this.txtWeekTitle.get_width() + 10)
          );
        },
        reloadBG: function () {
          this.bgSprite.set_visible(!0);
          var a = this.weekFile.weekBackground,
            b = !0;
          null != a &&
            0 < a.length &&
            aa.exists(
              G.getPath("images/menubackgrounds/menu_" + a + ".png", "IMAGE"),
              "IMAGE"
            ) &&
            ((b = this.bgSprite),
            (a = G.returnGraphic("menubackgrounds/menu_" + a, null)),
            b.loadGraphic(a),
            (b = !1));
          b && this.bgSprite.set_visible(!1);
        },
        reloadWeekThing: function () {
          this.weekThing.set_visible(!0);
          this.missingFileText.set_visible(!1);
          var a = K.trim(this.weekFileInputText.text),
            b = !0;
          if (
            null != a &&
            0 < a.length &&
            aa.exists(
              G.getPath("images/storymenu/" + a + ".png", "IMAGE"),
              "IMAGE"
            )
          ) {
            b = this.weekThing;
            var c = G.returnGraphic("storymenu/" + a, null);
            b.loadGraphic(c);
            b = !1;
          }
          b &&
            (this.weekThing.set_visible(!1),
            this.missingFileText.set_visible(!0),
            this.missingFileText.set_text(
              "MISSING FILE: images/storymenu/" + a + ".png"
            ));
          this.recalculateStuffPosition();
        },
        getEvent: function (a, b, c, d) {
          if ("change_input_text" == a && b instanceof qb)
            if (b == this.weekFileInputText)
              (Da.weekFileName = K.trim(this.weekFileInputText.text)),
                this.reloadWeekThing();
            else if (
              b == this.opponentInputText ||
              b == this.boyfriendInputText ||
              b == this.girlfriendInputText
            )
              (this.weekFile.weekCharacters[0] = K.trim(
                this.opponentInputText.text
              )),
                (this.weekFile.weekCharacters[1] = K.trim(
                  this.boyfriendInputText.text
                )),
                (this.weekFile.weekCharacters[2] = K.trim(
                  this.girlfriendInputText.text
                )),
                this.updateText();
            else if (b == this.backgroundInputText)
              (this.weekFile.weekBackground = K.trim(
                this.backgroundInputText.text
              )),
                this.reloadBG();
            else if (b == this.displayNameInputText)
              (this.weekFile.storyName = K.trim(
                this.displayNameInputText.text
              )),
                this.updateText();
            else if (b == this.weekNameInputText)
              this.weekFile.weekName = K.trim(this.weekNameInputText.text);
            else if (b == this.songsInputText) {
              a = K.trim(this.songsInputText.text).split(",");
              b = 0;
              for (c = a.length; b < c; ) (d = b++), (a[d] = K.trim(a[d]));
              for (; a.length < this.weekFile.songs.length; )
                this.weekFile.songs.pop();
              b = 0;
              for (c = a.length; b < c; )
                if (((d = b++), d >= this.weekFile.songs.length))
                  this.weekFile.songs.push([a[d], "dad", [146, 113, 253]]);
                else if (
                  ((this.weekFile.songs[d][0] = a[d]),
                  null == this.weekFile.songs[d][1] ||
                    this.weekFile.songs[d][1])
                )
                  (this.weekFile.songs[d][1] = "dad"),
                    (this.weekFile.songs[d][2] = [146, 113, 253]);
              this.updateText();
            } else
              b == this.weekBeforeInputText
                ? (this.weekFile.weekBefore = K.trim(
                    this.weekBeforeInputText.text
                  ))
                : b == this.difficultiesInputText &&
                  (this.weekFile.difficulties = K.trim(
                    this.difficultiesInputText.text
                  ));
        },
        update: function (a) {
          null != Da.loadedWeek &&
            ((this.weekFile = Da.loadedWeek),
            (Da.loadedWeek = null),
            this.reloadAllShit());
          for (
            var b = !1, c = 0, d = this.blockPressWhileTypingOn;
            c < d.length;

          ) {
            var e = d[c];
            ++c;
            if (e.hasFocus) {
              g.sound.muteKeys = [];
              g.sound.volumeDownKeys = [];
              g.sound.volumeUpKeys = [];
              b = !0;
              c = g.keys.justPressed;
              c.keyManager.checkStatusUnsafe(13, c.status) &&
                e.set_hasFocus(!1);
              break;
            }
          }
          b ||
            ((g.sound.muteKeys = cb.muteKeys),
            (g.sound.volumeDownKeys = cb.volumeDownKeys),
            (g.sound.volumeUpKeys = cb.volumeUpKeys),
            (c = g.keys.justPressed),
            c.keyManager.checkStatusUnsafe(27, c.status) &&
              (I.switchState(new Zf()),
              (b = g.sound),
              (e = G.returnSound("music", "freakyMenu", null)),
              b.playMusic(e)));
          I.prototype.update.call(this, a);
          this.lock.set_y(this.weekThing.y);
          this.missingFileText.set_y(this.weekThing.y + 36);
        },
        recalculateStuffPosition: function () {
          var a = this.weekThing,
            b = 1;
          null == b && (b = 17);
          (1 != b && 17 != b) || a.set_x((g.width - a.get_width()) / 2);
          (16 != b && 17 != b) || a.set_y((g.height - a.get_height()) / 2);
          this.lock.set_x(this.weekThing.get_width() + 10 + this.weekThing.x);
        },
        __class__: Da,
      });
      var Yi = function (a) {
        this.blockPressWhileTypingOn = [];
        this.curSelected = 0;
        this.iconArray = [];
        this.weekFile = null;
        I.call(this);
        this.weekFile = ab.createWeekFile();
        null != a && (this.weekFile = a);
      };
      h["editors.WeekEditorFreeplayState"] = Yi;
      Yi.__name__ = "editors.WeekEditorFreeplayState";
      Yi.__super__ = I;
      Yi.prototype = q(I.prototype, {
        create: function () {
          var a = new F(),
            b = G.returnGraphic("menuDesat", null);
          this.bg = a.loadGraphic(b);
          this.bg.set_antialiasing(y.globalAntialiasing);
          this.bg.set_color(-1);
          this.add(this.bg);
          this.grpSongs = new ma();
          this.add(this.grpSongs);
          a = 0;
          for (b = this.weekFile.songs.length; a < b; ) {
            var c = a++,
              d = new ib(90, 320, this.weekFile.songs[c][0], !0);
            d.isMenuItem = !0;
            d.targetY = c;
            this.grpSongs.add(d);
            d.snapToPosition();
            c = new sf(this.weekFile.songs[c][1]);
            c.sprTracker = d;
            this.iconArray.push(c);
            this.add(c);
          }
          this.addEditorBox();
          this.changeSelection();
          I.prototype.create.call(this);
        },
        addEditorBox: function () {
          var a = this;
          this.UI_box = new be(
            null,
            null,
            [{ name: "Freeplay", label: "Freeplay" }],
            null,
            !0
          );
          this.UI_box.resize(250, 200);
          this.UI_box.set_x(g.width - this.UI_box.get_width() - 100);
          this.UI_box.set_y(g.height - this.UI_box.get_height() - 60);
          var b = this.UI_box.scrollFactor;
          b.set_x(0);
          b.set_y(0);
          this.UI_box.set_selected_tab_id("Week");
          this.addFreeplayUI();
          this.add(this.UI_box);
          b = new F(0, 670).makeGraphic(g.width, 50, -16777216);
          b.set_alpha(0.6);
          this.add(b);
          var c = new lb(0, 685, "Load Week", function () {
            Da.loadWeek();
          });
          b = 1;
          null == b && (b = 17);
          (1 != b && 17 != b) || c.set_x((g.width - c.get_width()) / 2);
          (16 != b && 17 != b) || c.set_y((g.height - c.get_height()) / 2);
          c.set_x(c.x - 120);
          this.add(c);
          c = new lb(0, 685, "Story Mode", function () {
            I.switchState(new Da(a.weekFile));
          });
          b = 1;
          null == b && (b = 17);
          (1 != b && 17 != b) || c.set_x((g.width - c.get_width()) / 2);
          (16 != b && 17 != b) || c.set_y((g.height - c.get_height()) / 2);
          this.add(c);
          c = new lb(0, 685, "Save Week", function () {
            Da.saveWeek(a.weekFile);
          });
          b = 1;
          null == b && (b = 17);
          (1 != b && 17 != b) || c.set_x((g.width - c.get_width()) / 2);
          (16 != b && 17 != b) || c.set_y((g.height - c.get_height()) / 2);
          c.set_x(c.x + 120);
          this.add(c);
        },
        getEvent: function (a, b, c, d) {
          "change_input_text" == a && b instanceof qb
            ? ((this.weekFile.songs[this.curSelected][1] =
                this.iconInputText.text),
              this.iconArray[this.curSelected].changeIcon(
                this.iconInputText.text
              ))
            : "change_numeric_stepper" == a &&
              b instanceof Jb &&
              (b == this.bgColorStepperR ||
                b == this.bgColorStepperG ||
                b == this.bgColorStepperB) &&
              this.updateBG();
        },
        addFreeplayUI: function () {
          var a = this,
            b = new Ea(null, this.UI_box);
          b.name = "Freeplay";
          this.bgColorStepperR = new Jb(10, 40, 20, 255, 0, 255, 0);
          this.bgColorStepperG = new Jb(80, 40, 20, 255, 0, 255, 0);
          this.bgColorStepperB = new Jb(150, 40, 20, 255, 0, 255, 0);
          var c = new lb(
              10,
              this.bgColorStepperR.y + 25,
              "Copy Color",
              function () {
                mc.set_text(
                  ((a.bg.color >> 16) & 255) +
                    "," +
                    ((a.bg.color >> 8) & 255) +
                    "," +
                    (a.bg.color & 255)
                );
              }
            ),
            d = new lb(140, c.y, "Paste Color", function () {
              if (null != mc.get_text()) {
                for (
                  var b = [],
                    c = K.trim(mc.get_text()).split(","),
                    d = 0,
                    e = c.length;
                  d < e;

                ) {
                  var g = d++;
                  g = M.parseInt(c[g]);
                  isNaN(g) ||
                    (255 < g ? (g = 255) : 0 > g && (g *= -1), b.push(g));
                }
                2 < b.length &&
                  (a.bgColorStepperR.set_value(b[0]),
                  a.bgColorStepperG.set_value(b[1]),
                  a.bgColorStepperB.set_value(b[2]),
                  a.updateBG());
              }
            });
          this.iconInputText = new qb(
            10,
            this.bgColorStepperR.y + 70,
            100,
            "",
            8
          );
          var e = new tb(
            10,
            this.iconInputText.y + 30,
            null,
            null,
            "Hide Week from Freeplay?",
            100
          );
          e.set_checked(this.weekFile.hideFreeplay);
          e.callback = function () {
            a.weekFile.hideFreeplay = e.checked;
          };
          b.add(
            new W(
              10,
              this.bgColorStepperR.y - 18,
              0,
              "Selected background Color R/G/B:"
            )
          );
          b.add(new W(10, this.iconInputText.y - 18, 0, "Selected icon:"));
          b.add(this.bgColorStepperR);
          b.add(this.bgColorStepperG);
          b.add(this.bgColorStepperB);
          b.add(c);
          b.add(d);
          b.add(this.iconInputText);
          b.add(e);
          this.UI_box.addGroup(b);
        },
        updateBG: function () {
          this.weekFile.songs[this.curSelected][2][0] = Math.round(
            this.bgColorStepperR.value
          );
          this.weekFile.songs[this.curSelected][2][1] = Math.round(
            this.bgColorStepperG.value
          );
          this.weekFile.songs[this.curSelected][2][2] = Math.round(
            this.bgColorStepperB.value
          );
          var a = this.bg,
            b = this.weekFile.songs[this.curSelected][2][0],
            c = this.weekFile.songs[this.curSelected][2][1],
            d = this.weekFile.songs[this.curSelected][2][2],
            e = ob._new(),
            f = 255;
          null == f && (f = 255);
          e =
            (((e & -16711681) | ((255 < b ? 255 : 0 > b ? 0 : b) << 16)) &
              -65281) |
            ((255 < c ? 255 : 0 > c ? 0 : c) << 8);
          e &= -256;
          e |= 255 < d ? 255 : 0 > d ? 0 : d;
          e &= 16777215;
          e |= (255 < f ? 255 : 0 > f ? 0 : f) << 24;
          a.set_color(e);
        },
        changeSelection: function (a) {
          null == a && (a = 0);
          g.sound.play(G.sound("scrollMenu"), 0.4);
          this.curSelected += a;
          0 > this.curSelected &&
            (this.curSelected = this.weekFile.songs.length - 1);
          this.curSelected >= this.weekFile.songs.length &&
            (this.curSelected = 0);
          for (var b = (a = 0), c = this.iconArray.length; b < c; ) {
            var d = b++;
            this.iconArray[d].set_alpha(0.6);
          }
          this.iconArray[this.curSelected].set_alpha(1);
          b = 0;
          for (c = this.grpSongs.members; b < c.length; )
            (d = c[b]),
              ++b,
              (d.targetY = a - this.curSelected),
              ++a,
              d.set_alpha(0.6),
              0 == d.targetY && d.set_alpha(1);
          wb.trace(this.weekFile.songs[this.curSelected], {
            fileName: "source/editors/WeekEditorState.hx",
            lineNumber: 861,
            className: "editors.WeekEditorFreeplayState",
            methodName: "changeSelection",
          });
          this.iconInputText.set_text(this.weekFile.songs[this.curSelected][1]);
          this.bgColorStepperR.set_value(
            Math.round(this.weekFile.songs[this.curSelected][2][0])
          );
          this.bgColorStepperG.set_value(
            Math.round(this.weekFile.songs[this.curSelected][2][1])
          );
          this.bgColorStepperB.set_value(
            Math.round(this.weekFile.songs[this.curSelected][2][2])
          );
          this.updateBG();
        },
        update: function (a) {
          if (null != Da.loadedWeek)
            I.prototype.update.call(this, a),
              (Z.skipNextTransIn = !0),
              (Z.skipNextTransOut = !0),
              I.switchState(new Yi(Da.loadedWeek)),
              (Da.loadedWeek = null);
          else {
            if (this.iconInputText.hasFocus) {
              g.sound.muteKeys = [];
              g.sound.volumeDownKeys = [];
              g.sound.volumeUpKeys = [];
              var b = g.keys.justPressed;
              b.keyManager.checkStatusUnsafe(13, b.status) &&
                this.iconInputText.set_hasFocus(!1);
            } else {
              g.sound.muteKeys = cb.muteKeys;
              g.sound.volumeDownKeys = cb.volumeDownKeys;
              g.sound.volumeUpKeys = cb.volumeUpKeys;
              b = g.keys.justPressed;
              if (b.keyManager.checkStatusUnsafe(27, b.status)) {
                I.switchState(new Zf());
                b = g.sound;
                var c = G.returnSound("music", "freakyMenu", null);
                b.playMusic(c);
              }
              ia.player1.controls._ui_upP.check() && this.changeSelection(-1);
              ia.player1.controls._ui_downP.check() && this.changeSelection(1);
            }
            I.prototype.update.call(this, a);
          }
        },
        __class__: Yi,
      });
      var Wf = function (a, b, c, d) {
        null == d && (d = !1);
        null == b && (b = !1);
        null == a && (a = 0);
        if (d) {
          if (((this.__array = []), null != c)) {
            d = 0;
            for (var e = c.length; d < e; ) {
              var f = d++;
              this.__array[f] = c[f];
            }
          }
        } else null == c && (c = []), (this.__array = c);
        0 < a && this.set_length(a);
        this.fixed = b;
      };
      h["openfl._Vector.FloatVector"] = Wf;
      Wf.__name__ = "openfl._Vector.FloatVector";
      Wf.__interfaces__ = [na];
      Wf.prototype = {
        concat: function (a) {
          return null == a
            ? new Wf(0, !1, this.__array.slice())
            : 0 < a.__array.length
            ? new Wf(0, !1, this.__array.concat(a.__array))
            : new Wf(0, !1, this.__array.slice());
        },
        copy: function () {
          return new Wf(0, this.fixed, this.__array.slice());
        },
        get: function (a) {
          return this.__array[a];
        },
        insertAt: function (a, b) {
          (!this.fixed || a < this.__array.length) &&
            this.__array.splice(a, 0, b);
        },
        push: function (a) {
          return this.fixed ? this.__array.length : this.__array.push(a);
        },
        set: function (a, b) {
          return !this.fixed || a < this.__array.length
            ? (this.__array[a] = b)
            : b;
        },
        splice: function (a, b) {
          return new Wf(0, !1, this.__array.splice(a, b));
        },
        toJSON: function () {
          return this.__array;
        },
        get_length: function () {
          return this.__array.length;
        },
        set_length: function (a) {
          if (a != this.__array.length && !this.fixed) {
            var b = this.__array.length;
            0 > a && (a = 0);
            if (a > b)
              for (; b < a; ) {
                var c = b++;
                this.__array[c] = 0;
              }
            else for (; this.__array.length > a; ) this.__array.pop();
          }
          return this.__array.length;
        },
        __class__: Wf,
        __properties__: { set_length: "set_length", get_length: "get_length" },
      };
      var ba = function (a, b) {
        null == b && (b = 0);
        null == a && (a = 0);
        this._weak = this._inPool = !1;
        this.x = this.y = 0;
        this.set(a, b);
      };
      h["flixel.math.FlxBasePoint"] = ba;
      ba.__name__ = "flixel.math.FlxBasePoint";
      ba.__interfaces__ = [Ha];
      ba.prototype = {
        set: function (a, b) {
          null == b && (b = 0);
          null == a && (a = 0);
          this.set_x(a);
          this.set_y(b);
          return this;
        },
        put: function () {
          this._inPool ||
            ((this._inPool = !0), (this._weak = !1), ba.pool.putUnsafe(this));
        },
        destroy: function () {},
        set_x: function (a) {
          return (this.x = a);
        },
        set_y: function (a) {
          return (this.y = a);
        },
        __class__: ba,
        __properties__: { set_y: "set_y", set_x: "set_x" },
      };
      var Qb = function (a, b, c, d, e, f, k, r) {
        null == r && (r = 0);
        null == k && (k = 0);
        null == f && (f = 0);
        null == e && (e = 0);
        null == d && (d = 1);
        null == c && (c = 1);
        null == b && (b = 1);
        null == a && (a = 1);
        this.redMultiplier = a;
        this.greenMultiplier = b;
        this.blueMultiplier = c;
        this.alphaMultiplier = d;
        this.redOffset = e;
        this.greenOffset = f;
        this.blueOffset = k;
        this.alphaOffset = r;
      };
      h["openfl.geom.ColorTransform"] = Qb;
      Qb.__name__ = "openfl.geom.ColorTransform";
      Qb.prototype = {
        __clone: function () {
          return new Qb(
            this.redMultiplier,
            this.greenMultiplier,
            this.blueMultiplier,
            this.alphaMultiplier,
            this.redOffset,
            this.greenOffset,
            this.blueOffset,
            this.alphaOffset
          );
        },
        __copyFrom: function (a) {
          this.redMultiplier = a.redMultiplier;
          this.greenMultiplier = a.greenMultiplier;
          this.blueMultiplier = a.blueMultiplier;
          this.alphaMultiplier = a.alphaMultiplier;
          this.redOffset = a.redOffset;
          this.greenOffset = a.greenOffset;
          this.blueOffset = a.blueOffset;
          this.alphaOffset = a.alphaOffset;
        },
        __combine: function (a) {
          this.redMultiplier *= a.redMultiplier;
          this.greenMultiplier *= a.greenMultiplier;
          this.blueMultiplier *= a.blueMultiplier;
          this.alphaMultiplier *= a.alphaMultiplier;
          this.redOffset += a.redOffset;
          this.greenOffset += a.greenOffset;
          this.blueOffset += a.blueOffset;
          this.alphaOffset += a.alphaOffset;
        },
        __identity: function () {
          this.alphaMultiplier =
            this.blueMultiplier =
            this.greenMultiplier =
            this.redMultiplier =
              1;
          this.alphaOffset =
            this.blueOffset =
            this.greenOffset =
            this.redOffset =
              0;
        },
        __invert: function () {
          this.redMultiplier =
            0 != this.redMultiplier ? 1 / this.redMultiplier : 1;
          this.greenMultiplier =
            0 != this.greenMultiplier ? 1 / this.greenMultiplier : 1;
          this.blueMultiplier =
            0 != this.blueMultiplier ? 1 / this.blueMultiplier : 1;
          this.alphaMultiplier =
            0 != this.alphaMultiplier ? 1 / this.alphaMultiplier : 1;
          this.redOffset = -this.redOffset;
          this.greenOffset = -this.greenOffset;
          this.blueOffset = -this.blueOffset;
          this.alphaOffset = -this.alphaOffset;
        },
        __equals: function (a, b) {
          return null == a ||
            this.redMultiplier != a.redMultiplier ||
            this.greenMultiplier != a.greenMultiplier ||
            this.blueMultiplier != a.blueMultiplier ||
            (!b && this.alphaMultiplier != a.alphaMultiplier) ||
            this.redOffset != a.redOffset ||
            this.greenOffset != a.greenOffset ||
            this.blueOffset != a.blueOffset
            ? !1
            : this.alphaOffset == a.alphaOffset;
        },
        __isDefault: function (a) {
          return a
            ? 1 == this.redMultiplier &&
              1 == this.greenMultiplier &&
              1 == this.blueMultiplier &&
              0 == this.redOffset &&
              0 == this.greenOffset &&
              0 == this.blueOffset
              ? 0 == this.alphaOffset
              : !1
            : 1 == this.redMultiplier &&
              1 == this.greenMultiplier &&
              1 == this.blueMultiplier &&
              1 == this.alphaMultiplier &&
              0 == this.redOffset &&
              0 == this.greenOffset &&
              0 == this.blueOffset
            ? 0 == this.alphaOffset
            : !1;
        },
        __setArrays: function (a, b) {
          a[0] = this.redMultiplier;
          a[1] = this.greenMultiplier;
          a[2] = this.blueMultiplier;
          a[3] = this.alphaMultiplier;
          b[0] = this.redOffset;
          b[1] = this.greenOffset;
          b[2] = this.blueOffset;
          b[3] = this.alphaOffset;
        },
        __toLimeColorMatrix: function () {
          if (null == Qb.__limeColorMatrix) {
            var a = new Float32Array(20);
            Qb.__limeColorMatrix = a;
          }
          Qb.__limeColorMatrix[0] = this.redMultiplier;
          Qb.__limeColorMatrix[4] = this.redOffset / 255;
          Qb.__limeColorMatrix[6] = this.greenMultiplier;
          Qb.__limeColorMatrix[9] = this.greenOffset / 255;
          Qb.__limeColorMatrix[12] = this.blueMultiplier;
          Qb.__limeColorMatrix[14] = this.blueOffset / 255;
          Qb.__limeColorMatrix[18] = this.alphaMultiplier;
          Qb.__limeColorMatrix[19] = this.alphaOffset / 255;
          return Qb.__limeColorMatrix;
        },
        __class__: Qb,
      };
      var Ob = function (a, b, c, d, e) {
        null == e && (e = 0);
        null == d && (d = 0);
        null == c && (c = 0);
        null == b && (b = 0);
        null == a && (a = 0);
        this._helperPoint = new gb();
        this._helperMatrix = new kh();
        var f = Ga._pool.get(),
          k = 0,
          r = 0,
          l = 0,
          J = 0;
        null == J && (J = 0);
        null == l && (l = 0);
        null == r && (r = 0);
        null == k && (k = 0);
        f.x = k;
        f.y = r;
        f.width = l;
        f.height = J;
        f._inPool = !1;
        this._bounds = f;
        this._scrollRect = new t();
        this.initialZoom = 1;
        this.filters = null;
        k = f = 0;
        null == k && (k = 0);
        null == f && (f = 0);
        f = ba.pool.get().set(f, k);
        f._inPool = !1;
        this._point = f;
        this._fxShakeAxes = 17;
        this._fxFadeAlpha = this._fxShakeIntensity = this._fxShakeDuration = 0;
        this._fxFadeComplete = null;
        this._fxFadeIn = !1;
        k = f = this._fxFadeDuration = 0;
        null == k && (k = 0);
        null == f && (f = 0);
        f = ba.pool.get().set(f, k);
        f._inPool = !1;
        this._scrollTarget = f;
        this._fxFlashAlpha = this._fxFadeColor = 0;
        this._fxFlashComplete = null;
        k = f = this._fxFlashColor = this._fxFlashDuration = 0;
        null == k && (k = 0);
        null == f && (f = 0);
        f = ba.pool.get().set(f, k);
        f._inPool = !1;
        this._flashOffset = f;
        this._flashPoint = new gb();
        this.filtersEnabled = !0;
        k = f = 0;
        null == k && (k = 0);
        null == f && (f = 0);
        f = ba.pool.get().set(f, k);
        f._inPool = !1;
        this.followLead = f;
        this.antialiasing = !1;
        this.color = -1;
        this.alpha = 1;
        this._useBlitMatrix = !1;
        this._blitMatrix = new kh();
        this.width = this.height = 0;
        this.pixelPerfectShake = null;
        this.flashSprite = new t();
        this.useBgAlphaBlending = !1;
        k = f = 0;
        null == k && (k = 0);
        null == f && (f = 0);
        f = ba.pool.get().set(f, k);
        f._inPool = !1;
        this.scroll = f;
        this.followLerp = 60 / g.updateFramerate;
        k = f = 0;
        null == k && (k = 0);
        null == f && (f = 0);
        f = ba.pool.get().set(f, k);
        f._inPool = !1;
        this.targetOffset = f;
        this.x = this.y = this.scaleX = this.scaleY = 0;
        O.call(this);
        this.set_x(a);
        this.set_y(b);
        this.set_width(0 >= c ? g.width : c);
        this.set_height(0 >= d ? g.height : d);
        this._flashRect = new ha(0, 0, this.width, this.height);
        this.flashSprite.addChild(this._scrollRect);
        this._scrollRect.set_scrollRect(new ha());
        (this.pixelPerfectRender = g.renderBlit)
          ? ((this.screen = new F()),
            (this.buffer = new S(this.width, this.height, !0, 0)),
            this.screen.set_pixels(this.buffer),
            (a = this.screen.origin),
            a.set_x(0),
            a.set_y(0),
            (this._flashBitmap = new lc(this.buffer)),
            this._scrollRect.addChild(this._flashBitmap),
            (this._fill = new S(this.width, this.height, !0, 0)))
          : ((this.canvas = new t()), this._scrollRect.addChild(this.canvas));
        this.set_color(-1);
        this.initialZoom = 0 == e ? Ob.defaultZoom : e;
        this.set_zoom(e);
        this.updateScrollRect();
        this.updateFlashOffset();
        this.updateFlashSpritePosition();
        this.updateInternalSpritePositions();
        this.bgColor = g.cameras.get_bgColor();
      };
      h["flixel.FlxCamera"] = Ob;
      Ob.__name__ = "flixel.FlxCamera";
      Ob.__super__ = O;
      Ob.prototype = q(O.prototype, {
        startQuadBatch: function (a, b, c, d, e, f) {
          null == e && (e = !1);
          null == c && (c = !1);
          var k = Kd.blendToInt(d);
          if (
            null != this._currentDrawItem &&
            this._currentDrawItem.type == Ak.TILES &&
            this._headTiles.graphics == a &&
            this._headTiles.colored == b &&
            this._headTiles.hasColorOffsets == c &&
            this._headTiles.blending == k &&
            this._headTiles.blend == d &&
            this._headTiles.antialiasing == e &&
            this._headTiles.shader == f
          )
            return this._headTiles;
          if (null != Ob._storageTilesHead) {
            var r = Ob._storageTilesHead;
            var l = Ob._storageTilesHead.nextTyped;
            r.reset();
            Ob._storageTilesHead = l;
          } else r = new Bk();
          r.graphics = a;
          r.antialiasing = e;
          r.colored = b;
          r.hasColorOffsets = c;
          r.blending = k;
          r.blend = d;
          r.shader = f;
          r.nextTyped = this._headTiles;
          this._headTiles = r;
          null == this._headOfDrawStack && (this._headOfDrawStack = r);
          null != this._currentDrawItem && (this._currentDrawItem.next = r);
          return (this._currentDrawItem = r);
        },
        clearDrawStack: function () {
          for (var a = this._headTiles, b; null != a; )
            (b = a.nextTyped),
              a.reset(),
              (a.nextTyped = Ob._storageTilesHead),
              (Ob._storageTilesHead = a),
              (a = b);
          for (a = this._headTriangles; null != a; )
            (b = a.nextTyped),
              a.reset(),
              (a.nextTyped = Ob._storageTrianglesHead),
              (Ob._storageTrianglesHead = a),
              (a = b);
          this._headTriangles =
            this._headTiles =
            this._headOfDrawStack =
            this._currentDrawItem =
              null;
        },
        render: function () {
          for (var a = this._headOfDrawStack; null != a; )
            a.render(this), (a = a.next);
        },
        drawPixels: function (a, b, c, d, e, f, k) {
          null == f && (f = !1);
          if (g.renderBlit)
            this._helperMatrix.copyFrom(c),
              this._useBlitMatrix
                ? (this._helperMatrix.concat(this._blitMatrix),
                  this.buffer.draw(
                    b,
                    this._helperMatrix,
                    null,
                    null,
                    null,
                    f || this.antialiasing
                  ))
                : (this._helperMatrix.translate(
                    -this.viewMarginX,
                    -this.viewMarginY
                  ),
                  this.buffer.draw(
                    b,
                    this._helperMatrix,
                    null,
                    e,
                    null,
                    f || this.antialiasing
                  ));
          else {
            b = null != d && of.hasRGBMultipliers(d);
            var r = null != d && of.hasRGBAOffsets(d);
            this.startQuadBatch(a.parent, b, r, e, f, k).addQuad(a, c, d);
          }
        },
        copyPixels: function (a, b, c, d, e, f, k, r) {
          null == k && (k = !1);
          g.renderBlit
            ? null != b
              ? this._useBlitMatrix
                ? (this._helperMatrix.identity(),
                  this._helperMatrix.translate(d.x, d.y),
                  this._helperMatrix.concat(this._blitMatrix),
                  this.buffer.draw(
                    b,
                    this._helperMatrix,
                    null,
                    null,
                    null,
                    k || this.antialiasing
                  ))
                : ((this._helperPoint.x = d.x - (this.viewMarginX | 0)),
                  (this._helperPoint.y = d.y - (this.viewMarginY | 0)),
                  this.buffer.copyPixels(
                    b,
                    c,
                    this._helperPoint,
                    null,
                    null,
                    !0
                  ))
              : null != a && a.paint(this.buffer, d, !0)
            : (this._helperMatrix.identity(),
              this._helperMatrix.translate(d.x + a.offset.x, d.y + a.offset.y),
              (b = null != e && of.hasRGBMultipliers(e)),
              (c = null != e && of.hasRGBAOffsets(e)),
              this.startQuadBatch(a.parent, b, c, f, k, r).addQuad(
                a,
                this._helperMatrix,
                e
              ));
        },
        destroy: function () {
          V.removeChild(this.flashSprite, this._scrollRect);
          if (g.renderBlit)
            V.removeChild(this._scrollRect, this._flashBitmap),
              (this.screen = V.destroy(this.screen)),
              (this._flashBitmap = this.buffer = null),
              (this._fill = V.dispose(this._fill));
          else {
            V.removeChild(this._scrollRect, this.canvas);
            if (null != this.canvas) {
              for (var a = 0, b = this.canvas.get_numChildren(); a < b; )
                a++, this.canvas.removeChildAt(0);
              this.canvas = null;
            }
            null != this._headOfDrawStack && this.clearDrawStack();
            this._helperPoint = this._helperMatrix = this._blitMatrix = null;
          }
          this._bounds = null;
          this.scroll = V.put(this.scroll);
          this.targetOffset = V.put(this.targetOffset);
          this.deadzone = V.put(this.deadzone);
          this._fxShakeComplete =
            this._fxFadeComplete =
            this._fxFlashComplete =
            this._flashPoint =
            this._flashRect =
            this._scrollRect =
            this.flashSprite =
            this.target =
              null;
          O.prototype.destroy.call(this);
        },
        update: function (a) {
          null != this.target && this.updateFollow();
          this.updateScroll();
          this.updateFlash(a);
          this.updateFade(a);
          this.flashSprite.set_filters(
            this.filtersEnabled ? this.filters : null
          );
          this.updateFlashSpritePosition();
          this.updateShake(a);
        },
        updateScroll: function () {
          this.bindScrollPos(this.scroll);
        },
        bindScrollPos: function (a) {
          var b =
              null == this.minScrollX
                ? null
                : this.minScrollX -
                  ((this.zoom - 1) * this.width) / (2 * this.zoom),
            c =
              null == this.maxScrollX
                ? null
                : this.maxScrollX +
                  ((this.zoom - 1) * this.width) / (2 * this.zoom),
            d =
              null == this.minScrollY
                ? null
                : this.minScrollY -
                  ((this.zoom - 1) * this.height) / (2 * this.zoom),
            e =
              null == this.maxScrollY
                ? null
                : this.maxScrollY +
                  ((this.zoom - 1) * this.height) / (2 * this.zoom),
            f = a.x;
          c = null != c ? c - this.width : null;
          b = null != b && f < b ? b : f;
          a.set_x(null != c && b > c ? c : b);
          f = a.y;
          c = null != e ? e - this.height : null;
          b = null != d && f < d ? d : f;
          a.set_y(null != c && b > c ? c : b);
          return a;
        },
        updateFollow: function () {
          if (null == this.deadzone) {
            this.target.getMidpoint(this._point);
            var a = this._point,
              b = this.targetOffset,
              c = b.x,
              d = b.y;
            null == d && (d = 0);
            null == c && (c = 0);
            a.set_x(a.x + c);
            a.set_y(a.y + d);
            b._weak && b.put();
            a = this._scrollTarget;
            c = this._point.x - 0.5 * this.width;
            d = this._point.y - 0.5 * this.height;
            null == d && (d = 0);
            null == c && (c = 0);
            a.set_x(c);
            a.set_y(d);
          } else
            (a = this.target.x + this.targetOffset.x),
              (c = this.target.y + this.targetOffset.y),
              this.style == og.SCREEN_BY_SCREEN
                ? (a >= this.scroll.x + (this.width - this.viewMarginX)
                    ? this._scrollTarget.set_x(
                        this._scrollTarget.x +
                          (this.width - 2 * this.viewMarginX)
                      )
                    : a + this.target.get_width() <
                        this.scroll.x + this.viewMarginX &&
                      this._scrollTarget.set_x(
                        this._scrollTarget.x -
                          (this.width - 2 * this.viewMarginX)
                      ),
                  c >= this.scroll.y + (this.height - this.viewMarginY)
                    ? this._scrollTarget.set_y(
                        this._scrollTarget.y +
                          (this.height - 2 * this.viewMarginY)
                      )
                    : c + this.target.get_height() <
                        this.scroll.y + this.viewMarginY &&
                      this._scrollTarget.set_y(
                        this._scrollTarget.y -
                          (this.height - 2 * this.viewMarginY)
                      ),
                  this.bindScrollPos(this._scrollTarget))
                : ((d = a - this.deadzone.x),
                  this._scrollTarget.x > d && this._scrollTarget.set_x(d),
                  (d =
                    a +
                    this.target.get_width() -
                    this.deadzone.x -
                    this.deadzone.width),
                  this._scrollTarget.x < d && this._scrollTarget.set_x(d),
                  (d = c - this.deadzone.y),
                  this._scrollTarget.y > d && this._scrollTarget.set_y(d),
                  (d =
                    c +
                    this.target.get_height() -
                    this.deadzone.y -
                    this.deadzone.height),
                  this._scrollTarget.y < d && this._scrollTarget.set_y(d)),
              this.target instanceof F &&
                (null == this._lastTargetPosition &&
                  ((c = this.target.x),
                  (d = this.target.y),
                  null == d && (d = 0),
                  null == c && (c = 0),
                  (a = c),
                  null == d && (d = 0),
                  null == a && (a = 0),
                  (b = ba.pool.get().set(a, d)),
                  (b._inPool = !1),
                  (this._lastTargetPosition = b)),
                this._scrollTarget.set_x(
                  this._scrollTarget.x +
                    (this.target.x - this._lastTargetPosition.x) *
                      this.followLead.x
                ),
                this._scrollTarget.set_y(
                  this._scrollTarget.y +
                    (this.target.y - this._lastTargetPosition.y) *
                      this.followLead.y
                ),
                this._lastTargetPosition.set_x(this.target.x),
                this._lastTargetPosition.set_y(this.target.y));
          this.followLerp >= 60 / g.updateFramerate
            ? ((a = this.scroll),
              (b = this._scrollTarget),
              (c = b.x),
              (d = b.y),
              null == d && (d = 0),
              null == c && (c = 0),
              a.set_x(c),
              a.set_y(d),
              b._weak && b.put())
            : (this.scroll.set_x(
                this.scroll.x +
                  (60 / g.updateFramerate) *
                    this.followLerp *
                    (this._scrollTarget.x - this.scroll.x)
              ),
              this.scroll.set_y(
                this.scroll.y +
                  (60 / g.updateFramerate) *
                    this.followLerp *
                    (this._scrollTarget.y - this.scroll.y)
              ));
        },
        updateFlash: function (a) {
          0 < this._fxFlashAlpha &&
            ((this._fxFlashAlpha -= a / this._fxFlashDuration),
            0 >= this._fxFlashAlpha &&
              null != this._fxFlashComplete &&
              this._fxFlashComplete());
        },
        updateFade: function (a) {
          0 != this._fxFadeDuration &&
            (this._fxFadeIn
              ? ((this._fxFadeAlpha -= a / this._fxFadeDuration),
                0 >= this._fxFadeAlpha &&
                  ((this._fxFadeAlpha = 0), this.completeFade()))
              : ((this._fxFadeAlpha += a / this._fxFadeDuration),
                1 <= this._fxFadeAlpha &&
                  ((this._fxFadeAlpha = 1), this.completeFade())));
        },
        completeFade: function () {
          this._fxFadeDuration = 0;
          null != this._fxFadeComplete && this._fxFadeComplete();
        },
        updateShake: function (a) {
          if (0 < this._fxShakeDuration)
            if (((this._fxShakeDuration -= a), 0 >= this._fxShakeDuration))
              null != this._fxShakeComplete && this._fxShakeComplete();
            else {
              a =
                null == this.pixelPerfectShake
                  ? this.pixelPerfectRender
                  : this.pixelPerfectShake;
              var b = this._fxShakeAxes;
              if (1 == b || 17 == b) {
                b = g.random.float(-1, 1) * this._fxShakeIntensity * this.width;
                a && (b = Math.round(b));
                var c = this.flashSprite;
                c.set_x(c.get_x() + b * this.zoom * g.scaleMode.scale.x);
              }
              b = this._fxShakeAxes;
              if (16 == b || 17 == b)
                (b =
                  g.random.float(-1, 1) * this._fxShakeIntensity * this.height),
                  a && (b = Math.round(b)),
                  (c = this.flashSprite),
                  c.set_y(c.get_y() + b * this.zoom * g.scaleMode.scale.y);
            }
        },
        updateFlashSpritePosition: function () {
          null != this.flashSprite &&
            (this.flashSprite.set_x(
              this.x * g.scaleMode.scale.x + this._flashOffset.x
            ),
            this.flashSprite.set_y(
              this.y * g.scaleMode.scale.y + this._flashOffset.y
            ));
        },
        updateFlashOffset: function () {
          this._flashOffset.set_x(
            0.5 * this.width * g.scaleMode.scale.x * this.initialZoom
          );
          this._flashOffset.set_y(
            0.5 * this.height * g.scaleMode.scale.y * this.initialZoom
          );
        },
        updateScrollRect: function () {
          var a =
            null != this._scrollRect ? this._scrollRect.get_scrollRect() : null;
          null != a &&
            ((a.x = a.y = 0),
            (a.width = this.width * this.initialZoom * g.scaleMode.scale.x),
            (a.height = this.height * this.initialZoom * g.scaleMode.scale.y),
            this._scrollRect.set_scrollRect(a),
            this._scrollRect.set_x(-0.5 * a.width),
            this._scrollRect.set_y(-0.5 * a.height));
        },
        updateInternalSpritePositions: function () {
          g.renderBlit
            ? null != this._flashBitmap &&
              (this._flashBitmap.set_x(0), this._flashBitmap.set_y(0))
            : null != this.canvas &&
              (this.canvas.set_x(
                -0.5 *
                  this.width *
                  (this.scaleX - this.initialZoom) *
                  g.scaleMode.scale.x
              ),
              this.canvas.set_y(
                -0.5 *
                  this.height *
                  (this.scaleY - this.initialZoom) *
                  g.scaleMode.scale.y
              ),
              this.canvas.set_scaleX(this.totalScaleX),
              this.canvas.set_scaleY(this.totalScaleY));
        },
        follow: function (a, b, c) {
          null == b && (b = og.LOCKON);
          null == c && (c = 60 / g.updateFramerate);
          this.style = b;
          this.target = a;
          this.set_followLerp(c);
          c = a = 0;
          this._lastTargetPosition = null;
          switch (b._hx_index) {
            case 0:
              null != this.target &&
                ((a = this.target.get_width()), (c = this.target.get_height()));
              var d = (this.width - a) / 2;
              b = (this.height - c) / 2 - 0.25 * c;
              var e = c;
              null == e && (e = 0);
              null == a && (a = 0);
              null == b && (b = 0);
              null == d && (d = 0);
              c = Ga._pool.get();
              null == e && (e = 0);
              null == a && (a = 0);
              null == b && (b = 0);
              null == d && (d = 0);
              c.x = d;
              c.y = b;
              c.width = a;
              c.height = e;
              b = c;
              b._inPool = !1;
              this.deadzone = b;
              break;
            case 1:
              a = this.width / 8;
              c = this.height / 3;
              d = (this.width - a) / 2;
              b = (this.height - c) / 2 - 0.25 * c;
              e = c;
              null == e && (e = 0);
              null == a && (a = 0);
              null == b && (b = 0);
              null == d && (d = 0);
              c = Ga._pool.get();
              null == e && (e = 0);
              null == a && (a = 0);
              null == b && (b = 0);
              null == d && (d = 0);
              c.x = d;
              c.y = b;
              c.width = a;
              c.height = e;
              b = c;
              b._inPool = !1;
              this.deadzone = b;
              break;
            case 2:
              c = Math.max(this.width, this.height) / 4;
              d = (this.width - c) / 2;
              b = (this.height - c) / 2;
              e = a = c;
              null == e && (e = 0);
              null == a && (a = 0);
              null == b && (b = 0);
              null == d && (d = 0);
              c = Ga._pool.get();
              null == e && (e = 0);
              null == a && (a = 0);
              null == b && (b = 0);
              null == d && (d = 0);
              c.x = d;
              c.y = b;
              c.width = a;
              c.height = e;
              b = c;
              b._inPool = !1;
              this.deadzone = b;
              break;
            case 3:
              c = Math.max(this.width, this.height) / 8;
              d = (this.width - c) / 2;
              b = (this.height - c) / 2;
              e = a = c;
              null == e && (e = 0);
              null == a && (a = 0);
              null == b && (b = 0);
              null == d && (d = 0);
              c = Ga._pool.get();
              null == e && (e = 0);
              null == a && (a = 0);
              null == b && (b = 0);
              null == d && (d = 0);
              c.x = d;
              c.y = b;
              c.width = a;
              c.height = e;
              b = c;
              b._inPool = !1;
              this.deadzone = b;
              break;
            case 4:
              b = d = 0;
              a = this.width;
              e = this.height;
              null == e && (e = 0);
              null == a && (a = 0);
              null == b && (b = 0);
              null == d && (d = 0);
              c = Ga._pool.get();
              null == e && (e = 0);
              null == a && (a = 0);
              null == b && (b = 0);
              null == d && (d = 0);
              c.x = d;
              c.y = b;
              c.width = a;
              c.height = e;
              b = c;
              b._inPool = !1;
              this.deadzone = b;
              break;
            case 5:
              this.deadzone = null;
          }
        },
        flash: function (a, b, c, d) {
          null == d && (d = !1);
          null == b && (b = 1);
          null == a && (a = -1);
          (!d && 0 < this._fxFlashAlpha) ||
            ((this._fxFlashColor = a),
            0 >= b && (b = 1e-6),
            (this._fxFlashDuration = b),
            (this._fxFlashComplete = c),
            (this._fxFlashAlpha = 1));
        },
        fade: function (a, b, c, d, e) {
          null == e && (e = !1);
          null == c && (c = !1);
          null == b && (b = 1);
          null == a && (a = -16777216);
          (0 < this._fxFadeDuration && !e) ||
            ((this._fxFadeColor = a),
            0 >= b && (b = 1e-6),
            (this._fxFadeIn = c),
            (this._fxFadeDuration = b),
            (this._fxFadeComplete = d),
            (this._fxFadeAlpha = this._fxFadeIn ? 0.999999 : 1e-6));
        },
        shake: function (a, b, c, d, e) {
          null == d && (d = !0);
          null == b && (b = 0.5);
          null == a && (a = 0.05);
          null == e && (e = 17);
          (!d && 0 < this._fxShakeDuration) ||
            ((this._fxShakeIntensity = a),
            (this._fxShakeDuration = b),
            (this._fxShakeComplete = c),
            (this._fxShakeAxes = e));
        },
        fill: function (a, b, c, d) {
          null == c && (c = 1);
          null == b && (b = !0);
          g.renderBlit
            ? b
              ? (this._fill.fillRect(this._flashRect, a),
                this.buffer.copyPixels(
                  this._fill,
                  this._flashRect,
                  this._flashPoint,
                  null,
                  null,
                  b
                ))
              : this.buffer.fillRect(this._flashRect, a)
            : 0 != c &&
              ((b = null == d ? this.canvas.get_graphics() : d),
              b.beginFill(a, c),
              b.drawRect(
                this.viewMarginX - 1,
                this.viewMarginY - 1,
                this.width - 2 * this.viewMarginX + 2,
                this.height - 2 * this.viewMarginY + 2
              ),
              b.endFill());
        },
        drawFX: function () {
          if (0 < this._fxFlashAlpha) {
            var a = (this._fxFlashColor >> 24) & 255;
            g.renderBlit
              ? this.fill(
                  ((((0 >= a ? 255 : a) * this._fxFlashAlpha) | 0) << 24) +
                    (this._fxFlashColor & 16777215)
                )
              : this.fill(
                  this._fxFlashColor & 16777215,
                  !0,
                  ((0 >= a ? 255 : a) * this._fxFlashAlpha) / 255,
                  this.canvas.get_graphics()
                );
          }
          0 < this._fxFadeAlpha &&
            ((a = (this._fxFadeColor >> 24) & 255),
            g.renderBlit
              ? this.fill(
                  ((((0 >= a ? 255 : a) * this._fxFadeAlpha) | 0) << 24) +
                    (this._fxFadeColor & 16777215)
                )
              : this.fill(
                  this._fxFadeColor & 16777215,
                  !0,
                  ((0 >= a ? 255 : a) * this._fxFadeAlpha) / 255,
                  this.canvas.get_graphics()
                ));
        },
        checkResize: function () {
          if (g.renderBlit) {
            if (
              this.width != this.buffer.width ||
              this.height != this.buffer.height
            ) {
              var a = this.screen.graphic;
              this.buffer = new S(this.width, this.height, !0, 0);
              this.screen.set_pixels(this.buffer);
              var b = this.screen.origin;
              b.set_x(0);
              b.set_y(0);
              this._flashBitmap.set_bitmapData(this.buffer);
              this._flashRect.width = this.width;
              this._flashRect.height = this.height;
              this._fill = V.dispose(this._fill);
              this._fill = new S(this.width, this.height, !0, 0);
              g.bitmap.removeIfNoUse(a);
            }
            this._blitMatrix.identity();
            this._blitMatrix.translate(-this.viewMarginX, -this.viewMarginY);
            this._blitMatrix.scale(this.scaleX, this.scaleY);
            this._useBlitMatrix =
              this.scaleX < this.initialZoom || this.scaleY < this.initialZoom;
          }
        },
        setScale: function (a, b) {
          this.scaleX = a;
          this.scaleY = b;
          this.totalScaleX = this.scaleX * g.scaleMode.scale.x;
          this.totalScaleY = this.scaleY * g.scaleMode.scale.y;
          g.renderBlit &&
            (this._blitMatrix.identity(),
            this._blitMatrix.translate(-this.viewMarginX, -this.viewMarginY),
            this._blitMatrix.scale(this.scaleX, this.scaleY),
            (this._useBlitMatrix =
              this.scaleX < this.initialZoom || this.scaleY < this.initialZoom)
              ? (this._flashBitmap.set_scaleX(
                  this.initialZoom * g.scaleMode.scale.x
                ),
                this._flashBitmap.set_scaleY(
                  this.initialZoom * g.scaleMode.scale.y
                ))
              : (this._flashBitmap.set_scaleX(this.totalScaleX),
                this._flashBitmap.set_scaleY(this.totalScaleY)));
          this.viewMarginX =
            (0.5 * this.width * (this.scaleX - this.initialZoom)) / this.scaleX;
          this.viewMarginY =
            (0.5 * this.height * (this.scaleY - this.initialZoom)) /
            this.scaleY;
          this.updateScrollRect();
          this.updateInternalSpritePositions();
          g.cameras.cameraResized.dispatch(this);
        },
        onResize: function () {
          this.updateFlashOffset();
          this.setScale(this.scaleX, this.scaleY);
        },
        set_followLerp: function (a) {
          var b = 60 / g.updateFramerate;
          a = 0 > a ? 0 : a;
          return (this.followLerp = null != b && a > b ? b : a);
        },
        set_width: function (a) {
          this.width != a &&
            0 < a &&
            ((this.width = a),
            (this.viewMarginX =
              (0.5 * this.width * (this.scaleX - this.initialZoom)) /
              this.scaleX),
            this.updateFlashOffset(),
            this.updateScrollRect(),
            this.updateInternalSpritePositions(),
            g.cameras.cameraResized.dispatch(this));
          return a;
        },
        set_height: function (a) {
          this.height != a &&
            0 < a &&
            ((this.height = a),
            (this.viewMarginY =
              (0.5 * this.height * (this.scaleY - this.initialZoom)) /
              this.scaleY),
            this.updateFlashOffset(),
            this.updateScrollRect(),
            this.updateInternalSpritePositions(),
            g.cameras.cameraResized.dispatch(this));
          return a;
        },
        set_zoom: function (a) {
          this.zoom = 0 == a ? Ob.defaultZoom : a;
          this.setScale(this.zoom, this.zoom);
          return this.zoom;
        },
        set_alpha: function (a) {
          var b = 0 > a ? 0 : a;
          this.alpha = 1 < b ? 1 : b;
          g.renderBlit
            ? this._flashBitmap.set_alpha(a)
            : this.canvas.set_alpha(a);
          return a;
        },
        set_color: function (a) {
          this.color = a;
          if (g.renderBlit) {
            if (null == this._flashBitmap) return a;
            var b = this._flashBitmap.get_transform().get_colorTransform();
          } else b = this.canvas.get_transform().get_colorTransform();
          b.redMultiplier = ((this.color >> 16) & 255) / 255;
          b.greenMultiplier = ((this.color >> 8) & 255) / 255;
          b.blueMultiplier = (this.color & 255) / 255;
          g.renderBlit
            ? this._flashBitmap.get_transform().set_colorTransform(b)
            : this.canvas.get_transform().set_colorTransform(b);
          return a;
        },
        set_x: function (a) {
          this.x = a;
          this.updateFlashSpritePosition();
          return a;
        },
        set_y: function (a) {
          this.y = a;
          this.updateFlashSpritePosition();
          return a;
        },
        set_visible: function (a) {
          null != this.flashSprite && this.flashSprite.set_visible(a);
          return (this.visible = a);
        },
        get_camera: function () {
          throw N.thrown("don't reference camera.camera");
        },
        set_camera: function (a) {
          throw N.thrown("don't reference camera.camera");
        },
        get_cameras: function () {
          throw N.thrown("don't reference camera.cameras");
        },
        set_cameras: function (a) {
          throw N.thrown("don't reference camera.cameras");
        },
        __class__: Ob,
        __properties__: q(O.prototype.__properties__, {
          set_color: "set_color",
          set_alpha: "set_alpha",
          set_zoom: "set_zoom",
          set_height: "set_height",
          set_width: "set_width",
          set_followLerp: "set_followLerp",
          set_y: "set_y",
          set_x: "set_x",
        }),
      });
      var og = (w["flixel.FlxCameraFollowStyle"] = {
        __ename__: "flixel.FlxCameraFollowStyle",
        __constructs__: null,
        LOCKON: {
          _hx_name: "LOCKON",
          _hx_index: 0,
          __enum__: "flixel.FlxCameraFollowStyle",
          toString: p,
        },
        PLATFORMER: {
          _hx_name: "PLATFORMER",
          _hx_index: 1,
          __enum__: "flixel.FlxCameraFollowStyle",
          toString: p,
        },
        TOPDOWN: {
          _hx_name: "TOPDOWN",
          _hx_index: 2,
          __enum__: "flixel.FlxCameraFollowStyle",
          toString: p,
        },
        TOPDOWN_TIGHT: {
          _hx_name: "TOPDOWN_TIGHT",
          _hx_index: 3,
          __enum__: "flixel.FlxCameraFollowStyle",
          toString: p,
        },
        SCREEN_BY_SCREEN: {
          _hx_name: "SCREEN_BY_SCREEN",
          _hx_index: 4,
          __enum__: "flixel.FlxCameraFollowStyle",
          toString: p,
        },
        NO_DEAD_ZONE: {
          _hx_name: "NO_DEAD_ZONE",
          _hx_index: 5,
          __enum__: "flixel.FlxCameraFollowStyle",
          toString: p,
        },
      });
      og.__constructs__ = [
        og.LOCKON,
        og.PLATFORMER,
        og.TOPDOWN,
        og.TOPDOWN_TIGHT,
        og.SCREEN_BY_SCREEN,
        og.NO_DEAD_ZONE,
      ];
      var Zi = function (a, b, c) {
        this.major = a;
        this.minor = b;
        this.patch = c;
      };
      h["flixel.system.FlxVersion"] = Zi;
      Zi.__name__ = "flixel.system.FlxVersion";
      Zi.prototype = {
        toString: function () {
          var a = Zi.sha;
          "" != a && (a = "@" + a.substring(0, 7));
          return (
            "HaxeFlixel " + this.major + "." + this.minor + "." + this.patch + a
          );
        },
        __class__: Zi,
      };
      var Vm = function () {
        this._lastUniqueKeyIndex = 0;
        this.reset();
      };
      h["flixel.system.frontEnds.BitmapFrontEnd"] = Vm;
      Vm.__name__ = "flixel.system.frontEnds.BitmapFrontEnd";
      Vm.prototype = {
        onAssetsReload: function (a) {
          a = Object.keys(this._cache.h);
          for (var b = a.length, c = 0; c < b; ) {
            var d = a[c++];
            d = this._cache.h[d];
            if (null != d && (null != d.assetsClass || null != d.assetsKey))
              d.onAssetsReload();
          }
        },
        onContext: function () {
          for (
            var a = Object.keys(this._cache.h), b = a.length, c = 0;
            c < b;

          ) {
            var d = a[c++];
            d = this._cache.h[d];
            if (null != d && d.isDumped) d.onContext();
          }
        },
        create: function (a, b, c, d, e) {
          null == d && (d = !1);
          return Xb.fromRectangle(a, b, c, d, e);
        },
        add: function (a, b, c) {
          null == b && (b = !1);
          return a instanceof Xb
            ? Xb.fromGraphic(a, b, c)
            : a instanceof S
            ? Xb.fromBitmapData(a, b, c)
            : Xb.fromAssetKey(M.string(a), b, c);
        },
        findKeyForBitmap: function (a) {
          for (
            var b = Object.keys(this._cache.h), c = b.length, d = 0;
            d < c;

          ) {
            var e = b[d++],
              f = this._cache.h[e];
            if (null != f && f.bitmap == a) return e;
          }
          return null;
        },
        generateKey: function (a, b, c) {
          null == c && (c = !1);
          null == b && (b = a);
          if (c || null == b) b = this.getUniqueKey(b);
          return b;
        },
        getUniqueKey: function (a) {
          null == a && (a = "pixels");
          if (null == this._cache.h[a]) return a;
          for (
            var b = this._lastUniqueKeyIndex, c;
            ++b, (c = a + b), null != this._cache.h[c];

          );
          this._lastUniqueKeyIndex = b;
          return c;
        },
        remove: function (a) {
          if (null != a) {
            var b = a.key;
            if (null != b) {
              aa.cache.removeBitmapData(b);
              var c = this._cache;
              Object.prototype.hasOwnProperty.call(c.h, b) && delete c.h[b];
            }
            a.destroy();
          }
        },
        removeByKey: function (a) {
          if (null != a) {
            var b = this._cache.h[a];
            if (null != a) {
              aa.cache.removeBitmapData(a);
              var c = this._cache;
              Object.prototype.hasOwnProperty.call(c.h, a) && delete c.h[a];
            }
            null != b && b.destroy();
          }
        },
        removeIfNoUse: function (a) {
          null == a || 0 != a.useCount || a.persist || this.remove(a);
        },
        clearCache: function () {
          if (null == this._cache) this._cache = new Q();
          else
            for (
              var a = Object.keys(this._cache.h), b = a.length, c = 0;
              c < b;

            ) {
              var d = a[c++],
                e = this._cache.h[d];
              if (null != e && !e.persist && 0 >= e.useCount) {
                if (null != d) {
                  aa.cache.removeBitmapData(d);
                  var f = this._cache;
                  Object.prototype.hasOwnProperty.call(f.h, d) && delete f.h[d];
                }
                e.destroy();
              }
            }
        },
        reset: function () {
          if (null == this._cache) this._cache = new Q();
          else
            for (
              var a = Object.keys(this._cache.h), b = a.length, c = 0;
              c < b;

            ) {
              var d = a[c++],
                e = this._cache.h[d];
              if (null != d) {
                aa.cache.removeBitmapData(d);
                var f = this._cache;
                Object.prototype.hasOwnProperty.call(f.h, d) && delete f.h[d];
              }
              null != e && e.destroy();
            }
        },
        __class__: Vm,
      };
      var Wm = function () {
        this.useBufferLocking = !1;
        this.cameraResized = new pf();
        this.cameraRemoved = new pf();
        this.cameraAdded = new pf();
        this.defaults = [];
        this.list = [];
        Ob._defaultCameras = this.defaults;
      };
      h["flixel.system.frontEnds.CameraFrontEnd"] = Wm;
      Wm.__name__ = "flixel.system.frontEnds.CameraFrontEnd";
      Wm.prototype = {
        add: function (a, b) {
          null == b && (b = !0);
          g.game.addChildAt(
            a.flashSprite,
            g.game.getChildIndex(g.game._inputContainer)
          );
          this.list.push(a);
          b && this.defaults.push(a);
          a.ID = this.list.length - 1;
          this.cameraAdded.dispatch(a);
          return a;
        },
        remove: function (a, b) {
          null == b && (b = !0);
          var c = this.list.indexOf(a);
          if (null != a && -1 != c) {
            g.game.removeChild(a.flashSprite);
            this.list.splice(c, 1);
            X.remove(this.defaults, a);
            if (g.renderTile) {
              c = 0;
              for (var d = this.list.length; c < d; ) {
                var e = c++;
                this.list[e].ID = e;
              }
            }
            b && a.destroy();
            this.cameraRemoved.dispatch(a);
          } else
            g.log.advanced(
              "FlxG.cameras.remove(): The camera you attempted to remove is not a part of the game.",
              Ja.WARNING,
              !0
            );
        },
        setDefaultDrawTarget: function (a, b) {
          if (-1 == this.list.indexOf(a))
            g.log.advanced(
              "FlxG.cameras.setDefaultDrawTarget(): The specified camera is not a part of the game.",
              Ja.WARNING,
              !0
            );
          else {
            var c = this.defaults.indexOf(a);
            b && -1 == c
              ? this.defaults.push(a)
              : b || this.defaults.splice(c, 1);
          }
        },
        reset: function (a) {
          for (; 0 < this.list.length; ) this.remove(this.list[0]);
          null == a && (a = new Ob(0, 0, g.width, g.height));
          g.camera = this.add(a);
          a.ID = 0;
          Ob._defaultCameras = this.defaults;
        },
        resize: function () {
          for (var a = 0, b = this.list; a < b.length; ) {
            var c = b[a];
            ++a;
            c.onResize();
          }
        },
        get_bgColor: function () {
          return null == g.camera ? -16777216 : g.camera.bgColor;
        },
        set_bgColor: function (a) {
          for (var b = 0, c = this.list; b < c.length; ) {
            var d = c[b];
            ++b;
            d.bgColor = a;
          }
          return a;
        },
        __class__: Wm,
        __properties__: {
          set_bgColor: "set_bgColor",
          get_bgColor: "get_bgColor",
        },
      };
      var Xm = function () {
        this.visible = !1;
        this.visibilityChanged = new Qd();
        this.precision = 3;
      };
      h["flixel.system.frontEnds.DebuggerFrontEnd"] = Xm;
      Xm.__name__ = "flixel.system.frontEnds.DebuggerFrontEnd";
      Xm.prototype = { __class__: Xm };
      var Ym = function () {
        this.resetOnStateSwitch = !0;
        this.list = [];
      };
      h["flixel.system.frontEnds.InputFrontEnd"] = Ym;
      Ym.__name__ = "flixel.system.frontEnds.InputFrontEnd";
      Ym.prototype = {
        add_flixel_input_gamepad_FlxGamepadManager: function (a) {
          for (var b = 0, c = this.list; b < c.length; ) {
            var d = c[b];
            ++b;
            if (Bb.getClassName(a, !0) == Bb.getClassName(d, !0)) return a;
          }
          this.list.push(a);
          return a;
        },
        add_flixel_input_touch_FlxTouchManager: function (a) {
          for (var b = 0, c = this.list; b < c.length; ) {
            var d = c[b];
            ++b;
            if (Bb.getClassName(a, !0) == Bb.getClassName(d, !0)) return a;
          }
          this.list.push(a);
          return a;
        },
        replace_flixel_input_mouse_FlxMouse: function (a, b) {
          for (var c = 0, d = !1, e = 0, f = this.list; e < f.length; ) {
            var k = f[e];
            ++e;
            if (k == a) {
              this.list[c] = b;
              d = !0;
              break;
            }
            ++c;
          }
          return d ? b : null;
        },
        add_flixel_input_mouse_FlxMouse: function (a) {
          for (var b = 0, c = this.list; b < c.length; ) {
            var d = c[b];
            ++b;
            if (Bb.getClassName(a, !0) == Bb.getClassName(d, !0)) return a;
          }
          this.list.push(a);
          return a;
        },
        add_flixel_input_keyboard_FlxKeyboard: function (a) {
          for (var b = 0, c = this.list; b < c.length; ) {
            var d = c[b];
            ++b;
            if (Bb.getClassName(a, !0) == Bb.getClassName(d, !0)) return a;
          }
          this.list.push(a);
          return a;
        },
        reset: function () {
          for (var a = 0, b = this.list; a < b.length; ) {
            var c = b[a];
            ++a;
            c.reset();
          }
        },
        onStateSwitch: function () {
          this.resetOnStateSwitch && this.reset();
        },
        __class__: Ym,
      };
      var Zm = function () {
        this._standardTraceFunction = wb.trace;
      };
      h["flixel.system.frontEnds.LogFrontEnd"] = Zm;
      Zm.__name__ = "flixel.system.frontEnds.LogFrontEnd";
      Zm.prototype = {
        advanced: function (a, b, c) {
          null == b && (b = Ja.NORMAL);
          a instanceof Array || (a = [a]);
          if (b.throwException) throw N.thrown(b.toLogString(a));
        },
        __class__: Zm,
      };
      var wb = function () {};
      h["haxe.Log"] = wb;
      wb.__name__ = "haxe.Log";
      wb.formatOutput = function (a, b) {
        var c = M.string(a);
        if (null == b) return c;
        var d = b.fileName + ":" + b.lineNumber;
        if (null != b.customParams) {
          var e = 0;
          for (b = b.customParams; e < b.length; )
            (a = b[e]), ++e, (c += ", " + M.string(a));
        }
        return d + ": " + c;
      };
      wb.trace = function (a, b) {
        a = wb.formatOutput(a, b);
        "undefined" != typeof console && null != console.log && console.log(a);
      };
      var za = function () {};
      h["js.Boot"] = za;
      za.__name__ = "js.Boot";
      za.getClass = function (a) {
        if (null == a) return null;
        if (a instanceof Array) return Array;
        var b = a.__class__;
        if (null != b) return b;
        a = za.__nativeClassName(a);
        return null != a ? za.__resolveNativeClass(a) : null;
      };
      za.__string_rec = function (a, b) {
        if (null == a) return "null";
        if (5 <= b.length) return "<...>";
        var c = typeof a;
        "function" == c && (a.__name__ || a.__ename__) && (c = "object");
        switch (c) {
          case "function":
            return "<function>";
          case "object":
            if (a.__enum__) {
              var d = w[a.__enum__].__constructs__[a._hx_index];
              c = d._hx_name;
              if (d.__params__) {
                b += "\t";
                var e = [],
                  f = 0;
                for (d = d.__params__; f < d.length; ) {
                  var k = d[f];
                  f += 1;
                  e.push(za.__string_rec(a[k], b));
                }
                return c + "(" + e.join(",") + ")";
              }
              return c;
            }
            if (a instanceof Array) {
              c = "[";
              b += "\t";
              e = 0;
              for (f = a.length; e < f; )
                (d = e++), (c += (0 < d ? "," : "") + za.__string_rec(a[d], b));
              return c + "]";
            }
            try {
              e = a.toString;
            } catch (r) {
              return "???";
            }
            if (
              null != e &&
              e != Object.toString &&
              "function" == typeof e &&
              ((c = a.toString()), "[object Object]" != c)
            )
              return c;
            c = "{\n";
            b += "\t";
            e = null != a.hasOwnProperty;
            f = null;
            for (f in a)
              (e && !a.hasOwnProperty(f)) ||
                "prototype" == f ||
                "__class__" == f ||
                "__super__" == f ||
                "__interfaces__" == f ||
                "__properties__" == f ||
                (2 != c.length && (c += ", \n"),
                (c += b + f + " : " + za.__string_rec(a[f], b)));
            b = b.substring(1);
            return c + ("\n" + b + "}");
          case "string":
            return a;
          default:
            return String(a);
        }
      };
      za.__interfLoop = function (a, b) {
        if (null == a) return !1;
        if (a == b) return !0;
        var c = a.__interfaces__;
        if (null != c)
          for (var d = 0, e = c.length; d < e; ) {
            var f = d++;
            f = c[f];
            if (f == b || za.__interfLoop(f, b)) return !0;
          }
        return za.__interfLoop(a.__super__, b);
      };
      za.__instanceof = function (a, b) {
        if (null == b) return !1;
        switch (b) {
          case Array:
            return a instanceof Array;
          case Wo:
            return "boolean" == typeof a;
          case Xo:
            return null != a;
          case Ko:
            return "number" == typeof a;
          case Lo:
            return "number" == typeof a ? (a | 0) === a : !1;
          case String:
            return "string" == typeof a;
          default:
            if (null != a)
              if ("function" == typeof b) {
                if (za.__downcastCheck(a, b)) return !0;
              } else {
                if (
                  "object" == typeof b &&
                  za.__isNativeObj(b) &&
                  a instanceof b
                )
                  return !0;
              }
            else return !1;
            return (b == $m && null != a.__name__) ||
              (b == Ro && null != a.__ename__)
              ? !0
              : null != a.__enum__
              ? w[a.__enum__] == b
              : !1;
        }
      };
      za.__downcastCheck = function (a, b) {
        return a instanceof b
          ? !0
          : b.__isInterface__
          ? za.__interfLoop(za.getClass(a), b)
          : !1;
      };
      za.__implements = function (a, b) {
        return za.__interfLoop(za.getClass(a), b);
      };
      za.__cast = function (a, b) {
        if (null == a || za.__instanceof(a, b)) return a;
        throw N.thrown("Cannot cast " + M.string(a) + " to " + M.string(b));
      };
      za.__nativeClassName = function (a) {
        a = za.__toStr.call(a).slice(8, -1);
        return "Object" == a || "Function" == a || "Math" == a || "JSON" == a
          ? null
          : a;
      };
      za.__isNativeObj = function (a) {
        return null != za.__nativeClassName(a);
      };
      za.__resolveNativeClass = function (a) {
        return H[a];
      };
      var sh = function (a) {
        this.initialSeed = this.internalSeed = 1;
        null != a
          ? ((a = 1 > a ? 1 : a), (a = (2147483646 < a ? 2147483646 : a) | 0))
          : ((a = (2147483647 * Math.random()) | 0),
            (a = 1 > a ? 1 : a),
            (a = (2147483646 < a ? 2147483646 : a) | 0),
            (a = 1 > a ? 1 : a),
            (a = (2147483646 < a ? 2147483646 : a) | 0));
        a = 1 > a ? 1 : a;
        this.initialSeed =
          (this.internalSeed = (2147483646 < a ? 2147483646 : a) | 0) | 0;
      };
      h["flixel.math.FlxRandom"] = sh;
      sh.__name__ = "flixel.math.FlxRandom";
      sh.prototype = {
        getObject_Array_String: function (a, b, c, d) {
          null == c && (c = 0);
          var e = null;
          if (0 != a.length) {
            if (null == b) {
              e = [];
              for (var f = 0, k = a.length; f < k; ) f++, e.push(1);
              b = e;
            }
            null == d && (d = a.length - 1);
            e = a.length - 1;
            f = 0 > c ? 0 : c;
            c = (null != e && f > e ? e : f) | 0;
            e = a.length - 1;
            f = 0 > d ? 0 : d;
            d = (null != e && f > e ? e : f) | 0;
            d < c && ((c += d), (d = c - d), (c -= d));
            d > b.length - 1 && (d = b.length - 1);
            e = [];
            f = c;
            for (k = d + 1; f < k; ) (d = f++), e.push(b[d]);
            sh._arrayFloatHelper = e;
            e = a[c + this.weightedPick(sh._arrayFloatHelper)];
          }
          return e;
        },
        getObject_flixel_sound_FlxSound: function (a, b, c, d) {
          null == c && (c = 0);
          var e = null;
          if (0 != a.length) {
            if (null == b) {
              e = [];
              for (var f = 0, k = a.length; f < k; ) f++, e.push(1);
              b = e;
            }
            null == d && (d = a.length - 1);
            e = a.length - 1;
            f = 0 > c ? 0 : c;
            c = (null != e && f > e ? e : f) | 0;
            e = a.length - 1;
            f = 0 > d ? 0 : d;
            d = (null != e && f > e ? e : f) | 0;
            d < c && ((c += d), (d = c - d), (c -= d));
            d > b.length - 1 && (d = b.length - 1);
            e = [];
            f = c;
            for (k = d + 1; f < k; ) (d = f++), e.push(b[d]);
            sh._arrayFloatHelper = e;
            e = a[c + this.weightedPick(sh._arrayFloatHelper)];
          }
          return e;
        },
        int: function (a, b, c) {
          null == b && (b = 2147483647);
          null == a && (a = 0);
          if (0 == a && 2147483647 == b && null == c)
            return (
              (this.internalSeed = (48271 * this.internalSeed) % 2147483647) | 0
            );
          if (a == b) return a;
          a > b && ((a += b), (b = a - b), (a -= b));
          if (null == c)
            return Math.floor(
              a +
                ((this.internalSeed =
                  (48271 * this.internalSeed) % 2147483647) /
                  2147483647) *
                  (b - a + 1)
            );
          for (
            var d;
            (d = Math.floor(
              a +
                ((this.internalSeed =
                  (48271 * this.internalSeed) % 2147483647) /
                  2147483647) *
                  (b - a + 1)
            )),
              0 <= c.indexOf(d);

          );
          return d;
        },
        float: function (a, b, c) {
          null == b && (b = 1);
          null == a && (a = 0);
          if (0 == a && 1 == b && null == c)
            return (
              (this.internalSeed = (48271 * this.internalSeed) % 2147483647) /
              2147483647
            );
          if (a == b) var d = a;
          else if ((a > b && ((a += b), (b = a - b), (a -= b)), null == c))
            d =
              a +
              ((this.internalSeed = (48271 * this.internalSeed) % 2147483647) /
                2147483647) *
                (b - a);
          else
            for (
              ;
              (d =
                a +
                ((this.internalSeed =
                  (48271 * this.internalSeed) % 2147483647) /
                  2147483647) *
                  (b - a)),
                0 <= c.indexOf(d);

            );
          return d;
        },
        weightedPick: function (a) {
          for (var b = 0, c = 0, d = 0; d < a.length; ) {
            var e = a[d];
            ++d;
            b += e;
          }
          b = this.float(0, b);
          d = 0;
          for (var f = a.length; d < f; ) {
            e = d++;
            if (b < a[e]) {
              c = e;
              break;
            }
            b -= a[e];
          }
          return c;
        },
        color: function (a, b, c, d) {
          null == d && (d = !1);
          if (null == a && null == b) {
            var e = this.int(0, 255);
            var f = this.int(0, 255);
            d = this.int(0, 255);
            c = null == c ? this.int(0, 255) : c;
          } else
            null == b
              ? ((e = this.int((a >> 16) & 255, 255)),
                (f = d ? e : this.int((a >> 8) & 255, 255)),
                (d = d ? e : this.int(a & 255, 255)),
                (c = null == c ? this.int((a >> 24) & 255, 255) : c))
              : null == a
              ? ((e = this.int(0, (b >> 16) & 255)),
                (f = d ? e : this.int(0, (b >> 8) & 255)),
                (d = d ? e : this.int(0, b & 255)),
                (c = null == c ? this.int(0, (b >> 24) & 255) : c))
              : ((e = this.int((a >> 16) & 255, (b >> 16) & 255)),
                (f = d ? e : this.int((a >> 8) & 255, (b >> 8) & 255)),
                (d = d ? e : this.int(a & 255, b & 255)),
                (c =
                  null == c ? this.int((a >> 24) & 255, (b >> 24) & 255) : c));
          null == c && (c = 255);
          a = ob._new();
          null == c && (c = 255);
          a =
            (((a & -16711681) | ((255 < e ? 255 : 0 > e ? 0 : e) << 16)) &
              -65281) |
            ((255 < f ? 255 : 0 > f ? 0 : f) << 8);
          a &= -256;
          a |= 255 < d ? 255 : 0 > d ? 0 : d;
          a &= 16777215;
          return (a |= (255 < c ? 255 : 0 > c ? 0 : c) << 24);
        },
        __class__: sh,
      };
      var ke = function () {
        this.status = th.EMPTY;
      };
      h["flixel.util.FlxSave"] = ke;
      ke.__name__ = "flixel.util.FlxSave";
      ke.__interfaces__ = [U];
      ke.validate = function (a) {
        return a;
      };
      ke.validateAndWarn = function (a, b) {
        return ke.validate(a);
      };
      ke.prototype = {
        destroy: function () {
          this._sharedObject = null;
          this.status = th.EMPTY;
          this.data = null;
        },
        bind: function (a, b) {
          this.destroy();
          a = ke.validateAndWarn(a, "name");
          null != b && (b = ke.validateAndWarn(b, "path"));
          try {
            (this._sharedObject = Uc.getLocal(a, b)),
              (this.status = th.BOUND(a, b));
          } catch (d) {
            var c = N.caught(d);
            if (c instanceof Cb)
              return (
                g.log.advanced(
                  "Error:" +
                    c.get_message() +
                    ' name:"' +
                    a +
                    '", path:"' +
                    b +
                    '".',
                  Ja.ERROR,
                  !0
                ),
                this.destroy(),
                !1
              );
            throw d;
          }
          this.data = this._sharedObject.data;
          return !0;
        },
        mergeDataFrom: function (a, b, c, d, e) {
          null == e && (e = 0);
          null == d && (d = !0);
          null == c && (c = !1);
          if (!this.checkStatus()) return !1;
          var f = new ke();
          if (f.bind(a, b))
            return (
              (a = this.mergeData(f.data, c, e)), d && f.erase(), f.destroy(), a
            );
          f.destroy();
          return !1;
        },
        mergeData: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = !1, e = 0, f = qa.fields(a); e < f.length; ) {
            var k = f[e];
            ++e;
            d = !0;
            if (b || !Object.prototype.hasOwnProperty.call(this.data, k))
              this.data[k] = qa.field(a, k);
          }
          return d ? this.flush(c) : !0;
        },
        flush: function (a) {
          null == a && (a = 0);
          if (!this.checkStatus()) return !1;
          try {
            0 != this._sharedObject.flush(a) &&
              (this.status = th.ERROR(
                "FlxSave is requesting extra storage space."
              ));
          } catch (b) {
            if (N.caught(b) instanceof Cb)
              this.status = th.ERROR(
                "There was an problem flushing the save data."
              );
            else throw b;
          }
          this.checkStatus();
          return 1 == this.status._hx_index ? !0 : !1;
        },
        erase: function () {
          if (!this.checkStatus()) return !1;
          this._sharedObject.clear();
          this.data = {};
          return !0;
        },
        checkStatus: function () {
          var a = this.status;
          switch (a._hx_index) {
            case 0:
              g.log.advanced(
                "You must call FlxSave.bind() before you can read or write data.",
                Ja.WARNING,
                !0
              );
              break;
            case 2:
              g.log.advanced(a.msg, Ja.ERROR, !0);
              break;
            default:
              return !0;
          }
          return !1;
        },
        isEmpty: function () {
          return null != this.data ? 0 == qa.fields(this.data).length : !0;
        },
        __class__: ke,
      };
      var $i = function () {
        this.verticalAlign = an.CENTER;
        this.horizontalAlign = bn.CENTER;
        var a = 0,
          b = 0;
        null == b && (b = 0);
        null == a && (a = 0);
        a = ba.pool.get().set(a, b);
        a._inPool = !1;
        this.deviceSize = a;
        b = a = 0;
        null == b && (b = 0);
        null == a && (a = 0);
        a = ba.pool.get().set(a, b);
        a._inPool = !1;
        this.gameSize = a;
        b = a = 0;
        null == b && (b = 0);
        null == a && (a = 0);
        a = ba.pool.get().set(a, b);
        a._inPool = !1;
        this.scale = a;
        b = a = 0;
        null == b && (b = 0);
        null == a && (a = 0);
        a = ba.pool.get().set(a, b);
        a._inPool = !1;
        this.offset = a;
      };
      h["flixel.system.scaleModes.BaseScaleMode"] = $i;
      $i.__name__ = "flixel.system.scaleModes.BaseScaleMode";
      $i.prototype = {
        onMeasure: function (a, b) {
          g.width = g.initialWidth;
          g.height = g.initialHeight;
          this.updateGameSize(a, b);
          this.updateDeviceSize(a, b);
          this.updateScaleOffset();
          this.updateGamePosition();
        },
        updateGameSize: function (a, b) {
          var c = this.gameSize;
          null == b && (b = 0);
          null == a && (a = 0);
          c.set_x(a);
          c.set_y(b);
        },
        updateDeviceSize: function (a, b) {
          var c = this.deviceSize;
          null == b && (b = 0);
          null == a && (a = 0);
          c.set_x(a);
          c.set_y(b);
        },
        updateScaleOffset: function () {
          this.scale.set_x(this.gameSize.x / g.width);
          this.scale.set_y(this.gameSize.y / g.height);
          this.updateOffsetX();
          this.updateOffsetY();
        },
        updateOffsetX: function () {
          var a = this.offset;
          switch (this.horizontalAlign._hx_index) {
            case 0:
              var b = 0;
              break;
            case 1:
              b = Math.ceil(0.5 * (this.deviceSize.x - this.gameSize.x));
              break;
            case 2:
              b = this.deviceSize.x - this.gameSize.x;
          }
          a.set_x(b);
        },
        updateOffsetY: function () {
          var a = this.offset;
          switch (this.verticalAlign._hx_index) {
            case 0:
              var b = 0;
              break;
            case 1:
              b = Math.ceil(0.5 * (this.deviceSize.y - this.gameSize.y));
              break;
            case 2:
              b = this.deviceSize.y - this.gameSize.y;
          }
          a.set_y(b);
        },
        updateGamePosition: function () {
          null != g.game &&
            (g.game.set_x(this.offset.x), g.game.set_y(this.offset.y));
        },
        __class__: $i,
      };
      var Ck = function (a) {
        null == a && (a = !1);
        $i.call(this);
        this.fillScreen = a;
      };
      h["flixel.system.scaleModes.RatioScaleMode"] = Ck;
      Ck.__name__ = "flixel.system.scaleModes.RatioScaleMode";
      Ck.__super__ = $i;
      Ck.prototype = q($i.prototype, {
        updateGameSize: function (a, b) {
          var c = g.width / g.height,
            d = a / b < c;
          this.fillScreen && (d = !d);
          d
            ? (this.gameSize.set_x(a),
              this.gameSize.set_y(Math.floor(this.gameSize.x / c)))
            : (this.gameSize.set_y(b),
              this.gameSize.set_x(Math.floor(this.gameSize.y * c)));
        },
        __class__: Ck,
      });
      var cn = function () {
        this.focusLost = new Qd();
        this.focusGained = new Qd();
        this.postDraw = new Qd();
        this.preDraw = new Qd();
        this.postUpdate = new Qd();
        this.preUpdate = new Qd();
        this.postGameStart = new Qd();
        this.preGameStart = new Qd();
        this.postGameReset = new Qd();
        this.preGameReset = new Qd();
        this.gameResized = new Dk();
        this.preStateCreate = new pf();
        this.postStateSwitch = new Qd();
        this.preStateSwitch = new Qd();
      };
      h["flixel.system.frontEnds.SignalFrontEnd"] = cn;
      cn.__name__ = "flixel.system.frontEnds.SignalFrontEnd";
      cn.prototype = { __class__: cn };
      var g = function () {};
      h["flixel.FlxG"] = g;
      g.__name__ = "flixel.FlxG";
      g.__properties__ = {
        set_mouse: "set_mouse",
        set_fullscreen: "set_fullscreen",
        get_fullscreen: "get_fullscreen",
        set_drawFramerate: "set_drawFramerate",
        set_updateFramerate: "set_updateFramerate",
      };
      g.addChildBelowMouse = function (a, b) {
        null == b && (b = 0);
        var c = g.game.getChildIndex(g.game._inputContainer),
          d = g.game.get_numChildren();
        c = hc.maxAdd(c, b, d);
        g.game.addChildAt(a, c);
        return a;
      };
      g.init = function (a, b, c) {
        0 > b && (b = -b);
        0 > c && (c = -c);
        g.game = a;
        g.width = b;
        g.height = c;
        g.initRenderMethod();
        g.initialWidth = b;
        g.initialHeight = c;
        b = sa.get_current().stage.stageWidth;
        c = sa.get_current().stage.stageHeight;
        g.scaleMode.onMeasure(b, c);
        g.keys = g.inputs.add_flixel_input_keyboard_FlxKeyboard(new Ek());
        g.set_mouse(
          g.inputs.add_flixel_input_mouse_FlxMouse(new rg(a._inputContainer))
        );
        g.touches = g.inputs.add_flixel_input_touch_FlxTouchManager(new Vh());
        g.gamepads = g.inputs.add_flixel_input_gamepad_FlxGamepadManager(
          new sg()
        );
        g.accelerometer = new dn();
        g.initSave();
        g.plugins = new en();
        g.vcr = new fn();
        g.sound = new gn();
      };
      g.initRenderMethod = function () {
        g.renderMethod = Wh.BLITTING;
        switch (sa.get_current().stage.window.context.type) {
          case "opengl":
          case "opengles":
          case "webgl":
            var a = Wh.DRAW_TILES;
            break;
          default:
            a = Wh.BLITTING;
        }
        g.renderMethod = a;
        g.renderBlit = g.renderMethod == Wh.BLITTING;
        g.renderTile = g.renderMethod == Wh.DRAW_TILES;
        ca.defaultPixelPerfectPosition = g.renderBlit;
      };
      g.initSave = function () {
        if (1 != g.save.status._hx_index) {
          var a = sa.get_current().stage.application.meta.h.file;
          g.save.bind(ke.validate(a));
          g.save.isEmpty() && g.save.mergeDataFrom("flixel", null, !1, !1);
        }
      };
      g.reset = function () {
        var a = g.random,
          b = (2147483647 * Math.random()) | 0;
        b = 1 > b ? 1 : b;
        b = (2147483646 < b ? 2147483646 : b) | 0;
        b = 1 > b ? 1 : b;
        b = (2147483646 < b ? 2147483646 : b) | 0;
        b = 1 > b ? 1 : b;
        a.initialSeed =
          (a.internalSeed = (2147483646 < b ? 2147483646 : b) | 0) | 0;
        g.bitmap.reset();
        g.inputs.reset();
        g.sound.destroy(!0);
        g.autoPause = !0;
        g.fixedTimestep = !0;
        g.timeScale = 1;
        g.animationTimeScale = 1;
        g.elapsed = 0;
        g.maxElapsed = 0.1;
        a = g.worldBounds;
        var c = (b = -10),
          d = g.width + 20,
          e = g.height + 20;
        null == e && (e = 0);
        null == d && (d = 0);
        null == c && (c = 0);
        null == b && (b = 0);
        a.x = b;
        a.y = c;
        a.width = d;
        a.height = e;
        g.worldDivisions = 6;
      };
      g.set_mouse = function (a) {
        if (null == g.mouse)
          return (
            (g.mouse = g.inputs.add_flixel_input_mouse_FlxMouse(a)), g.mouse
          );
        var b = g.mouse,
          c = g.inputs.replace_flixel_input_mouse_FlxMouse(b, a);
        return null != c ? ((g.mouse = c), b.destroy(), a) : b;
      };
      g.set_updateFramerate = function (a) {
        a < g.drawFramerate &&
          g.log.advanced(
            "FlxG.framerate: the game's framerate shouldn't be smaller than the flash framerate, since it can stop your game from updating.",
            Ja.WARNING,
            !0
          );
        g.updateFramerate = a;
        g.game._stepMS = Math.abs(1e3 / a);
        g.game._stepSeconds = g.game._stepMS / 1e3;
        g.game._maxAccumulation < g.game._stepMS &&
          (g.game._maxAccumulation = g.game._stepMS);
        return a;
      };
      g.set_drawFramerate = function (a) {
        a > g.updateFramerate &&
          g.log.advanced(
            "FlxG.drawFramerate: the update framerate shouldn't be smaller than the draw framerate, since it can stop your game from updating.",
            Ja.WARNING,
            !0
          );
        g.drawFramerate = Math.abs(a) | 0;
        null != g.game.stage && g.game.stage.set_frameRate(g.drawFramerate);
        g.game._maxAccumulation = 2e3 / g.drawFramerate - 1;
        g.game._maxAccumulation < g.game._stepMS &&
          (g.game._maxAccumulation = g.game._stepMS);
        return a;
      };
      g.get_fullscreen = function () {
        return 0 != sa.get_current().stage.get_displayState()
          ? 1 == sa.get_current().stage.get_displayState()
          : !0;
      };
      g.set_fullscreen = function (a) {
        sa.get_current().stage.set_displayState(a ? 0 : 2);
        return a;
      };
      var Wh = (w["flixel.FlxRenderMethod"] = {
        __ename__: "flixel.FlxRenderMethod",
        __constructs__: null,
        DRAW_TILES: {
          _hx_name: "DRAW_TILES",
          _hx_index: 0,
          __enum__: "flixel.FlxRenderMethod",
          toString: p,
        },
        BLITTING: {
          _hx_name: "BLITTING",
          _hx_index: 1,
          __enum__: "flixel.FlxRenderMethod",
          toString: p,
        },
      });
      Wh.__constructs__ = [Wh.DRAW_TILES, Wh.BLITTING];
      var Zj = function (a, b, c, d, e, f, k) {
        null == f && (f = !1);
        null == e && (e = 60);
        null == d && (d = 60);
        null == b && (b = 0);
        null == a && (a = 0);
        this._skipSplash = this._resetGame = !1;
        this._customSoundTray = Fk;
        this._lostFocus = !1;
        this._total = this._startTime = 0;
        this._gameJustStarted = !1;
        this.filtersEnabled = !0;
        this.ticks = 0;
        this.focusLostFramerate = 10;
        t.call(this);
        this._inputContainer = new t();
        0 == a && (a = sa.get_current().stage.stageWidth);
        0 == b && (b = sa.get_current().stage.stageHeight);
        g.init(this, a, b);
        g.set_updateFramerate(d);
        g.set_drawFramerate(e);
        this._accumulator = this._stepMS;
        this._skipSplash = f;
        this._initialState = null == c ? ka : c;
        this.addEventListener("addedToStage", n(this, this.create));
      };
      h["flixel.FlxGame"] = Zj;
      Zj.__name__ = "flixel.FlxGame";
      Zj.__super__ = t;
      Zj.prototype = q(t.prototype, {
        create: function (a) {
          null != this.stage &&
            (this.removeEventListener("addedToStage", n(this, this.create)),
            (this._startTime = this.getTimer()),
            (this._total = this.getTimer() - this._startTime),
            this.stage.set_scaleMode(2),
            (this.stage.align = 6),
            this.stage.set_frameRate(g.drawFramerate),
            this.addChild(this._inputContainer),
            (this.soundTray = zb.createInstance(this._customSoundTray, [])),
            this.addChild(this.soundTray),
            this.stage.addEventListener(
              "deactivate",
              n(this, this.onFocusLost)
            ),
            this.stage.addEventListener("activate", n(this, this.onFocus)),
            g.signals.preGameReset.dispatch(),
            this._skipSplash || null != pe.nextState
              ? ((this._requestedState = zb.createInstance(
                  this._initialState,
                  []
                )),
                null == pe.nextState && (this._gameJustStarted = !0))
              : ((pe.nextState = this._initialState),
                (this._requestedState = new pe()),
                (this._skipSplash = !0)),
            g.reset(),
            g.signals.postGameReset.dispatch(),
            this.switchState(),
            g.updateFramerate < g.drawFramerate &&
              g.log.advanced(
                "FlxG.updateFramerate: The update framerate shouldn't be smaller than the draw framerate, since it can slow down your game.",
                Ja.WARNING,
                !0
              ),
            this.stage.addEventListener(
              "enterFrame",
              n(this, this.onEnterFrame)
            ),
            this.stage.addEventListener("resize", n(this, this.onResize)),
            this.resizeGame(
              sa.get_current().stage.stageWidth,
              sa.get_current().stage.stageHeight
            ),
            aa.addEventListener(
              "change",
              ((x = g.bitmap), n(x, x.onAssetsReload))
            ));
        },
        onFocus: function (a) {
          this._lostFocus = !1;
          g.signals.focusGained.dispatch();
          this._state.onFocus();
          if (g.autoPause) {
            this.stage.set_frameRate(g.drawFramerate);
            g.sound.onFocus();
            a = 0;
            for (var b = g.inputs.list; a < b.length; ) {
              var c = b[a];
              ++a;
              c.onFocus();
            }
          }
        },
        onFocusLost: function (a) {
          this._lostFocus = !0;
          g.signals.focusLost.dispatch();
          this._state.onFocusLost();
          if (g.autoPause) {
            this.stage.set_frameRate(this.focusLostFramerate);
            g.sound.onFocusLost();
            a = 0;
            for (var b = g.inputs.list; a < b.length; ) {
              var c = b[a];
              ++a;
              c.onFocusLost();
            }
          }
        },
        onResize: function (a) {
          a = sa.get_current().stage.stageWidth;
          var b = sa.get_current().stage.stageHeight;
          if (g.renderTile) g.bitmap.onContext();
          this.resizeGame(a, b);
        },
        resizeGame: function (a, b) {
          g.scaleMode.onMeasure(a, b);
          this._state.onResize(a, b);
          g.cameras.resize();
          g.signals.gameResized.dispatch(a, b);
          null != this.soundTray && this.soundTray.screenCenter();
        },
        onEnterFrame: function (a) {
          this.ticks = this.getTimer() - this._startTime;
          this._elapsedMS = this.ticks - this._total;
          this._total = this.ticks;
          null != this.soundTray &&
            this.soundTray.active &&
            this.soundTray.update(this._elapsedMS);
          if (!this._lostFocus || !g.autoPause) {
            if (g.vcr.paused)
              if (g.vcr.stepRequested) g.vcr.stepRequested = !1;
              else if (this._state == this._requestedState) return;
            if (g.fixedTimestep)
              for (
                this._accumulator += this._elapsedMS,
                  this._accumulator =
                    this._accumulator > this._maxAccumulation
                      ? this._maxAccumulation
                      : this._accumulator;
                this._accumulator >= this._stepMS;

              )
                this.step(), (this._accumulator -= this._stepMS);
            else this.step();
            this.draw();
          }
        },
        switchState: function () {
          g.cameras.reset();
          g.inputs.onStateSwitch();
          g.sound.destroy();
          g.signals.preStateSwitch.dispatch();
          null != this._state && this._state.destroy();
          g.bitmap.clearCache();
          this._state = this._requestedState;
          this._gameJustStarted && g.signals.preGameStart.dispatch();
          g.signals.preStateCreate.dispatch(this._state);
          this._state.create();
          this._gameJustStarted && this.gameStart();
          g.signals.postStateSwitch.dispatch();
        },
        gameStart: function () {
          g.signals.postGameStart.dispatch();
          this._gameJustStarted = !1;
        },
        step: function () {
          this._resetGame &&
            (g.signals.preGameReset.dispatch(),
            this._skipSplash || null != pe.nextState
              ? ((this._requestedState = zb.createInstance(
                  this._initialState,
                  []
                )),
                null == pe.nextState && (this._gameJustStarted = !0))
              : ((pe.nextState = this._initialState),
                (this._requestedState = new pe()),
                (this._skipSplash = !0)),
            g.reset(),
            g.signals.postGameReset.dispatch(),
            (this._resetGame = !1));
          this.handleReplayRequests();
          this.update();
        },
        handleReplayRequests: function () {},
        update: function () {
          if (this._state.active && this._state.exists) {
            this._state != this._requestedState && this.switchState();
            this.updateElapsed();
            g.signals.preUpdate.dispatch();
            this.updateInput();
            g.sound.update(g.elapsed);
            for (var a = g.elapsed, b = 0, c = g.plugins.list; b < c.length; ) {
              var d = c[b];
              ++b;
              d.exists && d.active && d.update(a);
            }
            this._state.tryUpdate(g.elapsed);
            a = g.elapsed;
            b = 0;
            for (c = g.cameras.list; b < c.length; )
              (d = c[b]), ++b, null != d && d.exists && d.active && d.update(a);
            g.signals.postUpdate.dispatch();
            Od.clearArray(g.swipes);
            this.set_filters(this.filtersEnabled ? this._filters : null);
          }
        },
        updateElapsed: function () {
          if (g.fixedTimestep) g.elapsed = g.timeScale * this._stepSeconds;
          else {
            g.elapsed = (this._elapsedMS / 1e3) * g.timeScale;
            var a = g.maxElapsed * g.timeScale;
            g.elapsed > a && (g.elapsed = a);
          }
        },
        updateInput: function () {
          for (var a = 0, b = g.inputs.list; a < b.length; ) {
            var c = b[a];
            ++a;
            c.update();
          }
        },
        draw: function () {
          if (this._state.visible && this._state.exists) {
            g.signals.preDraw.dispatch();
            g.renderTile && (Kd.drawCalls = 0);
            for (var a = g.cameras, b = 0, c = a.list; b < c.length; ) {
              var d = c[b];
              ++b;
              null != d &&
                d.exists &&
                d.visible &&
                (g.renderBlit &&
                  (d.checkResize(), a.useBufferLocking && d.buffer.lock()),
                g.renderTile &&
                  (d.clearDrawStack(), d.canvas.get_graphics().clear()),
                g.renderBlit
                  ? (d.fill(d.bgColor, d.useBgAlphaBlending),
                    (d.screen.dirty = !0))
                  : d.fill(
                      d.bgColor & 16777215,
                      d.useBgAlphaBlending,
                      ((d.bgColor >> 24) & 255) / 255
                    ));
            }
            b = 0;
            for (c = g.plugins.list; b < c.length; )
              (a = c[b]), ++b, a.exists && a.visible && a.draw();
            this._state.draw();
            if (g.renderTile && g.renderTile)
              for (b = 0, c = g.cameras.list; b < c.length; )
                (d = c[b]),
                  ++b,
                  null != d && d.exists && d.visible && d.render();
            a = g.cameras;
            b = 0;
            for (c = a.list; b < c.length; )
              (d = c[b]),
                ++b,
                null != d &&
                  d.exists &&
                  d.visible &&
                  (d.drawFX(),
                  g.renderBlit &&
                    (a.useBufferLocking && d.buffer.unlock(),
                    (d.screen.dirty = !0)));
            g.signals.postDraw.dispatch();
          }
        },
        getTimer: function () {
          return sa.getTimer();
        },
        __class__: Zj,
      });
      var Wi = function () {};
      h["flixel.addons.display.FlxGridOverlay"] = Wi;
      Wi.__name__ = "flixel.addons.display.FlxGridOverlay";
      Wi.create = function (a, b, c, d, e, f, k) {
        null == k && (k = -2501163);
        null == f && (f = -1579290);
        null == e && (e = !0);
        null == d && (d = -1);
        null == c && (c = -1);
        -1 == c && (c = g.width);
        -1 == d && (d = g.height);
        if (c < a || d < b) return null;
        a = Wi.createGrid(a, b, c, d, e, f, k);
        b = new F();
        b.set_pixels(a);
        b.dirty = !0;
        return b;
      };
      Wi.createGrid = function (a, b, c, d, e, f, k) {
        for (var r = f, l = f, g = new S(c, d, !0), u = 0; u <= d; ) {
          0 < u && l == r && e
            ? (l = l == f ? k : f)
            : 0 < u && l != r && 0 == e && (l = l == k ? f : k);
          for (var m = 0; m <= c; )
            0 == m && (r = l),
              g.fillRect(new ha(m, u, a, b), l),
              (l = l == f ? k : f),
              (m += a);
          u += b;
        }
        return g;
      };
      var ce = function (a, b) {
        null == this.__glFragmentSource &&
          (this.__glFragmentSource =
            "\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tuniform bool hasTransform;\n\t\tuniform bool hasColorTransform;\n\n\t\tvec4 flixel_texture2D(sampler2D bitmap, vec2 coord)\n\t\t{\n\t\t\tvec4 color = texture2D(bitmap, coord);\n\t\t\tif (!hasTransform)\n\t\t\t{\n\t\t\t\treturn color;\n\t\t\t}\n\n\t\t\tif (color.a == 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t}\n\n\t\t\tif (!hasColorTransform)\n\t\t\t{\n\t\t\t\treturn color * openfl_Alphav;\n\t\t\t}\n\n\t\t\tcolor = vec4(color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4(0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp(openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t}\n\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t}\n\t\n\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\tgl_FragColor = flixel_texture2D(bitmap, openfl_TextureCoordv);\n\t\t}");
        null == this.__glVertexSource &&
          (this.__glVertexSource =
            "\n\t\tattribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\t\n\t\tattribute float alpha;\n\t\tattribute vec4 colorMultiplier;\n\t\tattribute vec4 colorOffset;\n\t\tuniform bool hasColorTransform;\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t\t\n\t\t\topenfl_Alphav = openfl_Alpha * alpha;\n\t\t\t\n\t\t\tif (hasColorTransform)\n\t\t\t{\n\t\t\t\topenfl_ColorOffsetv = colorOffset / 255.0;\n\t\t\t\topenfl_ColorMultiplierv = colorMultiplier;\n\t\t\t}\n\t\t}");
        null != a && 0 < a.length
          ? this.set_glFragmentSource(a)
          : this.set_glFragmentSource(ce.BASE_FRAGMENT_SOURCE);
        null != b && 0 < b.length
          ? this.set_glVertexSource(b)
          : this.set_glVertexSource(ce.BASE_VERTEX_SOURCE);
        ze.call(this);
        this.__isGenerated = !0;
        this.__initGL();
      };
      h["flixel.addons.display.FlxRuntimeShader"] = ce;
      ce.__name__ = "flixel.addons.display.FlxRuntimeShader";
      ce.__super__ = ze;
      ce.prototype = q(ze.prototype, {
        __processGLData: function (a, b) {
          var c = 0,
            d;
          for (
            d =
              "uniform" == b
                ? new ya("uniform ([A-Za-z0-9]+) ([A-Za-z0-9_]+)", "")
                : new ya("attribute ([A-Za-z0-9]+) ([A-Za-z0-9_]+)", "");
            d.matchSub(a, c);

          ) {
            var e = d.matched(1);
            var f = d.matched(2);
            if (!K.startsWith(f, "gl_")) {
              c = "uniform" == b;
              if (K.startsWith(e, "sampler")) {
                e = new Ni();
                e.name = f;
                e.__isUniform = c;
                this.__inputBitmapData.push(e);
                switch (f) {
                  case "bitmap":
                    this.__bitmap = e;
                    break;
                  case "openfl_Texture":
                    this.__texture = e;
                }
                this.__data[f] = e;
                try {
                  this.__isGenerated && (this[f] = e);
                } catch (J) {}
              } else if (
                !Object.prototype.hasOwnProperty.call(this.__data, f) ||
                null == qa.field(this.__data, f)
              ) {
                switch (e) {
                  case "bool":
                    var k = 0;
                    break;
                  case "bvec2":
                    k = 1;
                    break;
                  case "bvec3":
                    k = 2;
                    break;
                  case "bvec4":
                    k = 3;
                    break;
                  case "dvec2":
                  case "vec2":
                    k = 5;
                    break;
                  case "dvec3":
                  case "vec3":
                    k = 6;
                    break;
                  case "double":
                  case "float":
                    k = 4;
                    break;
                  case "ivec3":
                  case "uvec3":
                    k = 10;
                    break;
                  case "ivec4":
                  case "uvec4":
                    k = 11;
                    break;
                  case "mat2":
                  case "mat2x2":
                    k = 12;
                    break;
                  case "mat2x3":
                    k = 13;
                    break;
                  case "mat2x4":
                    k = 14;
                    break;
                  case "mat3x2":
                    k = 15;
                    break;
                  case "mat3":
                  case "mat3x3":
                    k = 16;
                    break;
                  case "mat3x4":
                    k = 17;
                    break;
                  case "mat4":
                  case "mat4x4":
                    k = 20;
                    break;
                  case "mat4x2":
                    k = 18;
                    break;
                  case "mat4x3":
                    k = 19;
                    break;
                  case "int":
                  case "uint":
                    k = 8;
                    break;
                  case "ivec2":
                  case "uvec2":
                    k = 9;
                    break;
                  case "dvec4":
                  case "vec4":
                    k = 7;
                    break;
                  default:
                    k = null;
                }
                switch (k) {
                  case 1:
                  case 5:
                  case 9:
                    e = 2;
                    break;
                  case 3:
                  case 7:
                  case 11:
                  case 12:
                    e = 4;
                    break;
                  case 2:
                  case 6:
                  case 10:
                    e = 3;
                    break;
                  case 16:
                    e = 9;
                    break;
                  case 20:
                    e = 16;
                    break;
                  default:
                    e = 1;
                }
                switch (k) {
                  case 12:
                    var r = 2;
                    break;
                  case 16:
                    r = 3;
                    break;
                  case 20:
                    r = 4;
                    break;
                  default:
                    r = 1;
                }
                switch (k) {
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                    var l = new ng();
                    l.set_name(f);
                    l.type = k;
                    l.__arrayLength = r;
                    l.__isBool = !0;
                    l.__isUniform = c;
                    l.__length = e;
                    this.__paramBool.push(l);
                    "openfl_HasColorTransform" == f &&
                      (this.__hasColorTransform = l);
                    this.__data[f] = l;
                    try {
                      this.__isGenerated && (this[f] = l);
                    } catch (J) {}
                    break;
                  case 8:
                  case 9:
                  case 10:
                  case 11:
                    l = new ng();
                    l.set_name(f);
                    l.type = k;
                    l.__arrayLength = r;
                    l.__isInt = !0;
                    l.__isUniform = c;
                    l.__length = e;
                    this.__paramInt.push(l);
                    this.__data[f] = l;
                    try {
                      this.__isGenerated && (this[f] = l);
                    } catch (J) {}
                    break;
                  default:
                    l = new ng();
                    l.set_name(f);
                    l.type = k;
                    l.__arrayLength = r;
                    0 < r &&
                      ((k = r * r),
                      (k = null != k ? new Float32Array(k) : null),
                      (l.__uniformMatrix = k));
                    l.__isFloat = !0;
                    l.__isUniform = c;
                    l.__length = e;
                    this.__paramFloat.push(l);
                    if (K.startsWith(f, "openfl_"))
                      switch (f) {
                        case "openfl_Alpha":
                          this.__alpha = l;
                          break;
                        case "openfl_ColorMultiplier":
                          this.__colorMultiplier = l;
                          break;
                        case "openfl_ColorOffset":
                          this.__colorOffset = l;
                          break;
                        case "openfl_Matrix":
                          this.__matrix = l;
                          break;
                        case "openfl_Position":
                          this.__position = l;
                          break;
                        case "openfl_TextureCoord":
                          this.__textureCoord = l;
                          break;
                        case "openfl_TextureSize":
                          this.__textureSize = l;
                      }
                    this.__data[f] = l;
                    try {
                      this.__isGenerated && (this[f] = l);
                    } catch (J) {}
                }
              }
              f = d.matchedPos();
              c = f.pos + f.len;
            }
          }
        },
        set_glFragmentSource: function (a) {
          null != a &&
            (a = K.replace(
              K.replace(a, "#pragma header", ce.BASE_FRAGMENT_HEADER),
              "#pragma body",
              ce.BASE_FRAGMENT_BODY
            ));
          a != this.__glFragmentSource && (this.__glSourceDirty = !0);
          return (this.__glFragmentSource = a);
        },
        set_glVertexSource: function (a) {
          null != a &&
            (a = K.replace(
              K.replace(a, "#pragma header", ce.BASE_VERTEX_HEADER),
              "#pragma body",
              ce.BASE_VERTEX_BODY
            ));
          a != this.__glVertexSource && (this.__glSourceDirty = !0);
          return (this.__glVertexSource = a);
        },
        __class__: ce,
      });
      var hn = function (a, b, c, d, e, f) {
        null == f && (f = 0.05);
        null == e && (e = 0.4);
        null == d && (d = 3);
        null == c && (c = 10);
        this._recentAnimations = [];
        this._recentFlipY = [];
        this._recentFlipX = [];
        this._recentFrames = [];
        this._recentScales = [];
        this._recentAngles = [];
        this._recentPositions = [];
        this._transp = 1;
        this._counter = this._trailLength = 0;
        this.rotationsEnabled = this.scalesEnabled = this.framesEnabled = !0;
        wa.call(this);
        var k = 0,
          r = 0;
        null == r && (r = 0);
        null == k && (k = 0);
        var l = ba.pool.get().set(k, r);
        l._inPool = !1;
        var g = a.origin;
        k = g.x;
        r = g.y;
        null == r && (r = 0);
        null == k && (k = 0);
        l.set_x(k);
        l.set_y(r);
        g._weak && g.put();
        this._spriteOrigin = l;
        this.target = a;
        this.delay = d;
        this._graphic = b;
        this._transp = e;
        this._difference = f;
        this.increaseLength(c);
        this.set_solid(!1);
      };
      h["flixel.addons.effects.FlxTrail"] = hn;
      hn.__name__ = "flixel.addons.effects.FlxTrail";
      hn.__super__ = wa;
      hn.prototype = q(wa.prototype, {
        destroy: function () {
          V.putArray(this._recentPositions);
          V.putArray(this._recentScales);
          this._graphic =
            this.target =
            this._spriteOrigin =
            this._recentAnimations =
            this._recentFlipY =
            this._recentFlipX =
            this._recentFrames =
            this._recentScales =
            this._recentPositions =
            this._recentAngles =
              null;
          wa.prototype.destroy.call(this);
        },
        update: function (a) {
          this._counter++;
          if (this._counter >= this.delay && 1 <= this._trailLength) {
            this._counter = 0;
            if (this._recentPositions.length == this._trailLength)
              var b = this._recentPositions.pop();
            else {
              var c = 0,
                d = 0;
              null == d && (d = 0);
              null == c && (c = 0);
              c = ba.pool.get().set(c, d);
              c._inPool = !1;
              b = c;
            }
            c = this.target.x - this.target.offset.x;
            d = this.target.y - this.target.offset.y;
            null == d && (d = 0);
            null == c && (c = 0);
            b.set_x(c);
            b.set_y(d);
            this._recentPositions.unshift(b);
            this.rotationsEnabled &&
              this.cacheValue(this._recentAngles, this.target.angle);
            this.scalesEnabled &&
              (this._recentScales.length == this._trailLength
                ? (b = this._recentScales.pop())
                : ((d = c = 0),
                  null == d && (d = 0),
                  null == c && (c = 0),
                  (c = ba.pool.get().set(c, d)),
                  (c._inPool = !1),
                  (b = c)),
              (c = this.target.scale.x),
              (d = this.target.scale.y),
              null == d && (d = 0),
              null == c && (c = 0),
              b.set_x(c),
              b.set_y(d),
              this._recentScales.unshift(b));
            this.framesEnabled &&
              null == this._graphic &&
              (this.cacheValue(
                this._recentFrames,
                this.target.animation.frameIndex
              ),
              this.cacheValue(this._recentFlipX, this.target.flipX),
              this.cacheValue(this._recentFlipY, this.target.flipY),
              this.cacheValue(
                this._recentAnimations,
                this.target.animation._curAnim
              ));
            d = 0;
            for (b = this._recentPositions.length; d < b; ) {
              var e = d++;
              c = this.group.members[e];
              c.set_x(this._recentPositions[e].x);
              c.set_y(this._recentPositions[e].y);
              this.rotationsEnabled &&
                (c.set_angle(this._recentAngles[e]),
                c.origin.set_x(this._spriteOrigin.x),
                c.origin.set_y(this._spriteOrigin.y));
              this.scalesEnabled &&
                (c.scale.set_x(this._recentScales[e].x),
                c.scale.set_y(this._recentScales[e].y));
              if (this.framesEnabled && null == this._graphic) {
                c.animation.set_frameIndex(this._recentFrames[e]);
                c.set_flipX(this._recentFlipX[e]);
                c.set_flipY(this._recentFlipY[e]);
                var f = c.animation;
                e = this._recentAnimations[e];
                e != f._curAnim &&
                  (null != f._curAnim && f._curAnim.stop(),
                  null != e && e.play());
                f._curAnim = e;
              }
              c.set_exists(!0);
            }
          }
          wa.prototype.update.call(this, a);
        },
        cacheValue: function (a, b) {
          a.unshift(b);
          Od.setLength_cacheValue_T(a, this._trailLength);
        },
        increaseLength: function (a) {
          if (!(0 >= a)) {
            this._trailLength += a;
            for (var b = 0; b < a; ) {
              b++;
              var c = new F(0, 0);
              null == this._graphic
                ? c.loadGraphicFromSprite(this.target)
                : c.loadGraphic(this._graphic);
              c.set_exists(!1);
              c.set_active(!1);
              this.add(c);
              c.set_alpha(this._transp);
              this._transp -= this._difference;
              c.set_solid(0 < (this.allowCollisions & 4369));
              0 >= c.alpha && c.kill();
            }
          }
        },
        __class__: hn,
      });
      var jn = function (a, b, c, d, e, f, k, r, l) {
        null == r && (r = !1);
        null == k && (k = !1);
        null == f && (f = 2);
        null == e && (e = 0.8);
        null == d && (d = 0);
        null == c && (c = 0);
        null == b && (b = 0);
        null == a && (a = 0);
        this._width = this._height = 1;
        this.redOffset =
          this.greenOffset =
          this.blueOffset =
          this.alphaOffset =
          this._counter =
            0;
        this.redMultiplier = this.greenMultiplier = this.blueMultiplier = 1;
        this.blendMode = null;
        this.simpleRender = !1;
        this.delay = 2;
        F.call(this, a, b);
        this.group = new ma();
        this.delay = f;
        this.simpleRender = k;
        this.blendMode = l;
        this.set_antialiasing(r);
        this.alphaMultiplier = e;
        this.setSize(c, d);
        this.set_pixels(this._areaPixels);
      };
      h["flixel.addons.effects.FlxTrailArea"] = jn;
      jn.__name__ = "flixel.addons.effects.FlxTrailArea";
      jn.__super__ = F;
      jn.prototype = q(F.prototype, {
        setSize: function (a, b) {
          0 >= a && (a = g.width);
          0 >= b && (b = g.height);
          if (a != this._width || b != this._height)
            (this._width = a),
              (this._height = b),
              (this._areaPixels = new S(
                this._width | 0,
                this._height | 0,
                !0,
                0
              ));
        },
        destroy: function () {
          this.group = V.destroy(this.group);
          this.blendMode = null;
          this.get_pixels() != this._areaPixels && this._areaPixels.dispose();
          this._areaPixels = null;
          F.prototype.destroy.call(this);
        },
        draw: function () {
          this._counter++;
          if (this._counter >= this.delay) {
            this._counter = 0;
            this._areaPixels.lock();
            var a = new Qb(
              this.redMultiplier,
              this.greenMultiplier,
              this.blueMultiplier,
              this.alphaMultiplier,
              this.redOffset,
              this.greenOffset,
              this.blueOffset,
              this.alphaOffset
            );
            this._areaPixels.colorTransform(
              new ha(0, 0, this._areaPixels.width, this._areaPixels.height),
              a
            );
            a = 0;
            for (var b = this.group.members; a < b.length; ) {
              var c = b[a];
              ++a;
              if (c.exists) {
                var d = c.x - this.x - c.offset.x,
                  e = c.y - this.y - c.offset.y;
                if (this.simpleRender)
                  this._areaPixels.copyPixels(
                    c.updateFramePixels(),
                    new ha(0, 0, c.frameWidth, c.frameHeight),
                    new gb(d, e),
                    null,
                    null,
                    !0
                  );
                else {
                  var f = 1 != c.scale.x || 1 != c.scale.y,
                    k = 0 != c.angle && 0 >= c.bakedRotationAngle;
                  this._matrix.identity();
                  if (k || f)
                    this._matrix.translate(-c.origin.x, -c.origin.y),
                      f && this._matrix.scale(c.scale.x, c.scale.y),
                      k && this._matrix.rotate((Math.PI / 180) * c.angle),
                      this._matrix.translate(c.origin.x, c.origin.y);
                  this._matrix.translate(d, e);
                  this._areaPixels.draw(
                    c.updateFramePixels(),
                    this._matrix,
                    c.colorTransform,
                    this.blendMode,
                    null,
                    this.antialiasing
                  );
                }
              }
            }
            this._areaPixels.unlock();
            this.set_pixels(this._areaPixels);
          }
          F.prototype.draw.call(this);
        },
        get_width: function () {
          return this._width;
        },
        set_width: function (a) {
          0 >= a && (a = g.width);
          a != this._width &&
            (this._areaPixels = new S(a | 0, this._height | 0, !0, 0));
          return (this._width = a);
        },
        get_height: function () {
          return this._height;
        },
        set_height: function (a) {
          0 >= a && (a = g.height);
          a != this._height &&
            (this._areaPixels = new S(this._width | 0, a | 0, !0, 0));
          return (this._height = a);
        },
        __class__: jn,
      });
      var kn = function (a, b) {
        this.effectsEnabled = this.updateTargetAnimation = !0;
        F.call(this);
        this.target = a;
        this.effects = null != b ? b : [];
        b = a = 0;
        null == b && (b = 0);
        null == a && (a = 0);
        a = ba.pool.get().set(a, b);
        a._inPool = !1;
        this._effectOffset = a;
      };
      h["flixel.addons.effects.chainable.FlxEffectSprite"] = kn;
      kn.__name__ = "flixel.addons.effects.chainable.FlxEffectSprite";
      kn.__super__ = F;
      kn.prototype = q(F.prototype, {
        destroy: function () {
          this.effects = V.destroyArray(this.effects);
          this._effectOffset = V.put(this._effectOffset);
          this.target = null;
          F.prototype.destroy.call(this);
        },
        getScreenPosition: function (a, b) {
          b = F.prototype.getScreenPosition.call(this, a, b);
          a = this._effectOffset;
          var c = a.x,
            d = a.y;
          null == d && (d = 0);
          null == c && (c = 0);
          b.set_x(b.x + c);
          b.set_y(b.y + d);
          a._weak && a.put();
          return b;
        },
        draw: function () {
          this.target.dirty && this.target.drawFrame();
          if (null != this.target.framePixels) {
            null != this.get_pixels() &&
            this.get_pixels().width == this.target.framePixels.width &&
            this.get_pixels().height == this.target.framePixels.height
              ? (this.get_pixels().fillRect(this.get_pixels().rect, 0),
                this.get_pixels().draw(this.target.framePixels))
              : (V.dispose(this.get_pixels()),
                this.set_pixels(this.target.framePixels.clone()));
            var a = this._effectOffset,
              b = 0,
              c = 0;
            null == c && (c = 0);
            null == b && (b = 0);
            a.set_x(b);
            a.set_y(c);
            if (this.effectsEnabled) {
              this.get_pixels().lock();
              for (var d = 0, e = this.effects; d < e.length; )
                if (
                  ((b = e[d]),
                  ++d,
                  b.active &&
                    (this.set_pixels(b.apply(this.get_pixels())),
                    null != b.offset))
                ) {
                  a = this._effectOffset;
                  var f = b.offset;
                  b = f.x;
                  c = f.y;
                  null == c && (c = 0);
                  null == b && (b = 0);
                  a.set_x(a.x + b);
                  a.set_y(a.y + c);
                  f._weak && f.put();
                }
              this.get_pixels().unlock();
              this._flashRect = this.get_pixels().rect;
            }
          }
          F.prototype.draw.call(this);
        },
        update: function (a) {
          this.updateTargetAnimation &&
            1 < this.target.animation._sprite.get_numFrames() &&
            this.target.updateAnimation(a);
          if (this.effectsEnabled)
            for (var b = 0, c = this.effects; b < c.length; ) {
              var d = c[b];
              ++b;
              d.active && d.update(a);
            }
          F.prototype.update.call(this, a);
        },
        __class__: kn,
      });
      var Gk = function () {};
      h["flixel.addons.effects.chainable.IFlxEffect"] = Gk;
      Gk.__name__ = "flixel.addons.effects.chainable.IFlxEffect";
      Gk.__isInterface__ = !0;
      Gk.__interfaces__ = [U];
      Gk.prototype = { __class__: Gk };
      var De = function (a, b) {
        this.__webAudioContext = null;
        this.__urlLoading = !1;
        pa.call(this, this);
        this.bytesTotal = this.bytesLoaded = 0;
        this.isBuffering = !1;
        this.url = null;
        null != a && this.load(a, b);
        null == a &&
          null != lg.context &&
          "web" == lg.context.type &&
          (this.__webAudioContext = lg.context.web);
      };
      h["openfl.media.Sound"] = De;
      De.__name__ = "openfl.media.Sound";
      De.fromAudioBuffer = function (a) {
        var b = new De();
        b.__buffer = a;
        return b;
      };
      De.__super__ = pa;
      De.prototype = q(pa.prototype, {
        load: function (a, b) {
          var c = this;
          this.url = a.url;
          this.__urlLoading = !0;
          a = ra.getLibrary("default");
          if (
            null != a &&
            Object.prototype.hasOwnProperty.call(
              a.cachedAudioBuffers.h,
              this.url
            )
          )
            this.AudioBuffer_onURLLoad(a.cachedAudioBuffers.h[this.url]);
          else
            Mc.loadFromFile(this.url)
              .onComplete(n(this, this.AudioBuffer_onURLLoad))
              .onError(function (a) {
                c.AudioBuffer_onURLLoad(null);
              });
        },
        play: function (a, b, c) {
          null == b && (b = 0);
          null == a && (a = 0);
          if (32 <= de.__soundChannels.length) return null;
          c = null == c ? new tg() : c.clone();
          var d = de.__soundTransform.pan + c.pan;
          1 < d && (d = 1);
          -1 > d && (d = -1);
          var e = de.__soundTransform.volume * c.volume,
            f = new ln(this.__buffer);
          f.offset = a | 0;
          1 < b && f.set_loops(b - 1);
          f.set_gain(e);
          a = f.get_position();
          a.x = d;
          a.z = -1 * Math.sqrt(1 - Math.pow(d, 2));
          f.set_position(a);
          c = new Hk(this, this.__urlLoading ? null : f, c);
          this.__urlLoading
            ? ((this.__pendingAudioSource = f),
              (this.__pendingSoundChannel = c))
            : null == this.__buffer &&
              null != this.__webAudioContext &&
              c.__startSampleData();
          return c;
        },
        get_id3: function () {
          return new mn();
        },
        get_length: function () {
          return null != this.__buffer
            ? (1e3 * this.__buffer.get_src().duration()) | 0
            : 0;
        },
        AudioBuffer_onURLLoad: function (a) {
          this.__urlLoading = !1;
          null == a
            ? this.dispatchEvent(new aj("ioError"))
            : ((this.__buffer = a),
              this.dispatchEvent(new Ba("complete")),
              null != this.__pendingSoundChannel &&
                ((this.__pendingAudioSource.buffer = this.__buffer),
                this.__pendingAudioSource.init(),
                this.__pendingSoundChannel.__initAudioSource(
                  this.__pendingAudioSource
                )));
          this.__pendingAudioSource = this.__pendingSoundChannel = null;
        },
        __class__: De,
        __properties__: { get_length: "get_length", get_id3: "get_id3" },
      });
      var Ik = function (a, b) {
        De.call(this, a, b);
      };
      h["flixel.addons.text.TypeSound"] = Ik;
      Ik.__name__ = "flixel.addons.text.TypeSound";
      Ik.__super__ = De;
      Ik.prototype = q(De.prototype, { __class__: Ik });
      var rf = function (a, b, c, d, e, f) {
        null == f && (f = !0);
        null == e && (e = 8);
        this._typeVarPercent = 0.5;
        this._typingVariation = !1;
        this._cursorTimer = 0;
        this._typing = this._erasing = this._waiting = !1;
        this._timer = this._waitTimer = this._length = 0;
        this._finalText = "";
        this.skipKeys = [];
        this.paused = this.useDefaultSound = this.finishSounds = !1;
        this.waitTime = 1;
        this.autoErase = !1;
        this.prefix = "";
        this.cursorBlinkSpeed = 0.5;
        this.cursorCharacter = "|";
        this.showCursor = !1;
        this.eraseDelay = 0.02;
        this.delay = 0.05;
        W.call(this, a, b, c, "", e, f);
        this._finalText = d;
      };
      h["flixel.addons.text.FlxTypeText"] = rf;
      rf.__name__ = "flixel.addons.text.FlxTypeText";
      rf.__super__ = W;
      rf.prototype = q(W.prototype, {
        start: function (a, b, c, d, e) {
          null == c && (c = !1);
          null == b && (b = !1);
          null != a && (this.delay = a);
          this._typing = !0;
          this._waiting = this.paused = this._erasing = !1;
          b && (this.set_text(""), (this._length = 0));
          this.autoErase = c;
          null != d && (this.skipKeys = d);
          null != e && (this.completeCallback = e);
          this.insertBreakLines();
          this.useDefaultSound && this.loadDefaultSound();
        },
        insertBreakLines: function () {
          for (var a = this.text, b = this._finalText.length, c, d; ; ) {
            b = X.substr(this._finalText, 0, b).lastIndexOf(" ");
            if (0 >= b) break;
            this.set_text(this.prefix + this._finalText);
            c = this.textField.get_numLines();
            var e =
              X.substr(this._finalText, 0, b) +
              "\n" +
              X.substr(this._finalText, b + 1, this._finalText.length);
            this.set_text(this.prefix + e);
            d = this.textField.get_numLines();
            c == d && (this._finalText = e);
          }
          this.set_text(a);
        },
        resetText: function (a) {
          this.set_text("");
          this._finalText = a;
          this._waiting = this.paused = this._erasing = this._typing = !1;
          this._length = 0;
        },
        onComplete: function () {
          this._timer = 0;
          this._typing = !1;
          if (this.useDefaultSound) {
            var a = this._sound;
            a.cleanup(a.autoDestroy, !0);
          } else if (null != this.sounds) {
            a = 0;
            for (var b = this.sounds; a < b.length; ) {
              var c = b[a];
              ++a;
              c.cleanup(c.autoDestroy, !0);
            }
          }
          null != this.completeCallback && this.completeCallback();
          this.autoErase && 0 >= this.waitTime
            ? (this._erasing = !0)
            : this.autoErase &&
              ((this._waitTimer = this.waitTime), (this._waiting = !0));
        },
        onErased: function () {
          this._timer = 0;
          this._erasing = !1;
          null != this.eraseCallback && this.eraseCallback();
        },
        update: function (a) {
          null != this.skipKeys &&
            0 < this.skipKeys.length &&
            g.keys.checkKeyArrayState(this.skipKeys, 2) &&
            this.skip();
          this._waiting &&
            !this.paused &&
            ((this._waitTimer -= a),
            0 >= this._waitTimer &&
              ((this._waiting = !1), (this._erasing = !0)));
          this._waiting ||
            this.paused ||
            (this._length < this._finalText.length &&
              this._typing &&
              (this._timer += a),
            0 < this._length && this._erasing && (this._timer += a));
          if (this._typing || this._erasing)
            if (
              (this._typing &&
                this._timer >= this.delay &&
                ((this._length += (this._timer / this.delay) | 0),
                this._length > this._finalText.length &&
                  (this._length = this._finalText.length)),
              this._erasing &&
                this._timer >= this.eraseDelay &&
                ((this._length -= (this._timer / this.eraseDelay) | 0),
                0 > this._length && (this._length = 0)),
              (this._typing && this._timer >= this.delay) ||
                (this._erasing && this._timer >= this.eraseDelay))
            )
              if (
                ((this._timer = this._typingVariation
                  ? this._typing
                    ? g.random.float(
                        (-this.delay * this._typeVarPercent) / 2,
                        (this.delay * this._typeVarPercent) / 2
                      )
                    : g.random.float(
                        (-this.eraseDelay * this._typeVarPercent) / 2,
                        (this.eraseDelay * this._typeVarPercent) / 2
                      )
                  : this._timer % this.delay),
                null == this.sounds || this.useDefaultSound)
              )
                this.useDefaultSound && this._sound.play(!this.finishSounds);
              else {
                if (!this.finishSounds)
                  for (var b = 0, c = this.sounds; b < c.length; ) {
                    var d = c[b];
                    ++b;
                    d.cleanup(d.autoDestroy, !0);
                  }
                g.random
                  .getObject_flixel_sound_FlxSound(this.sounds)
                  .play(!this.finishSounds);
              }
          rf.helperString =
            this.prefix + X.substr(this._finalText, 0, this._length);
          this.showCursor &&
            ((this._cursorTimer += a),
            (b =
              "\n" ==
              (this.prefix + this._finalText).charAt(rf.helperString.length)),
            this._cursorTimer > this.cursorBlinkSpeed / 2 &&
              !b &&
              (rf.helperString += this.cursorCharacter.charAt(0)),
            this._cursorTimer > this.cursorBlinkSpeed &&
              (this._cursorTimer = 0));
          if (rf.helperString != this.text) {
            this.set_text(rf.helperString);
            if (
              this._length >= this._finalText.length &&
              this._typing &&
              !this._waiting &&
              !this._erasing
            )
              this.onComplete();
            if (
              0 == this._length &&
              this._erasing &&
              !this._typing &&
              !this._waiting
            )
              this.onErased();
          }
          W.prototype.update.call(this, a);
        },
        skip: function () {
          this._erasing || this._waiting
            ? ((this._length = 0), (this._waiting = !1))
            : this._typing && (this._length = this._finalText.length);
        },
        loadDefaultSound: function () {
          this._sound = g.sound.load(new Ik());
        },
        __class__: rf,
      });
      var Xh = function (a, b) {
        null == b && (b = 0);
        null == a && (a = 0);
        this.x = a;
        this.y = b;
      };
      h["lime.math.Vector2"] = Xh;
      Xh.__name__ = "lime.math.Vector2";
      Xh.prototype = {
        offset: function (a, b) {
          this.x += a;
          this.y += b;
        },
        __toFlashPoint: function () {
          return null;
        },
        __class__: Xh,
      };
      var S = function (a, b, c, d) {
        null == d && (d = -1);
        null == c && (c = !0);
        this.__drawableType = 0;
        this.transparent = c;
        null == a && (a = 0);
        null == b && (b = 0);
        0 > a && (a = 0);
        0 > b && (b = 0);
        this.width = a;
        this.height = b;
        this.rect = new ha(0, 0, a, b);
        this.__textureWidth = a;
        this.__textureHeight = b;
        0 < a &&
          0 < b &&
          (c
            ? 0 == (d & -16777216) && (d = 0)
            : (d = -16777216 | (d & 16777215)),
          (this.image = new Va(
            null,
            0,
            0,
            a,
            b,
            (d << 8) | ((d >>> 24) & 255)
          )),
          this.image.set_transparent(c),
          (this.readable = this.__isValid = !0));
        this.__renderTransform = new xa();
        this.__worldAlpha = 1;
        this.__worldTransform = new xa();
        this.__worldColorTransform = new Qb();
        this.__renderable = !0;
      };
      h["openfl.display.BitmapData"] = S;
      S.__name__ = "openfl.display.BitmapData";
      S.__interfaces__ = [Xa];
      S.fromCanvas = function (a, b) {
        null == b && (b = !0);
        if (null == a) return null;
        var c = new S(0, 0, b, 0);
        c.__fromImage(Va.fromCanvas(a));
        c.image.set_transparent(b);
        return c;
      };
      S.fromImage = function (a, b) {
        null == b && (b = !0);
        if (null == a || null == a.buffer) return null;
        var c = new S(0, 0, b, 0);
        c.__fromImage(a);
        c.image.set_transparent(b);
        return null != c.image ? c : null;
      };
      S.prototype = {
        clone: function () {
          if (this.__isValid)
            if (this.readable || null != this.image)
              var a = S.fromImage(this.image.clone(), this.transparent);
            else
              (a = new S(0, 0, this.transparent, 0)),
                (a.width = this.width),
                (a.height = this.height),
                (a.__textureWidth = this.__textureWidth),
                (a.__textureHeight = this.__textureHeight),
                a.rect.copyFrom(this.rect),
                (a.__framebuffer = this.__framebuffer),
                (a.__framebufferContext = this.__framebufferContext),
                (a.__texture = this.__texture),
                (a.__textureContext = this.__textureContext),
                (a.__isValid = !0);
          else a = new S(this.width, this.height, this.transparent, 0);
          a.__worldTransform.copyFrom(this.__worldTransform);
          a.__renderTransform.copyFrom(this.__renderTransform);
          return a;
        },
        colorTransform: function (a, b) {
          this.readable &&
            this.image.colorTransform(
              a.__toLimeRectangle(),
              b.__toLimeColorMatrix()
            );
        },
        copyPixels: function (a, b, c, d, e, f) {
          null == f && (f = !1);
          this.readable &&
            null != a &&
            (null != e && ((S.__tempVector.x = e.x), (S.__tempVector.y = e.y)),
            this.image.copyPixels(
              a.image,
              b.__toLimeRectangle(),
              c.__toLimeVector2(),
              null != d ? d.image : null,
              null != e ? S.__tempVector : null,
              f
            ));
        },
        dispose: function () {
          this.image = null;
          this.height = this.width = 0;
          this.rect = null;
          this.readable = this.__isValid = !1;
          this.__textureContext =
            this.__texture =
            this.__framebufferContext =
            this.__framebuffer =
            this.__vertexBuffer =
            this.__surface =
              null;
        },
        draw: function (a, b, c, d, e, f) {
          null == f && (f = !1);
          if (null != a) {
            var k = !0,
              r = null;
            a instanceof z &&
              ((r = za.__cast(a, z)),
              r.get_visible() || ((k = !1), r.set_visible(!0)));
            a.__update(!1, !0);
            var l = xa.__pool.get();
            l.copyFrom(a.__renderTransform);
            l.invert();
            null != b && l.concat(b);
            b = null;
            null != e && ((b = xa.__pool.get()), b.copyFrom(l), b.invert());
            var g = new Qb();
            g.__copyFrom(a.__worldColorTransform);
            g.__invert();
            if (this.readable || null == sa.get_current().stage.context3D) {
              if (null != c) {
                var u = ha.__pool.get(),
                  m = xa.__pool.get();
                a.__getBounds(u, m);
                var h = Math.ceil(u.width),
                  p = Math.ceil(u.height);
                m.tx = -u.x;
                m.ty = -u.y;
                h = new S(h, p, !0, 0);
                h.draw(a, m);
                h.colorTransform(h.rect, c);
                h.__renderTransform.identity();
                h.__renderTransform.tx = u.x;
                h.__renderTransform.ty = u.y;
                h.__renderTransform.concat(a.__renderTransform);
                h.__worldAlpha = a.__worldAlpha;
                h.__worldColorTransform.__copyFrom(a.__worldColorTransform);
                a = h;
                ha.__pool.release(u);
                xa.__pool.release(m);
              }
              Ra.convertToCanvas(this.image);
              c = new ug(this.image.buffer.__srcContext);
              c.__allowSmoothing = f;
              c.__overrideBlendMode = d;
              c.__worldTransform = l;
              c.__worldAlpha = 1 / a.__worldAlpha;
              c.__worldColorTransform = g;
              null != e && c.__pushMaskRect(e, b);
              this.__drawCanvas(a, c);
            } else
              null == this.__textureContext &&
                (this.__textureContext = B.current.__window.context),
                null != c && g.__combine(c),
                (c = new mb(sa.get_current().stage.context3D, this)),
                (c.__allowSmoothing = f),
                (c.__pixelRatio = sa.get_current().stage.window.__scale),
                (c.__overrideBlendMode = d),
                (c.__worldTransform = l),
                (c.__worldAlpha = 1 / a.__worldAlpha),
                (c.__worldColorTransform = g),
                c.__resize(this.width, this.height),
                null != e && c.__pushMaskRect(e, b),
                this.__drawGL(a, c);
            null != e && (c.__popMaskRect(), xa.__pool.release(b));
            xa.__pool.release(l);
            null == r || k || r.set_visible(!1);
          }
        },
        fillRect: function (a, b) {
          this.__fillRect(a, b, !0);
        },
        getIndexBuffer: function (a, b) {
          if (
            null == this.__indexBuffer ||
            this.__indexBufferContext != a.__context ||
            (null != b && null == this.__indexBufferGrid) ||
            (null != this.__indexBufferGrid &&
              !this.__indexBufferGrid.equals(b))
          ) {
            this.__indexBufferContext = a.__context;
            this.__indexBuffer = null;
            if (null != b) {
              null == this.__indexBufferGrid &&
                (this.__indexBufferGrid = new ha());
              this.__indexBufferGrid.copyFrom(b);
              var c = b.width;
              b = b.height;
              0 != c && 0 != b
                ? ((this.__indexBufferData = c = new Uint16Array(54)),
                  (this.__indexBufferData[0] = 0),
                  (this.__indexBufferData[1] = 1),
                  (this.__indexBufferData[2] = 2),
                  (this.__indexBufferData[3] = 2),
                  (this.__indexBufferData[4] = 1),
                  (this.__indexBufferData[5] = 3),
                  (this.__indexBufferData[6] = 4),
                  (this.__indexBufferData[7] = 0),
                  (this.__indexBufferData[8] = 5),
                  (this.__indexBufferData[9] = 5),
                  (this.__indexBufferData[10] = 0),
                  (this.__indexBufferData[11] = 2),
                  (this.__indexBufferData[12] = 6),
                  (this.__indexBufferData[13] = 4),
                  (this.__indexBufferData[14] = 7),
                  (this.__indexBufferData[15] = 7),
                  (this.__indexBufferData[16] = 4),
                  (this.__indexBufferData[17] = 5),
                  (this.__indexBufferData[18] = 8),
                  (this.__indexBufferData[19] = 9),
                  (this.__indexBufferData[20] = 0),
                  (this.__indexBufferData[21] = 0),
                  (this.__indexBufferData[22] = 9),
                  (this.__indexBufferData[23] = 1),
                  (this.__indexBufferData[24] = 10),
                  (this.__indexBufferData[25] = 8),
                  (this.__indexBufferData[26] = 4),
                  (this.__indexBufferData[27] = 4),
                  (this.__indexBufferData[28] = 8),
                  (this.__indexBufferData[29] = 0),
                  (this.__indexBufferData[30] = 11),
                  (this.__indexBufferData[31] = 10),
                  (this.__indexBufferData[32] = 6),
                  (this.__indexBufferData[33] = 6),
                  (this.__indexBufferData[34] = 10),
                  (this.__indexBufferData[35] = 4),
                  (this.__indexBufferData[36] = 12),
                  (this.__indexBufferData[37] = 13),
                  (this.__indexBufferData[38] = 8),
                  (this.__indexBufferData[39] = 8),
                  (this.__indexBufferData[40] = 13),
                  (this.__indexBufferData[41] = 9),
                  (this.__indexBufferData[42] = 14),
                  (this.__indexBufferData[43] = 12),
                  (this.__indexBufferData[44] = 10),
                  (this.__indexBufferData[45] = 10),
                  (this.__indexBufferData[46] = 12),
                  (this.__indexBufferData[47] = 8),
                  (this.__indexBufferData[48] = 15),
                  (this.__indexBufferData[49] = 14),
                  (this.__indexBufferData[50] = 11),
                  (this.__indexBufferData[51] = 11),
                  (this.__indexBufferData[52] = 14),
                  (this.__indexBufferData[53] = 10),
                  (this.__indexBuffer = a.createIndexBuffer(54)))
                : 0 == c && 0 != b
                ? ((this.__indexBufferData = c = new Uint16Array(18)),
                  (this.__indexBufferData[0] = 0),
                  (this.__indexBufferData[1] = 1),
                  (this.__indexBufferData[2] = 2),
                  (this.__indexBufferData[3] = 2),
                  (this.__indexBufferData[4] = 1),
                  (this.__indexBufferData[5] = 3),
                  (this.__indexBufferData[6] = 4),
                  (this.__indexBufferData[7] = 5),
                  (this.__indexBufferData[8] = 0),
                  (this.__indexBufferData[9] = 0),
                  (this.__indexBufferData[10] = 5),
                  (this.__indexBufferData[11] = 1),
                  (this.__indexBufferData[12] = 6),
                  (this.__indexBufferData[13] = 7),
                  (this.__indexBufferData[14] = 4),
                  (this.__indexBufferData[15] = 4),
                  (this.__indexBufferData[16] = 7),
                  (this.__indexBufferData[17] = 5),
                  (this.__indexBuffer = a.createIndexBuffer(18)))
                : 0 != c &&
                  0 == b &&
                  ((this.__indexBufferData = c = new Uint16Array(18)),
                  (this.__indexBufferData[0] = 0),
                  (this.__indexBufferData[1] = 1),
                  (this.__indexBufferData[2] = 2),
                  (this.__indexBufferData[3] = 2),
                  (this.__indexBufferData[4] = 1),
                  (this.__indexBufferData[5] = 3),
                  (this.__indexBufferData[6] = 4),
                  (this.__indexBufferData[7] = 0),
                  (this.__indexBufferData[8] = 5),
                  (this.__indexBufferData[9] = 5),
                  (this.__indexBufferData[10] = 0),
                  (this.__indexBufferData[11] = 2),
                  (this.__indexBufferData[12] = 6),
                  (this.__indexBufferData[13] = 4),
                  (this.__indexBufferData[14] = 7),
                  (this.__indexBufferData[15] = 7),
                  (this.__indexBufferData[16] = 4),
                  (this.__indexBufferData[17] = 5),
                  (this.__indexBuffer = a.createIndexBuffer(18)));
            } else this.__indexBufferGrid = null;
            null == this.__indexBuffer &&
              ((this.__indexBufferData = c = new Uint16Array(6)),
              (this.__indexBufferData[0] = 0),
              (this.__indexBufferData[1] = 1),
              (this.__indexBufferData[2] = 2),
              (this.__indexBufferData[3] = 2),
              (this.__indexBufferData[4] = 1),
              (this.__indexBufferData[5] = 3),
              (this.__indexBuffer = a.createIndexBuffer(6)));
            this.__indexBuffer.uploadFromTypedArray(this.__indexBufferData);
          }
          return this.__indexBuffer;
        },
        getVertexBuffer: function (a, b, c) {
          if (
            null == this.__vertexBuffer ||
            this.__vertexBufferContext != a.__context ||
            (null != b && null == this.__vertexBufferGrid) ||
            (null != this.__vertexBufferGrid &&
              !this.__vertexBufferGrid.equals(b)) ||
            (null != c &&
              (this.__vertexBufferWidth != c.get_width() ||
                this.__vertexBufferHeight != c.get_height() ||
                this.__vertexBufferScaleX != c.get_scaleX() ||
                this.__vertexBufferScaleY != c.get_scaleY()))
          ) {
            this.__uvRect = new ha(0, 0, this.width, this.height);
            this.__vertexBufferContext = a.__context;
            this.__vertexBuffer = null;
            null != c &&
              ((this.__vertexBufferWidth = c.get_width()),
              (this.__vertexBufferHeight = c.get_height()),
              (this.__vertexBufferScaleX = c.get_scaleX()),
              (this.__vertexBufferScaleY = c.get_scaleY()));
            if (null != b && null != c) {
              null == this.__vertexBufferGrid &&
                (this.__vertexBufferGrid = new ha());
              this.__vertexBufferGrid.copyFrom(b);
              this.__vertexBufferWidth = c.get_width();
              this.__vertexBufferHeight = c.get_height();
              this.__vertexBufferScaleX = c.get_scaleX();
              this.__vertexBufferScaleY = c.get_scaleY();
              var d = b.width,
                e = b.height;
              if (0 != d && 0 != e) {
                var f = new Float32Array(224);
                this.__vertexBufferData = f;
                var k = b.x,
                  r = b.y,
                  l = this.width - d - k,
                  g = this.height - e - r;
                b = k / this.width;
                f = r / this.height;
                d /= this.width;
                e /= this.height;
                k /= c.get_scaleX();
                r /= c.get_scaleY();
                l /= c.get_scaleX();
                var u = g / c.get_scaleY();
                g = c.get_width() / c.get_scaleX() - k - l;
                l = c.get_height() / c.get_scaleY() - r - u;
                this.__vertexBufferData[0] = k;
                this.__vertexBufferData[1] = r;
                this.__vertexBufferData[3] = 1 * b;
                this.__vertexBufferData[4] = 1 * f;
                this.__vertexBufferData[15] = r;
                this.__vertexBufferData[18] = 1 * f;
                this.__vertexBufferData[28] = k;
                this.__vertexBufferData[31] = 1 * b;
                this.__vertexBufferData[56] = k + g;
                this.__vertexBufferData[57] = r;
                this.__vertexBufferData[59] = 1 * (b + d);
                this.__vertexBufferData[60] = 1 * f;
                this.__vertexBufferData[70] = k + g;
                this.__vertexBufferData[73] = 1 * (b + d);
                this.__vertexBufferData[84] = this.width;
                this.__vertexBufferData[85] = r;
                this.__vertexBufferData[87] = 1;
                this.__vertexBufferData[88] = 1 * f;
                this.__vertexBufferData[98] = this.width;
                this.__vertexBufferData[101] = 1;
                this.__vertexBufferData[112] = k;
                this.__vertexBufferData[113] = r + l;
                this.__vertexBufferData[115] = 1 * b;
                this.__vertexBufferData[116] = 1 * (f + e);
                this.__vertexBufferData[127] = r + l;
                this.__vertexBufferData[130] = 1 * (f + e);
                this.__vertexBufferData[140] = k + g;
                this.__vertexBufferData[141] = r + l;
                this.__vertexBufferData[143] = 1 * (b + d);
                this.__vertexBufferData[144] = 1 * (f + e);
                this.__vertexBufferData[154] = this.width;
                this.__vertexBufferData[155] = r + l;
                this.__vertexBufferData[157] = 1;
                this.__vertexBufferData[158] = 1 * (f + e);
                this.__vertexBufferData[168] = k;
                this.__vertexBufferData[169] = this.height;
                this.__vertexBufferData[171] = 1 * b;
                this.__vertexBufferData[172] = 1;
                this.__vertexBufferData[183] = this.height;
                this.__vertexBufferData[186] = 1;
                this.__vertexBufferData[196] = k + g;
                this.__vertexBufferData[197] = this.height;
                this.__vertexBufferData[199] = 1 * (b + d);
                this.__vertexBufferData[200] = 1;
                this.__vertexBufferData[210] = this.width;
                this.__vertexBufferData[211] = this.height;
                this.__vertexBufferData[213] = 1;
                this.__vertexBufferData[214] = 1;
                this.__vertexBuffer = a.createVertexBuffer(16, 14);
              } else
                0 == d && 0 != e
                  ? ((this.__vertexBufferData = f = new Float32Array(112)),
                    (r = b.y),
                    (g = this.height - e - r),
                    (f = r / this.height),
                    (e /= this.height),
                    (r /= c.get_scaleY()),
                    (u = g / c.get_scaleY()),
                    (l = c.get_height() / c.get_scaleY() - r - u),
                    (c = c.get_width() / c.get_scaleX()),
                    (this.__vertexBufferData[0] = c),
                    (this.__vertexBufferData[1] = r),
                    (this.__vertexBufferData[3] = 1),
                    (this.__vertexBufferData[4] = 1 * f),
                    (this.__vertexBufferData[15] = r),
                    (this.__vertexBufferData[18] = 1 * f),
                    (this.__vertexBufferData[28] = c),
                    (this.__vertexBufferData[31] = 1),
                    (this.__vertexBufferData[56] = c),
                    (this.__vertexBufferData[57] = r + l),
                    (this.__vertexBufferData[59] = 1),
                    (this.__vertexBufferData[60] = 1 * (f + e)),
                    (this.__vertexBufferData[71] = r + l),
                    (this.__vertexBufferData[74] = 1 * (f + e)),
                    (this.__vertexBufferData[84] = c),
                    (this.__vertexBufferData[85] = this.height),
                    (this.__vertexBufferData[87] = 1),
                    (this.__vertexBufferData[88] = 1),
                    (this.__vertexBufferData[99] = this.height),
                    (this.__vertexBufferData[102] = 1),
                    (this.__vertexBuffer = a.createVertexBuffer(8, 14)))
                  : 0 == e &&
                    0 != d &&
                    ((this.__vertexBufferData = f = new Float32Array(112)),
                    (k = b.x),
                    (l = this.width - d - k),
                    (b = k / this.width),
                    (d /= this.width),
                    (k /= c.get_scaleX()),
                    (l /= c.get_scaleX()),
                    (g = c.get_width() / c.get_scaleX() - k - l),
                    (c = c.get_height() / c.get_scaleY()),
                    (this.__vertexBufferData[0] = k),
                    (this.__vertexBufferData[1] = c),
                    (this.__vertexBufferData[3] = 1 * b),
                    (this.__vertexBufferData[4] = 1),
                    (this.__vertexBufferData[15] = c),
                    (this.__vertexBufferData[18] = 1),
                    (this.__vertexBufferData[28] = k),
                    (this.__vertexBufferData[31] = 1 * b),
                    (this.__vertexBufferData[56] = k + g),
                    (this.__vertexBufferData[57] = c),
                    (this.__vertexBufferData[59] = 1 * (b + d)),
                    (this.__vertexBufferData[60] = 1),
                    (this.__vertexBufferData[70] = k + g),
                    (this.__vertexBufferData[73] = 1 * (b + d)),
                    (this.__vertexBufferData[84] = this.width),
                    (this.__vertexBufferData[85] = c),
                    (this.__vertexBufferData[87] = 1),
                    (this.__vertexBufferData[88] = 1),
                    (this.__vertexBufferData[98] = this.width),
                    (this.__vertexBufferData[101] = 1),
                    (this.__vertexBuffer = a.createVertexBuffer(8, 14)));
            } else this.__vertexBufferGrid = null;
            null == this.__vertexBuffer &&
              ((this.__vertexBufferData = f = new Float32Array(56)),
              (this.__vertexBufferData[0] = this.width),
              (this.__vertexBufferData[1] = this.height),
              (this.__vertexBufferData[3] = 1),
              (this.__vertexBufferData[4] = 1),
              (this.__vertexBufferData[15] = this.height),
              (this.__vertexBufferData[18] = 1),
              (this.__vertexBufferData[28] = this.width),
              (this.__vertexBufferData[31] = 1),
              (this.__vertexBuffer = a.createVertexBuffer(3, 14)));
            this.__vertexBuffer.uploadFromTypedArray(
              bj.toArrayBufferView(this.__vertexBufferData)
            );
          }
          return this.__vertexBuffer;
        },
        getPixel32: function (a, b) {
          return this.readable ? this.image.getPixel32(a, b, 1) : 0;
        },
        getTexture: function (a) {
          if (!this.__isValid) return null;
          if (null == this.__texture || this.__textureContext != a.__context)
            (this.__textureContext = a.__context),
              (this.__texture = a.createRectangleTexture(
                this.width,
                this.height,
                1,
                !1
              )),
              (this.__textureVersion = -1);
          Ra.sync(this.image, !1);
          null != this.image &&
            this.image.version > this.__textureVersion &&
            (null != this.__surface && Yo.flush(this.__surface),
            (a = this.image),
            Kb.__supportsBGRA ||
              0 == a.get_format() ||
              ((a = a.clone()), a.set_format(0)),
            this.__texture.__uploadFromImage(a),
            (this.__textureVersion = this.image.version),
            (this.__textureWidth = a.buffer.width),
            (this.__textureHeight = a.buffer.height));
          this.readable ||
            null == this.image ||
            (this.image = this.__surface = null);
          return this.__texture;
        },
        lock: function () {},
        setPixel: function (a, b, c) {
          this.readable && this.image.setPixel(a, b, c, 1);
        },
        setPixel32: function (a, b, c) {
          this.readable && this.image.setPixel32(a, b, c, 1);
        },
        unlock: function (a) {},
        __drawCanvas: function (a, b) {
          var c = this.image.buffer;
          b.__allowSmoothing || b.applySmoothing(c.__srcContext, !1);
          b.__render(a);
          b.__allowSmoothing || b.applySmoothing(c.__srcContext, !0);
          c.__srcContext.setTransform(1, 0, 0, 1, 0, 0);
          c.__srcImageData = null;
          c.data = null;
          this.image.dirty = !0;
          this.image.version++;
        },
        __drawGL: function (a, b) {
          var c = b.__context3D,
            d = c.__state.renderToTexture,
            e = c.__state.renderToTextureDepthStencil,
            f = c.__state.renderToTextureAntiAlias,
            k = c.__state.renderToTextureSurfaceSelector;
          c.setRenderToTexture(this.getTexture(c), !0);
          b.__render(a);
          null != d
            ? c.setRenderToTexture(d, e, f, k)
            : c.setRenderToBackBuffer();
        },
        __fillRect: function (a, b, c) {
          if (null != a)
            if (
              (this.transparent && 0 == (b & -16777216) && (b = 0),
              c &&
                null != this.__texture &&
                null != this.__texture.__glFramebuffer &&
                "opengl" == sa.get_current().stage.__renderer.__type)
            ) {
              c = sa.get_current().stage.__renderer.__context3D;
              var d = !this.rect.equals(a),
                e = c.__state.renderToTexture,
                f = c.__state.renderToTextureDepthStencil,
                k = c.__state.renderToTextureAntiAlias,
                r = c.__state.renderToTextureSurfaceSelector;
              c.setRenderToTexture(this.__texture);
              d && c.setScissorRectangle(a);
              c.clear(
                ((b >>> 16) & 255) / 255,
                ((b >>> 8) & 255) / 255,
                (b & 255) / 255,
                this.transparent ? ((b >>> 24) & 255) / 255 : 1,
                0,
                0,
                1
              );
              d && c.setScissorRectangle(null);
              null != e
                ? c.setRenderToTexture(e, f, k, r)
                : c.setRenderToBackBuffer();
            } else
              this.readable && this.image.fillRect(a.__toLimeRectangle(), b, 1);
        },
        __fromImage: function (a) {
          null != a &&
            null != a.buffer &&
            ((this.image = a),
            (this.width = a.width),
            (this.height = a.height),
            (this.rect = new ha(0, 0, a.width, a.height)),
            (this.__textureWidth = this.width),
            (this.__textureHeight = this.height),
            (this.__isValid = this.readable = !0));
        },
        __getBounds: function (a, b) {
          var c = ha.__pool.get();
          this.rect.__transform(c, b);
          a.__expand(c.x, c.y, c.width, c.height);
          ha.__pool.release(c);
        },
        __setUVRect: function (a, b, c, d, e) {
          if (
            null != this.getVertexBuffer(a) &&
            (d != this.__uvRect.width ||
              e != this.__uvRect.height ||
              b != this.__uvRect.x ||
              c != this.__uvRect.y)
          ) {
            null == this.__uvRect && (this.__uvRect = new ha());
            this.__uvRect.setTo(b, c, d, e);
            a = 0 < this.__textureWidth ? b / this.__textureWidth : 0;
            c = 0 < this.__textureHeight ? c / this.__textureHeight : 0;
            b = 0 < this.__textureWidth ? d / this.__textureWidth : 0;
            var f = 0 < this.__textureHeight ? e / this.__textureHeight : 0;
            this.__vertexBufferData[0] = d;
            this.__vertexBufferData[1] = e;
            this.__vertexBufferData[3] = a + b;
            this.__vertexBufferData[4] = c + f;
            this.__vertexBufferData[15] = e;
            this.__vertexBufferData[17] = a;
            this.__vertexBufferData[18] = c + f;
            this.__vertexBufferData[28] = d;
            this.__vertexBufferData[31] = a + b;
            this.__vertexBufferData[32] = c;
            this.__vertexBufferData[45] = a;
            this.__vertexBufferData[46] = c;
            this.__vertexBuffer.uploadFromTypedArray(
              bj.toArrayBufferView(this.__vertexBufferData)
            );
          }
        },
        __update: function (a, b) {
          this.__updateTransforms();
        },
        __updateTransforms: function (a) {
          null == a
            ? this.__worldTransform.identity()
            : this.__worldTransform.copyFrom(a);
          this.__renderTransform.copyFrom(this.__worldTransform);
        },
        __class__: S,
      };
      var qe = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != qe.preload) this.__fromImage(qe.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(qe.resourceName), qe.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == qe.preload && (qe.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h[
        "flixel.addons.transition._FlxTransitionSprite.RawGraphicTransTileCircle"
      ] = qe;
      qe.__name__ =
        "flixel.addons.transition._FlxTransitionSprite.RawGraphicTransTileCircle";
      qe.__super__ = S;
      qe.prototype = q(S.prototype, { __class__: qe });
      var nn = function (a) {
        qe.call(this, 544, 32, !0, -1, a);
        this.width = 544;
        this.height = 32;
      };
      h["flixel.addons.transition.GraphicTransTileCircle"] = nn;
      nn.__name__ = "flixel.addons.transition.GraphicTransTileCircle";
      nn.__super__ = qe;
      nn.prototype = q(qe.prototype, { __class__: nn });
      var re = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != re.preload) this.__fromImage(re.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(re.resourceName), re.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == re.preload && (re.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h[
        "flixel.addons.transition._FlxTransitionSprite.RawGraphicTransTileDiamond"
      ] = re;
      re.__name__ =
        "flixel.addons.transition._FlxTransitionSprite.RawGraphicTransTileDiamond";
      re.__super__ = S;
      re.prototype = q(S.prototype, { __class__: re });
      var Jk = function (a) {
        re.call(this, 544, 32, !0, -1, a);
        this.width = 544;
        this.height = 32;
      };
      h["flixel.addons.transition.GraphicTransTileDiamond"] = Jk;
      Jk.__name__ = "flixel.addons.transition.GraphicTransTileDiamond";
      Jk.__super__ = re;
      Jk.prototype = q(re.prototype, { __class__: Jk });
      var se = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != se.preload) this.__fromImage(se.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(se.resourceName), se.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == se.preload && (se.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.addons.transition.RawGraphicTransTileSquare"] = se;
      se.__name__ = "flixel.addons.transition.RawGraphicTransTileSquare";
      se.__super__ = S;
      se.prototype = q(S.prototype, { __class__: se });
      var on = function (a) {
        se.call(this, 544, 32, !0, -1, a);
        this.width = 544;
        this.height = 32;
      };
      h["flixel.addons.transition.GraphicTransTileSquare"] = on;
      on.__name__ = "flixel.addons.transition.GraphicTransTileSquare";
      on.__super__ = se;
      on.prototype = q(se.prototype, { __class__: on });
      var Kk = function (a, b, c, d, e, f, k) {
        null == k && (k = 40);
        null == f && (f = 32);
        null == e && (e = 32);
        null == b && (b = 0);
        null == a && (a = 0);
        this._newStatus = -1;
        this.status = 0;
        this._finished = !1;
        this._starting = !0;
        F.call(this, a, b);
        null == d && ((d = Xb.fromClass(Jk)), (f = e = 32));
        this._delay = c;
        this.loadGraphic(d, !0, e, f);
        if (null != this.graphic) {
          this.graphic.persist = !0;
          this.graphic.set_destroyOnNoUse(!1);
          a = [];
          b = 1;
          for (c = this.get_numFrames() - 1; b < c; ) (d = b++), a.push(d);
          b = a.slice();
          b.reverse();
          this.animation.add("empty", [0], 0, !1);
          this.animation.add("in", a, k, !1);
          this.animation.add("full", [this.get_numFrames() - 1], 0, !1);
          this.animation.add("out", b, k, !1);
          this.setStatus(3);
        }
      };
      h["flixel.addons.transition.FlxTransitionSprite"] = Kk;
      Kk.__name__ = "flixel.addons.transition.FlxTransitionSprite";
      Kk.__super__ = F;
      Kk.prototype = q(F.prototype, {
        start: function (a) {
          this._starting = !0;
          this._finished = !1;
          this._count = 0;
          this._newStatus = a;
        },
        setStatus: function (a) {
          switch (a) {
            case -1:
            case 2:
              var b = "empty";
              break;
            case 0:
              b = "in";
              break;
            case 1:
              b = "out";
              break;
            case 3:
              b = "full";
          }
          this.animation.play(b);
          this.animation.finishCallback = n(this, this.onFinishAnim);
          this.status = a;
        },
        onFinishAnim: function (a) {
          if (!this._finished)
            switch (((this._finished = !0), this.status)) {
              case 0:
                this.setStatus(3);
                break;
              case 1:
                this.setStatus(2);
            }
        },
        update: function (a) {
          F.prototype.update.call(this, a);
          if (
            this._starting &&
            ((this._count += a), this._count >= this._delay)
          )
            this.onTime();
        },
        onTime: function () {
          this._starting = !1;
          this._count = 0;
          this.setStatus(this._newStatus);
          this._newStatus = -1;
        },
        __class__: Kk,
      });
      var Fi = function (a) {
        pd.call(this, 0);
        this._effect = this.createEffect(a);
        a = this._effect.scrollFactor;
        var b = 0,
          c = 0;
        null == c && (c = 0);
        null == b && (b = 0);
        a.set_x(b);
        a.set_y(c);
        this.add(this._effect);
      };
      h["flixel.addons.transition.Transition"] = Fi;
      Fi.__name__ = "flixel.addons.transition.Transition";
      Fi.__super__ = pd;
      Fi.prototype = q(pd.prototype, {
        destroy: function () {
          pd.prototype.destroy.call(this);
          this.set_finishCallback(null);
          this._effect = V.destroy(this._effect);
        },
        start: function (a) {
          this._effect.start(a);
        },
        setStatus: function (a) {
          this._effect.setStatus(a);
        },
        createEffect: function (a) {
          switch (a.type) {
            case "fade":
              return new Lk(a);
            case "none":
              throw N.thrown("Unexpected TransitionType: NONE");
            case "tiles":
              return new Mk(a);
          }
        },
        get_finishCallback: function () {
          return null != this._effect ? this._effect.finishCallback : null;
        },
        set_finishCallback: function (a) {
          return null != this._effect
            ? (this._effect.finishCallback = a)
            : null;
        },
        __class__: Fi,
        __properties__: q(pd.prototype.__properties__, {
          set_finishCallback: "set_finishCallback",
          get_finishCallback: "get_finishCallback",
        }),
      });
      var Nk = (w["flixel.addons.transition.TransitionCameraMode"] = {
        __ename__: "flixel.addons.transition.TransitionCameraMode",
        __constructs__: null,
        TOP: {
          _hx_name: "TOP",
          _hx_index: 0,
          __enum__: "flixel.addons.transition.TransitionCameraMode",
          toString: p,
        },
        NEW: {
          _hx_name: "NEW",
          _hx_index: 1,
          __enum__: "flixel.addons.transition.TransitionCameraMode",
          toString: p,
        },
        DEFAULT: {
          _hx_name: "DEFAULT",
          _hx_index: 2,
          __enum__: "flixel.addons.transition.TransitionCameraMode",
          toString: p,
        },
      });
      Nk.__constructs__ = [Nk.TOP, Nk.NEW, Nk.DEFAULT];
      var pn = function (a, b, c, d, e, f, k) {
        null == k && (k = Nk.TOP);
        null == c && (c = 1);
        null == b && (b = -1);
        null == a && (a = "fade");
        this.cameraMode = Nk.TOP;
        this.duration = 1;
        this.type = a;
        this.tileData = e;
        this.duration = c;
        this.color = b;
        null == d
          ? ((a = d = 0),
            null == a && (a = 0),
            null == d && (d = 0),
            (d = new ba(d, a)))
          : ((a = d.x),
            (a = -1 > a ? -1 : a),
            d.set_x(1 < a ? 1 : a),
            (a = d.y),
            (a = -1 > a ? -1 : a),
            d.set_y(1 < a ? 1 : a));
        this.direction = d;
        this.tweenOptions = { onComplete: null };
        null == f && (f = new Ga(0, 0, g.width, g.height));
        this.region = f;
        this.cameraMode = k;
      };
      h["flixel.addons.transition.TransitionData"] = pn;
      pn.__name__ = "flixel.addons.transition.TransitionData";
      pn.__interfaces__ = [U];
      pn.prototype = {
        destroy: function () {
          this.direction =
            this.region =
            this.tweenOptions =
            this.direction =
            this.tileData =
              null;
        },
        __class__: pn,
      };
      var ee = function (a) {
        this._finalDelayTime = 0;
        this.finished = this._started = !1;
        this._data = a;
        wa.call(this);
      };
      h["flixel.addons.transition.TransitionEffect"] = ee;
      ee.__name__ = "flixel.addons.transition.TransitionEffect";
      ee.__super__ = wa;
      ee.prototype = q(wa.prototype, {
        destroy: function () {
          wa.prototype.destroy.call(this);
          this.finishCallback = null;
          null != this._customCamera &&
            (-1 != g.cameras.list.indexOf(this._customCamera) &&
              g.cameras.remove(this._customCamera, !0),
            (this._customCamera = null));
        },
        start: function (a) {
          this._started = !0;
          this._endStatus = 0 == a ? 3 : 2;
          switch (this._data.cameraMode._hx_index) {
            case 0:
              a = g.cameras.list;
              this.set_camera(a[a.length - 1]);
              break;
            case 1:
              (this._customCamera = new Ob(
                0,
                0,
                this._data.region.width | 0,
                this._data.region.height | 0
              )),
                (this._customCamera.bgColor = 0),
                g.cameras.add(this._customCamera, !1),
                this.set_camera(this._customCamera);
          }
        },
        setStatus: function (a) {},
        delayThenFinish: function () {
          new fc().start(this._finalDelayTime, n(this, this.onFinish));
        },
        onFinish: function (a) {
          this.finished = !0;
          null != this.finishCallback &&
            ((a = this.finishCallback), (this.finishCallback = null), a());
        },
        __class__: ee,
      });
      var te = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != te.preload) this.__fromImage(te.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(te.resourceName), te.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == te.preload && (te.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.addons.transition._TransitionFade.RawGraphicDiagonalGradient"] =
        te;
      te.__name__ =
        "flixel.addons.transition._TransitionFade.RawGraphicDiagonalGradient";
      te.__super__ = S;
      te.prototype = q(S.prototype, { __class__: te });
      var qn = function (a) {
        te.call(this, 319, 128, !0, -1, a);
        this.width = 319;
        this.height = 128;
      };
      h["flixel.addons.transition.GraphicDiagonalGradient"] = qn;
      qn.__name__ = "flixel.addons.transition.GraphicDiagonalGradient";
      qn.__super__ = te;
      qn.prototype = q(te.prototype, { __class__: qn });
      var Lk = function (a) {
        ee.call(this, a);
        this.back = this.makeSprite(a.direction.x, a.direction.y, a.region);
        a = this.back.scrollFactor;
        var b = 0,
          c = 0;
        null == c && (c = 0);
        null == b && (b = 0);
        a.set_x(b);
        a.set_y(c);
        this.add(this.back);
      };
      h["flixel.addons.transition.TransitionFade"] = Lk;
      Lk.__name__ = "flixel.addons.transition.TransitionFade";
      Lk.__super__ = ee;
      Lk.prototype = q(ee.prototype, {
        destroy: function () {
          ee.prototype.destroy.call(this);
          this.back = null;
        },
        start: function (a) {
          ee.prototype.start.call(this, a);
          var b = {};
          this.setTweenValues(
            0 == a,
            this._data.direction.x,
            this._data.direction.y,
            this.back,
            b
          );
          this._data.tweenOptions.onComplete = n(this, this.finishTween);
          la.tween(this.back, b, this._data.duration, this._data.tweenOptions);
        },
        setTweenValues: function (a, b, c, d, e) {
          var f = !a;
          0 == b && 0 == c
            ? (d.set_alpha(a ? 0 : 1), (e.alpha = f ? 0 : 1))
            : 0 != b && 0 != c
            ? 0 < b
              ? (d.set_x(a ? -this.back.get_width() : 0),
                (e.x = f ? -this.back.get_width() : 0))
              : (d.set_x(a ? g.width : g.width - this.back.get_width()),
                (e.x = f ? g.width : g.width - this.back.get_width()))
            : 0 != b
            ? 0 < b
              ? (d.set_x(a ? -this.back.get_width() : 0),
                (e.x = f ? -this.back.get_width() : 0))
              : (d.set_x(a ? g.width : -this.back.get_width() / 2),
                (e.x = f ? g.width : -this.back.get_width() / 2))
            : 0 < c
            ? (d.set_y(a ? -this.back.get_height() : 0),
              (e.y = f ? -this.back.get_height() : 0))
            : (d.set_y(a ? g.height : -this.back.get_height() / 2),
              (e.y = f ? g.height : -this.back.get_height() / 2));
        },
        makeSprite: function (a, b, c) {
          var d = new F(c.x, c.y),
            e = "transition" + this._data.color + "x" + a + "y" + b;
          d.set_antialiasing(!1);
          0 == a && 0 == b
            ? (d.makeGraphic(1, 1, this._data.color, !1, e),
              (e = d.scale),
              (b = c.width | 0),
              (c = c.height | 0),
              null == c && (c = 0),
              null == b && (b = 0),
              e.set_x(b),
              e.set_y(c),
              d.updateHitbox())
            : 0 == a && 0 != b
            ? (d.makeGraphic(1, (2 * c.height) | 0, this._data.color, !1, e),
              (e = ud.createGradientBitmapData(
                1,
                c.height | 0,
                [this._data.color, 0],
                1,
                0 < b ? 90 : 270
              )),
              (b = 0 < b ? c.height : 0),
              d.get_pixels().copyPixels(e, e.rect, new gb(0, b)),
              (e = d.scale),
              (b = c.width),
              (c = 1),
              null == c && (c = 0),
              null == b && (b = 0),
              e.set_x(b),
              e.set_y(c),
              d.updateHitbox())
            : 0 != a && 0 == b
            ? ((b = 0 < a ? c.width : 0),
              (a = 0 < a ? 0 : 180),
              d.makeGraphic((2 * c.width) | 0, 1, this._data.color, !1, e),
              (e = ud.createGradientBitmapData(
                c.width | 0,
                1,
                [this._data.color, 0],
                1,
                a
              )),
              d.get_pixels().copyPixels(e, e.rect, new gb(b, 0)),
              (e = d.scale),
              (b = 1),
              (c = c.height),
              null == c && (c = 0),
              null == b && (b = 0),
              e.set_x(b),
              e.set_y(c),
              d.updateHitbox())
            : 0 != a &&
              0 != b &&
              (d.loadGraphic(this.getGradient()),
              d.set_color(this._data.color),
              d.set_flipX(0 > a),
              d.set_flipY(0 > b));
          return d;
        },
        getGradient: function () {
          var a = g.width,
            b = g.height,
            c = g.bitmap.add(
              "flixel/images/transitions/diagonal_gradient.png"
            ).bitmap,
            d =
              "flixel/images/transitions/diagonal_gradient.png:" + a + "x" + b,
            e = g.bitmap._cache.h[d];
          null == e &&
            ((a = new S(Math.floor(2.5 * a), b, !0, 0)),
            (b = new xa()),
            b.scale(a.width / c.width, a.height / c.height),
            a.draw(c, b, null, null, null, !0),
            (e = g.bitmap.add(a, !1, d)),
            (e.persist = !0),
            e.set_destroyOnNoUse(!1));
          return e;
        },
        finishTween: function (a) {
          this.delayThenFinish();
        },
        __class__: Lk,
      });
      var Mk = function (a) {
        this._isCenter = !1;
        ee.call(this, a);
        this._grpSprites = new wa();
        var b = 0;
        null == a.tileData &&
          (a.tileData = { asset: null, width: 32, height: 32 });
        var c = a.region,
          d = Math.ceil(c.width / a.tileData.width),
          e = Math.ceil(c.height / a.tileData.height),
          f = a.duration / (d > e ? d : e),
          k = f * Math.abs(a.direction.x);
        f *= Math.abs(a.direction.y);
        var r = a.tileData.width,
          l = a.tileData.height,
          g = c.x | 0;
        var u = c.y | 0;
        0 > a.direction.x && ((r *= -1), (g += (c.width + r) | 0));
        0 > a.direction.y && ((l *= -1), (u += (c.height + l) | 0));
        c = g;
        for (var m = 0; m < e; ) {
          for (var h = m++, p = 0, n = d; p < n; ) {
            p++;
            var q = 40;
            null != a.tileData.frameRate && (q = a.tileData.frameRate);
            q = new Kk(
              c,
              u,
              b,
              a.tileData.asset,
              a.tileData.width,
              a.tileData.height,
              q
            );
            q.set_color(a.color);
            var z = q.scrollFactor,
              t = 0,
              w = 0;
            null == w && (w = 0);
            null == t && (t = 0);
            z.set_x(t);
            z.set_y(w);
            this._grpSprites.add(q);
            c += r;
            b += k;
          }
          u += l;
          c = g;
          b = (h + 1) * f;
        }
        this.add(this._grpSprites);
        this._isCenter = 0 == a.direction.x && 0 == a.direction.y;
      };
      h["flixel.addons.transition.TransitionTiles"] = Mk;
      Mk.__name__ = "flixel.addons.transition.TransitionTiles";
      Mk.__super__ = ee;
      Mk.prototype = q(ee.prototype, {
        destroy: function () {
          ee.prototype.destroy.call(this);
          this._grpSprites = null;
        },
        start: function (a) {
          ee.prototype.start.call(this, a);
          this._grpSprites.group.forEach(function (b) {
            b.start(a);
          }, !1);
        },
        setStatus: function (a) {
          ee.prototype.setStatus.call(this, a);
          this._grpSprites.group.forEach(function (b) {
            b.setStatus(a);
          }, !1);
        },
        update: function (a) {
          ee.prototype.update.call(this, a);
          if (this._started) {
            a = !0;
            for (
              var b = 0, c = this._grpSprites.group.members;
              b < c.length;

            ) {
              var d = c[b];
              ++b;
              if (-1 != d.status && d.status != this._endStatus) {
                a = !1;
                break;
              }
            }
            a && ((this._started = !1), this.delayThenFinish());
          }
        },
        __class__: Mk,
      });
      var Qg = function (a, b, c, d, e, f) {
        this.x = new Ok(a, c, e);
        this.y = new Ok(b, d, f);
      };
      h["flixel.addons.ui.Anchor"] = Qg;
      Qg.__name__ = "flixel.addons.ui.Anchor";
      Qg.__interfaces__ = [U];
      Qg.prototype = {
        destroy: function () {
          this.y = this.x = null;
        },
        anchorThing: function (a, b) {
          switch (this.x.side) {
            case "center":
              var c = b.x + b.get_width() / 2;
              break;
            case "left":
              c = b.x;
              break;
            case "right":
              c = b.x + b.get_width();
              break;
            default:
              c = b.x;
          }
          switch (this.y.side) {
            case "bottom":
              b = b.y + b.get_height();
              break;
            case "center":
              b = b.y + b.get_height() / 2;
              break;
            case "top":
              b = b.y;
              break;
            default:
              b = b.y;
          }
          switch (this.x.flush) {
            case "center":
              c -= a.get_width() / 2;
              break;
            case "right":
              c -= a.get_width();
          }
          switch (this.y.flush) {
            case "bottom":
              b -= a.get_height();
              break;
            case "center":
              b -= a.get_height() / 2;
          }
          a.set_x(c + this.x.offset);
          a.set_y(b + this.y.offset);
        },
        getFlipped: function (a, b, c) {
          var d = a ? -1 * this.x.offset : this.x.offset,
            e = b ? -1 * this.y.offset : this.y.offset,
            f = a ? this.flipAnchorSide(this.x.side) : this.x.side,
            k = b ? this.flipAnchorSide(this.y.side) : this.y.side;
          a = a ? this.flipAnchorSide(this.x.flush) : this.x.flush;
          b = b ? this.flipAnchorSide(this.y.flush) : this.y.flush;
          null == c
            ? (c = new Qg(d, e, f, k, a, b))
            : ((c.x.offset = d),
              (c.y.offset = e),
              (c.x.side = f),
              (c.y.side = k),
              (c.x.flush = a),
              (c.y.flush = b));
          return c;
        },
        clone: function () {
          return new Qg(
            this.x.offset,
            this.y.offset,
            this.x.side,
            this.y.side,
            this.x.flush,
            this.y.flush
          );
        },
        flipAnchorSide: function (a) {
          return "left" == a
            ? "right"
            : "right" == a
            ? "left"
            : "top" == a
            ? "bottom"
            : "bottom" == a
            ? "top"
            : a;
        },
        __class__: Qg,
      };
      var Ok = function (a, b, c) {
        this.side = this.flush = "center";
        this.offset = 0;
        this.offset = a;
        this.side = b;
        this.flush = c;
      };
      h["flixel.addons.ui.AnchorPoint"] = Ok;
      Ok.__name__ = "flixel.addons.ui.AnchorPoint";
      Ok.prototype = { __class__: Ok };
      var Te = function (a, b, c, d) {
        null == d && (d = 1);
        null == c && (c = 1);
        this.style = a;
        this.color = b;
        this.size = c;
        this.quality = d;
      };
      h["flixel.addons.ui.BorderDef"] = Te;
      Te.__name__ = "flixel.addons.ui.BorderDef";
      Te.fromXML = function (a) {
        var b = E.xml_str(a, "border"),
          c = Ya.NONE,
          d = E.xml_color(a, "border_color", !0, 0),
          e = E.xml_f(a, "border_size", 1),
          f = E.xml_f(a, "border_quality", 0);
        c = new Te(c, d, e, f);
        switch (b) {
          case "":
            b = E.xml_str(a, "shadow", !0, "");
            if ("" != b && "false" != b && "none" != b) {
              c.style = Ya.SHADOW;
              a = !0;
              null == a && (a = !1);
              d = ob.fromString(b);
              if (null == d)
                if (a) d = 0;
                else
                  throw N.thrown(
                    "U.parseHex() unable to parse hex String " + b
                  );
              c.color = d;
            } else if (
              ((b = E.xml_str(a, "outline", !0, "")),
              "" != b && "false" != b && "none" != b)
            ) {
              c.style = Ya.OUTLINE;
              a = !0;
              null == a && (a = !1);
              d = ob.fromString(b);
              if (null == d)
                if (a) d = 0;
                else
                  throw N.thrown(
                    "U.parseHex() unable to parse hex String " + b
                  );
              c.color = d;
            } else if (
              ((b = E.xml_str(a, "outline_fast")),
              "" != b && "false" != b && "none" != b)
            ) {
              c.style = Ya.OUTLINE_FAST;
              a = !0;
              null == a && (a = !1);
              d = ob.fromString(b);
              if (null == d)
                if (a) d = 0;
                else
                  throw N.thrown(
                    "U.parseHex() unable to parse hex String " + b
                  );
              c.color = d;
            }
            break;
          case "false":
          case "none":
            c.style = Ya.NONE;
            break;
          case "outline":
            c.style = Ya.OUTLINE;
            break;
          case "outline_fast":
            c.style = Ya.OUTLINE_FAST;
            break;
          case "shadow":
            c.style = Ya.SHADOW;
        }
        return c;
      };
      Te.prototype = {
        clone: function () {
          return new Te(this.style, this.color, this.size, this.quality);
        },
        apply: function (a) {
          var b = this.color,
            c = this.size,
            d = this.quality;
          null == d && (d = 1);
          null == c && (c = 1);
          null == b && (b = 0);
          a.set_borderStyle(this.style);
          a.set_borderColor(b);
          a.set_borderSize(c);
          a.set_borderQuality(d);
          return a;
        },
        __class__: Te,
      };
      var cj = function (a, b, c, d) {
        this.font = this.border = this.color = this.align = null;
        this.font = a;
        this.border = d;
        this.color = c;
        this.align = b;
      };
      h["flixel.addons.ui.ButtonLabelStyle"] = cj;
      cj.__name__ = "flixel.addons.ui.ButtonLabelStyle";
      cj.prototype = {
        apply: function (a) {
          null != this.font && this.font.apply(null, a);
          null != this.border && this.border.apply(a);
          null != this.color && a.set_color(this.color);
          null != this.align && a.set_alignment(this.align);
        },
        __class__: cj,
      };
      var Rg = function () {};
      h["flixel.addons.ui.FlxBaseMultiInput"] = Rg;
      Rg.__name__ = "flixel.addons.ui.FlxBaseMultiInput";
      Rg.__interfaces__ = [U];
      Rg.prototype = {
        destroy: function () {
          this.forbiddens = this.combos = null;
        },
        checkJustPressed: function () {
          return !1;
        },
        checkPressed: function () {
          return !1;
        },
        justPressed: function () {
          return this.checkJustPressed() ? this.passCombosAndForbiddens() : !1;
        },
        pressed: function () {
          return this.checkPressed() ? this.passCombosAndForbiddens() : !1;
        },
        equals: function (a) {
          if (
            null == a ||
            zb.typeof(a) != zb.typeof(this) ||
            this.input != a.input ||
            (null == this.combos) != (null == a.combos) ||
            (null == this.forbiddens) != (null == a.forbiddens)
          )
            return !1;
          if (null != this.combos && null != a.combos)
            for (var b = 0, c = this.combos; b < c.length; ) {
              var d = c[b];
              ++b;
              if (-1 == a.combos.indexOf(d)) return !1;
            }
          if (null != this.forbiddens && null != a.forbiddens)
            for (b = 0, c = this.forbiddens; b < c.length; )
              if (((d = c[b]), ++b, -1 == a.forbiddens.indexOf(d))) return !1;
          return !0;
        },
        passCombosAndForbiddens: function (a, b) {
          null == b && (b = !1);
          null == a && (a = !0);
          a = null == this.combos || this.checkCombos(a);
          b = null == this.forbiddens || this.checkForbiddens(b);
          return a ? b : !1;
        },
        checkCombos: function (a) {
          return !1;
        },
        checkForbiddens: function (a) {
          return !1;
        },
        __class__: Rg,
      };
      var Sg = function (a, b, c, d, e, f, k, r) {
        null == r && (r = !0);
        null == k && (k = -1);
        null == f && (f = -16777216);
        null == e && (e = 8);
        null == c && (c = 150);
        null == b && (b = 0);
        null == a && (a = 0);
        this.backgroundColor = -1;
        this.fieldBorderThickness = 1;
        this.fieldBorderColor = -16777216;
        this.caretIndex = this.forceCase = this.maxLength = this.filterMode = 0;
        this.hasFocus = !1;
        this.caretWidth = 1;
        this.background = !1;
        W.call(this, a, b, c, d, e, r);
        this.set_backgroundColor(k);
        0 != k && (this.background = !0);
        this.set_color(f);
        this.set_caretColor(f);
        this.caret = new F();
        this.caret.makeGraphic(this.caretWidth, (e + 2) | 0);
        this._caretTimer = new fc();
        this.set_caretIndex(0);
        this.set_hasFocus(!1);
        this.background &&
          ((this.fieldBorderSprite = new F(a, b)),
          (this.backgroundSprite = new F(a, b)));
        this.set_lines(1);
        sa.get_current().stage.addEventListener(
          "keyDown",
          n(this, this.onKeyDown),
          !1,
          1
        );
        null == d && (d = "");
        sa.get_current().stage.window.onTextInput.add(
          n(this, this.handleClipboardText)
        );
        this.set_text(d);
        this.calcFrame();
      };
      h["flixel.addons.ui.FlxInputText"] = Sg;
      Sg.__name__ = "flixel.addons.ui.FlxInputText";
      Sg.__super__ = W;
      Sg.prototype = q(W.prototype, {
        set_caretColor: function (a) {
          this.caretColor = a;
          this.dirty = !0;
          return this.caretColor;
        },
        destroy: function () {
          sa.get_current().stage.removeEventListener(
            "keyDown",
            n(this, this.onKeyDown)
          );
          this.backgroundSprite = V.destroy(this.backgroundSprite);
          this.fieldBorderSprite = V.destroy(this.fieldBorderSprite);
          this.callback = null;
          sa.get_current().stage.window.onTextInput.remove(
            n(this, this.handleClipboardText)
          );
          W.prototype.destroy.call(this);
        },
        draw: function () {
          this.drawSprite(this.fieldBorderSprite);
          this.drawSprite(this.backgroundSprite);
          W.prototype.draw.call(this);
          (this.caretColor == this.caret.color &&
            this.caret.get_height() == (this._defaultFormat.size | 0) + 2) ||
            this.caret.set_color(this.caretColor);
          this.drawSprite(this.caret);
        },
        drawSprite: function (a) {
          null != a &&
            a.visible &&
            ((a.scrollFactor = this.scrollFactor),
            (a._cameras = this._cameras),
            a.draw());
        },
        update: function (a) {
          W.prototype.update.call(this, a);
          2 == g.mouse._leftButton.current &&
            ((a = this.hasFocus),
            g.mouse.overlaps(this)
              ? (this.set_caretIndex(this.getCaretIndex()),
                this.set_hasFocus(!0),
                a || null == this.focusGained || this.focusGained())
              : (this.set_hasFocus(!1),
                a && null != this.focusLost && this.focusLost()));
        },
        onKeyDown: function (a) {
          var b = a.keyCode;
          if (this.hasFocus)
            switch (b) {
              case 8:
                0 < this.caretIndex &&
                  (this.set_caretIndex(this.caretIndex - 1),
                  this.set_text(
                    this.text.substring(0, this.caretIndex) +
                      this.text.substring(this.caretIndex + 1)
                  ),
                  this.onChange("backspace"));
                break;
              case 13:
                this.onChange("enter");
                break;
              case 16:
              case 17:
              case 27:
              case 220:
                break;
              case 35:
                this.set_caretIndex(this.text.length);
                this.set_text(this.text);
                break;
              case 36:
                this.set_caretIndex(0);
                this.set_text(this.text);
                break;
              case 37:
                0 < this.caretIndex &&
                  (this.set_caretIndex(this.caretIndex - 1),
                  this.set_text(this.text));
                break;
              case 39:
                this.caretIndex < this.text.length &&
                  (this.set_caretIndex(this.caretIndex + 1),
                  this.set_text(this.text));
                break;
              case 46:
                0 < this.text.length &&
                  this.caretIndex < this.text.length &&
                  (this.set_text(
                    this.text.substring(0, this.caretIndex) +
                      this.text.substring(this.caretIndex + 1)
                  ),
                  this.onChange("delete"));
                break;
              case 86:
                a.ctrlKey
                  ? sa
                      .get_current()
                      .stage.window.__backend.setTextInputEnabled(!0)
                  : 0 != a.charCode &&
                    ((a = a.charCode),
                    (a = this.filter(String.fromCodePoint(a))),
                    0 < a.length &&
                      (0 == this.maxLength ||
                        this.text.length + a.length <= this.maxLength) &&
                      (this.set_text(
                        this.insertSubstring(this.text, a, this.caretIndex)
                      ),
                      this.set_caretIndex(this.caretIndex + 1),
                      this.onChange("input")));
                break;
              default:
                0 != a.charCode &&
                  ((a = a.charCode),
                  (a = this.filter(String.fromCodePoint(a))),
                  0 < a.length &&
                    (0 == this.maxLength ||
                      this.text.length + a.length <= this.maxLength) &&
                    (this.set_text(
                      this.insertSubstring(this.text, a, this.caretIndex)
                    ),
                    this.set_caretIndex(this.caretIndex + 1),
                    this.onChange("input")));
            }
        },
        onChange: function (a) {
          null != this.callback && this.callback(this.text, a);
        },
        handleClipboardText: function (a) {
          mc._text == a && this.pasteClipboardText(a);
        },
        pasteClipboardText: function (a) {
          var b =
            0 < this.maxLength ? this.maxLength - this.text.length : a.length;
          a = this.filter(a).substring(0, b);
          this.set_text(this.insertSubstring(this.text, a, this.caretIndex));
          this.set_caretIndex(this.caretIndex + a.length);
          this.onChange("input");
        },
        insertSubstring: function (a, b, c) {
          return (a =
            c != a.length ? a.substring(0, c) + b + a.substring(c) : a + b);
        },
        getCaretIndex: function () {
          var a = g.mouse.x - this.x,
            b = g.mouse.y - this.y;
          null == b && (b = 0);
          null == a && (a = 0);
          null == b && (b = 0);
          null == a && (a = 0);
          b = ba.pool.get().set(a, b);
          b._inPool = !1;
          return this.getCharIndexAtPoint(b.x, b.y);
        },
        getCharBoundaries: function (a) {
          if (
            null != this._charBoundaries &&
            0 <= a &&
            0 < this._charBoundaries.length
          ) {
            var b = new ha();
            if (a >= this._charBoundaries.length) {
              a = this._charBoundaries[this._charBoundaries.length - 1];
              var c = b;
            } else (a = this._charBoundaries[a]), (c = b);
            null == c && (c = new ha());
            c.x = a.x;
            c.y = a.y;
            c.width = a.width;
            c.height = a.height;
            return b;
          }
          return null;
        },
        set_text: function (a) {
          var b = W.prototype.set_text.call(this, a);
          if (null == this.textField) return b;
          var c = a.length;
          this.prepareCharBoundaries(c);
          this.textField.set_text("");
          for (var d = 0, e, f = 0, k = 0; k < c; ) {
            var r = k++;
            this.textField.appendText(X.substr(a, r, 1));
            e = this.textField.get_textWidth();
            0 == r && (d = this.textField.get_textHeight());
            this._charBoundaries[r].x = 2 + f;
            this._charBoundaries[r].y = 2;
            this._charBoundaries[r].width = e - f;
            this._charBoundaries[r].height = d;
            f = e;
          }
          this.textField.set_text(a);
          this.onSetTextCheck();
          return b;
        },
        getCharIndexAtPoint: function (a, b) {
          b = 0;
          if (
            null != this._charBoundaries &&
            0 < this._charBoundaries.length &&
            this.textField.get_textWidth() <= this.textField.get_width()
          )
            switch (this.getAlignStr()) {
              case "center":
                a =
                  a -
                  this.textField.get_width() / 2 +
                  this.textField.get_textWidth() / 2;
                break;
              case "right":
                a =
                  a -
                  this.textField.get_width() +
                  this.textField.get_textWidth();
            }
          if (null != this._charBoundaries)
            for (var c = 0, d = this._charBoundaries; c < d.length; ) {
              var e = d[c];
              ++c;
              if (a >= e.x && a <= e.x + e.width) return b;
              ++b;
            }
          return null != this._charBoundaries &&
            0 < this._charBoundaries.length &&
            a > this.textField.get_textWidth()
            ? this._charBoundaries.length
            : 0;
        },
        prepareCharBoundaries: function (a) {
          null == this._charBoundaries && (this._charBoundaries = []);
          if (this._charBoundaries.length > a)
            for (var b = 0, c = this._charBoundaries.length - a; b < c; )
              b++, this._charBoundaries.pop();
          b = 0;
          for (c = a; b < c; )
            if (((a = b++), this._charBoundaries.length - 1 < a)) {
              a = this._charBoundaries;
              var d = 0,
                e = 0,
                f = 0,
                k = 0;
              null == k && (k = 0);
              null == f && (f = 0);
              null == e && (e = 0);
              null == d && (d = 0);
              var r = Ga._pool.get();
              null == k && (k = 0);
              null == f && (f = 0);
              null == e && (e = 0);
              null == d && (d = 0);
              r.x = d;
              r.y = e;
              r.width = f;
              r.height = k;
              r._inPool = !1;
              a.push(r);
            }
        },
        onSetTextCheck: function () {},
        calcFrame: function (a) {
          null == a && (a = !1);
          W.prototype.calcFrame.call(this, a);
          null != this.fieldBorderSprite &&
            (0 < this.fieldBorderThickness
              ? (this.fieldBorderSprite.makeGraphic(
                  (this.get_width() + 2 * this.fieldBorderThickness) | 0,
                  (this.get_height() + 2 * this.fieldBorderThickness) | 0,
                  this.fieldBorderColor
                ),
                this.fieldBorderSprite.set_x(
                  this.x - this.fieldBorderThickness
                ),
                this.fieldBorderSprite.set_y(
                  this.y - this.fieldBorderThickness
                ))
              : 0 == this.fieldBorderThickness &&
                this.fieldBorderSprite.set_visible(!1));
          null != this.backgroundSprite &&
            (this.background
              ? (this.backgroundSprite.makeGraphic(
                  this.get_width() | 0,
                  this.get_height() | 0,
                  this.backgroundColor
                ),
                this.backgroundSprite.set_x(this.x),
                this.backgroundSprite.set_y(this.y))
              : this.backgroundSprite.set_visible(!1));
          if (null != this.caret) {
            a = this.caretWidth;
            var b = ((this._defaultFormat.size | 0) + 2) | 0,
              c = -16777216 | (this.borderColor & 16777215),
              d = -16777216 | (this.caretColor & 16777215),
              e =
                "caret" +
                a +
                "x" +
                b +
                "c:" +
                d +
                "b:" +
                M.string(this.borderStyle) +
                "," +
                this.borderSize +
                "," +
                c;
            switch (this.borderStyle._hx_index) {
              case 0:
                this.caret.makeGraphic(a, b, d, !1, e);
                this.caret.offset.set_x(this.caret.offset.set_y(0));
                break;
              case 1:
                a += this.borderSize | 0;
                b += this.borderSize | 0;
                this.caret.makeGraphic(a, b, 0, !1, e);
                e = new ha(
                  this.borderSize,
                  this.borderSize,
                  this.caretWidth,
                  ((this._defaultFormat.size | 0) + 2) | 0
                );
                this.caret.get_pixels().fillRect(e, c);
                e.x = e.y = 0;
                this.caret.get_pixels().fillRect(e, d);
                this.caret.offset.set_x(this.caret.offset.set_y(0));
                break;
              case 2:
              case 3:
                (a += (2 * this.borderSize) | 0),
                  (b += (2 * this.borderSize) | 0),
                  this.caret.makeGraphic(a, b, c, !1, e),
                  (e = new ha(
                    this.borderSize,
                    this.borderSize,
                    this.caretWidth,
                    ((this._defaultFormat.size | 0) + 2) | 0
                  )),
                  this.caret.get_pixels().fillRect(e, d),
                  this.caret.offset.set_x(
                    this.caret.offset.set_y(this.borderSize)
                  );
            }
            this.caret.set_width(a);
            this.caret.set_height(b);
            this.set_caretIndex(this.caretIndex);
          }
        },
        toggleCaret: function (a) {
          this.caret.set_visible(!this.caret.visible);
        },
        filter: function (a) {
          1 == this.forceCase
            ? (a = a.toUpperCase())
            : 2 == this.forceCase && (a = a.toLowerCase());
          if (0 != this.filterMode) {
            switch (this.filterMode) {
              case 1:
                var b = new ya("[^a-zA-Z]*", "g");
                break;
              case 2:
                b = new ya("[^0-9]*", "g");
                break;
              case 3:
                b = new ya("[^a-zA-Z0-9]*", "g");
                break;
              case 4:
                b = this.customFilterPattern;
                break;
              default:
                throw new Cb(
                  "FlxInputText: Unknown filterMode (" + this.filterMode + ")"
                );
            }
            a = a.replace(b.r, "");
          }
          return a;
        },
        set_params: function (a) {
          this.params = a;
          null == this.params && (this.params = []);
          this.params.push({ name: "value", value: this.text });
          return a;
        },
        set_x: function (a) {
          null != this.fieldBorderSprite &&
            0 < this.fieldBorderThickness &&
            this.fieldBorderSprite.set_x(a - this.fieldBorderThickness);
          null != this.backgroundSprite &&
            this.background &&
            this.backgroundSprite.set_x(a);
          return W.prototype.set_x.call(this, a);
        },
        set_y: function (a) {
          null != this.fieldBorderSprite &&
            0 < this.fieldBorderThickness &&
            this.fieldBorderSprite.set_y(a - this.fieldBorderThickness);
          null != this.backgroundSprite &&
            this.background &&
            this.backgroundSprite.set_y(a);
          return W.prototype.set_y.call(this, a);
        },
        set_hasFocus: function (a) {
          a
            ? this.hasFocus != a &&
              ((this._caretTimer = new fc().start(
                0.5,
                n(this, this.toggleCaret),
                0
              )),
              this.caret.set_visible(!0),
              this.set_caretIndex(this.text.length))
            : (this.caret.set_visible(!1),
              null != this._caretTimer && this._caretTimer.cancel());
          a != this.hasFocus &&
            (this.calcFrame(),
            sa.get_current().stage.window.__backend.setTextInputEnabled(a));
          return (this.hasFocus = a);
        },
        getAlignStr: function () {
          var a = "left";
          null != this._defaultFormat &&
            null != this._defaultFormat.align &&
            (a = Nm.fromOpenFL(this._defaultFormat.align));
          return a;
        },
        set_caretIndex: function (a) {
          var b = 0;
          switch (this.getAlignStr()) {
            case "center":
              1 >= b && (b = 0);
              break;
            case "right":
              b =
                this.textField.get_width() -
                2 -
                this.textField.get_textWidth() -
                2;
              0 > b && (b = 0);
              break;
            default:
              b = 0;
          }
          this.caretIndex = a;
          this.caretIndex > this.text.length + 1 && (this.caretIndex = -1);
          -1 != this.caretIndex &&
            (this.caretIndex < this.text.length
              ? ((a = this.getCharBoundaries(this.caretIndex)),
                null != a &&
                  (this.caret.set_x(b + a.get_left() + this.x),
                  this.caret.set_y(a.get_top() + this.y)))
              : ((a = this.getCharBoundaries(this.caretIndex - 1)),
                null != a
                  ? (this.caret.set_x(b + a.get_right() + this.x),
                    this.caret.set_y(a.get_top() + this.y))
                  : 0 == this.text.length &&
                    (this.caret.set_x(this.x + b + 2),
                    this.caret.set_y(this.y + 2))));
          1 == this.lines &&
            this.caret.x + this.caret.get_width() > this.x + this.get_width() &&
            this.caret.set_x(this.x + this.get_width() - 2);
          return this.caretIndex;
        },
        set_forceCase: function (a) {
          this.forceCase = a;
          this.set_text(this.filter(this.text));
          return this.forceCase;
        },
        set_size: function (a) {
          W.prototype.set_size.call(this, a);
          this.caret.makeGraphic(1, ((this._defaultFormat.size | 0) + 2) | 0);
          return a;
        },
        set_lines: function (a) {
          if (0 == a) return 0;
          1 < a
            ? (this.textField.set_wordWrap(!0),
              this.textField.set_multiline(!0))
            : (this.textField.set_wordWrap(!1),
              this.textField.set_multiline(!1));
          this.lines = a;
          this.calcFrame();
          return this.lines;
        },
        set_passwordMode: function (a) {
          this.textField.set_displayAsPassword(a);
          this.calcFrame();
          return a;
        },
        set_filterMode: function (a) {
          this.filterMode = a;
          this.set_text(this.filter(this.text));
          return this.filterMode;
        },
        set_backgroundColor: function (a) {
          this.backgroundColor = a;
          this.calcFrame();
          return this.backgroundColor;
        },
        __class__: Sg,
        __properties__: q(W.prototype.__properties__, {
          set_passwordMode: "set_passwordMode",
          set_backgroundColor: "set_backgroundColor",
          set_filterMode: "set_filterMode",
          set_lines: "set_lines",
          set_forceCase: "set_forceCase",
          set_caretIndex: "set_caretIndex",
          set_hasFocus: "set_hasFocus",
          set_params: "set_params",
          set_caretColor: "set_caretColor",
        }),
      });
      var vd = function (a, b, c, d) {
        this.input = b;
        this.gamepad = a;
        this.combos = c;
        this.forbiddens = d;
      };
      h["flixel.addons.ui.FlxMultiGamepad"] = vd;
      vd.__name__ = "flixel.addons.ui.FlxMultiGamepad";
      vd.__super__ = Rg;
      vd.prototype = q(Rg.prototype, {
        destroy: function () {
          Rg.prototype.destroy.call(this);
          this.gamepad = null;
        },
        checkJustPressed: function () {
          var a = this.gamepad,
            b = this.input;
          switch (b) {
            case -2:
              return a.anyButton(2);
            case -1:
              return !a.anyButton(2);
            default:
              return (
                (b = a.mapping.getRawID(b)),
                (a = a.buttons[b]),
                null != a ? a.hasState(2) : !1
              );
          }
        },
        checkPressed: function () {
          var a = this.gamepad,
            b = this.input;
          switch (b) {
            case -2:
              return a.anyButton(1);
            case -1:
              return !a.anyButton(1);
            default:
              return (
                (b = a.mapping.getRawID(b)),
                (a = a.buttons[b]),
                null != a ? a.hasState(1) : !1
              );
          }
        },
        checkCombos: function (a) {
          return this.gamepad.checkButtonArrayState(this.combos, 1) == a;
        },
        checkForbiddens: function (a) {
          return this.gamepad.checkButtonArrayState(this.forbiddens, 1) == a;
        },
        __class__: vd,
      });
      var xf = function (a, b, c, d) {
        this.sInput = b;
        vd.call(this, a, b.id, c, d);
      };
      h["flixel.addons.ui.FlxMultiGamepadAnalogStick"] = xf;
      xf.__name__ = "flixel.addons.ui.FlxMultiGamepadAnalogStick";
      xf.__super__ = vd;
      xf.prototype = q(vd.prototype, {
        destroy: function () {
          vd.prototype.destroy.call(this);
          this.sInput = null;
        },
        checkJustPressed: function () {
          if (null == this.gamepad) return !1;
          var a = this.gamepad.get_deadZone();
          switch (this.sInput.id) {
            case 19:
              if (this.sInput.axis == Ee.X) {
                var b = this.gamepad.analog.justMoved,
                  c = b.gamepad.mapping.getAnalogStick(19);
                null == c
                  ? (b = !1)
                  : ((c = b.gamepad.buttons[c.x]),
                    (b = null != c && c.hasState(b.status)));
                if (b) {
                  if (this.sInput.positive)
                    return (
                      (b = this.gamepad.analog.value.gamepad),
                      b.getAnalogXAxisValue(b.mapping.getAnalogStick(19)) > a
                    );
                  b = this.gamepad.analog.value.gamepad;
                  return (
                    b.getAnalogXAxisValue(b.mapping.getAnalogStick(19)) < -a
                  );
                }
              } else if (
                ((b = this.gamepad.analog.justMoved),
                (c = b.gamepad.mapping.getAnalogStick(19)),
                null == c
                  ? (b = !1)
                  : ((c = b.gamepad.buttons[c.y]),
                    (b = null != c && c.hasState(b.status))),
                b)
              ) {
                if (this.sInput.positive)
                  return (
                    (b = this.gamepad.analog.value.gamepad),
                    b.getYAxisRaw(b.mapping.getAnalogStick(19)) > a
                  );
                b = this.gamepad.analog.value.gamepad;
                return b.getYAxisRaw(b.mapping.getAnalogStick(19)) < -a;
              }
              return !1;
            case 20:
              if (this.sInput.axis == Ee.X) {
                if (
                  ((b = this.gamepad.analog.justMoved),
                  (c = b.gamepad.mapping.getAnalogStick(20)),
                  null == c
                    ? (b = !1)
                    : ((c = b.gamepad.buttons[c.x]),
                      (b = null != c && c.hasState(b.status))),
                  b)
                ) {
                  if (this.sInput.positive)
                    return (
                      (b = this.gamepad.analog.value.gamepad),
                      b.getAnalogXAxisValue(b.mapping.getAnalogStick(20)) > a
                    );
                  b = this.gamepad.analog.value.gamepad;
                  return (
                    b.getAnalogXAxisValue(b.mapping.getAnalogStick(20)) < -a
                  );
                }
              } else if (
                ((b = this.gamepad.analog.justMoved),
                (c = b.gamepad.mapping.getAnalogStick(20)),
                null == c
                  ? (b = !1)
                  : ((c = b.gamepad.buttons[c.y]),
                    (b = null != c && c.hasState(b.status))),
                b)
              ) {
                if (this.sInput.positive)
                  return (
                    (b = this.gamepad.analog.value.gamepad),
                    b.getYAxisRaw(b.mapping.getAnalogStick(20)) > a
                  );
                b = this.gamepad.analog.value.gamepad;
                return b.getYAxisRaw(b.mapping.getAnalogStick(20)) < -a;
              }
              return !1;
            default:
              return !1;
          }
        },
        checkPressed: function () {
          if (null == this.gamepad) return !1;
          var a = this.gamepad.get_deadZone();
          switch (this.sInput.id) {
            case 19:
              if (this.sInput.axis == Ee.X) {
                if (this.sInput.positive) {
                  var b = this.gamepad.analog.value.gamepad;
                  return (
                    b.getAnalogXAxisValue(b.mapping.getAnalogStick(19)) > a
                  );
                }
                b = this.gamepad.analog.value.gamepad;
                return b.getAnalogXAxisValue(b.mapping.getAnalogStick(19)) < -a;
              }
              if (this.sInput.positive)
                return (
                  (b = this.gamepad.analog.value.gamepad),
                  b.getYAxisRaw(b.mapping.getAnalogStick(19)) > a
                );
              b = this.gamepad.analog.value.gamepad;
              return b.getYAxisRaw(b.mapping.getAnalogStick(19)) < -a;
            case 20:
              if (this.sInput.axis == Ee.X) {
                if (this.sInput.positive)
                  return (
                    (b = this.gamepad.analog.value.gamepad),
                    b.getAnalogXAxisValue(b.mapping.getAnalogStick(20)) > a
                  );
                b = this.gamepad.analog.value.gamepad;
                return b.getAnalogXAxisValue(b.mapping.getAnalogStick(20)) < -a;
              }
              if (this.sInput.positive)
                return (
                  (b = this.gamepad.analog.value.gamepad),
                  b.getYAxisRaw(b.mapping.getAnalogStick(20)) > a
                );
              b = this.gamepad.analog.value.gamepad;
              return b.getYAxisRaw(b.mapping.getAnalogStick(20)) < -a;
            default:
              return !1;
          }
        },
        checkCombos: function (a) {
          return null == this.gamepad
            ? !1
            : this.gamepad.checkButtonArrayState(this.combos, 1) == a;
        },
        checkForbiddens: function (a) {
          return null == this.gamepad
            ? !1
            : this.gamepad.checkButtonArrayState(this.forbiddens, 1) == a;
        },
        __class__: xf,
      });
      var Ee = (w["flixel.addons.ui.XY"] = {
        __ename__: "flixel.addons.ui.XY",
        __constructs__: null,
        X: {
          _hx_name: "X",
          _hx_index: 0,
          __enum__: "flixel.addons.ui.XY",
          toString: p,
        },
        Y: {
          _hx_name: "Y",
          _hx_index: 1,
          __enum__: "flixel.addons.ui.XY",
          toString: p,
        },
      });
      Ee.__constructs__ = [Ee.X, Ee.Y];
      var Vc = function (a, b, c) {
        this.input = a;
        this.combos = b;
        this.forbiddens = c;
      };
      h["flixel.addons.ui.FlxMultiKey"] = Vc;
      Vc.__name__ = "flixel.addons.ui.FlxMultiKey";
      Vc.__super__ = Rg;
      Vc.prototype = q(Rg.prototype, {
        checkJustPressed: function () {
          return g.keys.checkStatus(this.input, 2);
        },
        checkPressed: function () {
          return g.keys.checkStatus(this.input, 1);
        },
        checkCombos: function (a) {
          return g.keys.checkKeyArrayState(this.combos, 1) == a;
        },
        checkForbiddens: function (a) {
          return g.keys.checkKeyArrayState(this.forbiddens, 1) == a;
        },
        __class__: Vc,
      });
      var Yh = function (a, b, c, d, e, f, k, r, l, J, u) {
        null == u && (u = -8224126);
        null == J && (J = -16777216);
        null == l && (l = 3);
        null == r && (r = 15);
        null == k && (k = 100);
        null == f && (f = 10);
        null == e && (e = 0);
        null == d && (d = 0);
        null == c && (c = 0);
        this._justClicked = this._justHovered = !1;
        this.setVariable = !0;
        this.callback = null;
        this.hoverAlpha = 0.5;
        this.decimals = 0;
        wa.call(this);
        this.set_x(c);
        this.set_y(d);
        e == f &&
          g.log.advanced(
            "FlxSlider: MinValue and MaxValue can't be the same (" + e + ")",
            Ja.ERROR,
            !0
          );
        this.decimals = hc.getDecimals(e);
        hc.getDecimals(f) > this.decimals &&
          (this.decimals = hc.getDecimals(f));
        this.decimals++;
        this.minValue = e;
        this.maxValue = f;
        this._object = a;
        this.set_varString(b);
        this._width = k;
        this._height = r;
        this._thickness = l;
        this._color = J;
        this._handleColor = u;
        this.createSlider();
      };
      h["flixel.addons.ui.FlxSlider"] = Yh;
      Yh.__name__ = "flixel.addons.ui.FlxSlider";
      Yh.__super__ = wa;
      Yh.prototype = q(wa.prototype, {
        createSlider: function () {
          var a = this.offset,
            b = 7,
            c = 18;
          null == c && (c = 0);
          null == b && (b = 0);
          a.set_x(b);
          a.set_y(c);
          c = this.x + this.offset.x;
          var d = this.y + this.offset.y,
            e = this._width;
          b = this._height;
          null == b && (b = 0);
          null == e && (e = 0);
          null == d && (d = 0);
          null == c && (c = 0);
          a = Ga._pool.get();
          null == b && (b = 0);
          null == e && (e = 0);
          null == d && (d = 0);
          null == c && (c = 0);
          a.x = c;
          a.y = d;
          a.width = e;
          a.height = b;
          a._inPool = !1;
          this._bounds = a;
          this.body = new F(this.offset.x, this.offset.y);
          a = this._color;
          a =
            "slider:W=" +
            this._width +
            "H=" +
            this._height +
            "C=" +
            ("0x" +
              K.hex((a >> 24) & 255, 2) +
              K.hex((a >> 16) & 255, 2) +
              K.hex((a >> 8) & 255, 2) +
              K.hex(a & 255, 2)) +
            "T=" +
            this._thickness;
          this.body.makeGraphic(this._width, this._height, 0, !1, a);
          a = this.body.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          wd.drawLine(
            this.body,
            0,
            this._height / 2,
            this._width,
            this._height / 2,
            { color: this._color, thickness: this._thickness }
          );
          this.handle = new F(this.offset.x, this.offset.y);
          this.handle.makeGraphic(
            this._thickness,
            this._height,
            this._handleColor
          );
          a = this.handle.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.nameLabel = new W(this.offset.x, 0, this._width, this.varString);
          this.nameLabel.set_alignment("center");
          this.nameLabel.set_color(this._color);
          a = this.nameLabel.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          b = this._height + this.offset.y + 3;
          this.valueLabel = new W(this.offset.x, b, this._width);
          this.valueLabel.set_alignment("center");
          this.valueLabel.set_color(this._handleColor);
          a = this.valueLabel.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.minLabel = new W(
            -50 + this.offset.x,
            b,
            100,
            M.string(this.minValue)
          );
          this.minLabel.set_alignment("center");
          this.minLabel.set_color(this._color);
          a = this.minLabel.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.maxLabel = new W(
            this._width - 50 + this.offset.x,
            b,
            100,
            M.string(this.maxValue)
          );
          this.maxLabel.set_alignment("center");
          this.maxLabel.set_color(this._color);
          a = this.maxLabel.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.add(this.body);
          this.add(this.handle);
          this.add(this.nameLabel);
          this.add(this.valueLabel);
          this.add(this.minLabel);
          this.add(this.maxLabel);
        },
        update: function (a) {
          var b = g.mouse.getScreenPosition(this.get_camera());
          if (hc.pointInFlxRect(b.x, b.y, this._bounds)) {
            1 != this.hoverAlpha && this.set_alpha(this.hoverAlpha);
            null == this.hoverSound ||
              this._justHovered ||
              g.sound.play(this.hoverSound);
            this._justHovered = !0;
            b = g.mouse._leftButton;
            if (1 == b.current || 2 == b.current)
              this.handle.set_x(g.mouse.screenX),
                this.updateValue(),
                null == this.clickSound ||
                  this._justClicked ||
                  (g.sound.play(this.clickSound), (this._justClicked = !0));
            b = g.mouse._leftButton;
            1 != b.current && 2 != b.current && (this._justClicked = !1);
          } else
            1 != this.hoverAlpha && this.set_alpha(1), (this._justHovered = !1);
          b = g.mouse._leftButton;
          (1 != b.current && 2 != b.current) ||
            !hc.mouseInFlxRect(!1, this._bounds) ||
            this.updateValue();
          null != this.varString &&
            null != qa.getProperty(this._object, this.varString) &&
            (this.value = qa.getProperty(this._object, this.varString));
          this.handle.x != this.get_expectedPos() &&
            this.handle.set_x(this.get_expectedPos());
          this.valueLabel.set_text(
            M.string(hc.roundDecimal(this.value, this.decimals))
          );
          wa.prototype.update.call(this, a);
        },
        updateValue: function () {
          this._lastPos != this.get_relativePos() &&
            (this.setVariable &&
              null != this.varString &&
              qa.setProperty(
                this._object,
                this.varString,
                this.get_relativePos() * (this.maxValue - this.minValue) +
                  this.minValue
              ),
            (this._lastPos = this.get_relativePos()),
            null != this.callback && this.callback(this.get_relativePos()));
        },
        destroy: function () {
          this.body = V.destroy(this.body);
          this.handle = V.destroy(this.handle);
          this.minLabel = V.destroy(this.minLabel);
          this.maxLabel = V.destroy(this.maxLabel);
          this.nameLabel = V.destroy(this.nameLabel);
          this.valueLabel = V.destroy(this.valueLabel);
          this._bounds = V.put(this._bounds);
          wa.prototype.destroy.call(this);
        },
        get_expectedPos: function () {
          var a =
            this.x +
            this.offset.x +
            (this._width - this.handle.get_width()) *
              ((this.value - this.minValue) / (this.maxValue - this.minValue));
          a > this.x + this._width + this.offset.x
            ? (a = this.x + this._width + this.offset.x)
            : a < this.x + this.offset.x && (a = this.x + this.offset.x);
          return a;
        },
        get_relativePos: function () {
          var a =
            (this.handle.x - this.x - this.offset.x) /
            (this._width - this.handle.get_width());
          1 < a && (a = 1);
          return a;
        },
        set_varString: function (a) {
          try {
            qa.getProperty(this._object, a), (this.varString = a);
          } catch (b) {
            g.log.advanced(
              "Could not create FlxSlider - '" +
                a +
                "' is not a valid field of '" +
                M.string(this._object) +
                "'",
              Ja.ERROR,
              !0
            ),
              (this.varString = null);
          }
          return a;
        },
        set_x: function (a) {
          wa.prototype.set_x.call(this, a);
          if (null != this._bounds) {
            var b = this._bounds,
              c = this.x + this.offset.x,
              d = this.y + this.offset.y,
              e = this._width,
              f = this._height;
            null == f && (f = 0);
            null == e && (e = 0);
            null == d && (d = 0);
            null == c && (c = 0);
            b.x = c;
            b.y = d;
            b.width = e;
            b.height = f;
          }
          return (this.x = a);
        },
        set_y: function (a) {
          wa.prototype.set_y.call(this, a);
          if (null != this._bounds) {
            var b = this._bounds,
              c = this.x + this.offset.x,
              d = this.y + this.offset.y,
              e = this._width,
              f = this._height;
            null == f && (f = 0);
            null == e && (e = 0);
            null == d && (d = 0);
            null == c && (c = 0);
            b.x = c;
            b.y = d;
            b.width = e;
            b.height = f;
          }
          return (this.y = a);
        },
        __class__: Yh,
        __properties__: q(wa.prototype.__properties__, {
          set_varString: "set_varString",
          get_relativePos: "get_relativePos",
          get_expectedPos: "get_expectedPos",
        }),
      });
      var Ea = function (a, b, c, d, e, f) {
        this._scaledAssets = [];
        this._assetsToCleanUp = [];
        this._safe_input_delay_elapsed = 0;
        this._curr_mode = "";
        this._pointX = this._pointY = 1;
        this._postLoaded = !1;
        this.getTextFallback = this.cursorLists = null;
        this.failed_by = 0;
        this.failed = !1;
        this.safe_input_delay_time = 0.01;
        this.do_safe_input_delay = !0;
        Na.call(this);
        this._ptr_tongue = d;
        this._ptr = b;
        null != c && this.setSuperIndex(c);
        if (null != f)
          for (
            this._variable_index = new Q(),
              b = Object.keys(f.h),
              c = b.length,
              d = 0;
            d < c;

          )
            (e = b[d++]), (this._variable_index.h[e] = f.h[e]);
        null != a && this.load(a);
      };
      h["flixel.addons.ui.FlxUI"] = Ea;
      Ea.__name__ = "flixel.addons.ui.FlxUI";
      Ea.__interfaces__ = [$a];
      Ea.event = function (a, b, c, d) {
        var e = Ea.getLeafUIState();
        null != e && e.getEvent(a, b, c, d);
      };
      Ea.fontSize = function (a, b) {
        var c = Ea.getLeafUIState()._tongue;
        c = null != c ? c : null;
        null != c && (b = c.getFontSize(a, b));
        return b;
      };
      Ea.font = function (a, b, c) {
        null == c && (c = ".ttf");
        null == b && (b = "");
        var d = Ea.getLeafUIState()._tongue;
        d = null != d ? d : null;
        null != d && (a = d.getFont(a));
        return E.font(a, b, c);
      };
      Ea.forceFocus = function (a, b) {
        var c = Ea.getLeafUIState();
        null != c && c.forceFocus(a, b);
      };
      Ea.getLeafUIState = function () {
        var a = g.game._state;
        if (null != a) for (; null != a.subState; ) a = a.subState;
        return za.__implements(a, pb) ? a : null;
      };
      Ea.consolidateData = function (a, b, c) {
        null == c && (c = !1);
        if (null == a && null != b) return b;
        if (null == b) return a;
        b = oa.parse(Pg.print(b)).firstElement();
        for (var d = a.attributes(); d.hasNext(); ) {
          var e = d.next(),
            f = sc.resolve(a, e);
          b.set(e, f);
        }
        if (a.nodeType == oa.Document) f = "Document";
        else {
          if (a.nodeType != oa.Element)
            throw N.thrown(
              "Bad node type, expected Element but found " +
                (null == a.nodeType ? "null" : bb.toString(a.nodeType))
            );
          f = a.nodeName;
        }
        if (b.nodeType != oa.Element)
          throw N.thrown(
            "Bad node type, expected Element but found " +
              (null == b.nodeType ? "null" : bb.toString(b.nodeType))
          );
        b.nodeName = f;
        ic.resolve(a, "name") || ic.resolve(a, "id")
          ? b.set("name", E.xml_name(a))
          : b.set("name", "");
        for (f = a.elements(); f.hasNext(); ) {
          var k = f.next();
          if (k.nodeType != oa.Element)
            throw N.thrown(
              "Bad node type, expected Element but found " +
                (null == k.nodeType ? "null" : bb.toString(k.nodeType))
            );
          d = k.nodeName;
          var r = !c;
          if (c) {
            e = b.elementsNamed(d);
            var l = e.next();
            if (1 == Ub.resolve(a, d).length && null != l && 0 == e.hasNext())
              for (d = k.attributes(); d.hasNext(); )
                (e = d.next()), l.set(e, k.get(e));
            else r = !0;
          }
          r && b.insertChild(oa.parse(Pg.print(k)).firstElement(), 0);
        }
        if (b.nodeType != oa.Document && b.nodeType != oa.Element)
          throw N.thrown(
            "Invalid nodeType " +
              (null == b.nodeType ? "null" : bb.toString(b.nodeType))
          );
        return b;
      };
      Ea.sortParams = function (a, b) {
        return a.sort < b.sort ? -1 : a.sort > b.sort ? 1 : 0;
      };
      Ea.__super__ = Na;
      Ea.prototype = q(Na.prototype, {
        set_focus: function (a) {
          if (null != this.focus) this.onFocusLost(this.focus);
          this.focus = a;
          if (null != this.focus) this.onFocus(this.focus);
          return a;
        },
        getEvent: function (a, b, c, d) {
          if (
            null != this._ptr &&
            (this._ptr.getEvent(a, b, c, d), "post_load" == a)
          ) {
            a = Object.keys(this._asset_index.h);
            d = a.length;
            for (var e = 0; e < d; ) {
              var f = a[e++];
              f = this._asset_index.h[f];
              f instanceof Ea && f.getEvent("post_load", b, c);
            }
          }
        },
        getRequest: function (a, b, c, d) {
          return null != this._ptr ? this._ptr.getRequest(a, b, c, d) : null;
        },
        onFocus: function (a) {
          if (a instanceof Tg)
            for (var b = 0, c = this.group.members; b < c.length; ) {
              var d = c[b];
              ++b;
              this.setWidgetSuppression(d, a);
            }
        },
        setWidgetSuppression: function (a, b, c) {
          null == c && (c = !0);
          if (za.__implements(a, Re)) {
            var d = !1;
            a instanceof Tg && a == b && (d = !0);
            d || a.set_skipButtonUpdate(c);
          } else if (a instanceof Na)
            for (d = 0, a = a.group.members; d < a.length; ) {
              var e = a[d];
              ++d;
              this.setWidgetSuppression(e, b, c);
            }
        },
        onFocusLost: function (a) {
          if (a instanceof Tg) {
            a = 0;
            for (var b = this.group.members; a < b.length; ) {
              var c = b[a];
              ++a;
              this.setWidgetSuppression(c, null, !1);
            }
          }
        },
        setSuperIndex: function (a) {
          this._superIndexUI = a;
        },
        update: function (a) {
          if (this.do_safe_input_delay)
            if (
              ((this._safe_input_delay_elapsed += g.elapsed),
              this._safe_input_delay_elapsed > this.safe_input_delay_time)
            )
              this.do_safe_input_delay = !1;
            else return;
          Na.prototype.update.call(this, a);
        },
        addAsset: function (a, b, c, d) {
          null == d && (d = !1);
          null == c && (c = "");
          if (Object.prototype.hasOwnProperty.call(this._asset_index.h, b))
            return (
              "screen" == b
                ? g.log.advanced(
                    "Failed to add a widget with the name 'screen', that is reserved by the system for the screen itself",
                    Ja.NOTICE
                  )
                : g.log.advanced(
                    "Duplicate screen name '" + b + "'",
                    Ja.NOTICE
                  ),
              !1
            );
          c = this.getGroup(c, d);
          null != c ? c.add(a) : this.add(a);
          this._asset_index.h[b] = a;
          return !0;
        },
        destroy: function () {
          if (null != this._group_index) {
            var a = this._group_index.h;
            a = Object.keys(a);
            for (var b = a.length, c = 0; c < b; ) {
              var d = a[c++],
                e = this._group_index;
              Object.prototype.hasOwnProperty.call(e.h, d) && delete e.h[d];
            }
            this._group_index = null;
          }
          if (null != this._asset_index) {
            a = this._asset_index.h;
            a = Object.keys(a);
            b = a.length;
            for (c = 0; c < b; )
              (d = a[c++]),
                (e = this._asset_index),
                Object.prototype.hasOwnProperty.call(e.h, d) && delete e.h[d];
            this._asset_index = null;
          }
          if (null != this._tag_index) {
            a = this._tag_index.h;
            a = Object.keys(a);
            b = a.length;
            for (c = 0; c < b; )
              (d = a[c++]),
                Od.clearArray(this._tag_index.h[d]),
                (e = this._tag_index),
                Object.prototype.hasOwnProperty.call(e.h, d) && delete e.h[d];
            this._tag_index = null;
          }
          if (null != this._definition_index) {
            a = this._definition_index.h;
            a = Object.keys(a);
            b = a.length;
            for (c = 0; c < b; )
              (d = a[c++]),
                (e = this._definition_index),
                Object.prototype.hasOwnProperty.call(e.h, d) && delete e.h[d];
            this._definition_index = null;
          }
          if (null != this._variable_index) {
            a = this._variable_index.h;
            a = Object.keys(a);
            b = a.length;
            for (c = 0; c < b; )
              (d = a[c++]),
                (e = this._variable_index),
                Object.prototype.hasOwnProperty.call(e.h, d) && delete e.h[d];
            this._variable_index = null;
          }
          if (null != this._mode_index) {
            a = this._mode_index.h;
            a = Object.keys(a);
            b = a.length;
            for (c = 0; c < b; )
              (d = a[c++]),
                (e = this._mode_index),
                Object.prototype.hasOwnProperty.call(e.h, d) && delete e.h[d];
            this._mode_index = null;
          }
          this._ptr_tongue = this._superIndexUI = this._ptr = null;
          if (null != this.cursorLists) {
            a = 0;
            for (b = this.cursorLists; a < b.length; )
              (c = b[a]), ++a, Od.clearArray(c);
            Od.clearArray(this.cursorLists);
          }
          this.cursorLists = null;
          Od.clearArray(this._failure_checks);
          this._failure_checks = null;
          Od.clearArray(this._assetsToCleanUp);
          this._assetsToCleanUp = null;
          Od.clearArray(this._scaledAssets);
          this._scaledAssets = null;
          Na.prototype.destroy.call(this);
        },
        load: function (a) {
          this._group_index = new Q();
          this._asset_index = new Q();
          this._tag_index = new Q();
          this._definition_index = new Q();
          null == this._variable_index && (this._variable_index = new Q());
          this._mode_index = new Q();
          if (null != a) {
            if (null == this._superIndexUI) {
              var b = new uh(0, 0, g.width, g.height);
              b.name = "screen";
              this.addAsset(b, "screen");
              if (
                Pa.resolve(a, "screen_override") &&
                this._loadTest(ub.resolve(a, "screen_override"))
              ) {
                var c = ub.resolve(a, "screen_override");
                this._loadPosition(c, b);
                b.set_width(this._loadWidth(c, g.width));
                b.set_height(this._loadHeight(c, g.height));
              }
            }
            this._data = a;
            if (Pa.resolve(a, "inject"))
              for (; Pa.resolve(a, "inject"); ) {
                var d = ub.resolve(a, "inject");
                b = E.xml_name(d);
                var e = E.xml(b, "xml", !1);
                if (null != e) {
                  var f = d.parent,
                    k = 0;
                  b = 0;
                  for (c = f.children; b < c.length; ) {
                    var r = c[b];
                    ++b;
                    if (r == d) break;
                    ++k;
                  }
                  if (f.removeChild(d))
                    for (b = 0, c = e.elements(); c.hasNext(); )
                      (d = c.next()), f.insertChild(d, k + b), ++b;
                }
              }
            if (Pa.resolve(a, "include"))
              for (b = 0, c = Ub.resolve(a, "include"); b < c.length; )
                if (
                  ((f = c[b]),
                  ++b,
                  (f = E.xml_name(f)),
                  (f = E.xml(f)),
                  null != f)
                ) {
                  e = 0;
                  for (r = Ub.resolve(f, "definition"); e < r.length; )
                    (k = r[e]),
                      ++e,
                      (d = "include:" + E.xml_name(k)),
                      this.unparentXML(k),
                      (this._definition_index.h[d] = k);
                  Pa.resolve(f, "point_size") && this._loadPointSize(f);
                  if (Pa.resolve(f, "default"))
                    for (k = 0, f = Ub.resolve(f, "default"); k < f.length; )
                      (d = f[k]),
                        ++k,
                        this._loadTest(d) &&
                          ((e = E.xml_name(d)),
                          this.unparentXML(d),
                          (this._definition_index.h["default:" + e] = d));
                }
            Pa.resolve(a, "point_size") && this._loadPointSize(a);
            if (Pa.resolve(a, "definition"))
              for (b = 0, c = Ub.resolve(a, "definition"); b < c.length; )
                (k = c[b]),
                  ++b,
                  this._loadTest(k) &&
                    ((d = E.xml_name(k)),
                    (f = ""),
                    -1 != d.indexOf("default:") && (f = "'default:'"),
                    -1 != d.indexOf("include:") && (f = "'include:'"),
                    "" != f
                      ? g.log.advanced(
                          "Can't create FlxUI definition '" +
                            d +
                            "', because '" +
                            f +
                            "' is a reserved name prefix!",
                          Ja.WARNING,
                          !0
                        )
                      : (this.unparentXML(k),
                        (this._definition_index.h[d] = k)));
            if (Pa.resolve(a, "default"))
              for (b = 0, c = Ub.resolve(a, "default"); b < c.length; )
                (d = c[b]),
                  ++b,
                  this._loadTest(d) &&
                    ((e = E.xml_name(d)),
                    this.unparentXML(d),
                    (this._definition_index.h["default:" + e] = d));
            if (Pa.resolve(a, "variable"))
              for (b = 0, c = Ub.resolve(a, "variable"); b < c.length; )
                (k = c[b]),
                  ++b,
                  this._loadTest(k) &&
                    ((f = E.xml_name(k)),
                    (k = E.xml_str(k, "value")),
                    "" != f && (this._variable_index.h[f] = k));
            if (Pa.resolve(a, "mode"))
              for (b = 0, c = Ub.resolve(a, "mode"); b < c.length; )
                (k = c[b]),
                  ++b,
                  this._loadTest(k) &&
                    ((f = this.applyNodeConditionals(k)),
                    (k = E.xml_name(k)),
                    this.unparentXML(f),
                    (this._mode_index.h[k] = f));
            if (Pa.resolve(a, "group"))
              for (b = 0, c = Ub.resolve(a, "group"); b < c.length; )
                (k = c[b]),
                  ++b,
                  this._loadTest(k) &&
                    ((f = E.xml_name(k)),
                    (d = E.xml_str(k, "custom")),
                    (k = null),
                    "" != d &&
                      ((d = this._ptr.getRequest("ui_get_group:", this, d)),
                      null != d && d instanceof Na && (k = d)),
                    null == k && (k = new Na()),
                    (k.name = f),
                    (this._group_index.h[f] = k),
                    this.add(k));
            if (null != a.firstElement())
              for (b = a.elements(); b.hasNext(); )
                (c = b.next()), this._loadSub(c);
            this._postLoad(a);
          } else this._onFinishLoad();
        },
        unparentXML: function (a) {
          return E.unparentXML(a);
        },
        _loadPointSize: function (a) {
          var b = ub.resolve(a, "point_size"),
            c = -1;
          null == c && (c = 0);
          var d = this._loadWidth(b, c, "x");
          b = ub.resolve(a, "point_size");
          c = -1;
          null == c && (c = 0);
          b = this._loadHeight(b, c, "y");
          1 > b &&
            1 > d &&
            (d = b =
              this._loadHeight(ub.resolve(a, "point_size"), -1, "value"));
          0 < b && (this._pointX = d);
          0 < d && (this._pointY = b);
        },
        _loadSub: function (a, b) {
          null == b && (b = 0);
          if (a.nodeType != oa.Element)
            throw N.thrown(
              "Bad node type, expected Element but found " +
                (null == a.nodeType ? "null" : bb.toString(a.nodeType))
            );
          var c = a.nodeName;
          if (a.nodeType != oa.Document && a.nodeType != oa.Element)
            throw N.thrown(
              "Invalid nodeType " +
                (null == a.nodeType ? "null" : bb.toString(a.nodeType))
            );
          if ("load_if" == c) {
            if (this._loadTest(a) && null != a.firstElement())
              for (a = a.elements(); a.hasNext(); ) {
                var d = a.next();
                this._loadSub(d, b + 1);
              }
          } else if (
            ((d = null),
            (b = E.xml_name(a)),
            ic.resolve(a, "group") &&
              ((d = sc.resolve(a, "group")), (d = this.getGroup(d))),
            (c = this._loadThing(c, a)),
            null != c)
          ) {
            this._loadGlobals(a, c);
            if (null != b && "" != b) {
              this._asset_index.h[b] = c;
              c.name = b;
              var e = E.xml_str(a, "tags");
              "" != e && ((e = e.split(",")), this._addTags(e, b));
            }
            this._loadTooltip(c, a);
            null != d ? d.add(c) : this.add(c);
            this._loadPosition(a, c);
          }
        },
        _addTags: function (a, b) {
          for (var c = 0; c < a.length; ) {
            var d = a[c];
            ++c;
            Object.prototype.hasOwnProperty.call(this._tag_index.h, d) ||
              (this._tag_index.h[d] = []);
            d = this._tag_index.h[d];
            -1 == d.indexOf(b) && d.push(b);
          }
        },
        _loadGlobals: function (a, b) {
          if (b instanceof O) {
            var c = E.xml_bool(a, "visible", !0),
              d = E.xml_bool(a, "active", !0),
              e = E.xml_i(a, "num_id");
            b.visible = c;
            b.active = d;
            b.ID = e;
            b instanceof F && ((a = E.xml_f(a, "alpha", 1)), b.set_alpha(a));
          }
        },
        _postLoad: function (a) {
          this._postLoaded = !0;
          if (null != a.firstElement())
            for (var b = a.elements(); b.hasNext(); ) {
              var c = b.next();
              if (c.nodeType != oa.Element)
                throw N.thrown(
                  "Bad node type, expected Element but found " +
                    (null == c.nodeType ? "null" : bb.toString(c.nodeType))
                );
              var d = c.nodeName.toLowerCase();
              if (c.nodeType != oa.Document && c.nodeType != oa.Element)
                throw N.thrown(
                  "Invalid nodeType " +
                    (null == c.nodeType ? "null" : bb.toString(c.nodeType))
                );
              this._postLoadThing(d, c);
            }
          if (Pa.resolve(a, "mode"))
            for (b = 0, c = Ub.resolve(a, "mode"); b < c.length; )
              if (((a = c[b]), ++b, E.xml_bool(a, "is_default"))) {
                a = E.xml_name(a);
                this.setMode(a);
                break;
              }
          if (null != this._failure_checks) {
            b = 0;
            for (c = this._failure_checks; b < c.length; )
              if (((a = c[b]), ++b, this._checkFailure(a))) {
                this.failed = !0;
                break;
              }
            E.clearArraySoft(this._failure_checks);
            this._failure_checks = null;
          }
          this._onFinishLoad();
        },
        _sendTo: function (a, b) {
          var c = this.getAssetGroup(null, a);
          if (null == c)
            if (-1 != this.group.members.indexOf(a)) c = this;
            else return;
          if (-1 == b || 1 == b)
            switch ((X.remove(c.group.members, a), b)) {
              case -1:
                c.group.members.splice(0, 0, a);
                break;
              case 1:
                c.group.members.push(a);
            }
        },
        setMode: function (a, b) {
          null == b && (b = "");
          if (this._curr_mode != a) {
            var c = this.getMode(a);
            this._curr_mode = a;
            if ("" == b) {
              if (null != c)
                for (a = c.elements(); a.hasNext(); ) {
                  b = a.next();
                  c = b = this.applyNodeConditionals(b);
                  if (c.nodeType != oa.Element)
                    throw N.thrown(
                      "Bad node type, expected Element but found " +
                        (null == c.nodeType ? "null" : bb.toString(c.nodeType))
                    );
                  var d = c.nodeName,
                    e = "" == E.xml_str(c, "active") ? null : !0;
                  null != e && (e = E.xml_bool(c, "active"));
                  if (this._loadTest(b))
                    switch (d) {
                      case "align":
                        this._alignThing(b);
                        break;
                      case "change":
                        this._changeThing(b);
                        break;
                      case "hide":
                        this.showThing(E.xml_name(c), !1, e);
                        break;
                      case "position":
                        c = E.xml_name(c);
                        c = this.getAsset(c);
                        null != c && this._loadPosition(b, c);
                        break;
                      case "show":
                        this.showThing(E.xml_name(c), !0, e);
                    }
                }
            } else
              (b = this.getAsset(b)),
                null != b && b instanceof Ea && za.__cast(b, Ea).setMode(a, "");
          }
        },
        showThing: function (a, b, c) {
          null == b && (b = !0);
          if (-1 != a.indexOf(",")) {
            a = a.split(",");
            for (var d = 0; d < a.length; ) {
              var e = a[d];
              ++d;
              var f = this.getAsset(e);
              null != f
                ? (f.set_visible(b), null != c && f.set_active(c))
                : ((f = this.getGroup(e)),
                  null != f &&
                    (f.set_visible(b), null != c && f.set_active(c)));
            }
          } else if ("*" != a)
            (f = this.getAsset(a)),
              null != f
                ? (f.set_visible(b), null != c && f.set_active(c))
                : ((f = this.getGroup(a)),
                  null != f &&
                    (f.set_visible(b), null != c && f.set_active(c)));
          else
            for (
              a = Object.keys(this._asset_index.h), d = a.length, f = 0;
              f < d;

            )
              (e = a[f++]), "*" != e && this.showThing(e, b, c);
        },
        getGroup: function (a, b) {
          null == b && (b = !0);
          var c = this._group_index.h[a];
          return null == c && b && null != this._superIndexUI
            ? this._superIndexUI.getGroup(a, b)
            : c;
        },
        hasAsset: function (a, b) {
          null == b && (b = !0);
          return Object.prototype.hasOwnProperty.call(this._asset_index.h, a)
            ? !0
            : b && null != this._superIndexUI
            ? this._superIndexUI.hasAsset(a, b)
            : !1;
        },
        getAsset: function (a, b) {
          null == b && (b = !0);
          var c = this._asset_index.h[a];
          return null == c && b && null != this._superIndexUI
            ? this._superIndexUI.getAsset(a, b)
            : c;
        },
        getAssetGroup: function (a, b) {
          if (null == b && (null == a || "" == a)) return null;
          null == b && (b = this.getAsset(a));
          if (null == b) return null;
          for (
            var c = Object.keys(this._group_index.h), d = c.length, e = 0;
            e < d;

          )
            if (
              ((a = c[e++]),
              (a = this._group_index.h[a]),
              -1 != a.group.members.indexOf(b))
            )
              return a;
          return null;
        },
        getMode: function (a, b) {
          null == b && (b = !0);
          var c = this._mode_index.h[a];
          return null == c && b && null != this._superIndexUI
            ? this._superIndexUI.getMode(a, b)
            : c;
        },
        checkVariable: function (a, b, c, d, e) {
          null == e && (e = !0);
          null == d && (d = "==");
          a = this.getVariable(a, e);
          return null != a
            ? E.compareStringVars(a, b, c, d)
            : E.compareStringVars("", b, c, d);
        },
        setVariable: function (a, b) {
          this._variable_index.h[a] = b;
        },
        getVariable: function (a, b) {
          null == b && (b = !0);
          var c = this._variable_index.h[a];
          null == c &&
            b &&
            null != this._superIndexUI &&
            (c = this._superIndexUI.getVariable(a, b));
          return c;
        },
        getDefinition: function (a, b) {
          null == b && (b = !0);
          var c = this._definition_index.h[a];
          null == c &&
            b &&
            null != this._superIndexUI &&
            (c = this._superIndexUI.getDefinition(a, b));
          null == c &&
            -1 == a.indexOf("include:") &&
            (c = this.getDefinition("include:" + a, b));
          return c;
        },
        screenWidth: function () {
          return this.hasAsset("screen")
            ? this.getAsset("screen").get_width() | 0
            : g.width;
        },
        screenHeight: function () {
          return this.hasAsset("height")
            ? this.getAsset("screen").get_height() | 0
            : g.height;
        },
        applyNodeConditionals: function (a) {
          if (Pa.resolve(a, "locale") || Pa.resolve(a, "haxedef")) {
            a = oa.parse(Pg.print(a)).firstElement();
            if (a.nodeType != oa.Document && a.nodeType != oa.Element)
              throw N.thrown(
                "Invalid nodeType " +
                  (null == a.nodeType ? "null" : bb.toString(a.nodeType))
              );
            Pa.resolve(a, "locale") && (a = this.applyNodeChanges(a, "locale"));
            Pa.resolve(a, "haxedef") &&
              (a = this.applyNodeChanges(a, "haxedef"));
            Pa.resolve(a, "window") && (a = this.applyNodeChanges(a, "window"));
          }
          return a;
        },
        applyNodeChanges: function (a, b) {
          var c = "";
          if ("locale" == b) {
            if (null == this._ptr_tongue) return a;
            c = this._ptr_tongue.locale.toLowerCase();
          }
          var d = !1;
          "haxedef" == b && (d = !0);
          "window" == b && (c = g.width + "," + g.height);
          var e = 0;
          for (b = Ub.resolve(a, b); e < b.length; ) {
            var f = b[e];
            ++e;
            var k = E.xml_name(f);
            d && ((c = ""), E.checkHaxedef(k) && (c = k));
            if (k == c && Pa.resolve(f, "change"))
              for (k = 0, f = Ub.resolve(f, "change"); k < f.length; ) {
                var r = f[k];
                ++k;
                for (var l = r.attributes(); l.hasNext(); ) {
                  var J = l.next(),
                    u = r.get(J);
                  a.set(J, u);
                }
              }
          }
          return a;
        },
        _loadThingGetInfo: function (a) {
          if (a.nodeType != oa.Element)
            throw N.thrown(
              "Bad node type, expected Element but found " +
                (null == a.nodeType ? "null" : bb.toString(a.nodeType))
            );
          var b = this.getDefinition("default:" + a.nodeName),
            c = null;
          null != b && (c = Ea.consolidateData(a, b, !0));
          null == c && (c = a);
          a = E.xml_str(c, "use_def", !0);
          b = null;
          "" != a && (b = this.getDefinition(a));
          c = Ea.consolidateData(c, b);
          c = this.applyNodeConditionals(c);
          return 0 == this._loadTest(c) ? null : c;
        },
        _loadTooltip: function (a, b) {
          if (Pa.resolve(b, "tooltip")) {
            b = this._loadTooltipData(ub.resolve(b, "tooltip"));
            var c = Ea.getLeafUIState();
            a instanceof tb
              ? c.tooltips.add(a.button, b)
              : c.tooltips.add(a, b);
          }
        },
        _loadTooltipData: function (a) {
          var b = {
              title: "",
              body: "",
              anchor: null,
              style: {
                titleFormat: null,
                bodyFormat: null,
                titleBorder: null,
                bodyBorder: null,
                titleOffset: null,
                bodyOffset: null,
                titleWidth: -1,
                bodyWidth: -1,
                background: null,
                borderSize: -1,
                borderColor: null,
                arrow: null,
                autoSizeVertical: null,
                autoSizeHorizontal: null,
                leftPadding: -1,
                rightPadding: -1,
                topPadding: -1,
                bottomPadding: -1,
              },
            },
            c = this.getDefinition("default:tooltip");
          null != c && (a = Ea.consolidateData(a, c, !0));
          ic.resolve(a, "use_def") &&
            ((c = E.xml_str(a, "use_def", !0)),
            (c = this.getDefinition(c)),
            null != c && (a = Ea.consolidateData(a, c, !0)));
          ic.resolve(a, "text") && this._loadTooltipText(a, "text", b);
          Pa.resolve(a, "title") &&
            this._loadTooltipText(ub.resolve(a, "title"), "text", b);
          Pa.resolve(a, "body") &&
            this._loadTooltipText(ub.resolve(a, "body"), "text", b);
          b.anchor = this._loadAnchor(a);
          this._loadTooltipStyle(a, b);
          return b;
        },
        _loadTooltipStyle: function (a, b) {
          b.style.background = E.xml_color(a, "background");
          b.style.borderSize = E.xml_i(a, "border", -1);
          b.style.borderColor = E.xml_color(a, "border_color");
          if (ic.resolve(a, "arrow")) {
            var c = "";
            if (null != a.get("arrow"))
              if (((c = a.get("arrow")), "" == c || null == c)) c = "";
              else {
                c = E.gfx(c);
                try {
                  if (!aa.exists(c, "IMAGE"))
                    throw N.thrown('couldn\'t load bmp "arrow"');
                } catch (e) {
                  var d = N.caught(e).unwrap();
                  if ("string" == typeof d)
                    g.log.advanced("FlxUI: U.xml_gfx() : " + d, Ja.ERROR, !0);
                  else throw e;
                }
              }
          } else c = null;
          b.style.arrow = c;
          b.style.autoSizeHorizontal = E.xml_bool(
            a,
            "auto_size_horizontal",
            !0
          );
          b.style.autoSizeVertical = E.xml_bool(a, "auto_size_vertical", !0);
          c = this._loadHeight(a, -1, "pad_all") | 0;
          -1 != c
            ? (b.style.leftPadding =
                b.style.rightPadding =
                b.style.topPadding =
                b.style.bottomPadding =
                  c)
            : ((c = this._loadWidth(a, 0, "pad_left") | 0),
              (b.style.leftPadding = c),
              (c = this._loadWidth(a, 0, "pad_right") | 0),
              (b.style.rightPadding = c),
              (c = this._loadHeight(a, 0, "pad_top") | 0),
              (b.style.topPadding = c),
              (c = this._loadHeight(a, 0, "pad_bottom") | 0),
              (b.style.bottomPadding = c));
        },
        _loadTooltipText: function (a, b, c) {
          if (a.nodeType == oa.Document) var d = "Document";
          else {
            if (a.nodeType != oa.Element)
              throw N.thrown(
                "Bad node type, expected Element but found " +
                  (null == a.nodeType ? "null" : bb.toString(a.nodeType))
              );
            d = a.nodeName;
          }
          b = this._loadString(a, b);
          var e = this._loadWidth(a, 0, "x"),
            f = this._loadHeight(a, 0, "y");
          null == f && (f = 0);
          null == e && (e = 0);
          e = new ba(e, f);
          ic.resolve(a, "use_def") &&
            ((f = E.xml_str(a, "use_def", !0)),
            (f = this.getDefinition(f)),
            null != f && (a = Ea.consolidateData(a, f)));
          f = this._loadBorder(a);
          var k = this._loadFontDef(a),
            r = E.xml_color(a, "color", !0, -16777216);
          k.format.color = r;
          a = this._loadWidth(a, -1, "width") | 0;
          switch (d) {
            case "body":
              "" != b && (c.body = b);
              c.style.bodyOffset = e;
              c.style.bodyFormat = k;
              c.style.bodyWidth = a;
              c.style.bodyBorder = f;
              break;
            case "title":
            case "tooltip":
              "" != b && (c.title = b),
                (c.style.titleOffset = e),
                (c.style.titleFormat = k),
                (c.style.titleWidth = a),
                (c.style.titleBorder = f);
          }
        },
        _loadAnchor: function (a) {
          var b = this._loadWidth(a, 0, "x"),
            c = this._loadHeight(a, 0, "y");
          if (Pa.resolve(a, "anchor")) {
            var d = E.xml_str(ub.resolve(a, "anchor"), "x", !0, "right"),
              e = E.xml_str(ub.resolve(a, "anchor"), "y", !0, "top"),
              f = E.xml_str(ub.resolve(a, "anchor"), "x-flush", !0, "left");
            a = E.xml_str(ub.resolve(a, "anchor"), "y-flush", !0, "top");
            return new Qg(b, c, d, e, f, a);
          }
          return null;
        },
        _loadThing: function (a, b) {
          var c = this._loadThingGetInfo(b);
          if (null == c) return null;
          switch (a) {
            case "align":
              return this._alignThing(c, !0), null;
            case "bar":
              return this._loadBar(c);
            case "box":
              return this._loadBox(c);
            case "button":
              return this._loadButton(c);
            case "button_toggle":
              return this._loadButton(c, !0, !0);
            case "change":
              return this._changeThing(c), null;
            case "checkbox":
              return this._loadCheckBox(c);
            case "failure":
              return (
                null == this._failure_checks && (this._failure_checks = []),
                this.unparentXML(c),
                this._failure_checks.push(c),
                null
              );
            case "input_text":
              return this._loadInputText(c);
            case "line":
              return this._loadLine(c);
            case "default":
            case "group":
            case "include":
            case "inject":
            case "load_if":
            case "mode":
              return null;
            case "chrome":
            case "nine_slice":
            case "nine_slice_sprite":
            case "nineslice":
            case "nineslicesprite":
              return this._load9SliceSprite(c);
            case "num_stepper":
            case "numeric_stepper":
            case "numstepper":
              return this._loadNumericStepper(c);
            case "position":
              return (
                (this.name = E.xml_name(c)),
                (a = this.getAsset(this.name)),
                null != a && this._loadPosition(c, a),
                null
              );
            case "dropdown":
            case "dropdown_menu":
            case "pulldown":
            case "pulldown_menu":
              return this._loadDropDownMenu(c);
            case "radio_group":
              return this._loadRadioGroup(c);
            case "region":
              return this._loadRegion(c);
            case "sprite":
              return this._loadSprite(c);
            case "tab_menu":
              return this._loadTabMenu(c);
            case "text":
              return this._loadText(c);
            case "tile_test":
              return this._loadTileTest(c);
            case "layout":
            case "ui":
              return this._loadLayout(c);
            default:
              return this._ptr.getRequest("ui_get:" + a, this, c, [b]);
          }
        },
        _loadScale: function (a, b, c) {
          null == c && (c = "scale");
          null == b && (b = 1);
          return this._loadHeight(a, b, c, "none");
        },
        _loadScaleX: function (a, b) {
          null == b && (b = 1);
          return this._loadWidth(a, b, "scale_x", "none");
        },
        _loadScaleY: function (a, b) {
          null == b && (b = 1);
          return this._loadHeight(a, b, "scale_y", "none");
        },
        _loadWidth: function (a, b, c, d) {
          null == d && (d = "");
          null == c && (c = "width");
          null == b && (b = 10);
          c = E.xml_str(a, c, !0, null == b ? "null" : "" + b);
          a = this.getRound(a, d);
          return this.doRound(this._getDataSize("w", c, b), a);
        },
        _loadHeight: function (a, b, c, d) {
          null == d && (d = "");
          null == c && (c = "height");
          null == b && (b = 10);
          c = E.xml_str(a, c, !0, null == b ? "null" : "" + b);
          a = this.getRound(a, d);
          return this.doRound(this._getDataSize("h", c, b), a);
        },
        _loadCompass: function (a, b) {
          null == b && (b = "resize_point");
          a = E.xml_str(a, b, !0, "nw");
          var c = (b = 0);
          null == c && (c = 0);
          null == b && (b = 0);
          b = ba.pool.get().set(b, c);
          b._inPool = !1;
          switch (a) {
            case "c":
            case "center":
            case "m":
            case "mid":
              b.set_x(0.5);
              b.set_y(0.5);
              break;
            case "ll":
            case "sw":
              b.set_x(0);
              b.set_y(1);
              break;
            case "n":
            case "u":
              b.set_x(0.5);
              b.set_y(0);
              break;
            case "nw":
            case "ul":
              b.set_x(0);
              b.set_y(0);
              break;
            case "e":
            case "r":
              b.set_x(1);
              b.set_y(0.5);
              break;
            case "s":
              b.set_x(0.5);
              b.set_y(1);
              break;
            case "lr":
            case "se":
              b.set_x(1);
              b.set_y(1);
              break;
            case "ne":
            case "ur":
              b.set_x(1);
              b.set_y(0);
              break;
            case "w":
              b.set_x(0.5), b.set_y(0);
          }
          return b;
        },
        _changeThing: function (a) {
          var b = E.xml_name(a);
          b = this.getAsset(b);
          if (null != b) {
            for (var c = -1, d = -1, e, f, k = a.attributes(); k.hasNext(); )
              switch (k.next()) {
                case "height":
                  d = this._loadHeight(a);
                  break;
                case "label":
                  var r = E.xml_str(a, "label");
                  e = E.xml_str(a, "context", !0, "ui");
                  f = E.xml_str(a, "code", !0, "");
                  r = this.getText(r, e, !0, f);
                  za.__implements(b, Zh) && b.getLabel().set_text(r);
                  break;
                case "text":
                  if (b instanceof Ed) {
                    r = E.xml_str(a, "text");
                    e = E.xml_str(a, "context", !0, "ui");
                    var l = b;
                    f = E.xml_str(a, "code", !0, "");
                    l.set_text(this.getText(r, e, !0, f));
                  }
                  break;
                case "width":
                  c = this._loadWidth(a);
              }
            !za.__implements(b, Wc) ||
              (-1 == c && -1 == d) ||
              (-1 == c && (c = b.get_width()),
              -1 == d && (d = b.get_height()),
              b.resize(c, d));
            if (Pa.resolve(a, "param") && za.__implements(b, le)) {
              c = null;
              if (Pa.resolve(a, "param")) {
                c = [];
                d = 0;
                for (a = Ub.resolve(a, "param"); d < a.length; )
                  if (
                    ((f = a[d]),
                    ++d,
                    ic.resolve(f, "type") && ic.resolve(f, "value"))
                  ) {
                    k = sc.resolve(f, "type");
                    k = k.toLowerCase();
                    r = e = sc.resolve(f, "value");
                    f = E.xml_i(f, "sort", -1);
                    switch (k) {
                      case "bool":
                      case "boolean":
                        e = new String(e);
                        e = e.toLowerCase();
                        r = "true" == e || "1" == e ? !0 : !1;
                        break;
                      case "color":
                      case "hex":
                        k = ob.fromString(e);
                        if (null == k)
                          throw N.thrown(
                            "U.parseHex() unable to parse hex String " + e
                          );
                        r = k;
                        break;
                      case "float":
                        r = parseFloat(e);
                        break;
                      case "int":
                        r = M.parseInt(e);
                        break;
                      case "string":
                        r = new String(e);
                    }
                    c.push({ sort: f, value: r });
                  }
                c.sort(Ea.sortParams);
                d = 0;
                for (a = c.length; d < a; ) (e = d++), (c[e] = c[e].value);
              }
              b.set_params(c);
            }
          }
        },
        _alignThing: function (a, b) {
          null == b && (b = !1);
          if (Pa.resolve(a, "objects"))
            for (var c = 0, d = Ub.resolve(a, "objects"); c < d.length; ) {
              var e = d[c];
              ++c;
              e = E.xml_str(e, "value", !0, "").split(",");
              var f = E.xml_str(a, "axis", !0);
              if ("horizontal" != f && "vertical" != f)
                throw new Cb(
                  'FlxUI._alignThing(): axis must be "horizontal" or "vertical"!'
                );
              var k =
                "horizontal" == f
                  ? this._getDataSize("w", E.xml_str(a, "spacing", !0), -1)
                  : this._getDataSize("h", E.xml_str(a, "spacing", !0), -1);
              var r = E.xml_bool(a, "resize"),
                l = E.xml_bool(a, "grow", !0),
                J = E.xml_bool(a, "shrink", !0),
                u = -1,
                m = -1;
              null == m && (m = 0);
              null == u && (u = 0);
              null == m && (m = 0);
              null == u && (u = 0);
              m = ba.pool.get().set(u, m);
              m._inPool = !1;
              u = "";
              Pa.resolve(a, "bounds") &&
                ("horizontal" == f
                  ? (m.set_x(
                      this._getDataSize(
                        "w",
                        E.xml_str(ub.resolve(a, "bounds"), "left"),
                        -1
                      )
                    ),
                    m.set_y(
                      this._getDataSize(
                        "w",
                        E.xml_str(ub.resolve(a, "bounds"), "right"),
                        -1
                      )
                    ))
                  : "vertical" == f &&
                    (m.set_x(
                      this._getDataSize(
                        "h",
                        E.xml_str(ub.resolve(a, "bounds"), "top"),
                        -1
                      )
                    ),
                    m.set_y(
                      this._getDataSize(
                        "h",
                        E.xml_str(ub.resolve(a, "bounds"), "bottom"),
                        -1
                      )
                    )));
              -1 != m.x && -1 != m.y
                ? m.y <= m.x &&
                  (u =
                    "bounds max must be > bounds min! (max=" +
                    m.y +
                    " min=" +
                    m.x +
                    ")")
                : (u = "missing bound!");
              "" == u && this._doAlign(e, f, k, r, m, l, J);
              if (
                Pa.resolve(a, "anchor") ||
                ic.resolve(a, "x") ||
                ic.resolve(a, "y")
              )
                for (f = 0; f < e.length; )
                  (k = e[f]),
                    ++f,
                    (k = this.getAsset(k)),
                    this._loadPosition(a, k);
              else "" != u && (b || g.log.advanced(u, Ja.ERROR, !0));
            }
          else throw new Cb("FlxUI._alignThing(): <objects> node not found!");
        },
        _doAlign: function (a, b, c, d, e, f, k) {
          null == k && (k = !0);
          null == f && (f = !0);
          var r = 0,
            l = e.y - e.x,
            g = a.length - 1,
            u = 0,
            m = "width",
            h = "x";
          "vertical" == b && ((m = "height"), (h = "y"));
          for (var p = 0; p < a.length; ) {
            var n = a[p];
            ++p;
            n = this.getAsset(n);
            if (null != n) {
              var q = 0;
              switch (m) {
                case "height":
                  q = n.get_height();
                  break;
                case "width":
                  q = n.get_width();
              }
              r += q;
            }
          }
          0 == d ? (r = (l - r) / g) : ((r = c), (u = (l - c * g) / a.length));
          u |= 0;
          r |= 0;
          e = e.x;
          for (p = 0; p < a.length; )
            if (((n = a[p]), ++p, (n = this.getAsset(n)), null != n)) {
              c = e;
              if (d)
                za.__implements(n, Wc) &&
                  ((e = !0),
                  (l = n),
                  "vertical" == b
                    ? (u > l.get_width()
                        ? (e = f)
                        : u < l.get_width() && (e = k),
                      e && l.resize(l.get_width(), u))
                    : "horizontal" == b &&
                      (u > l.get_height()
                        ? (e = f)
                        : u < l.get_height() && (e = k),
                      e && l.resize(u, l.get_height())));
              else
                switch (m) {
                  case "height":
                    u = n.get_height();
                    break;
                  case "width":
                    u = n.get_width();
                }
              e = c + u + r;
              switch (h) {
                case "x":
                  n.set_x(c);
                  break;
                case "y":
                  n.set_y(c);
              }
            }
        },
        _checkFailure: function (a) {
          var b = E.xml_str(a, "target", !0),
            c = E.xml_str(a, "property", !0),
            d = E.xml_str(a, "compare", !0);
          a = E.xml_str(a, "value", !0);
          var e = this.getAsset(b);
          if (null == e) return !1;
          var f = (b = 0),
            k = E.perc_to_float(a);
          switch (c) {
            case "h":
            case "height":
              b = e.get_height();
              break;
            case "w":
            case "width":
              b = e.get_width();
          }
          if (isNaN(k))
            if (E.isStrNum(a)) f = parseFloat(a);
            else return !1;
          else
            switch (c) {
              case "h":
              case "height":
                f = k * this.screenHeight();
                break;
              case "w":
              case "width":
                f = k * this.screenWidth();
            }
          c = !1;
          switch (d) {
            case "<":
              b < f && ((this.failed_by = f - b), (c = !0));
              break;
            case "<=":
              b <= f && ((this.failed_by = f - b), (c = !0));
              break;
            case "=":
            case "==":
              b == f && ((this.failed_by = Math.abs(b - f)), (c = !0));
              break;
            case ">":
              b > f && ((this.failed_by = b - f), (c = !0));
              break;
            case ">=":
              b >= f && ((this.failed_by = b - f), (c = !0));
          }
          return c;
        },
        _resizeThing: function (a, b) {
          var c = !1,
            d = a.get_width(),
            e = a.get_height();
          d < b.min_width
            ? ((c = !0), (d = b.min_width))
            : d > b.max_width && ((c = !0), (d = b.max_width));
          e < b.min_height
            ? ((c = !0), (e = b.min_height))
            : e > b.max_height && ((c = !0), (e = b.max_height));
          c && a.resize(d, e);
        },
        _postLoadThing: function (a, b) {
          if ("load_if" == a) {
            if (this._loadTest(b) && null != b.firstElement())
              for (var c = b.elements(); c.hasNext(); ) {
                var d = c.next();
                if (d.nodeType != oa.Element)
                  throw N.thrown(
                    "Bad node type, expected Element but found " +
                      (null == d.nodeType ? "null" : bb.toString(d.nodeType))
                  );
                b = d.nodeName.toLowerCase();
                if (d.nodeType != oa.Document && d.nodeType != oa.Element)
                  throw N.thrown(
                    "Invalid nodeType " +
                      (null == d.nodeType ? "null" : bb.toString(d.nodeType))
                  );
                this._postLoadThing(b, d);
              }
          } else if (0 != this._loadTest(b)) {
            var e = E.xml_name(b);
            c = this.getAsset(e);
            (d = "group" == a) && (c = this.getGroup(e));
            "align" == a && this._alignThing(b);
            "change" == a && this._changeThing(b);
            if ("position" == a) this._loadPosition(b, c);
            else if (("cursor" == a && this._loadCursor(b), null != c || d)) {
              if (!d) {
                a = E.xml_str(b, "use_def", !0);
                "" != a && this.getDefinition(a);
                if (za.__implements(c, Wc)) {
                  a = this._getDataSize("w", E.xml_str(b, "width"));
                  e = this._getDataSize("h", E.xml_str(b, "height"));
                  if (0 == a || a == c.get_width()) a = null;
                  if (0 == e || e == c.get_height()) e = null;
                  var f = this.calcMaxMinSize(b);
                  null != f &&
                    (null != a &&
                      (a < f.min_width && (a = f.min_width),
                      a > f.max_width && (a = f.max_width),
                      (f.min_width = f.max_width = a)),
                    null != e &&
                      (e < f.min_height && (e = f.min_height),
                      e > f.max_height && (e = f.max_height),
                      (f.min_height = f.max_height = e)),
                    this._resizeThing(za.__cast(c, Wc), f));
                }
                a = -c.x;
                e = -c.y;
                null == e && (e = 0);
                null == a && (a = 0);
                c.set_x(c.x + a);
                c.set_y(c.y + e);
                this._loadPosition(b, c);
              }
              b = E.xml_str(b, "send_to", !0, "");
              if ("" != b)
                switch (b) {
                  case "back":
                  case "bottom":
                    this._sendTo(c, -1);
                    break;
                  case "front":
                  case "top":
                    this._sendTo(c, 1);
                }
              !d &&
                c instanceof Ea &&
                0 == c._postLoaded &&
                c.getEvent("post_load", this, null);
            }
          }
        },
        _loadTileTest: function (a) {
          var b = E.xml_i(a, "tiles_w", 2),
            c = E.xml_i(a, "tiles_h", 2),
            d = this._loadWidth(a),
            e = this._loadHeight(a),
            f = this.calcMaxMinSize(a);
          d < f.min_width && (d = f.min_width);
          e < f.min_height && (e = f.min_height);
          d = (d / b) | 0;
          e = (e / c) | 0;
          d < e ? (e = d) : e < d && (d = e);
          d * b > f.max_width && (d = (f.max_width / b) | 0);
          e * c > f.max_height && (e = (f.max_height / c) | 0);
          d < e ? (e = d) : e < d && (d = e);
          2 > d && (d = 2);
          2 > e && (e = 2);
          var k = ob.fromString(E.xml_str(a, "color1", !0, "0x808080")),
            r = ob.fromString(E.xml_str(a, "color2", !0, "0xc4c4c4"));
          f = E.xml_i(a, "base_tile_size", -1);
          a = E.xml_bool(a, "floor_to_even", !1);
          b = new dj(0, 0, d, e, b, c, k, r, a);
          b.baseTileSize = f;
          return b;
        },
        _loadString: function (a, b) {
          b = E.xml_str(a, b);
          var c = E.xml_str(a, "context", !0, "ui");
          a = E.xml_str(a, "code", !0, "");
          return (b = this.getText(b, c, !0, a));
        },
        _loadText: function (a) {
          var b = E.xml_str(a, "text"),
            c = E.xml_str(a, "context", !0, "ui"),
            d = E.xml_str(a, "code", !0, "");
          b = this.getText(b, c, !0, d);
          d = this._loadWidth(a, 100) | 0;
          c = this._loadHeight(a, -1) | 0;
          var e = this._loadFontFace(a);
          if (E.xml_bool(a, "input"))
            throw new Cb(
              "FlxUI._loadText(): <text> with input has been deprecated. Use <input_text> instead."
            );
          var f = E.xml_str(a, "align");
          "" == f && (f = null);
          var k = this._loadHeight(a, 8, "size", "floor") | 0,
            r = this._loadColor(a),
            l = this._loadBorder(a);
          d = new Ed(0, 0, d, b, k);
          d.setFormat(e, k, r, f);
          l.apply(d);
          d.drawFrame();
          if (Pa.resolve(a, "param")) {
            e = null;
            if (Pa.resolve(a, "param")) {
              e = [];
              f = 0;
              for (a = Ub.resolve(a, "param"); f < a.length; )
                if (
                  ((r = a[f]),
                  ++f,
                  ic.resolve(r, "type") && ic.resolve(r, "value"))
                ) {
                  l = sc.resolve(r, "type");
                  l = l.toLowerCase();
                  var g = (k = sc.resolve(r, "value"));
                  r = E.xml_i(r, "sort", -1);
                  switch (l) {
                    case "bool":
                    case "boolean":
                      k = new String(k);
                      k = k.toLowerCase();
                      g = "true" == k || "1" == k ? !0 : !1;
                      break;
                    case "color":
                    case "hex":
                      l = ob.fromString(k);
                      if (null == l)
                        throw N.thrown(
                          "U.parseHex() unable to parse hex String " + k
                        );
                      g = l;
                      break;
                    case "float":
                      g = parseFloat(k);
                      break;
                    case "int":
                      g = M.parseInt(k);
                      break;
                    case "string":
                      g = new String(k);
                  }
                  e.push({ sort: r, value: g });
                }
              e.sort(Ea.sortParams);
              f = 0;
              for (a = e.length; f < a; ) (k = f++), (e[k] = e[k].value);
            }
            d.set_params(e);
          }
          0 < c &&
            d.get_height() != c &&
            za.__implements(d, Wc) &&
            d.resize(d.get_width(), c);
          d.set_text(" ");
          d.set_text(b);
          return d;
        },
        _loadInputText: function (a) {
          var b = E.xml_str(a, "text"),
            c = E.xml_str(a, "context", !0, "ui"),
            d = E.xml_str(a, "code", !0, "");
          b = this.getText(b, c, !0, d);
          var e = this._loadWidth(a, 100) | 0;
          c = this._loadHeight(a, -1) | 0;
          d = this._loadFontFace(a);
          var f = E.xml_str(a, "align");
          "" == f && (f = null);
          var k = this._loadHeight(a, 8, "size") | 0,
            r = this._loadColor(a),
            l = this._loadBorder(a),
            g = E.xml_str(a, "background", !0, "0x00000000"),
            u = !0,
            m = 0;
          null == m && (m = 0);
          null == u && (u = !1);
          var h = ob.fromString(g);
          if (null == h)
            if (u) h = m;
            else throw N.thrown("U.parseHex() unable to parse hex String " + g);
          g = h;
          h = E.xml_bool(a, "password_mode");
          b = new qb(0, 0, e, b, k, r, g);
          b.set_passwordMode(h);
          switch (E.xml_str(a, "force_case", !0, "")) {
            case "lower":
            case "lower_case":
            case "lowercase":
              h = 2;
              break;
            case "l":
            case "u":
              throw new Cb(
                "FlxUI._loadInputText(): 1 letter values have been deprecated (force_case attribute)."
              );
            case "upper":
            case "upper_case":
            case "uppercase":
              h = 1;
              break;
            default:
              h = 0;
          }
          for (g = E.xml_str(a, "filter", !0, ""); -1 != g.indexOf("_"); )
            g = K.replace(g, "_", "");
          switch (g) {
            case "a":
            case "an":
            case "n":
              throw new Cb(
                "FlxUI._loadInputText(): 1 letter values have been deprecated (filter attribute)."
              );
            case "alpha":
            case "onlyalpha":
              g = 1;
              break;
            case "alphanum":
            case "alphanumeric":
            case "onlyalphanumeric":
              g = 3;
              break;
            case "num":
            case "numeric":
            case "onlynumeric":
              g = 2;
              break;
            default:
              g = 0;
          }
          b.setFormat(d, k, r, f);
          b.set_forceCase(h);
          b.set_filterMode(g);
          l.apply(b);
          b.drawFrame();
          if (Pa.resolve(a, "param")) {
            d = null;
            if (Pa.resolve(a, "param")) {
              d = [];
              f = 0;
              for (a = Ub.resolve(a, "param"); f < a.length; )
                if (
                  ((r = a[f]),
                  ++f,
                  ic.resolve(r, "type") && ic.resolve(r, "value"))
                ) {
                  l = sc.resolve(r, "type");
                  l = l.toLowerCase();
                  h = k = sc.resolve(r, "value");
                  r = E.xml_i(r, "sort", -1);
                  switch (l) {
                    case "bool":
                    case "boolean":
                      g = new String(k);
                      g = g.toLowerCase();
                      h = "true" == g || "1" == g ? !0 : !1;
                      break;
                    case "color":
                    case "hex":
                      h = ob.fromString(k);
                      if (null == h)
                        throw N.thrown(
                          "U.parseHex() unable to parse hex String " + k
                        );
                      break;
                    case "float":
                      h = parseFloat(k);
                      break;
                    case "int":
                      h = M.parseInt(k);
                      break;
                    case "string":
                      h = new String(k);
                  }
                  d.push({ sort: r, value: h });
                }
              d.sort(Ea.sortParams);
              f = 0;
              for (a = d.length; f < a; ) (k = f++), (d[k] = d[k].value);
            }
            b.set_params(d);
          }
          0 < c &&
            b.get_height() != c &&
            za.__implements(b, Wc) &&
            b.resize(b.get_width(), c);
          return b;
        },
        _loadRadioGroup: function (a) {
          var b = E.xml_str(a, "dot_src", !0),
            c = E.xml_str(a, "radio_src", !0);
          var d = [];
          for (
            var e = [],
              f = this._loadWidth(a, 11, "radio_width"),
              k = this._loadHeight(a, 11, "radio_height"),
              r = this._loadHeight(a, 0, "height"),
              g = this._loadHeight(a, 0, "width"),
              J = this._loadWidth(a, 100, "label_width"),
              u = 0,
              m = Ub.resolve(a, "radio");
            u < m.length;

          ) {
            var h = m[u];
            ++u;
            var p = E.xml_name(h),
              n = E.xml_str(h, "label"),
              q = E.xml_str(h, "context", !0, "ui");
            h = E.xml_str(h, "code", !0, "");
            n = this.getText(n, q, !0, h);
            e.push(p);
            d.push(n);
          }
          e.reverse();
          d.reverse();
          h = this._loadHeight(a, 25, "y_space");
          q = null;
          if (Pa.resolve(a, "param")) {
            q = [];
            u = 0;
            for (m = Ub.resolve(a, "param"); u < m.length; )
              if (
                ((p = m[u]),
                ++u,
                ic.resolve(p, "type") && ic.resolve(p, "value"))
              ) {
                var z = sc.resolve(p, "type");
                z = z.toLowerCase();
                var t = (n = sc.resolve(p, "value"));
                p = E.xml_i(p, "sort", -1);
                switch (z) {
                  case "bool":
                  case "boolean":
                    n = new String(n);
                    n = n.toLowerCase();
                    t = "true" == n || "1" == n ? !0 : !1;
                    break;
                  case "color":
                  case "hex":
                    z = ob.fromString(n);
                    if (null == z)
                      throw N.thrown(
                        "U.parseHex() unable to parse hex String " + n
                      );
                    t = z;
                    break;
                  case "float":
                    t = parseFloat(n);
                    break;
                  case "int":
                    t = M.parseInt(n);
                    break;
                  case "string":
                    t = new String(n);
                }
                q.push({ sort: p, value: t });
              }
            q.sort(Ea.sortParams);
            u = 0;
            for (m = q.length; u < m; ) (n = u++), (q[n] = q[n].value);
          }
          n = q;
          q = null;
          "" != c
            ? (q = E.gfx(c))
            : Pa.resolve(a, "box") &&
              (q =
                "" != E.xml_str(ub.resolve(a, "box"), "slice9")
                  ? this._load9SliceSprite(ub.resolve(a, "box"))
                  : this._loadSprite(ub.resolve(a, "box")));
          c = null;
          "" != b
            ? (c = E.gfx(b))
            : Pa.resolve(a, "dot") &&
              (c =
                "" != E.xml_str(ub.resolve(a, "dot"), "slice9")
                  ? this._load9SliceSprite(ub.resolve(a, "dot"))
                  : this._loadSprite(ub.resolve(a, "dot")));
          z = b = null;
          if (Pa.resolve(a, "button"))
            for (u = 0, m = Ub.resolve(a, "button"); u < m.length; )
              (t = m[u]),
                ++u,
                (p = E.xml_name(t)),
                "previous" == p || "prev" == p
                  ? ((b = E.xml_f(t, "x")),
                    (p = E.xml_f(t, "y")),
                    null == p && (p = 0),
                    null == b && (b = 0),
                    null == p && (p = 0),
                    null == b && (b = 0),
                    (b = ba.pool.get().set(b, p)),
                    (b._inPool = !1))
                  : "next" == p &&
                    ((p = E.xml_f(t, "x")),
                    (z = E.xml_f(t, "y")),
                    null == z && (z = 0),
                    null == p && (p = 0),
                    null == z && (z = 0),
                    null == p && (p = 0),
                    (p = ba.pool.get().set(p, z)),
                    (p._inPool = !1),
                    (z = p));
          d = new ej(0, 0, e, d, null, h, f, k, J, null, b, z);
          d.set_params(n);
          "" != q && null != q && d.loadGraphics(q, c);
          e = this._loadWidth(a, 0, "text_x") | 0;
          f = this._loadHeight(a, 0, "text_y") | 0;
          k = d.getRadios();
          n = 0;
          q = !1;
          J = a.elementsNamed("radio");
          u = 0;
          for (m = k.length; u < m; )
            if (
              ((h = u++),
              (b = k[k.length - 1 - h]),
              (h = J.hasNext() ? J.next() : null),
              null != b &&
                b instanceof tb &&
                ((b = za.__cast(b, tb)),
                (c = this.formatButtonText(a, b)),
                null != c &&
                  0 == q &&
                  ((q = kd.copyFromFlxText(c)),
                  (p = new Te(
                    c.borderStyle,
                    c.borderColor,
                    c.borderSize,
                    c.borderQuality
                  )),
                  d.set_activeStyle(
                    new fj(
                      16777215,
                      q,
                      Nm.fromOpenFL(c._defaultFormat.align),
                      c.color,
                      p
                    )
                  ),
                  (q = !0)),
                b.set_textX(e),
                b.set_textY(f),
                ++n,
                null != h))
            ) {
              if (h.nodeType != oa.Document && h.nodeType != oa.Element)
                throw N.thrown(
                  "Invalid nodeType " +
                    (null == h.nodeType ? "null" : bb.toString(h.nodeType))
                );
              this._loadTooltip(b, h);
            }
          0 != g && ((d.fixedSize = !0), d.set_width(g));
          0 != r && ((d.fixedSize = !0), d.set_height(r));
          return d;
        },
        _loadCheckBox: function (a) {
          var b = E.xml_str(a, "label");
          var c = E.xml_str(a, "context", !0, "ui");
          var d = E.xml_str(a, "code", !0, ""),
            e = E.xml_bool(a, "checked", !1);
          b = this.getText(b, c, !0, d);
          c = this._loadWidth(a, 100, "label_width");
          d = E.xml_str(a, "check_src", !0);
          var f = E.xml_str(a, "box_src", !0),
            k = null;
          if (Pa.resolve(a, "param")) {
            k = [];
            for (var r = 0, g = Ub.resolve(a, "param"); r < g.length; ) {
              var J = g[r];
              ++r;
              if (ic.resolve(J, "type") && ic.resolve(J, "value")) {
                var u = sc.resolve(J, "type");
                u = u.toLowerCase();
                var m = sc.resolve(J, "value"),
                  h = m;
                J = E.xml_i(J, "sort", -1);
                switch (u) {
                  case "bool":
                  case "boolean":
                    m = new String(m);
                    m = m.toLowerCase();
                    h = "true" == m || "1" == m ? !0 : !1;
                    break;
                  case "color":
                  case "hex":
                    u = ob.fromString(m);
                    if (null == u)
                      throw N.thrown(
                        "U.parseHex() unable to parse hex String " + m
                      );
                    h = u;
                    break;
                  case "float":
                    h = parseFloat(m);
                    break;
                  case "int":
                    h = M.parseInt(m);
                    break;
                  case "string":
                    h = new String(m);
                }
                k.push({ sort: J, value: h });
              }
            }
            k.sort(Ea.sortParams);
            r = 0;
            for (g = k.length; r < g; ) (m = r++), (k[m] = k[m].value);
          }
          g = r = null;
          "" != f
            ? (r = E.gfx(f))
            : Pa.resolve(a, "box") &&
              (r =
                "" != E.xml_str(ub.resolve(a, "box"), "slice9")
                  ? this._load9SliceSprite(ub.resolve(a, "box"))
                  : this._loadSprite(ub.resolve(a, "box")));
          "" != d
            ? (g = E.gfx(d))
            : Pa.resolve(a, "check") &&
              (g =
                "" != E.xml_str(ub.resolve(a, "check"), "slice9")
                  ? this._load9SliceSprite(ub.resolve(a, "check"))
                  : this._loadSprite(ub.resolve(a, "check")));
          c = new tb(0, 0, r, g, b, c, k);
          this.formatButtonText(a, c);
          d = this._loadWidth(a, 0, "text_x") | 0;
          a = this._loadHeight(a, 0, "text_y") | 0;
          c.set_textX(d);
          c.set_textY(a);
          c.set_text(b);
          c.set_checked(e);
          return c;
        },
        _loadDropDownMenu: function (a) {
          var b = E.xml_str(a, "label"),
            c = E.xml_str(a, "context", !0, "ui"),
            d = E.xml_str(a, "code", !0, "");
          b = this.getText(b, c, !0, d);
          var e = E.xml_str(a, "back_def", !0),
            f = E.xml_str(a, "panel_def", !0),
            k = E.xml_str(a, "button_def", !0),
            r = E.xml_str(a, "label_def", !0),
            l = (c = d = null),
            J = null;
          "" != e && (d = this._loadSprite(this.getDefinition(e)));
          "" != f && (c = this._load9SliceSprite(this.getDefinition(f)));
          if ("" != k)
            try {
              l = this._loadButton(this.getDefinition(k), !1, !1);
            } catch (m) {
              if (N.caught(m) instanceof Cb)
                g.log.advanced(
                  "couldn't loadButton with definition \"" + k + '"',
                  Ja.NORMAL
                ),
                  (l = null);
              else throw m;
            }
          if ("" != r) {
            try {
              J = this._loadText(this.getDefinition(r));
            } catch (m) {
              if (N.caught(m) instanceof Cb)
                g.log.advanced(
                  "couldn't loadText with definition \"" + r + '"',
                  Ja.NORMAL
                ),
                  (J = null);
              else throw m;
            }
            null != J && "" != b && J.set_text(b);
          }
          e = b = null;
          if (Pa.resolve(a, "data"))
            for (f = 0, a = Ub.resolve(a, "data"); f < a.length; )
              (k = a[f]),
                ++f,
                null == e && (e = []),
                (k = new jk(E.xml_str(k, "name", !0), E.xml_str(k, "label"))),
                e.push(k);
          else if (Pa.resolve(a, "asset"))
            for (f = 0, a = Ub.resolve(a, "asset"); f < a.length; ) {
              r = a[f];
              ++f;
              null == b && (b = []);
              k = E.xml_str(r, "def", !0);
              r = E.xml_name(r);
              var u = null;
              try {
                u = this._loadButton(this.getDefinition(k), !1);
              } catch (m) {
                if (N.caught(m) instanceof Cb)
                  g.log.advanced(
                    "couldn't loadButton with definition \"" + k + '"',
                    Ja.NORMAL
                  );
                else throw m;
              }
              null != u && ((u.name = r), null == b && (b = []), b.push(u));
            }
          d = new gj(120, d, J, l);
          return new Tg(0, 0, e, null, d, c, b);
        },
        _loadTest: function (a) {
          var b = !0;
          if (a.nodeType == oa.Document) var c = "Document";
          else {
            if (a.nodeType != oa.Element)
              throw N.thrown(
                "Bad node type, expected Element but found " +
                  (null == a.nodeType ? "null" : bb.toString(a.nodeType))
              );
            c = a.nodeName;
          }
          if ("load_if" == c && ((b = this._loadTestSub(a)), 0 == b)) return !1;
          if (Pa.resolve(a, "load_if"))
            for (c = 0, a = Ub.resolve(a, "load_if"); c < a.length; ) {
              var d = a[c];
              ++c;
              var e = d;
              if (e.nodeType != oa.Document && e.nodeType != oa.Element)
                throw N.thrown(
                  "Bad node type, expected Element or Document but found " +
                    (null == e.nodeType ? "null" : bb.toString(e.nodeType))
                );
              if (null == e.children[0] && ((b = this._loadTestSub(d)), 0 == b))
                return !1;
            }
          return b;
        },
        _loadTestSub: function (a) {
          var b = E.xml_bool(a, "is", !0),
            c = E.xml_f(a, "aspect_ratio", -1);
          if (-1 != c) {
            var d = !0;
            var e = za.__cast(g.width, Ko) / za.__cast(g.height, Ko),
              f = Math.abs(e - c);
            if (ic.resolve(a, "tolerance"))
              (c = E.xml_f(a, "tolerance", 0.1)), f > c && (d = !1);
            else if (
              ic.resolve(a, "tolerance_plus") ||
              ic.resolve(a, "tolerance_minus")
            ) {
              var k = E.xml_f(a, "tolerance_minus", -1),
                r = E.xml_f(a, "tolerance_plus", -1);
              e > c && -1 != r && f > r && (d = !1);
              e < c && -1 != k && f > k && (d = !1);
            }
            if (d != b) return !1;
          }
          f = E.xml_pt(a, "resolution", null);
          if (null != f) {
            d = !0;
            c = E.xml_pt(a, "tolerance", null);
            null == c &&
              ((e = c = 0),
              null == e && (e = 0),
              null == c && (c = 0),
              (c = new ba(c, e)));
            e = Math.abs(f.y - g.height);
            if (Math.abs(f.x - g.width) > c.x || e > c.y) d = !1;
            if (d != b) return !1;
          }
          d = E.xml_str(a, "haxedef", !0, "");
          f = E.xml_bool(a, "value", !0);
          if ("" != d && (E.checkHaxedef(d) == f) != b) return !1;
          f = E.xml_str(a, "variable", !1, "");
          a = E.xml_str(a, "type", !0, "string");
          return "" != f &&
            ((d = !0),
            (f = this.parseVarValue(f)),
            null != f && (d = this.checkVariable(f.variable, f.value, a, f.op)),
            d != b)
            ? !1
            : !0;
        },
        parseVarValue: function (a) {
          for (
            var b = "== = != !== < > <= >=".split(" "), c, d = 0;
            d < b.length;

          ) {
            var e = b[d];
            ++d;
            if (
              -1 != a.indexOf(e) &&
              ((c = a.split(e)), null != c && 2 == c.length)
            )
              return { variable: c[0], value: c[1], op: e };
          }
          return null;
        },
        _loadLayout: function (a) {
          var b = E.xml_str(a, "name", !0),
            c = this._loadWidth(a, 0, "x"),
            d = this._loadHeight(a, 0, "y");
          a = this.createUI(a);
          a.set_x(c);
          a.set_y(d);
          a.name = b;
          return a;
        },
        addToCleanup: function (a) {
          null != this._assetsToCleanUp &&
            -1 == this._assetsToCleanUp.indexOf(a) &&
            this._assetsToCleanUp.push(a);
        },
        addToScaledAssets: function (a) {
          null != this._scaledAssets &&
            -1 == this._scaledAssets.indexOf(a) &&
            this._scaledAssets.push(a);
        },
        cleanup: function () {
          for (var a = 0, b = this._assetsToCleanUp; a < b.length; ) {
            var c = b[a];
            ++a;
            g.bitmap.removeByKey(c);
          }
          this._scaledAssets = this._assetsToCleanUp = null;
        },
        createUI: function (a) {
          return new Ea(a, this, this, this._ptr_tongue, this.liveFilePath);
        },
        _loadTabMenu: function (a) {
          var b = E.xml_str(a, "back_def");
          b = this.getDefinition(b);
          null == b && (b = a);
          b = Ea.consolidateData(b, a);
          switch (E.xml_str(a, "back_type", !0, "chrome")) {
            case "region":
              b = new uh();
              break;
            case "sprite":
              b = this._loadSprite(b);
              break;
            default:
              b = this._load9SliceSprite(b, "tab_menu");
          }
          var c = null,
            d = E.xml_bool(a, "stretch_tabs", !1),
            e = "front",
            f = "back";
          Pa.resolve(a, "stacking") &&
            ((e = E.xml_str(ub.resolve(a, "stacking"), "toggled", !0, "front")),
            (f = E.xml_str(
              ub.resolve(a, "stacking"),
              "untoggled",
              !0,
              "back"
            )));
          var k = null;
          "" != E.xml_str(a, "spacing", !0, "") &&
            (k = this._loadWidth(a, 0, "spacing"));
          var r = this._loadWidth(a, 0, "tab_x"),
            g = this._loadHeight(a, 0, "tab_y");
          null == g && (g = 0);
          null == r && (r = 0);
          null == g && (g = 0);
          null == r && (r = 0);
          r = ba.pool.get().set(r, g);
          r._inPool = !1;
          var J = "";
          if (Pa.resolve(a, "tab")) {
            g = 0;
            for (var u = Ub.resolve(a, "tab"); g < u.length; )
              (c = u[g]),
                ++g,
                (c = E.xml_str(c, "use_def")),
                "" != c && (J = c);
            c = "" != J ? this.getDefinition(J) : ub.resolve(a, "tab");
          }
          J = [];
          if (Pa.resolve(a, "tab"))
            for (g = 0, u = Ub.resolve(a, "tab"); g < u.length; ) {
              var m = u[g];
              ++g;
              var h = E.xml_name(m);
              if ("" != h) {
                var p = E.xml_str(m, "label"),
                  n = E.xml_str(m, "context", !0, "ui"),
                  q = E.xml_str(m, "code", !0, "");
                p = this.getText(p, n, !0, q);
                this.getText(p, n, !0, q);
                m = Ea.consolidateData(m, c);
                p = this._loadButton(m, !0, !0, "tab_menu");
                p.name = h;
                J.push(p);
                this._loadTooltip(p, m);
              }
            }
          if (0 < J.length) {
            if (null == c || !Pa.resolve(c, "text"))
              for (g = 0; g < J.length; )
                (u = J[g]),
                  ++g,
                  u instanceof tc &&
                    (u.label.set_color(16777215),
                    u.label instanceof Ed &&
                      ((u = u.label),
                      u.set_borderStyle(Ya.OUTLINE),
                      u.set_borderColor(0),
                      u.set_borderSize(1),
                      u.set_borderQuality(1)));
            (null != c && ic.resolve(c, "width")) || (d = !0);
          }
          b = new be(b, J, null, r, d, k, [e, f]);
          if (Pa.resolve(a, "group"))
            for (g = 0, u = Ub.resolve(a, "group"); g < u.length; )
              (a = u[g]),
                ++g,
                (h = E.xml_name(a)),
                (a = new Ea(a, b, this, this._ptr_tongue)),
                null != J && 0 < J.length && a.set_y(a.y + J[0].get_height()),
                (a.name = h),
                b.addGroup(a);
          return b;
        },
        _loadNumericStepper: function (a, b) {
          null == b && (b = !0);
          var c = E.xml_f(a, "step", 1),
            d = E.xml_f(a, "value", 0),
            e = E.xml_f(a, "min", 0),
            f = E.xml_f(a, "max", 10),
            k = E.xml_i(a, "decimals", 0),
            g = E.xml_bool(a, "percent"),
            l = E.xml_str(a, "stack", !0, "");
          "" == l && (l = E.xml_str(a, "stacking", !0, ""));
          l = l.toLowerCase();
          switch (l) {
            case "h":
            case "horizontal":
            case "horz":
              l = 1;
              break;
            case "v":
            case "vert":
            case "vertical":
              l = 0;
              break;
            default:
              l = 1;
          }
          var J = null,
            u = null,
            m = null;
          Pa.resolve(a, "text") &&
            (J = this._loadThing("text", ub.resolve(a, "text")));
          Pa.resolve(a, "plus") &&
            (u = this._loadThing("button", ub.resolve(a, "plus")));
          Pa.resolve(a, "minus") &&
            (m = this._loadThing("button", ub.resolve(a, "minus")));
          c = new Jb(0, 0, c, d, e, f, k, l, J, u, m, g);
          if (b) {
            b = null;
            if (Pa.resolve(a, "param")) {
              b = [];
              d = 0;
              for (a = Ub.resolve(a, "param"); d < a.length; )
                if (
                  ((f = a[d]),
                  ++d,
                  ic.resolve(f, "type") && ic.resolve(f, "value"))
                ) {
                  k = sc.resolve(f, "type");
                  k = k.toLowerCase();
                  g = e = sc.resolve(f, "value");
                  f = E.xml_i(f, "sort", -1);
                  switch (k) {
                    case "bool":
                    case "boolean":
                      e = new String(e);
                      e = e.toLowerCase();
                      g = "true" == e || "1" == e ? !0 : !1;
                      break;
                    case "color":
                    case "hex":
                      k = ob.fromString(e);
                      if (null == k)
                        throw N.thrown(
                          "U.parseHex() unable to parse hex String " + e
                        );
                      g = k;
                      break;
                    case "float":
                      g = parseFloat(e);
                      break;
                    case "int":
                      g = M.parseInt(e);
                      break;
                    case "string":
                      g = new String(e);
                  }
                  b.push({ sort: f, value: g });
                }
              b.sort(Ea.sortParams);
              d = 0;
              for (a = b.length; d < a; ) (e = d++), (b[e] = b[e].value);
            }
            c.set_params(b);
          }
          return c;
        },
        getResizeRatio: function (a, b) {
          null == b && (b = 1);
          var c = E.xml_str(a, "resize_ratio_x", !0);
          "" == c
            ? ((c = E.xml_str(a, "resize_ratio_y", !0)),
              "" == c
                ? ((a = E.xml_f(a, "resize_ratio", -1)),
                  null == b && (b = 0),
                  null == a && (a = 0),
                  (b = new ba(a, b)))
                : ((a = parseFloat(c)),
                  (b = 1),
                  null == b && (b = 0),
                  null == a && (a = 0),
                  (b = new ba(a, b))))
            : ((a = parseFloat(c)),
              (b = 0),
              null == b && (b = 0),
              null == a && (a = 0),
              (b = new ba(a, b)));
          return b;
        },
        _loadButton: function (a, b, c, d) {
          null == d && (d = "");
          null == c && (c = !1);
          null == b && (b = !0);
          var e = this._loadColor(a);
          var f = E.xml_f(a, "resize_ratio", -1),
            k = this._loadCompass(a, "resize_point"),
            g = E.xml_bool(a, "resize_label", !1),
            l = E.xml_str(a, "label"),
            J = null,
            u = null;
          if (Pa.resolve(a, "sprite"))
            for (var m = 0, h = Ub.resolve(a, "sprite"); m < h.length; ) {
              var p = h[m];
              ++m;
              c && E.xml_bool(p, "toggle")
                ? (u = this._loadThing("sprite", p))
                : (J = this._loadThing("sprite", p));
            }
          m = E.xml_str(a, "context", !0, "ui");
          p = E.xml_str(a, "code", !0, "");
          l = this.getText(l, m, !0, p);
          p = this._loadWidth(a, 0, "width") | 0;
          var n = this._loadHeight(a, 0, "height") | 0,
            q = null;
          if (Pa.resolve(a, "param")) {
            q = [];
            m = 0;
            for (h = Ub.resolve(a, "param"); m < h.length; ) {
              var z = h[m];
              ++m;
              if (ic.resolve(z, "type") && ic.resolve(z, "value")) {
                var t = sc.resolve(z, "type");
                t = t.toLowerCase();
                var w = sc.resolve(z, "value"),
                  x = w;
                z = E.xml_i(z, "sort", -1);
                switch (t) {
                  case "bool":
                  case "boolean":
                    w = new String(w);
                    w = w.toLowerCase();
                    x = "true" == w || "1" == w ? !0 : !1;
                    break;
                  case "color":
                  case "hex":
                    t = ob.fromString(w);
                    if (null == t)
                      throw N.thrown(
                        "U.parseHex() unable to parse hex String " + w
                      );
                    x = t;
                    break;
                  case "float":
                    x = parseFloat(w);
                    break;
                  case "int":
                    x = M.parseInt(w);
                    break;
                  case "string":
                    x = new String(w);
                }
                q.push({ sort: z, value: x });
              }
            }
            q.sort(Ea.sortParams);
            m = 0;
            for (h = q.length; m < h; ) (w = m++), (q[w] = q[w].value);
          }
          m = q;
          null == J
            ? ((h = 0 == Pa.resolve(a, "graphic")),
              (e = new gd(0, 0, l, null, h, !1, e)),
              (e._autoCleanup = !1))
            : "" != l
            ? ((e = new Ed(0, 0, 80, l, 8)),
              e.setFormat(null, 8, 3355443, "center"),
              (h = new wa()),
              h.add(J),
              h.add(e),
              (e = new Be(0, 0, h)))
            : (e = new Be(0, 0, J));
          e.resize_ratio = f;
          e.resize_point = k;
          e.autoResizeLabel = g;
          b && e.set_params(m);
          if (Pa.resolve(a, "graphic"))
            if (E.xml_bool(ub.resolve(a, "graphic"), "blank"))
              e.loadGraphicSlice9(["", "", ""], p, n, null, 0, f);
            else {
              g = null;
              c
                ? ((b = "     ".split(" ")),
                  (k = [null, null, null, null, null, null]))
                : ((b = ["", "", ""]), (k = [null, null, null]));
              q = E.xml_i(ub.resolve(a, "graphic"), "src_w", 0);
              w = E.xml_i(ub.resolve(a, "graphic"), "src_h", 0);
              z = E.xml_str(ub.resolve(a, "graphic"), "tile", !0, "");
              var y = 0;
              switch (z) {
                case "h":
                case "horizontal":
                  y = 16;
                  break;
                case "v":
                case "vertical":
                  y = 1;
                  break;
                case "all":
                case "both":
                case "hv":
                case "true":
                case "vh":
                  y = 17;
              }
              z = y;
              m = E.xml_str(ub.resolve(a, "graphic"), "frames", !0);
              if ("" != m)
                for (g = [], h = m.split(","), m = 0; m < h.length; )
                  (t = h[m]), ++m, g.push(M.parseInt(t));
              m = 0;
              for (h = Ub.resolve(a, "graphic"); m < h.length; ) {
                t = h[m];
                ++m;
                var D = E.xml_name(t);
                x = E.xml_str(t, "image");
                var A = Bb.toIntArray(E.xml_str(t, "slice9"));
                z = E.xml_str(t, "tile", !0, "");
                y = 0;
                switch (z) {
                  case "h":
                  case "horizontal":
                    y = 16;
                    break;
                  case "v":
                  case "vertical":
                    y = 1;
                    break;
                  case "all":
                  case "both":
                  case "hv":
                  case "true":
                  case "vh":
                    y = 17;
                }
                z = y;
                var C = E.xml_bool(t, "toggle");
                C = C && c;
                y = E.gfx(x);
                switch (D) {
                  case "all":
                    D = c ? 6 : 3;
                    0 != w && (D = (E.getBmp(y).height / w) | 0);
                    "" != x &&
                      (b = [this.loadScaledSrc(t, "image", "scale_src", 1, D)]);
                    k = [this.load9SliceSprite_scaleSub(A, t, b[0], "image")];
                    w = E.getBmp(b[0]);
                    q = w.width;
                    w = (w.height / D) | 0;
                    break;
                  case "active":
                  case "highlight":
                  case "hilight":
                  case "hover":
                  case "over":
                    "" != x &&
                      (C
                        ? (b[4] = this.loadScaledSrc(t, "image", "scale_src"))
                        : (b[1] = this.loadScaledSrc(t, "image", "scale_src")));
                    C
                      ? (k[4] = this.load9SliceSprite_scaleSub(
                          A,
                          t,
                          b[4],
                          "image"
                        ))
                      : (k[1] = this.load9SliceSprite_scaleSub(
                          A,
                          t,
                          b[1],
                          "image"
                        ));
                    break;
                  case "down":
                  case "pressed":
                  case "pushed":
                    "" != x &&
                      (C
                        ? (b[5] = this.loadScaledSrc(t, "image", "scale_src"))
                        : (b[2] = this.loadScaledSrc(t, "image", "scale_src")));
                    C
                      ? (k[5] = this.load9SliceSprite_scaleSub(
                          A,
                          t,
                          b[5],
                          "image"
                        ))
                      : (k[2] = this.load9SliceSprite_scaleSub(
                          A,
                          t,
                          b[2],
                          "image"
                        ));
                    break;
                  case "":
                  case "inactive":
                  case "normal":
                  case "up":
                    "" != x &&
                      (C
                        ? (b[3] = this.loadScaledSrc(t, "image", "scale_src"))
                        : (b[0] = this.loadScaledSrc(t, "image", "scale_src"))),
                      C
                        ? (k[3] = this.load9SliceSprite_scaleSub(
                            A,
                            t,
                            b[3],
                            "image"
                          ))
                        : (k[0] = this.load9SliceSprite_scaleSub(
                            A,
                            t,
                            b[0],
                            "image"
                          ));
                }
                "" != b[0] &&
                  3 <= b.length &&
                  ("" == b[1] && (b[1] = b[0]),
                  "" == b[2] && (b[2] = b[1]),
                  6 <= b.length &&
                    ("" == b[3] && (b[3] = b[0]),
                    "" == b[4] && (b[4] = b[1]),
                    "" == b[5] && (b[5] = b[2])));
              }
              e.loadGraphicSlice9(b, p, n, k, z, f, c, q, w, g);
            }
          else
            "tab_menu" == d
              ? ((b =
                  "flixel/flixel-ui/img/tab_back.png flixel/flixel-ui/img/tab_back.png flixel/flixel-ui/img/tab_back.png flixel/flixel-ui/img/tab.png flixel/flixel-ui/img/tab.png flixel/flixel-ui/img/tab.png".split(
                    " "
                  )),
                (m = Bb.toIntArray("6,6,11,11")),
                (k = [m, m, m, m, m, m]),
                e.loadGraphicSlice9(b, p, n, k, 0, f, c))
              : (0 >= p && (p = 80),
                0 >= n && (n = 20),
                e.loadGraphicSlice9(null, p, n, null, 0, f, c));
          null == J
            ? null != a && Pa.resolve(a, "text")
              ? this.formatButtonText(a, e)
              : "tab_menu" == d
              ? ((e.up_color = 16777215),
                (e.down_color = 16777215),
                (e.over_color = 16777215),
                (e.up_toggle_color = 16777215),
                (e.down_toggle_color = 16777215),
                (e.over_toggle_color = 16777215))
              : e.autoCenterLabel()
            : e.autoCenterLabel();
          null != J &&
            "" != l &&
            null != a &&
            Pa.resolve(a, "text") &&
            this.formatButtonText(a, e);
          d = c = 0;
          null != a.get("text_x")
            ? (c = this._loadWidth(a, 0, "text_x") | 0)
            : null != a.get("label_x") &&
              (c = this._loadWidth(a, 0, "label_x") | 0);
          null != a.get("text_y")
            ? (d = this._loadHeight(a, 0, "text_y") | 0)
            : null != a.get("label_y") &&
              (d = this._loadHeight(a, 0, "label_y") | 0);
          if (e instanceof Be)
            if (((f = e), f.label instanceof wa))
              for (a = f.label, m = 0, h = a.group.members; m < h.length; ) {
                if (((a = h[m]), ++m, a instanceof Ed)) {
                  a.offset.set_x(a.offset.x - c);
                  a.offset.set_y(a.offset.y - d);
                  break;
                }
              }
            else
              (a = f.label),
                a.offset.set_x(a.offset.x - c),
                (a = f.label),
                a.offset.set_y(a.offset.y - d),
                null != u &&
                  (u.offset.set_x(u.offset.x - c),
                  u.offset.set_y(u.offset.y - d));
          else
            (f = e),
              (a = f.label),
              a.offset.set_x(a.offset.x - c),
              (a = f.label),
              a.offset.set_y(a.offset.y - d);
          null != J && null != u && e.set_toggle_label(u);
          if (e instanceof tc && ((J = e), null != J._assetsToCleanup))
            for (m = 0, h = J._assetsToCleanup; m < h.length; )
              (J = h[m]), ++m, this.addToCleanup(J);
          return e;
        },
        _loadRegion: function (a) {
          var b = this.calcMaxMinSize(a),
            c = this._loadWidth(a) | 0,
            d = this._loadHeight(a) | 0;
          null != b &&
            ((d = E.conformToBounds(new gb(c, d), b)),
            (c = d.x | 0),
            (d = d.y | 0));
          a = E.xml_bool(a, "visible", !0);
          c = new uh(0, 0, c, d);
          c.set_visible(a);
          return c;
        },
        _load9SliceSprite: function (a, b) {
          null == b && (b = "");
          var c = this.getResizeRatio(a),
            d = this._loadColor(a),
            e = c.x,
            f = this._loadCompass(a, "resize_point");
          c = c.y | 0;
          var k = this.calcMaxMinSize(a);
          var r = "";
          if (null != a.get("src"))
            if (((r = a.get("src")), "" == r || null == r)) r = "";
            else {
              r = E.gfx(r);
              try {
                if (!aa.exists(r, "IMAGE"))
                  throw N.thrown('couldn\'t load bmp "src"');
              } catch (m) {
                var l = N.caught(m).unwrap();
                if ("string" == typeof l)
                  g.log.advanced("FlxUI: U.xml_gfx() : " + l, Ja.ERROR, !0);
                else throw m;
              }
            }
          if ((l = Pa.resolve(a, "scale_src"))) {
            var J = r;
            r = this.loadScaledSrc(a, "src", "scale_src");
            r != J && this.addToCleanup(J);
          }
          "" == r && (r = null);
          null == r &&
            "tab_menu" == b &&
            (r = "flixel/flixel-ui/img/chrome_flat.png");
          b = this._loadWidth(a) | 0;
          J = this._loadHeight(a) | 0;
          null != k &&
            (b < k.min_width
              ? (b = k.min_width | 0)
              : b > k.max_width && (b = k.max_width),
            J < k.min_height
              ? (J = k.min_height | 0)
              : J > k.max_height && (J = k.max_height | 0));
          if (0 == b || 0 == J) return null;
          k = new ha(0, 0, b, J);
          b = Bb.toIntArray(E.xml_str(a, "slice9"));
          J = "";
          var u = r;
          l &&
            ((b = this.load9SliceSprite_scaleSub(b, a, r)),
            (J = r),
            (u = g.bitmap._cache.h[r]));
          r = E.xml_bool(a, "smooth", !1);
          l = 0;
          switch (E.xml_str(a, "tile", !0, "")) {
            case "h":
            case "horizontal":
              l = 16;
              break;
            case "v":
            case "vertical":
              l = 1;
              break;
            case "all":
            case "both":
            case "hv":
            case "true":
            case "vh":
              l = 17;
          }
          return new ea(0, 0, u, k, b, l, r, J, e, f, c, !1, d);
        },
        load9SliceSprite_scaleSub: function (a, b, c, d) {
          null == d && (d = "src");
          var e = "";
          if (null != b.get(d))
            if (((e = b.get(d)), "" == e || null == e)) e = "";
            else {
              e = E.gfx(e);
              try {
                if (!aa.exists(e, "IMAGE"))
                  throw N.thrown("couldn't load bmp \"" + d + '"');
              } catch (k) {
                if (((b = N.caught(k).unwrap()), "string" == typeof b))
                  g.log.advanced("FlxUI: U.xml_gfx() : " + b, Ja.ERROR, !0);
                else throw k;
              }
            }
          if (c == e) return a;
          c = null != g.bitmap._cache.h[c] ? g.bitmap._cache.h[c].bitmap : null;
          null == c && (c = aa.getBitmapData(e));
          e = aa.getBitmapData(e, !1);
          b = c.width / e.width;
          d = c.height / e.height;
          if (0.001 >= Math.abs(1 - b) && 0.001 >= Math.abs(1 - d)) return a;
          if (null != a) {
            a[0] = (a[0] * b) | 0;
            a[1] = (a[1] * d) | 0;
            var f = e.height - a[3];
            a[2] = (c.width - (((e.width - a[2]) * b) | 0)) | 0;
            a[3] = (c.height - ((f * d) | 0)) | 0;
          }
          return a;
        },
        _loadBox: function (a) {
          var b = this._loadWidth(a, 1, "thickness") | 0,
            c = this.calcMaxMinSize(a);
          null == c &&
            (c = {
              min_width: -Infinity,
              min_height: -Infinity,
              max_width: Infinity,
              max_height: Infinity,
            });
          var d = this._loadWidth(a) | 0,
            e = this._loadHeight(a) | 0;
          null != c &&
            (d < c.min_width
              ? (d = c.min_width | 0)
              : d > c.max_width && (d = c.max_width | 0),
            e < c.min_height
              ? (e = c.max_height | 0)
              : e > c.max_height && (e = c.max_height | 0));
          a = E.xml_str(a, "color", !0, "0xff000000");
          c = 0;
          if ("" != a && ((c = ob.fromString(a)), null == c))
            throw N.thrown("U.parseHex() unable to parse hex String " + a);
          a = new nc(0, 0);
          var f = d + "x" + e + ":" + c + ":" + b;
          null != g.bitmap._cache.h[f]
            ? a.loadGraphic(f)
            : (a.makeGraphic(d, e, c, !1, f),
              (b = new ha(b, b, d - 2 * b, e - 2 * b)),
              a.graphic.bitmap.fillRect(b, 0));
          return a;
        },
        _loadLine: function (a) {
          var b = E.xml_str(a, "axis", !0, "horizontal"),
            c = this._loadWidth(a, -1, "thickness") | 0,
            d = this.calcMaxMinSize(a);
          null == d &&
            (d = {
              min_width: 1,
              min_height: 1,
              max_width: Infinity,
              max_height: Infinity,
            });
          switch (b) {
            case "h":
            case "horizontal":
            case "horz":
              d.max_height = c;
              d.min_height = c;
              break;
            case "v":
            case "vert":
            case "vertical":
              (d.max_width = c), (d.min_width = c);
          }
          var e = this._loadWidth(a) | 0,
            f = this._loadHeight(a) | 0;
          null != d &&
            (e < d.min_width
              ? (e = d.min_width | 0)
              : e > d.max_width && (e = d.max_width | 0),
            f < d.min_height
              ? (f = d.max_height | 0)
              : f > d.max_height && (f = d.max_height | 0));
          a = E.xml_str(a, "color", !0, "0xff000000");
          d = 0;
          if ("" != a && ((d = ob.fromString(a)), null == d))
            throw N.thrown("U.parseHex() unable to parse hex String " + a);
          b = "horizontal" == b ? Ug.HORIZONTAL : Ug.VERTICAL;
          return new hj(
            0,
            0,
            b,
            b == Ug.HORIZONTAL ? e : f,
            -1 != c ? c : b == Ug.HORIZONTAL ? f : e,
            d
          );
        },
        _loadBar: function (a) {
          var b = {
              filledColors: null,
              emptyColors: null,
              chunkSize: null,
              gradRotation: null,
              filledColor: null,
              emptyColor: null,
              borderColor: null,
              filledImgSrc: "",
              emptyImgSrc: "",
            },
            c = this._loadWidth(a, -1) | 0,
            d = this._loadHeight(a, -1) | 0;
          switch (E.xml_str(a, "fill_direction", !0)) {
            case "bottom_to_top":
              var e = jd.BOTTOM_TO_TOP;
              break;
            case "horizontal_inside_out":
              e = jd.HORIZONTAL_INSIDE_OUT;
              break;
            case "horizontal_outside_in":
              e = jd.HORIZONTAL_OUTSIDE_IN;
              break;
            case "left_to_right":
              e = jd.LEFT_TO_RIGHT;
              break;
            case "right_to_left":
              e = jd.RIGHT_TO_LEFT;
              break;
            case "top_to_bottom":
              e = jd.TOP_TO_BOTTOM;
              break;
            case "vertical_inside_out":
              e = jd.VERTICAL_INSIDE_OUT;
              break;
            case "vertical_outside_in":
              e = jd.VERTICAL_OUTSIDE_IN;
              break;
            default:
              e = jd.LEFT_TO_RIGHT;
          }
          var f = E.xml_str(a, "parent_ref", !0),
            k = "" != f ? this.getAsset(f) : null,
            g = E.xml_str(a, "variable");
          f = E.xml_f(a, "value", -1);
          var l = E.xml_f(a, "min", 0),
            J = E.xml_f(a, "max", 100);
          -1 == f && (f = J);
          b.borderColor = E.xml_color(a, "border_color");
          var u = null != b.borderColor;
          b.filledColor = E.xml_color(a, "filled_color");
          null == b.filledColor && (b.filledColor = E.xml_color(a, "color"));
          b.emptyColor = E.xml_color(a, "empty_color");
          b.filledColors = E.xml_colorArray(a, "filled_colors");
          b.emptyColors = E.xml_colorArray(a, "empty_colors");
          null == b.filledColors &&
            (b.filledColors = E.xml_colorArray(a, "colors"));
          b.filledImgSrc = this.loadScaledSrc(a, "src_filled");
          b.emptyImgSrc = this.loadScaledSrc(a, "src_empty");
          "" == b.filledImgSrc &&
            (b.filledImgSrc = this.loadScaledSrc(a, "src"));
          b.chunkSize = E.xml_i(a, "chunk_size", 1);
          b.gradRotation = E.xml_i(a, "rotation", 90);
          "" == b.filledImgSrc &&
            null == b.filledColor &&
            null == b.filledColors &&
            (b.filledColor = -65536);
          a =
            -1 == c && -1 == d
              ? new $h(0, 0, e, 100, 10, k, g, l, J, u)
              : new $h(0, 0, e, c, d, k, g, l, J, u);
          a.set_style(b);
          a.resize(a.barWidth, a.barHeight);
          a.set_value(f);
          return a;
        },
        _loadSprite: function (a) {
          var b = this.loadScaledSrc(a);
          var c = this.calcMaxMinSize(a),
            d = this.getResizeRatio(a, -1),
            e = d.x;
          d = d.y | 0;
          var f = this._loadCompass(a, "resize_point"),
            k = this._loadWidth(a, -1) | 0,
            g = this._loadHeight(a, -1) | 0;
          null != c &&
            (k < c.min_width
              ? (k = c.min_width | 0)
              : k > c.max_width && (k = c.max_width | 0),
            g < c.min_height
              ? (g = c.max_height | 0)
              : g > c.max_height && (g = c.max_height | 0));
          if ("" != b)
            -1 == k && -1 == g
              ? (a = new nc(0, 0, b))
              : (-1 == e ||
                  (-1 != k && -1 != g) ||
                  (-1 == d && (-1 == k && (d = 0), -1 == g && (d = 1)),
                  1 == d ? (g = (1 / e) * k) : 0 == d && (k = (1 / e) * g)),
                (b = this.loadSmooth(a, !0)),
                (a = new nc(
                  0,
                  0,
                  E.loadScaledImage(E.xml_str(a, "src"), k, g, b)
                )));
          else {
            a = E.xml_str(a, "color");
            b = 0;
            if ("" != a && ((b = ob.fromString(a)), null == b))
              throw N.thrown("U.parseHex() unable to parse hex String " + a);
            a = new nc(0, 0);
            a.makeGraphic(k, g, b);
          }
          a.set_resize_point(f);
          a.set_resize_ratio(e);
          a.resize_ratio_axis = d;
          return a;
        },
        loadSmooth: function (a, b) {
          b = b ? "true" : "false";
          var c = E.xml_str(a, "smooth", !0, b);
          "" == c && (c = E.xml_str(a, "antialias", !0, b));
          return E.boolify(c);
        },
        loadScaledSrc: function (a, b, c, d, e) {
          null == e && (e = 1);
          null == d && (d = 1);
          null == c && (c = "scale");
          null == b && (b = "src");
          var f = E.xml_str(a, b);
          if (Pa.resolve(a, c))
            for (var k = 0, r = Ub.resolve(a, c); k < r.length; ) {
              c = r[k];
              ++k;
              var l = E.xml_f(c, "screen_ratio", -1),
                J = E.xml_f(c, "tolerance", 0.1),
                u = g.width / g.height;
              if (0 > l || (0 < l && Math.abs(l - u) <= J)) {
                k = E.xml_str(c, "suffix");
                k = f + k;
                J = -1;
                r = this.loadSmooth(c, !0);
                l = this._loadHeight(c, -1, "to_height");
                -1 != l
                  ? ((u = E.getBmp(E.gfx(f))), null != u && (J = l / u.height))
                  : ((J = this._loadScale(c, -1)),
                    -1 == J && (J = this._loadScale(c, -1, "value")));
                l = -1 != J ? J : this._loadScaleX(c, -1);
                J = -1 != J ? J : this._loadScaleY(c, -1);
                if (0 < l && 0 < J) {
                  0 >= l && (l = 1);
                  0 >= J && (J = 1);
                  u = this._loadWidth(c, -1);
                  var m = this._loadHeight(c, -1);
                  if (-1 == u || -1 == m)
                    (c = aa.getBitmapData(E.gfx(f))),
                      (u = c.width),
                      (m = c.height);
                  u *= l;
                  m *= J;
                } else
                  (u = this._loadWidth(c, -1)), (m = this._loadHeight(c, -1));
                if (0 != u && 0 != m) {
                  if (1 < e || 1 < d)
                    return (
                      (c = aa.getBitmapData(E.gfx(f))),
                      (d = E.scaleAndStoreTileset(
                        E.gfx(k),
                        J,
                        (c.width / d) | 0,
                        (c.height / e) | 0,
                        u | 0,
                        (m / e) | 0,
                        r
                      )),
                      this.addToScaledAssets(d),
                      d
                    );
                  a = E.loadScaledImage(k, u, m, r);
                  this.addToScaledAssets(a);
                  return a;
                }
                break;
              }
            }
          d = "";
          if (null != a.get(b))
            if (((d = a.get(b)), "" == d || null == d)) d = "";
            else {
              d = E.gfx(d);
              try {
                if (!aa.exists(d, "IMAGE"))
                  throw N.thrown("couldn't load bmp \"" + b + '"');
              } catch (Po) {
                if (((r = N.caught(Po).unwrap()), "string" == typeof r))
                  g.log.advanced("FlxUI: U.xml_gfx() : " + r, Ja.ERROR, !0);
                else throw Po;
              }
            }
          return d;
        },
        _getAnchorPos: function (a, b, c) {
          switch (c) {
            case "":
              break;
            case "bottom":
            case "down":
              return this.screenHeight();
            case "center":
              if ("x" == b) return this.screenWidth() / 2;
              if ("y" == b) return this.screenHeight() / 2;
              break;
            case "left":
              break;
            case "right":
              return this.screenWidth();
            case "top":
            case "up":
              break;
            default:
              if (((a = E.perc_to_float(c)), !isNaN(a))) {
                if ("x" == b) return a * this.screenWidth();
                if ("y" == b) return a * this.screenHeight();
              } else if (new ya("[\\w]+\\.[\\w]+", "").match(c))
                return (
                  (a = ""),
                  "x" == b && (a = "w"),
                  "y" == b && (a = "h"),
                  this._getStretch(1, a, c)
                );
          }
          return 0;
        },
        getRound: function (a, b) {
          null == b && (b = "");
          switch (E.xml_str(a, "round", !0, b)) {
            case "-1":
            case "down":
            case "floor":
              return vh.Floor;
            case "1":
            case "ceil":
            case "ceiling":
            case "up":
              return vh.Ceil;
            case "0":
            case "round":
            case "true":
              return vh.Round;
          }
          return vh.None;
        },
        doRound: function (a, b) {
          switch (b._hx_index) {
            case 0:
              return Math.floor(a);
            case 1:
              return Math.ceil(a);
            case 2:
              return Math.round(a);
            case 3:
              return a;
          }
        },
        calcMaxMinSize: function (a, b, c) {
          var d = 0,
            e = 0,
            f = Infinity,
            k = Infinity;
          if (Pa.resolve(a, "exact_size")) {
            var g = 0;
            for (a = Ub.resolve(a, "exact_size"); g < a.length; ) {
              f = a[g];
              ++g;
              d = E.xml_str(f, "width");
              e = E.xml_str(f, "height");
              var l = this.getRound(f);
              d = this.doRound(this._getDataSize("w", d, 0), l);
              e = this.doRound(this._getDataSize("h", e, 0), l);
              f = this.doRound(d, l);
              k = this.doRound(e, l);
            }
          } else if (Pa.resolve(a, "min_size"))
            for (g = 0, a = Ub.resolve(a, "min_size"); g < a.length; ) {
              l = a[g];
              ++g;
              var J = E.xml_str(l, "width");
              var u = E.xml_str(l, "height");
              l = this.getRound(l);
              J = this.doRound(this._getDataSize("w", J, 0), l);
              l = this.doRound(this._getDataSize("h", u, 0), l);
              J > d && (d = J);
              l > e && (e = l);
            }
          else if (Pa.resolve(a, "max_size"))
            for (g = 0, a = Ub.resolve(a, "max_size"); g < a.length; )
              (l = a[g]),
                ++g,
                (J = E.xml_str(l, "width")),
                (u = E.xml_str(l, "height")),
                (l = this.getRound(l)),
                (J = this.doRound(this._getDataSize("w", J, Infinity), l)),
                (l = this.doRound(this._getDataSize("h", u, Infinity), l)),
                J < f && (f = J),
                l < k && (k = l);
          else return null;
          null != b && (b > d && (d = b), b < f && (f = b));
          null != c && (c > e && (e = c), c < k && (k = c));
          0 >= f && (f = Infinity);
          0 >= k && (k = Infinity);
          return { min_width: d, min_height: e, max_width: f, max_height: k };
        },
        _getDataSize: function (a, b, c) {
          null == c && (c = 0);
          if (E.isStrNum(b)) return parseFloat(b);
          var d = E.perc_to_float(b);
          if (isNaN(d)) {
            if (0 == b.indexOf("stretch:"))
              return (
                (b = K.replace(b, "stretch:", "")),
                (d = b.split(",")),
                (b = this._getStretch(0, a, d[0])),
                (a = this._getStretch(1, a, d[1])),
                -1 != b && -1 != a ? a - b : c
              );
            if (0 == b.indexOf("asset:"))
              return (
                (b = K.replace(b, "asset:", "")),
                (c = this._getStretch(1, a, b))
              );
            if (new ya("[\\w]+\\.[\\w]+", "").match(b))
              return (c = this._getStretch(1, a, b));
            d = "";
            b.indexOf("pt") == b.length - 2 &&
              (d = X.substr(b, 0, b.length - 2));
            if ("" != d && E.isStrNum(d))
              switch (((b = parseFloat(d)), a)) {
                case "h":
                case "height":
                  return this._pointY * b;
                case "w":
                case "width":
                  return this._pointX * b;
              }
          } else
            switch (a) {
              case "h":
              case "height":
                return this.screenHeight() * d;
              case "scale":
              case "scale_x":
              case "scale_y":
                return d;
              case "w":
              case "width":
                return this.screenWidth() * d;
            }
          return c;
        },
        _getOperation: function (a) {
          for (
            var b = ["+", "-", "*", "/", "^"], c = "", d = Infinity, e = 0;
            e < b.length;

          ) {
            var f = b[e];
            ++e;
            var k = a.indexOf(f);
            -1 != k && k < d && ((d = k), (c = f));
          }
          d = !1;
          return "" != c &&
            -1 != a.indexOf(c) &&
            ((e = a.indexOf(c)),
            e != a.length - 1 &&
              ((b = X.substr(a, 0, e)),
              (a = X.substr(a, e + 1, a.length - (e + 1))),
              (e = a.indexOf("pt")),
              -1 != e && e == a.length - 2
                ? ((d = K.replace(a, "pt", "")), (e = parseFloat(d)), (d = !0))
                : (e = parseFloat(a)),
              isNaN(e) && (e = this.getAssetProperty(1, "", a)),
              0 != e || "0" == a))
            ? [b, c, e, d]
            : null;
        },
        _doOperation: function (a, b, c) {
          switch (b) {
            case "*":
              return a * c;
            case "+":
              return a + c;
            case "-":
              return a - c;
            case "/":
              return a / c;
            case "^":
              return Math.pow(a, c);
          }
          return a;
        },
        _getStretch: function (a, b, c) {
          var d = "",
            e = 0;
          var f = this._getOperation(c);
          if (null != f && ((c = f[0]), (d = f[1]), (e = f[2]), (f = f[3])))
            switch (b) {
              case "h":
              case "height":
                e *= this._pointY;
                break;
              case "w":
              case "width":
                e *= this._pointX;
                break;
              default:
                e *= this._pointY;
            }
          a = this.getAssetProperty(a, b, c);
          -1 != a && "" != d && (a = this._doOperation(a, d, e));
          return a;
        },
        getAssetProperty: function (a, b, c) {
          var d = "";
          -1 != c.indexOf(".") && ((d = c.split(".")), (c = d[0]), (d = d[1]));
          var e = this.getAsset(c),
            f = 0;
          if (null == e)
            switch (c) {
              case "bottom":
              case "down":
                f = this.screenHeight();
                break;
              case "left":
                f = 0;
                break;
              case "right":
                f = this.screenWidth();
                break;
              case "top":
              case "up":
                f = 0;
                break;
              default:
                f = E.isStrNum(c) ? parseFloat(c) : -1;
            }
          else
            switch (b) {
              case "h":
              case "height":
                if ("" == d)
                  0 == a && (f = e.y + e.get_height()), 1 == a && (f = e.y);
                else
                  switch (d) {
                    case "bottom":
                    case "down":
                      f = e.y + e.get_height();
                      break;
                    case "center":
                      f = e.y + e.get_height() / 2;
                      break;
                    case "halfheight":
                      f = e.get_height() / 2;
                      break;
                    case "halfwidth":
                      f = e.get_width() / 2;
                      break;
                    case "height":
                      f = e.get_height();
                      break;
                    case "right":
                      f = e.x + e.get_width();
                      break;
                    case "top":
                    case "up":
                    case "y":
                      f = e.y;
                      break;
                    case "width":
                      f = e.get_width();
                      break;
                    case "left":
                    case "x":
                      f = e.x;
                  }
                break;
              case "w":
              case "width":
                if ("" == d)
                  0 == a && (f = e.x + e.get_width()), 1 == a && (f = e.x);
                else
                  switch (d) {
                    case "bottom":
                    case "down":
                      f = e.y + e.get_height();
                      break;
                    case "center":
                      f = e.x + e.get_width() / 2;
                      break;
                    case "halfheight":
                      f = e.get_height() / 2;
                      break;
                    case "halfwidth":
                      f = e.get_width() / 2;
                      break;
                    case "height":
                      f = e.get_height();
                      break;
                    case "right":
                      f = e.x + e.get_width();
                      break;
                    case "top":
                    case "up":
                    case "y":
                      f = e.y;
                      break;
                    case "width":
                      f = e.get_width();
                      break;
                    case "left":
                    case "x":
                      f = e.x;
                  }
                break;
              default:
                switch (d) {
                  case "bottom":
                  case "down":
                    f = e.y + e.get_height();
                    break;
                  case "centerx":
                    f = e.x + e.get_width() / 2;
                    break;
                  case "centery":
                    f = e.y + e.get_height() / 2;
                    break;
                  case "halfheight":
                    f = e.get_height() / 2;
                    break;
                  case "halfwidth":
                    f = e.get_width() / 2;
                    break;
                  case "height":
                    f = e.get_height();
                    break;
                  case "right":
                    f = e.x + e.get_width();
                    break;
                  case "top":
                  case "up":
                  case "y":
                    f = e.y;
                    break;
                  case "width":
                    f = e.get_width();
                    break;
                  case "left":
                  case "x":
                    f = e.x;
                }
            }
          return f;
        },
        _loadCursor: function (a) {
          if (Pa.resolve(a, "list")) {
            null == this.cursorLists && (this.cursorLists = []);
            var b = 0;
            for (a = Ub.resolve(a, "list"); b < a.length; ) {
              var c = a[b];
              ++b;
              c = E.xml_str(c, "ids").split(",");
              if (null != c && 0 < c.length) {
                for (var d = [], e = 0; e < c.length; ) {
                  var f = c[e];
                  ++e;
                  f = this.getAsset(f);
                  null != f && d.push(f);
                }
                this.cursorLists.push(d);
              }
            }
          }
        },
        _loadPosition: function (a, b) {
          var c = this._loadWidth(a, 0, "x"),
            d = this._loadHeight(a, 0, "y"),
            e = E.xml_bool(a, "center_x"),
            f = E.xml_bool(a, "center_y"),
            k = E.xml_str(a, "center_on"),
            r = E.xml_str(a, "center_on_x"),
            l = E.xml_str(a, "center_on_y"),
            J = "",
            u = "",
            m = 0,
            h = 0,
            p = "",
            n = "";
          Pa.resolve(a, "anchor") &&
            ((J = E.xml_str(ub.resolve(a, "anchor"), "x")),
            (u = E.xml_str(ub.resolve(a, "anchor"), "y")),
            (p = this.getRound(ub.resolve(a, "anchor"))),
            (m = this._getAnchorPos(b, "x", J)),
            (h = this._getAnchorPos(b, "y", u)),
            (m = this.doRound(m, p)),
            (h = this.doRound(h, p)),
            (p = E.xml_str(ub.resolve(a, "anchor"), "x-flush", !0)),
            (n = E.xml_str(ub.resolve(a, "anchor"), "y-flush", !0)));
          if ("" != J || "" != u) {
            switch (p) {
              case "center":
                m -= b.get_width() / 2;
                break;
              case "right":
                m -= b.get_width();
            }
            switch (n) {
              case "bottom":
              case "down":
                h -= b.get_height();
                break;
              case "center":
                h -= b.get_height() / 2;
            }
            "" != J && b.set_x(m);
            "" != u && b.set_y(h);
          }
          if (e || f)
            (a = e),
              null == f && (f = !0),
              null == a && (a = !0),
              a && b.set_x((g.width - b.get_width()) / 2),
              f && b.set_y((g.height - b.get_height()) / 2);
          "" != k
            ? ((k = this.getAsset(k)),
              null != k &&
                ((k = za.__cast(k, ca)),
                (r = za.__cast(b, ca)),
                r.set_x(k.x + (k.get_width() - r.get_width()) / 2),
                r.set_y(k.y + (k.get_height() - r.get_height()) / 2)))
            : ("" != r &&
                ((k = this.getAsset(r)),
                null != k &&
                  ((k = za.__cast(k, ca)),
                  (r = za.__cast(b, ca)),
                  (f = !0),
                  (a = !1),
                  null == a && (a = !0),
                  null == f && (f = !0),
                  f && r.set_x(k.x + (k.get_width() - r.get_width()) / 2),
                  a && r.set_y(k.y + (k.get_height() - r.get_height()) / 2))),
              "" != l &&
                ((k = this.getAsset(l)),
                null != k &&
                  ((k = za.__cast(k, ca)),
                  (r = za.__cast(b, ca)),
                  (f = !1),
                  (a = !0),
                  null == a && (a = !0),
                  null == f && (f = !0),
                  f && r.set_x(k.x + (k.get_width() - r.get_width()) / 2),
                  a && r.set_y(k.y + (k.get_height() - r.get_height()) / 2))));
          a = c;
          f = d;
          null == f && (f = 0);
          null == a && (a = 0);
          b.set_x(b.x + a);
          b.set_y(b.y + f);
        },
        _loadBorder: function (a) {
          var b = Te.fromXML(a),
            c = this.getRound(a, "floor");
          a = this._getDataSize("h", E.xml_str(a, "border_size"), 1);
          c = this.doRound(a, c) | 0;
          b.size = c;
          return b;
        },
        _loadColor: function (a, b, c) {
          null == c && (c = -1);
          null == b && (b = "color");
          var d = E.xml_str(a, b);
          if ("" == d) {
            if (a.nodeType != oa.Element)
              throw N.thrown(
                "Bad node type, expected Element but found " +
                  (null == a.nodeType ? "null" : bb.toString(a.nodeType))
              );
            b = a.nodeName == b;
          } else b = !1;
          b && (d = E.xml_str(a, "value"));
          a = c;
          if ("" != d && ((a = ob.fromString(d)), null == a))
            throw N.thrown("U.parseHex() unable to parse hex String " + d);
          return a;
        },
        _loadFontDef: function (a) {
          var b = kd.fromXML(a);
          a = this._loadHeight(a, 8, "size") | 0;
          b.format.size = Ea.fontSize(b.file, a);
          b.set_size(a);
          return b;
        },
        _loadFontFace: function (a) {
          var b = E.xml_str(a, "font");
          a = E.xml_str(a, "style");
          var c = null;
          "" != b && (c = Ea.font(b, a));
          return c;
        },
        _onFinishLoad: function () {
          null != this._ptr && this._ptr.getEvent("finish_load", this, null);
        },
        getText: function (a, b, c, d) {
          null == d && (d = "");
          null == c && (c = !0);
          null == b && (b = "data");
          return null != this._ptr_tongue
            ? ((a = this._ptr_tongue.get(a, b, c)), this.formatFromCode(a, d))
            : null != this.getTextFallback
            ? ((a = this.getTextFallback(a, b, c)), this.formatFromCode(a, d))
            : a;
        },
        formatFromCode: function (a, b) {
          switch (b) {
            case "fu":
              return E.FU(a);
            case "fu_":
              return E.FU_(a);
            case "l":
              return a.toLowerCase();
            case "u":
              return a.toUpperCase();
          }
          return a;
        },
        formatButtonText: function (a, b) {
          if (null != a && Pa.resolve(a, "text")) {
            a = ub.resolve(a, "text");
            var c = E.xml_str(a, "use_def", !0),
              d = null;
            "" != c && (d = this.getDefinition(c));
            var e = Ea.consolidateData(a, d),
              f = this._loadFontFace(e),
              k = this._loadHeight(e, 8, "size", "floor") | 0;
            a = this._loadColor(e);
            var g = E.xml_f(e, "width"),
              l = this._loadBorder(e),
              J = E.xml_str(e, "align", !0);
            "" == J && (J = null);
            var u = (c = null),
              m = null;
            if (0 == b instanceof tb) {
              if ("" == J || null == J) J = "center";
            } else (b = b.button), (J = "left");
            if (null != b) {
              if (b instanceof gd) (u = b), (c = u.label);
              else if (b instanceof Be)
                if (((m = b), m.label instanceof W)) c = m.label;
                else if (m.label instanceof wa) {
                  d = 0;
                  for (var h = m.label.group.members; d < h.length; ) {
                    var p = h[d];
                    ++d;
                    if (p instanceof W) {
                      c = p;
                      break;
                    }
                  }
                }
              b.up_color = a;
              b.down_color = 0;
              b.over_color = 0;
            }
            null != c &&
              (0 != g && (c.set_width(g), c.resetHelpers()),
              null != u
                ? u.setLabelFormat(f, k, a, J)
                : c.setFormat(f, k, a, J),
              c.set_borderStyle(l.style),
              c.set_borderColor(l.color),
              c.set_borderSize(l.size),
              c.set_borderQuality(l.quality),
              c instanceof Ed && c.drawFrame(),
              null != u && u.autoCenterLabel(),
              null != m && m.autoCenterLabel());
            d = 0;
            for (h = Ub.resolve(e, "color"); d < h.length; )
              switch (
                ((k = h[d]),
                ++d,
                (a = this._loadColor(k)),
                (e = E.xml_bool(k, "visible", !0)),
                (f = E.xml_name(k)),
                (k = E.xml_bool(k, "toggle")),
                f)
              ) {
                case "active":
                case "hilight":
                case "hover":
                case "over":
                  k
                    ? ((b.over_toggle_color = a), (b.over_toggle_visible = e))
                    : ((b.over_color = a), (b.over_visible = e));
                  break;
                case "down":
                case "pressed":
                case "pushed":
                  k
                    ? ((b.down_toggle_color = a), (b.down_toggle_visible = e))
                    : ((b.down_color = a), (b.down_visible = e));
                  break;
                case "":
                case "inactive":
                case "normal":
                case "up":
                  k
                    ? ((b.up_toggle_color = a), (b.up_toggle_visible = e))
                    : ((b.up_color = a), (b.up_visible = e));
              }
            0 == b.over_color && (b.over_color = b.up_color);
            0 == b.down_color && (b.down_color = b.over_color);
            0 == b.up_toggle_color && (b.up_toggle_color = b.up_color);
            0 == b.over_toggle_color && (b.over_toggle_color = b.over_color);
            0 == b.down_toggle_color && (b.down_toggle_color = b.down_color);
            null != c && (c.set_visible(b.up_visible), c.set_color(b.up_color));
            return c;
          }
          return null;
        },
        __class__: Ea,
        __properties__: q(Na.prototype.__properties__, {
          set_focus: "set_focus",
        }),
      });
      var vh = (w["flixel.addons.ui.Rounding"] = {
        __ename__: "flixel.addons.ui.Rounding",
        __constructs__: null,
        Floor: {
          _hx_name: "Floor",
          _hx_index: 0,
          __enum__: "flixel.addons.ui.Rounding",
          toString: p,
        },
        Ceil: {
          _hx_name: "Ceil",
          _hx_index: 1,
          __enum__: "flixel.addons.ui.Rounding",
          toString: p,
        },
        Round: {
          _hx_name: "Round",
          _hx_index: 2,
          __enum__: "flixel.addons.ui.Rounding",
          toString: p,
        },
        None: {
          _hx_name: "None",
          _hx_index: 3,
          __enum__: "flixel.addons.ui.Rounding",
          toString: p,
        },
      });
      vh.__constructs__ = [vh.Floor, vh.Ceil, vh.Round, vh.None];
      var Wc = function () {};
      h["flixel.addons.ui.interfaces.IResizable"] = Wc;
      Wc.__name__ = "flixel.addons.ui.interfaces.IResizable";
      Wc.__isInterface__ = !0;
      Wc.prototype = {
        __class__: Wc,
        __properties__: { get_height: "get_height", get_width: "get_width" },
      };
      var nc = function (a, b, c) {
        null == b && (b = 0);
        null == a && (a = 0);
        this._originalKey = "";
        this.resize_ratio_axis = 1;
        this.ptr_owner = null;
        F.call(this, a, b, c);
      };
      h["flixel.addons.ui.FlxUISprite"] = nc;
      nc.__name__ = "flixel.addons.ui.FlxUISprite";
      nc.__interfaces__ = [Wc, fd];
      nc.__super__ = F;
      nc.prototype = q(F.prototype, {
        set_resize_ratio: function (a) {
          return (this.resize_ratio = a);
        },
        set_resize_point: function (a) {
          if (null != a) {
            var b = 0,
              c = 0;
            null == c && (c = 0);
            null == b && (b = 0);
            b = ba.pool.get().set(b, c);
            b._inPool = !1;
            this.resize_point = b;
            this.resize_point.set_x(a.x);
            this.resize_point.set_y(a.y);
          }
          return this.resize_point;
        },
        resize: function (a, b) {
          var c = this.get_width(),
            d = this.get_height();
          0 < this.resize_ratio &&
            1e-4 < Math.abs(a / b - this.resize_ratio) &&
            (1 == this.resize_ratio_axis
              ? (b = (1 / this.resize_ratio) * a)
              : (a = (1 / this.resize_ratio) * b));
          "" != this._originalKey &&
            null != this._originalKey &&
            ((a = E.loadScaledImage(this._originalKey, a, b)),
            "" != a && null != a && this.loadFromScaledGraphic(a));
          c = this.get_width() - c;
          d = this.get_height() - d;
          null != this.resize_point &&
            ((d *= this.resize_point.y),
            this.set_x(this.x - c * this.resize_point.x),
            this.set_y(this.y - d));
        },
        loadGraphic: function (a, b, c, d, e, f) {
          null == e && (e = !1);
          null == d && (d = 0);
          null == c && (c = 0);
          null == b && (b = !1);
          a = F.prototype.loadGraphic.call(this, a, b, c, d, e, f);
          this._originalKey = this.graphic.assetsKey;
          null == this._originalKey && (this._originalKey = this.graphic.key);
          return a;
        },
        destroy: function () {
          this.ptr_owner = null;
          F.prototype.destroy.call(this);
        },
        loadFromScaledGraphic: function (a, b, c, d, e, f) {
          null == e && (e = !1);
          null == d && (d = 0);
          null == c && (c = 0);
          null == b && (b = !1);
          F.prototype.loadGraphic.call(this, a, b, c, d, e, f);
        },
        __class__: nc,
        __properties__: q(F.prototype.__properties__, {
          set_resize_point: "set_resize_point",
          set_resize_ratio: "set_resize_ratio",
        }),
      });
      var gb = function (a, b) {
        null == b && (b = 0);
        null == a && (a = 0);
        this.x = a;
        this.y = b;
      };
      h["openfl.geom.Point"] = gb;
      gb.__name__ = "openfl.geom.Point";
      gb.prototype = {
        copyFrom: function (a) {
          this.x = a.x;
          this.y = a.y;
        },
        offset: function (a, b) {
          this.x += a;
          this.y += b;
        },
        setTo: function (a, b) {
          this.x = a;
          this.y = b;
        },
        __toLimeVector2: function () {
          null == gb.__limeVector2 && (gb.__limeVector2 = new Xh());
          var a = gb.__limeVector2;
          a.x = this.x;
          a.y = this.y;
          return gb.__limeVector2;
        },
        __class__: gb,
      };
      var ha = function (a, b, c, d) {
        null == d && (d = 0);
        null == c && (c = 0);
        null == b && (b = 0);
        null == a && (a = 0);
        this.x = a;
        this.y = b;
        this.width = c;
        this.height = d;
      };
      h["openfl.geom.Rectangle"] = ha;
      ha.__name__ = "openfl.geom.Rectangle";
      ha.prototype = {
        clone: function () {
          return new ha(this.x, this.y, this.width, this.height);
        },
        contains: function (a, b) {
          return a >= this.x && b >= this.y && a < this.get_right()
            ? b < this.get_bottom()
            : !1;
        },
        containsPoint: function (a) {
          return this.contains(a.x, a.y);
        },
        copyFrom: function (a) {
          this.x = a.x;
          this.y = a.y;
          this.width = a.width;
          this.height = a.height;
        },
        equals: function (a) {
          return a == this
            ? !0
            : null != a &&
              this.x == a.x &&
              this.y == a.y &&
              this.width == a.width
            ? this.height == a.height
            : !1;
        },
        inflate: function (a, b) {
          this.x -= a;
          this.width += 2 * a;
          this.y -= b;
          this.height += 2 * b;
        },
        offset: function (a, b) {
          this.x += a;
          this.y += b;
        },
        setTo: function (a, b, c, d) {
          this.x = a;
          this.y = b;
          this.width = c;
          this.height = d;
        },
        __contract: function (a, b, c, d) {
          if (0 != this.width || 0 != this.height) {
            var e = 0,
              f = 0,
              k = 0,
              g = 0;
            this.x < a && (e = a - this.x);
            this.y < b && (f = b - this.y);
            this.get_right() > a + c && (k = a + c - this.get_right());
            this.get_bottom() > b + d && (g = b + d - this.get_bottom());
            this.x += e;
            this.y += f;
            this.width += k - e;
            this.height += g - f;
          }
        },
        __expand: function (a, b, c, d) {
          if (0 == this.width && 0 == this.height)
            (this.x = a), (this.y = b), (this.width = c), (this.height = d);
          else {
            var e = this.get_right(),
              f = this.get_bottom();
            this.x > a && ((this.x = a), (this.width = e - a));
            this.y > b && ((this.y = b), (this.height = f - b));
            e < a + c && (this.width = a + c - this.x);
            f < b + d && (this.height = b + d - this.y);
          }
        },
        __toLimeRectangle: function () {
          null == ha.__limeRectangle && (ha.__limeRectangle = new Fe());
          ha.__limeRectangle.setTo(this.x, this.y, this.width, this.height);
          return ha.__limeRectangle;
        },
        __transform: function (a, b) {
          var c = b.a * this.x + b.c * this.y,
            d = c,
            e = b.b * this.x + b.d * this.y,
            f = e,
            k = b.a * (this.x + this.width) + b.c * this.y,
            g = b.b * (this.x + this.width) + b.d * this.y;
          k < c && (c = k);
          g < e && (e = g);
          k > d && (d = k);
          g > f && (f = g);
          k = b.a * (this.x + this.width) + b.c * (this.y + this.height);
          g = b.b * (this.x + this.width) + b.d * (this.y + this.height);
          k < c && (c = k);
          g < e && (e = g);
          k > d && (d = k);
          g > f && (f = g);
          k = b.a * this.x + b.c * (this.y + this.height);
          g = b.b * this.x + b.d * (this.y + this.height);
          k < c && (c = k);
          g < e && (e = g);
          k > d && (d = k);
          g > f && (f = g);
          a.setTo(c + b.tx, e + b.ty, d - c, f - e);
        },
        get_bottom: function () {
          return this.y + this.height;
        },
        get_left: function () {
          return this.x;
        },
        get_right: function () {
          return this.x + this.width;
        },
        get_top: function () {
          return this.y;
        },
        __class__: ha,
        __properties__: {
          get_top: "get_top",
          get_right: "get_right",
          get_left: "get_left",
          get_bottom: "get_bottom",
        },
      };
      var ea = function (a, b, c, d, e, f, k, g, l, J, u, m, h) {
        null == h && (h = -1);
        null == m && (m = !1);
        null == u && (u = 1);
        null == l && (l = -1);
        null == g && (g = "");
        null == k && (k = !1);
        null == f && (f = 0);
        this._asset_id = "";
        this._smooth = !1;
        this._tile = 0;
        this._slice9 = null;
        this.paintScale9_id = "";
        nc.call(this, a, b, null);
        this.set_color(h);
        this._slice9 = e;
        this._tile = f;
        this._smooth = k;
        this._asset_id = "";
        null == c && (c = "flixel/flixel-ui/img/chrome.png");
        "string" == typeof c
          ? ((this._asset_id = c), (this._raw_pixels = null))
          : c instanceof S
          ? ((this._asset_id = g), (this._raw_pixels = c))
          : c instanceof Xb &&
            ((a = c), (this._asset_id = a.key), (this._raw_pixels = a.bitmap));
        this.set_resize_ratio(l);
        this.resize_ratio_axis = u;
        null != J && this.set_resize_point(J);
        m
          ? ((d = E.applyResize(
              this.resize_ratio,
              this.resize_ratio_axis,
              d.width,
              d.height
            )),
            this.set_width(d.x),
            this.set_height(d.y))
          : this.resize(d.width, d.height);
      };
      h["flixel.addons.ui.FlxUI9SliceSprite"] = ea;
      ea.__name__ = "flixel.addons.ui.FlxUI9SliceSprite";
      ea.__interfaces__ = [fd, Wc];
      ea.paintScale9 = function (a, b, c, d, e, f, k) {
        null == f && (f = !1);
        null == e && (e = 0);
        if (null != c) {
          if (null == k) {
            var r = E.getBmp(b);
            if (null != r) {
              var l = r.width;
              r = r.height;
            } else (r = g.bitmap._cache.h[b]), (l = r.width), (r = r.height);
          } else (l = k.width), (r = k.height);
          var J = c[0],
            u = c[1],
            m = c[2],
            h = c[3];
          if (null == ea._staticRects) {
            ea._staticRects = new Q();
            var p = ea._staticRects,
              n = Ga._pool.get(),
              q = 0,
              z = 0,
              t = 0,
              w = 0;
            null == w && (w = 0);
            null == t && (t = 0);
            null == z && (z = 0);
            null == q && (q = 0);
            n.x = q;
            n.y = z;
            n.width = t;
            n.height = w;
            n._inPool = !1;
            p.h["top.left"] = n;
            p = ea._staticRects;
            n = Ga._pool.get();
            w = t = z = q = 0;
            null == w && (w = 0);
            null == t && (t = 0);
            null == z && (z = 0);
            null == q && (q = 0);
            n.x = q;
            n.y = z;
            n.width = t;
            n.height = w;
            n._inPool = !1;
            p.h.top = n;
            p = ea._staticRects;
            n = Ga._pool.get();
            w = t = z = q = 0;
            null == w && (w = 0);
            null == t && (t = 0);
            null == z && (z = 0);
            null == q && (q = 0);
            n.x = q;
            n.y = z;
            n.width = t;
            n.height = w;
            n._inPool = !1;
            p.h["top.right"] = n;
            p = ea._staticRects;
            n = Ga._pool.get();
            w = t = z = q = 0;
            null == w && (w = 0);
            null == t && (t = 0);
            null == z && (z = 0);
            null == q && (q = 0);
            n.x = q;
            n.y = z;
            n.width = t;
            n.height = w;
            n._inPool = !1;
            p.h.left = n;
            p = ea._staticRects;
            n = Ga._pool.get();
            w = t = z = q = 0;
            null == w && (w = 0);
            null == t && (t = 0);
            null == z && (z = 0);
            null == q && (q = 0);
            n.x = q;
            n.y = z;
            n.width = t;
            n.height = w;
            n._inPool = !1;
            p.h.middle = n;
            p = ea._staticRects;
            n = Ga._pool.get();
            w = t = z = q = 0;
            null == w && (w = 0);
            null == t && (t = 0);
            null == z && (z = 0);
            null == q && (q = 0);
            n.x = q;
            n.y = z;
            n.width = t;
            n.height = w;
            n._inPool = !1;
            p.h.right = n;
            p = ea._staticRects;
            n = Ga._pool.get();
            w = t = z = q = 0;
            null == w && (w = 0);
            null == t && (t = 0);
            null == z && (z = 0);
            null == q && (q = 0);
            n.x = q;
            n.y = z;
            n.width = t;
            n.height = w;
            n._inPool = !1;
            p.h["bottom.left"] = n;
            p = ea._staticRects;
            n = Ga._pool.get();
            w = t = z = q = 0;
            null == w && (w = 0);
            null == t && (t = 0);
            null == z && (z = 0);
            null == q && (q = 0);
            n.x = q;
            n.y = z;
            n.width = t;
            n.height = w;
            n._inPool = !1;
            p.h.bottom = n;
            p = ea._staticRects;
            n = Ga._pool.get();
            w = t = z = q = 0;
            null == w && (w = 0);
            null == t && (t = 0);
            null == z && (z = 0);
            null == q && (q = 0);
            n.x = q;
            n.y = z;
            n.width = t;
            n.height = w;
            n._inPool = !1;
            p.h["bottom.right"] = n;
          }
          n = ea._staticRects.h["top.left"];
          z = q = 0;
          t = J;
          w = u;
          null == w && (w = 0);
          null == t && (t = 0);
          null == z && (z = 0);
          null == q && (q = 0);
          n.x = q;
          n.y = z;
          n.width = t;
          n.height = w;
          n = ea._staticRects.h.top;
          q = J;
          z = 0;
          t = m - J;
          w = u;
          null == w && (w = 0);
          null == t && (t = 0);
          null == z && (z = 0);
          null == q && (q = 0);
          n.x = q;
          n.y = z;
          n.width = t;
          n.height = w;
          n = ea._staticRects.h["top.right"];
          q = m;
          z = 0;
          t = l - m;
          w = u;
          null == w && (w = 0);
          null == t && (t = 0);
          null == z && (z = 0);
          null == q && (q = 0);
          n.x = q;
          n.y = z;
          n.width = t;
          n.height = w;
          n = ea._staticRects.h.left;
          q = 0;
          z = u;
          t = J;
          w = h - u;
          null == w && (w = 0);
          null == t && (t = 0);
          null == z && (z = 0);
          null == q && (q = 0);
          n.x = q;
          n.y = z;
          n.width = t;
          n.height = w;
          n = ea._staticRects.h.middle;
          q = J;
          z = u;
          t = m - J;
          w = h - u;
          null == w && (w = 0);
          null == t && (t = 0);
          null == z && (z = 0);
          null == q && (q = 0);
          n.x = q;
          n.y = z;
          n.width = t;
          n.height = w;
          n = ea._staticRects.h.right;
          q = m;
          z = u;
          t = l - m;
          w = h - u;
          null == w && (w = 0);
          null == t && (t = 0);
          null == z && (z = 0);
          null == q && (q = 0);
          n.x = q;
          n.y = z;
          n.width = t;
          n.height = w;
          n = ea._staticRects.h["bottom.left"];
          q = 0;
          z = h;
          t = J;
          w = r - h;
          null == w && (w = 0);
          null == t && (t = 0);
          null == z && (z = 0);
          null == q && (q = 0);
          n.x = q;
          n.y = z;
          n.width = t;
          n.height = w;
          n = ea._staticRects.h.bottom;
          q = J;
          z = h;
          t = m - J;
          w = r - h;
          null == w && (w = 0);
          null == t && (t = 0);
          null == z && (z = 0);
          null == q && (q = 0);
          n.x = q;
          n.y = z;
          n.width = t;
          n.height = w;
          n = ea._staticRects.h["bottom.right"];
          q = m;
          z = h;
          t = l - m;
          w = r - h;
          null == w && (w = 0);
          null == t && (t = 0);
          null == z && (z = 0);
          null == q && (q = 0);
          n.x = q;
          n.y = z;
          n.width = t;
          n.height = w;
          null == ea.cacheCounter && (ea.cacheCounter = new Q());
          c = ea.makePaintScale9Id(b, c, d);
          l = ea.cacheCounter.h[c];
          if (null == l) {
            l = { useCount: 0, subKeys: [] };
            for (r = 0; 9 > r; ) {
              switch (r++) {
                case 0:
                  n = ea._staticRects.h["top.left"];
                  break;
                case 1:
                  n = ea._staticRects.h.top;
                  break;
                case 2:
                  n = ea._staticRects.h["top.right"];
                  break;
                case 3:
                  n = ea._staticRects.h.left;
                  break;
                case 4:
                  n = ea._staticRects.h.middle;
                  break;
                case 5:
                  n = ea._staticRects.h.right;
                  break;
                case 6:
                  n = ea._staticRects.h["bottom.left"];
                  break;
                case 7:
                  n = ea._staticRects.h.bottom;
                  break;
                case 8:
                  n = ea._staticRects.h["bottom.right"];
                  break;
                default:
                  n = ea._staticRects.h["top.left"];
              }
              l.subKeys.push(
                b + "_" + n.x + "_" + n.y + "_" + n.width + "_" + n.height + "_"
              );
            }
            ea.cacheCounter.h[c] = l;
          }
          ea.paintCompoundBitmap(a, b, ea._staticRects, d, e, f, k);
          return c;
        }
        return "";
      };
      ea.makePaintScale9Id = function (a, b, c) {
        a = a + "_" + b.join(",") + "_";
        b = c.x;
        var d = Ic._pool.get();
        d.label = "x";
        d.value = b;
        b = c.y;
        var e = Ic._pool.get();
        e.label = "y";
        e.value = b;
        b = c.width;
        var f = Ic._pool.get();
        f.label = "w";
        f.value = b;
        b = c.height;
        c = Ic._pool.get();
        c.label = "h";
        c.value = b;
        return a + Bb.getDebugString([d, e, f, c]);
      };
      ea.paintCompoundBitmap = function (a, b, c, d, e, f, k) {
        null == f && (f = !1);
        null == e && (e = 0);
        d.x |= 0;
        d.y |= 0;
        d.width |= 0;
        d.height |= 0;
        var g = c.h["top.left"];
        if (null != g) {
          var l = ea._staticFlxRect2,
            J = 0,
            u = 0,
            m = g.width,
            h = g.height;
          null == h && (h = 0);
          null == m && (m = 0);
          null == u && (u = 0);
          null == J && (J = 0);
          l.x = J;
          l.y = u;
          l.width = m;
          l.height = h;
          ea.paintBitmapSection(a, b, g, ea._staticFlxRect2, null, 0, f, k);
        }
        var p = c.h["top.right"];
        null != p &&
          ((l = ea._staticFlxRect2),
          (J = d.width - p.width),
          (u = 0),
          (m = p.width),
          (h = p.height),
          null == h && (h = 0),
          null == m && (m = 0),
          null == u && (u = 0),
          null == J && (J = 0),
          (l.x = J),
          (l.y = u),
          (l.width = m),
          (l.height = h),
          ea.paintBitmapSection(a, b, p, ea._staticFlxRect2, null, 0, f, k));
        var n = c.h.top;
        null != n &&
          ((l = ea._staticFlxRect2),
          (J = g.width),
          (u = 0),
          (m = d.width - g.width - p.width),
          (h = n.height),
          null == h && (h = 0),
          null == m && (m = 0),
          null == u && (u = 0),
          null == J && (J = 0),
          (l.x = J),
          (l.y = u),
          (l.width = m),
          (l.height = h),
          ea.paintBitmapSection(
            a,
            b,
            n,
            ea._staticFlxRect2,
            null,
            e & 16,
            f,
            k
          ));
        var q = c.h["bottom.left"];
        null != q &&
          ((l = ea._staticFlxRect2),
          (J = 0),
          (u = d.height - q.height),
          (m = q.width),
          (h = q.height),
          null == h && (h = 0),
          null == m && (m = 0),
          null == u && (u = 0),
          null == J && (J = 0),
          (l.x = J),
          (l.y = u),
          (l.width = m),
          (l.height = h),
          ea.paintBitmapSection(a, b, q, ea._staticFlxRect2, null, 0, f, k));
        var z = c.h["bottom.right"];
        null != z &&
          ((l = ea._staticFlxRect2),
          (J = d.width - z.width),
          (u = d.height - z.height),
          (m = z.width),
          (h = z.height),
          null == h && (h = 0),
          null == m && (m = 0),
          null == u && (u = 0),
          null == J && (J = 0),
          (l.x = J),
          (l.y = u),
          (l.width = m),
          (l.height = h),
          ea.paintBitmapSection(a, b, z, ea._staticFlxRect2, null, 0, f, k));
        var t = c.h.bottom;
        null != t &&
          ((l = ea._staticFlxRect2),
          (J = q.width),
          (u = d.height - t.height),
          (m = d.width - q.width - z.width),
          (h = t.height),
          null == h && (h = 0),
          null == m && (m = 0),
          null == u && (u = 0),
          null == J && (J = 0),
          (l.x = J),
          (l.y = u),
          (l.width = m),
          (l.height = h),
          ea.paintBitmapSection(
            a,
            b,
            t,
            ea._staticFlxRect2,
            null,
            e & 16,
            f,
            k
          ));
        z = c.h.left;
        null != z &&
          ((l = ea._staticFlxRect2),
          (J = 0),
          (u = g.height),
          (m = z.width),
          (h = d.height - g.height - q.height),
          null == h && (h = 0),
          null == m && (m = 0),
          null == u && (u = 0),
          null == J && (J = 0),
          (l.x = J),
          (l.y = u),
          (l.width = m),
          (l.height = h),
          ea.paintBitmapSection(
            a,
            b,
            z,
            ea._staticFlxRect2,
            null,
            e & 1,
            f,
            k
          ));
        var w = c.h.right;
        null != w &&
          ((l = ea._staticFlxRect2),
          (J = d.width - w.width),
          (u = p.height),
          (m = w.width),
          (h = d.height - g.height - q.height),
          null == h && (h = 0),
          null == m && (m = 0),
          null == u && (u = 0),
          null == J && (J = 0),
          (l.x = J),
          (l.y = u),
          (l.width = m),
          (l.height = h),
          ea.paintBitmapSection(
            a,
            b,
            w,
            ea._staticFlxRect2,
            null,
            e & 1,
            f,
            k
          ));
        c = c.h.middle;
        null != c &&
          ((l = ea._staticFlxRect2),
          (J = z.width),
          (u = n.height),
          (m = d.width - z.width - w.width),
          (h = d.height - n.height - t.height),
          null == h && (h = 0),
          null == m && (m = 0),
          null == u && (u = 0),
          null == J && (J = 0),
          (l.x = J),
          (l.y = u),
          (l.width = m),
          (l.height = h),
          ea.paintBitmapSection(a, b, c, ea._staticFlxRect2, null, e, f, k));
      };
      ea.paintBitmapSection = function (a, b, c, d, e, f, k, g) {
        null == k && (k = !1);
        null == f && (f = 0);
        null == e && (e = null != g ? g : E.getBmp(b));
        c.x |= 0;
        c.y |= 0;
        c.width |= 0;
        c.height |= 0;
        d.x |= 0;
        d.y |= 0;
        d.width |= 0;
        d.height |= 0;
        var l = (g = null);
        1 == ea.useSectionCache &&
          null != b &&
          (null == ea.sectionCache && (ea.sectionCache = new Q()),
          (l =
            b + "_" + c.x + "_" + c.y + "_" + c.width + "_" + c.height + "_"),
          (g = ea.sectionCache.h[l]));
        null == g &&
          ((g = new S(c.width | 0, c.height | 0, !0, 16777215)),
          (ea._staticRect2.x = c.x),
          (ea._staticRect2.y = c.y),
          (ea._staticRect2.width = c.width),
          (ea._staticRect2.height = c.height),
          g.copyPixels(e, ea._staticRect2, ea._staticPointZero),
          1 == ea.useSectionCache && null != l && (ea.sectionCache.h[l] = g),
          ea.bitmapsCreated++);
        0 < d.width &&
          0 < d.height &&
          ((ea._staticRect2.x = d.x),
          (ea._staticRect2.y = d.y),
          (ea._staticRect2.width = d.width),
          (ea._staticRect2.height = d.height),
          ea.bitmapFillRect(a, ea._staticRect2, g, f, k));
      };
      ea.bitmapFillRect = function (a, b, c, d, e) {
        null == e && (e = !1);
        null == d && (d = 0);
        var f = new S(b.width | 0, b.height | 0, !0, 0);
        ea._staticMatrix.identity();
        ea._staticRect.x = 0;
        ea._staticRect.y = 0;
        ea._staticRect.width = c.width;
        ea._staticRect.height = c.height;
        0 == (d & 16) &&
          (ea._staticMatrix.scale(b.width / c.width, 1),
          (ea._staticRect.width = b.width));
        0 == (d & 1) &&
          (ea._staticMatrix.scale(1, b.height / c.height),
          (ea._staticRect.height = b.height));
        c.width == b.width && c.height == b.height
          ? ((ea._staticPoint.x = 0),
            (ea._staticPoint.y = 0),
            f.copyPixels(c, c.rect, ea._staticPoint))
          : e
          ? f.draw(c, ea._staticMatrix, null, null, null, !0)
          : f.draw(c, ea._staticMatrix, null, null, null, !1);
        if (0 != d) {
          if (16 == (d & 16))
            for (
              ea._staticPoint.x = 0, ea._staticPoint.y = 0;
              ea._staticPoint.x < b.width;

            )
              (ea._staticPoint.x += ea._staticRect.width),
                f.copyPixels(f, ea._staticRect, ea._staticPoint);
          if (1 == (d & 1))
            for (
              ea._staticPoint.x = 0,
                ea._staticPoint.y = 0,
                ea._staticRect.width = f.width;
              ea._staticPoint.y < b.height;

            )
              (ea._staticPoint.y += ea._staticRect.height),
                f.copyPixels(f, ea._staticRect, ea._staticPoint);
        }
        ea._staticPoint.x = b.x;
        ea._staticPoint.y = b.y;
        a.copyPixels(f, f.rect, ea._staticPoint);
        V.dispose(f);
      };
      ea.__super__ = nc;
      ea.prototype = q(nc.prototype, {
        destroy: function () {
          this.noLongerUsingCachedID(this.paintScale9_id);
          nc.prototype.destroy.call(this);
        },
        resize: function (a, b) {
          1 > (a | 0) && (a = 1);
          1 > (b | 0) && (b = 1);
          var c = this.get_width(),
            d = this.get_height(),
            e = E.applyResize(this.resize_ratio, this.resize_ratio_axis, a, b);
          a = e.x;
          b = e.y;
          var f = e.x | 0,
            k = e.y | 0;
          if (null == this._slice9 || 4 != this._slice9.length)
            null != this._slice9 &&
              g.log.advanced(
                "Invalid 9slice array, expected a length of 4",
                Ja.WARNING,
                !0
              ),
              (this._slice9 = [4, 4, 7, 7]);
          e =
            this._asset_id +
            "_" +
            this._slice9.join(",") +
            "_" +
            f +
            "x" +
            k +
            "_" +
            this._tile +
            "_" +
            M.string(this._smooth);
          null != g.bitmap._cache.h[e]
            ? this.loadGraphic(e, !1, f, k)
            : ((f = new S(a | 0, b | 0)),
              (ea._staticFlxRect.x = 0),
              (ea._staticFlxRect.y = 0),
              (ea._staticFlxRect.width = a),
              (ea._staticFlxRect.height = b),
              (a = this.paintScale9_id),
              ea.makePaintScale9Id(
                this._asset_id,
                this._slice9,
                ea._staticFlxRect
              ) != a &&
                ((this.paintScale9_id = ea.paintScale9(
                  f,
                  this._asset_id,
                  this._slice9,
                  ea._staticFlxRect,
                  this._tile,
                  this._smooth,
                  this._raw_pixels
                )),
                ea.cacheCounter.h[this.paintScale9_id].useCount++,
                this.noLongerUsingCachedID(a)),
              this.loadGraphic(f, !1, f.width, f.height, !1, e));
          c = this.get_width() - c;
          d = this.get_height() - d;
          null != this.resize_point &&
            ((d *= this.resize_point.y),
            this.set_x(this.x - c * this.resize_point.x),
            this.set_y(this.y - d));
        },
        noLongerUsingCachedID: function (a) {
          if (Object.prototype.hasOwnProperty.call(ea.cacheCounter.h, a)) {
            var b = ea.cacheCounter.h[a];
            b.useCount--;
            0 >= b.useCount && this.purgeSections(a);
          }
        },
        purgeSections: function (a) {
          var b = ea.cacheCounter.h[a];
          if (null != b) {
            for (var c = 0, d = b.subKeys; c < d.length; ) {
              var e = d[c];
              ++c;
              var f = ea.sectionCache;
              Object.prototype.hasOwnProperty.call(f.h, e) && delete f.h[e];
            }
            b.subKeys = null;
            f = ea.cacheCounter;
            Object.prototype.hasOwnProperty.call(f.h, a) && delete f.h[a];
          }
        },
        __class__: ea,
      });
      var Xf = function (a, b, c, d, e, f, k, r, l, h) {
        null == h && (h = !1);
        null == l && (l = 100);
        null == r && (r = 0);
        null == k && (k = "");
        null == e && (e = 10);
        null == d && (d = 100);
        null == b && (b = 0);
        null == a && (a = 0);
        this.numDivisions = this._maxPercent = 100;
        this.killOnEmpty = !1;
        this.fixedPosition = !0;
        F.call(this, a, b);
        null == c && (c = jd.LEFT_TO_RIGHT);
        this.barWidth = d;
        this.barHeight = e;
        this._filledBarPoint = new gb();
        this._filledBarRect = new ha();
        if (g.renderBlit)
          (this._zeroOffset = new gb()),
            (this._emptyBarRect = new ha()),
            this.makeGraphic(d, e, 0, !0);
        else {
          a = Ga._pool.get();
          var u = (e = d = b = 0);
          null == u && (u = 0);
          null == e && (e = 0);
          null == d && (d = 0);
          null == b && (b = 0);
          a.x = b;
          a.y = d;
          a.width = e;
          a.height = u;
          a._inPool = !1;
          this._filledFlxRect = a;
        }
        null != f && ((this.parent = f), (this.parentVariable = k));
        this.set_fillDirection(c);
        this.createFilledBar(-16756480, -16714752, h);
        this.setRange(r, l);
      };
      h["flixel.ui.FlxBar"] = Xf;
      Xf.__name__ = "flixel.ui.FlxBar";
      Xf.__super__ = F;
      Xf.prototype = q(F.prototype, {
        destroy: function () {
          this.positionOffset = V.put(this.positionOffset);
          g.renderTile
            ? (this.set_frontFrames(null),
              (this._filledFlxRect = V.put(this._filledFlxRect)))
            : ((this._zeroOffset = this._emptyBarRect = null),
              (this._emptyBar = V.dispose(this._emptyBar)),
              (this._filledBar = V.dispose(this._filledBar)));
          this.filledCallback =
            this.emptyCallback =
            this.parent =
            this._filledBarPoint =
            this._filledBarRect =
              null;
          F.prototype.destroy.call(this);
        },
        setRange: function (a, b) {
          if (b <= a)
            throw N.thrown("FlxBar: max cannot be less than or equal to min");
          this.min = a;
          this.max = b;
          this.range = b - a;
          this.pct = this.range / this._maxPercent;
          this.pxPerPercent = this._fillHorizontal
            ? this.barWidth / this._maxPercent
            : this.barHeight / this._maxPercent;
          var c = this.get_value();
          isNaN(c)
            ? this.set_value(a)
            : this.set_value(Math.max(a, Math.min(this.get_value(), b)));
        },
        createFilledBar: function (a, b, c, d) {
          null == d && (d = -1);
          null == c && (c = !1);
          this.createColoredEmptyBar(a, c, d);
          this.createColoredFilledBar(b, c, d);
          return this;
        },
        createColoredEmptyBar: function (a, b, c) {
          null == c && (c = -1);
          null == b && (b = !1);
          if (g.renderTile) {
            var d =
              "empty: " +
              this.barWidth +
              "x" +
              this.barHeight +
              ":" +
              ("0x" +
                K.hex((a >> 24) & 255, 2) +
                K.hex((a >> 16) & 255, 2) +
                K.hex((a >> 8) & 255, 2) +
                K.hex(a & 255, 2));
            b &&
              (d +=
                ",border: " +
                ("0x" +
                  K.hex((c >> 24) & 255, 2) +
                  K.hex((c >> 16) & 255, 2) +
                  K.hex((c >> 8) & 255, 2) +
                  K.hex(c & 255, 2)));
            null == g.bitmap._cache.h[d] &&
              (b
                ? ((b = new S(this.barWidth, this.barHeight, !0, c)),
                  b.fillRect(
                    new ha(1, 1, this.barWidth - 2, this.barHeight - 2),
                    a
                  ))
                : (b = new S(this.barWidth, this.barHeight, !0, a)),
              g.bitmap.add(b, !1, d));
            this.set_frames(g.bitmap._cache.h[d].get_imageFrame());
          } else
            b
              ? ((this._emptyBar = new S(this.barWidth, this.barHeight, !0, c)),
                this._emptyBar.fillRect(
                  new ha(1, 1, this.barWidth - 2, this.barHeight - 2),
                  a
                ))
              : (this._emptyBar = new S(this.barWidth, this.barHeight, !0, a)),
              this._emptyBarRect.setTo(0, 0, this.barWidth, this.barHeight),
              this.updateEmptyBar();
          return this;
        },
        createColoredFilledBar: function (a, b, c) {
          null == c && (c = -1);
          null == b && (b = !1);
          if (g.renderTile) {
            var d =
              "filled: " +
              this.barWidth +
              "x" +
              this.barHeight +
              ":" +
              ("0x" +
                K.hex((a >> 24) & 255, 2) +
                K.hex((a >> 16) & 255, 2) +
                K.hex((a >> 8) & 255, 2) +
                K.hex(a & 255, 2));
            b &&
              (d +=
                ",border: " +
                ("0x" +
                  K.hex((c >> 24) & 255, 2) +
                  K.hex((c >> 16) & 255, 2) +
                  K.hex((c >> 8) & 255, 2) +
                  K.hex(c & 255, 2)));
            null == g.bitmap._cache.h[d] &&
              (b
                ? ((b = new S(this.barWidth, this.barHeight, !0, c)),
                  b.fillRect(
                    new ha(1, 1, this.barWidth - 2, this.barHeight - 2),
                    a
                  ))
                : (b = new S(this.barWidth, this.barHeight, !0, a)),
              g.bitmap.add(b, !1, d));
            this.set_frontFrames(g.bitmap._cache.h[d].get_imageFrame());
          } else
            b
              ? ((this._filledBar = new S(
                  this.barWidth,
                  this.barHeight,
                  !0,
                  c
                )),
                this._filledBar.fillRect(
                  new ha(1, 1, this.barWidth - 2, this.barHeight - 2),
                  a
                ))
              : (this._filledBar = new S(this.barWidth, this.barHeight, !0, a)),
              this._filledBarRect.setTo(0, 0, this.barWidth, this.barHeight),
              this.updateFilledBar();
          return this;
        },
        createGradientBar: function (a, b, c, d, e, f) {
          null == f && (f = -1);
          null == e && (e = !1);
          null == d && (d = 180);
          null == c && (c = 1);
          this.createGradientEmptyBar(a, c, d, e, f);
          this.createGradientFilledBar(b, c, d, e, f);
          return this;
        },
        createGradientEmptyBar: function (a, b, c, d, e) {
          null == e && (e = -1);
          null == d && (d = !1);
          null == c && (c = 180);
          null == b && (b = 1);
          if (g.renderTile) {
            for (
              var f =
                  "Gradient:" +
                  this.barWidth +
                  "x" +
                  this.barHeight +
                  ",colors:[",
                k = 0;
              k < a.length;

            ) {
              var r = a[k];
              ++k;
              f +=
                "0x" +
                K.hex((r >> 24) & 255, 2) +
                K.hex((r >> 16) & 255, 2) +
                K.hex((r >> 8) & 255, 2) +
                K.hex(r & 255, 2) +
                ",";
            }
            f += "],chunkSize: " + b + ",rotation: " + c;
            d &&
              (f +=
                ",border: " +
                ("0x" +
                  K.hex((e >> 24) & 255, 2) +
                  K.hex((e >> 16) & 255, 2) +
                  K.hex((e >> 8) & 255, 2) +
                  K.hex(e & 255, 2)));
            null == g.bitmap._cache.h[f] &&
              (d
                ? ((d = new S(this.barWidth, this.barHeight, !0, e)),
                  ud.overlayGradientOnBitmapData(
                    d,
                    this.barWidth - 2,
                    this.barHeight - 2,
                    a,
                    1,
                    1,
                    b,
                    c
                  ))
                : (d = ud.createGradientBitmapData(
                    this.barWidth,
                    this.barHeight,
                    a,
                    b,
                    c
                  )),
              g.bitmap.add(d, !1, f));
            this.set_frames(g.bitmap._cache.h[f].get_imageFrame());
          } else
            d
              ? ((this._emptyBar = new S(this.barWidth, this.barHeight, !0, e)),
                ud.overlayGradientOnBitmapData(
                  this._emptyBar,
                  this.barWidth - 2,
                  this.barHeight - 2,
                  a,
                  1,
                  1,
                  b,
                  c
                ))
              : (this._emptyBar = ud.createGradientBitmapData(
                  this.barWidth,
                  this.barHeight,
                  a,
                  b,
                  c
                )),
              this._emptyBarRect.setTo(0, 0, this.barWidth, this.barHeight),
              this.updateEmptyBar();
          return this;
        },
        createGradientFilledBar: function (a, b, c, d, e) {
          null == e && (e = -1);
          null == d && (d = !1);
          null == c && (c = 180);
          null == b && (b = 1);
          if (g.renderTile) {
            for (
              var f =
                  "Gradient:" +
                  this.barWidth +
                  "x" +
                  this.barHeight +
                  ",colors:[",
                k = 0;
              k < a.length;

            ) {
              var r = a[k];
              ++k;
              f +=
                "0x" +
                K.hex((r >> 24) & 255, 2) +
                K.hex((r >> 16) & 255, 2) +
                K.hex((r >> 8) & 255, 2) +
                K.hex(r & 255, 2) +
                ",";
            }
            f += "],chunkSize: " + b + ",rotation: " + c;
            d &&
              (f +=
                ",border: " +
                ("0x" +
                  K.hex((e >> 24) & 255, 2) +
                  K.hex((e >> 16) & 255, 2) +
                  K.hex((e >> 8) & 255, 2) +
                  K.hex(e & 255, 2)));
            null == g.bitmap._cache.h[f] &&
              (d
                ? ((d = new S(this.barWidth, this.barHeight, !0, e)),
                  ud.overlayGradientOnBitmapData(
                    d,
                    this.barWidth - 2,
                    this.barHeight - 2,
                    a,
                    1,
                    1,
                    b,
                    c
                  ))
                : (d = ud.createGradientBitmapData(
                    this.barWidth,
                    this.barHeight,
                    a,
                    b,
                    c
                  )),
              g.bitmap.add(d, !1, f));
            this.set_frontFrames(g.bitmap._cache.h[f].get_imageFrame());
          } else
            d
              ? ((this._filledBar = new S(
                  this.barWidth,
                  this.barHeight,
                  !0,
                  e
                )),
                ud.overlayGradientOnBitmapData(
                  this._filledBar,
                  this.barWidth - 2,
                  this.barHeight - 2,
                  a,
                  1,
                  1,
                  b,
                  c
                ))
              : (this._filledBar = ud.createGradientBitmapData(
                  this.barWidth,
                  this.barHeight,
                  a,
                  b,
                  c
                )),
              this._filledBarRect.setTo(0, 0, this.barWidth, this.barHeight),
              this.updateFilledBar();
          return this;
        },
        createImageBar: function (a, b, c, d) {
          null == d && (d = -16711936);
          null == c && (c = -16777216);
          this.createImageEmptyBar(a, c);
          this.createImageFilledBar(b, d);
          return this;
        },
        createImageEmptyBar: function (a, b) {
          null == b && (b = -16777216);
          null != a
            ? ((a = g.bitmap.add(a)),
              g.renderTile
                ? this.set_frames(a.get_imageFrame())
                : ((this._emptyBar = a.bitmap.clone()),
                  (this.barWidth = this._emptyBar.width),
                  (this.barHeight = this._emptyBar.height),
                  this._emptyBarRect.setTo(0, 0, this.barWidth, this.barHeight),
                  (null != this.graphic &&
                    this.frame.sourceSize.x == this.barWidth &&
                    this.frame.sourceSize.y == this.barHeight) ||
                    this.makeGraphic(this.barWidth, this.barHeight, 0, !0),
                  this.updateEmptyBar()))
            : this.createColoredEmptyBar(b);
          return this;
        },
        createImageFilledBar: function (a, b) {
          null == b && (b = -16711936);
          null != a
            ? ((a = g.bitmap.add(a)),
              g.renderTile
                ? this.set_frontFrames(a.get_imageFrame())
                : ((this._filledBar = a.bitmap.clone()),
                  this._filledBarRect.setTo(
                    0,
                    0,
                    this.barWidth,
                    this.barHeight
                  ),
                  (null != this.graphic &&
                    this.frame.sourceSize.x == this.barWidth &&
                    this.frame.sourceSize.y == this.barHeight) ||
                    this.makeGraphic(this.barWidth, this.barHeight, 0, !0),
                  (this.pxPerPercent = this._fillHorizontal
                    ? this.barWidth / this._maxPercent
                    : this.barHeight / this._maxPercent),
                  this.updateFilledBar()))
            : this.createColoredFilledBar(b);
          return this;
        },
        set_fillDirection: function (a) {
          this.fillDirection = a;
          switch (a._hx_index) {
            case 2:
            case 3:
            case 6:
            case 7:
              this._fillHorizontal = !1;
              break;
            case 0:
            case 1:
            case 4:
            case 5:
              this._fillHorizontal = !0;
          }
          return this.fillDirection;
        },
        updateValueFromParent: function () {
          this.set_value(qa.getProperty(this.parent, this.parentVariable));
        },
        updateBar: function () {
          this.updateEmptyBar();
          this.updateFilledBar();
        },
        updateEmptyBar: function () {
          g.renderBlit &&
            (this.get_pixels().copyPixels(
              this._emptyBar,
              this._emptyBarRect,
              this._zeroOffset
            ),
            (this.dirty = !0));
        },
        updateFilledBar: function () {
          this._filledBarRect.width = this.barWidth;
          this._filledBarRect.height = this.barHeight;
          var a = (this.get_value() - this.min) / this.range,
            b = a * this._maxPercent,
            c = this._fillHorizontal ? this.barWidth : this.barHeight,
            d = c / this.numDivisions;
          a = Math.round((((a * c) / d) | 0) * d);
          this._fillHorizontal
            ? (this._filledBarRect.width = a | 0)
            : (this._filledBarRect.height = a | 0);
          if (0 < b) {
            switch (this.fillDirection._hx_index) {
              case 1:
                this._filledBarRect.x =
                  this.barWidth - this._filledBarRect.width;
                this._filledBarPoint.x =
                  this.barWidth - this._filledBarRect.width;
                break;
              case 3:
                this._filledBarRect.y =
                  this.barHeight - this._filledBarRect.height;
                this._filledBarPoint.y =
                  this.barHeight - this._filledBarRect.height;
                break;
              case 4:
                this._filledBarRect.x =
                  (this.barWidth / 2 - this._filledBarRect.width / 2) | 0;
                this._filledBarPoint.x =
                  (this.barWidth / 2 - this._filledBarRect.width / 2) | 0;
                break;
              case 5:
                this._filledBarRect.width = (c - a) | 0;
                this._filledBarPoint.x =
                  ((this.barWidth - this._filledBarRect.width) / 2) | 0;
                break;
              case 6:
                this._filledBarRect.y =
                  (this.barHeight / 2 - this._filledBarRect.height / 2) | 0;
                this._filledBarPoint.y =
                  (this.barHeight / 2 - this._filledBarRect.height / 2) | 0;
                break;
              case 7:
                (this._filledBarRect.height = (c - a) | 0),
                  (this._filledBarPoint.y =
                    ((this.barHeight - this._filledBarRect.height) / 2) | 0);
            }
            g.renderBlit
              ? this.get_pixels().copyPixels(
                  this._filledBar,
                  this._filledBarRect,
                  this._filledBarPoint,
                  null,
                  null,
                  !0
                )
              : null != this.get_frontFrames() &&
                ((c = this._filledFlxRect),
                (a = this._filledBarRect),
                (c.x = a.x),
                (c.y = a.y),
                (c.width = a.width),
                (c.height = a.height),
                (c.x = Math.round(c.x)),
                (c.y = Math.round(c.y)),
                (c.width = Math.round(c.width)),
                (c.height = Math.round(c.height)),
                0 < (b | 0) &&
                  (this._frontFrame = this.get_frontFrames()
                    .get_frame()
                    .clipTo(this._filledFlxRect, this._frontFrame)));
          }
          g.renderBlit && (this.dirty = !0);
        },
        update: function (a) {
          null != this.parent &&
            (qa.getProperty(this.parent, this.parentVariable) !=
              this.get_value() && this.updateValueFromParent(),
            this.fixedPosition ||
              (this.set_x(this.parent.x + this.positionOffset.x),
              this.set_y(this.parent.y + this.positionOffset.y)));
          F.prototype.update.call(this, a);
        },
        draw: function () {
          F.prototype.draw.call(this);
          if (
            g.renderTile &&
            0 != this.alpha &&
            0 < this.get_percent() &&
            2 != this._frontFrame.type
          )
            for (var a = 0, b = this.get_cameras(); a < b.length; ) {
              var c = b[a];
              ++a;
              if (c.visible && c.exists && this.isOnScreen(c)) {
                var d = this.flipX != this._frame.flipX,
                  e = this.flipY != this._frame.flipY;
                this._frontFrame.prepareMatrix(
                  this._matrix,
                  0,
                  null != this.animation._curAnim
                    ? d != this.animation._curAnim.flipX
                    : d,
                  null != this.animation._curAnim
                    ? e != this.animation._curAnim.flipY
                    : e
                );
                this._matrix.translate(-this.origin.x, -this.origin.y);
                this._matrix.scale(this.scale.x, this.scale.y);
                if (
                  0 >= this.bakedRotationAngle &&
                  (this._angleChanged &&
                    ((d = (Math.PI / 180) * this.angle),
                    (this._sinAngle = Math.sin(d)),
                    (this._cosAngle = Math.cos(d)),
                    (this._angleChanged = !1)),
                  0 != this.angle)
                ) {
                  d = this._matrix;
                  e = this._cosAngle;
                  var f = this._sinAngle,
                    k = d.a * e - d.b * f;
                  d.b = d.a * f + d.b * e;
                  d.a = k;
                  k = d.c * e - d.d * f;
                  d.d = d.c * f + d.d * e;
                  d.c = k;
                  k = d.tx * e - d.ty * f;
                  d.ty = d.tx * f + d.ty * e;
                  d.tx = k;
                }
                d = this.getScreenPosition(this._point, c);
                e = this.offset;
                f = e.x;
                k = e.y;
                null == k && (k = 0);
                null == f && (f = 0);
                d.set_x(d.x - f);
                d.set_y(d.y - k);
                e._weak && e.put();
                d = this._point;
                e = this.origin.x;
                f = this.origin.y;
                null == f && (f = 0);
                null == e && (e = 0);
                d.set_x(d.x + e);
                d.set_y(d.y + f);
                this._matrix.translate(this._point.x, this._point.y);
                this.isPixelPerfectRender(c) &&
                  ((this._matrix.tx = Math.floor(this._matrix.tx)),
                  (this._matrix.ty = Math.floor(this._matrix.ty)));
                c.drawPixels(
                  this._frontFrame,
                  null,
                  this._matrix,
                  this.colorTransform,
                  this.blend,
                  this.antialiasing,
                  this.shader
                );
              }
            }
        },
        set_pixels: function (a) {
          return g.renderTile ? a : F.prototype.set_pixels.call(this, a);
        },
        toString: function () {
          var a = this.min,
            b = Ic._pool.get();
          b.label = "min";
          b.value = a;
          a = this.max;
          var c = Ic._pool.get();
          c.label = "max";
          c.value = a;
          a = this.range;
          var d = Ic._pool.get();
          d.label = "range";
          d.value = a;
          a = this.pct;
          var e = Ic._pool.get();
          e.label = "%";
          e.value = a;
          a = this.pxPerPercent;
          var f = Ic._pool.get();
          f.label = "px/%";
          f.value = a;
          a = this.get_value();
          var k = Ic._pool.get();
          k.label = "value";
          k.value = a;
          return Bb.getDebugString([b, c, d, e, f, k]);
        },
        get_percent: function () {
          return this.get_value() > this.max
            ? this._maxPercent
            : Math.floor(
                ((this.get_value() - this.min) / this.range) * this._maxPercent
              );
        },
        set_value: function (a) {
          this.value = Math.max(this.min, Math.min(a, this.max));
          this.get_value() == this.min &&
            null != this.emptyCallback &&
            this.emptyCallback();
          this.get_value() == this.max &&
            null != this.filledCallback &&
            this.filledCallback();
          this.get_value() == this.min && this.killOnEmpty && this.kill();
          this.updateBar();
          return a;
        },
        get_value: function () {
          return this.value;
        },
        set_numDivisions: function (a) {
          this.numDivisions = 0 < a ? a : 100;
          this.updateFilledBar();
          return a;
        },
        get_frontFrames: function () {
          return g.renderTile ? this.frontFrames : null;
        },
        set_frontFrames: function (a) {
          g.renderTile
            ? (null != a && a.parent.incrementUseCount(),
              null != this.get_frontFrames() &&
                this.get_frontFrames().parent.decrementUseCount(),
              (this.frontFrames = a),
              (this._frontFrame =
                null != a
                  ? a.get_frame().copyTo(this._frontFrame)
                  : V.destroy(this._frontFrame)))
            : this.createImageFilledBar(a.get_frame().paint());
          return a;
        },
        __class__: Xf,
        __properties__: q(F.prototype.__properties__, {
          set_fillDirection: "set_fillDirection",
          set_frontFrames: "set_frontFrames",
          get_frontFrames: "get_frontFrames",
          set_numDivisions: "set_numDivisions",
          set_value: "set_value",
          get_value: "get_value",
          get_percent: "get_percent",
        }),
      });
      var $h = function (a, b, c, d, e, f, k, g, l, h) {
        null == h && (h = !1);
        null == l && (l = 100);
        null == g && (g = 0);
        null == k && (k = "");
        null == e && (e = 10);
        null == d && (d = 100);
        null == b && (b = 0);
        null == a && (a = 0);
        Xf.call(this, a, b, c, d, e, f, k, g, l, h);
      };
      h["flixel.addons.ui.FlxUIBar"] = $h;
      $h.__name__ = "flixel.addons.ui.FlxUIBar";
      $h.__interfaces__ = [le, fd, Wc];
      $h.__super__ = Xf;
      $h.prototype = q(Xf.prototype, {
        set_style: function (a) {
          this.style = a;
          this.resize(this.barWidth, this.barHeight);
          return this.style;
        },
        resize: function (a, b) {
          this.set_width(a);
          this.set_height(b);
          this.barWidth = this.get_width() | 0;
          this.barHeight = this.get_height() | 0;
          g.renderBlit &&
            this.makeGraphic(this.barWidth, this.barHeight, 0, !0);
          a = null != this.style.borderColor;
          b = null == this.style.emptyColor ? -16777216 : this.style.emptyColor;
          var c =
              null == this.style.filledColor ? -65536 : this.style.filledColor,
            d =
              null == this.style.borderColor
                ? -16777216
                : this.style.borderColor;
          null != this.style.filledColor && this.createFilledBar(b, c, a, d);
          null != this.style.filledColors &&
            this.createGradientBar(
              null == this.style.emptyColors
                ? [-16777216]
                : this.style.emptyColors,
              null == this.style.filledColors
                ? [-65536]
                : this.style.filledColors,
              null == this.style.chunkSize ? 1 : this.style.chunkSize,
              null == this.style.emptyImgSrc ? 180 : this.style.gradRotation,
              a,
              d
            );
          "" != this.style.filledImgSrc &&
            this.createImageBar(
              this.style.emptyImgSrc,
              this.style.filledImgSrc,
              b,
              c
            );
          this.setRange(this.min, this.max);
          this.set_value(this.get_value());
        },
        set_params: function (a) {
          return (this.params = a);
        },
        __class__: $h,
        __properties__: q(Xf.prototype.__properties__, {
          set_params: "set_params",
          set_style: "set_style",
        }),
      });
      var vg = function () {};
      h["flixel.input.IFlxInput"] = vg;
      vg.__name__ = "flixel.input.IFlxInput";
      vg.__isInterface__ = !0;
      vg.prototype = {
        __class__: vg,
        __properties__: {
          get_justPressed: "get_justPressed",
          get_pressed: "get_pressed",
          get_justReleased: "get_justReleased",
        },
      };
      var Xc = function (a, b, c) {
        null == b && (b = 0);
        null == a && (a = 0);
        this.lastStatus = -1;
        this.maxInputMovement = Infinity;
        this.mouseButtons = [-1];
        this.allowSwiping = !0;
        this.statusAnimations = ["normal", "highlight", "pressed"];
        this.labelAlphas = [0.8, 1, 0.5];
        var d = 0,
          e = 0;
        null == e && (e = 0);
        null == d && (d = 0);
        var f = ba.pool.get().set(d, e);
        f._inPool = !1;
        e = d = 0;
        null == e && (e = 0);
        null == d && (d = 0);
        var k = ba.pool.get().set(d, e);
        k._inPool = !1;
        d = 0;
        e = 1;
        null == e && (e = 0);
        null == d && (d = 0);
        null == e && (e = 0);
        null == d && (d = 0);
        e = ba.pool.get().set(d, e);
        e._inPool = !1;
        this.labelOffsets = [f, k, e];
        F.call(this, a, b);
        this.loadDefaultGraphic();
        this.onUp = new fe(c);
        this.onDown = new fe();
        this.onOver = new fe();
        this.onOut = new fe();
        this.set_status(0);
        a = this.scrollFactor;
        a.set_x(0);
        a.set_y(0);
        sa.get_current().stage.addEventListener(
          "mouseUp",
          n(this, this.onUpEventListener)
        );
        this.input = new Ld(0);
      };
      h["flixel.ui.FlxTypedButton"] = Xc;
      Xc.__name__ = "flixel.ui.FlxTypedButton";
      Xc.__interfaces__ = [vg];
      Xc.__super__ = F;
      Xc.prototype = q(F.prototype, {
        graphicLoaded: function () {
          F.prototype.graphicLoaded.call(this);
          this.setupAnimation("normal", 0);
          this.setupAnimation("highlight", 1);
          this.setupAnimation("pressed", 2);
        },
        loadDefaultGraphic: function () {
          this.loadGraphic("flixel/images/ui/button.png", !0, 80, 20);
        },
        setupAnimation: function (a, b) {
          b = Math.min(b, this.animation._sprite.get_numFrames() - 1) | 0;
          this.animation.add(a, [b]);
        },
        destroy: function () {
          this.set_label(V.destroy(this.label));
          this._spriteLabel = null;
          this.onUp = V.destroy(this.onUp);
          this.onDown = V.destroy(this.onDown);
          this.onOver = V.destroy(this.onOver);
          this.onOut = V.destroy(this.onOut);
          this.labelOffsets = V.putArray(this.labelOffsets);
          this.input = this.currentInput = this.labelAlphas = null;
          sa.get_current().stage.removeEventListener(
            "mouseUp",
            n(this, this.onUpEventListener)
          );
          F.prototype.destroy.call(this);
        },
        update: function (a) {
          F.prototype.update.call(this, a);
          this.visible &&
            (this.updateButton(),
            this.lastStatus != this.status &&
              (this.updateStatusAnimation(), (this.lastStatus = this.status)));
          this.input.update();
        },
        updateStatusAnimation: function () {
          this.animation.play(this.statusAnimations[this.status]);
        },
        draw: function () {
          F.prototype.draw.call(this);
          null != this._spriteLabel &&
            this._spriteLabel.visible &&
            (this._spriteLabel.set_cameras(this.get_cameras()),
            this._spriteLabel.draw());
        },
        updateButton: function () {
          var a = this.checkMouseOverlap();
          a || (a = this.checkTouchOverlap());
          if (
            null != this.currentInput &&
            this.currentInput.get_justReleased() &&
            a
          )
            this.onUpHandler();
          if (
            0 != this.status &&
            (!a ||
              (null != this.currentInput &&
                this.currentInput.get_justReleased()))
          )
            this.onOutHandler();
        },
        checkMouseOverlap: function () {
          for (var a = !1, b = 0, c = this.get_cameras(); b < c.length; ) {
            var d = c[b];
            ++b;
            for (var e = 0, f = this.mouseButtons; e < f.length; ) {
              var k = f[e];
              ++e;
              k = Ge.getByID(k);
              null != k &&
                this.checkInput(g.mouse, k, k.justPressedPosition, d) &&
                (a = !0);
            }
          }
          return a;
        },
        checkTouchOverlap: function () {
          for (var a = !1, b = 0, c = this.get_cameras(); b < c.length; ) {
            var d = c[b];
            ++b;
            for (var e = 0, f = g.touches.list; e < f.length; ) {
              var k = f[e];
              ++e;
              this.checkInput(k, k, k.justPressedPosition, d) && (a = !0);
            }
          }
          return a;
        },
        checkInput: function (a, b, c, d) {
          if (Infinity != this.maxInputMovement) {
            var e = 0,
              f = 0;
            null == f && (f = 0);
            null == e && (e = 0);
            null == f && (f = 0);
            null == e && (e = 0);
            f = ba.pool.get().set(e, f);
            f._inPool = !1;
            f._weak = !0;
            c =
              Ei.distanceTo(c, a.getScreenPosition(null, f)) >
              this.maxInputMovement;
          } else c = !1;
          if (c && b == this.currentInput) this.currentInput = null;
          else if (
            this.overlapsPoint(a.getWorldPosition(d, this._point), !0, d)
          )
            return this.updateStatus(b), !0;
          return !1;
        },
        updateStatus: function (a) {
          if (a.get_justPressed())
            (this.currentInput = a), this.onDownHandler();
          else if (0 == this.status)
            if (this.allowSwiping && a.get_pressed()) this.onDownHandler();
            else this.onOverHandler();
        },
        updateLabelPosition: function () {
          null != this._spriteLabel &&
            (this._spriteLabel.set_x(
              (this.pixelPerfectPosition ? Math.floor(this.x) : this.x) +
                this.labelOffsets[this.status].x
            ),
            this._spriteLabel.set_y(
              (this.pixelPerfectPosition ? Math.floor(this.y) : this.y) +
                this.labelOffsets[this.status].y
            ));
        },
        updateLabelAlpha: function () {
          null != this._spriteLabel &&
            this.labelAlphas.length > this.status &&
            this._spriteLabel.set_alpha(
              this.alpha * this.labelAlphas[this.status]
            );
        },
        onUpEventListener: function (a) {
          if (this.visible && this.exists && this.active && 2 == this.status)
            this.onUpHandler();
        },
        onUpHandler: function () {
          this.set_status(1);
          this.input.release();
          this.currentInput = null;
          var a = this.onUp;
          null != a.callback && a.callback();
          null != a.sound && a.sound.play(!0);
        },
        onDownHandler: function () {
          this.set_status(2);
          this.input.press();
          var a = this.onDown;
          null != a.callback && a.callback();
          null != a.sound && a.sound.play(!0);
        },
        onOverHandler: function () {
          if (g.mouse.enabled) {
            this.set_status(1);
            var a = this.onOver;
            null != a.callback && a.callback();
            null != a.sound && a.sound.play(!0);
          } else this.set_status(0);
        },
        onOutHandler: function () {
          this.set_status(0);
          this.input.release();
          var a = this.onOut;
          null != a.callback && a.callback();
          null != a.sound && a.sound.play(!0);
        },
        set_label: function (a) {
          null != a &&
            (a.scrollFactor.put(), (a.scrollFactor = this.scrollFactor));
          this._spriteLabel = this.label = a;
          this.updateLabelPosition();
          return a;
        },
        set_status: function (a) {
          this.status = a;
          this.updateLabelAlpha();
          return this.status;
        },
        set_alpha: function (a) {
          F.prototype.set_alpha.call(this, a);
          this.updateLabelAlpha();
          return this.alpha;
        },
        set_x: function (a) {
          F.prototype.set_x.call(this, a);
          this.updateLabelPosition();
          return this.x;
        },
        set_y: function (a) {
          F.prototype.set_y.call(this, a);
          this.updateLabelPosition();
          return this.y;
        },
        get_justReleased: function () {
          return -1 == this.input.current;
        },
        get_pressed: function () {
          var a = this.input;
          return 1 != a.current ? 2 == a.current : !0;
        },
        get_justPressed: function () {
          return 2 == this.input.current;
        },
        __class__: Xc,
        __properties__: q(F.prototype.__properties__, {
          get_justPressed: "get_justPressed",
          get_pressed: "get_pressed",
          get_justReleased: "get_justReleased",
          set_status: "set_status",
          set_label: "set_label",
        }),
      });
      var ij = function () {};
      h["flixel.addons.ui.interfaces.ICursorPointable"] = ij;
      ij.__name__ = "flixel.addons.ui.interfaces.ICursorPointable";
      ij.__isInterface__ = !0;
      var Vg = function () {};
      h["flixel.addons.ui.interfaces.IFlxUIButton"] = Vg;
      Vg.__name__ = "flixel.addons.ui.interfaces.IFlxUIButton";
      Vg.__isInterface__ = !0;
      Vg.__interfaces__ = [U, le, fd];
      Vg.prototype = {
        __class__: Vg,
        __properties__: {
          get_justMousedOut: "get_justMousedOut",
          get_mouseIsOut: "get_mouseIsOut",
          get_mouseIsOver: "get_mouseIsOver",
          get_justMousedOver: "get_justMousedOver",
          set_toggle_label: "set_toggle_label",
          set_toggled: "set_toggled",
        },
      };
      var tc = function (a, b, c) {
        null == b && (b = 0);
        null == a && (a = 0);
        this._centerLabelOffset = null;
        this._src_w = this._src_h = 0;
        this._no_graphic = !1;
        this._assetsToCleanup = [];
        this._autoCleanup = !0;
        this.skipButtonUpdate = this.autoResizeLabel = !1;
        this.up_visible =
          this.over_visible =
          this.down_visible =
          this.up_toggle_visible =
          this.over_toggle_visible =
          this.down_toggle_visible =
          this.round_labels =
            !0;
        this.up_color =
          this.over_color =
          this.down_color =
          this.up_toggle_color =
          this.over_toggle_color =
          this.down_toggle_color =
            null;
        this.broadcastToFlxUI = !0;
        this.has_toggle = this.toggled = !1;
        this.tile = 0;
        this.resize_point = null;
        this.resize_ratio_axis = 1;
        this.resize_ratio = -1;
        Xc.call(this, a, b, c);
        a = b = 0;
        null == a && (a = 0);
        null == b && (b = 0);
        null == a && (a = 0);
        null == b && (b = 0);
        a = ba.pool.get().set(b, a);
        a._inPool = !1;
        this._centerLabelOffset = a;
        this.statusAnimations[3] = "normal_toggled";
        this.statusAnimations[4] = "highlight_toggled";
        this.statusAnimations[5] = "pressed_toggled";
        a = [];
        a.push(1);
        a.push(1);
        a.push(1);
        this.labelAlphas = a;
        this.inputOver = new Ld(0);
      };
      h["flixel.addons.ui.FlxUITypedButton"] = tc;
      tc.__name__ = "flixel.addons.ui.FlxUITypedButton";
      tc.__interfaces__ = [ij, le, Re, fd, Wc, Vg];
      tc.__super__ = Xc;
      tc.prototype = q(Xc.prototype, {
        set_toggled: function (a) {
          this.toggled = a;
          this.updateStatusAnimation();
          return this.toggled;
        },
        get_justMousedOver: function () {
          return 2 == this.inputOver.current;
        },
        get_justMousedOut: function () {
          return -1 == this.inputOver.current;
        },
        get_mouseIsOver: function () {
          var a = this.inputOver;
          return 1 != a.current ? 2 == a.current : !0;
        },
        get_mouseIsOut: function () {
          var a = this.inputOver;
          return 0 != a.current ? -1 == a.current : !0;
        },
        set_toggle_label: function (a) {
          return null != this.label ? (this.toggle_label = a) : null;
        },
        set_visible: function (a) {
          this.visible && 0 == a && this.inputOver.release();
          return Xc.prototype.set_visible.call(this, a);
        },
        set_skipButtonUpdate: function (a) {
          return (this.skipButtonUpdate = a);
        },
        set_params: function (a) {
          return (this.params = a);
        },
        destroy: function () {
          this.resize_point = V.put(this.resize_point);
          Xc.prototype.destroy.call(this);
        },
        graphicLoaded: function () {
          Xc.prototype.graphicLoaded.call(this);
          this.setupAnimation("normal_toggled", 3);
          this.setupAnimation("highlight_toggled", 4);
          this.setupAnimation("pressed_toggled", 5);
          this._autoCleanup && this.cleanup();
        },
        copyStyle: function (a) {
          this.up_color = a.up_color;
          this.over_color = a.over_color;
          this.down_color = a.down_color;
          this.up_toggle_color = a.up_toggle_color;
          this.down_toggle_color = this.over_toggle_color = a.over_toggle_color;
          this.up_visible = a.up_visible;
          this.over_visible = a.over_visible;
          this.down_visible = a.down_visible;
          this.up_toggle_visible = a.up_toggle_visible;
          this.over_toggle_visible = a.over_toggle_visible;
          this.down_toggle_visible = a.down_toggle_visible;
          var b = a.getCenterLabelOffset();
          this.setCenterLabelOffset(b.x, b.y);
          for (var c = (b = 0), d = a.labelOffsets; c < d.length; ) {
            var e = d[c];
            ++c;
            this.labelOffsets[b].set_x(e.x);
            this.labelOffsets[b].set_y(e.y);
            ++b;
          }
          c = b = 0;
          for (d = a.labelAlphas; c < d.length; )
            (a = d[c]), ++c, (this.labelAlphas[b] = a), ++b;
        },
        setAllLabelOffsets: function (a, b) {
          for (var c = 0, d = this.labelOffsets; c < d.length; ) {
            var e = d[c];
            ++c;
            var f = a,
              k = b;
            null == k && (k = 0);
            null == f && (f = 0);
            e.set_x(f);
            e.set_y(k);
          }
        },
        update: function (a) {
          Xc.prototype.update.call(this, a);
          0 == this.status
            ? ((a = this.inputOver), (a = 1 == a.current || 2 == a.current))
            : (a = !1);
          a && (-1 == this.input.current) == 0 && this.inputOver.release();
          this.inputOver.update();
          null != this.label &&
            ((a = this.fetchAndShowCorrectLabel()),
            a.set_x(
              this.x +
                this._centerLabelOffset.x +
                this.labelOffsets[this.status].x
            ),
            a.set_y(
              this.y +
                this._centerLabelOffset.y +
                this.labelOffsets[this.status].y
            ),
            this.round_labels &&
              (a.set_x((a.x + 0.5) | 0), a.set_y((a.y + 0.5) | 0)),
            (a.scrollFactor = this.scrollFactor));
        },
        updateStatusAnimation: function () {
          this.has_toggle && this.toggled
            ? this.animation.play(this.statusAnimations[this.status + 3])
            : Xc.prototype.updateStatusAnimation.call(this);
        },
        draw: function () {
          Xc.prototype.draw.call(this);
          this.has_toggle &&
            this.toggled &&
            null != this.toggle_label &&
            1 == this.toggle_label.visible &&
            ((this.toggle_label._cameras = this._cameras),
            this.toggle_label.draw());
        },
        resize: function (a, b) {
          this.doResize(a, b);
        },
        doResize: function (a, b, c) {
          null == c && (c = !0);
          var d = this.get_width(),
            e = this.get_height(),
            f = 0,
            k = 0;
          null != this.label &&
            ((f = this.get_width() - this._spriteLabel.get_width()),
            (k = this.get_height() - this._spriteLabel.get_height()));
          0 >= a && (a = 80);
          0 >= b && (b = 20);
          c &&
            (null != this._slice9_assets
              ? this.loadGraphicSlice9(
                  this._slice9_assets,
                  a | 0,
                  b | 0,
                  this._slice9_arrays,
                  this.tile,
                  this.resize_ratio,
                  this.has_toggle,
                  this._src_w,
                  this._src_h,
                  this._frame_indeces
                )
              : this._no_graphic
              ? ((c = this.has_toggle
                  ? new S(a | 0, (6 * b) | 0, !0, 0)
                  : new S(a | 0, (3 * b) | 0, !0, 0)),
                this.loadGraphicsUpOverDown(c))
              : this.loadGraphicSlice9(null, a | 0, b | 0, null, this.tile));
          null != this.label &&
            this.autoResizeLabel &&
            za.__implements(this.label, Wc) &&
            this.label.resize(a - f, b - k);
          this.autoCenterLabel();
          a = this.get_width() - d;
          e = this.get_height() - e;
          null != this.resize_point &&
            ((e *= this.resize_point.y),
            this.set_x(this.x - a * this.resize_point.x),
            this.set_y(this.y - e));
        },
        getBmp: function (a) {
          return E.getBmp(a);
        },
        loadGraphicsUpOverDown: function (a, b, c) {
          null == b && (b = !1);
          this._slice9_arrays = this._slice9_assets = null;
          this.resize_ratio = -1;
          b && (this.has_toggle = !0);
          b = null;
          a instanceof S
            ? (b = a)
            : "string" == typeof a && (b = this.getBmp(a));
          a = this.grabButtonFrame(b, 0, this.has_toggle, 0, 0, c);
          var d = this.grabButtonFrame(b, 1, this.has_toggle, 0, 0, c);
          var e = this.grabButtonFrame(b, 2, this.has_toggle, 0, 0, c);
          var f = c;
          if (null == c || "" == c || (null != g.bitmap._cache.h[c]) == 0)
            f = this.assembleButtonFrames(a, d, e);
          this.has_toggle
            ? ((f = this.assembleButtonFrames(a, d, e)),
              (a = this.grabButtonFrame(b, 3, !0, 0, 0, c)),
              (d = this.grabButtonFrame(b, 4, !0, 0, 0, c)),
              (e = this.grabButtonFrame(b, 5, !0, 0, 0, c)),
              (b = this.assembleButtonFrames(a, d, e)),
              (d = this.combineToggleBitmaps(f, b)),
              V.dispose(f),
              V.dispose(b),
              this.loadGraphic(d, !0, a.width, a.height, !1, c))
            : this.loadGraphic(f, !0, a.width, a.height, !1, c);
        },
        loadGraphicSlice9: function (a, b, c, d, e, f, k, r, l, h) {
          null == l && (l = 0);
          null == r && (r = 0);
          null == k && (k = !1);
          null == f && (f = -1);
          null == e && (e = 0);
          null == c && (c = 20);
          null == b && (b = 80);
          0 != r && (this._src_w = r);
          0 != l && (this._src_h = l);
          this.tile = e;
          this.has_toggle = k;
          this.resize_ratio = f;
          this._slice9_assets = a;
          this._slice9_arrays = d;
          e = "";
          if (null == h) h = this.has_toggle ? [0, 1, 2, 3, 4, 5] : [0, 1, 2];
          else {
            f = 2;
            for (this.has_toggle && (f = 5); h.length < f + 1; )
              h.push(h.length - 1);
            for (var u = 0, m = h.length; u < m; ) {
              var J = u++;
              5 < h[J] ? (h[J] = 5) : 0 > h[J] && (h[J] = 0);
            }
          }
          this._frame_indeces = h;
          0 == b && (b = 80);
          0 == c && (c = 20);
          c = E.applyResize(this.resize_ratio, this.resize_ratio_axis, b, c);
          b = c.x | 0;
          c = c.y | 0;
          null == a &&
            (k
              ? ((a = ["flixel/flixel-ui/img/button_toggle.png"]),
                (d = [Bb.toIntArray("6,6,11,11")]),
                (k = this.getBmp(a[0])),
                (this._src_w = k.width | 0),
                (this._src_h = (k.height / 6) | 0))
              : ((a = ["flixel/flixel-ui/img/button.png"]),
                (d = [Bb.toIntArray("6,6,11,11")]),
                (k = this.getBmp(a[0])),
                (this._src_w = k.width | 0),
                (this._src_h = (k.height / 3) | 0)));
          !this.has_toggle && 3 >= a.length
            ? ((k = [null, null, null]), (f = [null, null, null]))
            : ((this.has_toggle = !0),
              (k = [null, null, null, null, null, null]),
              (f = [null, null, null, null, null, null]));
          this._flashRect2.width = b;
          this._flashRect2.height = c;
          r = e +=
            M.string(a) +
            "_slice9=" +
            M.string(d) +
            "_src=" +
            this._src_w +
            "x" +
            this._src_h;
          e += "_final=" + b + "x" + c + "_fi=" + M.string(this._frame_indeces);
          if (1 == a.length) {
            l = this.getBmp(a[0]);
            u = "_all";
            if (0 == this._src_w || 0 == this._src_h)
              throw new Cb(
                "Ambiguous situation! If you only provide one asset, you MUST provide src_w and src_h. Otherwise I can't tell if it's a stacked set of frames or a single frame."
              );
            m = l.height > this._src_h;
            u += m ? "_multiframe" : "";
            e += u;
            r += u;
            if (null != g.bitmap._cache.h[e]) {
              this.loadGraphic(e, !0, b, c);
              return;
            }
            if (m) {
              u = 0;
              for (m = k.length; u < m; )
                (J = u++),
                  (k[J] = this.grabButtonFrame(
                    l,
                    J,
                    this.has_toggle,
                    this._src_w,
                    this._src_h,
                    r
                  ));
              if (null != d && d[0] != []) {
                u = 0;
                for (m = k.length; u < m; )
                  (J = u++),
                    (f[J] = new ea(
                      0,
                      0,
                      k[J],
                      this._flashRect2,
                      d[0],
                      this.tile,
                      !1,
                      a[0] + ":" + J,
                      this.resize_ratio
                    )),
                    f[J].set_resize_point(this.resize_point);
                u = 0;
                for (m = k.length; u < m; )
                  (J = u++), (k[J] = f[J].get_pixels());
                b = k[0].width;
                c = k[0].height;
              }
            } else k[0] = l;
          } else {
            if (null != g.bitmap._cache.h[e]) {
              this.loadGraphic(e, !0, b, c);
              return;
            }
            if (this.has_toggle) for (; 6 > a.length; ) a.push("");
            else for (; 3 > a.length; ) a.push("");
            if ("" != a[0]) {
              if (
                null != d &&
                0 < d.length &&
                null != d[0] &&
                0 < d[0].length
              ) {
                for (; d.length < a.length; ) d.push(null);
                f[0] =
                  null != d[0]
                    ? new ea(
                        0,
                        0,
                        a[0],
                        this._flashRect2,
                        d[0],
                        this.tile,
                        !1,
                        "",
                        this.resize_ratio
                      )
                    : new nc(0, 0, a[0]);
                k[0] = f[0].get_pixels();
                u = 1;
                for (m = a.length; u < m; )
                  (J = u++),
                    "" != a[J] &&
                      ((f[J] =
                        null != d[J]
                          ? new ea(
                              0,
                              0,
                              a[J],
                              this._flashRect2,
                              d[J],
                              this.tile,
                              !1,
                              "",
                              this.resize_ratio
                            )
                          : new nc(0, 0, a[J])),
                      (k[J] = f[J].get_pixels()));
              } else
                for (u = 0, m = a.length; u < m; )
                  (J = u++), (k[J] = this.getBmp(a[J]));
              b = k[0].width;
              c = k[0].height;
            } else
              0 == b && (b = 80),
                0 == c && (c = 20),
                (k[0] = new S(b, 3 * c, !0, 0)),
                (this._no_graphic = !0);
          }
          this.has_toggle
            ? ((a = this.assembleButtonFrames(k[h[0]], k[h[1]], k[h[2]])),
              (h = this.assembleButtonFrames(k[h[3]], k[h[4]], k[h[5]])),
              (d = this.combineToggleBitmaps(a, h)),
              V.dispose(a),
              V.dispose(h),
              g.bitmap.add(d, !0, e))
            : ((a = this.assembleButtonFrames(k[h[0]], k[h[1]], k[h[2]])),
              g.bitmap.add(a, !0, e));
          this.loadGraphic(e, !0, b, c);
          u = 0;
          for (m = f.length; u < m; )
            (J = u++), null != f[J] && (f[J].destroy(), (f[J] = null));
          for (; 0 < f.length; ) f.pop();
          for (; 0 < k.length; ) k.pop();
        },
        autoCenterLabel: function () {
          if (null != this.label) {
            this.get_width();
            this._spriteLabel.get_width();
            if (this.label instanceof Ed) {
              var a = this.label;
              var b = (this.get_width() - a.get_fieldWidth()) / 2;
              a = (this.get_height() - a.get_height()) / 2;
            } else
              (b = (this.get_width() - this._spriteLabel.get_width()) / 2),
                (a = (this.get_height() - this._spriteLabel.get_height()) / 2);
            this._centerLabelOffset.set_x(b);
            this._centerLabelOffset.set_y(a);
          }
        },
        setCenterLabelOffset: function (a, b) {
          this._centerLabelOffset.set_x(a);
          this._centerLabelOffset.set_y(b);
        },
        getCenterLabelOffset: function () {
          var a = this._centerLabelOffset.x,
            b = this._centerLabelOffset.y;
          null == b && (b = 0);
          null == a && (a = 0);
          null == b && (b = 0);
          null == a && (a = 0);
          b = ba.pool.get().set(a, b);
          b._inPool = !1;
          return b;
        },
        forceStateHandler: function (a) {
          switch (a) {
            case "click_button":
              this.onUpHandler();
              break;
            case "down_button":
              this.onDownHandler();
              break;
            case "out_button":
              this.onOutHandler();
              break;
            case "over_button":
              this.onOverHandler();
          }
        },
        grabButtonFrame: function (a, b, c, d, e, f) {
          null == e && (e = 0);
          null == d && (d = 0);
          null == c && (c = !1);
          0 == e && (e = c ? (a.height / 6) | 0 : (a.height / 3) | 0);
          c = d;
          0 == c && (c = a.width);
          this._flashRect.x = 0;
          this._flashRect.y = b * e;
          this._flashRect.width = c;
          this._flashRect.height = e;
          this._flashRect.y >= a.height &&
            4 == ((a.height / e) | 0) &&
            (4 == b
              ? (this._flashRect.y = 3 * e)
              : 5 == b && (this._flashRect.y = 2 * e));
          b =
            f +
            "{x:" +
            this._flashRect.x +
            "y:" +
            this._flashRect.y +
            "w:" +
            this._flashRect.width +
            "h:" +
            this._flashRect.height +
            "}";
          if (null != b && null != g.bitmap._cache.h[b])
            return g.bitmap._cache.h[b].bitmap;
          e = new S(c, e);
          e.copyPixels(a, this._flashRect, this._flashPointZero);
          null != f && (g.bitmap.add(e, !0, b), this.addToCleanup(b));
          return e;
        },
        combineToggleBitmaps: function (a, b) {
          var c = new S(a.width, a.height + b.height);
          c.copyPixels(a, a.rect, this._flashPointZero);
          this._flashPoint.x = 0;
          this._flashPoint.y = a.height;
          c.copyPixels(b, b.rect, this._flashPoint);
          return c;
        },
        assembleButtonFrames: function (a, b, c) {
          var d =
            null != b
              ? null != c
                ? new S(a.width, 3 * a.height)
                : new S(a.width, 2 * a.height)
              : new S(a.width, a.height);
          d.copyPixels(a, a.rect, this._flashPointZero);
          null != b &&
            ((this._flashPoint.x = 0),
            (this._flashPoint.y = a.height),
            d.copyPixels(b, b.rect, this._flashPoint),
            null != c &&
              ((this._flashPoint.y = 2 * a.height),
              d.copyPixels(c, c.rect, this._flashPoint)));
          return d;
        },
        updateButton: function () {
          this.skipButtonUpdate || Xc.prototype.updateButton.call(this);
        },
        addToCleanup: function (a) {
          null == this._assetsToCleanup && (this._assetsToCleanup = []);
          -1 == this._assetsToCleanup.indexOf(a) &&
            this._assetsToCleanup.push(a);
        },
        cleanup: function () {
          if (null != this._assetsToCleanup) {
            for (var a = 0, b = this._assetsToCleanup; a < b.length; ) {
              var c = b[a];
              ++a;
              g.bitmap.removeByKey(c);
            }
            this._assetsToCleanup = null;
          }
        },
        fetchAndShowCorrectLabel: function () {
          if (this.has_toggle) {
            if (this.toggled && null != this.toggle_label)
              return (
                this._spriteLabel.set_visible(!1),
                this.toggle_label.set_visible(!0),
                this.toggle_label
              );
            null != this.toggle_label && this.toggle_label.set_visible(!1);
            this._spriteLabel.set_visible(!0);
          }
          return this.label;
        },
        onUpHandler: function () {
          this.has_toggle && this.set_toggled(!this.toggled);
          Xc.prototype.onUpHandler.call(this);
          if (null != this.label) {
            var a = this.fetchAndShowCorrectLabel();
            a.set_visible(
              this.toggled ? this.up_toggle_visible : this.up_visible
            );
            var b = this.toggled ? this.up_toggle_color : this.up_color;
            null != b && a.set_color(b);
          }
          this.broadcastToFlxUI &&
            Ea.event("click_button", this, null, this.params);
        },
        onDownHandler: function () {
          Xc.prototype.onDownHandler.call(this);
          if (null != this.label) {
            var a = this.fetchAndShowCorrectLabel();
            a.set_visible(
              this.toggled ? this.down_toggle_visible : this.down_visible
            );
            var b = this.toggled ? this.down_toggle_color : this.down_color;
            null != b && a.set_color(b);
          }
          this.broadcastToFlxUI &&
            Ea.event("down_button", this, null, this.params);
        },
        onOverHandler: function () {
          Xc.prototype.onOverHandler.call(this);
          this.inputOver.press();
          if (null != this.label) {
            var a = this.fetchAndShowCorrectLabel();
            a.set_visible(
              this.toggled ? this.over_toggle_visible : this.over_visible
            );
            var b = this.toggled ? this.over_toggle_color : this.over_color;
            null != b && a.set_color(b);
          }
          this.broadcastToFlxUI &&
            Ea.event("over_button", this, null, this.params);
        },
        onOutHandler: function () {
          Xc.prototype.onOutHandler.call(this);
          this.inputOver.release();
          if (null != this.label) {
            var a = this.fetchAndShowCorrectLabel();
            a.set_visible(
              this.toggled ? this.up_toggle_visible : this.up_visible
            );
            var b = this.toggled ? this.up_toggle_color : this.up_color;
            null != b && a.set_color(b);
          }
          this.broadcastToFlxUI &&
            Ea.event("out_button", this, null, this.params);
        },
        set_x: function (a) {
          Xc.prototype.set_x.call(this, a);
          null != this._spriteLabel &&
            (this._spriteLabel.set_x(
              this.x +
                this._centerLabelOffset.x +
                this.labelOffsets[this.status].x
            ),
            this.round_labels &&
              this._spriteLabel.set_x((this._spriteLabel.x + 0.5) | 0),
            this.has_toggle &&
              null != this.toggle_label &&
              this.toggle_label.set_x(this._spriteLabel.x));
          return a;
        },
        set_y: function (a) {
          Xc.prototype.set_y.call(this, a);
          null != this.label &&
            (this._spriteLabel.set_y(
              this.y +
                this._centerLabelOffset.y +
                this.labelOffsets[this.status].y
            ),
            this.round_labels &&
              this._spriteLabel.set_y((this._spriteLabel.y + 0.5) | 0),
            this.has_toggle &&
              null != this.toggle_label &&
              this.toggle_label.set_y(this._spriteLabel.y));
          return a;
        },
        __class__: tc,
        __properties__: q(Xc.prototype.__properties__, {
          set_params: "set_params",
          set_skipButtonUpdate: "set_skipButtonUpdate",
          set_toggle_label: "set_toggle_label",
          get_justMousedOut: "get_justMousedOut",
          get_mouseIsOut: "get_mouseIsOut",
          get_mouseIsOver: "get_mouseIsOver",
          get_justMousedOver: "get_justMousedOver",
          set_toggled: "set_toggled",
        }),
      });
      var Zh = function () {};
      h["flixel.addons.ui.interfaces.ILabeled"] = Zh;
      Zh.__name__ = "flixel.addons.ui.interfaces.ILabeled";
      Zh.__isInterface__ = !0;
      Zh.prototype = { __class__: Zh };
      var gd = function (a, b, c, d, e, f, k) {
        null == k && (k = -1);
        null == f && (f = !1);
        null == e && (e = !0);
        null == b && (b = 0);
        null == a && (a = 0);
        this.up_style =
          this.over_style =
          this.down_style =
          this.up_toggle_style =
          this.over_toggle_style =
          this.down_toggle_style =
            null;
        tc.call(this, a, b, d);
        this.set_color(k);
        null != c &&
          (this.set_label(new Ed(0, 0, 80, c, 8)),
          this.label.setFormat(null, 8, 3355443, "center"));
        f && (this._no_graphic = !0);
        e
          ? this.resize(this.get_width(), this.get_height())
          : 0 == this._no_graphic
          ? this.doResize(this.get_width(), this.get_height(), !1)
          : this.doResize(this.get_width(), this.get_height(), !0);
      };
      h["flixel.addons.ui.FlxUIButton"] = gd;
      gd.__name__ = "flixel.addons.ui.FlxUIButton";
      gd.__interfaces__ = [Vg, Zh];
      gd.__super__ = tc;
      gd.prototype = q(tc.prototype, {
        setLabelFormat: function (a, b, c, d, e, f, k) {
          null == k && (k = !0);
          null == f && (f = 0);
          null == c && (c = -1);
          null == b && (b = 8);
          return null != this.label
            ? (this.label.setFormat(a, b, c, d, e, f, k), this.label)
            : null;
        },
        autoCenterLabel: function () {
          tc.prototype.autoCenterLabel.call(this);
        },
        copyStyle: function (a) {
          tc.prototype.copyStyle.call(this, a);
          if (a instanceof gd) {
            this.up_style = a.up_style;
            this.over_style = a.over_style;
            this.down_style = a.down_style;
            this.up_toggle_style = a.up_toggle_style;
            this.over_toggle_style = a.over_toggle_style;
            this.down_toggle_style = a.down_toggle_style;
            a = a.label;
            var b = a.textField.get_defaultTextFormat();
            if (-1 == a._font.indexOf(Fd.FONT_DEFAULT))
              kd.copyFromFlxText(a).apply(null, this.label);
            else {
              var c = Nm.fromOpenFL(b.align);
              this.label.setFormat(
                null,
                b.size | 0,
                b.color,
                c,
                a.borderStyle,
                a.borderColor,
                a.textField.get_embedFonts()
              );
            }
          }
        },
        getLabel: function () {
          return this.label;
        },
        resize: function (a, b) {
          tc.prototype.resize.call(this, a, b);
        },
        destroy: function () {
          this._noIconGraphicsBkup = V.dispose(this._noIconGraphicsBkup);
          tc.prototype.destroy.call(this);
        },
        loadDefaultGraphic: function () {},
        resetHelpers: function () {
          tc.prototype.resetHelpers.call(this);
          if (null != this.label) {
            var a = this.label,
              b = this.get_width() | 0;
            a.set_width((this.label.frameWidth = b));
            this.label.set_fieldWidth(this.label.get_width());
            this.label.set_size(this.label._defaultFormat.size | 0);
          }
        },
        onDownHandler: function () {
          tc.prototype.onDownHandler.call(this);
          null != this.label &&
            (this.toggled && null != this.down_toggle_style
              ? (this.label.set_color(this.down_toggle_style.color),
                null != this.down_toggle_style.border &&
                  (this.label.set_borderStyle(
                    this.down_toggle_style.border.style
                  ),
                  this.label.set_borderColor(
                    this.down_toggle_style.border.color
                  ),
                  this.label.set_borderSize(this.down_toggle_style.border.size),
                  this.label.set_borderQuality(
                    this.down_toggle_style.border.quality
                  )))
              : this.toggled ||
                null == this.down_style ||
                (this.label.set_color(this.down_style.color),
                null != this.down_style.border &&
                  (this.label.set_borderStyle(this.down_style.border.style),
                  this.label.set_borderColor(this.down_style.border.color),
                  this.label.set_borderSize(this.down_style.border.size),
                  this.label.set_borderQuality(
                    this.down_style.border.quality
                  ))));
        },
        onOverHandler: function () {
          tc.prototype.onOverHandler.call(this);
          null != this.label &&
            (this.toggled && null != this.over_toggle_style
              ? (this.label.set_color(this.over_toggle_style.color),
                null != this.over_toggle_style.border &&
                  (this.label.set_borderStyle(
                    this.over_toggle_style.border.style
                  ),
                  this.label.set_borderColor(
                    this.over_toggle_style.border.color
                  ),
                  this.label.set_borderSize(this.over_toggle_style.border.size),
                  this.label.set_borderQuality(
                    this.over_toggle_style.border.quality
                  )))
              : this.toggled ||
                null == this.over_style ||
                (this.label.set_color(this.over_style.color),
                null != this.over_style.border &&
                  (this.label.set_borderStyle(this.over_style.border.style),
                  this.label.set_borderColor(this.over_style.border.color),
                  this.label.set_borderSize(this.over_style.border.size),
                  this.label.set_borderQuality(
                    this.over_style.border.quality
                  ))));
        },
        onOutHandler: function () {
          tc.prototype.onOutHandler.call(this);
          null != this.label &&
            (this.toggled && null != this.up_toggle_style
              ? (this.label.set_color(this.up_toggle_style.color),
                null != this.up_toggle_style.border &&
                  (this.label.set_borderStyle(
                    this.up_toggle_style.border.style
                  ),
                  this.label.set_borderColor(this.up_toggle_style.border.color),
                  this.label.set_borderSize(this.up_toggle_style.border.size),
                  this.label.set_borderQuality(
                    this.up_toggle_style.border.quality
                  )))
              : this.toggled ||
                null == this.up_style ||
                (this.label.set_color(this.up_style.color),
                null != this.up_style.border &&
                  (this.label.set_borderStyle(this.up_style.border.style),
                  this.label.set_borderColor(this.up_style.border.color),
                  this.label.set_borderSize(this.up_style.border.size),
                  this.label.set_borderQuality(this.up_style.border.quality))));
        },
        onUpHandler: function () {
          tc.prototype.onUpHandler.call(this);
          null != this.label &&
            (this.toggled && null != this.up_toggle_style
              ? (this.label.set_color(this.up_toggle_style.color),
                null != this.up_toggle_style.border &&
                  (this.label.set_borderStyle(
                    this.up_toggle_style.border.style
                  ),
                  this.label.set_borderColor(this.up_toggle_style.border.color),
                  this.label.set_borderSize(this.up_toggle_style.border.size),
                  this.label.set_borderQuality(
                    this.up_toggle_style.border.quality
                  )))
              : this.toggled ||
                null == this.up_style ||
                (this.label.set_color(this.up_style.color),
                null != this.up_style.border &&
                  (this.label.set_borderStyle(this.up_style.border.style),
                  this.label.set_borderColor(this.up_style.border.color),
                  this.label.set_borderSize(this.up_style.border.size),
                  this.label.set_borderQuality(this.up_style.border.quality))));
        },
        __class__: gd,
      });
      var tb = function (a, b, c, d, e, f, k, g) {
        null == f && (f = 100);
        null == b && (b = 0);
        null == a && (a = 0);
        this.skipButtonUpdate = !1;
        this.box_space = 2;
        this.textX = this.textY = 0;
        this.checked = this.checkbox_dirty = !1;
        this.max_width = -1;
        Na.call(this);
        this.callback = g;
        this.set_params(k);
        null == c && (c = "flixel/flixel-ui/img/check_box.png");
        c instanceof F
          ? (this.box = c)
          : ((this.box = new F()), this.box.loadGraphic(c, !0));
        this.button = new gd(0, 0, e, n(this, this._clickCheck));
        this.button.label.setFormat(null, 8, 16777215, "left", Ya.OUTLINE);
        this.button.label.set_fieldWidth(f);
        this.button.up_color = 16777215;
        this.button.down_color = 16777215;
        this.button.over_color = 16777215;
        this.button.up_toggle_color = 16777215;
        this.button.down_toggle_color = 16777215;
        this.button.over_toggle_color = 16777215;
        this.button.loadGraphicSlice9(
          ["", "", ""],
          (this.box.get_width() + this.box_space + f) | 0,
          this.box.get_height() | 0
        );
        this.max_width = (this.box.get_width() + this.box_space + f) | 0;
        this.button.onUp.callback = n(this, this._clickCheck);
        null == d && (d = "flixel/flixel-ui/img/check_mark.png");
        d instanceof F
          ? (this.mark = d)
          : ((this.mark = new F()), this.mark.loadGraphic(d));
        this.add(this.box);
        this.add(this.mark);
        this.add(this.button);
        this.anchorLabelX();
        this.anchorLabelY();
        this.set_checked(!1);
        this.button.setAllLabelOffsets(0, 0);
        this.set_x(a);
        this.set_y(b);
        this.set_textX(0);
        this.set_textY(0);
      };
      h["flixel.addons.ui.FlxUICheckBox"] = tb;
      tb.__name__ = "flixel.addons.ui.FlxUICheckBox";
      tb.__interfaces__ = [ij, le, Re, Zh];
      tb.__super__ = Na;
      tb.prototype = q(Na.prototype, {
        set_skipButtonUpdate: function (a) {
          this.skipButtonUpdate = a;
          this.button.set_skipButtonUpdate(this.skipButtonUpdate);
          return this.skipButtonUpdate;
        },
        set_params: function (a) {
          this.params = a;
          null == this.params && (this.params = []);
          this.params.push({ name: "checked", value: !1 });
          return this.params;
        },
        set_color: function (a) {
          null != this.button && this.button.label.set_color(a);
          return Na.prototype.set_color.call(this, a);
        },
        getLabel: function () {
          return null == this.button ? null : this.button.label;
        },
        set_visible: function (a) {
          return (this.visible = a);
        },
        set_textX: function (a) {
          this.textX = a;
          this.anchorLabelX();
          return this.textX;
        },
        set_textY: function (a) {
          this.textY = a;
          this.anchorLabelY();
          return this.textY;
        },
        anchorLabelX: function () {
          null != this.button &&
            this.button.label.offset.set_x(
              -(this.box.get_width() + this.box_space + this.textX)
            );
        },
        anchorLabelY: function () {
          null != this.button &&
            this.button.set_y(
              this.box.y +
                (this.box.get_height() - this.button.get_height()) / 2 +
                this.textY
            );
        },
        destroy: function () {
          Na.prototype.destroy.call(this);
          null != this.mark && (this.mark.destroy(), (this.mark = null));
          null != this.box && (this.box.destroy(), (this.box = null));
          null != this.button && (this.button.destroy(), (this.button = null));
        },
        set_text: function (a) {
          this.button.label.set_text(a);
          this.checkbox_dirty = !0;
          return a;
        },
        update: function (a) {
          Na.prototype.update.call(this, a);
          this.checkbox_dirty &&
            null != this.button.label &&
            (this.button.label instanceof Ed && this.button.label.drawFrame(),
            this.anchorLabelX(),
            this.anchorLabelY(),
            this.button.set_width(
              this.box.frameWidth +
                this.box_space +
                this.button.label.textField.get_textWidth()
            ),
            (this.checkbox_dirty = !1));
        },
        set_checked: function (a) {
          this.mark.set_visible(a);
          return (this.checked = a);
        },
        _clickCheck: function () {
          this.visible &&
            (this.set_checked(!this.checked),
            null != this.callback && this.callback(),
            this.broadcastToFlxUI &&
              Ea.event("click_check_box", this, this.checked, this.params));
        },
        __class__: tb,
        __properties__: q(Na.prototype.__properties__, {
          set_text: "set_text",
          set_skipButtonUpdate: "set_skipButtonUpdate",
          set_textY: "set_textY",
          set_textX: "set_textX",
          set_params: "set_params",
          set_checked: "set_checked",
        }),
      });
      var Hi = function (a, b, c, d) {
        null == c && (c = 1);
        null == b && (b = 1);
        this._clickTime = 0;
        this._clickPressed = !1;
        this.inputMethod = this.lastMouseX = this.lastMouseY = 0;
        this.dispatchEvents = !0;
        this.gamepadAutoConnect = Pk.FirstActive;
        this.listIndex = 0;
        this.location = -1;
        this.wrap = !0;
        null == d &&
          (d =
            400 > g.height
              ? "flixel/flixel-ui/img/finger_small.png"
              : "flixel/flixel-ui/img/finger_big.png");
        nc.call(this, 0, 0, d);
        this.inputMethod = b;
        this._lists = [{ x: 0, y: 0, width: 0, height: 0, widgets: [] }];
        this._widgets = this._lists[0].widgets;
        this.anchor = new Qg(-2, 0, "left", "center", "right", "center");
        this.setDefaultKeys(c);
        this.callback = a;
        a = this.scrollFactor;
        c = b = 0;
        null == c && (c = 0);
        null == b && (b = 0);
        a.set_x(b);
        a.set_y(c);
        null != g.mouse && 0 == g.mouse instanceof jj
          ? ((this._newMouse = new jj(g.mouse.cursorContainer)),
            g.set_mouse(this._newMouse))
          : (this._newMouse = g.mouse);
      };
      h["flixel.addons.ui.FlxUICursor"] = Hi;
      Hi.__name__ = "flixel.addons.ui.FlxUICursor";
      Hi.__super__ = nc;
      Hi.prototype = q(nc.prototype, {
        findVisibleLocation: function (a, b, c) {
          null == c && (c = !0);
          null == b && (b = !0);
          this.set_location(a);
          if (-1 != this.location)
            for (
              a = !1;
              null == this._widgets[this.location] ||
              0 == this._widgets[this.location].visible;

            )
              if (b)
                if (this.location == this._widgets.length - 1)
                  if (c)
                    if (a) {
                      this.set_location(-1);
                      break;
                    } else (a = !0), this.set_location(0);
                  else {
                    this.set_location(-1);
                    break;
                  }
                else this.set_location(this.location + 1);
              else if (0 == this.location)
                if (c)
                  if (a) {
                    this.set_location(-1);
                    break;
                  } else (a = !0), this.set_location(this._widgets.length - 1);
                else {
                  this.set_location(-1);
                  break;
                }
              else this.set_location(this.location - 1);
        },
        set_listIndex: function (a) {
          a >= this._lists.length
            ? (a = this._lists.length - 1)
            : 0 > a && (a = 0);
          this.listIndex = a;
          this.set_location(0);
          this._updateCursor();
          return this.listIndex;
        },
        set_visible: function (a) {
          return (a = nc.prototype.set_visible.call(this, a));
        },
        set_location: function (a) {
          a >= this._widgets.length && (a = this._widgets.length - 1);
          this.location = a;
          this._updateCursor();
          return this.location;
        },
        set_gamepad: function (a) {
          this._gamepad = a;
          this.setDefaultKeys(this._defaultCode);
          for (
            var b = [
                this.keysUp,
                this.keysDown,
                this.keysLeft,
                this.keysRight,
                this.keysClick,
              ],
              c = 0;
            c < b.length;

          ) {
            var d = b[c];
            ++c;
            if (null != d)
              for (var e = 0; e < d.length; ) {
                var f = d[e];
                ++e;
                f instanceof vd && (f.gamepad = this._gamepad);
              }
          }
          return a;
        },
        get_gamepad: function () {
          return this._gamepad;
        },
        destroy: function () {
          nc.prototype.destroy.call(this);
          g.mouse == this._newMouse && (this._newMouse = null);
          this.keysUp = V.destroyArray(this.keysUp);
          this.keysDown = V.destroyArray(this.keysDown);
          this.keysLeft = V.destroyArray(this.keysLeft);
          this.keysRight = V.destroyArray(this.keysRight);
          this.keysClick = V.destroyArray(this.keysClick);
          this.anchor = V.destroy(this.anchor);
          for (var a = 0, b = this._lists; a < b.length; ) {
            var c = b[a];
            ++a;
            E.clearArraySoft(c.widgets);
          }
          E.clearArraySoft(this._lists);
          this._widgets = null;
        },
        update: function (a) {
          if (null == this.get_gamepad() || !this.get_gamepad().connected) {
            var b = this.getGamepad(!1);
            this.get_gamepad() != b && this.set_gamepad(b);
          }
          if (this.lastMouseX != g.mouse.x || this.lastMouseY != g.mouse.y)
            (b = this.visible),
              0 == this.scrollFactor.x && 0 == this.scrollFactor.y
                ? this.jumpToXY(g.mouse.screenX, g.mouse.screenY)
                : this.jumpToXY(g.mouse.x, g.mouse.y),
              this.set_visible(b),
              (this.lastMouseX = g.mouse.x),
              (this.lastMouseY = g.mouse.y);
          this._checkKeys();
          this._clickTime += a;
          nc.prototype.update.call(this, a);
        },
        addWidgetsFromUI: function (a) {
          if (null != a.cursorLists) {
            var b = 0;
            for (a = a.cursorLists; b < a.length; ) {
              var c = a[b];
              ++b;
              this.addWidgetList(c);
            }
            this._widgets = this._lists[0].widgets;
            this.set_location(0);
            this.set_listIndex(0);
          } else
            for (b = 0, a = a.group.members; b < a.length; )
              (c = a[b]),
                ++b,
                (za.__implements(c, ij) || c instanceof Na) &&
                  this.addWidget(c);
        },
        jumpToXY: function (a, b) {
          var c = 0,
            d = Infinity,
            e = -1,
            f = -1;
          if (null != this._lists) {
            for (var k = 0, g = this._lists; k < g.length; ) {
              var l = g[k];
              ++k;
              for (var h = 0, u = l.widgets.length; h < u; ) {
                var m = h++,
                  p = l.widgets[m];
                if (
                  1 == p.visible &&
                  a >= p.x &&
                  b >= p.y &&
                  a <= p.x + p.get_width() &&
                  b <= p.y + p.get_height()
                ) {
                  var n = p.x + p.get_width() / 2 - a;
                  p = p.y + p.get_height() / 2 - b;
                  n = n * n + p * p;
                  n < d && ((d = n), (e = c), (f = m));
                }
              }
              ++c;
            }
            if (-1 != e && -1 != f)
              return this.set_listIndex(e), this.set_location(f), !0;
          } else {
            k = 0;
            for (g = this._widgets.length; k < g; )
              (m = k++),
                (p = this._widgets[m]),
                1 == p.visible &&
                  a >= p.x &&
                  b >= p.y &&
                  a <= p.x + p.get_width() &&
                  b <= p.y + p.get_height() &&
                  ((n = p.x + p.get_width() / 2 - a),
                  (p = p.y + p.get_height() / 2 - b),
                  (n = n * n + p * p),
                  n < d && ((d = n), (f = m)));
            if (-1 != f) return this.set_location(f), !0;
          }
          return !1;
        },
        addWidgetList: function (a) {
          for (var b = 0, c = this._lists; b < c.length; ) {
            var d = c[b];
            ++b;
            if (Od.equals(d.widgets, a)) return;
          }
          d = c = Infinity;
          var e = -Infinity,
            f = -Infinity;
          for (b = 0; b < a.length; ) {
            var k = a[b];
            ++b;
            k.x < c && (c = k.x);
            k.y < d && (d = k.y);
            k.x + k.get_width() > e && (e = k.x);
            k.y + k.get_height() > f && (f = k.y);
          }
          1 == this._lists.length &&
          null != this._lists[0].widgets &&
          0 == this._lists[0].widgets.length
            ? ((this._lists[0].widgets = []),
              (this._lists[0].x = c | 0),
              (this._lists[0].y = d | 0),
              (this._lists[0].width = (e - c) | 0),
              (this._lists[0].height = (f - d) | 0),
              (b = this._lists[0]))
            : (this._lists.push({
                x: c | 0,
                y: d | 0,
                width: (e - c) | 0,
                height: (f - d) | 0,
                widgets: [],
              }),
              (b = this._lists[this._lists.length - 1]));
          c = this._widgets;
          this._widgets = b.widgets;
          for (b = 0; b < a.length; ) (d = a[b]), ++b, this.addWidget(d);
          this._widgets = c;
          this._lists.sort(n(this, this._sortXYWidgetList));
          b = 0;
          for (c = this._lists; b < c.length; )
            (a = c[b]), ++b, a.widgets.sort(n(this, this._sortXYVisible));
        },
        addWidget: function (a) {
          if (za.__implements(a, ij)) this._widgets.push(a);
          else if (a instanceof Na) {
            var b = 0;
            for (a = a.group.members; b < a.length; ) {
              var c = a[b];
              ++b;
              za.__implements(c, fd) && this.addWidget(c);
            }
          }
          this._widgets.sort(n(this, this._sortXYVisible));
        },
        setDefaultKeys: function (a) {
          this._defaultCode = a;
          this._clearKeys();
          this._newKeys();
          var b = 1;
          (a & b) == b &&
            (this._addToKeys(this.keysRight, new Vc(9, null, [16])),
            this._addToKeys(this.keysLeft, new Vc(9, [16])),
            this._addToKeys(this.keysClick, new Vc(13)));
          b = 256;
          (a & b) == b &&
            (this._addToKeys(this.keysRight, new Vc(39)),
            this._addToKeys(this.keysLeft, new Vc(37)),
            this._addToKeys(this.keysDown, new Vc(40)),
            this._addToKeys(this.keysUp, new Vc(38)),
            this._addToKeys(this.keysClick, new Vc(13)));
          b = 16;
          (a & b) == b &&
            (this._addToKeys(this.keysRight, new Vc(68)),
            this._addToKeys(this.keysLeft, new Vc(65)),
            this._addToKeys(this.keysDown, new Vc(83)),
            this._addToKeys(this.keysUp, new Vc(87)),
            this._addToKeys(this.keysClick, new Vc(13)));
          b = 4096;
          (a & b) == b &&
            (this._addToKeys(this.keysRight, new Vc(102)),
            this._addToKeys(this.keysLeft, new Vc(100)),
            this._addToKeys(this.keysDown, new Vc(98)),
            this._addToKeys(this.keysUp, new Vc(104)),
            this._addToKeys(this.keysClick, new Vc(13)));
          (null != this._gamepad && this._gamepad.connected) ||
            (this._gamepad = this.getGamepad());
          null != this._gamepad &&
            this._gamepad.connected &&
            ((b = 65536),
            (a & b) == b &&
              (this._addToKeys(this.keysLeft, new vd(this.get_gamepad(), 13)),
              this._addToKeys(this.keysRight, new vd(this.get_gamepad(), 14)),
              this._addToKeys(this.keysDown, new vd(this.get_gamepad(), 12)),
              this._addToKeys(this.keysUp, new vd(this.get_gamepad(), 11)),
              this._addToKeys(this.keysClick, new vd(this.get_gamepad(), 0))),
            (b = 268435456),
            (a & b) == b &&
              (this._addToKeys(this.keysLeft, new vd(this.get_gamepad(), 4)),
              this._addToKeys(this.keysRight, new vd(this.get_gamepad(), 5)),
              this._addToKeys(this.keysClick, new vd(this.get_gamepad(), 0))),
            (b = 1048576),
            (a & b) == b &&
              (this._addToKeys(
                this.keysLeft,
                new xf(this.get_gamepad(), { id: 19, axis: Ee.X, positive: !1 })
              ),
              this._addToKeys(
                this.keysRight,
                new xf(this.get_gamepad(), { id: 19, axis: Ee.X, positive: !0 })
              ),
              this._addToKeys(
                this.keysUp,
                new xf(this.get_gamepad(), { id: 19, axis: Ee.Y, positive: !1 })
              ),
              this._addToKeys(
                this.keysDown,
                new xf(this.get_gamepad(), { id: 19, axis: Ee.Y, positive: !0 })
              ),
              this._addToKeys(this.keysClick, new vd(this.get_gamepad(), 0))),
            (b = 16777216),
            (a & b) == b &&
              (this._addToKeys(
                this.keysLeft,
                new xf(this.get_gamepad(), { id: 20, axis: Ee.X, positive: !1 })
              ),
              this._addToKeys(
                this.keysRight,
                new xf(this.get_gamepad(), { id: 20, axis: Ee.X, positive: !0 })
              ),
              this._addToKeys(
                this.keysUp,
                new xf(this.get_gamepad(), { id: 20, axis: Ee.Y, positive: !1 })
              ),
              this._addToKeys(
                this.keysDown,
                new xf(this.get_gamepad(), { id: 20, axis: Ee.Y, positive: !0 })
              ),
              this._addToKeys(this.keysClick, new vd(this.get_gamepad(), 0))));
        },
        getGamepad: function (a) {
          null == a && (a = !0);
          var b = this.gamepadAutoConnect;
          switch (b._hx_index) {
            case 0:
              var c = null;
              break;
            case 1:
              c = g.gamepads.getFirstActiveGamepad();
              break;
            case 2:
              c = g.gamepads.lastActive;
              break;
            case 3:
              (c = b.i), (c = g.gamepads._activeGamepads[c]);
          }
          if ((null != c && c.connected) || !a) return c;
          b = 0;
          for (a = g.gamepads.get_numActiveGamepads(); b < a; )
            if (
              ((c = b++),
              (c = g.gamepads._activeGamepads[c]),
              null != c && c.connected)
            )
              return c;
          return null;
        },
        _sortXYWidgetList: function (a, b) {
          return a.y < b.y
            ? -1
            : a.y > b.y
            ? 1
            : a.x < b.x
            ? -1
            : a.x > b.x
            ? 1
            : 0;
        },
        _sortXYVisible: function (a, b) {
          return a.visible && !b.visible
            ? -1
            : b.visible && !a.visible
            ? 1
            : a.y < b.y
            ? -1
            : a.y > b.y
            ? 1
            : a.x < b.x
            ? -1
            : a.x > b.x
            ? 1
            : 0;
        },
        _addToKeys: function (a, b) {
          for (var c = !1, d = 0; d < a.length; ) {
            var e = a[d];
            ++d;
            if (b.equals(e)) {
              c = !0;
              break;
            }
          }
          c || a.push(b);
        },
        _clearKeys: function () {
          E.clearArray(this.keysUp);
          this.keysUp = null;
          E.clearArray(this.keysDown);
          this.keysDown = null;
          E.clearArray(this.keysLeft);
          this.keysLeft = null;
          E.clearArray(this.keysRight);
          this.keysRight = null;
          E.clearArray(this.keysClick);
          this.keysClick = null;
        },
        _newKeys: function () {
          this.keysUp = [];
          this.keysDown = [];
          this.keysLeft = [];
          this.keysRight = [];
          this.keysClick = [];
        },
        _checkKeys: function () {
          for (
            var a = 0 == this.visible,
              b = this.location,
              c = 0,
              d = this.keysUp;
            c < d.length;

          ) {
            var e = d[c];
            ++c;
            if (e.justPressed()) {
              this._doInput(0, -1);
              break;
            }
          }
          c = 0;
          for (d = this.keysDown; c < d.length; )
            if (((e = d[c]), ++c, e.justPressed())) {
              this._doInput(0, 1);
              break;
            }
          c = 0;
          for (d = this.keysLeft; c < d.length; )
            if (((e = d[c]), ++c, e.justPressed())) {
              this._doInput(-1, 0);
              break;
            }
          c = 0;
          for (d = this.keysRight; c < d.length; )
            if (((e = d[c]), ++c, e.justPressed())) {
              this._doInput(1, 0);
              break;
            }
          a && this.visible && -1 != b && this.set_location(b);
          this._clickKeysJustPressed() &&
            (this.ignoreNextInput
              ? (this.ignoreNextInput = !1)
              : ((this._clickPressed = !0),
                (this._clickTime = 0),
                this._doPress()));
          this._clickKeysPressed()
            ? ((this._clickPressed = !0), this._doMouseMove())
            : 0 < this._clickTime &&
              this._clickPressed &&
              (this._doRelease(), (this._clickPressed = !1));
        },
        _clickKeysJustPressed: function () {
          for (var a = 0, b = this.keysClick; a < b.length; ) {
            var c = b[a];
            ++a;
            if (c.justPressed()) return !0;
          }
          return !1;
        },
        _clickKeysPressed: function () {
          for (var a = 0, b = this.keysClick; a < b.length; ) {
            var c = b[a];
            ++a;
            if (c.pressed()) return !0;
          }
          return !1;
        },
        _getWidgetPoint: function (a) {
          null == a && (a = g.camera);
          var b = this._widgets[this.location];
          if (null == b) return null;
          var c = null;
          b instanceof ca && (c = b.getScreenPosition());
          c.set_x(c.x * a.totalScaleX);
          c.set_y(c.y * a.totalScaleY);
          if (null == c) {
            var d = b.x;
            c = b.y;
            null == c && (c = 0);
            null == d && (d = 0);
            null == c && (c = 0);
            null == d && (d = 0);
            c = ba.pool.get().set(d, c);
            c._inPool = !1;
          }
          c.set_x(c.x + b.get_width() * a.totalScaleX * 0.5);
          c.set_y(c.y + b.get_height() * a.totalScaleY * 0.5);
          return c;
        },
        _doMouseMove: function (a) {
          var b = !1;
          if (null == a) {
            a = this._getWidgetPoint();
            if (null == a) return;
            b = !0;
          }
          if (this.dispatchEvents) {
            var c = g.mouse;
            c._globalScreenX = (a.x / g.scaleMode.scale.x) | 0;
            c._globalScreenY = (a.y / g.scaleMode.scale.y) | 0;
            c.updatePositions();
            null != this._newMouse &&
              (this._newMouse.updateGlobalScreenPosition = !1);
            var d = sa.get_current().stage,
              e = a.x,
              f = a.y,
              k = sa.get_current().stage;
            c = g.keys.pressed;
            var r = c.keyManager.checkStatusUnsafe(17, c.status);
            c = g.keys.pressed;
            var l = c.keyManager.checkStatusUnsafe(18, c.status);
            c = g.keys.pressed;
            d.dispatchEvent(
              new Gb(
                "mouseMove",
                !0,
                !1,
                e,
                f,
                k,
                r,
                l,
                c.keyManager.checkStatusUnsafe(16, c.status)
              )
            );
          }
          b && a.put();
        },
        _doPress: function (a) {
          var b = this._widgets[this.location];
          if (null != b) {
            var c = !1;
            if (null == a) {
              a = this._getWidgetPoint();
              if (null == a) return;
              c = !0;
            }
            if (this.dispatchEvents) {
              var d = a.x * g.camera.zoom,
                e = a.y * g.camera.zoom,
                f = g.keys.pressed,
                k = f.keyManager.checkStatusUnsafe(17, f.status);
              f = g.keys.pressed;
              var r = f.keyManager.checkStatusUnsafe(18, f.status);
              f = g.keys.pressed;
              f = f.keyManager.checkStatusUnsafe(16, f.status);
              sa.get_current().stage.dispatchEvent(
                new Gb(
                  "mouseDown",
                  !0,
                  !1,
                  d,
                  e,
                  sa.get_current().stage,
                  k,
                  r,
                  f
                )
              );
            }
            null != this.callback && this.callback("cursor_down", b);
            c && a.put();
          }
        },
        _doRelease: function (a) {
          var b = this._widgets[this.location];
          if (null != b) {
            var c = !1;
            if (null == a) {
              a = this._getWidgetPoint();
              if (null == a) return;
              c = !0;
            }
            if (this.dispatchEvents) {
              var d = a.x * g.camera.zoom,
                e = a.y * g.camera.zoom,
                f = g.keys.pressed,
                k = f.keyManager.checkStatusUnsafe(17, f.status);
              f = g.keys.pressed;
              var r = f.keyManager.checkStatusUnsafe(18, f.status);
              f = g.keys.pressed;
              f = f.keyManager.checkStatusUnsafe(16, f.status);
              sa.get_current().stage.dispatchEvent(
                new Gb("mouseUp", !0, !1, d, e, sa.get_current().stage, k, r, f)
              );
              this._clickPressed &&
                sa
                  .get_current()
                  .stage.dispatchEvent(
                    new Gb(
                      "click",
                      !0,
                      !1,
                      d,
                      e,
                      sa.get_current().stage,
                      k,
                      r,
                      f
                    )
                  );
            }
            null != this.callback && this.callback("cursor_click", b);
            c && a.put();
            null != this._newMouse &&
              ((this._newMouse.updateGlobalScreenPosition = !0),
              (f = this._newMouse),
              (a = g.game.get_mouseX() | 0),
              (b = g.game.get_mouseY() | 0),
              (f._globalScreenX = (a / g.scaleMode.scale.x) | 0),
              (f._globalScreenY = (b / g.scaleMode.scale.y) | 0),
              f.updatePositions());
          }
        },
        _findNextY: function (a, b, c, d) {
          var e = 0,
            f = 0,
            k = 0;
          null != c
            ? ((e = c[b].x | 0), (f = c[b].y | 0), (k = c.length))
            : null != d && ((e = d[b].x), (f = d[b].y), (k = d.length));
          for (
            var g = 0,
              l = 0,
              h = Infinity,
              u = Infinity,
              m = h,
              p = u,
              n = -1,
              q = 0;
            q < k;

          ) {
            var z = q++;
            z != b &&
              (null != c
                ? ((g = c[z].x | 0), (l = c[z].y | 0))
                : null != d && ((g = d[z].x), (l = d[z].y)),
              (u = l - f),
              (0 > u ? -1 : 1) == (0 > a ? -1 : 1) &&
                0 != u &&
                ((u = Math.abs(u)),
                u < p
                  ? ((p = u), (m = Math.abs(e - g)), (n = z))
                  : u == p &&
                    ((h = Math.abs(e - g)), h < m && ((m = h), (n = z)))));
          }
          return n;
        },
        _wrapX: function (a, b, c) {
          0 > b + a ? (b = b + a + c) : b + a >= c && (b = b + a - c);
          return b;
        },
        _wrapY: function (a, b, c, d) {
          var e,
            f,
            k = -1;
          var g = Infinity;
          var l = (f = 0),
            h = 0,
            u = 0;
          null != c && ((l = c.length), (h = c[b].x | 0), (u = c[b].y | 0));
          null != d && ((l = d.length), (h = d[b].x), (u = d[b].y));
          for (var m = 0; m < l; ) {
            var p = m++;
            if (p != this.location) {
              var n = (e = 0);
              null != c
                ? ((e = c[p].x | 0), (n = c[p].y | 0))
                : null != d && ((e = d[p].x | 0), (n = d[p].y | 0));
              n -= u;
              ((0 > n ? -1 : 1) == (0 > a ? -1 : 1)) == 0 &&
                0 != n &&
                ((n = Math.abs(n)),
                n > f
                  ? ((f = n), (g = Math.abs(h - e)), (k = p))
                  : n == f &&
                    ((e = Math.abs(h - e)), e < g && ((g = e), (k = p))));
            }
          }
          -1 != k && (b = k);
          return b;
        },
        _doInput: function (a, b, c) {
          null == c && (c = 0);
          if (this.ignoreNextInput) this.ignoreNextInput = !1;
          else {
            var d = null;
            if (0 == b)
              0 <= this.location + a && this.location + a < this._widgets.length
                ? this.set_location(this.location + a)
                : this.wrap &&
                  (1 == this._lists.length
                    ? this.set_location(
                        this._wrapX(a, this.location, this._widgets.length)
                      )
                    : (0 <= this.listIndex + a &&
                      this.listIndex + a < this._lists.length
                        ? this.set_listIndex(this.listIndex + a)
                        : this.set_listIndex(
                            this._wrapX(a, this.listIndex, this._lists.length)
                          ),
                      -1 == a && this.set_location(this._widgets.length - 1))),
                (d = this._widgets[this.location]);
            else {
              var e = this._findNextY(b, this.location, this._widgets, null);
              -1 != e
                ? (this.set_location(e), (d = this._widgets[this.location]))
                : this.wrap &&
                  (1 == this._lists.length
                    ? this.set_location(
                        this._wrapY(b, this.location, this._widgets, null)
                      )
                    : ((d = this._findNextY(
                        b,
                        this.listIndex,
                        null,
                        this._lists
                      )),
                      -1 != d
                        ? this.set_listIndex(d)
                        : this.set_listIndex(
                            this._wrapY(b, this.listIndex, null, this._lists)
                          ),
                      -1 == b && this.set_location(this._widgets.length - 1)),
                  (d = this._widgets[this.location]));
            }
            null != d &&
            null != this._widgets &&
            0 == d.visible &&
            c < this._widgets.length
              ? this._doInput(a, b, c + 1)
              : null != this.callback && this.callback("cursor_jump", d);
          }
        },
        _updateCursor: function () {
          this._widgets = this._lists[this.listIndex].widgets;
          if (0 > this.location || null == this._lists || null == this._widgets)
            this.set_visible(!1);
          else {
            this.set_visible(this.set_active(!0));
            var a = this._widgets[this.location],
              b = !1,
              c = !1;
            if (null != a) {
              var d = a;
              if (d instanceof F) {
                var e = d;
                if (null != e && null != e.scrollFactor) {
                  var f = this.scrollFactor,
                    k = e.scrollFactor.x;
                  e = e.scrollFactor.y;
                  null == e && (e = 0);
                  null == k && (k = 0);
                  f.set_x(k);
                  f.set_y(e);
                }
              }
              a instanceof tb && (d = d.box);
              this.anchor.anchorThing(this, d);
              0 > this.x
                ? (this._flipAnchor("left", d), (b = !0))
                : this.x > g.width + this.get_width() &&
                  (this._flipAnchor("right", d), (b = !0));
              0 > this.y
                ? (this._flipAnchor("top", d), (c = !0))
                : this.y > g.height + this.get_height() &&
                  (this._flipAnchor("bottom", d), (c = !0));
              this.set_flipX(b);
              this.set_flipY(c);
            }
          }
        },
        _flipAnchor: function (a, b) {
          var c = null;
          switch (a) {
            case "bottom":
              "bottom" == this.anchor.y.side &&
                (c = this._bottomAnchor =
                  this.anchor.getFlipped(!0, !1, this._bottomAnchor));
              break;
            case "left":
              "left" == this.anchor.x.side &&
                (c = this._leftAnchor =
                  this.anchor.getFlipped(!0, !1, this._leftAnchor));
              break;
            case "right":
              "right" == this.anchor.x.side &&
                ((this._topAnchor = this.anchor.getFlipped(
                  !0,
                  !1,
                  this._rightAnchor
                )),
                (c = this._rightAnchor));
              break;
            case "top":
              "top" == this.anchor.y.side &&
                (c = this._topAnchor =
                  this.anchor.getFlipped(!0, !1, this._topAnchor));
          }
          null != c && c.anchorThing(this, b);
        },
        __class__: Hi,
        __properties__: q(nc.prototype.__properties__, {
          set_gamepad: "set_gamepad",
          get_gamepad: "get_gamepad",
          set_listIndex: "set_listIndex",
          set_location: "set_location",
        }),
      });
      var Pk = (w["flixel.addons.ui.GamepadAutoConnectPreference"] = {
        __ename__: "flixel.addons.ui.GamepadAutoConnectPreference",
        __constructs__: null,
        Never: {
          _hx_name: "Never",
          _hx_index: 0,
          __enum__: "flixel.addons.ui.GamepadAutoConnectPreference",
          toString: p,
        },
        FirstActive: {
          _hx_name: "FirstActive",
          _hx_index: 1,
          __enum__: "flixel.addons.ui.GamepadAutoConnectPreference",
          toString: p,
        },
        LastActive: {
          _hx_name: "LastActive",
          _hx_index: 2,
          __enum__: "flixel.addons.ui.GamepadAutoConnectPreference",
          toString: p,
        },
        GamepadID:
          ((x = function (a) {
            return {
              _hx_index: 3,
              i: a,
              __enum__: "flixel.addons.ui.GamepadAutoConnectPreference",
              toString: p,
            };
          }),
          (x._hx_name = "GamepadID"),
          (x.__params__ = ["i"]),
          x),
      });
      Pk.__constructs__ = [
        Pk.Never,
        Pk.FirstActive,
        Pk.LastActive,
        Pk.GamepadID,
      ];
      var Tg = function (a, b, c, d, e, f, k, g) {
        null == b && (b = 0);
        null == a && (a = 0);
        this.dropDirection = kj.Automatic;
        this.list = [];
        Na.call(this, a, b);
        this.callback = d;
        this.header = e;
        this.dropPanel = f;
        null == this.header && (this.header = new gj());
        null == this.dropPanel &&
          ((a = new ha(
            0,
            0,
            this.header.background.get_width(),
            this.header.background.get_height()
          )),
          (this.dropPanel = new ea(
            0,
            0,
            "flixel/flixel-ui/img/box.png",
            a,
            [1, 1, 14, 14]
          )));
        if (null != c) {
          a = 0;
          for (k = c.length; a < k; )
            (b = a++),
              (d = c[b]),
              this.list.push(this.makeListButton(b, d.label, d.name));
          this.selectSomething(c[0].name, c[0].label);
        } else if (null != k)
          for (a = 0; a < k.length; )
            (c = k[a]),
              ++a,
              this.list.push(c),
              c.resize(
                this.header.background.get_width(),
                this.header.background.get_height()
              ),
              c.set_x(1);
        this.updateButtonPositions();
        this.dropPanel.resize(
          this.header.background.get_width(),
          this.getPanelHeight()
        );
        this.dropPanel.set_visible(!1);
        this.add(this.dropPanel);
        a = 0;
        for (k = this.list; a < k.length; )
          (c = k[a]), ++a, this.add(c), c.set_visible(!1);
        this.header.button.onUp.callback = n(this, this.onDropdown);
        this.add(this.header);
      };
      h["flixel.addons.ui.FlxUIDropDownMenu"] = Tg;
      Tg.__name__ = "flixel.addons.ui.FlxUIDropDownMenu";
      Tg.__interfaces__ = [le, Re, fd];
      Tg.__super__ = Na;
      Tg.prototype = q(Na.prototype, {
        set_skipButtonUpdate: function (a) {
          this.skipButtonUpdate = a;
          this.header.button.set_skipButtonUpdate(a);
          return a;
        },
        set_selectedId: function (a) {
          if (this._selectedId == a) return a;
          for (var b = 0, c = 0, d = this.list; c < d.length; ) {
            var e = d[c];
            ++c;
            if (null != e && e.name == a) {
              b = this.list[b];
              this._selectedId = a;
              null != b.label
                ? ((this._selectedLabel = b.label.text),
                  this.header.text.set_text(b.label.text))
                : ((this._selectedLabel = ""), this.header.text.set_text(""));
              break;
            }
            ++b;
          }
          return a;
        },
        set_selectedLabel: function (a) {
          if (this._selectedLabel == a) return a;
          for (var b = 0, c = 0, d = this.list; c < d.length; ) {
            var e = d[c];
            ++c;
            if (e.label.text == a) {
              this._selectedId = this.list[b].name;
              this._selectedLabel = a;
              this.header.text.set_text(a);
              break;
            }
            ++b;
          }
          return a;
        },
        set_params: function (a) {
          return (this.params = a);
        },
        updateButtonPositions: function () {
          var a = this.header.background.get_height();
          this.dropPanel.set_y(this.header.background.y);
          if (this.dropsUp()) {
            var b = this.dropPanel;
            b.set_y(b.y - this.getPanelHeight());
          } else (b = this.dropPanel), b.set_y(b.y + a);
          b = this.dropPanel.y;
          for (var c = 0, d = this.list; c < d.length; ) {
            var e = d[c];
            ++c;
            e.set_y(b);
            b += a;
          }
        },
        set_visible: function (a) {
          for (
            var b = this.dropPanel.visible, c = [], d = 0, e = this.list.length;
            d < e;

          ) {
            var f = d++;
            null != this.list[f] ? c.push(this.list[f].visible) : c.push(!1);
          }
          Na.prototype.set_visible.call(this, a);
          this.dropPanel.set_visible(b);
          d = 0;
          for (e = this.list.length; d < e; )
            (f = d++), null != this.list[f] && this.list[f].set_visible(c[f]);
          return a;
        },
        dropsUp: function () {
          return this.dropDirection != kj.Up
            ? this.dropDirection == kj.Automatic
              ? this.exceedsHeight()
              : !1
            : !0;
        },
        exceedsHeight: function () {
          return (
            this.y +
              this.getPanelHeight() +
              this.header.background.get_height() >
            g.height
          );
        },
        getPanelHeight: function () {
          return this.list.length * this.header.background.get_height();
        },
        selectSomething: function (a, b) {
          this.header.text.set_text(b);
          this.set_selectedId(a);
          this.set_selectedLabel(b);
        },
        makeListButton: function (a, b, c) {
          b = new gd(0, 0, b);
          b.broadcastToFlxUI = !1;
          var d = n(this, this.onClickItem);
          b.onUp.callback = function () {
            d(a);
          };
          b.name = c;
          b.loadGraphicSlice9(
            [
              "flixel/flixel-ui/img/invis.png",
              "flixel/flixel-ui/img/hilight.png",
              "flixel/flixel-ui/img/hilight.png",
            ],
            this.header.background.get_width() | 0,
            this.header.background.get_height() | 0,
            [
              [1, 1, 3, 3],
              [1, 1, 3, 3],
              [1, 1, 3, 3],
            ],
            0
          );
          c = b.labelOffsets;
          c[2].set_y(c[2].y - 1);
          b.up_color = -16777216;
          b.over_color = -1;
          b.down_color = -1;
          b.resize(
            this.header.background.get_width() - 2,
            this.header.background.get_height() - 1
          );
          b.label.set_alignment("left");
          b.autoCenterLabel();
          b.set_x(1);
          c = 0;
          for (var e = b.labelOffsets; c < e.length; ) {
            var f = e[c];
            ++c;
            f.set_x(f.x + 2);
          }
          return b;
        },
        update: function (a) {
          Na.prototype.update.call(this, a);
          this.dropPanel.visible &&
            2 == g.mouse._leftButton.current &&
            (g.mouse.overlaps(this) || this.showList(!1));
        },
        destroy: function () {
          Na.prototype.destroy.call(this);
          this.dropPanel = V.destroy(this.dropPanel);
          this.list = V.destroyArray(this.list);
          this.callback = null;
        },
        showList: function (a) {
          for (var b = 0, c = this.list; b < c.length; ) {
            var d = c[b];
            ++b;
            d.set_visible(a);
            d.set_active(a);
          }
          this.dropPanel.set_visible(a);
          Ea.forceFocus(a, this);
        },
        onDropdown: function () {
          this.dropPanel.visible ? this.showList(!1) : this.showList(!0);
        },
        onClickItem: function (a) {
          a = this.list[a];
          this.selectSomething(a.name, a.label.text);
          this.showList(!1);
          null != this.callback && this.callback(a.name);
          this.broadcastToFlxUI &&
            Ea.event("click_dropdown", this, a.name, this.params);
        },
        __class__: Tg,
        __properties__: q(Na.prototype.__properties__, {
          set_params: "set_params",
          set_selectedLabel: "set_selectedLabel",
          set_selectedId: "set_selectedId",
          set_skipButtonUpdate: "set_skipButtonUpdate",
        }),
      });
      var gj = function (a, b, c, d) {
        null == a && (a = 120);
        Na.call(this);
        this.background = b;
        this.text = c;
        this.button = d;
        null == this.background &&
          (this.background = new ea(
            0,
            0,
            "flixel/flixel-ui/img/box.png",
            new ha(0, 0, a, 20),
            [1, 1, 14, 14]
          ));
        null == this.button &&
          ((this.button = new Be(
            0,
            0,
            new F(0, 0, "flixel/flixel-ui/img/dropdown_mark.png")
          )),
          this.button.loadGraphicSlice9(
            ["flixel/flixel-ui/img/button_thin.png"],
            80,
            20,
            [Bb.toIntArray("6,6,11,11")],
            0,
            -1,
            !1,
            18,
            18
          ));
        this.button.resize(
          this.background.get_height(),
          this.background.get_height()
        );
        this.button.set_x(
          this.background.x +
            this.background.get_width() -
            this.button.get_width()
        );
        this.button.set_width(a);
        b = this.button;
        b.offset.set_x(b.offset.x - (a - this.button.frameWidth));
        this.button.set_x(this.offset.x);
        b = this.button.label;
        b.offset.set_x(b.offset.x + this.button.offset.x);
        null == this.text &&
          (this.text = new Ed(0, 0, this.background.get_width() | 0));
        this.text.setPosition(2, 4);
        this.text.set_color(-16777216);
        this.add(this.background);
        this.add(this.button);
        this.add(this.text);
      };
      h["flixel.addons.ui.FlxUIDropDownHeader"] = gj;
      gj.__name__ = "flixel.addons.ui.FlxUIDropDownHeader";
      gj.__super__ = Na;
      gj.prototype = q(Na.prototype, {
        destroy: function () {
          Na.prototype.destroy.call(this);
          this.background = V.destroy(this.background);
          this.text = V.destroy(this.text);
          this.button = V.destroy(this.button);
        },
        __class__: gj,
      });
      var kj = (w["flixel.addons.ui.FlxUIDropDownMenuDropDirection"] = {
        __ename__: "flixel.addons.ui.FlxUIDropDownMenuDropDirection",
        __constructs__: null,
        Automatic: {
          _hx_name: "Automatic",
          _hx_index: 0,
          __enum__: "flixel.addons.ui.FlxUIDropDownMenuDropDirection",
          toString: p,
        },
        Down: {
          _hx_name: "Down",
          _hx_index: 1,
          __enum__: "flixel.addons.ui.FlxUIDropDownMenuDropDirection",
          toString: p,
        },
        Up: {
          _hx_name: "Up",
          _hx_index: 2,
          __enum__: "flixel.addons.ui.FlxUIDropDownMenuDropDirection",
          toString: p,
        },
      });
      kj.__constructs__ = [kj.Automatic, kj.Down, kj.Up];
      var qb = function (a, b, c, d, e, f, k, g) {
        this.broadcastToFlxUI = !0;
        Sg.call(this, a, b, c, d, e, f, k, g);
      };
      h["flixel.addons.ui.FlxUIInputText"] = qb;
      qb.__name__ = "flixel.addons.ui.FlxUIInputText";
      qb.__interfaces__ = [le, fd, Wc];
      qb.__super__ = Sg;
      qb.prototype = q(Sg.prototype, {
        resize: function (a, b) {
          this.set_width(a);
          this.set_height(b);
          this.calcFrame();
        },
        onChange: function (a) {
          Sg.prototype.onChange.call(this, a);
          if (this.broadcastToFlxUI)
            switch (a) {
              case "backspace":
              case "delete":
                Ea.event("delete_input_text", this, this.text, this.params);
                Ea.event("change_input_text", this, this.text, this.params);
                break;
              case "enter":
                Ea.event("enter_input_text", this, this.text, this.params);
                break;
              case "input":
                Ea.event("input_input_text", this, this.text, this.params),
                  Ea.event("change_input_text", this, this.text, this.params);
            }
        },
        __class__: qb,
      });
      var hj = function (a, b, c, d, e, f) {
        this.thickness = 1;
        this.length = 10;
        this.axis = Ug.HORIZONTAL;
        nc.call(this, a, b);
        this.makeGraphic(2, 2, -1);
        this.set_color(f);
        this.set_axis(c);
        this.set_length(d);
        this.set_thickness(e);
      };
      h["flixel.addons.ui.FlxUILine"] = hj;
      hj.__name__ = "flixel.addons.ui.FlxUILine";
      hj.__interfaces__ = [Wc];
      hj.__super__ = nc;
      hj.prototype = q(nc.prototype, {
        set_axis: function (a) {
          this.axis = a;
          this.refresh();
          return a;
        },
        set_length: function (a) {
          this.length = a;
          this.refresh();
          return a;
        },
        set_thickness: function (a) {
          this.thickness = a;
          this.refresh();
          return a;
        },
        refresh: function () {
          if (this.axis == Ug.HORIZONTAL)
            var a = this.scale,
              b = 0.5 * this.length,
              c = 0.5 * this.thickness;
          else
            (a = this.scale),
              (b = 0.5 * this.thickness),
              (c = 0.5 * this.length);
          null == c && (c = 0);
          null == b && (b = 0);
          a.set_x(b);
          a.set_y(c);
          this.updateHitbox();
        },
        resize: function (a, b) {
          this.axis == Ug.HORIZONTAL
            ? (this.set_length(a), this.set_thickness(b))
            : (this.set_length(b), this.set_thickness(a));
        },
        __class__: hj,
        __properties__: q(nc.prototype.__properties__, {
          set_thickness: "set_thickness",
          set_length: "set_length",
          set_axis: "set_axis",
        }),
      });
      var Ug = (w["flixel.addons.ui.LineAxis"] = {
        __ename__: "flixel.addons.ui.LineAxis",
        __constructs__: null,
        HORIZONTAL: {
          _hx_name: "HORIZONTAL",
          _hx_index: 0,
          __enum__: "flixel.addons.ui.LineAxis",
          toString: p,
        },
        VERTICAL: {
          _hx_name: "VERTICAL",
          _hx_index: 1,
          __enum__: "flixel.addons.ui.LineAxis",
          toString: p,
        },
      });
      Ug.__constructs__ = [Ug.HORIZONTAL, Ug.VERTICAL];
      var Qk = function (a, b, c, d, e, f, k, g, l, h, u, m) {
        null == g && (g = 0);
        null == k && (k = 1);
        null == f && (f = "<X> more...");
        null == e && (e = 0);
        null == d && (d = 0);
        null == b && (b = 0);
        null == a && (a = 0);
        this._skipRefresh = !1;
        this.scrollIndex = 0;
        this._skipRefresh = !0;
        Na.call(this, a, b);
        this.set_stacking(k);
        this.set_spacing(g);
        if (null != c)
          for (var r = 0; r < c.length; ) (a = c[r]), ++r, this.add(a);
        this.prevButton = u;
        this.nextButton = m;
        this.prevButtonOffset = l;
        this.nextButtonOffset = h;
        this.set_moreString(f);
        if (null == this.prevButton)
          (r = n(this, this.onClick)),
            (c = new gd(0, 0, " ", function () {
              r(-1);
            })),
            0 == this.stacking
              ? (c.loadGraphicsUpOverDown(
                  "flixel/flixel-ui/img/button_arrow_left.png"
                ),
                c.label.set_width(c.label.set_fieldWidth(100)),
                c.label.set_text(this.getMoreString(0)),
                c.setAllLabelOffsets(
                  c.get_width() - c.label.get_width(),
                  c.get_height() + 2
                ),
                c.label.set_alignment("right"))
              : (c.loadGraphicsUpOverDown(
                  "flixel/flixel-ui/img/button_arrow_up.png"
                ),
                c.label.set_width(c.label.set_fieldWidth(100)),
                c.label.set_text(this.getMoreString(0)),
                c.setAllLabelOffsets(0, 0),
                c.setCenterLabelOffset(
                  c.get_width() + 2,
                  c.get_height() - c.label.get_height()
                ),
                c.label.set_alignment("left")),
            (this.prevButton = c);
        else {
          if (this.prevButton instanceof gd) {
            c = this.prevButton;
            var J = n(this, this.onClick);
            c.onUp.callback = function () {
              J(-1);
            };
          }
          if (this.prevButton instanceof Be) {
            c = this.prevButton;
            var p = n(this, this.onClick);
            c.onUp.callback = function () {
              p(-1);
            };
          }
        }
        if (null == this.nextButton) {
          var q = n(this, this.onClick);
          c = new gd(0, 0, " ", function () {
            q(1);
          });
          0 == this.stacking
            ? (c.loadGraphicsUpOverDown(
                "flixel/flixel-ui/img/button_arrow_right.png"
              ),
              c.label.set_width(c.label.set_fieldWidth(100)),
              c.label.set_text(this.getMoreString(0)),
              c.setAllLabelOffsets(0, c.get_height() + 2))
            : (c.loadGraphicsUpOverDown(
                "flixel/flixel-ui/img/button_arrow_down.png"
              ),
              c.label.set_width(c.label.set_fieldWidth(100)),
              c.label.set_text(this.getMoreString(0)),
              c.setAllLabelOffsets(0, 0),
              c.setCenterLabelOffset(c.get_width() + 2, 0));
          c.label.set_alignment("left");
          this.nextButton = c;
        } else {
          if (this.nextButton instanceof gd) {
            c = this.nextButton;
            var z = n(this, this.onClick);
            c.onUp.callback = function () {
              z(1);
            };
          }
          if (this.nextButton instanceof Be) {
            c = this.nextButton;
            var t = n(this, this.onClick);
            c.onUp.callback = function () {
              t(1);
            };
          }
        }
        null == this.prevButtonOffset &&
          ((c = f = 0),
          null == c && (c = 0),
          null == f && (f = 0),
          null == c && (c = 0),
          null == f && (f = 0),
          (c = ba.pool.get().set(f, c)),
          (c._inPool = !1),
          (this.prevButtonOffset = c));
        null == this.nextButtonOffset &&
          ((c = f = 0),
          null == c && (c = 0),
          null == f && (f = 0),
          null == c && (c = 0),
          null == f && (f = 0),
          (c = ba.pool.get().set(f, c)),
          (c._inPool = !1),
          (this.nextButtonOffset = c));
        this._skipRefresh = !1;
        this.setSize(d, e);
      };
      h["flixel.addons.ui.FlxUIList"] = Qk;
      Qk.__name__ = "flixel.addons.ui.FlxUIList";
      Qk.__super__ = Na;
      Qk.prototype = q(Na.prototype, {
        set_scrollIndex: function (a) {
          this.scrollIndex = a;
          this.refreshList();
          return a;
        },
        set_stacking: function (a) {
          this.stacking = a;
          this.refreshList();
          return a;
        },
        set_spacing: function (a) {
          this.spacing = a;
          this.refreshList();
          return a;
        },
        set_moreString: function (a) {
          this.moreString = a;
          this.refreshList();
          return this.moreString;
        },
        destroy: function () {
          this.prevButton = V.destroy(this.prevButton);
          this.nextButton = V.destroy(this.nextButton);
          this.prevButtonOffset = V.put(this.prevButtonOffset);
          this.nextButtonOffset = V.put(this.nextButtonOffset);
          Na.prototype.destroy.call(this);
        },
        setSize: function (a, b) {
          var c = !1;
          0 == this._skipRefresh && (c = this._skipRefresh = !0);
          this.set_width(a);
          this.set_height(b);
          c && (this._skipRefresh = !1);
          this.refreshList();
        },
        add: function (a) {
          Na.prototype.add.call(this, a);
          this.refreshList();
          return a;
        },
        safeAdd: function (a) {
          return Na.prototype.add.call(this, a);
        },
        getMoreString: function (a) {
          for (var b = this.moreString; -1 != b.indexOf("<X>"); )
            b = K.replace(b, "<X>", null == a ? "null" : "" + a);
          return b;
        },
        set_visible: function (a) {
          Na.prototype.set_visible.call(this, a);
          this.refreshList();
          return a;
        },
        onClick: function (a) {
          this.set_scrollIndex(this.scrollIndex + a);
          this.refreshList();
        },
        refreshList: function () {
          if (!this._skipRefresh) {
            this.autoBounds = !1;
            -1 != this.group.members.indexOf(this.prevButton) &&
              this.remove(this.prevButton, !0);
            -1 != this.group.members.indexOf(this.nextButton) &&
              this.remove(this.nextButton, !0);
            var a = 0,
              b = 0,
              c = 0;
            0 == this.stacking
              ? (this.prevButton.set_x(
                  this.prevButtonOffset.x - this.prevButton.get_width() - 2
                ),
                this.prevButton.set_y(this.prevButtonOffset.y),
                this.nextButton.set_x(
                  this.nextButtonOffset.x + this.get_width() + 2
                ),
                this.nextButton.set_y(this.nextButtonOffset.y))
              : (this.prevButton.set_x(this.prevButtonOffset.x),
                this.prevButton.set_y(
                  this.prevButtonOffset.y - this.prevButton.get_height() - 2
                ),
                this.nextButton.set_x(this.nextButtonOffset.x),
                this.nextButton.set_y(
                  this.nextButtonOffset.y + this.get_height() + 2
                ));
            this.prevButton.set_x(this.prevButton.x | 0);
            this.prevButton.set_y(this.prevButton.y | 0);
            this.nextButton.set_x(this.nextButton.x | 0);
            this.nextButton.set_y(this.nextButton.y | 0);
            for (var d = 0, e = 0, f = this.group.members; e < f.length; ) {
              var k = f[e];
              ++e;
              var g = !1;
              c >= this.scrollIndex &&
                (g =
                  1 == this.stacking
                    ? b + k.get_height() <= this.get_height() ||
                      0 >= this.get_height()
                    : a + k.get_width() <= this.get_width() ||
                      0 >= this.get_width());
              g
                ? ((d = c),
                  k.set_visible(k.set_active(!0)),
                  k.set_x(this.x + a),
                  k.set_y(this.y + b),
                  1 == this.stacking
                    ? (b += k.get_height() + this.spacing)
                    : (a += k.get_width() + this.spacing))
                : (k.set_x(k.set_y(0)), k.set_visible(k.set_active(!1)));
              ++c;
            }
            this.amountPrevious = this.scrollIndex;
            this.amountNext = this.group.members.length - (d + 1);
            0 < this.amountPrevious &&
              (this.safeAdd(this.prevButton),
              this.prevButton instanceof gd &&
                ((a = this.prevButton),
                a.label.set_text(this.getMoreString(this.amountPrevious))));
            0 < this.amountNext &&
              (this.safeAdd(this.nextButton),
              this.nextButton instanceof gd &&
                ((a = this.nextButton),
                a.label.set_text(this.getMoreString(this.amountNext))));
          }
        },
        get_width: function () {
          return this.width;
        },
        get_height: function () {
          return this.height;
        },
        set_width: function (a) {
          this.width = a;
          this.refreshList();
          return a;
        },
        set_height: function (a) {
          this.height = a;
          this.refreshList();
          return a;
        },
        __class__: Qk,
        __properties__: q(Na.prototype.__properties__, {
          set_moreString: "set_moreString",
          set_spacing: "set_spacing",
          set_stacking: "set_stacking",
          set_scrollIndex: "set_scrollIndex",
        }),
      });
      var Yc = function () {
        this.x =
          this.y =
          this.screenX =
          this.screenY =
          this._globalScreenX =
          this._globalScreenY =
            0;
      };
      h["flixel.input.FlxPointer"] = Yc;
      Yc.__name__ = "flixel.input.FlxPointer";
      Yc.prototype = {
        getWorldPosition: function (a, b) {
          null == a && (a = g.camera);
          if (null == b) {
            var c = (b = 0);
            null == c && (c = 0);
            null == b && (b = 0);
            b = ba.pool.get().set(b, c);
            b._inPool = !1;
          }
          this.getScreenPosition(a, Yc._cachedPoint);
          b.set_x(Yc._cachedPoint.x + a.scroll.x);
          b.set_y(Yc._cachedPoint.y + a.scroll.y);
          return b;
        },
        getScreenPosition: function (a, b) {
          null == a && (a = g.camera);
          if (null == b) {
            var c = (b = 0);
            null == c && (c = 0);
            null == b && (b = 0);
            b = ba.pool.get().set(b, c);
            b._inPool = !1;
          }
          b.set_x(
            (this._globalScreenX -
              a.x +
              0.5 * a.width * (a.zoom - a.initialZoom)) /
              a.zoom
          );
          b.set_y(
            (this._globalScreenY -
              a.y +
              0.5 * a.height * (a.zoom - a.initialZoom)) /
              a.zoom
          );
          return b;
        },
        getPositionInCameraView: function (a, b) {
          null == a && (a = g.camera);
          if (null == b) {
            var c = (b = 0);
            null == c && (c = 0);
            null == b && (b = 0);
            b = ba.pool.get().set(b, c);
            b._inPool = !1;
          }
          b.set_x((this._globalScreenX - a.x) / a.zoom + a.viewMarginX);
          b.set_y((this._globalScreenY - a.y) / a.zoom + a.viewMarginY);
          return b;
        },
        overlaps: function (a, b) {
          var c = this,
            d = !1,
            e = ma.resolveGroup(a);
          null != e
            ? e.forEachExists(function (a) {
                c.overlaps(a, b) && (d = !0);
              })
            : (this.getWorldPosition(b, Yc._cachedPoint),
              (d = a.overlapsPoint(Yc._cachedPoint, !0, b)));
          return d;
        },
        updatePositions: function () {
          this.getScreenPosition(g.camera, Yc._cachedPoint);
          this.screenX = Yc._cachedPoint.x | 0;
          this.screenY = Yc._cachedPoint.y | 0;
          this.getWorldPosition(g.camera, Yc._cachedPoint);
          this.x = Yc._cachedPoint.x | 0;
          this.y = Yc._cachedPoint.y | 0;
        },
        __class__: Yc,
      };
      var Wg = function () {};
      h["flixel.input.IFlxInputManager"] = Wg;
      Wg.__name__ = "flixel.input.IFlxInputManager";
      Wg.__isInterface__ = !0;
      Wg.__interfaces__ = [U];
      Wg.prototype = { __class__: Wg };
      var rg = function (a) {
        this._prevX = this._prevY = this._prevScreenX = this._prevScreenY = 0;
        this._visibleWhenFocusLost = !0;
        this._wheelUsed = !1;
        this._cursor = null;
        this.useSystemCursor = !1;
        this.visible = !0;
        this.wheel = 0;
        this.enabled = !0;
        Yc.call(this);
        this.cursorContainer = a;
        this.cursorContainer.mouseChildren = !1;
        this.cursorContainer.mouseEnabled = !1;
        this._leftButton = new Ge(-1);
        this._stage = sa.get_current().stage;
        this._stage.addEventListener(
          "mouseDown",
          ((x = this._leftButton), n(x, x.onDown))
        );
        this._stage.addEventListener(
          "mouseUp",
          ((x = this._leftButton), n(x, x.onUp))
        );
        this._middleButton = new Ge(-2);
        this._rightButton = new Ge(-3);
        this._stage.addEventListener(
          "middleMouseDown",
          ((x = this._middleButton), n(x, x.onDown))
        );
        this._stage.addEventListener(
          "middleMouseUp",
          ((x = this._middleButton), n(x, x.onUp))
        );
        this._stage.addEventListener(
          "rightMouseDown",
          ((x = this._rightButton), n(x, x.onDown))
        );
        this._stage.addEventListener(
          "rightMouseUp",
          ((x = this._rightButton), n(x, x.onUp))
        );
        this._stage.addEventListener("mouseLeave", n(this, this.onMouseLeave));
        this._stage.addEventListener("mouseWheel", n(this, this.onMouseWheel));
        g.signals.postGameStart.add(n(this, this.onGameStart));
        Zc.hide();
      };
      h["flixel.input.mouse.FlxMouse"] = rg;
      rg.__name__ = "flixel.input.mouse.FlxMouse";
      rg.__interfaces__ = [Wg];
      rg.__super__ = Yc;
      rg.prototype = q(Yc.prototype, {
        load: function (a, b, c, d) {
          null == d && (d = 0);
          null == c && (c = 0);
          null == b && (b = 1);
          null != this._cursor &&
            V.removeChild(this.cursorContainer, this._cursor);
          null == a && (a = new He(0, 0));
          za.__instanceof(a, $m)
            ? (this._cursor = zb.createInstance(a, []))
            : a instanceof S
            ? (this._cursor = new lc(a))
            : "string" == typeof a
            ? (aa.exists(a)
                ? (a = aa.getBitmapData(a, !1))
                : (g.log.advanced(
                    "Could not find a BitmapData asset with ID '" + a + "'.",
                    Ja.ERROR,
                    !0
                  ),
                  (a = null)),
              (this._cursor = new lc(a)))
            : (this._cursor = new lc(new He(0, 0)));
          this._cursor.set_x(c);
          this._cursor.set_y(d);
          this._cursor.set_scaleX(b);
          this._cursor.set_scaleY(b);
          this.cursorContainer.addChild(this._cursor);
        },
        destroy: function () {
          null != this._stage &&
            (this._stage.removeEventListener(
              "mouseDown",
              ((x = this._leftButton), n(x, x.onDown))
            ),
            this._stage.removeEventListener(
              "mouseUp",
              ((x = this._leftButton), n(x, x.onUp))
            ),
            this._stage.removeEventListener(
              "middleMouseDown",
              ((x = this._middleButton), n(x, x.onDown))
            ),
            this._stage.removeEventListener(
              "middleMouseUp",
              ((x = this._middleButton), n(x, x.onUp))
            ),
            this._stage.removeEventListener(
              "rightMouseDown",
              ((x = this._rightButton), n(x, x.onDown))
            ),
            this._stage.removeEventListener(
              "rightMouseUp",
              ((x = this._rightButton), n(x, x.onUp))
            ),
            this._stage.removeEventListener(
              "mouseLeave",
              n(this, this.onMouseLeave)
            ),
            this._stage.removeEventListener(
              "mouseWheel",
              n(this, this.onMouseWheel)
            ));
          this._cursor = this.cursorContainer = null;
          this._leftButton = V.destroy(this._leftButton);
          this._middleButton = V.destroy(this._middleButton);
          this._rightButton = V.destroy(this._rightButton);
          this._cursorBitmapData = V.dispose(this._cursorBitmapData);
          g.signals.postGameStart.remove(n(this, this.onGameStart));
        },
        reset: function () {
          this._leftButton.reset();
          this._middleButton.reset();
          this._rightButton.reset();
        },
        update: function () {
          this._prevX = this.x;
          this._prevY = this.y;
          this._prevScreenX = this.screenX;
          this._prevScreenY = this.screenY;
          var a = g.game.get_mouseX(),
            b = g.game.get_mouseY();
          this._globalScreenX = (a / g.scaleMode.scale.x) | 0;
          this._globalScreenY = (b / g.scaleMode.scale.y) | 0;
          this.updatePositions();
          this.visible &&
            (this.cursorContainer.set_x(g.game.get_mouseX()),
            this.cursorContainer.set_y(g.game.get_mouseY()));
          this._leftButton.update();
          this._middleButton.update();
          this._rightButton.update();
          this._wheelUsed || (this.wheel = 0);
          this._wheelUsed = !1;
        },
        onFocus: function () {
          this.reset();
          this.set_useSystemCursor(this.useSystemCursor);
          this.set_visible(this._visibleWhenFocusLost);
        },
        onFocusLost: function () {
          (this._visibleWhenFocusLost = this.visible) && this.set_visible(!1);
          Zc.show();
        },
        onGameStart: function () {
          this.set_visible(this.visible);
        },
        onMouseWheel: function (a) {
          this.enabled && ((this._wheelUsed = !0), (this.wheel = a.delta));
        },
        onMouseLeave: function (a) {
          this._rightButton.onUp();
          this._middleButton.onUp();
        },
        showSystemCursor: function () {
          this.cursorContainer.set_visible(!1);
          Zc.show();
        },
        hideSystemCursor: function () {
          Zc.hide();
          this.visible && this.cursorContainer.set_visible(!0);
        },
        set_useSystemCursor: function (a) {
          a ? this.showSystemCursor() : this.hideSystemCursor();
          return (this.useSystemCursor = a);
        },
        showCursor: function () {
          this.useSystemCursor
            ? Zc.show()
            : (null == this._cursor && this.load(),
              this.cursorContainer.set_visible(!0),
              Zc.hide());
        },
        hideCursor: function () {
          this.cursorContainer.set_visible(!1);
          Zc.hide();
        },
        set_visible: function (a) {
          a ? this.showCursor() : this.hideCursor();
          return (this.visible = a);
        },
        __class__: rg,
        __properties__: {
          set_useSystemCursor: "set_useSystemCursor",
          set_visible: "set_visible",
        },
      });
      var jj = function (a) {
        this.updateGlobalScreenPosition = !0;
        rg.call(this, a);
      };
      h["flixel.addons.ui.FlxUIMouse"] = jj;
      jj.__name__ = "flixel.addons.ui.FlxUIMouse";
      jj.__super__ = rg;
      jj.prototype = q(rg.prototype, {
        update: function () {
          var a = this._globalScreenX,
            b = this._globalScreenY;
          rg.prototype.update.call(this);
          this.updateGlobalScreenPosition ||
            ((this._globalScreenX = a), (this._globalScreenY = b));
        },
        __class__: jj,
      });
      var Jb = function (a, b, c, d, e, f, k, g, l, h, u, m) {
        null == m && (m = !1);
        null == g && (g = 1);
        null == k && (k = 0);
        null == f && (f = 999);
        null == e && (e = -999);
        null == d && (d = 0);
        null == c && (c = 1);
        null == b && (b = 0);
        null == a && (a = 0);
        this.isPercent = !1;
        this.stack = 1;
        this.value = 0;
        this.max = 10;
        this.stepSize = this.decimals = this.min = 0;
        Na.call(this, a, b);
        null == l && (l = new qb(0, 0, 25));
        l.set_x(0);
        l.set_y(0);
        this.text_field = l;
        this.text_field.set_text(null == d ? "null" : "" + d);
        this.text_field instanceof qb &&
          ((a = this.text_field),
          a.set_lines(1),
          (a.callback = n(this, this._onInputTextEvent)),
          (a.broadcastToFlxUI = !1));
        this.stepSize = c;
        this.set_decimals(k);
        this.set_min(e);
        this.set_max(f);
        this.set_value(d);
        this.set_isPercent(m);
        c = 1 + l.get_height();
        null == h &&
          ((h = new tc(0, 0)),
          h.loadGraphicSlice9(
            ["flixel/flixel-ui/img/button_thin.png"],
            c,
            c,
            [Bb.toIntArray("2,2,15,15")],
            0,
            -1,
            !1,
            18,
            18
          ),
          h.set_label(new F(0, 0, "flixel/flixel-ui/img/plus_mark.png")));
        null == u &&
          ((u = new tc(0, 0)),
          u.loadGraphicSlice9(
            ["flixel/flixel-ui/img/button_thin.png"],
            c,
            c,
            [Bb.toIntArray("2,2,15,15")],
            0,
            -1,
            !1,
            18,
            18
          ),
          u.set_label(new F(0, 0, "flixel/flixel-ui/img/minus_mark.png")));
        this.button_plus = h;
        this.button_minus = u;
        this.add(this.text_field);
        this.add(this.button_plus);
        this.add(this.button_minus);
        this.button_plus.onUp.callback = n(this, this._onPlus);
        this.button_plus.broadcastToFlxUI = !1;
        this.button_minus.onUp.callback = n(this, this._onMinus);
        this.button_minus.broadcastToFlxUI = !1;
        this.set_stack(g);
      };
      h["flixel.addons.ui.FlxUINumericStepper"] = Jb;
      Jb.__name__ = "flixel.addons.ui.FlxUINumericStepper";
      Jb.__interfaces__ = [le, Re, fd];
      Jb.__super__ = Na;
      Jb.prototype = q(Na.prototype, {
        set_params: function (a) {
          return (this.params = a);
        },
        set_skipButtonUpdate: function (a) {
          this.skipButtonUpdate = a;
          this.button_plus.set_skipButtonUpdate(a);
          this.button_minus.set_skipButtonUpdate(a);
          return a;
        },
        set_color: function (a) {
          this.color = a;
          this.button_plus.set_color(a);
          this.button_minus.set_color(a);
          this.text_field instanceof Sg
            ? this.text_field.set_backgroundColor(a)
            : this.text_field.set_color(a);
          return a;
        },
        set_min: function (a) {
          this.min = a;
          this.value < this.min && this.set_value(this.min);
          return this.min;
        },
        set_max: function (a) {
          this.max = a;
          this.value > this.max && this.set_value(this.max);
          return this.max;
        },
        set_value: function (a) {
          this.value = a;
          this.value < this.min && (this.value = this.min);
          this.value > this.max && (this.value = this.max);
          if (null != this.text_field)
            if (((a = this.value), this.isPercent)) {
              var b = Math.pow(10, this.decimals);
              this.text_field.set_text(
                M.string(M.string(Math.round(100 * a * b) / b)) + "%"
              );
            } else
              (b = Math.pow(10, this.decimals)),
                this.text_field.set_text(M.string(Math.round(a * b) / b));
          return this.value;
        },
        set_decimals: function (a) {
          this.decimals = a;
          0 > a && (this.decimals = 0);
          this.set_value(this.value);
          return this.decimals;
        },
        set_isPercent: function (a) {
          this.isPercent = a;
          this.set_value(this.value);
          return this.isPercent;
        },
        set_stack: function (a) {
          this.stack = a;
          var b = 0,
            c = 0;
          this.text_field instanceof qb && (c = b = 1);
          switch (this.stack) {
            case 0:
              a = 1 + this.text_field.get_height() / 2;
              this.button_plus.get_height() != a &&
                this.button_plus.resize(a, a);
              this.button_minus.get_height() != a &&
                this.button_minus.resize(a, a);
              this.button_plus.set_x(
                b + this.text_field.x + this.text_field.get_width()
              );
              this.button_plus.set_y(-c + this.text_field.y);
              this.button_minus.set_x(
                b + this.text_field.x + this.text_field.get_width()
              );
              this.button_minus.set_y(
                c +
                  this.text_field.y +
                  (this.text_field.get_height() -
                    this.button_minus.get_height())
              );
              break;
            case 1:
              (a = 2 + this.text_field.get_height()),
                this.button_plus.get_height() != a &&
                  this.button_plus.resize(a, a),
                this.button_minus.get_height() != a &&
                  this.button_minus.resize(a, a),
                this.button_plus.set_x(
                  b + this.text_field.x + this.text_field.get_width()
                ),
                this.button_plus.set_y(-c + this.text_field.y),
                this.button_minus.set_x(
                  this.button_plus.x + this.button_plus.get_width()
                ),
                this.button_minus.set_y(this.button_plus.y);
          }
          return this.stack;
        },
        _onInputTextEvent: function (a, b) {
          "" == a && (a = M.string(this.min));
          for (var c = (b = 0), d = a.length; c < d; ) {
            var e = c++;
            "." == a.charAt(e) && ++b;
          }
          if (1 != b || a.indexOf(".") != a.length - 1)
            this.set_value(parseFloat(a)),
              this._doCallback("edit_numeric_stepper"),
              this._doCallback("change_numeric_stepper");
        },
        _onPlus: function () {
          this.set_value(this.value + this.stepSize);
          this._doCallback("click_numeric_stepper");
          this._doCallback("change_numeric_stepper");
        },
        _onMinus: function () {
          this.set_value(this.value - this.stepSize);
          this._doCallback("click_numeric_stepper");
          this._doCallback("change_numeric_stepper");
        },
        _doCallback: function (a) {
          this.broadcastToFlxUI && Ea.event(a, this, this.value, this.params);
        },
        __class__: Jb,
        __properties__: q(Na.prototype.__properties__, {
          set_skipButtonUpdate: "set_skipButtonUpdate",
          set_params: "set_params",
          set_isPercent: "set_isPercent",
          set_stack: "set_stack",
          set_value: "set_value",
          set_max: "set_max",
          set_min: "set_min",
          set_decimals: "set_decimals",
        }),
      });
      var $f = function (a) {
        null == a && (a = 0);
        this.getTextFallback = null;
        this._reload_countdown = 0;
        this.reload_ui_on_resize = this._reload = !1;
        this._xml_id = "";
        this.cursor = null;
        pd.call(this, a);
      };
      h["flixel.addons.ui.FlxUISubState"] = $f;
      $f.__name__ = "flixel.addons.ui.FlxUISubState";
      $f.__interfaces__ = [pb];
      $f.__super__ = pd;
      $f.prototype = q(pd.prototype, {
        forceScrollFactor: function (a, b) {
          if (null != this._ui) {
            for (var c = 0, d = this._ui.group.members; c < d.length; ) {
              var e = d[c];
              ++c;
              e = e.scrollFactor;
              var f = a,
                k = b;
              null == k && (k = 0);
              null == f && (f = 0);
              e.set_x(f);
              e.set_y(k);
            }
            null != this._ui.scrollFactor &&
              ((e = this._ui.scrollFactor),
              (f = a),
              (k = b),
              null == k && (k = 0),
              null == f && (f = 0),
              e.set_x(f),
              e.set_y(k));
          }
        },
        forceFocus: function (a, b) {
          null != this._ui &&
            (a ? this._ui.set_focus(b) : this._ui.set_focus(null));
        },
        create: function () {
          null != Ca.static_tongue && (this._tongue = Ca.static_tongue);
          1 == this._makeCursor && (this.cursor = this.createCursor());
          this.tooltips = new Gi(null, this);
          this._ui = this.createUI(null, this, null, this._tongue);
          this.add(this._ui);
          this._ui.getTextFallback = this.getTextFallback;
          if ("" != this._xml_id && null != this._xml_id) {
            var a = E.xml(this._xml_id);
            null == a && (a = E.xml(this._xml_id, "xml", !0, ""));
            null != a && this._ui.load(a);
          } else this._ui.load(null);
          null != this.cursor &&
            null != this._ui &&
            (this.add(this.cursor),
            this.cursor.addWidgetsFromUI(this._ui),
            this.cursor.findVisibleLocation(0));
          g.mouse.set_visible(!0);
          this.tooltips.init();
          pd.prototype.create.call(this);
          this.cleanup();
          this._parentState instanceof Ca &&
            (this.reload_ui_on_resize = za.__cast(
              this._parentState,
              Ca
            ).reload_ui_on_resize);
        },
        onCursorEvent: function (a, b) {
          this.getEvent(a, b, null);
        },
        onShowTooltip: function (a) {},
        onResize: function (a, b) {
          this.reload_ui_on_resize &&
            (g.scaleMode.onMeasure(a, b),
            (this._reload_countdown = 5),
            (this._reload = !0));
        },
        update: function (a) {
          pd.prototype.update.call(this, a);
          this.tooltips.update(a);
          this._reload &&
            0 < this._reload_countdown &&
            (this._reload_countdown--,
            0 == this._reload_countdown && this.reloadUI());
        },
        destroy: function () {
          this.destroyed = !0;
          null != this.tooltips &&
            (this.tooltips.destroy(), (this.tooltips = null));
          null != this._ui &&
            (this._ui.destroy(), this.remove(this._ui, !0), (this._ui = null));
          pd.prototype.destroy.call(this);
        },
        getEvent: function (a, b, c, d) {},
        getRequest: function (a, b, c, d) {
          return null;
        },
        getText: function (a, b, c) {
          null == c && (c = !0);
          null == b && (b = "ui");
          return null != this._tongue
            ? this._tongue.get(a, b, c)
            : null != this.getTextFallback
            ? this.getTextFallback(a, b, c)
            : a;
        },
        cleanup: function () {
          this._ui.cleanup();
        },
        createCursor: function () {
          return new Hi(n(this, this.onCursorEvent));
        },
        createUI: function (a, b, c, d, e) {
          null == e && (e = "");
          return new Ea(a, b, c, d, e);
        },
        reloadUI: function () {
          null != this._ui &&
            (this.remove(this._ui, !0), this._ui.destroy(), (this._ui = null));
          this._ui = this.createUI(null, this, null, this._tongue);
          this.add(this._ui);
          var a = E.xml(this._xml_id);
          this._ui.load(a);
          this._reload = !1;
          this._reload_countdown = 0;
        },
        __class__: $f,
      });
      var lj = function (a) {
        this._quickSetupParams = null;
        this._width = this._height = 0;
        this.alpha = 1;
        this.params = null;
        this.x = this.y = 0;
        this.broadcastToFlxUI = !0;
        $f.call(this, a);
      };
      h["flixel.addons.ui.FlxUIPopup"] = lj;
      lj.__name__ = "flixel.addons.ui.FlxUIPopup";
      lj.__interfaces__ = [fd];
      lj.__super__ = $f;
      lj.prototype = q($f.prototype, {
        set_immovable: function (a) {
          return this.immovable;
        },
        set_x: function (a) {
          return (this.x = a);
        },
        set_y: function (a) {
          return (this.y = a);
        },
        get_width: function () {
          return this._width;
        },
        get_height: function () {
          return this._height;
        },
        set_width: function (a) {
          return (this._width = a);
        },
        set_height: function (a) {
          return (this._height = a);
        },
        set_angle: function (a) {
          return (this.angle = a);
        },
        set_alpha: function (a) {
          return (this.alpha = a);
        },
        set_facing: function (a) {
          return (this.facing = a);
        },
        set_moves: function (a) {
          return (this.moves = a);
        },
        set_offset: function (a) {
          return (this.offset = a);
        },
        set_origin: function (a) {
          return (this.origin = a);
        },
        set_scale: function (a) {
          return (this.scale = a);
        },
        set_scrollFactor: function (a) {
          return (this.scrollFactor = a);
        },
        reset: function (a, b) {
          this.setPosition(a, b);
        },
        setPosition: function (a, b) {
          null == b && (b = 0);
          null == a && (a = 0);
          this.set_x(a);
          this.set_y(b);
        },
        create: function () {
          "" == this._xml_id &&
            (this._xml_id = "flixel/flixel-ui/xml/default_popup");
          var a = 0,
            b = 0;
          null == b && (b = 0);
          null == a && (a = 0);
          null == b && (b = 0);
          null == a && (a = 0);
          b = ba.pool.get().set(a, b);
          b._inPool = !1;
          this.set_scrollFactor(b);
          this.getTextFallback = n(this, this.myGetTextFallback);
          $f.prototype.create.call(this);
          null != this._quickSetupParams && this._doQuickSetup();
          var c = this.scrollFactor;
          b = a = 0;
          null == b && (b = 0);
          null == a && (a = 0);
          c.set_x(a);
          c.set_y(b);
          this._ui.setScrollFactor(0, 0);
        },
        quickSetup: function (a, b, c) {
          this._quickSetupParams = { title: a, body: b, button_labels: c };
        },
        getEvent: function (a, b, c, d) {
          null == d && null != this.params && (d = []);
          null != this.params && (d = d.concat(this.params));
          if ("click_button" == a) {
            var e = "";
            if (null != d) {
              "string" == typeof d[0] && (e = M.string(d[0]));
              var f = d[0] | 0;
              if ("affirm" == e || "cancel" == e || "alt" == e)
                za.__implements(this._parentState, pb)
                  ? this.castParent().getEvent("click_popup", this, f, d)
                  : Ea.event("click_popup", this, f, d),
                  this.close();
            }
          }
          $f.prototype.getEvent.call(this, a, b, c, d);
        },
        castParent: function () {
          return this._parentState;
        },
        myGetTextFallback: function (a, b, c) {
          switch (a) {
            case "$POPUP_BODY_DEFAULT":
              return "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam consectetur vehicula pellentesque. Phasellus at blandit augue. Suspendisse vel leo ut elit imperdiet eleifend ut quis purus. Quisque imperdiet turpis vitae justo hendrerit molestie. Quisque tempor ante eget posuere viverra.";
            case "$POPUP_CANCEL":
              return "Cancel";
            case "$POPUP_NO":
              return "No";
            case "$POPUP_OK":
              return "Ok";
            case "$POPUP_TITLE_DEFAULT":
              return "Alert!";
            case "$POPUP_YES":
              return "Yes";
          }
          return a;
        },
        _doQuickSetup: function () {
          this._ui.hasAsset("title") &&
            this._ui.getAsset("title").set_text(this._quickSetupParams.title);
          this._ui.hasAsset("body") &&
            this._ui.getAsset("body").set_text(this._quickSetupParams.body);
          this._doQuickSetupButtons();
          this._quickSetupParams = this._quickSetupParams.button_labels = null;
        },
        _doQuickSetupButtons: function () {
          var a = ["btn0", "btn1", "btn2"],
            b = 0;
          switch (this._quickSetupParams.button_labels.length) {
            case 1:
              this._ui.setMode("1btn");
              break;
            case 2:
              this._ui.setMode("2btn");
              break;
            case 3:
              this._ui.setMode("3btn");
          }
          for (var c = 0; c < a.length; ) {
            var d = a[c];
            ++c;
            if (
              this._ui.hasAsset(d) &&
              ((d = this._ui.getAsset(d)),
              this._quickSetupParams.button_labels.length > b)
            ) {
              var e = this._quickSetupParams.button_labels[b],
                f = e;
              switch (e) {
                case "<cancel>":
                case "<no>":
                case "<yes>":
                  if (
                    ((e = X.substr(e, 1, e.length - 2).toUpperCase()),
                    (f = "$POPUP_" + e),
                    (f = this._ui.getText(f, "ui", !1)),
                    null == f || "" == f)
                  )
                    f = e;
              }
              E.setButtonLabel(d, f);
            }
            ++b;
          }
        },
        __class__: lj,
        __properties__: q($f.prototype.__properties__, {
          set_height: "set_height",
          get_height: "get_height",
          set_width: "set_width",
          get_width: "get_width",
          set_alpha: "set_alpha",
          set_y: "set_y",
          set_x: "set_x",
          set_scrollFactor: "set_scrollFactor",
          set_scale: "set_scale",
          set_origin: "set_origin",
          set_offset: "set_offset",
          set_moves: "set_moves",
          set_facing: "set_facing",
          set_angle: "set_angle",
          set_immovable: "set_immovable",
        }),
      });
      var ej = function (a, b, c, d, e, f, k, g, l, h, u, m, p, n) {
        null == h && (h = "<X> more...");
        null == l && (l = 100);
        null == g && (g = 20);
        null == k && (k = 100);
        null == f && (f = 25);
        this._clickable = !0;
        this._selected = 0;
        this._y_space = 25;
        this._height = 20;
        this._label_width = this._width = 100;
        this.fixedSize = !1;
        Na.call(this);
        this._y_space = f;
        this._width = k;
        this._height = g;
        this._label_width = l;
        null == c && (c = []);
        null == d && (d = []);
        this.callback = e;
        this._list_radios = [];
        this._list_active = [];
        this._list = new Qk(0, 0, null, 0, 0, h, 1, 0, u, m, p, n);
        this.add(this._list);
        this.updateRadios(c, d);
        this.loadGraphics(null, null);
        this.set_x(a);
        this.set_y(b);
      };
      h["flixel.addons.ui.FlxUIRadioGroup"] = ej;
      ej.__name__ = "flixel.addons.ui.FlxUIRadioGroup";
      ej.__interfaces__ = [le, Re];
      ej.__super__ = Na;
      ej.prototype = q(Na.prototype, {
        set_activeStyle: function (a) {
          this.activeStyle = a;
          this.updateActives();
          return this.activeStyle;
        },
        set_skipButtonUpdate: function (a) {
          this.skipButtonUpdate = a;
          for (var b = 0, c = this._list_radios; b < c.length; ) {
            var d = c[b];
            ++b;
            d.set_skipButtonUpdate(a);
          }
          return this.skipButtonUpdate;
        },
        set_params: function (a) {
          return (this.params = a);
        },
        set_width: function (a) {
          Na.prototype.set_width.call(this, a);
          this.fixedSize && null != this._list && this._list.set_width(a);
          return a;
        },
        set_height: function (a) {
          Na.prototype.set_height.call(this, a);
          this.fixedSize && null != this._list && this._list.set_height(a);
          return a;
        },
        loadGraphics: function (a, b) {
          this._box_asset = null != a ? a : "flixel/flixel-ui/img/radio.png";
          this._dot_asset =
            null != b ? b : "flixel/flixel-ui/img/radio_dot.png";
          this._box_asset instanceof F &&
            ((a = this._box_asset), (this._box_asset = a.graphic.key));
          this._dot_asset instanceof F &&
            ((a = this._dot_asset), (this._dot_asset = a.graphic.key));
          a = 0;
          for (b = this._list_radios; a < b.length; ) {
            var c = b[a];
            ++a;
            c.box.loadGraphic(this._box_asset, !0);
            c.mark.loadGraphic(this._dot_asset);
          }
          this._refreshRadios();
        },
        destroy: function () {
          null != this._list_radios && E.clearArray(this._list_radios);
          null != this._list_active && E.clearArray(this._list_active);
          this._labels =
            this._ids =
            this._list =
            this._list_radios =
            this._list_active =
              null;
          Na.prototype.destroy.call(this);
        },
        updateRadios: function (a, b) {
          this._ids = a;
          this._labels = b;
          a = 0;
          for (b = this._list_radios; a < b.length; ) {
            var c = b[a];
            ++a;
            c.set_visible(!1);
          }
          this._refreshRadios();
        },
        getRadios: function () {
          return this._list_radios;
        },
        get_selectedId: function () {
          return this._ids[this._selected];
        },
        _refreshRadios: function () {
          var a = this.x,
            b = this.y,
            c = 0,
            d = 0,
            e = 0;
          this._list._skipRefresh = !0;
          for (var f = 0, k = this._ids; f < k.length; ) {
            var g = k[f];
            ++f;
            var l = "";
            l =
              null != this._labels && this._labels.length > c
                ? this._labels[c]
                : "<" + g + ">";
            this._list_radios.length > c
              ? ((g = this._list_radios[c]),
                g.set_visible(!0),
                g.set_text(l),
                0 == c
                  ? ((a = g.x), (b = g.y))
                  : (g.set_x(a | 0), g.set_y(b | 0)))
              : ((g = new tb(
                  0,
                  0,
                  this._box_asset,
                  this._dot_asset,
                  l,
                  this._label_width,
                  [g, !1]
                )),
                (g.broadcastToFlxUI = !1),
                (g.callback = (function (a, b) {
                  return function () {
                    a[0](b[0]);
                  };
                })([n(this, this._onCheckBoxEvent)], [g])),
                this._list.add(g),
                g.set_x(a | 0),
                g.set_y(b | 0),
                g.set_text(l),
                0 < this._list_radios.length &&
                  (g.button.copyStyle(this._list_radios[0].button),
                  null == this.activeStyle &&
                    this.set_activeStyle(this.makeActiveStyle()),
                  g.button.set_width(this._list_radios[0].button.get_width()),
                  g.button.set_height(this._list_radios[0].button.get_height()),
                  g.set_textX(this._list_radios[0].textX),
                  g.set_textY(this._list_radios[0].textY)),
                this._list_radios.push(g),
                this._list_active.push(!0));
            a + g.get_width() > d && (d = a + g.get_width());
            b + g.get_height() > e && (e = b + g.get_height());
            b += this._y_space;
            ++c;
          }
          0 == this.fixedSize &&
            ((d += 5),
            (e += 5),
            d > this._list.get_width() && this._list.set_width(d),
            e > this._list.get_height() && this._list.set_height(e),
            this.set_width(d),
            this.set_height(e));
          this._list._skipRefresh = !1;
          1 == this.fixedSize && this._list.refreshList();
          this.updateActives();
        },
        updateActives: function () {
          for (var a = 0, b = 0, c = this._list_radios; b < c.length; ) {
            var d = c[b];
            ++b;
            d.set_active(this._list_active[a]);
            0 == this._list_active[a] && null != this.inactiveStyle
              ? this.inactiveStyle.applyToCheck(d)
              : 1 == this._list_active[a] &&
                null != this.activeStyle &&
                this.activeStyle.applyToCheck(d);
            ++a;
          }
        },
        makeActiveStyle: function () {
          if (0 < this._list_radios.length) {
            var a = this._list_radios[0].button.label,
              b = kd.copyFromFlxText(a),
              c = new Te(
                a.borderStyle,
                a.borderColor,
                a.borderSize,
                a.borderQuality
              );
            return new fj(
              16777215,
              b,
              Nm.fromOpenFL(a._defaultFormat.align),
              a.color,
              c
            );
          }
          return null;
        },
        _onCheckBoxEvent: function (a) {
          this._onClick(a, !0);
        },
        _onClick: function (a, b) {
          if (!this._clickable) return !1;
          for (var c = 0, d = 0, e = this._list_radios; d < e.length; ) {
            var f = e[d];
            ++d;
            f.set_checked(!1);
            a == f && ((this._selected = c), f.set_checked(!0));
            ++c;
          }
          b &&
            (null != this.callback && this.callback(this.get_selectedId()),
            this.broadcastToFlxUI &&
              Ea.event(
                "click_radio_group",
                this,
                this._ids[this._selected],
                this.params
              ));
          return !0;
        },
        __class__: ej,
        __properties__: q(Na.prototype.__properties__, {
          set_params: "set_params",
          set_skipButtonUpdate: "set_skipButtonUpdate",
          set_activeStyle: "set_activeStyle",
          get_selectedId: "get_selectedId",
        }),
      });
      var fj = function (a, b, c, d, e) {
        this.checkColor = a;
        cj.call(this, b, c, d, e);
      };
      h["flixel.addons.ui.CheckStyle"] = fj;
      fj.__name__ = "flixel.addons.ui.CheckStyle";
      fj.__super__ = cj;
      fj.prototype = q(cj.prototype, {
        applyToCheck: function (a) {
          null != this.checkColor && a.set_color(this.checkColor);
          this.apply(a.button.label);
        },
        __class__: fj,
      });
      var uh = function (a, b, c, d) {
        null == d && (d = 16);
        null == c && (c = 16);
        null == b && (b = 0);
        null == a && (a = 0);
        F.call(this, a, b);
        this.makeGraphic(1, 1, 0);
        1 > d && (d = 1);
        1 > c && (c = 1);
        this.resize(c, d);
      };
      h["flixel.addons.ui.FlxUIRegion"] = uh;
      uh.__name__ = "flixel.addons.ui.FlxUIRegion";
      uh.__interfaces__ = [Wc, fd];
      uh.__super__ = F;
      uh.prototype = q(F.prototype, {
        resize: function (a, b) {
          this.set_width(a);
          this.set_height(b);
        },
        __class__: uh,
      });
      var Ui = function (a, b, c, d, e, f, k, g, l, h, u) {
        Yh.call(this, a, b, c, d, e, f, k, g, l, h, u);
      };
      h["flixel.addons.ui.FlxUISlider"] = Ui;
      Ui.__name__ = "flixel.addons.ui.FlxUISlider";
      Ui.__interfaces__ = [fd];
      Ui.__super__ = Yh;
      Ui.prototype = q(Yh.prototype, { __class__: Ui });
      var Be = function (a, b, c, d) {
        null == b && (b = 0);
        null == a && (a = 0);
        tc.call(this, a, b, d);
        this.up_color =
          this.over_color =
          this.down_color =
          this.up_toggle_color =
          this.over_toggle_color =
          this.down_toggle_color =
            -1;
        null != c && this.set_label(c);
      };
      h["flixel.addons.ui.FlxUISpriteButton"] = Be;
      Be.__name__ = "flixel.addons.ui.FlxUISpriteButton";
      Be.__interfaces__ = [Vg];
      Be.__super__ = tc;
      Be.prototype = q(tc.prototype, {
        resize: function (a, b) {
          tc.prototype.resize.call(this, a, b);
          this.autoCenterLabel();
        },
        autoCenterLabel: function () {
          if (null != this.label) {
            if (this.label instanceof wa) {
              for (
                var a = this.label, b = 0, c = a.group.members;
                b < c.length;

              ) {
                var d = c[b];
                ++b;
                d.set_x(-d.get_width() / 2);
                d.set_y(-d.get_height() / 2);
              }
              var e = a.get_width(),
                f = a.get_height();
              b = 0;
              for (c = a.group.members; b < c.length; )
                (d = c[b]),
                  ++b,
                  d.set_x((e - d.get_width()) / 2),
                  d.set_y((f - d.get_height()) / 2);
            }
            tc.prototype.autoCenterLabel.call(this);
          }
        },
        __class__: Be,
      });
      var be = function (a, b, c, d, e, f, k) {
        null == e && (e = !1);
        this._selected_tab = -1;
        this._selected_tab_id = "";
        this._tab_spacing = this._tab_stacking = this._tab_offset = null;
        this._stretch_tabs = !1;
        Na.call(this);
        null == a &&
          (a = new ea(
            0,
            0,
            "flixel/flixel-ui/img/chrome_flat.png",
            new ha(0, 0, 200, 200)
          ));
        this._back = a;
        this.add(this._back);
        if (null == b && null != c)
          for (b = [], a = 0; a < c.length; ) {
            var g = c[a];
            ++a;
            var l = new gd(0, 0, g.label);
            l.up_color = 16777215;
            l.down_color = 16777215;
            l.over_color = 16777215;
            l.up_toggle_color = 16777215;
            l.down_toggle_color = 16777215;
            l.over_toggle_color = 16777215;
            l.label.set_color(16777215);
            var h = l.label;
            h.set_borderStyle(Ya.OUTLINE);
            h.set_borderColor(0);
            h.set_borderSize(1);
            h.set_borderQuality(1);
            l.name = g.name;
            g = Bb.toIntArray("6,6,11,11");
            l.loadGraphicSlice9(
              "flixel/flixel-ui/img/tab_back.png flixel/flixel-ui/img/tab_back.png flixel/flixel-ui/img/tab_back.png flixel/flixel-ui/img/tab.png flixel/flixel-ui/img/tab.png flixel/flixel-ui/img/tab.png".split(
                " "
              ),
              0,
              0,
              [g, g, g, g, g, g],
              0,
              -1,
              !0
            );
            b.push(l);
          }
        this._tabs = b;
        this._stretch_tabs = e;
        this._tab_spacing = f;
        this._tab_stacking = k;
        null == this._tab_stacking && (this._tab_stacking = ["front", "back"]);
        this._tab_offset = d;
        b = 0;
        d = null;
        a = 0;
        for (c = this._tabs; a < c.length; )
          (d = c[a]),
            ++a,
            this.add(d),
            (e = (function (a, b) {
              return function () {
                a[0](b[0]);
              };
            })([n(this, this._onTabEvent)], [d.name])),
            (d.onUp.callback = e),
            ++b;
        this.distributeTabs();
        this._tab_groups = [];
      };
      h["flixel.addons.ui.FlxUITabMenu"] = be;
      be.__name__ = "flixel.addons.ui.FlxUITabMenu";
      be.__interfaces__ = [$a, Re, Wc];
      be.__super__ = Na;
      be.prototype = q(Na.prototype, {
        getEvent: function (a, b, c, d) {},
        getRequest: function (a, b, c, d) {
          return null;
        },
        set_skipButtonUpdate: function (a) {
          this.skipButtonUpdate = a;
          for (var b = 0, c = this._tabs; b < c.length; ) {
            var d = c[b];
            ++b;
            d.set_skipButtonUpdate(a);
          }
          b = 0;
          for (c = this._tab_groups; b < c.length; ) {
            var e = c[b];
            ++b;
            d = 0;
            for (e = e.group.members; d < e.length; ) {
              var f = e[d];
              ++d;
              za.__implements(f, Re) && f.set_skipButtonUpdate(a);
            }
          }
          return a;
        },
        get_width: function () {
          return this._back.get_width();
        },
        get_height: function () {
          var a = this.getFirstTab();
          return null != a
            ? this._back.y + this._back.get_height() - a.y
            : this._back.get_height();
        },
        resize: function (a, b) {
          if (za.__implements(this._back, Wc)) {
            this.distributeTabs(a);
            var c = this._back;
            var d = this.getFirstTab();
            null != d ? c.resize(a, b - d.get_height()) : c.resize(a, b);
          } else this.distributeTabs();
        },
        get_selected_tab: function () {
          return this._selected_tab;
        },
        set_selected_tab: function (a) {
          this.showTabInt(a);
          return this._selected_tab;
        },
        get_selected_tab_id: function () {
          return this._selected_tab_id;
        },
        set_selected_tab_id: function (a) {
          this.showTabId(a);
          return this._selected_tab_id;
        },
        destroy: function () {
          Na.prototype.destroy.call(this);
          E.clearArray(this._tab_groups);
          E.clearArray(this._tabs);
          this._tab_groups = this._tabs = this._back = null;
        },
        getTab: function (a, b) {
          if (null != a)
            for (var c = 0, d = this._tabs; c < d.length; ) {
              var e = d[c];
              ++c;
              if (e.name == a) return e;
            }
          return null != b && b < this._tabs.length ? this._tabs[b] : null;
        },
        addGroup: function (a) {
          a != this &&
            (this.contains(a) ||
              (a.set_y(this._back.y - this.y),
              this.add(a),
              this._tab_groups.push(a)),
            this._showOnlyGroup(""),
            1 == this._tab_groups.length && this.set_selected_tab(0),
            -1 != this._selected_tab &&
              this.set_selected_tab(this._selected_tab));
        },
        _onTabEvent: function (a) {
          this.showTabId(a);
          var b = this.getTab(a);
          b = null != b ? b.params : null;
          this.broadcastToFlxUI && Ea.event("tab_menu_click", this, a, b);
        },
        stackTabs: function () {
          var a = this._back.x,
            b = this._back.y;
          this.group.remove(this._back, !0);
          for (var c, d = 0, e = this._tabs; d < e.length; )
            (c = e[d]), ++d, c.toggled && this.group.remove(c, !0);
          this.group.add(this._back);
          d = 0;
          for (e = this._tabs; d < e.length; )
            (c = e[d]), ++d, c.toggled && this.group.add(c);
          d = 0;
          for (e = this._tab_groups; d < e.length; ) {
            c = e[d];
            ++d;
            var f = c.x,
              k = c.y;
            this.remove(c, !0);
            this.add(c);
            c.set_x(f);
            c.set_y(k);
          }
          this._back.set_x(a);
          this._back.set_y(b);
        },
        showTabId: function (a) {
          this._selected_tab = -1;
          this._selected_tab_id = "";
          for (var b = 0, c = 0, d = this._tabs; c < d.length; ) {
            var e = d[c];
            ++c;
            e.set_toggled(!1);
            e.forceStateHandler("out_button");
            e.name == a &&
              (e.set_toggled(!0),
              (this._selected_tab_id = a),
              (this._selected_tab = b));
            ++b;
          }
          this._showOnlyGroup(a);
          this.stackTabs();
        },
        sortTabs: function (a, b) {
          return !(a.name < b.name) && a.name > b.name ? 1 : -1;
        },
        showTabInt: function (a) {
          0 <= a && null != this._tabs && this._tabs.length > a
            ? this.showTabId(this._tabs[a].name)
            : this.showTabId("");
        },
        _showOnlyGroup: function (a) {
          for (var b = 0, c = this._tab_groups; b < c.length; ) {
            var d = c[b];
            ++b;
            d.name == a
              ? d.set_visible(d.set_active(!0))
              : d.set_visible(d.set_active(!1));
          }
        },
        getFirstTab: function () {
          var a = null;
          null != this._tabs && 0 < this._tabs.length && (a = this._tabs[0]);
          return a;
        },
        distributeTabs: function (a) {
          null == a && (a = -1);
          var b = 0,
            c = 0;
          -1 == a && (a = this._back.get_width());
          var d = 0;
          if (this._stretch_tabs) {
            c = a / this._tabs.length;
            var e = (c | 0) * this._tabs.length;
            e < a && (d = a - e);
          }
          this._tabs.sort(n(this, this.sortTabs));
          e = a = 0;
          for (var f, k = 0, g = this._tabs; k < g.length; ) {
            f = g[k];
            ++k;
            f.set_x(this.x + b);
            f.set_y(this.y);
            null != this._tab_offset &&
              (f.set_x(f.x + this._tab_offset.x),
              f.set_y(f.y + this._tab_offset.y));
            if (this._stretch_tabs) {
              var l = f.get_height();
              0 != a && ((l = e), (f.resize_ratio = -1));
              0 < d
                ? (f.resize(c + 1, l), (b += (c | 0) + 1), --d)
                : (f.resize(c, l), (b += c | 0));
            } else
              b =
                null != this._tab_spacing
                  ? b + (f.get_width() + this._tab_spacing)
                  : b + f.get_width();
            0 == a && (e = f.get_height());
            ++a;
          }
          null != this._tabs &&
            0 < this._tabs.length &&
            null != this._tabs[0] &&
            (this._back.set_y(this._tabs[0].y + this._tabs[0].get_height() - 2),
            null != this._tab_offset &&
              ((b = this._back), b.set_y(b.y - this._tab_offset.y)));
          this.calcBounds();
        },
        __class__: be,
        __properties__: q(Na.prototype.__properties__, {
          set_selected_tab_id: "set_selected_tab_id",
          get_selected_tab_id: "get_selected_tab_id",
          set_selected_tab: "set_selected_tab",
          get_selected_tab: "get_selected_tab",
          set_skipButtonUpdate: "set_skipButtonUpdate",
        }),
      });
      var Ed = function (a, b, c, d, e, f) {
        null == f && (f = !0);
        null == e && (e = 8);
        null == c && (c = 0);
        null == b && (b = 0);
        null == a && (a = 0);
        this.minimumHeight = 1;
        W.call(this, a, b, c, d, e, f);
      };
      h["flixel.addons.ui.FlxUIText"] = Ed;
      Ed.__name__ = "flixel.addons.ui.FlxUIText";
      Ed.__interfaces__ = [le, fd, Wc];
      Ed.__super__ = W;
      Ed.prototype = q(W.prototype, {
        resize: function (a, b) {
          var c = 1;
          b < this.minimumHeight && (b = this.minimumHeight);
          b < this.get_height() && (c = -1);
          this.set_width(a);
          this.set_height(b);
          this.textField.set_width(this.get_width());
          for (
            var d = this._defaultFormat.size | 0,
              e = this.get_height() - this.graphic.bitmap.height,
              f = 0,
              k = this.textField.get_numLines();
            0 < e * c && 999 > f;

          ) {
            ++f;
            this.set_size((this._defaultFormat.size | 0) + c);
            if (0 < c && this.textField.get_numLines() > k) {
              this.set_size((this._defaultFormat.size | 0) - c);
              break;
            }
            this._regen = !0;
            this.calcFrame(!0);
            e = b - this.graphic.bitmap.height;
          }
          999 <= f &&
            (g.log.advanced(
              "Loop failsafe tripped while resizing FlxUIText to height(" +
                b +
                ")",
              Ja.WARNING,
              !0
            ),
            this.set_size(d));
          this.set_width(a);
          this.set_height(b);
          this._regen = !0;
          this.calcFrame(!0);
        },
        set_params: function (a) {
          return (this.params = a);
        },
        __class__: Ed,
        __properties__: q(W.prototype.__properties__, {
          set_params: "set_params",
        }),
      });
      var dj = function (a, b, c, d, e, f, k, g, l) {
        null == l && (l = !1);
        null == g && (g = 12895428);
        null == k && (k = 8421504);
        this.baseTileSize = -1;
        this.floorToEven = !1;
        this._color1 = this._color2 = 0;
        this._tilesWide = this._tilesTall = 2;
        nc.call(this, a, b);
        this.tileWidth = c;
        this.tileHeight = d;
        this._tilesWide = e;
        this._tilesTall = f;
        this._color1 = k;
        this._color2 = g;
        this.floorToEven = l;
        this.makeTiles(
          this.tileWidth,
          this.tileHeight,
          this._tilesWide,
          this._tilesTall,
          this._color1,
          this._color2
        );
      };
      h["flixel.addons.ui.FlxUITileTest"] = dj;
      dj.__name__ = "flixel.addons.ui.FlxUITileTest";
      dj.__interfaces__ = [fd, Wc];
      dj.__super__ = nc;
      dj.prototype = q(nc.prototype, {
        makeTiles: function (a, b, c, d, e, f) {
          null == f && (f = -3881788);
          null == e && (e = -8355712);
          b = this.constrain(a * this._tilesWide, b * this._tilesTall);
          a = b.x | 0;
          b = b.y | 0;
          this.makeGraphic(c, d, e);
          e = this.get_pixels();
          for (var k = 0, g = 0; g < c; ) {
            for (var l = g++, h = 0, u = d; h < u; ) {
              var m = h++;
              0 == k % 2 && e.setPixel(l, m, f);
              ++k;
            }
            0 != c % 2 && ++k;
          }
          this.set_pixels(e);
          c = this.scale;
          null == b && (b = 0);
          null == a && (a = 0);
          c.set_x(a);
          c.set_y(b);
          this.updateHitbox();
        },
        constrain: function (a, b) {
          a = (a / this._tilesWide) | 0;
          b = (b / this._tilesTall) | 0;
          a < b ? (b = a) : b < a && (a = b);
          this.floorToEven && 1 == a % 2 && (--a, (b = a));
          0 < this.baseTileSize &&
            (b = a = ((a / this.baseTileSize) | 0) * this.baseTileSize);
          null == b && (b = 0);
          null == a && (a = 0);
          return new ba(a, b);
        },
        resize: function (a, b) {
          this.makeTiles(
            this.tileWidth,
            this.tileHeight,
            this._tilesWide,
            this._tilesTall,
            this._color1,
            this._color2
          );
        },
        __class__: dj,
      });
      var Md = function (a, b, c, d) {
        Na.call(this, 0, 0);
        null == c && (c = new Qg(0, 0, "left", "top", "right", "top"));
        d = Md.styleFix(d);
        this.refresh(a, b, "", "", c, d);
        this.setScrollFactor(0, 0);
      };
      h["flixel.addons.ui.FlxUITooltip"] = Md;
      Md.__name__ = "flixel.addons.ui.FlxUITooltip";
      Md.styleFix = function (a, b) {
        null == a &&
          (a = {
            titleFormat: null,
            bodyFormat: null,
            titleBorder: null,
            bodyBorder: null,
            titleOffset: null,
            bodyOffset: null,
            background: null,
            borderSize: -1,
            borderColor: null,
            arrow: null,
            titleWidth: -1,
            bodyWidth: -1,
            autoSizeHorizontal: null,
            autoSizeVertical: null,
            leftPadding: -1,
            rightPadding: -1,
            topPadding: -1,
            bottomPadding: -1,
          });
        if (null != b) {
          null == a.titleFormat && (a.titleFormat = b.titleFormat);
          null == a.bodyFormat && (a.bodyFormat = b.bodyFormat);
          null == a.titleBorder && (a.titleBorder = b.titleBorder);
          null == a.bodyBorder && (a.bodyBorder = b.bodyBorder);
          null == a.titleOffset && (a.titleOffset = b.titleOffset);
          null == a.bodyOffset && (a.bodyOffset = b.bodyOffset);
          null == a.background && (a.background = b.background);
          null == a.borderColor && (a.borderColor = b.borderColor);
          null == a.arrow && (a.arrow = b.arrow);
          if (null == a.borderSize || 0 > a.borderSize)
            a.borderSize = b.borderSize;
          if (null == a.titleWidth || 0 > a.titleWidth)
            a.titleWidth = b.titleWidth;
          if (null == a.bodyWidth || 0 > a.bodyWidth) a.bodyWidth = b.bodyWidth;
          null == a.autoSizeHorizontal &&
            (a.autoSizeHorizontal = b.autoSizeHorizontal);
          null == a.autoSizeVertical &&
            (a.autoSizeVertical = b.autoSizeVertical);
          if (null == a.leftPadding || 0 > a.leftPadding)
            a.leftPadding = b.leftPadding;
          if (null == a.rightPadding || 0 > a.rightPadding)
            a.rightPadding = b.rightPadding;
          if (null == a.topPadding || 0 > a.topPadding)
            a.topPadding = b.topPadding;
          if (null == a.leftPadding || 0 > a.bottomPadding)
            a.bottomPadding = b.bottomPadding;
        }
        null != b &&
          (null != a.titleFormat &&
            (Md.fillFontDefNulls(a.titleFormat, b.titleFormat),
            null != a.titleFormat.format &&
              null != b.titleFormat.format &&
              Md.fillFormatNulls(a.titleFormat.format, b.titleFormat.format)),
          null != a.bodyFormat &&
            (Md.fillFontDefNulls(a.bodyFormat, b.bodyFormat),
            null != a.bodyFormat.format &&
              null != b.bodyFormat.format &&
              Md.fillFormatNulls(a.bodyFormat.format, b.bodyFormat.format)));
        null == a.titleFormat &&
          (a.titleFormat = new kd(
            null,
            null,
            null,
            new id(null, 8, -16777216),
            null
          ));
        null == a.bodyFormat &&
          (a.bodyFormat = new kd(
            null,
            null,
            null,
            new id(null, 8, -16777216),
            null
          ));
        null == a.titleBorder && (a.titleBorder = new Te(Ya.NONE, 0, 0, 1));
        null == a.bodyBorder && (a.bodyBorder = new Te(Ya.NONE, 0, 0, 1));
        if (null == a.titleOffset) {
          var c = (b = 0);
          null == c && (c = 0);
          null == b && (b = 0);
          b = new ba(b, c);
          a.titleOffset = b;
        }
        null == a.bodyOffset &&
          ((c = b = 0),
          null == c && (c = 0),
          null == b && (b = 0),
          (b = new ba(b, c)),
          (a.bodyOffset = b));
        null == a.background && (a.background = 16777162);
        null == a.borderColor && (a.borderColor = -16777216);
        null == a.arrow && (a.arrow = "flixel/flixel-ui/img/tooltip_arrow.png");
        if (null == a.borderSize || 0 > a.borderSize) a.borderSize = 1;
        if (null == a.titleWidth || 0 > a.titleWidth) a.titleWidth = 100;
        if (null == a.bodyWidth || 0 > a.bodyWidth) a.bodyWidth = 100;
        null == a.autoSizeHorizontal && (a.autoSizeHorizontal = !0);
        null == a.autoSizeVertical && (a.autoSizeVertical = !0);
        if (null == a.leftPadding || 0 > a.leftPadding) a.leftPadding = 0;
        if (null == a.rightPadding || 0 > a.rightPadding) a.rightPadding = 0;
        if (null == a.topPadding || 0 > a.topPadding) a.topPadding = 0;
        if (null == a.leftPadding || 0 > a.bottomPadding) a.bottomPadding = 0;
        return a;
      };
      Md.cloneStyle = function (a) {
        var b = null != a.titleFormat ? a.titleFormat.clone() : null,
          c = null != a.bodyFormat ? a.bodyFormat.clone() : null,
          d = a.borderSize,
          e = a.titleWidth,
          f = a.bodyWidth,
          k = a.background,
          g = a.borderColor,
          l = a.arrow,
          h = a.titleOffset,
          u = null;
        if (null == u) {
          var m = 0,
            p = 0;
          null == p && (p = 0);
          null == m && (m = 0);
          m = ba.pool.get().set(m, p);
          m._inPool = !1;
          u = m;
        }
        m = h.x;
        p = h.y;
        null == p && (p = 0);
        null == m && (m = 0);
        u.set_x(m);
        u.set_y(p);
        h = a.bodyOffset;
        var n = null;
        null == n &&
          ((p = m = 0),
          null == p && (p = 0),
          null == m && (m = 0),
          (m = ba.pool.get().set(m, p)),
          (m._inPool = !1),
          (n = m));
        m = h.x;
        p = h.y;
        null == p && (p = 0);
        null == m && (m = 0);
        n.set_x(m);
        n.set_y(p);
        return {
          titleFormat: b,
          bodyFormat: c,
          borderSize: d,
          titleWidth: e,
          bodyWidth: f,
          background: k,
          borderColor: g,
          arrow: l,
          titleOffset: u,
          bodyOffset: n,
          titleBorder: a.titleBorder.clone(),
          bodyBorder: a.bodyBorder.clone(),
          autoSizeVertical: a.autoSizeVertical,
          autoSizeHorizontal: a.autoSizeHorizontal,
          leftPadding: a.leftPadding,
          rightPadding: a.rightPadding,
          topPadding: a.topPadding,
          bottomPadding: a.bottomPadding,
        };
      };
      Md.fillFontDefNulls = function (a, b) {
        0 == a.get_size() && a.set_size(b.get_size());
        if (null == a.name || "" == a.name) a.name = b.name;
        if (null == a.file || "" == a.file) a.file = b.file;
        if (null == a.extension || "" == a.extension) a.extension = b.extension;
        null == a.border &&
          (a.border = null != b.border ? b.border.clone() : null);
      };
      Md.fillFormatNulls = function (a, b) {
        null == a.align && (a.align = b.align);
        null == a.blockIndent && (a.blockIndent = b.blockIndent);
        null == a.bold && (a.bold = b.bold);
        null == a.bullet && (a.bullet = b.bullet);
        null == a.color && (a.color = b.color);
        null == a.font && (a.font = b.font);
        null == a.indent && (a.indent = b.indent);
        null == a.italic && (a.italic = b.italic);
        null == a.kerning && (a.kerning = b.kerning);
        null == a.leading && (a.leading = b.leading);
        null == a.leftMargin && (a.leftMargin = b.leftMargin);
        null == a.letterSpacing && (a.letterSpacing = b.letterSpacing);
        null == a.rightMargin && (a.rightMargin = b.rightMargin);
        null == a.size && (a.size = b.size);
        null == a.tabStops && (a.tabStops = b.tabStops);
        null == a.target && (a.target = b.target);
        null == a.underline && (a.underline = b.underline);
        null == a.url && (a.url = b.url);
      };
      Md.__super__ = Na;
      Md.prototype = q(Na.prototype, {
        show: function (a, b, c, d, e, f) {
          null == f && (f = !0);
          null == e && (e = !0);
          null == d && (d = !0);
          null == c && (c = "");
          null == b && (b = "");
          this.set_visible(!0);
          this.set_active(!0);
          this.set_x(0);
          this.set_y(0);
          this._bkg.set_x(0);
          this._bkg.set_y(0);
          this._arrow.set_x(0);
          this._arrow.set_y(0);
          this._arrowBkg.set_x(0);
          this._arrowBkg.set_y(0);
          this._arrowBkg = this.makeArrowBkg(this._arrowBkg);
          this._arrow.set_color(this.style.background);
          this._arrow.set_visible(this._arrowBkg.set_visible(f));
          0 < this.style.titleWidth &&
            this._titleText.set_width(
              this._titleText.textField.set_width(this.style.titleWidth) | 0
            );
          0 < this.style.bodyWidth &&
            this._bodyText.set_width(
              this._bodyText.textField.set_width(this.style.bodyWidth) | 0
            );
          null != this.style.titleFormat &&
            this.style.titleFormat.apply(null, this._titleText);
          null != this.style.bodyFormat &&
            this.style.bodyFormat.apply(null, this._bodyText);
          null != this.style.titleBorder &&
            this.style.titleBorder.apply(this._titleText);
          null != this.style.bodyBorder &&
            this.style.bodyBorder.apply(this._bodyText);
          this._titleText.set_text(b);
          this._bodyText.set_text(c);
          this._titleText.update(0);
          this._bodyText.update(0);
          b = (this._titleText.textField.get_textHeight() + 4) | 0;
          null != this.style.titleOffset &&
            (this._titleText.set_x(this.style.titleOffset.x | 0),
            this._titleText.set_y(this.style.titleOffset.y | 0));
          null != this.style.bodyOffset &&
            (this._bodyText.set_x(this.style.bodyOffset.x | 0),
            this._bodyText.set_y(
              (this._titleText.y + b + this.style.bodyOffset.y) | 0
            ));
          f = this._bkg.get_width() | 0;
          c = this._bkg.get_height() | 0;
          e &&
            ((e =
              "" != this._titleText.text
                ? this._titleText.x + this._titleText.get_width()
                : 0),
            (f =
              "" != this._bodyText.text
                ? this._bodyText.x + this._bodyText.get_width()
                : 0),
            (f = Math.max(e, f) | 0));
          d &&
            ((c =
              "" != this._titleText.text
                ? this._titleText.y + this._titleText.get_height()
                : 0),
            (d =
              "" != this._bodyText.text
                ? this._bodyText.y + this._bodyText.get_height()
                : 0),
            (c = Math.max(c, d) | 0),
            (c = Math.max(c, this._arrowBkg.get_height()) | 0));
          null == this.style.leftPadding && (this.style.leftPadding = 0);
          null == this.style.rightPadding && (this.style.rightPadding = 0);
          null == this.style.topPadding && (this.style.topPadding = 0);
          null == this.style.bottomPadding && (this.style.bottomPadding = 0);
          f += this.style.leftPadding + this.style.rightPadding;
          c += this.style.topPadding + this.style.bottomPadding;
          c |= 0;
          this.refreshBkg(f | 0, c, this.style);
          d = this._anchorArrow.x.offset | 0;
          e = this._anchorArrow.y.offset | 0;
          this._anchorArrow.x.offset -= this.anchor.x.offset;
          this._anchorArrow.y.offset += this.anchor.y.offset;
          this._anchorArrow.x.offset |= 0;
          this._anchorArrow.y.offset |= 0;
          this._anchorArrow.anchorThing(this._arrow, this._bkg);
          this._anchorArrow.x.offset = d;
          this._anchorArrow.y.offset = e;
          0 > this._arrow.x &&
            ((e = Math.abs(this._arrow.x) | 0),
            (d = this._bkg),
            d.set_x(d.x + e),
            (d = this._titleText),
            d.set_x(d.x + e),
            (d = this._bodyText),
            d.set_x(d.x + e),
            this._arrow.set_x(0));
          0 > this._arrow.y &&
            ((e = Math.abs(this._arrow.y) | 0),
            (d = this._bkg),
            d.set_y(d.y + e),
            (d = this._titleText),
            d.set_y(d.y + e),
            (d = this._bodyText),
            d.set_y(d.y + e),
            this._arrow.set_y(0));
          "" != this._titleText.text &&
            "" == this._bodyText.text &&
            ((c -= this.style.topPadding + this.style.bottomPadding),
            (d = this._titleText),
            d.set_y(d.y + (((c - b) / 2) | 0)));
          d = this._titleText;
          d.set_x(d.x + this.style.leftPadding);
          d = this._bodyText;
          d.set_x(d.x + this.style.leftPadding);
          d = this._titleText;
          d.set_y(d.y + this.style.topPadding);
          d = this._bodyText;
          d.set_y(d.y + this.style.topPadding);
          "" == this._titleText.text &&
            (this._titleText.set_x(this._bkg.x),
            this._titleText.set_y(this._bkg.y),
            this._titleText.set_width(this._bkg.get_width()));
          "" == this._bodyText.text &&
            (this._bodyText.set_x(this._bkg.x),
            this._bodyText.set_y(this._bkg.y),
            this._bodyText.set_width(this._bkg.get_width()));
          this.anchor.anchorThing(this, a);
          this.set_x(this.x | 0);
          this.set_y(this.y | 0);
          this._arrowBkg.set_x((this._arrow.x - this.style.borderSize) | 0);
          this._arrowBkg.set_y((this._arrow.y - this.style.borderSize) | 0);
          this._titleText.set_x(this._titleText.x | 0);
          this._bodyText.set_x(this._bodyText.x | 0);
          this._bkg.set_x(this._bkg.x | 0);
          this._bkg.set_y(this._bkg.y | 0);
          this._arrowBkg.set_x(this._arrowBkg.x | 0);
          this._arrowBkg.set_y(this._arrowBkg.y | 0);
          this._arrow.set_x(this._arrow.x | 0);
          this._arrow.set_y(this._arrow.y | 0);
        },
        get_height: function () {
          if (0 == this.group.length) return 0;
          for (
            var a = Infinity, b = -Infinity, c = 0, d = this.group.members;
            c < d.length;

          ) {
            var e = d[c];
            ++c;
            if (null != e && !(e instanceof W)) {
              var f = e.y;
              e = f + e.get_height();
              e > b && (b = e);
              f < a && (a = f);
            }
          }
          return b - a;
        },
        hide: function () {
          this.set_visible(!1);
          this.set_active(!1);
        },
        set_anchor: function (a) {
          this.anchor = a;
          this._anchorArrow = this.getArrowAnchor(a, this._anchorArrow);
          null != this._arrowBkg && this.makeArrowBkg(this._arrowBkg);
          return a;
        },
        set_style: function (a) {
          return (this.style = a);
        },
        refresh: function (a, b, c, d, e, f) {
          var k = null == this._bkg,
            r = null == this._arrow,
            l = null == this._titleText,
            h = null == this._bodyText;
          k && (this._bkg = new F());
          r && (this._arrow = new F());
          l &&
            ((this._titleText = new Ed(0, 0, a)),
            null != f.titleFormat && f.titleFormat.apply(null, this._titleText),
            null != f.titleBorder && f.titleBorder.apply(this._titleText));
          h &&
            ((this._bodyText = new Ed(0, 0, a)),
            null != f.bodyFormat && f.bodyFormat.apply(null, this._bodyText),
            null != f.bodyBorder && f.bodyBorder.apply(this._bodyText));
          this._titleText.set_text(c);
          this._bodyText.set_text(d);
          this._arrow.set_color(f.background);
          c = g.bitmap.add(f.arrow);
          null == f.arrow &&
            ((f.arrow = "flixel/flixel-ui/img/tooltip_arrow.png"),
            g.bitmap.add(f.arrow));
          this._arrow.loadGraphic(f.arrow, !0, c.height, c.height);
          r &&
            (this._arrow.animation.add("right", [0], 0, !1),
            this._arrow.animation.add("down", [1], 0, !1),
            this._arrow.animation.add("left", [2], 0, !1),
            this._arrow.animation.add("up", [3], 0, !1));
          this.refreshBkg(a, b, f);
          this.set_style(f);
          r &&
            0 < f.borderSize &&
            ((this._arrowBkg = new F()), this.add(this._arrowBkg));
          this.set_anchor(e);
          k && this.add(this._bkg);
          r && this.add(this._arrow);
          l && this.add(this._titleText);
          h && this.add(this._bodyText);
        },
        refreshBkg: function (a, b, c) {
          var d = this.getStyleKey(a, b, c);
          if (null == g.bitmap._cache.h[d]) {
            if (0 < c.borderSize) {
              var e = new S(a, b, !1, c.borderColor);
              e.fillRect(
                new ha(
                  c.borderSize,
                  c.borderSize,
                  a - 2 * c.borderSize,
                  b - 2 * c.borderSize
                ),
                c.background
              );
            } else e = new S(a, b, !1, c.background);
            g.bitmap.add(e, !0, d);
          }
          this._bkg.loadGraphic(d);
        },
        getStyleKey: function (a, b, c) {
          var d = c.background;
          a =
            a +
            "," +
            b +
            "," +
            ("0x" +
              K.hex((d >> 24) & 255, 2) +
              K.hex((d >> 16) & 255, 2) +
              K.hex((d >> 8) & 255, 2) +
              K.hex(d & 255, 2)) +
            "," +
            c.borderSize +
            ",";
          d = c.borderColor;
          return (
            a +
            ("0x" +
              K.hex((d >> 24) & 255, 2) +
              K.hex((d >> 16) & 255, 2) +
              K.hex((d >> 8) & 255, 2) +
              K.hex(d & 255, 2))
          );
        },
        makeArrowBkg: function (a) {
          null == a && (a = new F());
          var b =
            "arrowBkg:" +
            this.style.background +
            "," +
            this.style.borderSize +
            "," +
            this.style.borderColor +
            "," +
            (null == this._arrow
              ? "null"
              : null == this._arrow.animation._curAnim
              ? "null"
              : this._arrow.animation._curAnim.name);
          if (null == g.bitmap._cache.h[b]) {
            var c = this.style.borderSize;
            if (0 > c || null == c) c = 0;
            var d = (this._arrow.get_width() + c) | 0;
            c = (this._arrow.get_height() + c) | 0;
            d = new S(d, c, !0, 0);
            g.bitmap.add(d, !1, b);
            a.loadGraphic(b);
            d = this._arrow.color;
            this._arrow.set_color(this.style.borderColor);
            new xa().identity();
            a.stamp(
              this._arrow,
              0 * this.style.borderSize,
              0 * this.style.borderSize
            );
            a.stamp(
              this._arrow,
              this.style.borderSize,
              0 * this.style.borderSize
            );
            a.stamp(
              this._arrow,
              2 * this.style.borderSize,
              0 * this.style.borderSize
            );
            a.stamp(
              this._arrow,
              0 * this.style.borderSize,
              this.style.borderSize
            );
            a.stamp(
              this._arrow,
              2 * this.style.borderSize,
              this.style.borderSize
            );
            a.stamp(
              this._arrow,
              0 * this.style.borderSize,
              2 * this.style.borderSize
            );
            a.stamp(
              this._arrow,
              this.style.borderSize,
              2 * this.style.borderSize
            );
            a.stamp(
              this._arrow,
              2 * this.style.borderSize,
              2 * this.style.borderSize
            );
            this._arrow.set_color(d);
          }
          a.loadGraphic(b);
          return a;
        },
        getArrowAnchor: function (a, b) {
          var c =
              ("left" == a.x.side && "right" == a.x.flush) ||
              ("right" == a.x.side && "left" == a.x.flush),
            d =
              ("top" == a.y.side && "bottom" == a.y.flush) ||
              ("bottom" == a.y.side && "top" == a.y.flush),
            e =
              ("left" == a.x.side && "left" == a.x.flush) ||
              ("right" == a.x.side && "right" == a.x.flush),
            f =
              ("top" == a.y.side && "top" == a.y.flush) ||
              ("bottom" == a.y.side && "bottom" == a.y.flush),
            k = e && f,
            g = this.style.borderSize;
          (c && d) ||
            (c &&
              ((b = a.getFlipped(!0, !1, b)),
              "left" == b.x.flush &&
                ((b.x.offset -= g), this._arrow.animation.play("right")),
              "right" == b.x.flush &&
                ((b.x.offset += g), this._arrow.animation.play("left"))),
            d &&
              ((b = a.getFlipped(!1, !0, b)),
              "top" == b.y.flush &&
                ((b.y.offset -= g), this._arrow.animation.play("down")),
              "bottom" == b.y.flush &&
                ((b.y.offset += g), this._arrow.animation.play("up"))));
          k ||
            (e &&
              ("left" == b.x.flush && (b.x.offset += g),
              "right" == b.x.flush && (b.x.offset -= g)),
            f &&
              ("top" == b.y.flush && (b.y.offset += g),
              "bottom" == b.y.flush && (b.y.offset -= g)));
          return null != b ? b : a;
        },
        __class__: Md,
        __properties__: q(Na.prototype.__properties__, {
          set_anchor: "set_anchor",
          set_style: "set_style",
        }),
      });
      var Gi = function (a, b) {
        this.current = -1;
        this._init = !1;
        this.delay = 0.1;
        this.defaultAnchor = this.fixedPosition = this.defaultStyle = null;
        this.autoFlipAnchor = !0;
        null != a ? (this.state = a) : null != b && (this.subState = b);
        this.list = [];
        this.tooltip = new Md(100, 50);
        b = a = 0;
        null == b && (b = 0);
        null == a && (a = 0);
        this.lastPosition = new ba(a, b);
        this.defaultAnchor = this.tooltip.anchor.clone();
        this.defaultStyle = Md.cloneStyle(this.tooltip.style);
      };
      h["flixel.addons.ui.FlxUITooltipManager"] = Gi;
      Gi.__name__ = "flixel.addons.ui.FlxUITooltipManager";
      Gi.__interfaces__ = [U];
      Gi.prototype = {
        init: function () {
          var a =
            null != this.state
              ? this.state._ui
              : null != this.subState
              ? this.subState._ui
              : null;
          null != a &&
            null != a &&
            null != a.getDefinition("default:tooltip") &&
            ((a = a._loadTooltipData(null)),
            (this.defaultStyle = Md.cloneStyle(a.style)),
            this.tooltip.set_style(this.defaultStyle));
        },
        destroy: function () {
          V.destroyArray(this.list);
          this.defaultStyle =
            this.defaultAnchor =
            this.subState =
            this.state =
            this.lastPosition =
            this.tooltip =
            this.list =
              null;
        },
        add: function (a, b) {
          this._init && (b.style = Md.styleFix(b.style, this.defaultStyle));
          if (za.__implements(a, Vg)) {
            var c = a;
            var d = this.findBtn(c);
            -1 == d
              ? this.list.push(new mj(c, b))
              : ((this.list[d].data = b), (this.list[d].count = 0));
          } else if (((d = this.findObj(a)), -1 == d)) {
            c = new gd(0, 0, "", null, !1, !0);
            c.resize(a.get_width(), a.get_height());
            c.set_x(a.x);
            c.set_y(a.y);
            c.set_width(a.get_width());
            c.set_height(a.get_height());
            d = c.scrollFactor;
            var e = a.scrollFactor.x,
              f = a.scrollFactor.y;
            null == f && (f = 0);
            null == e && (e = 0);
            d.set_x(e);
            d.set_y(f);
            null != this.state
              ? this.state.add(c)
              : null != this.subState && this.subState.add(c);
            this.list.push(new mj(c, b, a));
          } else
            (this.list[d].data = b),
              (this.list[d].count = 0),
              this.list[d].btn.set_x(a.x),
              this.list[d].btn.set_y(a.y),
              this.list[d].btn.set_width(a.get_width()),
              this.list[d].btn.set_height(a.get_height()),
              (d = this.list[d].btn.scrollFactor),
              (e = a.scrollFactor.x),
              (f = a.scrollFactor.y),
              null == f && (f = 0),
              null == e && (e = 0),
              d.set_x(e),
              d.set_y(f);
        },
        update: function (a) {
          for (var b = 0, c = this.list.length; b < c; ) {
            var d = b++,
              e = this.list[d].btn,
              f = this.list[d].obj;
            if (0 == this.list[d].enabled)
              this.current == d && this.hide(d), (this.list[d].count = 0);
            else if (
              (null != f &&
                (e.set_x(f.x),
                e.set_y(f.y),
                e.set_width(f.get_width()),
                e.set_height(f.get_height()),
                e.set_visible(f.visible)),
              0 == this.list[d].sticky &&
              (0 == e.visible || e.get_justMousedOut() || e.get_mouseIsOut())
                ? ((this.list[d].count = 0), this.hide(d))
                : (e.get_justMousedOver() || e.get_mouseIsOver()) &&
                  e.get_mouseIsOver() &&
                  (this.list[d].count += a),
              this.list[d].count > this.delay ||
                (0 <= this.list[d].data.delay &&
                  this.list[d].count > this.list[d].data.delay))
            )
              this.current != d
                ? this.show(d)
                : this.list[d].data.moving && this.show(d);
          }
        },
        hide: function (a) {
          this.current == a &&
            (this.tooltip.hide(),
            null != this.state && this.state.remove(this.tooltip, !0),
            null != this.subState && this.subState.remove(this.tooltip, !0),
            (this.current = -1));
        },
        findBtn: function (a) {
          if (null == a) return -1;
          for (var b = 0, c = this.list.length; b < c; ) {
            var d = b++;
            if (null != this.list[d] && this.list[d].btn == a) return d;
          }
          return -1;
        },
        findObj: function (a) {
          if (null == a) return -1;
          for (var b = 0, c = this.list.length; b < c; ) {
            var d = b++;
            if (null != this.list[d] && this.list[d].obj == a) return d;
          }
          return -1;
        },
        show: function (a) {
          if (!(0 > a || a >= this.list.length)) {
            var b = this.list[a].btn;
            if (
              0 != b.visible &&
              (null == this.list[a].obj || 0 != this.list[a].obj.visible)
            )
              if (this.current == a) {
                a = b.x - this.lastPosition.x;
                var c = b.y - this.lastPosition.y;
                this.lastPosition.set_x(b.x);
                this.lastPosition.set_y(b.y);
                b = this.tooltip;
                b.set_x(b.x + a);
                b = this.tooltip;
                b.set_y(b.y + c);
              } else {
                this.current = a;
                a = this.list[a].data;
                1 != a.init &&
                  ((a.style = Md.styleFix(a.style, this.defaultStyle)),
                  (a.init = !0));
                var d = (c = !0);
                null != a.style &&
                  (this.tooltip.set_style(a.style),
                  (c = a.style.autoSizeVertical),
                  (d = a.style.autoSizeHorizontal));
                null != a.anchor
                  ? this.tooltip.set_anchor(a.anchor)
                  : null != this.defaultAnchor &&
                    this.tooltip.set_anchor(this.defaultAnchor);
                null != this.state && this.state.add(this.tooltip);
                null != this.subState && this.subState.add(this.tooltip);
                this.tooltip.show(b, a.title, a.body, c, d);
                null != this.fixedPosition &&
                  this.fixedPosition.anchor.anchorThing(
                    this.tooltip,
                    this.fixedPosition.object
                  );
                this.autoFlipAnchor &&
                  this.checkAutoFlip(
                    this.tooltip,
                    null != this.fixedPosition
                      ? this.fixedPosition.anchor
                      : null
                  ) &&
                  (null != this.fixedPosition
                    ? this.fixedPosition.anchor.anchorThing(
                        this.tooltip,
                        this.fixedPosition.object
                      )
                    : this.tooltip.show(
                        b,
                        a.title,
                        a.body,
                        c,
                        d,
                        this.showTooltipArrow
                      ));
                a = this.lastPosition;
                c = b.x;
                b = b.y;
                null == b && (b = 0);
                null == c && (c = 0);
                a.set_x(c);
                a.set_y(b);
                if (null != this.state) this.state.onShowTooltip(this.tooltip);
                else if (null != this.subState)
                  this.subState.onShowTooltip(this.tooltip);
              }
          }
        },
        checkAutoFlip: function (a, b) {
          var c = 0 > a.x || a.x + a.get_width() > g.width,
            d = 0 > a.y || a.y + a.get_height() > g.height;
          return c || d
            ? (null == b && (b = a.anchor), b.getFlipped(c, d, b), !0)
            : !1;
        },
        __class__: Gi,
      };
      var mj = function (a, b, c) {
        this.sticky = !1;
        this.btn = a;
        this.data = b;
        this.obj = c;
        this.count = 0;
        this.enabled = !0;
        null != this.data &&
          (null == this.data.delay && (this.data.delay = -1),
          null == this.data.moving && (this.data.moving = !1));
      };
      h["flixel.addons.ui._FlxUITooltipManager.FlxUITooltipEntry"] = mj;
      mj.__name__ = "flixel.addons.ui._FlxUITooltipManager.FlxUITooltipEntry";
      mj.__interfaces__ = [U];
      mj.prototype = {
        destroy: function () {
          this.count = 0;
          this.btn = this.obj = null;
          this.data.anchor = null;
          this.data = this.data.style = null;
        },
        __class__: mj,
      };
      var kd = function (a, b, c, d, e) {
        null == c && (c = "");
        null == b && (b = ".ttf");
        this._size = 0;
        this.name = a;
        this.extension = b;
        this.file = c;
        this.format = d;
        null == this.format && (this.format = new id());
        this.border = e;
        null == this.border && (this.border = new Te(Ya.NONE, 0));
      };
      h["flixel.addons.ui.FontDef"] = kd;
      kd.__name__ = "flixel.addons.ui.FontDef";
      kd.copyFromTextField = function (a) {
        a = a.get_defaultTextFormat();
        var b = new kd("");
        b.fromStr(a.font);
        b.format.font = a.font;
        b.format.size = a.size;
        b.format.color = a.color;
        b.format.bold = a.bold;
        b.format.italic = a.italic;
        b.format.underline = a.underline;
        b.format.url = a.url;
        b.format.letterSpacing = a.letterSpacing;
        b.format.leading = a.leading;
        b.format.target = a.target;
        b.format.align = a.align;
        return b;
      };
      kd.copyFromFlxText = function (a) {
        var b = kd.copyFromTextField(a.textField);
        b.fromStr(a._font);
        b.border.style = a.borderStyle;
        b.border.color = a.borderColor;
        b.border.quality = a.borderQuality;
        b.border.size = a.borderSize;
        return b;
      };
      kd.fromXML = function (a) {
        var b = E.xml_str(a, "font"),
          c = E.xml_str(a, "style"),
          d = null;
        "" != b && (d = Ea.font(b, c));
        c = E.xml_str(a, "style");
        b = Ea.fontSize(d, E.xml_i(a, "size", 8));
        var e = E.xml_color(a, "color", !0, -1);
        switch (E.xml_str(a, "align").toLowerCase()) {
          case "center":
            var f = 0;
            break;
          case "justify":
            f = 2;
            break;
          case "left":
            f = 3;
            break;
          case "right":
            f = 4;
            break;
          default:
            f = 3;
        }
        d = new kd(E.xml_str(a, "font"), ".ttf", d);
        d.format.color = e;
        d.format.size = b;
        d.format.align = f;
        d.set_size(b);
        d.setFontStyle(c);
        d.border = Te.fromXML(a);
        return d;
      };
      kd.prototype = {
        get_size: function () {
          null != this.format && (this._size = this.format.size | 0);
          return this._size;
        },
        set_size: function (a) {
          null != this.format && (this.format.size = a);
          return (this._size = a);
        },
        clone: function () {
          var a = null == this.border ? null : this.border.clone(),
            b =
              null == this.format
                ? null
                : new id(
                    this.format.font,
                    this.format.size,
                    this.format.color,
                    this.format.bold,
                    this.format.italic,
                    this.format.underline,
                    this.format.url,
                    this.format.target,
                    this.format.align,
                    this.format.leftMargin,
                    this.format.rightMargin,
                    this.format.indent,
                    this.format.leading
                  );
          null != this.format && (b.letterSpacing = this.format.letterSpacing);
          a = new kd(this.name, this.extension, this.file, b, a);
          a.set_size(this.get_size());
          return a;
        },
        applyFlx: function (a) {
          var b = null;
          if (null != this.format.align)
            switch (this.format.align) {
              case 0:
                b = "center";
                break;
              case 2:
                b = "justify";
                break;
              case 3:
                b = "left";
                break;
              case 4:
                b = "right";
                break;
              default:
                b = "left";
            }
          a.setFormat(
            "" == this.file || null == this.file ? null : this.file,
            this.format.size | 0,
            this.format.color,
            b,
            this.border.style,
            this.border.color
          );
          a.textField.get_defaultTextFormat().leading = this.format.leading;
          a.textField.get_defaultTextFormat().letterSpacing =
            this.format.letterSpacing;
          return a;
        },
        apply: function (a, b) {
          null != a && a.setTextFormat(this.format);
          null != b && this.applyFlx(b);
        },
        fromStr: function (a, b) {
          null == b && (b = 0);
          if (!(3 < b)) {
            a = ge.fix(a);
            var c = this.getFontStyle(a);
            this.setFontStyle(c);
            for (var d = "", e = 0, f = kd.EXTENSIONS; e < f.length; ) {
              var k = f[e];
              ++e;
              if (-1 != a.indexOf(k) && aa.exists(a + d, "FONT")) {
                this.name = K.replace(a, d, "");
                this.file = a;
                d = k;
                break;
              }
            }
            if ("" == d) {
              e = 0;
              for (f = kd.EXTENSIONS; e < f.length; )
                if (((k = f[e]), ++e, aa.exists(a + k, "FONT"))) {
                  d = k;
                  this.name = a;
                  this.file = a + d;
                  break;
                }
              this.setFontStyle(c);
            } else
              (a = this.stripFontExtensions(a)),
                "" != this.getFontStyle(a) &&
                  (a = X.substr(a, a.length - 1, 1)),
                this.fromStr(a, b + 1);
          }
        },
        stripFontExtensions: function (a) {
          if (null == a) return a;
          for (var b = 0, c = kd.EXTENSIONS; b < c.length; ) {
            var d = c[b];
            ++b;
            null != a && -1 != a.indexOf(d) && (a = K.replace(a, d, ""));
          }
          return a;
        },
        getFontExtension: function (a) {
          if (null == a) return "";
          for (var b = 0, c = kd.EXTENSIONS; b < c.length; ) {
            var d = c[b];
            ++b;
            if (-1 != a.indexOf(d)) return d;
          }
          return a;
        },
        fixFontName: function () {
          var a = this.getFontStyle(this.file),
            b = this.getFontExtension(this.file),
            c = this.stripFontExtensions(this.file);
          "" != a && (c = X.substr(c, 0, c.length - 1));
          a = "";
          this.format.bold && this.format.italic
            ? (a = "z")
            : this.format.bold
            ? (a = "b")
            : this.format.italic && (a = "i");
          this.file = c + a + b;
        },
        getFontStyle: function (a) {
          if (null == a) return "";
          a = this.stripFontExtensions(a);
          a = X.substr(a, a.length - 1, 1);
          if ("" != a && null != a)
            switch (((a = a.toLowerCase()), a)) {
              case "b":
                return "b";
              case "i":
                return "i";
              case "z":
                return "z";
            }
          return "";
        },
        setFontStyle: function (a) {
          a = a.toLowerCase();
          switch (a) {
            case "b":
            case "bold":
              this.format.bold = !0;
              this.format.italic = !1;
              break;
            case "all":
            case "bi":
            case "bold-italic":
            case "bolditalic":
            case "both":
            case "ib":
            case "italicbold":
            case "z":
              this.format.bold = !0;
              this.format.italic = !0;
              break;
            case "i":
            case "italic":
              this.format.bold = !1;
              this.format.italic = !0;
              break;
            default:
              (this.format.bold = !1), (this.format.italic = !1);
          }
          this.fixFontName();
        },
        __class__: kd,
        __properties__: { set_size: "set_size", get_size: "get_size" },
      };
      var ge = function () {};
      h["flixel.addons.ui.FontFixer"] = ge;
      ge.__name__ = "flixel.addons.ui.FontFixer";
      ge.init = function () {
        null == ge.name2File && (ge.name2File = new Q());
      };
      ge.fix = function (a) {
        ge.init();
        -1 == a.indexOf(".ttf") &&
          Object.prototype.hasOwnProperty.call(ge.name2File.h, a) &&
          (a = ge.name2File.h[a]);
        return a;
      };
      ge.add = function (a, b) {
        null == b && (b = "");
        ge.init();
        if ("" != b && Object.prototype.hasOwnProperty.call(ge.name2File.h, b))
          return ge.name2File.h[b];
        if (!aa.exists(a, "FONT")) return a;
        var c = aa.getFont(a);
        if (null == c) return a;
        "" == b && (b = c.name);
        ge.name2File.h[b] = a;
        return ge.fix(a);
      };
      var jk = function (a, b) {
        null == b && (b = "");
        null == a && (a = "");
        this.name = a;
        this.label = b;
      };
      h["flixel.addons.ui.StrNameLabel"] = jk;
      jk.__name__ = "flixel.addons.ui.StrNameLabel";
      jk.prototype = { __class__: jk };
      var E = function () {};
      h["flixel.addons.ui.U"] = E;
      E.__name__ = "flixel.addons.ui.U";
      E.xml_str = function (a, b, c, d) {
        null == d && (d = "");
        null == c && (c = !1);
        return null != a.get(b) ? (c ? a.get(b).toLowerCase() : a.get(b)) : d;
      };
      E.xml_name = function (a) {
        var b = E.xml_str(a, "name", !0, "");
        "" == b && (b = E.xml_str(a, "id", !0, ""));
        return b;
      };
      E.xml_color = function (a, b, c, d) {
        c = null;
        a = E.xml_str(a, b, !0);
        if ("" != a) {
          b = ob.fromString(a);
          if (null == b)
            throw N.thrown("U.parseHex() unable to parse hex String " + a);
          c = b;
        }
        null == c && null != d && (c = d);
        return c;
      };
      E.xml_strArray = function (a, b, c, d) {
        null == c && (c = !0);
        a = E.xml_str(a, b, c);
        return "" != a ? a.split(",") : d;
      };
      E.xml_colorArray = function (a, b, c) {
        a = E.xml_strArray(a, b);
        b = null;
        if (null != a && 0 < a.length) {
          b = [];
          c = 0;
          for (var d = a.length; c < d; ) {
            var e = c++,
              f = a[e],
              k = ob.fromString(f);
            if (null == k)
              throw N.thrown("U.parseHex() unable to parse hex String " + f);
            b[e] = k;
          }
        }
        return b;
      };
      E.perc_to_float = function (a) {
        if (a.lastIndexOf("%") == a.length - 1) {
          a = X.substr(a, 0, a.length - 1);
          var b = new ya("([0-9]+)?(\\.)?([0-9]*)?", "");
          if (
            b.match(a) &&
            ((b = b.matchedPos()), 0 == b.pos && b.len == a.length)
          )
            return parseFloat(a) / 100;
        }
        return NaN;
      };
      E.isStrNum = function (a) {
        if (null == a || "" == a) return !1;
        var b = new ya("-?([0-9]+)?(\\.)?([0-9]*)?", "");
        return b.match(a) &&
          ((b = b.matchedPos()), 0 == b.pos && b.len == a.length)
          ? !0
          : !1;
      };
      E.xml_f = function (a, b, c) {
        null == c && (c = 0);
        return null != a.get(b) ? parseFloat(a.get(b)) : c;
      };
      E.xml_i = function (a, b, c) {
        null == c && (c = 0);
        return null != a.get(b) ? M.parseInt(a.get(b)) : c;
      };
      E.xml_pt = function (a, b, c) {
        return null != a.get(b) ? E.pointify(a.get(b)) : c;
      };
      E.boolify = function (a) {
        a = a.toLowerCase();
        return "true" == a || "1" == a ? !0 : !1;
      };
      E.pointify = function (a) {
        var b = null;
        if (null != a) {
          for (var c = ["(", ")", " ", "=", ":"], d = 0; d < c.length; ) {
            var e = c[d];
            for (++d; -1 != a.indexOf(e); ) a = K.replace(a, e, "");
          }
          -1 == a.indexOf(",") &&
            -1 != a.indexOf("x") &&
            (a = K.replace(a, "x", ","));
          c = a.split(",");
          2 == c.length &&
            ((a = parseFloat(c[0])),
            (c = parseFloat(c[1])),
            null == c && (c = 0),
            null == a && (a = 0),
            (b = new ba(a, c)));
        }
        return b;
      };
      E.compareStringVars = function (a, b, c, d) {
        null == d && (d = "==");
        switch (c) {
          case "bool":
            a = E.boolify(a);
            b = E.boolify(b);
            if ("==" == d || "=" == d) return a == b;
            if ("!==" == d || "!=" == d) return a != b;
            break;
          case "float":
            a = parseFloat(a);
            b = parseFloat(b);
            if ("==" == d || "=" == d) return a == b;
            if ("!==" == d || "!=" == d) return a != b;
            if ("<" == d) return a < b;
            if (">" == d) return a > b;
            if ("<=" == d) return a <= b;
            if (">=" == d) return a >= b;
            break;
          case "int":
            a = M.parseInt(a);
            b = M.parseInt(b);
            if ("==" == d || "=" == d) return a == b;
            if ("!==" == d || "!=" == d) return a != b;
            if ("<" == d) return a < b;
            if (">" == d) return a > b;
            if ("<=" == d) return a <= b;
            if (">=" == d) return a >= b;
            break;
          case "string":
            if ("==" == d || "=" == d) return a == b;
            if ("!==" == d || "!=" == d) return a != b;
        }
        return !1;
      };
      E.xml_bool = function (a, b, c) {
        null == c && (c = !1);
        return null != a.get(b)
          ? ((a = a.get(b)),
            (a = a.toLowerCase()),
            "true" == a || "1" == a ? !0 : !1)
          : c;
      };
      E.conformToBounds = function (a, b) {
        null != b &&
          (a.x < b.min_width && (a.x = b.min_width),
          a.y < b.min_height && (a.y = b.min_height),
          a.x > b.max_width && (a.x = b.max_width),
          a.x > b.max_height && (a.y = b.max_height));
        return a;
      };
      E.applyResize = function (a, b, c, d, e) {
        null == e && (e = new ba(0, 0));
        0 < a &&
          1e-4 < Math.abs(c / d - a) &&
          (1 == b ? (d = (1 / a) * c) : (c = (1 / a) * d));
        1 > (c | 0) && (c = 1);
        1 > (d | 0) && (d = 1);
        a = c;
        null == d && (d = 0);
        null == a && (a = 0);
        e.set_x(a);
        e.set_y(d);
        return e;
      };
      E.xml = function (a, b, c, d) {
        null == d && (d = "assets/xml/");
        null == c && (c = !0);
        null == b && (b = "xml");
        if (0 == a.indexOf("raw:") || 0 == a.indexOf("RAW:"))
          (a = X.substr(a, 4, a.length - 4)), (d = "");
        if (!aa.exists(d + a + "." + b, "TEXT")) return null;
        a = aa.getText(d + a + "." + b);
        if (null == a) return null;
        a = oa.parse(a);
        if (c) {
          c = a.firstElement();
          if (c.nodeType != oa.Document && c.nodeType != oa.Element)
            throw N.thrown(
              "Invalid nodeType " +
                (null == c.nodeType ? "null" : bb.toString(c.nodeType))
            );
          return c;
        }
        return a.firstElement();
      };
      E.clearArraySoft = function (a) {
        if (null != a)
          for (var b = a.length - 1; 0 <= b; )
            (a[b] = null), a.splice(b, 1), --b;
      };
      E.clearArray = function (a) {
        if (null != a)
          for (var b = a.length - 1; 0 <= b; )
            E.destroyThing(a[b]), (a[b] = null), a.splice(b, 1), --b;
      };
      E.destroyThing = function (a) {
        null != a &&
          (a instanceof Array
            ? E.clearArray(a)
            : za.__implements(a, U)
            ? za.__cast(a, U).destroy()
            : a instanceof O && za.__cast(a, O).destroy());
      };
      E.font = function (a, b, c) {
        null == c && (c = ".ttf");
        null == b && (b = "");
        var d = a,
          e = b;
        null == e && (e = "");
        e = e.toLowerCase();
        var f = "";
        switch (e) {
          case "b":
          case "bold":
            f = "b";
            break;
          case "bi":
          case "bold-italic":
          case "boldi":
          case "bolditalic":
          case "ib":
          case "ibold":
          case "italic-bold":
          case "italicbold":
          case "z":
            f = "z";
            break;
          case "i":
          case "italic":
            f = "i";
            break;
          case "":
          case "none":
          case "normal":
          case "regular":
            f = "";
        }
        a = 0 != a.indexOf("assets/fonts/") ? "assets/fonts/" + a + f : a + f;
        -1 == a.indexOf(c) && (a += c);
        a = ge.add(a);
        return !aa.exists(a, "FONT") &&
          ".ttf" == c &&
          ((b = E.font(d, b, ".otf")), aa.exists(b, "FONT"))
          ? b
          : a;
      };
      E.FU = function (a) {
        return X.substr(a, 0, 1).toUpperCase() + X.substr(a, 1, a.length - 1);
      };
      E.getBmp = function (a) {
        var b = null;
        if ("string" == typeof a) b = a;
        else if (a instanceof Xb) b = a.key;
        else if (a instanceof S) return a;
        return null != g.bitmap._cache.h[b] &&
          ((a = g.bitmap._cache.h[b]), null != a.bitmap)
          ? a.bitmap
          : aa.getBitmapData(b, !1);
      };
      E.checkHaxedef = function (a) {
        a = a.toLowerCase();
        switch (a) {
          case "html5":
            return !0;
          case "js":
            return !0;
          case "lime_next":
          case "next":
            return !0;
          case "web":
            return !0;
        }
        return !1;
      };
      E.FU_ = function (a) {
        var b = a.split(" ");
        a = "";
        for (var c = 0, d = b.length; c < d; ) {
          var e = c++;
          a += E.FU(b[e]);
          e != b.length - 1 && (a += " ");
        }
        return a;
      };
      E.scaleTileBmp = function (a, b, c, d, e, f, k) {
        null == k && (k = !0);
        null == f && (f = -1);
        null == e && (e = -1);
        var r = aa.getBitmapData(a, !1);
        if (null == r)
          if (null != g.bitmap._cache.h[a]) r = g.bitmap._cache.h[a].bitmap;
          else return null;
        a = (r.width / c) | 0;
        var l = (r.height / d) | 0;
        -1 == e && (e = (c * b) | 0);
        -1 == f && ((f = (d * b) | 0), (b = f / d));
        if (0.001 < Math.abs(b - 1)) {
          var h = new S((e * a) | 0, (f * l) | 0, !0, 0),
            u = new ha(),
            m = new gb(),
            p = new xa();
          p.scale(b, b);
          for (b = 0; b < l; )
            for (var n = b++, q = 0, z = a; q < z; ) {
              var t = q++,
                w = new S(c, d, !0, 0);
              u.setTo(t * c, n * d, c, d);
              m.setTo(0, 0);
              w.copyPixels(r, u, m);
              var x = new S(e, f, !0, 0);
              x.draw(w, p, null, null, null, k);
              m.setTo(t * e, n * f);
              h.copyPixels(x, x.rect, m);
            }
          return h;
        }
        return r.clone();
      };
      E.scaleAndStoreTileset = function (a, b, c, d, e, f, k) {
        null == k && (k = !0);
        null == f && (f = -1);
        null == e && (e = -1);
        var r = a + "_x" + b;
        (null != g.bitmap._cache.h[r]) == 0 &&
          ((a = E.scaleTileBmp(a, b, c, d, e, f, k)), g.bitmap.add(a, !1, r));
        return r;
      };
      E.loadScaledImage = function (a, b, c, d) {
        null == d && (d = !0);
        var e = E.gfx(a);
        a = aa.getBitmapData(e, !1);
        if (null != a) {
          0 > b && (b = a.width);
          0 > c && (c = a.height);
          if (
            0.01 < Math.abs(b - a.width) + Math.abs(c - a.height) &&
            ((e = e + "_" + (b | 0) + "x" + (c | 0)),
            null == g.bitmap._cache.h[e])
          ) {
            var f = new S(b | 0, c | 0, !0, 0),
              k = E.getMatrix();
            k.identity();
            k.scale(b / a.width, c / a.height);
            f.draw(a, k, null, null, null, d);
            g.bitmap.add(f, !0, e);
          }
          return e;
        }
        return null;
      };
      E.gfx = function (a, b, c, d, e, f) {
        null == e && (e = "");
        null == d && (d = "");
        null == c && (c = "");
        null == b && (b = "");
        null != a && (a = a.toLowerCase());
        f = "";
        "" != b &&
          ((f = b + "/"),
          "" != c &&
            ((f += c + "/"),
            "" != d && ((f += d + "/"), "" != e && (f += e + "/"))));
        "" != f && (a = f + a);
        0 != a.indexOf("raw:") && (a = K.replace(a, "-", "_"));
        return E.get_gfx(a);
      };
      E.get_gfx = function (a) {
        var b = "";
        var c = -1 != a.indexOf(".jpg") ? ".jpg" : ".png";
        null != a &&
          4 < a.length &&
          -1 != a.indexOf(c) &&
          (a = X.substr(a, 0, a.length - 4));
        if (0 == a.indexOf("raw:") || 0 == a.indexOf("RAW:"))
          (a = X.substr(a, 4, a.length - 4)), (b = a + c);
        null != a && 0 == a.indexOf("assets/gfx/") && (b = a + c);
        "" == b && (b = "assets/gfx/" + a + c);
        -1 != b.indexOf(".stitch.txt" + c) &&
          (b = K.replace(b, ".stitch.txt" + c, ".stitch.txt"));
        return b;
      };
      E.unparentXML = function (a) {
        null != a.parent && a.parent.removeChild(a);
        return a;
      };
      E.setButtonLabel = function (a, b) {
        if (null != a)
          if (a instanceof gd) za.__cast(a, gd).label.set_text(b);
          else if (
            a instanceof Be &&
            null != a.label &&
            a.label instanceof wa
          ) {
            var c = a.label;
            if (null != c.group.members)
              for (a = 0, c = c.group.members; a < c.length; ) {
                var d = c[a];
                ++a;
                if (null != d && d instanceof W) {
                  za.__cast(d, W).set_text(b);
                  break;
                }
              }
          }
      };
      E.getMatrix = function () {
        null == E._matrix && (E._matrix = new xa());
        return E._matrix;
      };
      var rn = function () {};
      h["flixel.addons.ui.interfaces.IFireTongue"] = rn;
      rn.__name__ = "flixel.addons.ui.interfaces.IFireTongue";
      rn.__isInterface__ = !0;
      rn.prototype = { __class__: rn };
      var Ue = function (a, b) {
        this.curIndex = 0;
        this.parent = a;
        this.name = b;
      };
      h["flixel.animation.FlxBaseAnimation"] = Ue;
      Ue.__name__ = "flixel.animation.FlxBaseAnimation";
      Ue.__interfaces__ = [U];
      Ue.prototype = {
        set_curIndex: function (a) {
          this.curIndex = a;
          null != this.parent &&
            this.parent._curAnim == this &&
            this.parent.set_frameIndex(a);
          return a;
        },
        destroy: function () {
          this.name = this.parent = null;
        },
        __class__: Ue,
        __properties__: { set_curIndex: "set_curIndex" },
      };
      var ai = function (a, b, c, d, e, f, k) {
        null == k && (k = !1);
        null == f && (f = !1);
        null == e && (e = !0);
        null == d && (d = 0);
        this._frameTimer = 0;
        this.timeScale = 1;
        this.reversed = this.flipX = this.flipY = !1;
        this.loopPoint = 0;
        this.finished = this.paused = this.looped = !0;
        this.curFrame = this.frameDuration = 0;
        Ue.call(this, a, b);
        this.set_frameRate(d);
        this.frames = c;
        this.looped = e;
        this.flipX = f;
        this.flipY = k;
      };
      h["flixel.animation.FlxAnimation"] = ai;
      ai.__name__ = "flixel.animation.FlxAnimation";
      ai.__super__ = Ue;
      ai.prototype = q(Ue.prototype, {
        destroy: function () {
          this.name = this.frames = null;
          Ue.prototype.destroy.call(this);
        },
        play: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          null == a && (a = !1);
          a || this.finished || this.reversed != b
            ? ((this.reversed = b),
              (this.paused = !1),
              (this._frameTimer = 0),
              (this.finished = 0 == this.frameDuration),
              (a = this.frames.length - 1),
              0 > c
                ? this.set_curFrame(g.random.int(0, a))
                : (c > a && (c = a),
                  this.reversed && (c = a - c),
                  this.set_curFrame(c)),
              this.finished &&
                ((c = this.parent),
                null != c.finishCallback && c.finishCallback(this.name)))
            : (this.paused = !1);
        },
        restart: function () {
          this.play(!0, this.reversed);
        },
        stop: function () {
          this.paused = this.finished = !0;
        },
        reverse: function () {
          this.reversed = !this.reversed;
          this.finished && this.play(!1, this.reversed);
        },
        update: function (a) {
          var b = this.getCurrentFrameDuration();
          if (0 != b && !this.finished && !this.paused)
            for (
              this._frameTimer += a * this.timeScale;
              this._frameTimer > b && !this.finished;

            ) {
              this._frameTimer -= b;
              this.reversed
                ? this.looped && this.curFrame == this.loopPoint
                  ? this.set_curFrame(this.frames.length - 1)
                  : this.set_curFrame(this.curFrame - 1)
                : this.looped && this.curFrame == this.frames.length - 1
                ? this.set_curFrame(this.loopPoint)
                : this.set_curFrame(this.curFrame + 1);
              if (this.finished) break;
              b = this.getCurrentFrameDuration();
            }
        },
        getCurrentFrameDuration: function () {
          var a = this.parent.getFrameDuration(this.frames[this.curFrame]);
          return 0 < a ? a : this.frameDuration;
        },
        set_frameRate: function (a) {
          this.frameRate = a;
          this.frameDuration = 0 < a ? 1 / a : 0;
          return a;
        },
        set_curFrame: function (a) {
          var b = this.frames.length - 1,
            c = this.reversed ? b - a : a;
          0 <= c
            ? !this.looped && c > b
              ? ((this.finished = !0), (this.curFrame = this.reversed ? 0 : b))
              : (this.curFrame = a)
            : (this.curFrame = g.random.int(0, b));
          this.set_curIndex(this.frames[this.curFrame]);
          this.finished &&
            null != this.parent &&
            ((b = this.parent),
            null != b.finishCallback && b.finishCallback(this.name));
          return a;
        },
        __class__: ai,
        __properties__: q(Ue.prototype.__properties__, {
          set_curFrame: "set_curFrame",
          set_frameRate: "set_frameRate",
        }),
      });
      var Sj = function (a) {
        this._animations = new Q();
        this.timeScale = 1;
        this.frameIndex = -1;
        this._sprite = a;
      };
      h["flixel.animation.FlxAnimationController"] = Sj;
      Sj.__name__ = "flixel.animation.FlxAnimationController";
      Sj.__interfaces__ = [U];
      Sj.prototype = {
        update: function (a) {
          null != this._curAnim
            ? this._curAnim.update(a * this.timeScale * g.animationTimeScale)
            : null != this._prerotated &&
              this._prerotated.set_angle(this._sprite.angle);
        },
        copyFrom: function (a) {
          this.destroyAnimations();
          for (
            var b = a._animations.h, c = Object.keys(b), d = c.length, e = 0;
            e < d;

          ) {
            var f = b[c[e++]];
            this.add(f.name, f.frames, f.frameRate, f.looped, f.flipX, f.flipY);
          }
          null != a._prerotated && this.createPrerotated();
          null != a.get_name() && this.set_name(a.get_name());
          this.set_frameIndex(a.frameIndex);
          return this;
        },
        createPrerotated: function (a) {
          this.destroyAnimations();
          null == a && (a = this);
          this._prerotated = new Rk(a, a._sprite.bakedRotationAngle);
          this._prerotated.set_angle(this._sprite.angle);
        },
        destroyAnimations: function () {
          this.clearAnimations();
          this.clearPrerotated();
        },
        destroy: function () {
          this.destroyAnimations();
          this._sprite = this.callback = this._animations = null;
        },
        getFrameDuration: function (a) {
          return this._sprite.frames.frames[a].duration;
        },
        clearPrerotated: function () {
          null != this._prerotated && this._prerotated.destroy();
          this._prerotated = null;
        },
        clearAnimations: function () {
          if (null != this._animations)
            for (
              var a, b = Object.keys(this._animations.h), c = b.length, d = 0;
              d < c;

            )
              (a = b[d++]),
                (a = this._animations.h[a]),
                null != a && a.destroy();
          this._animations = new Q();
          this._curAnim = null;
        },
        add: function (a, b, c, d, e, f) {
          null == f && (f = !1);
          null == e && (e = !1);
          null == d && (d = !0);
          null == c && (c = 30);
          if (0 == this._sprite.get_numFrames())
            g.log.advanced(
              'Could not create animation: "' +
                a +
                '", this sprite has no frames',
              Ja.WARNING,
              !0
            );
          else {
            for (var k = b, r = !1, l = k.length; 0 <= l--; )
              k[l] >= this._sprite.get_numFrames() &&
                ((r = !0), k == b && (k = b.slice()), k.splice(l, 1));
            0 < k.length
              ? ((b = new ai(this, a, k, c, d, e, f)),
                (this._animations.h[a] = b),
                r &&
                  g.log.advanced(
                    "Could not add frames above " +
                      (this._sprite.get_numFrames() - 1) +
                      ' to animation: "' +
                      a +
                      '"',
                    Ja.WARNING,
                    !0
                  ))
              : g.log.advanced(
                  'Could not create animation: "' +
                    a +
                    '", no valid frames were given',
                  Ja.WARNING,
                  !0
                );
          }
        },
        remove: function (a) {
          var b = this._animations.h[a];
          if (null != b) {
            var c = this._animations;
            Object.prototype.hasOwnProperty.call(c.h, a) && delete c.h[a];
            b.destroy();
          }
        },
        addByIndices: function (a, b, c, d, e, f, k, g) {
          null == g && (g = !1);
          null == k && (k = !1);
          null == f && (f = !0);
          null == e && (e = 30);
          if (null != this._sprite.frames) {
            var l = [];
            this.byIndicesHelper(l, b, c, d);
            0 < l.length &&
              ((b = new ai(this, a, l, e, f, k, g)),
              (this._animations.h[a] = b));
          }
        },
        findSpriteFrame: function (a, b, c) {
          for (
            var d = this._sprite.frames.frames, e = 0, f = d.length;
            e < f;

          ) {
            var k = e++,
              g = d[k].name;
            if (
              K.startsWith(g, a) &&
              K.endsWith(g, c) &&
              M.parseInt(g.substring(a.length, g.length - c.length)) == b
            )
              return k;
          }
          return -1;
        },
        addByPrefix: function (a, b, c, d, e, f) {
          null == f && (f = !1);
          null == e && (e = !1);
          null == d && (d = !0);
          null == c && (c = 30);
          if (null != this._sprite.frames) {
            var k = [];
            this.findByPrefix(k, b);
            if (0 < k.length) {
              var r = [];
              this.byPrefixHelper(r, k, b);
              b = new ai(this, a, r, c, d, e, f);
              this._animations.h[a] = b;
            } else
              g.log.advanced(
                'Could not create animation: "' +
                  a +
                  '", no frames were found with the prefix "' +
                  b +
                  '" ',
                Ja.WARNING,
                !0
              );
          }
        },
        play: function (a, b, c, d) {
          null == d && (d = 0);
          null == c && (c = !1);
          null == b && (b = !1);
          null == a &&
            (null != this._curAnim && this._curAnim.stop(),
            (this._curAnim = null));
          if (null == a || null == this._animations.h[a])
            g.log.advanced('No animation called "' + a + '"', Ja.WARNING, !0);
          else {
            var e = !1,
              f = !1;
            null != this._curAnim &&
              a != this._curAnim.name &&
              ((e = this._curAnim.flipX),
              (f = this._curAnim.flipY),
              this._curAnim.stop());
            this._curAnim = this._animations.h[a];
            this._curAnim.play(b, c, d);
            if (e != this._curAnim.flipX || f != this._curAnim.flipY)
              this._sprite.dirty = !0;
          }
        },
        byIndicesHelper: function (a, b, c, d) {
          for (var e = 0; e < c.length; ) {
            var f = c[e];
            ++e;
            f = this.findSpriteFrame(b, f, d);
            -1 != f && a.push(f);
          }
        },
        byPrefixHelper: function (a, b, c) {
          var d = b[0].name,
            e = d.indexOf(".", c.length);
          d = d.substring(-1 == e ? d.length : e, d.length);
          Za.sort(b, c.length, d.length);
          for (c = 0; c < b.length; )
            (d = b[c]), ++c, a.push(this._sprite.frames.frames.indexOf(d));
        },
        findByPrefix: function (a, b, c) {
          c = 0;
          for (var d = this._sprite.frames.frames; c < d.length; ) {
            var e = d[c];
            ++c;
            null != e.name && K.startsWith(e.name, b) && a.push(e);
          }
          this.removeInvalidFrames(a);
        },
        removeInvalidFrames: function (a) {
          for (var b = [], c = a.length; 0 < c--; )
            null == a[c].parent.shader && b.unshift(a.splice(c, 1)[0]);
          return b;
        },
        set_frameIndex: function (a) {
          null != this._sprite.frames &&
            0 < this._sprite.get_numFrames() &&
            ((a %= this._sprite.get_numFrames()),
            this._sprite.set_frame(this._sprite.frames.frames[a]),
            (this.frameIndex = a),
            null != this.callback &&
              this.callback(
                null != this._curAnim ? this._curAnim.name : null,
                null != this._curAnim
                  ? this._curAnim.curFrame
                  : this.frameIndex,
                this.frameIndex
              ));
          return this.frameIndex;
        },
        get_name: function () {
          var a = null;
          null != this._curAnim && (a = this._curAnim.name);
          return a;
        },
        set_name: function (a) {
          this.play(a);
          return a;
        },
        get_finished: function () {
          var a = !0;
          null != this._curAnim && (a = this._curAnim.finished);
          return a;
        },
        __class__: Sj,
        __properties__: {
          get_finished: "get_finished",
          set_name: "set_name",
          get_name: "get_name",
          set_frameIndex: "set_frameIndex",
        },
      };
      var Rk = function (a, b) {
        this.angle = 0;
        Ue.call(this, a, "prerotated_animation");
        this.baked = b;
        this.rotations = Math.round(360 / b);
      };
      h["flixel.animation.FlxPrerotatedAnimation"] = Rk;
      Rk.__name__ = "flixel.animation.FlxPrerotatedAnimation";
      Rk.__super__ = Ue;
      Rk.prototype = q(Ue.prototype, {
        set_angle: function (a) {
          if (isNaN(a)) throw N.thrown("angle must not be NaN");
          for (var b = this.curIndex, c = Math.floor(a % 360); 0 > c; )
            c += 360;
          c = Math.floor(c / this.baked + 0.5);
          c = c % this.rotations | 0;
          b != c && this.set_curIndex(c);
          return (this.angle = a);
        },
        set_curIndex: function (a) {
          this.curIndex = a;
          null != this.parent && this.parent.set_frameIndex(a);
          return a;
        },
        __class__: Rk,
        __properties__: q(Ue.prototype.__properties__, {
          set_angle: "set_angle",
        }),
      });
      var ed = function () {};
      h["flixel.effects.FlxFlicker"] = ed;
      ed.__name__ = "flixel.effects.FlxFlicker";
      ed.__interfaces__ = [U];
      ed.flicker = function (a, b, c, d, e, f, k) {
        null == e && (e = !0);
        null == d && (d = !0);
        null == c && (c = 0.04);
        null == b && (b = 1);
        if (ed.isFlickering(a))
          if (e) ed.stopFlickering(a);
          else return ed._boundObjects.h[a.__id__];
        0 >= c && (c = g.elapsed);
        e = ed._pool.get();
        e.start(a, b, c, d, f, k);
        ed._boundObjects.set(a, e);
        return e;
      };
      ed.isFlickering = function (a) {
        return null != ed._boundObjects.h.__keys__[a.__id__];
      };
      ed.stopFlickering = function (a) {
        a = ed._boundObjects.h[a.__id__];
        null != a && a.stop();
      };
      ed.prototype = {
        destroy: function () {
          this.progressCallback =
            this.completionCallback =
            this.timer =
            this.object =
              null;
        },
        start: function (a, b, c, d, e, f) {
          this.object = a;
          this.duration = b;
          this.interval = c;
          this.completionCallback = e;
          this.progressCallback = f;
          this.endVisibility = d;
          this.timer = new fc().start(
            this.interval,
            n(this, this.flickerProgress),
            (this.duration / this.interval) | 0
          );
        },
        stop: function () {
          this.timer.cancel();
          this.object.set_visible(!0);
          this.release();
        },
        release: function () {
          ed._boundObjects.remove(this.object);
          ed._pool.put(this);
        },
        flickerProgress: function (a) {
          this.object.set_visible(!this.object.visible);
          null != this.progressCallback && this.progressCallback(this);
          0 < a.loops &&
            0 == a.loops - a._loopsCounter &&
            (this.object.set_visible(this.endVisibility),
            null != this.completionCallback && this.completionCallback(this),
            this.release());
        },
        __class__: ed,
      };
      var tn = function (a, b, c) {
        null == c && (c = 0);
        null == b && (b = 0);
        null == a && (a = 0);
        this._waitForKill = !1;
        var d = 0,
          e = 0;
        null == e && (e = 0);
        null == d && (d = 0);
        d = ba.pool.get().set(d, e);
        d._inPool = !1;
        this._point = d;
        this._timer = this._counter = 0;
        this._explode = !0;
        this.allowCollisions = this._quantity = 0;
        this.immovable = this.autoUpdateHitbox = !1;
        this.elasticity = new ag(0);
        this.acceleration = new wh(0, 0);
        this.drag = new wh(0, 0);
        this.color = new ag(-1, -1);
        this.alpha = new ag(1);
        this.scale = new wh(1, 1);
        this.lifespan = new Xg(3);
        this.launchAngle = new Xg(-180, 180);
        this.ignoreAngularVelocity = !1;
        this.angle = new ag(0);
        this.angularVelocity = new ag(0, 0);
        this.angularDrag = new ag(0, 0);
        this.angularAcceleration = new ag(0, 0);
        this.speed = new ag(0, 100);
        this.velocity = new wh(-100, -100, 100, 100);
        this.keepScaleRatio = !1;
        this.launchMode = sn.CIRCLE;
        this.x = this.y = this.width = this.height = 0;
        this.frequency = 0.1;
        this.emitting = !1;
        this.particleClass = nj;
        ma.call(this, c);
        null == b && (b = 0);
        null == a && (a = 0);
        this.x = a;
        this.y = b;
        this.set_exists(!1);
      };
      h["flixel.effects.particles.FlxTypedEmitter"] = tn;
      tn.__name__ = "flixel.effects.particles.FlxTypedEmitter";
      tn.__super__ = ma;
      tn.prototype = q(ma.prototype, {
        destroy: function () {
          this.velocity = V.destroy(this.velocity);
          this.scale = V.destroy(this.scale);
          this.drag = V.destroy(this.drag);
          this.acceleration = V.destroy(this.acceleration);
          this._point = V.put(this._point);
          this.elasticity =
            this.color =
            this.alpha =
            this.lifespan =
            this.launchAngle =
            this.speed =
            this.angle =
            this.angularVelocity =
            this.angularDrag =
            this.angularAcceleration =
            this.blend =
              null;
          ma.prototype.destroy.call(this);
        },
        update: function (a) {
          if (this.emitting)
            this._explode ? this.explode() : this.emitContinuously(a);
          else if (
            this._waitForKill &&
            ((this._timer += a),
            0 < this.lifespan.max && this._timer > this.lifespan.max)
          ) {
            this.kill();
            return;
          }
          ma.prototype.update.call(this, a);
        },
        explode: function () {
          var a = this._quantity;
          if (0 >= a || a > this.length) a = this.length;
          for (var b = 0; b < a; ) b++, this.emitParticle();
          this.onFinished();
        },
        emitContinuously: function (a) {
          if (0 >= this.frequency) this.emitParticleContinuously();
          else
            for (this._timer += a; this._timer > this.frequency; )
              (this._timer -= this.frequency), this.emitParticleContinuously();
        },
        emitParticleContinuously: function () {
          this.emitParticle();
          this._counter++;
          if (0 < this._quantity && this._counter >= this._quantity)
            this.onFinished();
        },
        onFinished: function () {
          this.emitting = !1;
          this._waitForKill = !0;
          this._quantity = 0;
        },
        kill: function () {
          this._waitForKill = this.emitting = !1;
          ma.prototype.kill.call(this);
        },
        emitParticle: function () {
          var a = this.recycle(this.particleClass);
          a.reset(0, 0);
          a.set_blend(this.blend);
          a.set_immovable(this.immovable);
          a.set_solid(4369 == (this.allowCollisions & 4369));
          a.set_allowCollisions(this.allowCollisions);
          a.autoUpdateHitbox = this.autoUpdateHitbox;
          this.lifespan.active &&
            (a.lifespan = g.random.float(this.lifespan.min, this.lifespan.max));
          if (this.velocity.active) {
            if (0 < a.lifespan) {
              var b = a.velocityRange.start;
              var c = a.velocityRange.end;
              b = 1e-7 >= Math.abs(b.x - c.x) && 1e-7 >= Math.abs(b.y - c.y);
              c._weak && c.put();
              b = !b;
            } else b = !1;
            a.velocityRange.active = b;
            if (this.launchMode == sn.CIRCLE) {
              b = 0;
              this.launchAngle.active &&
                (b = g.random.float(
                  this.launchAngle.min,
                  this.launchAngle.max
                ));
              var d = g.random.float(
                  this.speed.start.min,
                  this.speed.start.max
                ),
                e = (Math.PI / 180) * b;
              c = Math.cos(e) * d;
              d *= Math.sin(e);
              null == d && (d = 0);
              null == c && (c = 0);
              null == d && (d = 0);
              null == c && (c = 0);
              c = ba.pool.get().set(c, d);
              c._inPool = !1;
              this._point = c;
              a.velocity.set_x(this._point.x);
              a.velocity.set_y(this._point.y);
              e = a.velocityRange.start;
              c = this._point.x;
              d = this._point.y;
              null == d && (d = 0);
              null == c && (c = 0);
              e.set_x(c);
              e.set_y(d);
              d = g.random.float(this.speed.end.min, this.speed.end.max);
              e = (Math.PI / 180) * b;
              c = Math.cos(e) * d;
              d *= Math.sin(e);
              null == d && (d = 0);
              null == c && (c = 0);
              null == d && (d = 0);
              null == c && (c = 0);
              c = ba.pool.get().set(c, d);
              c._inPool = !1;
              this._point = c;
              e = a.velocityRange.end;
              c = this._point.x;
              d = this._point.y;
              null == d && (d = 0);
              null == c && (c = 0);
              e.set_x(c);
              e.set_y(d);
            } else
              a.velocityRange.start.set_x(
                g.random.float(
                  this.velocity.start.min.x,
                  this.velocity.start.max.x
                )
              ),
                a.velocityRange.start.set_y(
                  g.random.float(
                    this.velocity.start.min.y,
                    this.velocity.start.max.y
                  )
                ),
                a.velocityRange.end.set_x(
                  g.random.float(
                    this.velocity.end.min.x,
                    this.velocity.end.max.x
                  )
                ),
                a.velocityRange.end.set_y(
                  g.random.float(
                    this.velocity.end.min.y,
                    this.velocity.end.max.y
                  )
                ),
                a.velocity.set_x(a.velocityRange.start.x),
                a.velocity.set_y(a.velocityRange.start.y);
          } else a.velocityRange.active = !1;
          a.angularVelocityRange.active =
            0 < a.lifespan &&
            this.angularVelocity.start != this.angularVelocity.end;
          this.ignoreAngularVelocity
            ? this.angularVelocity.active &&
              ((a.angularVelocity =
                (g.random.float(this.angle.end.min, this.angle.end.max) -
                  g.random.float(this.angle.start.min, this.angle.start.max)) /
                g.random.float(this.lifespan.min, this.lifespan.max)),
              (a.angularVelocityRange.active = !1))
            : (this.angularAcceleration.active &&
                (a.angularAcceleration = g.random.float(
                  this.angularAcceleration.start.min,
                  this.angularAcceleration.start.max
                )),
              this.angularVelocity.active &&
                ((a.angularVelocityRange.start = g.random.float(
                  this.angularVelocity.start.min,
                  this.angularVelocity.start.max
                )),
                (a.angularVelocityRange.end = g.random.float(
                  this.angularVelocity.end.min,
                  this.angularVelocity.end.max
                )),
                (a.angularVelocity = a.angularVelocityRange.start)),
              this.angularDrag.active &&
                (a.angularDrag = g.random.float(
                  this.angularDrag.start.min,
                  this.angularDrag.start.max
                )));
          this.angle.active &&
            a.set_angle(
              g.random.float(this.angle.start.min, this.angle.start.max)
            );
          this.scale.active
            ? (a.scaleRange.start.set_x(
                g.random.float(this.scale.start.min.x, this.scale.start.max.x)
              ),
              a.scaleRange.start.set_y(
                this.keepScaleRatio
                  ? a.scaleRange.start.x
                  : g.random.float(
                      this.scale.start.min.y,
                      this.scale.start.max.y
                    )
              ),
              a.scaleRange.end.set_x(
                g.random.float(this.scale.end.min.x, this.scale.end.max.x)
              ),
              a.scaleRange.end.set_y(
                this.keepScaleRatio
                  ? a.scaleRange.end.x
                  : g.random.float(this.scale.end.min.y, this.scale.end.max.y)
              ),
              0 < a.lifespan
                ? ((b = a.scaleRange.start),
                  (c = a.scaleRange.end),
                  (b =
                    1e-7 >= Math.abs(b.x - c.x) && 1e-7 >= Math.abs(b.y - c.y)),
                  c._weak && c.put(),
                  (b = !b))
                : (b = !1),
              (a.scaleRange.active = b),
              a.scale.set_x(a.scaleRange.start.x),
              a.scale.set_y(a.scaleRange.start.y),
              a.autoUpdateHitbox && a.updateHitbox())
            : (a.scaleRange.active = !1);
          this.alpha.active
            ? ((a.alphaRange.start = g.random.float(
                this.alpha.start.min,
                this.alpha.start.max
              )),
              (a.alphaRange.end = g.random.float(
                this.alpha.end.min,
                this.alpha.end.max
              )),
              (a.alphaRange.active =
                0 < a.lifespan && a.alphaRange.start != a.alphaRange.end),
              a.set_alpha(a.alphaRange.start))
            : (a.alphaRange.active = !1);
          this.color.active
            ? ((a.colorRange.start = g.random.color(
                this.color.start.min,
                this.color.start.max
              )),
              (a.colorRange.end = g.random.color(
                this.color.end.min,
                this.color.end.max
              )),
              (a.colorRange.active =
                0 < a.lifespan && a.colorRange.start != a.colorRange.end),
              a.set_color(a.colorRange.start))
            : (a.colorRange.active = !1);
          this.drag.active
            ? (a.dragRange.start.set_x(
                g.random.float(this.drag.start.min.x, this.drag.start.max.x)
              ),
              a.dragRange.start.set_y(
                g.random.float(this.drag.start.min.y, this.drag.start.max.y)
              ),
              a.dragRange.end.set_x(
                g.random.float(this.drag.end.min.x, this.drag.end.max.x)
              ),
              a.dragRange.end.set_y(
                g.random.float(this.drag.end.min.y, this.drag.end.max.y)
              ),
              0 < a.lifespan
                ? ((b = a.dragRange.start),
                  (c = a.dragRange.end),
                  (b =
                    1e-7 >= Math.abs(b.x - c.x) && 1e-7 >= Math.abs(b.y - c.y)),
                  c._weak && c.put(),
                  (b = !b))
                : (b = !1),
              (a.dragRange.active = b),
              a.drag.set_x(a.dragRange.start.x),
              a.drag.set_y(a.dragRange.start.y))
            : (a.dragRange.active = !1);
          this.acceleration.active
            ? (a.accelerationRange.start.set_x(
                g.random.float(
                  this.acceleration.start.min.x,
                  this.acceleration.start.max.x
                )
              ),
              a.accelerationRange.start.set_y(
                g.random.float(
                  this.acceleration.start.min.y,
                  this.acceleration.start.max.y
                )
              ),
              a.accelerationRange.end.set_x(
                g.random.float(
                  this.acceleration.end.min.x,
                  this.acceleration.end.max.x
                )
              ),
              a.accelerationRange.end.set_y(
                g.random.float(
                  this.acceleration.end.min.y,
                  this.acceleration.end.max.y
                )
              ),
              0 < a.lifespan
                ? ((b = a.accelerationRange.start),
                  (c = a.accelerationRange.end),
                  (b =
                    1e-7 >= Math.abs(b.x - c.x) && 1e-7 >= Math.abs(b.y - c.y)),
                  c._weak && c.put(),
                  (b = !b))
                : (b = !1),
              (a.accelerationRange.active = b),
              a.acceleration.set_x(a.accelerationRange.start.x),
              a.acceleration.set_y(a.accelerationRange.start.y))
            : (a.accelerationRange.active = !1);
          this.elasticity.active
            ? ((a.elasticityRange.start = g.random.float(
                this.elasticity.start.min,
                this.elasticity.start.max
              )),
              (a.elasticityRange.end = g.random.float(
                this.elasticity.end.min,
                this.elasticity.end.max
              )),
              (a.elasticityRange.active =
                0 < a.lifespan &&
                a.elasticityRange.start != a.elasticityRange.end),
              (a.elasticity = a.elasticityRange.start))
            : (a.elasticityRange.active = !1);
          a.set_x(
            g.random.float(this.x, this.x + this.width) - a.get_width() / 2
          );
          a.set_y(
            g.random.float(this.y, this.y + this.height) - a.get_height() / 2
          );
          null != a.animation._curAnim && a.animation._curAnim.restart();
          a.onEmit();
          return a;
        },
        __class__: tn,
      });
      var sn = (w["flixel.effects.particles.FlxEmitterMode"] = {
        __ename__: "flixel.effects.particles.FlxEmitterMode",
        __constructs__: null,
        SQUARE: {
          _hx_name: "SQUARE",
          _hx_index: 0,
          __enum__: "flixel.effects.particles.FlxEmitterMode",
          toString: p,
        },
        CIRCLE: {
          _hx_name: "CIRCLE",
          _hx_index: 1,
          __enum__: "flixel.effects.particles.FlxEmitterMode",
          toString: p,
        },
      });
      sn.__constructs__ = [sn.SQUARE, sn.CIRCLE];
      var oj = function () {};
      h["flixel.effects.particles.IFlxParticle"] = oj;
      oj.__name__ = "flixel.effects.particles.IFlxParticle";
      oj.__isInterface__ = !0;
      oj.__interfaces__ = [Qh];
      oj.prototype = { __class__: oj };
      var nj = function () {
        this._delta = 0;
        this.autoUpdateHitbox = !1;
        this.lifespan = this.age = this.percent = 0;
        F.call(this);
        var a = 0,
          b = 0;
        null == b && (b = 0);
        null == a && (a = 0);
        var c = ba.pool.get().set(a, b);
        c._inPool = !1;
        b = a = 0;
        null == b && (b = 0);
        null == a && (a = 0);
        b = ba.pool.get().set(a, b);
        b._inPool = !1;
        this.velocityRange = new yf(c, b);
        this.angularVelocityRange = new yf(0);
        b = a = 1;
        null == b && (b = 0);
        null == a && (a = 0);
        null == b && (b = 0);
        null == a && (a = 0);
        c = ba.pool.get().set(a, b);
        c._inPool = !1;
        b = a = 1;
        null == b && (b = 0);
        null == a && (a = 0);
        null == b && (b = 0);
        null == a && (a = 0);
        b = ba.pool.get().set(a, b);
        b._inPool = !1;
        this.scaleRange = new yf(c, b);
        this.alphaRange = new yf(1, 1);
        this.colorRange = new yf(-1);
        b = a = 0;
        null == b && (b = 0);
        null == a && (a = 0);
        c = ba.pool.get().set(a, b);
        c._inPool = !1;
        b = a = 0;
        null == b && (b = 0);
        null == a && (a = 0);
        b = ba.pool.get().set(a, b);
        b._inPool = !1;
        this.dragRange = new yf(c, b);
        b = a = 0;
        null == b && (b = 0);
        null == a && (a = 0);
        c = ba.pool.get().set(a, b);
        c._inPool = !1;
        b = a = 0;
        null == b && (b = 0);
        null == a && (a = 0);
        b = ba.pool.get().set(a, b);
        b._inPool = !1;
        this.accelerationRange = new yf(c, b);
        this.elasticityRange = new yf(0);
        this.set_exists(!1);
      };
      h["flixel.effects.particles.FlxParticle"] = nj;
      nj.__name__ = "flixel.effects.particles.FlxParticle";
      nj.__interfaces__ = [oj];
      nj.__super__ = F;
      nj.prototype = q(F.prototype, {
        destroy: function () {
          null != this.velocityRange &&
            ((this.velocityRange.start = V.put(this.velocityRange.start)),
            (this.velocityRange.end = V.put(this.velocityRange.end)),
            (this.velocityRange = null));
          null != this.scaleRange &&
            ((this.scaleRange.start = V.put(this.scaleRange.start)),
            (this.scaleRange.end = V.put(this.scaleRange.end)),
            (this.scaleRange = null));
          null != this.dragRange &&
            ((this.dragRange.start = V.put(this.dragRange.start)),
            (this.dragRange.end = V.put(this.dragRange.end)),
            (this.dragRange = null));
          null != this.accelerationRange &&
            ((this.accelerationRange.start = V.put(
              this.accelerationRange.start
            )),
            (this.accelerationRange.end = V.put(this.accelerationRange.end)),
            (this.angularVelocityRange = null));
          this.elasticityRange =
            this.accelerationRange =
            this.colorRange =
            this.alphaRange =
              null;
          F.prototype.destroy.call(this);
        },
        update: function (a) {
          this.age < this.lifespan && (this.age += a);
          if (this.age >= this.lifespan && 0 != this.lifespan) this.kill();
          else {
            this._delta = a / this.lifespan;
            this.percent = this.age / this.lifespan;
            this.velocityRange.active &&
              (this.velocity.set_x(
                this.velocity.x +
                  (this.velocityRange.end.x - this.velocityRange.start.x) *
                    this._delta
              ),
              this.velocity.set_y(
                this.velocity.y +
                  (this.velocityRange.end.y - this.velocityRange.start.y) *
                    this._delta
              ));
            this.angularVelocityRange.active &&
              (this.angularVelocity +=
                (this.angularVelocityRange.end -
                  this.angularVelocityRange.start) *
                this._delta);
            this.scaleRange.active &&
              (this.scale.set_x(
                this.scale.x +
                  (this.scaleRange.end.x - this.scaleRange.start.x) *
                    this._delta
              ),
              this.scale.set_y(
                this.scale.y +
                  (this.scaleRange.end.y - this.scaleRange.start.y) *
                    this._delta
              ),
              this.autoUpdateHitbox && this.updateHitbox());
            this.alphaRange.active &&
              this.set_alpha(
                this.alpha +
                  (this.alphaRange.end - this.alphaRange.start) * this._delta
              );
            if (this.colorRange.active) {
              var b = this.colorRange.start,
                c = this.colorRange.end,
                d = this.percent;
              null == d && (d = 0.5);
              var e =
                  ((((c >> 16) & 255) - ((b >> 16) & 255)) * d +
                    ((b >> 16) & 255)) |
                  0,
                f =
                  ((((c >> 8) & 255) - ((b >> 8) & 255)) * d +
                    ((b >> 8) & 255)) |
                  0,
                k = (((c & 255) - (b & 255)) * d + (b & 255)) | 0;
              c =
                ((((c >> 24) & 255) - ((b >> 24) & 255)) * d +
                  ((b >> 24) & 255)) |
                0;
              null == c && (c = 255);
              b = ob._new();
              null == c && (c = 255);
              b =
                (((b & -16711681) | ((255 < e ? 255 : 0 > e ? 0 : e) << 16)) &
                  -65281) |
                ((255 < f ? 255 : 0 > f ? 0 : f) << 8);
              b &= -256;
              b |= 255 < k ? 255 : 0 > k ? 0 : k;
              b &= 16777215;
              b |= (255 < c ? 255 : 0 > c ? 0 : c) << 24;
              this.set_color(b);
            }
            this.dragRange.active &&
              (this.drag.set_x(
                this.drag.x +
                  (this.dragRange.end.x - this.dragRange.start.x) * this._delta
              ),
              this.drag.set_y(
                this.drag.y +
                  (this.dragRange.end.y - this.dragRange.start.y) * this._delta
              ));
            this.accelerationRange.active &&
              (this.acceleration.set_x(
                this.acceleration.x +
                  (this.accelerationRange.end.x -
                    this.accelerationRange.start.x) *
                    this._delta
              ),
              this.acceleration.set_y(
                this.acceleration.y +
                  (this.accelerationRange.end.y -
                    this.accelerationRange.start.y) *
                    this._delta
              ));
            this.elasticityRange.active &&
              (this.elasticity +=
                (this.elasticityRange.end - this.elasticityRange.start) *
                this._delta);
          }
          F.prototype.update.call(this, a);
        },
        reset: function (a, b) {
          F.prototype.reset.call(this, a, b);
          this.age = 0;
          this.set_visible(!0);
        },
        onEmit: function () {},
        __class__: nj,
      });
      var Xb = function (a, b, c) {
        this.unique = !1;
        this.useCount = 0;
        this.isDumped = !1;
        this.destroyOnNoUse = !0;
        this.persist = !1;
        this.width = this.height = 0;
        this.key = a;
        this.persist = null != c ? c : Xb.defaultPersist;
        this.frameCollections = new Oh();
        this.frameCollectionTypes = [];
        this.set_bitmap(b);
        this.shader = new ze();
      };
      h["flixel.graphics.FlxGraphic"] = Xb;
      Xb.__name__ = "flixel.graphics.FlxGraphic";
      Xb.__interfaces__ = [U];
      Xb.fromAssetKey = function (a, b, c, d) {
        null == d && (d = !0);
        null == b && (b = !1);
        if (!d) {
          if (aa.exists(a)) var e = aa.getBitmapData(a, !1);
          else
            g.log.advanced(
              "Could not find a BitmapData asset with ID '" + a + "'.",
              Ja.ERROR,
              !0
            ),
              (e = null);
          return null == e ? null : Xb.createGraphic(e, c, b, d);
        }
        c = g.bitmap.generateKey(a, c, b);
        e = g.bitmap._cache.h[c];
        if (null != e) return e;
        aa.exists(a)
          ? (e = aa.getBitmapData(a, !1))
          : (g.log.advanced(
              "Could not find a BitmapData asset with ID '" + a + "'.",
              Ja.ERROR,
              !0
            ),
            (e = null));
        if (null == e) return null;
        e = Xb.createGraphic(e, c, b);
        e.assetsKey = a;
        return e;
      };
      Xb.fromClass = function (a, b, c, d) {
        null == d && (d = !0);
        null == b && (b = !1);
        if (!d) {
          var e = zb.createInstance(a, []);
          return Xb.createGraphic(e, c, b, d);
        }
        d = a.__name__;
        d = g.bitmap.generateKey(d, c, b);
        c = g.bitmap._cache.h[d];
        if (null != c) return c;
        e = zb.createInstance(a, []);
        c = Xb.createGraphic(e, d, b);
        c.assetsClass = a;
        return c;
      };
      Xb.fromBitmapData = function (a, b, c, d) {
        null == d && (d = !0);
        null == b && (b = !1);
        if (!d) return Xb.createGraphic(a, c, b, d);
        d = g.bitmap.findKeyForBitmap(a);
        var e = null,
          f = null;
        if (null != d) {
          var k = g.bitmap._cache.h[d];
          e = k.assetsKey;
          f = k.assetsClass;
        }
        d = g.bitmap.generateKey(d, c, b);
        k = g.bitmap._cache.h[d];
        if (null != k) return k;
        k = Xb.createGraphic(a, d, b);
        k.assetsKey = e;
        k.assetsClass = f;
        return k;
      };
      Xb.fromGraphic = function (a, b, c) {
        null == b && (b = !1);
        if (!b) return a;
        c = g.bitmap.generateKey(a.key, c, b);
        c = Xb.createGraphic(a.bitmap, c, b);
        c.unique = b;
        c.assetsClass = a.assetsClass;
        c.assetsKey = a.assetsKey;
        return (g.bitmap._cache.h[c.key] = c);
      };
      Xb.fromRectangle = function (a, b, c, d, e) {
        null == d && (d = !1);
        d = g.bitmap.generateKey(a + "x" + b + ":" + c, e, d);
        e = g.bitmap._cache.h[d];
        if (null != e) return e;
        a = new S(a, b, !0, c);
        return Xb.createGraphic(a, d);
      };
      Xb.createGraphic = function (a, b, c, d) {
        null == d && (d = !0);
        null == c && (c = !1);
        var e = c;
        null == e && (e = !1);
        e && (a = a.clone());
        d
          ? ((a = new Xb(b, a)), (a.unique = c), (g.bitmap._cache.h[a.key] = a))
          : (a = new Xb(null, a));
        return a;
      };
      Xb.prototype = {
        dump: function () {},
        undump: function () {
          var a = this.getBitmapFromSystem();
          null != a && this.set_bitmap(a);
          this.isDumped = !1;
        },
        onContext: function () {
          this.isDumped && (this.undump(), this.dump());
        },
        onAssetsReload: function () {
          if (null != this.assetsClass || null != this.assetsKey) {
            var a = this.isDumped;
            this.undump();
            a && this.dump();
          }
        },
        destroy: function () {
          this.set_bitmap(V.dispose(this.bitmap));
          this.imageFrame =
            this.assetsClass =
            this.assetsKey =
            this.key =
            this.shader =
              null;
          if (null != this.frameCollections) {
            for (var a, b = 0, c = this.frameCollectionTypes; b < c.length; )
              (a = c[b]),
                ++b,
                (a = this.frameCollections.get(a)),
                V.destroyArray(a);
            this.frameCollectionTypes = this.frameCollections = null;
          }
        },
        addFrameCollection: function (a) {
          if (null != a.type) {
            var b = a.type,
              c = this.frameCollections.get(b);
            null == c && ((c = []), this.frameCollections.set(b, c));
            c.push(a);
          }
        },
        getBitmapFromSystem: function () {
          var a = null;
          null != this.assetsClass
            ? (a = zb.createInstance(this.assetsClass, []))
            : null != this.assetsKey &&
              ((a = this.assetsKey),
              aa.exists(a)
                ? (a = aa.getBitmapData(a, !1))
                : (g.log.advanced(
                    "Could not find a BitmapData asset with ID '" + a + "'.",
                    Ja.ERROR,
                    !0
                  ),
                  (a = null)));
          if (null != a) {
            var b = this.unique;
            null == b && (b = !1);
            return b ? a.clone() : a;
          }
          return null;
        },
        incrementUseCount: function () {
          this.useCount++;
        },
        decrementUseCount: function () {
          this.useCount--;
          this.checkUseCount();
        },
        checkUseCount: function () {
          0 >= this.useCount &&
            this.destroyOnNoUse &&
            !this.persist &&
            g.bitmap.remove(this);
        },
        set_destroyOnNoUse: function (a) {
          this.destroyOnNoUse = a;
          this.checkUseCount();
          return a;
        },
        get_imageFrame: function () {
          if (null == this.imageFrame) {
            var a = 0,
              b = 0,
              c = this.bitmap.width,
              d = this.bitmap.height;
            null == d && (d = 0);
            null == c && (c = 0);
            null == b && (b = 0);
            null == a && (a = 0);
            var e = Ga._pool.get();
            null == d && (d = 0);
            null == c && (c = 0);
            null == b && (b = 0);
            null == a && (a = 0);
            e.x = a;
            e.y = b;
            e.width = c;
            e.height = d;
            e._inPool = !1;
            this.imageFrame = bg.fromRectangle(this, e);
          }
          return this.imageFrame;
        },
        set_bitmap: function (a) {
          null != a &&
            ((this.bitmap = a),
            (this.width = this.bitmap.width),
            (this.height = this.bitmap.height));
          return a;
        },
        __class__: Xb,
        __properties__: {
          get_imageFrame: "get_imageFrame",
          set_destroyOnNoUse: "set_destroyOnNoUse",
          set_bitmap: "set_bitmap",
        },
      };
      var jb = function (a, b) {
        this.usedGraphics = [];
        qd.call(this, a, Se.ATLAS, b);
      };
      h["flixel.graphics.frames.FlxAtlasFrames"] = jb;
      jb.__name__ = "flixel.graphics.frames.FlxAtlasFrames";
      jb.fromSparrow = function (a, b) {
        var c = g.bitmap.add(a);
        if (null == c) return null;
        a = jb.findFrame(c);
        if (null != a) return a;
        if (null == c || null == b) return null;
        a = new jb(c);
        var d = Zo.getXml(b).firstElement();
        if (d.nodeType != oa.Document && d.nodeType != oa.Element)
          throw N.thrown(
            "Invalid nodeType " +
              (null == d.nodeType ? "null" : bb.toString(d.nodeType))
          );
        b = 0;
        for (c = Ub.resolve(d, "SubTexture"); b < c.length; ) {
          var e = c[b];
          ++b;
          var f = sc.resolve(e, "name"),
            k = ic.resolve(e, "frameX"),
            r = ic.resolve(e, "rotated") && "true" == sc.resolve(e, "rotated"),
            l = ic.resolve(e, "flipX") && "true" == sc.resolve(e, "flipX"),
            h = ic.resolve(e, "flipY") && "true" == sc.resolve(e, "flipY"),
            u = parseFloat(sc.resolve(e, "x")),
            m = parseFloat(sc.resolve(e, "y"));
          d = parseFloat(sc.resolve(e, "width"));
          var p = parseFloat(sc.resolve(e, "height"));
          null == p && (p = 0);
          null == d && (d = 0);
          null == m && (m = 0);
          null == u && (u = 0);
          var n = Ga._pool.get();
          null == p && (p = 0);
          null == d && (d = 0);
          null == m && (m = 0);
          null == u && (u = 0);
          n.x = u;
          n.y = m;
          n.width = d;
          n.height = p;
          n._inPool = !1;
          p = k
            ? new ha(
                M.parseInt(sc.resolve(e, "frameX")),
                M.parseInt(sc.resolve(e, "frameY")),
                M.parseInt(sc.resolve(e, "frameWidth")),
                M.parseInt(sc.resolve(e, "frameHeight"))
              )
            : new ha(0, 0, n.width, n.height);
          e = r ? -90 : 0;
          d = -p.get_left();
          u = -p.get_top();
          null == u && (u = 0);
          null == d && (d = 0);
          null == u && (u = 0);
          null == d && (d = 0);
          u = ba.pool.get().set(d, u);
          u._inPool = !1;
          m = p.width;
          d = p.height;
          null == d && (d = 0);
          null == m && (m = 0);
          null == d && (d = 0);
          null == m && (m = 0);
          d = ba.pool.get().set(m, d);
          d._inPool = !1;
          r &&
            !k &&
            ((k = p.height),
            (r = p.width),
            null == r && (r = 0),
            null == k && (k = 0),
            d.set_x(k),
            d.set_y(r));
          a.addAtlasFrame(n, d, u, f, e, l, h);
        }
        return a;
      };
      jb.fromSpriteSheetPacker = function (a, b) {
        var c = g.bitmap.add(a);
        if (null == c) return null;
        a = jb.findFrame(c);
        if (null != a) return a;
        if (null == c || null == b) return null;
        a = new jb(c);
        aa.exists(b) && (b = aa.getText(b));
        b = K.trim(b).split("\n");
        c = 0;
        for (var d = b.length; c < d; ) {
          var e = c++,
            f = b[e].split("=");
          e = K.trim(f[0]);
          f = K.trim(f[1]).split(" ");
          var k = M.parseInt(f[0]),
            r = M.parseInt(f[1]),
            l = M.parseInt(f[2]),
            h = M.parseInt(f[3]);
          null == h && (h = 0);
          null == l && (l = 0);
          null == r && (r = 0);
          null == k && (k = 0);
          f = Ga._pool.get();
          null == h && (h = 0);
          null == l && (l = 0);
          null == r && (r = 0);
          null == k && (k = 0);
          f.x = k;
          f.y = r;
          f.width = l;
          f.height = h;
          f._inPool = !1;
          h = f.width;
          l = f.height;
          null == l && (l = 0);
          null == h && (h = 0);
          null == l && (l = 0);
          null == h && (h = 0);
          l = ba.pool.get().set(h, l);
          l._inPool = !1;
          k = h = 0;
          null == k && (k = 0);
          null == h && (h = 0);
          h = ba.pool.get().set(h, k);
          h._inPool = !1;
          a.addAtlasFrame(f, l, h, e, 0);
        }
        return a;
      };
      jb.findFrame = function (a, b) {
        if (null == b) {
          var c = 0;
          b = 0;
          null == b && (b = 0);
          null == c && (c = 0);
          null == b && (b = 0);
          null == c && (c = 0);
          b = ba.pool.get().set(c, b);
          b._inPool = !1;
          b._weak = !0;
        }
        c = Se.ATLAS;
        var d = a.frameCollections.get(c);
        null == d && ((d = []), a.frameCollections.set(c, d));
        a = d;
        for (c = 0; c < a.length; ) {
          d = a[c];
          ++c;
          var e = d.border;
          e = 1e-7 >= Math.abs(e.x - b.x) && 1e-7 >= Math.abs(e.y - b.y);
          b._weak && b.put();
          if (e) return d;
        }
        return null;
      };
      jb.__super__ = qd;
      jb.prototype = q(qd.prototype, {
        destroy: function () {
          for (; 0 < this.usedGraphics.length; )
            this.usedGraphics.shift().decrementUseCount();
          qd.prototype.destroy.call(this);
        },
        __class__: jb,
      });
      var kh = function (a, b, c, d, e, f) {
        xa.call(this, a, b, c, d, e, f);
      };
      h["flixel.math.FlxMatrix"] = kh;
      kh.__name__ = "flixel.math.FlxMatrix";
      kh.__super__ = xa;
      kh.prototype = q(xa.prototype, { __class__: kh });
      var Za = function (a, b, c, d, e) {
        null == e && (e = 0);
        null == d && (d = !1);
        null == c && (c = !1);
        null == b && (b = 0);
        this.parent = a;
        this.angle = b;
        this.flipX = c;
        this.flipY = d;
        this.duration = e;
        b = a = this.type = 0;
        null == b && (b = 0);
        null == a && (a = 0);
        a = ba.pool.get().set(a, b);
        a._inPool = !1;
        this.sourceSize = a;
        b = a = 0;
        null == b && (b = 0);
        null == a && (a = 0);
        a = ba.pool.get().set(a, b);
        a._inPool = !1;
        this.offset = a;
        this.blitMatrix = a = Array(6);
        g.renderTile && (this.tileMatrix = a = Array(6));
      };
      h["flixel.graphics.frames.FlxFrame"] = Za;
      Za.__name__ = "flixel.graphics.frames.FlxFrame";
      Za.__interfaces__ = [U];
      Za.sort = function (a, b, c) {
        Nc.sort(a, function (a, e) {
          return Za.sortByName(a, e, b, c);
        });
      };
      Za.sortByName = function (a, b, c, d) {
        a = a.name;
        b = b.name;
        a = M.parseInt(a.substring(c, a.length - d));
        c = M.parseInt(b.substring(c, b.length - d));
        null == a && (a = 0);
        null == c && (c = 0);
        return a - c;
      };
      Za.prototype = {
        cacheFrameMatrix: function () {
          var a = Za._matrix,
            b = !0;
          null == b && (b = !0);
          a.identity();
          b && a.translate(-this.frame.x, -this.frame.y);
          90 == this.angle
            ? (a.setTo(-a.b, a.a, -a.d, a.c, -a.ty, a.tx),
              a.translate(this.frame.height, 0))
            : -90 == this.angle &&
              (a.setTo(a.b, -a.a, a.d, -a.c, a.ty, -a.tx),
              a.translate(0, this.frame.width));
          a.translate(this.offset.x, this.offset.y);
          this.blitMatrix[0] = Za._matrix.a;
          this.blitMatrix[1] = Za._matrix.b;
          this.blitMatrix[2] = Za._matrix.c;
          this.blitMatrix[3] = Za._matrix.d;
          this.blitMatrix[4] = Za._matrix.tx;
          this.blitMatrix[5] = Za._matrix.ty;
          g.renderTile &&
            ((a = Za._matrix),
            (b = !1),
            null == b && (b = !0),
            a.identity(),
            b && a.translate(-this.frame.x, -this.frame.y),
            90 == this.angle
              ? (a.setTo(-a.b, a.a, -a.d, a.c, -a.ty, a.tx),
                a.translate(this.frame.height, 0))
              : -90 == this.angle &&
                (a.setTo(a.b, -a.a, a.d, -a.c, a.ty, -a.tx),
                a.translate(0, this.frame.width)),
            a.translate(this.offset.x, this.offset.y),
            (this.tileMatrix[0] = Za._matrix.a),
            (this.tileMatrix[1] = Za._matrix.b),
            (this.tileMatrix[2] = Za._matrix.c),
            (this.tileMatrix[3] = Za._matrix.d),
            (this.tileMatrix[4] = Za._matrix.tx),
            (this.tileMatrix[5] = Za._matrix.ty));
        },
        prepareTransformedBlitMatrix: function (a, b, c, d) {
          null == d && (d = !1);
          null == c && (c = !1);
          null == b && (b = 0);
          a.a = this.blitMatrix[0];
          a.b = this.blitMatrix[1];
          a.c = this.blitMatrix[2];
          a.d = this.blitMatrix[3];
          a.tx = this.blitMatrix[4];
          a.ty = this.blitMatrix[5];
          null == d && (d = !1);
          null == c && (c = !1);
          null == b && (b = 0);
          var e = this.sourceSize.x | 0,
            f = this.sourceSize.y | 0;
          if (0 != b) {
            var k = e;
            e = f;
            f = k;
            if (90 == b)
              a.setTo(-a.b, a.a, -a.d, a.c, -a.ty, a.tx),
                a.translate(this.sourceSize.y, 0);
            else if (-90 == b || -90 == b)
              a.setTo(a.b, -a.a, a.d, -a.c, a.ty, -a.tx),
                a.translate(0, this.sourceSize.x);
          }
          c && (a.scale(-1, 1), a.translate(e, 0));
          d && (a.scale(1, -1), a.translate(0, f));
          return a;
        },
        prepareMatrix: function (a, b, c, d) {
          null == d && (d = !1);
          null == c && (c = !1);
          null == b && (b = 0);
          if (g.renderBlit) return a.identity(), a;
          a.a = this.tileMatrix[0];
          a.b = this.tileMatrix[1];
          a.c = this.tileMatrix[2];
          a.d = this.tileMatrix[3];
          a.tx = this.tileMatrix[4];
          a.ty = this.tileMatrix[5];
          c = c != this.flipX;
          d = d != this.flipY;
          if (0 == b && !c && !d) return a;
          null == d && (d = !1);
          null == c && (c = !1);
          null == b && (b = 0);
          var e = this.sourceSize.x | 0,
            f = this.sourceSize.y | 0;
          if (0 != b) {
            var k = e;
            e = f;
            f = k;
            if (90 == b)
              a.setTo(-a.b, a.a, -a.d, a.c, -a.ty, a.tx),
                a.translate(this.sourceSize.y, 0);
            else if (-90 == b || -90 == b)
              a.setTo(a.b, -a.a, a.d, -a.c, a.ty, -a.tx),
                a.translate(0, this.sourceSize.x);
          }
          c && (a.scale(-1, 1), a.translate(e, 0));
          d && (a.scale(1, -1), a.translate(0, f));
          return a;
        },
        paint: function (a, b, c, d) {
          null == d && (d = !1);
          null == c && (c = !1);
          var e = 0,
            f = c;
          null == d && (d = !1);
          null == f && (f = !1);
          null == e && (e = 0);
          var k = 0 != e;
          e = (k ? this.sourceSize.y : this.sourceSize.x) | 0;
          k = (k ? this.sourceSize.x : this.sourceSize.y) | 0;
          null != a && d && (a = V.disposeIfNotEqual(a, e, k));
          null == a || f
            ? null == a && (a = new S(e, k, !0, 0))
            : (null != b
                ? Za._rect.setTo(b.x, b.y, e, k)
                : Za._rect.setTo(0, 0, e, k),
              a.fillRect(Za._rect, 0));
          if (2 == this.type) return a;
          if (0 == this.angle)
            (f = this.offset),
              (d = Za._point),
              null == d && (d = new gb()),
              (d.x = f.x),
              (d.y = f.y),
              null != b && Za._point.offset(b.x, b.y),
              (f = this.parent.bitmap),
              (k = this.frame),
              (e = Za._rect),
              null == e && (e = new ha()),
              (e.x = k.x),
              (e.y = k.y),
              (e.width = k.width),
              (e.height = k.height),
              a.copyPixels(f, e, Za._point, null, null, c);
          else {
            var g = Za._matrix;
            g.a = this.blitMatrix[0];
            g.b = this.blitMatrix[1];
            g.c = this.blitMatrix[2];
            g.d = this.blitMatrix[3];
            g.tx = this.blitMatrix[4];
            g.ty = this.blitMatrix[5];
            null != b && Za._matrix.translate(b.x, b.y);
            f = this.parent.bitmap;
            g = c = Za._matrix;
            d = Za._rect;
            var l = this.frame.x;
            k = this.frame.y;
            null == k && (k = 0);
            null == l && (l = 0);
            null == k && (k = 0);
            null == l && (l = 0);
            null == k && (k = 0);
            null == l && (l = 0);
            b = ba.pool.get().set(l, k);
            b._inPool = !1;
            b._weak = !0;
            e = b;
            k = this.frame;
            l = k.x + k.width;
            k = this.frame;
            k = k.y + k.height;
            null == k && (k = 0);
            null == l && (l = 0);
            null == k && (k = 0);
            null == l && (l = 0);
            null == k && (k = 0);
            null == l && (l = 0);
            b = ba.pool.get().set(l, k);
            b._inPool = !1;
            b._weak = !0;
            l = e.x * g.a + e.y * g.c + g.tx;
            k = e.x * g.b + e.y * g.d + g.ty;
            null == k && (k = 0);
            null == l && (l = 0);
            e.set_x(l);
            e.set_y(k);
            l = b.x * g.a + b.y * g.c + g.tx;
            k = b.x * g.b + b.y * g.d + g.ty;
            null == k && (k = 0);
            null == l && (l = 0);
            b.set_x(l);
            b.set_y(k);
            k = Ga._pool.get();
            var h = (l = g = 0),
              u = 0;
            null == u && (u = 0);
            null == h && (h = 0);
            null == l && (l = 0);
            null == g && (g = 0);
            k.x = g;
            k.y = l;
            k.width = h;
            k.height = u;
            k._inPool = !1;
            h = Math.min(e.x, b.x);
            u = Math.min(e.y, b.y);
            var m = Math.max(e.x, b.x),
              p = Math.max(e.y, b.y);
            e._weak && e.put();
            b._weak && b.put();
            g = h;
            l = u;
            h = m - h;
            u = p - u;
            null == u && (u = 0);
            null == h && (h = 0);
            null == l && (l = 0);
            null == g && (g = 0);
            k.x = g;
            k.y = l;
            k.width = h;
            k.height = u;
            b = k;
            e = d;
            null == e && (e = new ha());
            e.x = b.x;
            e.y = b.y;
            e.width = b.width;
            e.height = b.height;
            b._inPool ||
              ((b._inPool = !0), (b._weak = !1), Ga._pool.putUnsafe(b));
            a.draw(f, c, null, null, d);
          }
          return a;
        },
        paintRotatedAndFlipped: function (a, b, c, d, e, f, k) {
          null == k && (k = !1);
          null == f && (f = !1);
          null == e && (e = !1);
          null == d && (d = !1);
          null == c && (c = 0);
          if (2 == this.type && 0 == c) return this.paint(a, b, f, k);
          var g = c;
          null == k && (k = !1);
          null == f && (f = !1);
          null == g && (g = 0);
          var l = 0 != g;
          g = (l ? this.sourceSize.y : this.sourceSize.x) | 0;
          l = (l ? this.sourceSize.x : this.sourceSize.y) | 0;
          null != a && k && (a = V.disposeIfNotEqual(a, g, l));
          null == a || f
            ? null == a && (a = new S(g, l, !0, 0))
            : (null != b
                ? Za._rect.setTo(b.x, b.y, g, l)
                : Za._rect.setTo(0, 0, g, l),
              a.fillRect(Za._rect, 0));
          if (2 == this.type) return a;
          this.prepareTransformedBlitMatrix(
            Za._matrix,
            c,
            d != this.flipX,
            e != this.flipY
          );
          null != b && Za._matrix.translate(b.x, b.y);
          c = this.parent.bitmap;
          g = d = Za._matrix;
          e = Za._rect;
          l = this.frame.x;
          k = this.frame.y;
          null == k && (k = 0);
          null == l && (l = 0);
          null == k && (k = 0);
          null == l && (l = 0);
          null == k && (k = 0);
          null == l && (l = 0);
          b = ba.pool.get().set(l, k);
          b._inPool = !1;
          b._weak = !0;
          f = b;
          k = this.frame;
          l = k.x + k.width;
          k = this.frame;
          k = k.y + k.height;
          null == k && (k = 0);
          null == l && (l = 0);
          null == k && (k = 0);
          null == l && (l = 0);
          null == k && (k = 0);
          null == l && (l = 0);
          b = ba.pool.get().set(l, k);
          b._inPool = !1;
          b._weak = !0;
          l = f.x * g.a + f.y * g.c + g.tx;
          k = f.x * g.b + f.y * g.d + g.ty;
          null == k && (k = 0);
          null == l && (l = 0);
          f.set_x(l);
          f.set_y(k);
          l = b.x * g.a + b.y * g.c + g.tx;
          k = b.x * g.b + b.y * g.d + g.ty;
          null == k && (k = 0);
          null == l && (l = 0);
          b.set_x(l);
          b.set_y(k);
          k = Ga._pool.get();
          var h = (l = g = 0),
            u = 0;
          null == u && (u = 0);
          null == h && (h = 0);
          null == l && (l = 0);
          null == g && (g = 0);
          k.x = g;
          k.y = l;
          k.width = h;
          k.height = u;
          k._inPool = !1;
          h = Math.min(f.x, b.x);
          u = Math.min(f.y, b.y);
          var m = Math.max(f.x, b.x),
            p = Math.max(f.y, b.y);
          f._weak && f.put();
          b._weak && b.put();
          g = h;
          l = u;
          h = m - h;
          u = p - u;
          null == u && (u = 0);
          null == h && (h = 0);
          null == l && (l = 0);
          null == g && (g = 0);
          k.x = g;
          k.y = l;
          k.width = h;
          k.height = u;
          f = k;
          b = e;
          null == b && (b = new ha());
          b.x = f.x;
          b.y = f.y;
          b.width = f.width;
          b.height = f.height;
          f._inPool ||
            ((f._inPool = !0), (f._weak = !1), Ga._pool.putUnsafe(f));
          a.draw(c, d, null, null, e);
          return a;
        },
        clipTo: function (a, b) {
          null == b
            ? (b = new Za(this.parent, this.angle))
            : ((b.parent = this.parent),
              (b.angle = this.angle),
              b.set_frame(V.put(b.frame)));
          var c = b.sourceSize,
            d = this.sourceSize,
            e = d.x,
            f = d.y;
          null == f && (f = 0);
          null == e && (e = 0);
          c.set_x(e);
          c.set_y(f);
          d._weak && d.put();
          b.name = this.name;
          if (2 == this.type)
            return (
              (b.type = 2),
              (c = b.offset),
              (f = e = 0),
              null == f && (f = 0),
              null == e && (e = 0),
              c.set_x(e),
              c.set_y(f),
              b
            );
          var k = 0;
          c = 0;
          null == c && (c = 0);
          null == k && (k = 0);
          e = Ga._pool.get();
          d = k;
          var g = (f = 0);
          null == g && (g = 0);
          null == f && (f = 0);
          null == c && (c = 0);
          null == d && (d = 0);
          e.x = d;
          e.y = c;
          e.width = f;
          e.height = g;
          d = e;
          d._inPool = !1;
          e = d;
          e.width = this.frame.width;
          e.height = this.frame.height;
          c = e;
          0 != this.angle &&
            ((c.width = this.frame.height), (c.height = this.frame.width));
          a.x += -this.offset.x;
          a.y += -this.offset.y;
          d = c.intersection(a);
          V.put(c);
          if (0 == d.width || 0 == d.height)
            (b.type = 2),
              (g = f = c = k = 0),
              null == g && (g = 0),
              null == f && (f = 0),
              null == c && (c = 0),
              null == k && (k = 0),
              (d.x = k),
              (d.y = c),
              (d.width = f),
              (d.height = g),
              b.set_frame(d),
              (c = b.offset),
              (f = e = 0),
              null == f && (f = 0),
              null == e && (e = 0),
              c.set_x(e),
              c.set_y(f);
          else {
            b.type = 0;
            c = b.offset;
            e = d.x;
            f = d.y;
            null == f && (f = 0);
            null == e && (e = 0);
            c.set_x(e);
            c.set_y(f);
            k = this.offset;
            e = k.x;
            f = k.y;
            null == f && (f = 0);
            null == e && (e = 0);
            c.set_x(c.x + e);
            c.set_y(c.y + f);
            k._weak && k.put();
            e = d.x;
            f = d.y;
            null == f && (f = 0);
            null == e && (e = 0);
            null == f && (f = 0);
            null == e && (e = 0);
            null == f && (f = 0);
            null == e && (e = 0);
            k = ba.pool.get().set(e, f);
            k._inPool = !1;
            k._weak = !0;
            c = k;
            e = d.x + d.width;
            f = d.y + d.height;
            null == f && (f = 0);
            null == e && (e = 0);
            null == f && (f = 0);
            null == e && (e = 0);
            null == f && (f = 0);
            null == e && (e = 0);
            k = ba.pool.get().set(e, f);
            k._inPool = !1;
            k._weak = !0;
            Za._matrix.identity();
            -90 == this.angle
              ? ((e = Za._matrix),
                e.setTo(-e.b, e.a, -e.d, e.c, -e.ty, e.tx),
                Za._matrix.translate(this.frame.width, 0))
              : 90 == this.angle &&
                ((e = Za._matrix),
                e.setTo(e.b, -e.a, e.d, -e.c, e.ty, -e.tx),
                Za._matrix.translate(0, this.frame.height));
            0 != this.angle &&
              ((f = Za._matrix),
              (e = c.x * f.a + c.y * f.c + f.tx),
              (f = c.x * f.b + c.y * f.d + f.ty),
              null == f && (f = 0),
              null == e && (e = 0),
              c.set_x(e),
              c.set_y(f),
              (f = Za._matrix),
              (e = k.x * f.a + k.y * f.c + f.tx),
              (f = k.x * f.b + k.y * f.d + f.ty),
              null == f && (f = 0),
              null == e && (e = 0),
              k.set_x(e),
              k.set_y(f));
            f = Math.min(c.x, k.x);
            e = Math.min(c.y, k.y);
            var l = Math.max(c.x, k.x);
            g = Math.max(c.y, k.y);
            c._weak && c.put();
            k._weak && k.put();
            k = f;
            c = e;
            f = l - f;
            g -= e;
            null == g && (g = 0);
            null == f && (f = 0);
            null == c && (c = 0);
            null == k && (k = 0);
            d.x = k;
            d.y = c;
            d.width = f;
            d.height = g;
            d.x += this.frame.x;
            d.y += this.frame.y;
            b.set_frame(d);
            b.cacheFrameMatrix();
          }
          a.x += this.offset.x;
          a.y += this.offset.y;
          return b;
        },
        copyTo: function (a) {
          null == a
            ? (a = new Za(this.parent, this.angle))
            : ((a.parent = this.parent),
              (a.angle = this.angle),
              a.set_frame(V.put(a.frame)));
          var b = a.offset,
            c = this.offset,
            d = c.x,
            e = c.y;
          null == e && (e = 0);
          null == d && (d = 0);
          b.set_x(d);
          b.set_y(e);
          c._weak && c.put();
          a.flipX = this.flipX;
          a.flipY = this.flipY;
          b = a.sourceSize;
          c = this.sourceSize;
          d = c.x;
          e = c.y;
          null == e && (e = 0);
          null == d && (d = 0);
          b.set_x(d);
          b.set_y(e);
          c._weak && c.put();
          b = Ga._pool.get();
          var f = (e = d = c = 0);
          null == f && (f = 0);
          null == e && (e = 0);
          null == d && (d = 0);
          null == c && (c = 0);
          b.x = c;
          b.y = d;
          b.width = e;
          b.height = f;
          b._inPool = !1;
          c = this.frame;
          b.x = c.x;
          b.y = c.y;
          b.width = c.width;
          b.height = c.height;
          c._weak &&
            !c._inPool &&
            ((c._inPool = !0), (c._weak = !1), Ga._pool.putUnsafe(c));
          a.set_frame(b);
          a.type = this.type;
          a.name = this.name;
          a.cacheFrameMatrix();
          return a;
        },
        destroy: function () {
          this.parent = this.name = null;
          this.sourceSize = V.put(this.sourceSize);
          this.offset = V.put(this.offset);
          this.set_frame(V.put(this.frame));
          this.uv = V.put(this.uv);
          this.tileMatrix = this.blitMatrix = null;
        },
        set_frame: function (a) {
          if (null != a) {
            if (null == this.uv) {
              var b = Ga._pool.get(),
                c = 0,
                d = 0,
                e = 0,
                f = 0;
              null == f && (f = 0);
              null == e && (e = 0);
              null == d && (d = 0);
              null == c && (c = 0);
              b.x = c;
              b.y = d;
              b.width = e;
              b.height = f;
              b._inPool = !1;
              this.uv = b;
            }
            b = this.uv;
            c = a.x / this.parent.width;
            d = a.y / this.parent.height;
            e = (a.x + a.width) / this.parent.width;
            f = (a.y + a.height) / this.parent.height;
            null == f && (f = 0);
            null == e && (e = 0);
            null == d && (d = 0);
            null == c && (c = 0);
            b.x = c;
            b.y = d;
            b.width = e;
            b.height = f;
          }
          return (this.frame = a);
        },
        __class__: Za,
        __properties__: { set_frame: "set_frame" },
      };
      var Se = (w["flixel.graphics.frames.FlxFrameCollectionType"] = {
        __ename__: "flixel.graphics.frames.FlxFrameCollectionType",
        __constructs__: null,
        IMAGE: {
          _hx_name: "IMAGE",
          _hx_index: 0,
          __enum__: "flixel.graphics.frames.FlxFrameCollectionType",
          toString: p,
        },
        TILES: {
          _hx_name: "TILES",
          _hx_index: 1,
          __enum__: "flixel.graphics.frames.FlxFrameCollectionType",
          toString: p,
        },
        ATLAS: {
          _hx_name: "ATLAS",
          _hx_index: 2,
          __enum__: "flixel.graphics.frames.FlxFrameCollectionType",
          toString: p,
        },
        FONT: {
          _hx_name: "FONT",
          _hx_index: 3,
          __enum__: "flixel.graphics.frames.FlxFrameCollectionType",
          toString: p,
        },
        USER:
          ((x = function (a) {
            return {
              _hx_index: 4,
              type: a,
              __enum__: "flixel.graphics.frames.FlxFrameCollectionType",
              toString: p,
            };
          }),
          (x._hx_name = "USER"),
          (x.__params__ = ["type"]),
          x),
        FILTER: {
          _hx_name: "FILTER",
          _hx_index: 5,
          __enum__: "flixel.graphics.frames.FlxFrameCollectionType",
          toString: p,
        },
      });
      Se.__constructs__ = [
        Se.IMAGE,
        Se.TILES,
        Se.ATLAS,
        Se.FONT,
        Se.USER,
        Se.FILTER,
      ];
      var bg = function (a, b) {
        qd.call(this, a, Se.IMAGE, b);
      };
      h["flixel.graphics.frames.FlxImageFrame"] = bg;
      bg.__name__ = "flixel.graphics.frames.FlxImageFrame";
      bg.fromGraphic = function (a, b) {
        if (null == a) return null;
        var c = b;
        if (null == c) {
          var d = 0,
            e = 0,
            f = a.width,
            k = a.height;
          null == k && (k = 0);
          null == f && (f = 0);
          null == e && (e = 0);
          null == d && (d = 0);
          null == k && (k = 0);
          null == f && (f = 0);
          null == e && (e = 0);
          null == d && (d = 0);
          var g = Ga._pool.get();
          null == k && (k = 0);
          null == f && (f = 0);
          null == e && (e = 0);
          null == d && (d = 0);
          g.x = d;
          g.y = e;
          g.width = f;
          g.height = k;
          g._inPool = !1;
          c = g;
          c._weak = !0;
        }
        c = bg.findFrame(a, c);
        if (null != c) return c;
        c = new bg(a);
        null == b
          ? ((e = d = 0),
            (f = a.width),
            (k = a.height),
            null == k && (k = 0),
            null == f && (f = 0),
            null == e && (e = 0),
            null == d && (d = 0),
            (g = Ga._pool.get()),
            null == k && (k = 0),
            null == f && (f = 0),
            null == e && (e = 0),
            null == d && (d = 0),
            (g.x = d),
            (g.y = e),
            (g.width = f),
            (g.height = k),
            (g._inPool = !1),
            (b = g))
          : (0 == b.width && (b.width = a.width - b.x),
            0 == b.height && (b.height = a.height - b.y));
        c.addSpriteSheetFrame(b);
        return c;
      };
      bg.fromRectangle = function (a, b) {
        a = g.bitmap.add(a, !1);
        return bg.fromGraphic(a, b);
      };
      bg.findFrame = function (a, b, c) {
        if (null == c) {
          var d = 0;
          c = 0;
          null == c && (c = 0);
          null == d && (d = 0);
          null == c && (c = 0);
          null == d && (d = 0);
          var e = ba.pool.get().set(d, c);
          e._inPool = !1;
          c = e;
          c._weak = !0;
        }
        d = Se.IMAGE;
        var f = a.frameCollections.get(d);
        null == f && ((f = []), a.frameCollections.set(d, f));
        a = f;
        for (d = 0; d < a.length; ) {
          f = a[d];
          ++d;
          e = f.get_frame().frame;
          var k =
            1e-7 >= Math.abs(b.x - e.x) &&
            1e-7 >= Math.abs(b.y - e.y) &&
            1e-7 >= Math.abs(b.width - e.width) &&
            1e-7 >= Math.abs(b.height - e.height);
          e._weak &&
            !e._inPool &&
            ((e._inPool = !0), (e._weak = !1), Ga._pool.putUnsafe(e));
          k
            ? ((e = f.border),
              (k = 1e-7 >= Math.abs(c.x - e.x) && 1e-7 >= Math.abs(c.y - e.y)),
              e._weak && e.put(),
              (e = k))
            : (e = !1);
          if (e && 2 != f.get_frame().type) return f;
        }
        return null;
      };
      bg.__super__ = qd;
      bg.prototype = q(qd.prototype, {
        destroy: function () {
          qd.prototype.destroy.call(this);
          V.destroy(this.get_frame());
        },
        get_frame: function () {
          return this.frames[0];
        },
        __class__: bg,
        __properties__: { get_frame: "get_frame" },
      });
      var Gg = function (a, b) {
        this.numRows = this.numCols = 0;
        qd.call(this, a, Se.TILES, b);
      };
      h["flixel.graphics.frames.FlxTileFrames"] = Gg;
      Gg.__name__ = "flixel.graphics.frames.FlxTileFrames";
      Gg.fromGraphic = function (a, b, c, d) {
        var e = Gg.findFrame(a, b, c, null, d);
        if (null != e) return e;
        if (null == c) {
          var f = 0,
            k = 0,
            g = a.width,
            l = a.height;
          null == l && (l = 0);
          null == g && (g = 0);
          null == k && (k = 0);
          null == f && (f = 0);
          var h = Ga._pool.get();
          null == l && (l = 0);
          null == g && (g = 0);
          null == k && (k = 0);
          null == f && (f = 0);
          h.x = f;
          h.y = k;
          h.width = g;
          h.height = l;
          h._inPool = !1;
          c = h;
        } else
          0 == c.width && (c.width = a.width - c.x),
            0 == c.height && (c.height = a.height - c.y);
        if (null == d) {
          var u = 0;
          e = 0;
          null == e && (e = 0);
          null == u && (u = 0);
          null == e && (e = 0);
          null == u && (u = 0);
          e = ba.pool.get().set(u, e);
          e._inPool = !1;
          d = e;
        }
        e = new Gg(a);
        e.region = c;
        e.atlasFrame = null;
        e.tileSize = b;
        e.tileSpacing = d;
        c.x = Math.floor(c.x);
        c.y = Math.floor(c.y);
        c.width = Math.floor(c.width);
        c.height = Math.floor(c.height);
        d.set_x(Math.floor(d.x));
        d.set_y(Math.floor(d.y));
        b.set_x(Math.floor(b.x));
        b.set_y(Math.floor(b.y));
        a = b.x + d.x;
        u = b.y + d.y;
        var m = 0 == b.y ? 1 : ((c.height + d.y) / u) | 0;
        d = 0 == b.x ? 1 : ((c.width + d.x) / a) | 0;
        for (var p = 0; p < m; )
          for (var n = p++, q = 0, z = d; q < z; )
            (h = q++),
              (f = c.x + h * a),
              (k = c.y + n * u),
              (g = b.x),
              (l = b.y),
              null == l && (l = 0),
              null == g && (g = 0),
              null == k && (k = 0),
              null == f && (f = 0),
              (h = Ga._pool.get()),
              null == l && (l = 0),
              null == g && (g = 0),
              null == k && (k = 0),
              null == f && (f = 0),
              (h.x = f),
              (h.y = k),
              (h.width = g),
              (h.height = l),
              (h._inPool = !1),
              e.addSpriteSheetFrame(h);
        e.numCols = d;
        e.numRows = m;
        return e;
      };
      Gg.findFrame = function (a, b, c, d, e, f) {
        d = Se.TILES;
        var k = a.frameCollections.get(d);
        null == k && ((k = []), a.frameCollections.set(d, k));
        a = k;
        for (d = 0; d < a.length; )
          if (((k = a[d]), ++d, k.equals(b, c, null, e, f))) return k;
        return null;
      };
      Gg.__super__ = qd;
      Gg.prototype = q(qd.prototype, {
        equals: function (a, b, c, d, e) {
          if (null == this.region && null == this.atlasFrame) return !1;
          null != c && (b = c.frame);
          if (null == b) {
            var f = (b = 0),
              k = this.parent.width,
              g = this.parent.height;
            null == g && (g = 0);
            null == k && (k = 0);
            null == f && (f = 0);
            null == b && (b = 0);
            null == g && (g = 0);
            null == k && (k = 0);
            null == f && (f = 0);
            null == b && (b = 0);
            var l = Ga._pool.get();
            null == g && (g = 0);
            null == k && (k = 0);
            null == f && (f = 0);
            null == b && (b = 0);
            l.x = b;
            l.y = f;
            l.width = k;
            l.height = g;
            l._inPool = !1;
            l._weak = !0;
            b = l;
          }
          null == d &&
            ((l = f = 0),
            null == l && (l = 0),
            null == f && (f = 0),
            null == l && (l = 0),
            null == f && (f = 0),
            (l = ba.pool.get().set(f, l)),
            (l._inPool = !1),
            (l._weak = !0),
            (d = l));
          null == e &&
            ((l = f = 0),
            null == l && (l = 0),
            null == f && (f = 0),
            null == l && (l = 0),
            null == f && (f = 0),
            (l = ba.pool.get().set(f, l)),
            (l._inPool = !1),
            (l._weak = !0),
            (e = l));
          this.atlasFrame == c
            ? ((l = this.region),
              (c =
                1e-7 >= Math.abs(l.x - b.x) &&
                1e-7 >= Math.abs(l.y - b.y) &&
                1e-7 >= Math.abs(l.width - b.width) &&
                1e-7 >= Math.abs(l.height - b.height)),
              b._weak &&
                !b._inPool &&
                ((b._inPool = !0), (b._weak = !1), Ga._pool.putUnsafe(b)))
            : (c = !1);
          c
            ? ((l = this.tileSize),
              (c = 1e-7 >= Math.abs(l.x - a.x) && 1e-7 >= Math.abs(l.y - a.y)),
              a._weak && a.put(),
              (a = c))
            : (a = !1);
          a
            ? ((l = this.tileSpacing),
              (c = 1e-7 >= Math.abs(l.x - d.x) && 1e-7 >= Math.abs(l.y - d.y)),
              d._weak && d.put(),
              (d = c))
            : (d = !1);
          return d
            ? ((l = this.border),
              (c = 1e-7 >= Math.abs(l.x - e.x) && 1e-7 >= Math.abs(l.y - e.y)),
              e._weak && e.put(),
              c)
            : !1;
        },
        destroy: function () {
          qd.prototype.destroy.call(this);
          this.atlasFrame = null;
          this.region = V.put(this.region);
          this.tileSize = V.put(this.tileSize);
          this.tileSpacing = V.put(this.tileSpacing);
        },
        __class__: Gg,
      });
      var Kd = function () {
        this.blending = 0;
        this.antialiasing = this.colored = this.hasColorOffsets = !1;
      };
      h["flixel.graphics.tile.FlxDrawBaseItem"] = Kd;
      Kd.__name__ = "flixel.graphics.tile.FlxDrawBaseItem";
      Kd.blendToInt = function (a) {
        return 0;
      };
      Kd.prototype = {
        reset: function () {
          this.graphics = null;
          this.antialiasing = !1;
          this.next = this.nextTyped = null;
        },
        render: function (a) {
          Kd.drawCalls++;
        },
        __class__: Kd,
      };
      var Ak = (w["flixel.graphics.tile.FlxDrawItemType"] = {
        __ename__: "flixel.graphics.tile.FlxDrawItemType",
        __constructs__: null,
        TILES: {
          _hx_name: "TILES",
          _hx_index: 0,
          __enum__: "flixel.graphics.tile.FlxDrawItemType",
          toString: p,
        },
        TRIANGLES: {
          _hx_name: "TRIANGLES",
          _hx_index: 1,
          __enum__: "flixel.graphics.tile.FlxDrawItemType",
          toString: p,
        },
      });
      Ak.__constructs__ = [Ak.TILES, Ak.TRIANGLES];
      var Bk = function () {
        Kd.call(this);
        this.type = Ak.TILES;
        this.rects = ja.toFloatVector(null);
        this.transforms = ja.toFloatVector(null);
        this.alphas = [];
      };
      h["flixel.graphics.tile.FlxDrawQuadsItem"] = Bk;
      Bk.__name__ = "flixel.graphics.tile.FlxDrawQuadsItem";
      Bk.__super__ = Kd;
      Bk.prototype = q(Kd.prototype, {
        reset: function () {
          Kd.prototype.reset.call(this);
          this.rects.set_length(0);
          this.transforms.set_length(0);
          this.alphas.splice(0, this.alphas.length);
          null != this.colorMultipliers &&
            this.colorMultipliers.splice(0, this.colorMultipliers.length);
          null != this.colorOffsets &&
            this.colorOffsets.splice(0, this.colorOffsets.length);
        },
        addQuad: function (a, b, c) {
          a = a.frame;
          this.rects.push(a.x);
          this.rects.push(a.y);
          this.rects.push(a.width);
          this.rects.push(a.height);
          this.transforms.push(b.a);
          this.transforms.push(b.b);
          this.transforms.push(b.c);
          this.transforms.push(b.d);
          this.transforms.push(b.tx);
          this.transforms.push(b.ty);
          this.alphas.push(null != c ? c.alphaMultiplier : 1);
          this.alphas.push(null != c ? c.alphaMultiplier : 1);
          this.alphas.push(null != c ? c.alphaMultiplier : 1);
          this.alphas.push(null != c ? c.alphaMultiplier : 1);
          if (this.colored || this.hasColorOffsets)
            for (
              null == this.colorMultipliers && (this.colorMultipliers = []),
                null == this.colorOffsets && (this.colorOffsets = []),
                b = 0;
              4 > b;

            )
              b++,
                null != c
                  ? (this.colorMultipliers.push(c.redMultiplier),
                    this.colorMultipliers.push(c.greenMultiplier),
                    this.colorMultipliers.push(c.blueMultiplier),
                    this.colorOffsets.push(c.redOffset),
                    this.colorOffsets.push(c.greenOffset),
                    this.colorOffsets.push(c.blueOffset),
                    this.colorOffsets.push(c.alphaOffset))
                  : (this.colorMultipliers.push(1),
                    this.colorMultipliers.push(1),
                    this.colorMultipliers.push(1),
                    this.colorOffsets.push(0),
                    this.colorOffsets.push(0),
                    this.colorOffsets.push(0),
                    this.colorOffsets.push(0)),
                this.colorMultipliers.push(1);
        },
        render: function (a) {
          if (0 != this.rects.get_length()) {
            var b = null != this.shader ? this.shader : this.graphics.shader;
            b.bitmap.input = this.graphics.bitmap;
            b.bitmap.filter = a.antialiasing || this.antialiasing ? 4 : 5;
            b.alpha.value = this.alphas;
            if (this.colored || this.hasColorOffsets)
              (b.colorMultiplier.value = this.colorMultipliers),
                (b.colorOffset.value = this.colorOffsets);
            var c = b.hasTransform;
            null == c.value && (c.value = []);
            c.value[0] = !0;
            c = b.hasColorTransform;
            null == c.value && (c.value = []);
            c.value[0] = this.colored || this.hasColorOffsets;
            a.canvas.get_graphics().overrideBlendMode(this.blend);
            a.canvas.get_graphics().beginShaderFill(b);
            a.canvas
              .get_graphics()
              .drawQuads(this.rects, null, this.transforms);
            Kd.prototype.render.call(this, a);
          }
        },
        __class__: Bk,
      });
      var un = function () {
        this.verticesPosition = this.indicesPosition = this.colorsPosition = 0;
        this.colors = ja.toIntVector(null);
        this.uvtData = ja.toFloatVector(null);
        this.indices = ja.toIntVector(null);
        this.vertices = ja.toFloatVector(null);
        Kd.call(this);
        this.type = Ak.TRIANGLES;
        this.alphas = [];
      };
      h["flixel.graphics.tile.FlxDrawTrianglesItem"] = un;
      un.__name__ = "flixel.graphics.tile.FlxDrawTrianglesItem";
      un.__super__ = Kd;
      un.prototype = q(Kd.prototype, {
        render: function (a) {
          if (g.renderTile && !(0 >= this.get_numTriangles())) {
            var b = null != this.shader ? this.shader : this.graphics.shader;
            b.bitmap.input = this.graphics.bitmap;
            b.bitmap.filter = a.antialiasing || this.antialiasing ? 4 : 5;
            b.bitmap.wrap = 2;
            b.alpha.value = this.alphas;
            if (this.colored || this.hasColorOffsets)
              (b.colorMultiplier.value = this.colorMultipliers),
                (b.colorOffset.value = this.colorOffsets);
            var c = b.hasTransform;
            null == c.value && (c.value = []);
            c.value[0] = !0;
            c = b.hasColorTransform;
            null == c.value && (c.value = []);
            c.value[0] = this.colored || this.hasColorOffsets;
            a.canvas.get_graphics().overrideBlendMode(this.blend);
            a.canvas.get_graphics().beginShaderFill(b);
            a.canvas
              .get_graphics()
              .drawTriangles(this.vertices, this.indices, this.uvtData, 1);
            a.canvas.get_graphics().endFill();
            Kd.prototype.render.call(this, a);
          }
        },
        reset: function () {
          Kd.prototype.reset.call(this);
          for (
            var a = this.vertices,
              b = this.vertices.get_length(),
              c = [],
              d = (a.__tempIndex = 0);
            d < c.length;

          ) {
            var e = c[d++];
            a.insertAt(a.__tempIndex, e);
            a.__tempIndex++;
          }
          a.splice(a.__tempIndex, b);
          a = this.indices;
          b = this.indices.get_length();
          c = [];
          for (d = a.__tempIndex = 0; d < c.length; )
            (e = c[d++]), a.insertAt(a.__tempIndex, e), a.__tempIndex++;
          a.splice(a.__tempIndex, b);
          a = this.uvtData;
          b = this.uvtData.get_length();
          c = [];
          for (d = a.__tempIndex = 0; d < c.length; )
            (e = c[d++]), a.insertAt(a.__tempIndex, e), a.__tempIndex++;
          a.splice(a.__tempIndex, b);
          a = this.colors;
          b = this.colors.get_length();
          c = [];
          for (d = a.__tempIndex = 0; d < c.length; )
            (e = c[d++]), a.insertAt(a.__tempIndex, e), a.__tempIndex++;
          a.splice(a.__tempIndex, b);
          this.colorsPosition =
            this.indicesPosition =
            this.verticesPosition =
              0;
          this.alphas.splice(0, this.alphas.length);
          null != this.colorMultipliers &&
            this.colorMultipliers.splice(0, this.colorMultipliers.length);
          null != this.colorOffsets &&
            this.colorOffsets.splice(0, this.colorOffsets.length);
        },
        get_numTriangles: function () {
          return (this.indices.get_length() / 3) | 0;
        },
        __class__: un,
      });
      var Mg = function (a, b) {
        this._groupMembers = a;
        this._filter = b;
        this._cursor = 0;
        this._length = this._groupMembers.length;
      };
      h["flixel.group.FlxTypedGroupIterator"] = Mg;
      Mg.__name__ = "flixel.group.FlxTypedGroupIterator";
      Mg.prototype = {
        next: function () {
          return this.hasNext() ? this._groupMembers[this._cursor++] : null;
        },
        hasNext: function () {
          for (
            ;
            this._cursor < this._length &&
            (null == this._groupMembers[this._cursor] ||
              (null != this._filter &&
                !this._filter(this._groupMembers[this._cursor])));

          )
            this._cursor++;
          return this._cursor < this._length;
        },
        __class__: Mg,
      };
      var dn = function () {
        this.x = this.y = this.z = 0;
        ac.get_isSupported() &&
          ((this._sensor = new ac()),
          this._sensor.addEventListener("update", n(this, this.update)));
      };
      h["flixel.input.FlxAccelerometer"] = dn;
      dn.__name__ = "flixel.input.FlxAccelerometer";
      dn.prototype = {
        update: function (a) {
          this.x = a.accelerationX;
          this.y = a.accelerationY;
          this.z = a.accelerationZ;
          this.x /= 10;
          this.y /= 10;
          this.z /= 10;
        },
        __class__: dn,
      };
      var pj = function (a, b) {
        this.status = a;
        this.keyManager = b;
      };
      h["flixel.input.FlxBaseKeyList"] = pj;
      pj.__name__ = "flixel.input.FlxBaseKeyList";
      pj.prototype = {
        get_ANY: function () {
          for (var a = 0, b = this.keyManager._keyListArray; a < b.length; ) {
            var c = b[a];
            ++a;
            if (
              null != c &&
              this.keyManager.checkStatusUnsafe(c.ID, this.status)
            )
              return !0;
          }
          return !1;
        },
        get_NONE: function () {
          for (var a = 0, b = this.keyManager._keyListArray; a < b.length; ) {
            var c = b[a];
            ++a;
            if (
              null != c &&
              this.keyManager.checkStatusUnsafe(c.ID, this.status)
            )
              return !1;
          }
          return !0;
        },
        __class__: pj,
        __properties__: { get_NONE: "get_NONE", get_ANY: "get_ANY" },
      };
      var Ld = function (a) {
        this.current = this.last = 0;
        this.ID = a;
      };
      h["flixel.input.FlxInput"] = Ld;
      Ld.__name__ = "flixel.input.FlxInput";
      Ld.__interfaces__ = [vg];
      Ld.prototype = {
        press: function () {
          this.last = this.current;
          this.current = 1 == this.current || 2 == this.current ? 1 : 2;
        },
        release: function () {
          this.last = this.current;
          this.current = 1 == this.current || 2 == this.current ? -1 : 0;
        },
        update: function () {
          -1 == this.last && -1 == this.current
            ? (this.current = 0)
            : 2 == this.last && 2 == this.current && (this.current = 1);
          this.last = this.current;
        },
        reset: function () {
          this.last = this.current = 0;
        },
        hasState: function (a) {
          switch (a) {
            case -1:
              return -1 == this.current;
            case 0:
              return 0 != this.current ? -1 == this.current : !0;
            case 1:
              return 1 != this.current ? 2 == this.current : !0;
            case 2:
              return 2 == this.current;
          }
        },
        get_justReleased: function () {
          return -1 == this.current;
        },
        get_pressed: function () {
          return 1 != this.current ? 2 == this.current : !0;
        },
        get_justPressed: function () {
          return 2 == this.current;
        },
        __class__: Ld,
        __properties__: {
          get_justPressed: "get_justPressed",
          get_pressed: "get_pressed",
          get_justReleased: "get_justReleased",
        },
      };
      var Yg = function (a) {
        this._keyListMap = new kc();
        this._keyListArray = [];
        this.preventDefaultKeys = [];
        this.enabled = !0;
        sa.get_current().stage.addEventListener(
          "keyDown",
          n(this, this.onKeyDown)
        );
        sa.get_current().stage.addEventListener("keyUp", n(this, this.onKeyUp));
        this.pressed = a(1, this);
        this.released = a(0, this);
        this.justPressed = a(2, this);
        this.justReleased = a(-1, this);
      };
      h["flixel.input.FlxKeyManager"] = Yg;
      Yg.__name__ = "flixel.input.FlxKeyManager";
      Yg.__interfaces__ = [Wg];
      Yg.prototype = {
        firstJustPressed: function () {
          for (var a = 0, b = this._keyListArray; a < b.length; ) {
            var c = b[a];
            ++a;
            if (null != c && 2 == c.current) return c.ID;
          }
          return -1;
        },
        checkStatus: function (a, b) {
          if (-2 == a)
            switch (b) {
              case -1:
                return this.justReleased.get_ANY();
              case 0:
                return this.released.get_ANY();
              case 1:
                return this.pressed.get_ANY();
              case 2:
                return this.justPressed.get_ANY();
            }
          if (-1 == a)
            switch (b) {
              case -1:
                return this.justReleased.get_NONE();
              case 0:
                return this.released.get_NONE();
              case 1:
                return this.pressed.get_NONE();
              case 2:
                return this.justPressed.get_NONE();
            }
          return this._keyListMap.h.hasOwnProperty(a)
            ? this.checkStatusUnsafe(a, b)
            : !1;
        },
        checkStatusUnsafe: function (a, b) {
          return this._keyListMap.h[a].hasState(b);
        },
        destroy: function () {
          this._keyListMap = this._keyListArray = null;
        },
        reset: function () {
          for (var a = 0, b = this._keyListArray; a < b.length; ) {
            var c = b[a];
            ++a;
            null != c && c.release();
          }
        },
        update: function () {
          for (var a = 0, b = this._keyListArray; a < b.length; ) {
            var c = b[a];
            ++a;
            null != c && c.update();
          }
        },
        checkKeyArrayState: function (a, b) {
          if (null == a) return !1;
          for (var c = 0; c < a.length; ) {
            var d = a[c];
            ++c;
            if (this.checkStatus(d, b)) return !0;
          }
          return !1;
        },
        onKeyUp: function (a) {
          var b = this.resolveKeyCode(a);
          this.handlePreventDefaultKeys(b, a);
          this.enabled &&
            ((a = this._keyListMap.h[b]), null != a && a.release());
        },
        onKeyDown: function (a) {
          var b = this.resolveKeyCode(a);
          this.handlePreventDefaultKeys(b, a);
          this.enabled && ((a = this._keyListMap.h[b]), null != a && a.press());
        },
        handlePreventDefaultKeys: function (a, b) {
          a = this._keyListMap.h[a];
          null != a &&
            null != this.preventDefaultKeys &&
            -1 != this.preventDefaultKeys.indexOf(a.ID) &&
            (b.stopImmediatePropagation(),
            b.stopPropagation(),
            b.preventDefault());
        },
        resolveKeyCode: function (a) {
          return a.keyCode;
        },
        onFocus: function () {},
        onFocusLost: function () {
          this.reset();
        },
        __class__: Yg,
      };
      var Sk = function (a, b, c, d) {
        this.ID = a;
        this.startPosition = b;
        this.endPosition = c;
        this._startTimeInTicks = d;
        this._endTimeInTicks = g.game.ticks;
      };
      h["flixel.input.FlxSwipe"] = Sk;
      Sk.__name__ = "flixel.input.FlxSwipe";
      Sk.prototype = { __class__: Sk };
      var Ie = function (a, b) {
        this._checked = !1;
        this._timestamp = 0;
        this._x = this._y = null;
        this.triggered = !1;
        this.type = a;
        this.name = b;
        this.inputs = [];
      };
      h["flixel.input.actions.FlxAction"] = Ie;
      Ie.__name__ = "flixel.input.actions.FlxAction";
      Ie.__interfaces__ = [U];
      Ie.prototype = {
        remove: function (a, b) {
          null == b && (b = !1);
          null != a && (X.remove(this.inputs, a), b && a.destroy());
        },
        check: function () {
          this._y = this._x = null;
          if (this._timestamp == g.game.ticks)
            return (this.triggered = this._checked);
          this._timestamp = g.game.ticks;
          this._checked = !1;
          for (
            var a = null != this.inputs ? this.inputs.length : 0, b = 0;
            b < a;

          ) {
            var c = b++;
            c = a - c - 1;
            var d = this.inputs[c];
            d.destroyed
              ? this.inputs.splice(c, 1)
              : (d.update(), d.check(this) && (this._checked = !0));
          }
          return (this.triggered = this._checked);
        },
        destroy: function () {
          V.destroyArray(this.inputs);
          this.inputs = null;
        },
        addGenericInput: function (a) {
          null == this.inputs && (this.inputs = []);
          this.checkExists(a) || this.inputs.push(a);
          return this;
        },
        checkExists: function (a) {
          return null == this.inputs ? !1 : -1 != this.inputs.indexOf(a);
        },
        __class__: Ie,
      };
      var $b = function (a, b) {
        null == a && (a = "");
        Ie.call(this, Nh.DIGITAL, a);
        this.callback = b;
      };
      h["flixel.input.actions.FlxActionDigital"] = $b;
      $b.__name__ = "flixel.input.actions.FlxActionDigital";
      $b.__super__ = Ie;
      $b.prototype = q(Ie.prototype, {
        add: function (a) {
          this.addGenericInput(a);
          return this;
        },
        addGamepad: function (a, b, c) {
          null == c && (c = -2);
          return this.add(new Tk(a, b, c));
        },
        addKey: function (a, b) {
          return this.add(new Uk(a, b));
        },
        destroy: function () {
          this.callback = null;
          Ie.prototype.destroy.call(this);
        },
        check: function () {
          var a = Ie.prototype.check.call(this);
          a && null != this.callback && this.callback(this);
          return a;
        },
        __class__: $b,
      });
      var vn = function (a, b) {
        null == a && (a = "");
        Ie.call(this, Nh.ANALOG, a);
        this.callback = b;
      };
      h["flixel.input.actions.FlxActionAnalog"] = vn;
      vn.__name__ = "flixel.input.actions.FlxActionAnalog";
      vn.__super__ = Ie;
      vn.prototype = q(Ie.prototype, {
        destroy: function () {
          this.callback = null;
          Ie.prototype.destroy.call(this);
        },
        check: function () {
          var a = Ie.prototype.check.call(this);
          a && null != this.callback && this.callback(this);
          return a;
        },
        __class__: vn,
      });
      var bi = function (a, b, c, d, e) {
        null == e && (e = -2);
        this.destroyed = !1;
        this.type = a;
        this.device = b;
        this.inputID = c;
        this.trigger = d;
        this.deviceID = e;
      };
      h["flixel.input.actions.FlxActionInput"] = bi;
      bi.__name__ = "flixel.input.actions.FlxActionInput";
      bi.__interfaces__ = [U];
      bi.prototype = {
        update: function () {},
        destroy: function () {
          this.destroyed = !0;
        },
        check: function (a) {
          return !1;
        },
        __class__: bi,
      };
      var Nh = (w["flixel.input.actions.FlxInputType"] = {
        __ename__: "flixel.input.actions.FlxInputType",
        __constructs__: null,
        DIGITAL: {
          _hx_name: "DIGITAL",
          _hx_index: 0,
          __enum__: "flixel.input.actions.FlxInputType",
          toString: p,
        },
        ANALOG: {
          _hx_name: "ANALOG",
          _hx_index: 1,
          __enum__: "flixel.input.actions.FlxInputType",
          toString: p,
        },
      });
      Nh.__constructs__ = [Nh.DIGITAL, Nh.ANALOG];
      var Ae = (w["flixel.input.actions.FlxInputDevice"] = {
        __ename__: "flixel.input.actions.FlxInputDevice",
        __constructs__: null,
        UNKNOWN: {
          _hx_name: "UNKNOWN",
          _hx_index: 0,
          __enum__: "flixel.input.actions.FlxInputDevice",
          toString: p,
        },
        MOUSE: {
          _hx_name: "MOUSE",
          _hx_index: 1,
          __enum__: "flixel.input.actions.FlxInputDevice",
          toString: p,
        },
        MOUSE_WHEEL: {
          _hx_name: "MOUSE_WHEEL",
          _hx_index: 2,
          __enum__: "flixel.input.actions.FlxInputDevice",
          toString: p,
        },
        KEYBOARD: {
          _hx_name: "KEYBOARD",
          _hx_index: 3,
          __enum__: "flixel.input.actions.FlxInputDevice",
          toString: p,
        },
        GAMEPAD: {
          _hx_name: "GAMEPAD",
          _hx_index: 4,
          __enum__: "flixel.input.actions.FlxInputDevice",
          toString: p,
        },
        STEAM_CONTROLLER: {
          _hx_name: "STEAM_CONTROLLER",
          _hx_index: 5,
          __enum__: "flixel.input.actions.FlxInputDevice",
          toString: p,
        },
        IFLXINPUT_OBJECT: {
          _hx_name: "IFLXINPUT_OBJECT",
          _hx_index: 6,
          __enum__: "flixel.input.actions.FlxInputDevice",
          toString: p,
        },
        OTHER: {
          _hx_name: "OTHER",
          _hx_index: 7,
          __enum__: "flixel.input.actions.FlxInputDevice",
          toString: p,
        },
        ANDROID: {
          _hx_name: "ANDROID",
          _hx_index: 8,
          __enum__: "flixel.input.actions.FlxInputDevice",
          toString: p,
        },
        ALL: {
          _hx_name: "ALL",
          _hx_index: 9,
          __enum__: "flixel.input.actions.FlxInputDevice",
          toString: p,
        },
        NONE: {
          _hx_name: "NONE",
          _hx_index: 10,
          __enum__: "flixel.input.actions.FlxInputDevice",
          toString: p,
        },
      });
      Ae.__constructs__ = [
        Ae.UNKNOWN,
        Ae.MOUSE,
        Ae.MOUSE_WHEEL,
        Ae.KEYBOARD,
        Ae.GAMEPAD,
        Ae.STEAM_CONTROLLER,
        Ae.IFLXINPUT_OBJECT,
        Ae.OTHER,
        Ae.ANDROID,
        Ae.ALL,
        Ae.NONE,
      ];
      var cg = function (a, b, c, d) {
        null == d && (d = -2);
        bi.call(this, Nh.DIGITAL, a, b, c, d);
        this.inputID = b;
      };
      h["flixel.input.actions.FlxActionInputDigital"] = cg;
      cg.__name__ = "flixel.input.actions.FlxActionInputDigital";
      cg.__super__ = bi;
      cg.prototype = q(bi.prototype, { __class__: cg });
      var Tk = function (a, b, c) {
        null == c && (c = -2);
        cg.call(this, Ae.GAMEPAD, a, b, c);
        this.input = new Ld(a);
      };
      h["flixel.input.actions.FlxActionInputDigitalGamepad"] = Tk;
      Tk.__name__ = "flixel.input.actions.FlxActionInputDigitalGamepad";
      Tk.__super__ = cg;
      Tk.prototype = q(cg.prototype, {
        update: function () {
          cg.prototype.update.call(this);
          if (-1 == this.deviceID)
            g.gamepads.anyHasState(this.inputID, 1) ||
            g.gamepads.anyHasState(this.inputID, 2)
              ? this.input.press()
              : this.input.release();
          else {
            var a = null;
            -2 == this.deviceID
              ? (a = g.gamepads.getFirstActiveGamepad())
              : 0 <= this.deviceID &&
                (a = g.gamepads._activeGamepads[this.deviceID]);
            if (null != a)
              if (-2 == this.inputID && 0 == this.trigger)
                a.released.get_ANY()
                  ? this.input.release()
                  : this.input.press();
              else {
                var b = this.inputID,
                  c = 1;
                switch (b) {
                  case -2:
                    c = a.anyButton(c);
                    break;
                  case -1:
                    c = !a.anyButton(c);
                    break;
                  default:
                    (b = a.mapping.getRawID(b)),
                      (b = a.buttons[b]),
                      (c = null != b && b.hasState(c));
                }
                if (c) a = !0;
                else
                  switch (((b = this.inputID), (c = 2), b)) {
                    case -2:
                      a = a.anyButton(c);
                      break;
                    case -1:
                      a = !a.anyButton(c);
                      break;
                    default:
                      (b = a.mapping.getRawID(b)),
                        (b = a.buttons[b]),
                        (a = null != b && b.hasState(c));
                  }
                a ? this.input.press() : this.input.release();
              }
            else -2 == this.deviceID && this.input.release();
          }
        },
        check: function (a) {
          switch (this.trigger) {
            case -1:
              return -1 == this.input.current;
            case 0:
              return (
                (a = this.input),
                0 != a.current && -1 != a.current
                  ? -1 == this.input.current
                  : !0
              );
            case 1:
              return (
                (a = this.input),
                1 != a.current && 2 != a.current ? 2 == this.input.current : !0
              );
            case 2:
              return 2 == this.input.current;
            default:
              return !1;
          }
        },
        __class__: Tk,
      });
      var Uk = function (a, b) {
        cg.call(this, Ae.KEYBOARD, a, b);
      };
      h["flixel.input.actions.FlxActionInputDigitalKeyboard"] = Uk;
      Uk.__name__ = "flixel.input.actions.FlxActionInputDigitalKeyboard";
      Uk.__super__ = cg;
      Uk.prototype = q(cg.prototype, {
        check: function (a) {
          switch (this.trigger) {
            case -1:
              return g.keys.checkStatus(this.inputID, -1);
            case 0:
              return g.keys.checkStatus(this.inputID, 0)
                ? !0
                : g.keys.checkStatus(this.inputID, -1);
            case 1:
              return g.keys.checkStatus(this.inputID, 1)
                ? !0
                : g.keys.checkStatus(this.inputID, 2);
            case 2:
              return g.keys.checkStatus(this.inputID, 2);
            default:
              return !1;
          }
        },
        __class__: Uk,
      });
      var Wk = function (a, b, c, d) {
        this.buttons = [];
        this._deadZone = 0.15;
        d = [];
        d.push(0);
        d.push(0);
        d.push(0);
        d.push(0);
        d.push(0);
        d.push(0);
        this.axis = d;
        this.deadZoneMode = Vk.INDEPENDENT_AXES;
        this.connected = !0;
        this.id = a;
        this.manager = b;
        this.pressed = new xh(1, this);
        this.released = new xh(0, this);
        this.justPressed = new xh(2, this);
        this.justReleased = new xh(-1, this);
        this.analog = new wn(this);
        this.motion = new xn(this);
        this.pointer = new yn(this);
        null == c && (c = uc.XINPUT);
        this.set_model(c);
        this.detectedModel = c;
      };
      h["flixel.input.gamepad.FlxGamepad"] = Wk;
      Wk.__name__ = "flixel.input.gamepad.FlxGamepad";
      Wk.__interfaces__ = [U];
      Wk.prototype = {
        getButton: function (a) {
          if (-1 == a) return null;
          var b = this.buttons[a];
          null == b && ((b = new Xk(a)), (this.buttons[a] = b));
          return b;
        },
        update: function () {
          if (null != this._device) {
            for (var a = 0, b = this._device.get_numControls(); a < b; ) {
              var c = a++;
              var d = this._device.getControlAt(c);
              var e = this.getButton(c);
              this.isAxisForAnalogStick(c) &&
                this.handleAxisMove(c, d.value, e.value);
              e.value = d.value;
              d = Math.abs(d.value);
              d < this.get_deadZone()
                ? e.release()
                : d > this.get_deadZone() && e.press();
            }
            a = 0;
            for (b = this.buttons; a < b.length; )
              (e = b[a]), ++a, null != e && e.update();
          }
        },
        reset: function () {
          for (var a = 0, b = this.buttons; a < b.length; ) {
            var c = b[a];
            ++a;
            null != c && c.reset();
          }
          b = this.axis.length;
          for (a = 0; a < b; ) (c = a++), (this.axis[c] = 0);
        },
        destroy: function () {
          this.connected = !1;
          this.manager = this.axis = this.buttons = null;
        },
        checkButtonArrayState: function (a, b) {
          if (null == a) return !1;
          for (var c = 0; c < a.length; ) {
            var d = a[c];
            ++c;
            switch (d) {
              case -2:
                d = this.anyButton(b);
                break;
              case -1:
                d = !this.anyButton(b);
                break;
              default:
                (d = this.mapping.getRawID(d)),
                  (d = this.buttons[d]),
                  (d = null != d && d.hasState(b));
            }
            if (d) return !0;
          }
          return !1;
        },
        getAxis: function (a) {
          a = this.getAxisValue(this.mapping.getRawID(a));
          return Math.abs(a) > this.get_deadZone() ? a : 0;
        },
        isAxisForAnalogStick: function (a) {
          var b = this.mapping.leftStick,
            c = this.mapping.rightStick;
          return (null != b && (a == b.x || a == b.y)) ||
            (null != c && (a == c.x || a == c.y))
            ? !0
            : !1;
        },
        getYAxisRaw: function (a) {
          return this.getAnalogYAxisValue(a);
        },
        anyButton: function (a) {
          null == a && (a = 1);
          for (var b = 0, c = this.buttons; b < c.length; ) {
            var d = c[b];
            ++b;
            if (null != d && d.hasState(a)) return !0;
          }
          return !1;
        },
        anyInput: function () {
          if (this.anyButton()) return !0;
          for (var a = 0, b = this.axis.length; a < b; )
            if ((a++, 0 != this.axis[0])) return !0;
          return !1;
        },
        getAxisValue: function (a) {
          var b = 0;
          if (-1 == a) return 0;
          if (null != this._device && this._device.enabled) {
            var c = this._device.get_numControls() - 1;
            c = 0 <= a && (null == c || a <= c);
          } else c = !1;
          c && (b = this._device.getControlAt(a).value);
          this.isAxisForAnalogStick(a) &&
            this.mapping.isAxisFlipped(a) &&
            (b *= -1);
          return b;
        },
        getAnalogXAxisValue: function (a) {
          return null == a
            ? 0
            : this.deadZoneMode == Vk.CIRCULAR
            ? this.getAnalogAxisValueCircular(a, a.x)
            : this.getAnalogAxisValueIndependent(a.x);
        },
        getAnalogYAxisValue: function (a) {
          return null == a
            ? 0
            : this.deadZoneMode == Vk.CIRCULAR
            ? this.getAnalogAxisValueCircular(a, a.y)
            : this.getAnalogAxisValueIndependent(a.y);
        },
        getAnalogAxisValueCircular: function (a, b) {
          if (null == a) return 0;
          var c = this.getAxisValue(a.x);
          a = this.getAxisValue(a.y);
          null == a && (a = 0);
          null == c && (c = 0);
          null == a && (a = 0);
          null == c && (c = 0);
          c = ba.pool.get().set(c, a);
          c._inPool = !1;
          a = Math.sqrt(c.x * c.x + c.y * c.y);
          c.put();
          return a > this.get_deadZone() ? this.getAxisValue(b) : 0;
        },
        getAnalogAxisValueIndependent: function (a) {
          a = this.getAxisValue(a);
          return Math.abs(a) > this.get_deadZone() ? a : 0;
        },
        handleAxisMove: function (a, b, c) {
          var d = b;
          this.mapping.isAxisFlipped(a) && (d *= -1);
          b = d;
          d = c;
          this.mapping.isAxisFlipped(a) && (d *= -1);
          c = d;
          d = this.mapping.leftStick;
          var e = this.mapping.rightStick;
          d =
            (null != d && a == d.x) || a == d.y
              ? d
              : (null != e && a == e.x) || a == e.y
              ? e
              : null;
          if (d.mode == Zg.ONLY_DIGITAL || d.mode == Zg.BOTH)
            this.handleAxisMoveSub(d, a, b, c, 1),
              this.handleAxisMoveSub(d, a, b, c, -1);
        },
        handleAxisMoveSub: function (a, b, c, d, e) {
          null == e && (e = 1);
          var f = -1;
          b == a.x
            ? (f = 0 > e ? a.rawLeft : a.rawRight)
            : b == a.y && (f = 0 > e ? a.rawUp : a.rawDown);
          a = a.digitalThreshold;
          c *= e;
          d *= e;
          c > a && d <= a
            ? ((f = this.getButton(f)), null != f && f.press())
            : c <= a &&
              d > a &&
              ((f = this.getButton(f)), null != f && f.release());
        },
        createMappingForModel: function (a) {
          switch (a._hx_index) {
            case 0:
              return new Yk(this.attachment);
            case 1:
              return new Zk(this.attachment);
            case 2:
              return new $k(this.attachment);
            case 3:
              return new al(this.attachment);
            case 4:
              return new qj(this.attachment);
            case 5:
              return new bl(this.attachment);
            case 6:
              return new cl(this.attachment);
            case 7:
              return new dl(this.attachment);
            case 8:
              return new el(this.attachment);
            case 9:
              return new fl(this.attachment);
            case 10:
              return new gl(this.attachment);
            default:
              return new qj(this.attachment);
          }
        },
        set_model: function (a) {
          this.model = a;
          this.mapping = this.createMappingForModel(this.model);
          return this.model;
        },
        get_deadZone: function () {
          return null == this.manager || null == this.manager.globalDeadZone
            ? this._deadZone
            : this.manager.globalDeadZone;
        },
        __class__: Wk,
        __properties__: {
          get_deadZone: "get_deadZone",
          set_model: "set_model",
        },
      };
      var Vk = (w["flixel.input.gamepad.FlxGamepadDeadZoneMode"] = {
        __ename__: "flixel.input.gamepad.FlxGamepadDeadZoneMode",
        __constructs__: null,
        INDEPENDENT_AXES: {
          _hx_name: "INDEPENDENT_AXES",
          _hx_index: 0,
          __enum__: "flixel.input.gamepad.FlxGamepadDeadZoneMode",
          toString: p,
        },
        CIRCULAR: {
          _hx_name: "CIRCULAR",
          _hx_index: 1,
          __enum__: "flixel.input.gamepad.FlxGamepadDeadZoneMode",
          toString: p,
        },
      });
      Vk.__constructs__ = [Vk.INDEPENDENT_AXES, Vk.CIRCULAR];
      var uc = (w["flixel.input.gamepad.FlxGamepadModel"] = {
        __ename__: "flixel.input.gamepad.FlxGamepadModel",
        __constructs__: null,
        LOGITECH: {
          _hx_name: "LOGITECH",
          _hx_index: 0,
          __enum__: "flixel.input.gamepad.FlxGamepadModel",
          toString: p,
        },
        OUYA: {
          _hx_name: "OUYA",
          _hx_index: 1,
          __enum__: "flixel.input.gamepad.FlxGamepadModel",
          toString: p,
        },
        PS4: {
          _hx_name: "PS4",
          _hx_index: 2,
          __enum__: "flixel.input.gamepad.FlxGamepadModel",
          toString: p,
        },
        PSVITA: {
          _hx_name: "PSVITA",
          _hx_index: 3,
          __enum__: "flixel.input.gamepad.FlxGamepadModel",
          toString: p,
        },
        XINPUT: {
          _hx_name: "XINPUT",
          _hx_index: 4,
          __enum__: "flixel.input.gamepad.FlxGamepadModel",
          toString: p,
        },
        MAYFLASH_WII_REMOTE: {
          _hx_name: "MAYFLASH_WII_REMOTE",
          _hx_index: 5,
          __enum__: "flixel.input.gamepad.FlxGamepadModel",
          toString: p,
        },
        WII_REMOTE: {
          _hx_name: "WII_REMOTE",
          _hx_index: 6,
          __enum__: "flixel.input.gamepad.FlxGamepadModel",
          toString: p,
        },
        MFI: {
          _hx_name: "MFI",
          _hx_index: 7,
          __enum__: "flixel.input.gamepad.FlxGamepadModel",
          toString: p,
        },
        SWITCH_PRO: {
          _hx_name: "SWITCH_PRO",
          _hx_index: 8,
          __enum__: "flixel.input.gamepad.FlxGamepadModel",
          toString: p,
        },
        SWITCH_JOYCON_LEFT: {
          _hx_name: "SWITCH_JOYCON_LEFT",
          _hx_index: 9,
          __enum__: "flixel.input.gamepad.FlxGamepadModel",
          toString: p,
        },
        SWITCH_JOYCON_RIGHT: {
          _hx_name: "SWITCH_JOYCON_RIGHT",
          _hx_index: 10,
          __enum__: "flixel.input.gamepad.FlxGamepadModel",
          toString: p,
        },
        UNKNOWN: {
          _hx_name: "UNKNOWN",
          _hx_index: 11,
          __enum__: "flixel.input.gamepad.FlxGamepadModel",
          toString: p,
        },
      });
      uc.__constructs__ = [
        uc.LOGITECH,
        uc.OUYA,
        uc.PS4,
        uc.PSVITA,
        uc.XINPUT,
        uc.MAYFLASH_WII_REMOTE,
        uc.WII_REMOTE,
        uc.MFI,
        uc.SWITCH_PRO,
        uc.SWITCH_JOYCON_LEFT,
        uc.SWITCH_JOYCON_RIGHT,
        uc.UNKNOWN,
      ];
      var zn = (w["flixel.input.gamepad.FlxGamepadAttachment"] = {
        __ename__: "flixel.input.gamepad.FlxGamepadAttachment",
        __constructs__: null,
        WII_NUNCHUCK: {
          _hx_name: "WII_NUNCHUCK",
          _hx_index: 0,
          __enum__: "flixel.input.gamepad.FlxGamepadAttachment",
          toString: p,
        },
        WII_CLASSIC_CONTROLLER: {
          _hx_name: "WII_CLASSIC_CONTROLLER",
          _hx_index: 1,
          __enum__: "flixel.input.gamepad.FlxGamepadAttachment",
          toString: p,
        },
        NONE: {
          _hx_name: "NONE",
          _hx_index: 2,
          __enum__: "flixel.input.gamepad.FlxGamepadAttachment",
          toString: p,
        },
      });
      zn.__constructs__ = [zn.WII_NUNCHUCK, zn.WII_CLASSIC_CONTROLLER, zn.NONE];
      var Ac = function (a, b, c) {
        this.mode = Zg.BOTH;
        this.digitalThreshold = 0.5;
        this.rawUp = this.rawDown = this.rawLeft = this.rawRight = -1;
        this.x = a;
        this.y = b;
        null != c &&
          ((this.mode = null != c.mode ? c.mode : Zg.BOTH),
          (this.rawUp = null != c.up ? c.up : -1),
          (this.rawDown = null != c.down ? c.down : -1),
          (this.rawLeft = null != c.left ? c.left : -1),
          (this.rawRight = null != c.right ? c.right : -1),
          (this.digitalThreshold = null != c.threshold ? c.threshold : 0.5));
      };
      h["flixel.input.gamepad.FlxGamepadAnalogStick"] = Ac;
      Ac.__name__ = "flixel.input.gamepad.FlxGamepadAnalogStick";
      Ac.prototype = { __class__: Ac };
      var Zg = (w["flixel.input.gamepad.FlxAnalogToDigitalMode"] = {
        __ename__: "flixel.input.gamepad.FlxAnalogToDigitalMode",
        __constructs__: null,
        BOTH: {
          _hx_name: "BOTH",
          _hx_index: 0,
          __enum__: "flixel.input.gamepad.FlxAnalogToDigitalMode",
          toString: p,
        },
        ONLY_DIGITAL: {
          _hx_name: "ONLY_DIGITAL",
          _hx_index: 1,
          __enum__: "flixel.input.gamepad.FlxAnalogToDigitalMode",
          toString: p,
        },
        ONLY_ANALOG: {
          _hx_name: "ONLY_ANALOG",
          _hx_index: 2,
          __enum__: "flixel.input.gamepad.FlxAnalogToDigitalMode",
          toString: p,
        },
      });
      Zg.__constructs__ = [Zg.BOTH, Zg.ONLY_DIGITAL, Zg.ONLY_ANALOG];
      var Xk = function (a) {
        this.value = 0;
        Ld.call(this, a);
      };
      h["flixel.input.gamepad.FlxGamepadButton"] = Xk;
      Xk.__name__ = "flixel.input.gamepad.FlxGamepadButton";
      Xk.__super__ = Ld;
      Xk.prototype = q(Ld.prototype, { __class__: Xk });
      var kc = function () {
        this.h = {};
      };
      h["haxe.ds.IntMap"] = kc;
      kc.__name__ = "haxe.ds.IntMap";
      kc.__interfaces__ = [Qa];
      kc.prototype = {
        set: function (a, b) {
          this.h[a] = b;
        },
        get: function (a) {
          return this.h[a];
        },
        remove: function (a) {
          if (!this.h.hasOwnProperty(a)) return !1;
          delete this.h[a];
          return !0;
        },
        keys: function () {
          var a = [],
            b;
          for (b in this.h) this.h.hasOwnProperty(b) && a.push(+b);
          return new Vf(a);
        },
        iterator: function () {
          return {
            ref: this.h,
            it: this.keys(),
            hasNext: function () {
              return this.it.hasNext();
            },
            next: function () {
              var a = this.it.next();
              return this.ref[a];
            },
          };
        },
        __class__: kc,
      };
      var eb = function () {
        pa.call(this);
        eb.__instances.push(this);
      };
      h["openfl.ui.GameInput"] = eb;
      eb.__name__ = "openfl.ui.GameInput";
      eb.getDeviceAt = function (a) {
        return 0 <= a && a < eb.__deviceList.length ? eb.__deviceList[a] : null;
      };
      eb.__getDevice = function (a) {
        if (null == a) return null;
        if (null == eb.__devices.h.__keys__[a.__id__]) {
          var b = xc.__getDeviceData(),
            c = b[a.id].id;
          b = xc.__getDeviceData();
          b = new An(c, b[a.id].id);
          eb.__deviceList.push(b);
          eb.__devices.set(a, b);
          eb.numDevices = eb.__deviceList.length;
        }
        return eb.__devices.h[a.__id__];
      };
      eb.__onGamepadAxisMove = function (a, b, c) {
        a = eb.__getDevice(a);
        if (null != a && a.enabled) {
          if (!a.__axis.h.hasOwnProperty(b)) {
            if (null == b) var d = "null";
            else
              switch (b) {
                case 0:
                  d = "LEFT_X";
                  break;
                case 1:
                  d = "LEFT_Y";
                  break;
                case 2:
                  d = "RIGHT_X";
                  break;
                case 3:
                  d = "RIGHT_Y";
                  break;
                case 4:
                  d = "TRIGGER_LEFT";
                  break;
                case 5:
                  d = "TRIGGER_RIGHT";
                  break;
                default:
                  d = "UNKNOWN (" + b + ")";
              }
            d = new Je(a, "AXIS_" + d, -1, 1);
            a.__axis.h[b] = d;
            a.__controls.push(d);
          }
          d = a.__axis.h[b];
          d.value = c;
          d.dispatchEvent(new Ba("change"));
        }
      };
      eb.__onGamepadButtonDown = function (a, b) {
        a = eb.__getDevice(a);
        if (null != a && a.enabled) {
          if (!a.__button.h.hasOwnProperty(b)) {
            if (null == b) var c = "null";
            else
              switch (b) {
                case 0:
                  c = "A";
                  break;
                case 1:
                  c = "B";
                  break;
                case 2:
                  c = "X";
                  break;
                case 3:
                  c = "Y";
                  break;
                case 4:
                  c = "BACK";
                  break;
                case 5:
                  c = "GUIDE";
                  break;
                case 6:
                  c = "START";
                  break;
                case 7:
                  c = "LEFT_STICK";
                  break;
                case 8:
                  c = "RIGHT_STICK";
                  break;
                case 9:
                  c = "LEFT_SHOULDER";
                  break;
                case 10:
                  c = "RIGHT_SHOULDER";
                  break;
                case 11:
                  c = "DPAD_UP";
                  break;
                case 12:
                  c = "DPAD_DOWN";
                  break;
                case 13:
                  c = "DPAD_LEFT";
                  break;
                case 14:
                  c = "DPAD_RIGHT";
                  break;
                default:
                  c = "UNKNOWN (" + b + ")";
              }
            c = new Je(a, "BUTTON_" + c, 0, 1);
            a.__button.h[b] = c;
            a.__controls.push(c);
          }
          c = a.__button.h[b];
          c.value = 1;
          c.dispatchEvent(new Ba("change"));
        }
      };
      eb.__onGamepadButtonUp = function (a, b) {
        a = eb.__getDevice(a);
        if (null != a && a.enabled) {
          if (!a.__button.h.hasOwnProperty(b)) {
            if (null == b) var c = "null";
            else
              switch (b) {
                case 0:
                  c = "A";
                  break;
                case 1:
                  c = "B";
                  break;
                case 2:
                  c = "X";
                  break;
                case 3:
                  c = "Y";
                  break;
                case 4:
                  c = "BACK";
                  break;
                case 5:
                  c = "GUIDE";
                  break;
                case 6:
                  c = "START";
                  break;
                case 7:
                  c = "LEFT_STICK";
                  break;
                case 8:
                  c = "RIGHT_STICK";
                  break;
                case 9:
                  c = "LEFT_SHOULDER";
                  break;
                case 10:
                  c = "RIGHT_SHOULDER";
                  break;
                case 11:
                  c = "DPAD_UP";
                  break;
                case 12:
                  c = "DPAD_DOWN";
                  break;
                case 13:
                  c = "DPAD_LEFT";
                  break;
                case 14:
                  c = "DPAD_RIGHT";
                  break;
                default:
                  c = "UNKNOWN (" + b + ")";
              }
            c = new Je(a, "BUTTON_" + c, 0, 1);
            a.__button.h[b] = c;
            a.__controls.push(c);
          }
          c = a.__button.h[b];
          c.value = 0;
          c.dispatchEvent(new Ba("change"));
        }
      };
      eb.__onGamepadConnect = function (a) {
        a = eb.__getDevice(a);
        if (null != a)
          for (var b = 0, c = eb.__instances; b < c.length; ) {
            var d = c[b];
            ++b;
            d.dispatchEvent(new ci("deviceAdded", !0, !1, a));
          }
      };
      eb.__onGamepadDisconnect = function (a) {
        var b = eb.__devices.h[a.__id__];
        if (null != b) {
          null != eb.__devices.h.__keys__[a.__id__] &&
            (X.remove(eb.__deviceList, eb.__devices.h[a.__id__]),
            eb.__devices.remove(a));
          eb.numDevices = eb.__deviceList.length;
          a = 0;
          for (var c = eb.__instances; a < c.length; ) {
            var d = c[a];
            ++a;
            d.dispatchEvent(new ci("deviceRemoved", !0, !1, b));
          }
        }
      };
      eb.__super__ = pa;
      eb.prototype = q(pa.prototype, {
        addEventListener: function (a, b, c, d, e) {
          null == e && (e = !1);
          null == d && (d = 0);
          null == c && (c = !1);
          pa.prototype.addEventListener.call(this, a, b, c, d, e);
          if ("deviceAdded" == a)
            for (a = 0, b = eb.__deviceList; a < b.length; )
              (c = b[a]),
                ++a,
                this.dispatchEvent(new ci("deviceAdded", !0, !1, c));
        },
        __class__: eb,
      });
      var sg = function () {
        this._activeGamepads = [];
        this._gamepads = [];
        this.deviceConnected = new pf();
        this.deviceDisconnected = new pf();
        sg._gameInput.addEventListener(
          "deviceAdded",
          n(this, this.onDeviceAdded)
        );
        sg._gameInput.addEventListener(
          "deviceRemoved",
          n(this, this.onDeviceRemoved)
        );
        for (var a = 0, b = eb.numDevices; a < b; ) {
          var c = a++;
          this.addGamepad(eb.getDeviceAt(c));
        }
      };
      h["flixel.input.gamepad.FlxGamepadManager"] = sg;
      sg.__name__ = "flixel.input.gamepad.FlxGamepadManager";
      sg.__interfaces__ = [Wg];
      sg.prototype = {
        removeByID: function (a) {
          var b = this._gamepads[a];
          null != b &&
            ((this._gamepads[a] = null),
            (a = this._activeGamepads.indexOf(b)),
            -1 != a &&
              ((this._activeGamepads[a] = null),
              this.deviceDisconnected.dispatch(b)),
            V.destroy(b));
          this.lastActive == b && (this.lastActive = null);
          this.firstActive == b && (this.firstActive = null);
        },
        createByID: function (a, b) {
          var c = this._gamepads[a];
          if (null == c) {
            c = new Wk(a, this, b);
            this._gamepads[a] = c;
            a = !1;
            b = 0;
            for (var d = this._activeGamepads.length; b < d; ) {
              var e = b++;
              if (null == this._activeGamepads[e]) {
                this._activeGamepads[e] = c;
                a = !0;
                break;
              }
            }
            a || this._activeGamepads.push(c);
          }
          this.lastActive = c;
          null == this.firstActive && (this.firstActive = c);
          return c;
        },
        getFirstActiveGamepad: function () {
          for (var a = 0, b = this._gamepads; a < b.length; ) {
            var c = b[a];
            ++a;
            if (null != c && c.anyInput()) return c;
          }
          return null;
        },
        anyHasState: function (a, b) {
          for (var c = 0, d = this._gamepads; c < d.length; ) {
            var e = d[c];
            ++c;
            if (null != e)
              switch (a) {
                case -2:
                  e = e.anyButton(b);
                  break;
                case -1:
                  e = !e.anyButton(b);
                  break;
                default:
                  var f = e.mapping.getRawID(a);
                  e = e.buttons[f];
                  e = null != e && e.hasState(b);
              }
            else e = !1;
            if (e) return !0;
          }
          return !1;
        },
        destroy: function () {
          V.destroyArray(this._gamepads);
          this._gamepads = this.lastActive = this.firstActive = null;
          sg._gameInput.removeEventListener(
            "deviceAdded",
            n(this, this.onDeviceAdded)
          );
          sg._gameInput.removeEventListener(
            "deviceRemoved",
            n(this, this.onDeviceRemoved)
          );
        },
        reset: function () {
          for (var a = 0, b = this._gamepads; a < b.length; ) {
            var c = b[a];
            ++a;
            null != c && c.reset();
          }
        },
        onDeviceAdded: function (a) {
          this.addGamepad(a.device);
        },
        onDeviceRemoved: function (a) {
          this.removeGamepad(a.device);
        },
        findGamepadIndex: function (a) {
          if (null == a) return -1;
          for (var b = 0, c = eb.numDevices; b < c; ) {
            var d = b++;
            if (eb.getDeviceAt(d) == a) return d;
          }
          return -1;
        },
        addGamepad: function (a) {
          if (null != a) {
            a.enabled = !0;
            var b = this.findGamepadIndex(a);
            0 > b ||
              ((b = this.createByID(b, this.getModelFromDeviceName(a.name))),
              (b._device = a),
              this.deviceConnected.dispatch(b));
          }
        },
        getModelFromDeviceName: function (a) {
          if (null == a) return uc.UNKNOWN;
          a = K.replace(K.replace(a.toLowerCase(), "-", ""), "_", "");
          return -1 != a.indexOf("ouya")
            ? uc.OUYA
            : -1 != a.indexOf("wireless controller") || -1 != a.indexOf("ps4")
            ? uc.PS4
            : -1 != a.indexOf("logitech")
            ? uc.LOGITECH
            : (-1 != a.indexOf("xbox") && -1 != a.indexOf("360")) ||
              -1 != a.indexOf("xinput")
            ? uc.XINPUT
            : -1 != a.indexOf("nintendo rvlcnt01tr")
            ? uc.WII_REMOTE
            : -1 != a.indexOf("nintendo rvlcnt01")
            ? uc.WII_REMOTE
            : -1 != a.indexOf("mayflash wiimote pc adapter")
            ? uc.MAYFLASH_WII_REMOTE
            : -1 != a.indexOf("pro controller") || -1 != a.indexOf("joycon l+r")
            ? uc.SWITCH_PRO
            : -1 != a.indexOf("joycon (l)")
            ? uc.SWITCH_JOYCON_LEFT
            : -1 != a.indexOf("joycon (r)")
            ? uc.SWITCH_JOYCON_RIGHT
            : -1 != a.indexOf("mfi")
            ? uc.MFI
            : uc.UNKNOWN;
        },
        removeGamepad: function (a) {
          if (null != a)
            for (var b = 0, c = this._gamepads.length; b < c; ) {
              var d = b++,
                e = this._gamepads[d];
              null != e && e._device == a && this.removeByID(d);
            }
        },
        update: function () {
          for (var a = 0, b = this._gamepads; a < b.length; ) {
            var c = b[a];
            ++a;
            null != c && c.update();
          }
        },
        onFocus: function () {},
        onFocusLost: function () {
          this.reset();
        },
        get_numActiveGamepads: function () {
          for (var a = 0, b = 0, c = this._gamepads; b < c.length; ) {
            var d = c[b];
            ++b;
            null != d && ++a;
          }
          return a;
        },
        __class__: sg,
        __properties__: { get_numActiveGamepads: "get_numActiveGamepads" },
      };
      var Ve = function () {};
      h["flixel.input.gamepad.id.LogitechID"] = Ve;
      Ve.__name__ = "flixel.input.gamepad.id.LogitechID";
      var We = function () {};
      h["flixel.input.gamepad.id.MFiID"] = We;
      We.__name__ = "flixel.input.gamepad.id.MFiID";
      var xd = function () {};
      h["flixel.input.gamepad.id.MayflashWiiRemoteID"] = xd;
      xd.__name__ = "flixel.input.gamepad.id.MayflashWiiRemoteID";
      var Xe = function () {};
      h["flixel.input.gamepad.id.OUYAID"] = Xe;
      Xe.__name__ = "flixel.input.gamepad.id.OUYAID";
      var Ye = function () {};
      h["flixel.input.gamepad.id.PS4ID"] = Ye;
      Ye.__name__ = "flixel.input.gamepad.id.PS4ID";
      var ue = function () {};
      h["flixel.input.gamepad.id.PSVitaID"] = ue;
      ue.__name__ = "flixel.input.gamepad.id.PSVitaID";
      var di = function () {};
      h["flixel.input.gamepad.id.SwitchJoyconLeftID"] = di;
      di.__name__ = "flixel.input.gamepad.id.SwitchJoyconLeftID";
      var ei = function () {};
      h["flixel.input.gamepad.id.SwitchJoyconRightID"] = ei;
      ei.__name__ = "flixel.input.gamepad.id.SwitchJoyconRightID";
      var Ze = function () {};
      h["flixel.input.gamepad.id.SwitchProID"] = Ze;
      Ze.__name__ = "flixel.input.gamepad.id.SwitchProID";
      var yd = function () {};
      h["flixel.input.gamepad.id.WiiRemoteID"] = yd;
      yd.__name__ = "flixel.input.gamepad.id.WiiRemoteID";
      var $e = function () {};
      h["flixel.input.gamepad.id.XInputID"] = $e;
      $e.__name__ = "flixel.input.gamepad.id.XInputID";
      var rj = function (a, b) {
        this.status = a;
        this.gamepad = b;
      };
      h["flixel.input.gamepad.lists.FlxBaseGamepadList"] = rj;
      rj.__name__ = "flixel.input.gamepad.lists.FlxBaseGamepadList";
      rj.prototype = {
        get_ANY: function () {
          for (var a = 0, b = this.gamepad.buttons; a < b.length; ) {
            var c = b[a];
            ++a;
            null != c
              ? ((c = this.gamepad.buttons[c.ID]),
                (c = null != c && c.hasState(this.status)))
              : (c = !1);
            if (c) return !0;
          }
          return !1;
        },
        __class__: rj,
        __properties__: { get_ANY: "get_ANY" },
      };
      var wn = function (a) {
        this.value = new Bn(a);
        this.justMoved = new hl(2, a);
        this.justReleased = new hl(-1, a);
      };
      h["flixel.input.gamepad.lists.FlxGamepadAnalogList"] = wn;
      wn.__name__ = "flixel.input.gamepad.lists.FlxGamepadAnalogList";
      wn.prototype = { __class__: wn };
      var hl = function (a, b) {
        this.status = a;
        this.gamepad = b;
      };
      h["flixel.input.gamepad.lists.FlxGamepadAnalogStateList"] = hl;
      hl.__name__ = "flixel.input.gamepad.lists.FlxGamepadAnalogStateList";
      hl.prototype = {
        get_LEFT_STICK: function () {
          return this.checkXY(19);
        },
        get_LEFT_STICK_X: function () {
          var a = this.gamepad.mapping.getAnalogStick(19);
          if (null == a) return !1;
          a = this.gamepad.buttons[a.x];
          return null != a ? a.hasState(this.status) : !1;
        },
        get_LEFT_STICK_Y: function () {
          var a = this.gamepad.mapping.getAnalogStick(19);
          if (null == a) return !1;
          a = this.gamepad.buttons[a.y];
          return null != a ? a.hasState(this.status) : !1;
        },
        get_RIGHT_STICK: function () {
          return this.checkXY(20);
        },
        get_RIGHT_STICK_X: function () {
          var a = this.gamepad.mapping.getAnalogStick(20);
          if (null == a) return !1;
          a = this.gamepad.buttons[a.x];
          return null != a ? a.hasState(this.status) : !1;
        },
        get_RIGHT_STICK_Y: function () {
          var a = this.gamepad.mapping.getAnalogStick(20);
          if (null == a) return !1;
          a = this.gamepad.buttons[a.y];
          return null != a ? a.hasState(this.status) : !1;
        },
        checkXY: function (a) {
          a = this.gamepad.mapping.getAnalogStick(a);
          if (null == a) return !1;
          var b = this.gamepad.buttons[a.x],
            c = null != b && b.hasState(this.status);
          b = this.gamepad.buttons[a.y];
          var d = null != b && b.hasState(this.status);
          return (c && d) ||
            (c &&
              ((b = this.gamepad.buttons[a.y]),
              (c = null != b && b.hasState(0)),
              (b = this.gamepad.buttons[a.y]),
              (b = null != b && b.hasState(-1)),
              c || b)) ||
            (d &&
              ((b = this.gamepad.buttons[a.x]),
              (d = null != b && b.hasState(0)),
              (b = this.gamepad.buttons[a.x]),
              (a = null != b && b.hasState(-1)),
              d || a))
            ? !0
            : !1;
        },
        checkX: function (a) {
          a = this.gamepad.mapping.getAnalogStick(a);
          if (null == a) return !1;
          a = this.gamepad.buttons[a.x];
          return null != a ? a.hasState(this.status) : !1;
        },
        checkY: function (a) {
          a = this.gamepad.mapping.getAnalogStick(a);
          if (null == a) return !1;
          a = this.gamepad.buttons[a.y];
          return null != a ? a.hasState(this.status) : !1;
        },
        checkRaw: function (a, b) {
          a = this.gamepad.buttons[a];
          return null != a ? a.hasState(b) : !1;
        },
        __class__: hl,
        __properties__: {
          get_RIGHT_STICK_Y: "get_RIGHT_STICK_Y",
          get_RIGHT_STICK_X: "get_RIGHT_STICK_X",
          get_RIGHT_STICK: "get_RIGHT_STICK",
          get_LEFT_STICK_Y: "get_LEFT_STICK_Y",
          get_LEFT_STICK_X: "get_LEFT_STICK_X",
          get_LEFT_STICK: "get_LEFT_STICK",
        },
      };
      var Bn = function (a) {
        this.gamepad = a;
      };
      h["flixel.input.gamepad.lists.FlxGamepadAnalogValueList"] = Bn;
      Bn.__name__ = "flixel.input.gamepad.lists.FlxGamepadAnalogValueList";
      Bn.prototype = {
        get_LEFT_STICK_X: function () {
          var a = this.gamepad;
          return a.getAnalogXAxisValue(a.mapping.getAnalogStick(19));
        },
        get_LEFT_STICK_Y: function () {
          var a = this.gamepad;
          return a.getYAxisRaw(a.mapping.getAnalogStick(19));
        },
        get_RIGHT_STICK_X: function () {
          var a = this.gamepad;
          return a.getAnalogXAxisValue(a.mapping.getAnalogStick(20));
        },
        get_RIGHT_STICK_Y: function () {
          var a = this.gamepad;
          return a.getYAxisRaw(a.mapping.getAnalogStick(20));
        },
        get_LEFT_TRIGGER: function () {
          return this.gamepad.getAxis(17);
        },
        get_RIGHT_TRIGGER: function () {
          return this.gamepad.getAxis(18);
        },
        get_POINTER_X: function () {
          return this.gamepad.getAxis(28);
        },
        get_POINTER_Y: function () {
          return this.gamepad.getAxis(29);
        },
        getAxis: function (a) {
          return this.gamepad.getAxis(a);
        },
        getXAxis: function (a) {
          var b = this.gamepad;
          return b.getAnalogXAxisValue(b.mapping.getAnalogStick(a));
        },
        getYAxis: function (a) {
          var b = this.gamepad;
          return b.getYAxisRaw(b.mapping.getAnalogStick(a));
        },
        __class__: Bn,
        __properties__: {
          get_POINTER_Y: "get_POINTER_Y",
          get_POINTER_X: "get_POINTER_X",
          get_RIGHT_TRIGGER: "get_RIGHT_TRIGGER",
          get_LEFT_TRIGGER: "get_LEFT_TRIGGER",
          get_RIGHT_STICK_Y: "get_RIGHT_STICK_Y",
          get_RIGHT_STICK_X: "get_RIGHT_STICK_X",
          get_LEFT_STICK_Y: "get_LEFT_STICK_Y",
          get_LEFT_STICK_X: "get_LEFT_STICK_X",
        },
      };
      var xh = function (a, b) {
        rj.call(this, a, b);
      };
      h["flixel.input.gamepad.lists.FlxGamepadButtonList"] = xh;
      xh.__name__ = "flixel.input.gamepad.lists.FlxGamepadButtonList";
      xh.__super__ = rj;
      xh.prototype = q(rj.prototype, { __class__: xh });
      var xn = function (a) {
        this.gamepad = a;
      };
      h["flixel.input.gamepad.lists.FlxGamepadMotionValueList"] = xn;
      xn.__name__ = "flixel.input.gamepad.lists.FlxGamepadMotionValueList";
      xn.prototype = {
        get_TILT_PITCH: function () {
          return this.gamepad.mapping.supportsMotion
            ? this.gamepad.getAxis(26)
            : 0;
        },
        get_TILT_ROLL: function () {
          return this.gamepad.mapping.supportsMotion
            ? this.gamepad.getAxis(27)
            : 0;
        },
        getAxis: function (a) {
          return this.gamepad.mapping.supportsMotion
            ? this.gamepad.getAxis(a)
            : 0;
        },
        get_isSupported: function () {
          return this.gamepad.mapping.supportsMotion;
        },
        __class__: xn,
        __properties__: {
          get_TILT_ROLL: "get_TILT_ROLL",
          get_TILT_PITCH: "get_TILT_PITCH",
          get_isSupported: "get_isSupported",
        },
      };
      var yn = function (a) {
        this.gamepad = a;
      };
      h["flixel.input.gamepad.lists.FlxGamepadPointerValueList"] = yn;
      yn.__name__ = "flixel.input.gamepad.lists.FlxGamepadPointerValueList";
      yn.prototype = {
        get_X: function () {
          return this.gamepad.mapping.supportsPointer
            ? this.gamepad.getAxis(28)
            : 0;
        },
        get_Y: function () {
          return this.gamepad.mapping.supportsPointer
            ? this.gamepad.getAxis(29)
            : 0;
        },
        getAxis: function (a) {
          return this.gamepad.mapping.supportsPointer
            ? this.gamepad.getAxis(a)
            : 0;
        },
        get_isSupported: function () {
          return this.gamepad.mapping.supportsPointer;
        },
        __class__: yn,
        __properties__: {
          get_Y: "get_Y",
          get_X: "get_X",
          get_isSupported: "get_isSupported",
        },
      };
      var Mb = function (a) {
        this.attachment = zn.NONE;
        this.supportsMotion = this.supportsPointer = !1;
        null != a && this.set_attachment(a);
        this.initValues();
      };
      h["flixel.input.gamepad.mappings.FlxGamepadMapping"] = Mb;
      Mb.__name__ = "flixel.input.gamepad.mappings.FlxGamepadMapping";
      Mb.prototype = {
        initValues: function () {},
        getAnalogStick: function (a) {
          switch (a) {
            case 19:
              return this.leftStick;
            case 20:
              return this.rightStick;
            default:
              return null;
          }
        },
        getRawID: function (a) {
          return -1;
        },
        isAxisFlipped: function (a) {
          return !1;
        },
        set_attachment: function (a) {
          return (this.attachment = a);
        },
        __class__: Mb,
        __properties__: { set_attachment: "set_attachment" },
      };
      var Yk = function (a) {
        Mb.call(this, a);
      };
      h["flixel.input.gamepad.mappings.LogitechMapping"] = Yk;
      Yk.__name__ = "flixel.input.gamepad.mappings.LogitechMapping";
      Yk.__super__ = Mb;
      Yk.prototype = q(Mb.prototype, {
        initValues: function () {
          this.leftStick = Ve.LEFT_ANALOG_STICK;
          this.rightStick = Ve.RIGHT_ANALOG_STICK;
        },
        getRawID: function (a) {
          switch (a) {
            case 0:
              return 1;
            case 1:
              return 2;
            case 2:
              return 0;
            case 3:
              return 3;
            case 4:
              return 4;
            case 5:
              return 5;
            case 6:
              return 8;
            case 7:
              return 9;
            case 8:
              return 10;
            case 9:
              return 11;
            case 10:
              return -5;
            case 11:
              return 16;
            case 12:
              return 17;
            case 13:
              return 18;
            case 14:
              return 19;
            case 17:
              return 6;
            case 18:
              return 7;
            case 34:
              return Ve.LEFT_ANALOG_STICK.rawUp;
            case 35:
              return Ve.LEFT_ANALOG_STICK.rawRight;
            case 36:
              return Ve.LEFT_ANALOG_STICK.rawDown;
            case 37:
              return Ve.LEFT_ANALOG_STICK.rawLeft;
            case 38:
              return Ve.RIGHT_ANALOG_STICK.rawUp;
            case 39:
              return Ve.RIGHT_ANALOG_STICK.rawRight;
            case 40:
              return Ve.RIGHT_ANALOG_STICK.rawDown;
            case 41:
              return Ve.RIGHT_ANALOG_STICK.rawLeft;
            default:
              return -1;
          }
        },
        __class__: Yk,
      });
      var dl = function (a) {
        Mb.call(this, a);
      };
      h["flixel.input.gamepad.mappings.MFiMapping"] = dl;
      dl.__name__ = "flixel.input.gamepad.mappings.MFiMapping";
      dl.__super__ = Mb;
      dl.prototype = q(Mb.prototype, {
        initValues: function () {
          this.leftStick = We.LEFT_ANALOG_STICK;
          this.rightStick = We.RIGHT_ANALOG_STICK;
        },
        getRawID: function (a) {
          switch (a) {
            case 0:
              return 6;
            case 1:
              return 7;
            case 2:
              return 8;
            case 3:
              return 9;
            case 4:
              return 15;
            case 5:
              return 16;
            case 6:
              return 10;
            case 7:
              return 12;
            case 8:
              return 13;
            case 9:
              return 14;
            case 10:
              return 11;
            case 11:
              return 17;
            case 12:
              return 18;
            case 13:
              return 19;
            case 14:
              return 20;
            case 17:
              return 4;
            case 18:
              return 5;
            case 34:
              return We.LEFT_ANALOG_STICK.rawUp;
            case 35:
              return We.LEFT_ANALOG_STICK.rawRight;
            case 36:
              return We.LEFT_ANALOG_STICK.rawDown;
            case 37:
              return We.LEFT_ANALOG_STICK.rawLeft;
            case 38:
              return We.RIGHT_ANALOG_STICK.rawUp;
            case 39:
              return We.RIGHT_ANALOG_STICK.rawRight;
            case 40:
              return We.RIGHT_ANALOG_STICK.rawDown;
            case 41:
              return We.RIGHT_ANALOG_STICK.rawLeft;
            default:
              return -1;
          }
        },
        __class__: dl,
      });
      var bl = function (a) {
        Mb.call(this, a);
      };
      h["flixel.input.gamepad.mappings.MayflashWiiRemoteMapping"] = bl;
      bl.__name__ = "flixel.input.gamepad.mappings.MayflashWiiRemoteMapping";
      bl.__super__ = Mb;
      bl.prototype = q(Mb.prototype, {
        initValues: function () {
          this.supportsPointer = !0;
        },
        getRawID: function (a) {
          switch (this.attachment._hx_index) {
            case 0:
              return this.getRawNunchuk(a);
            case 1:
              return this.getRawClassicController(a);
            case 2:
              return this.getRawDefault(a);
          }
        },
        getRawClassicController: function (a) {
          switch (a) {
            case 0:
              return 10;
            case 1:
              return 11;
            case 2:
              return 8;
            case 3:
              return 9;
            case 4:
              return 14;
            case 5:
              return 15;
            case 6:
              return 16;
            case 7:
              return 17;
            case 10:
              return 19;
            case 11:
              return 4;
            case 12:
              return 5;
            case 13:
              return 6;
            case 14:
              return 7;
            case 17:
              return 12;
            case 18:
              return 13;
            case 30:
              return -1;
            case 31:
              return -1;
            case 34:
              return xd.LEFT_ANALOG_STICK.rawUp;
            case 35:
              return xd.LEFT_ANALOG_STICK.rawRight;
            case 36:
              return xd.LEFT_ANALOG_STICK.rawDown;
            case 37:
              return xd.LEFT_ANALOG_STICK.rawLeft;
            case 38:
              return xd.RIGHT_ANALOG_STICK.rawUp;
            case 39:
              return xd.RIGHT_ANALOG_STICK.rawRight;
            case 40:
              return xd.RIGHT_ANALOG_STICK.rawDown;
            case 41:
              return xd.RIGHT_ANALOG_STICK.rawLeft;
            default:
              return this.getRawDefault(a);
          }
        },
        getRawNunchuk: function (a) {
          switch (a) {
            case 0:
              return 10;
            case 1:
              return 11;
            case 2:
              return 8;
            case 3:
              return 9;
            case 4:
              return 15;
            case 6:
              return 12;
            case 7:
              return 13;
            case 10:
              return 19;
            case 11:
              return 4;
            case 12:
              return 5;
            case 13:
              return 6;
            case 14:
              return 7;
            case 17:
              return 14;
            case 28:
              return 2;
            case 29:
              return 3;
            case 34:
              return xd.LEFT_ANALOG_STICK.rawUp;
            case 35:
              return xd.LEFT_ANALOG_STICK.rawRight;
            case 36:
              return xd.LEFT_ANALOG_STICK.rawDown;
            case 37:
              return xd.LEFT_ANALOG_STICK.rawLeft;
            default:
              return -1;
          }
        },
        getRawDefault: function (a) {
          switch (a) {
            case 0:
              return 10;
            case 1:
              return 11;
            case 2:
              return 8;
            case 3:
              return 9;
            case 6:
              return 12;
            case 7:
              return 13;
            case 10:
              return 19;
            case 11:
              return 22;
            case 12:
              return 23;
            case 13:
              return 24;
            case 14:
              return 25;
            default:
              return -1;
          }
        },
        set_attachment: function (a) {
          switch (a._hx_index) {
            case 0:
            case 1:
              var b = xd.LEFT_ANALOG_STICK;
              break;
            case 2:
              b = xd.REMOTE_DPAD;
          }
          this.leftStick = b;
          this.rightStick = 1 == a._hx_index ? xd.RIGHT_ANALOG_STICK : null;
          return Mb.prototype.set_attachment.call(this, a);
        },
        __class__: bl,
      });
      var Zk = function (a) {
        Mb.call(this, a);
      };
      h["flixel.input.gamepad.mappings.OUYAMapping"] = Zk;
      Zk.__name__ = "flixel.input.gamepad.mappings.OUYAMapping";
      Zk.__super__ = Mb;
      Zk.prototype = q(Mb.prototype, {
        initValues: function () {
          this.leftStick = Xe.LEFT_ANALOG_STICK;
          this.rightStick = Xe.RIGHT_ANALOG_STICK;
        },
        getRawID: function (a) {
          switch (a) {
            case 0:
              return 6;
            case 1:
              return 7;
            case 2:
              return 8;
            case 3:
              return 9;
            case 4:
              return 15;
            case 5:
              return 16;
            case 8:
              return 13;
            case 9:
              return 14;
            case 10:
              return 16777234;
            case 11:
              return 17;
            case 12:
              return 18;
            case 13:
              return 19;
            case 14:
              return 20;
            case 17:
              return 4;
            case 18:
              return 5;
            case 34:
              return Xe.LEFT_ANALOG_STICK.rawUp;
            case 35:
              return Xe.LEFT_ANALOG_STICK.rawRight;
            case 36:
              return Xe.LEFT_ANALOG_STICK.rawDown;
            case 37:
              return Xe.LEFT_ANALOG_STICK.rawLeft;
            case 38:
              return Xe.RIGHT_ANALOG_STICK.rawUp;
            case 39:
              return Xe.RIGHT_ANALOG_STICK.rawRight;
            case 40:
              return Xe.RIGHT_ANALOG_STICK.rawDown;
            case 41:
              return Xe.RIGHT_ANALOG_STICK.rawLeft;
            default:
              return -1;
          }
        },
        __class__: Zk,
      });
      var $k = function (a) {
        Mb.call(this, a);
      };
      h["flixel.input.gamepad.mappings.PS4Mapping"] = $k;
      $k.__name__ = "flixel.input.gamepad.mappings.PS4Mapping";
      $k.__super__ = Mb;
      $k.prototype = q(Mb.prototype, {
        initValues: function () {
          this.leftStick = Ye.LEFT_ANALOG_STICK;
          this.rightStick = Ye.RIGHT_ANALOG_STICK;
          this.supportsPointer = this.supportsMotion = !0;
        },
        getRawID: function (a) {
          switch (a) {
            case 0:
              return 6;
            case 1:
              return 7;
            case 2:
              return 8;
            case 3:
              return 9;
            case 4:
              return 15;
            case 5:
              return 16;
            case 6:
              return 10;
            case 7:
              return 12;
            case 8:
              return 13;
            case 9:
              return 14;
            case 10:
              return 11;
            case 11:
              return 17;
            case 12:
              return 18;
            case 13:
              return 19;
            case 14:
              return 20;
            case 17:
              return 4;
            case 18:
              return 5;
            case 34:
              return Ye.LEFT_ANALOG_STICK.rawUp;
            case 35:
              return Ye.LEFT_ANALOG_STICK.rawRight;
            case 36:
              return Ye.LEFT_ANALOG_STICK.rawDown;
            case 37:
              return Ye.LEFT_ANALOG_STICK.rawLeft;
            case 38:
              return Ye.RIGHT_ANALOG_STICK.rawUp;
            case 39:
              return Ye.RIGHT_ANALOG_STICK.rawRight;
            case 40:
              return Ye.RIGHT_ANALOG_STICK.rawDown;
            case 41:
              return Ye.RIGHT_ANALOG_STICK.rawLeft;
            default:
              return -1;
          }
        },
        __class__: $k,
      });
      var al = function (a) {
        Mb.call(this, a);
      };
      h["flixel.input.gamepad.mappings.PSVitaMapping"] = al;
      al.__name__ = "flixel.input.gamepad.mappings.PSVitaMapping";
      al.__super__ = Mb;
      al.prototype = q(Mb.prototype, {
        initValues: function () {
          this.leftStick = ue.LEFT_ANALOG_STICK;
          this.rightStick = ue.RIGHT_ANALOG_STICK;
        },
        getRawID: function (a) {
          switch (a) {
            case 0:
              return 6;
            case 1:
              return 7;
            case 2:
              return 8;
            case 3:
              return 9;
            case 4:
              return 15;
            case 5:
              return 16;
            case 6:
              return 10;
            case 7:
              return 12;
            case 11:
              return 17;
            case 12:
              return 18;
            case 13:
              return 19;
            case 14:
              return 20;
            case 34:
              return ue.LEFT_ANALOG_STICK.rawUp;
            case 35:
              return ue.LEFT_ANALOG_STICK.rawRight;
            case 36:
              return ue.LEFT_ANALOG_STICK.rawDown;
            case 37:
              return ue.LEFT_ANALOG_STICK.rawLeft;
            case 38:
              return ue.RIGHT_ANALOG_STICK.rawUp;
            case 39:
              return ue.RIGHT_ANALOG_STICK.rawRight;
            case 40:
              return ue.RIGHT_ANALOG_STICK.rawDown;
            case 41:
              return ue.RIGHT_ANALOG_STICK.rawLeft;
            default:
              return -1;
          }
        },
        isAxisFlipped: function (a) {
          return a != ue.LEFT_ANALOG_STICK.y
            ? a == ue.RIGHT_ANALOG_STICK.y
            : !0;
        },
        __class__: al,
      });
      var fl = function (a) {
        Mb.call(this, a);
      };
      h["flixel.input.gamepad.mappings.SwitchJoyconLeftMapping"] = fl;
      fl.__name__ = "flixel.input.gamepad.mappings.SwitchJoyconLeftMapping";
      fl.__super__ = Mb;
      fl.prototype = q(Mb.prototype, {
        initValues: function () {
          this.leftStick = di.LEFT_ANALOG_STICK;
          this.supportsMotion = !0;
          this.supportsPointer = !1;
        },
        getRawID: function (a) {
          switch (a) {
            case 0:
              return 6;
            case 1:
              return 7;
            case 2:
              return 8;
            case 3:
              return 9;
            case 4:
              return 15;
            case 5:
              return 16;
            case 7:
              return 12;
            case 8:
              return 13;
            case 17:
              return 4;
            case 30:
              return 10;
            case 34:
              return di.LEFT_ANALOG_STICK.rawUp;
            case 35:
              return di.LEFT_ANALOG_STICK.rawRight;
            case 36:
              return di.LEFT_ANALOG_STICK.rawDown;
            case 37:
              return di.LEFT_ANALOG_STICK.rawLeft;
            default:
              return -1;
          }
        },
        __class__: fl,
      });
      var gl = function (a) {
        Mb.call(this, a);
      };
      h["flixel.input.gamepad.mappings.SwitchJoyconRightMapping"] = gl;
      gl.__name__ = "flixel.input.gamepad.mappings.SwitchJoyconRightMapping";
      gl.__super__ = Mb;
      gl.prototype = q(Mb.prototype, {
        initValues: function () {
          this.leftStick = ei.LEFT_ANALOG_STICK;
          this.supportsMotion = !0;
          this.supportsPointer = !1;
        },
        getRawID: function (a) {
          switch (a) {
            case 0:
              return 6;
            case 1:
              return 7;
            case 2:
              return 8;
            case 3:
              return 9;
            case 4:
              return 15;
            case 5:
              return 16;
            case 7:
              return 12;
            case 8:
              return 13;
            case 10:
              return 11;
            case 18:
              return 5;
            case 30:
              return 10;
            case 34:
              return ei.LEFT_ANALOG_STICK.rawUp;
            case 35:
              return ei.LEFT_ANALOG_STICK.rawRight;
            case 36:
              return ei.LEFT_ANALOG_STICK.rawDown;
            case 37:
              return ei.LEFT_ANALOG_STICK.rawLeft;
            default:
              return -1;
          }
        },
        __class__: gl,
      });
      var el = function (a) {
        Mb.call(this, a);
      };
      h["flixel.input.gamepad.mappings.SwitchProMapping"] = el;
      el.__name__ = "flixel.input.gamepad.mappings.SwitchProMapping";
      el.__super__ = Mb;
      el.prototype = q(Mb.prototype, {
        initValues: function () {
          this.leftStick = Ze.LEFT_ANALOG_STICK;
          this.rightStick = Ze.RIGHT_ANALOG_STICK;
          this.supportsMotion = !0;
          this.supportsPointer = !1;
        },
        getRawID: function (a) {
          switch (a) {
            case 0:
              return 6;
            case 1:
              return 7;
            case 2:
              return 8;
            case 3:
              return 9;
            case 4:
              return 15;
            case 5:
              return 16;
            case 6:
              return 10;
            case 7:
              return 12;
            case 8:
              return 13;
            case 9:
              return 14;
            case 10:
              return 11;
            case 11:
              return 17;
            case 12:
              return 18;
            case 13:
              return 19;
            case 14:
              return 20;
            case 17:
              return 4;
            case 18:
              return 5;
            case 30:
              return 21;
            case 34:
              return Ze.LEFT_ANALOG_STICK.rawUp;
            case 35:
              return Ze.LEFT_ANALOG_STICK.rawRight;
            case 36:
              return Ze.LEFT_ANALOG_STICK.rawDown;
            case 37:
              return Ze.LEFT_ANALOG_STICK.rawLeft;
            case 38:
              return Ze.RIGHT_ANALOG_STICK.rawUp;
            case 39:
              return Ze.RIGHT_ANALOG_STICK.rawRight;
            case 40:
              return Ze.RIGHT_ANALOG_STICK.rawDown;
            case 41:
              return Ze.RIGHT_ANALOG_STICK.rawLeft;
            default:
              return -1;
          }
        },
        __class__: el,
      });
      var cl = function (a) {
        Mb.call(this, a);
      };
      h["flixel.input.gamepad.mappings.WiiRemoteMapping"] = cl;
      cl.__name__ = "flixel.input.gamepad.mappings.WiiRemoteMapping";
      cl.__super__ = Mb;
      cl.prototype = q(Mb.prototype, {
        initValues: function () {
          this.supportsMotion = !0;
          this.supportsPointer = !1;
        },
        getRawID: function (a) {
          switch (this.attachment._hx_index) {
            case 0:
              return this.getRawNunchuk(a);
            case 1:
              return this.getRawClassicController(a);
            case 2:
              return this.getRawDefault(a);
          }
        },
        getRawClassicController: function (a) {
          switch (a) {
            case 0:
              return 10;
            case 1:
              return 9;
            case 2:
              return 11;
            case 3:
              return 12;
            case 4:
              return 15;
            case 5:
              return 16;
            case 6:
              return 18;
            case 7:
              return 17;
            case 10:
              return 19;
            case 11:
              return 5;
            case 12:
              return 6;
            case 13:
              return 7;
            case 14:
              return 8;
            case 17:
              return 13;
            case 18:
              return 14;
            case 30:
              return 20;
            case 31:
              return 21;
            case 34:
              return yd.LEFT_ANALOG_STICK.rawUp;
            case 35:
              return yd.LEFT_ANALOG_STICK.rawRight;
            case 36:
              return yd.LEFT_ANALOG_STICK.rawDown;
            case 37:
              return yd.LEFT_ANALOG_STICK.rawLeft;
            case 38:
              return yd.RIGHT_ANALOG_STICK.rawUp;
            case 39:
              return yd.RIGHT_ANALOG_STICK.rawRight;
            case 40:
              return yd.RIGHT_ANALOG_STICK.rawDown;
            case 41:
              return yd.RIGHT_ANALOG_STICK.rawLeft;
            default:
              return -1;
          }
        },
        getRawNunchuk: function (a) {
          switch (a) {
            case 0:
              return 9;
            case 1:
              return 10;
            case 2:
              return 13;
            case 3:
              return 14;
            case 4:
              return 11;
            case 6:
              return 16;
            case 7:
              return 15;
            case 10:
              return 17;
            case 11:
              return 5;
            case 12:
              return 6;
            case 13:
              return 7;
            case 14:
              return 8;
            case 17:
              return 12;
            case 26:
              return 3;
            case 27:
              return 2;
            case 34:
              return yd.LEFT_ANALOG_STICK.rawUp;
            case 35:
              return yd.LEFT_ANALOG_STICK.rawRight;
            case 36:
              return yd.LEFT_ANALOG_STICK.rawDown;
            case 37:
              return yd.LEFT_ANALOG_STICK.rawLeft;
            default:
              return -1;
          }
        },
        getRawDefault: function (a) {
          switch (a) {
            case 0:
              return 11;
            case 1:
              return 12;
            case 2:
              return 9;
            case 3:
              return 10;
            case 6:
              return 14;
            case 7:
              return 13;
            case 10:
              return 15;
            case 11:
              return 22;
            case 12:
              return 23;
            case 13:
              return 24;
            case 14:
              return 25;
            case 26:
              return 2;
            case 27:
              return 3;
            default:
              return -1;
          }
        },
        isAxisFlipped: function (a) {
          return 4 == a;
        },
        set_attachment: function (a) {
          switch (a._hx_index) {
            case 0:
            case 1:
              var b = yd.LEFT_ANALOG_STICK;
              break;
            case 2:
              b = yd.REMOTE_DPAD;
          }
          this.leftStick = b;
          this.rightStick = 1 == a._hx_index ? yd.RIGHT_ANALOG_STICK : null;
          return Mb.prototype.set_attachment.call(this, a);
        },
        __class__: cl,
      });
      var qj = function (a) {
        Mb.call(this, a);
      };
      h["flixel.input.gamepad.mappings.XInputMapping"] = qj;
      qj.__name__ = "flixel.input.gamepad.mappings.XInputMapping";
      qj.__super__ = Mb;
      qj.prototype = q(Mb.prototype, {
        initValues: function () {
          this.leftStick = $e.LEFT_ANALOG_STICK;
          this.rightStick = $e.RIGHT_ANALOG_STICK;
        },
        getRawID: function (a) {
          switch (a) {
            case 0:
              return 6;
            case 1:
              return 7;
            case 2:
              return 8;
            case 3:
              return 9;
            case 4:
              return 15;
            case 5:
              return 16;
            case 6:
              return 10;
            case 7:
              return 12;
            case 8:
              return 13;
            case 9:
              return 14;
            case 10:
              return -1;
            case 11:
              return 17;
            case 12:
              return 18;
            case 13:
              return 19;
            case 14:
              return 20;
            case 17:
              return 4;
            case 18:
              return 5;
            case 34:
              return $e.LEFT_ANALOG_STICK.rawUp;
            case 35:
              return $e.LEFT_ANALOG_STICK.rawRight;
            case 36:
              return $e.LEFT_ANALOG_STICK.rawDown;
            case 37:
              return $e.LEFT_ANALOG_STICK.rawLeft;
            case 38:
              return $e.RIGHT_ANALOG_STICK.rawUp;
            case 39:
              return $e.RIGHT_ANALOG_STICK.rawRight;
            case 40:
              return $e.RIGHT_ANALOG_STICK.rawDown;
            case 41:
              return $e.RIGHT_ANALOG_STICK.rawLeft;
            default:
              return -1;
          }
        },
        __class__: qj,
      });
      var qo = {},
        il = function (a, b) {
          pj.call(this, a, b);
        };
      h["flixel.input.keyboard.FlxKeyList"] = il;
      il.__name__ = "flixel.input.keyboard.FlxKeyList";
      il.__super__ = pj;
      il.prototype = q(pj.prototype, { __class__: il });
      var Ek = function () {
        Yg.call(this, function (a, b) {
          return new il(a, b);
        });
        this.preventDefaultKeys = [38, 40, 37, 39, 32, 9];
        for (
          var a = qo.fromStringMap.h, b = Object.keys(a), c = b.length, d = 0;
          d < c;

        ) {
          var e = a[b[d++]];
          if (-2 != e && -1 != e) {
            var f = new Ld(e);
            this._keyListArray.push(f);
            this._keyListMap.h[e] = f;
          }
        }
      };
      h["flixel.input.keyboard.FlxKeyboard"] = Ek;
      Ek.__name__ = "flixel.input.keyboard.FlxKeyboard";
      Ek.__super__ = Yg;
      Ek.prototype = q(Yg.prototype, {
        onKeyUp: function (a) {
          Yg.prototype.onKeyUp.call(this, a);
        },
        onKeyDown: function (a) {
          Yg.prototype.onKeyDown.call(this, a);
        },
        resolveKeyCode: function (a) {
          return a.keyCode;
        },
        __class__: Ek,
      });
      var He = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != He.preload) this.__fromImage(He.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(He.resourceName), He.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == He.preload && (He.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.input.mouse._FlxMouse.GraphicCursor"] = He;
      He.__name__ = "flixel.input.mouse._FlxMouse.GraphicCursor";
      He.__super__ = S;
      He.prototype = q(S.prototype, { __class__: He });
      var Ge = function (a) {
        this.justPressedTimeInTicks = -1;
        var b = 0,
          c = 0;
        null == c && (c = 0);
        null == b && (b = 0);
        b = ba.pool.get().set(b, c);
        b._inPool = !1;
        this.justPressedPosition = b;
        Ld.call(this, a);
      };
      h["flixel.input.mouse.FlxMouseButton"] = Ge;
      Ge.__name__ = "flixel.input.mouse.FlxMouseButton";
      Ge.__interfaces__ = [U];
      Ge.getByID = function (a) {
        switch (a) {
          case -3:
            return g.mouse._rightButton;
          case -2:
            return g.mouse._middleButton;
          case -1:
            return g.mouse._leftButton;
        }
      };
      Ge.__super__ = Ld;
      Ge.prototype = q(Ld.prototype, {
        update: function () {
          Ld.prototype.update.call(this);
          if (2 == this.current) {
            var a = this.justPressedPosition,
              b = g.mouse.screenX,
              c = g.mouse.screenY;
            null == c && (c = 0);
            null == b && (b = 0);
            a.set_x(b);
            a.set_y(c);
            this.justPressedTimeInTicks = g.game.ticks;
          } else
            -1 == this.current &&
              g.swipes.push(
                new Sk(
                  this.ID,
                  this.justPressedPosition,
                  g.mouse.getScreenPosition(),
                  this.justPressedTimeInTicks
                )
              );
        },
        destroy: function () {
          this.justPressedPosition = V.put(this.justPressedPosition);
        },
        onDown: function (a) {
          g.mouse.enabled && this.press();
        },
        onUp: function (a) {
          g.mouse.enabled && this.release();
        },
        __class__: Ge,
      });
      var jl = function (a, b, c, d, e, f, k, g, l) {
        this.object = a;
        this.onMouseDown = b;
        this.onMouseUp = c;
        this.onMouseOver = d;
        this.onMouseOut = e;
        this.mouseChildren = f;
        this.mouseEnabled = k;
        this.pixelPerfect = g;
        this.mouseButtons = null == l ? [-1] : l;
        a instanceof F && (this.sprite = a);
      };
      h["flixel.input.mouse.FlxMouseEvent"] = jl;
      jl.__name__ = "flixel.input.mouse.FlxMouseEvent";
      jl.__interfaces__ = [U];
      jl.prototype = {
        destroy: function () {
          this.mouseButtons =
            this.onMouseWheel =
            this.onMouseMove =
            this.onMouseOut =
            this.onMouseOver =
            this.onMouseDoubleClick =
            this.onMouseClick =
            this.onMouseUp =
            this.onMouseDown =
            this.sprite =
            this.object =
              null;
        },
        __class__: jl,
      };
      var kl = function () {
        this.maxDoubleClickDelay = 500;
        var a = 0,
          b = 0;
        null == b && (b = 0);
        null == a && (a = 0);
        a = ba.pool.get().set(a, b);
        a._inPool = !1;
        this._point = a;
        this.mouseClickedTime = -1;
        this._clickList = [];
        this._downList = [];
        this._overList = [];
        this._list = [];
        O.call(this);
        null != this._list && this.clearRegistry();
        this._list = [];
        this._overList = [];
        this._downList = [];
        this._clickList = [];
        g.signals.preStateSwitch.add(n(this, this.removeAll));
      };
      h["flixel.input.mouse.FlxMouseEventManager"] = kl;
      kl.__name__ = "flixel.input.mouse.FlxMouseEventManager";
      kl.__super__ = O;
      kl.prototype = q(O.prototype, {
        destroy: function () {
          this.clearRegistry();
          this._point = V.put(this._point);
          g.signals.preStateSwitch.remove(n(this, this.removeAll));
          O.prototype.destroy.call(this);
        },
        update: function (a) {
          O.prototype.update.call(this, a);
          a = [];
          for (var b = 0, c = this._list; b < c.length; ) {
            var d = c[b];
            ++b;
            if (
              d.object.alive &&
              d.object.exists &&
              d.object.visible &&
              d.mouseEnabled &&
              this.checkOverlap(d) &&
              (a.push(d), !d.mouseChildren)
            )
              break;
          }
          b = 0;
          for (c = this._overList; b < c.length; )
            if (
              ((d = c[b]),
              ++b,
              !(
                null == d.onMouseOut ||
                (d.object.exists &&
                  d.object.visible &&
                  null != this.get(d.object, a))
              ))
            )
              d.onMouseOut(d.object);
          for (b = 0; b < a.length; )
            if (
              ((d = a[b]),
              ++b,
              null != d.onMouseOver &&
                d.object.exists &&
                d.object.visible &&
                null == this.get(d.object, this._overList))
            )
              d.onMouseOver(d.object);
          if (g.mouse.enabled) {
            b = g.mouse;
            if (b._prevX != b.x || b._prevY != b.y)
              for (b = 0; b < a.length; )
                if (
                  ((d = a[b]),
                  ++b,
                  null != d.onMouseMove && d.object.exists && d.object.visible)
                )
                  d.onMouseMove(d.object);
            for (b = 0; b < a.length; )
              if (
                ((d = a[b]),
                ++b,
                null != d.onMouseDown && d.object.exists && d.object.visible)
              ) {
                c = 0;
                for (var e = d.mouseButtons; c < e.length; ) {
                  var f = e[c];
                  ++c;
                  if (2 == Ge.getByID(f).current) d.onMouseDown(d.object);
                }
              }
            if (2 == g.mouse._leftButton.current)
              for (b = 0; b < a.length; )
                (d = a[b]),
                  ++b,
                  (null != d.onMouseClick || null != d.onMouseDoubleClick) &&
                    d.object.exists &&
                    d.object.visible &&
                    this._downList.push(d);
            for (b = 0; b < a.length; )
              if (
                ((d = a[b]),
                ++b,
                null != d.onMouseUp && d.object.exists && d.object.visible)
              )
                for (c = 0, e = d.mouseButtons; c < e.length; )
                  if (((f = e[c]), ++c, -1 == Ge.getByID(f).current))
                    d.onMouseUp(d.object);
            0 < this._clickList.length &&
              g.game.ticks - this.mouseClickedTime > this.maxDoubleClickDelay &&
              (this._clickList = []);
            if (-1 == g.mouse._leftButton.current)
              for (
                this.mouseClickedTime = g.game.ticks,
                  d = this._clickList,
                  0 < this._clickList.length && (this._clickList = []),
                  b = 0,
                  c = this._downList;
                b < c.length;

              )
                if (
                  ((e = c[b]),
                  ++b,
                  null != e.object &&
                    e.object.exists &&
                    e.object.visible &&
                    null != this.get(e.object, a))
                ) {
                  if (null != e.onMouseClick) e.onMouseClick(e.object);
                  if (null != e.onMouseDoubleClick)
                    if (null != this.get(e.object, d))
                      e.onMouseDoubleClick(e.object);
                    else this._clickList.push(e);
                }
            0 < this._downList.length
              ? ((b = g.mouse._leftButton),
                (b = !(1 == b.current || 2 == b.current)))
              : (b = !1);
            b && (this._downList = []);
            if (0 != g.mouse.wheel)
              for (b = 0; b < a.length; )
                if (
                  ((d = a[b]),
                  ++b,
                  null != d.onMouseWheel && d.object.exists && d.object.visible)
                )
                  d.onMouseWheel(d.object);
            this._overList = a;
          }
        },
        removeAll: function () {
          if (null != this._list)
            for (var a = 0, b = this._list; a < b.length; ) {
              var c = b[a];
              ++a;
              c.destroy();
            }
          this._list.splice(0, this._list.length);
          this._overList = [];
          this._downList = [];
          this._clickList = [];
        },
        get: function (a, b) {
          null == b && (b = this._list);
          for (var c = 0; c < b.length; ) {
            var d = b[c];
            ++c;
            if (d.object == a) return d;
          }
          return null;
        },
        clearRegistry: function () {
          this._clickList = this._downList = this._overList = null;
          this._list = V.destroyArray(this._list);
        },
        checkOverlap: function (a) {
          for (var b = 0, c = a.object.get_cameras(); b < c.length; ) {
            var d = c[b];
            ++b;
            var e = (this._point = g.mouse.getPositionInCameraView(
                d,
                this._point
              )),
              f =
                e.x > d.viewMarginX &&
                e.x < d.width - d.viewMarginX &&
                e.y > d.viewMarginY &&
                e.y < d.height - d.viewMarginY;
            e._weak && e.put();
            if (
              f &&
              ((e = this._point = g.mouse.getWorldPosition(d, this._point)),
              a.pixelPerfect && null != a.sprite
                ? a.sprite.pixelsOverlapPoint(e, 1, d)
                : a.object.overlapsPoint(e, !0, d))
            )
              return !0;
            e = 0;
            for (f = g.touches.list; e < f.length; ) {
              var k = f[e];
              ++e;
              var r = (this._point = k.getPositionInCameraView(d, this._point)),
                l =
                  r.x > d.viewMarginX &&
                  r.x < d.width - d.viewMarginX &&
                  r.y > d.viewMarginY &&
                  r.y < d.height - d.viewMarginY;
              r._weak && r.put();
              if (
                l &&
                ((k = this._point = k.getWorldPosition(d, this._point)),
                a.pixelPerfect && null != a.sprite
                  ? a.sprite.pixelsOverlapPoint(k, 1, d)
                  : a.object.overlapsPoint(k, !0, d))
              )
                return !0;
            }
          }
          return !1;
        },
        __class__: kl,
      });
      var sj = function (a, b, c, d) {
        null == d && (d = 0);
        null == c && (c = 0);
        null == b && (b = 0);
        null == a && (a = 0);
        this.justPressedTimeInTicks = -1;
        var e = 0,
          f = 0;
        null == f && (f = 0);
        null == e && (e = 0);
        e = ba.pool.get().set(e, f);
        e._inPool = !1;
        this.justPressedPosition = e;
        this.flashPoint = new gb();
        Yc.call(this);
        this.input = new Ld(c);
        this.setXY(a, b);
        this.pressure = d;
      };
      h["flixel.input.touch.FlxTouch"] = sj;
      sj.__name__ = "flixel.input.touch.FlxTouch";
      sj.__interfaces__ = [vg, U];
      sj.__super__ = Yc;
      sj.prototype = q(Yc.prototype, {
        destroy: function () {
          this.input = null;
          this.justPressedPosition = V.put(this.justPressedPosition);
          this.flashPoint = null;
        },
        recycle: function (a, b, c, d) {
          this.setXY(a, b);
          this.input.ID = c;
          this.input.reset();
          this.pressure = d;
        },
        update: function () {
          this.input.update();
          if (2 == this.input.current) {
            var a = this.justPressedPosition,
              b = this.screenX,
              c = this.screenY;
            null == c && (c = 0);
            null == b && (b = 0);
            a.set_x(b);
            a.set_y(c);
            this.justPressedTimeInTicks = g.game.ticks;
          } else
            -1 == this.input.current &&
              g.swipes.push(
                new Sk(
                  this.input.ID,
                  this.justPressedPosition,
                  this.getScreenPosition(),
                  this.justPressedTimeInTicks
                )
              );
        },
        setXY: function (a, b) {
          this.flashPoint.setTo(a, b);
          this.flashPoint = g.game.globalToLocal(this.flashPoint);
          this._globalScreenX = (this.flashPoint.x / g.scaleMode.scale.x) | 0;
          this._globalScreenY = (this.flashPoint.y / g.scaleMode.scale.y) | 0;
          this.updatePositions();
        },
        get_justReleased: function () {
          return -1 == this.input.current;
        },
        get_pressed: function () {
          var a = this.input;
          return 1 != a.current ? 2 == a.current : !0;
        },
        get_justPressed: function () {
          return 2 == this.input.current;
        },
        __class__: sj,
        __properties__: {
          get_justPressed: "get_justPressed",
          get_pressed: "get_pressed",
          get_justReleased: "get_justReleased",
        },
      });
      var Vh = function () {
        this.list = [];
        this._inactiveTouches = [];
        this._touchesCache = new kc();
        Vh.maxTouchPoints = fi.maxTouchPoints;
        fi.inputMode = 2;
        sa.get_current().stage.addEventListener(
          "touchBegin",
          n(this, this.handleTouchBegin)
        );
        sa.get_current().stage.addEventListener(
          "touchEnd",
          n(this, this.handleTouchEnd)
        );
        sa.get_current().stage.addEventListener(
          "touchMove",
          n(this, this.handleTouchMove)
        );
      };
      h["flixel.input.touch.FlxTouchManager"] = Vh;
      Vh.__name__ = "flixel.input.touch.FlxTouchManager";
      Vh.__interfaces__ = [Wg];
      Vh.prototype = {
        destroy: function () {
          for (var a = 0, b = this.list; a < b.length; ) {
            var c = b[a];
            ++a;
            c.destroy();
          }
          this.list = null;
          a = 0;
          for (b = this._inactiveTouches; a < b.length; )
            (c = b[a]), ++a, c.destroy();
          this._touchesCache = this._inactiveTouches = null;
        },
        reset: function () {
          for (var a = this._touchesCache.keys(); a.hasNext(); ) {
            var b = a.next();
            this._touchesCache.remove(b);
          }
          a = 0;
          for (b = this.list; a < b.length; ) {
            var c = b[a];
            ++a;
            c.input.reset();
            this._inactiveTouches.push(c);
          }
          this.list.splice(0, this.list.length);
        },
        handleTouchBegin: function (a) {
          var b = this._touchesCache.h[a.touchPointID];
          null != b
            ? (b.setXY(a.stageX | 0, a.stageY | 0), (b.pressure = a.pressure))
            : (b = this.recycle(
                a.stageX | 0,
                a.stageY | 0,
                a.touchPointID,
                a.pressure
              ));
          b.input.press();
        },
        handleTouchEnd: function (a) {
          a = this._touchesCache.h[a.touchPointID];
          null != a && a.input.release();
        },
        handleTouchMove: function (a) {
          var b = this._touchesCache.h[a.touchPointID];
          null != b &&
            (b.setXY(a.stageX | 0, a.stageY | 0), (b.pressure = a.pressure));
        },
        add: function (a) {
          this.list.push(a);
          return (this._touchesCache.h[a.input.ID] = a);
        },
        recycle: function (a, b, c, d) {
          if (0 < this._inactiveTouches.length) {
            var e = this._inactiveTouches.pop();
            e.recycle(a, b, c, d);
            return this.add(e);
          }
          return this.add(new sj(a, b, c, d));
        },
        update: function () {
          for (var a = this.list.length - 1, b; 0 <= a; ) {
            b = this.list[a];
            var c = b.input;
            (0 != c.current && -1 != c.current) || -1 == b.input.current
              ? b.update()
              : (b.input.reset(),
                this._touchesCache.remove(b.input.ID),
                this.list.splice(a, 1),
                this._inactiveTouches.push(b));
            --a;
          }
        },
        onFocus: function () {},
        onFocusLost: function () {
          this.reset();
        },
        __class__: Vh,
      };
      var hc = function () {};
      h["flixel.math.FlxMath"] = hc;
      hc.__name__ = "flixel.math.FlxMath";
      hc.roundDecimal = function (a, b) {
        for (var c = 1, d = 0; d < b; ) d++, (c *= 10);
        return Math.round(a * c) / c;
      };
      hc.pointInFlxRect = function (a, b, c) {
        return a >= c.x && a <= c.x + c.width && b >= c.y
          ? b <= c.y + c.height
          : !1;
      };
      hc.mouseInFlxRect = function (a, b) {
        return null == b
          ? !0
          : a
          ? hc.pointInFlxRect(Math.floor(g.mouse.x), Math.floor(g.mouse.y), b)
          : hc.pointInFlxRect(g.mouse.screenX, g.mouse.screenY, b);
      };
      hc.maxAdd = function (a, b, c, d) {
        null == d && (d = 0);
        a += b;
        a > c ? (a = c) : a <= d && (a = d);
        return a;
      };
      hc.remapToRange = function (a, b, c, d, e) {
        return d + ((e - d) / (c - b)) * (a - b);
      };
      hc.getDecimals = function (a) {
        a = (null == a ? "null" : "" + a).split(".");
        var b = 0;
        1 < a.length && (b = a[1].length);
        return b;
      };
      var Ei = {
          __properties__: { get_radians: "get_radians" },
          distanceTo: function (a, b) {
            var c = a.x - b.x;
            a = a.y - b.y;
            b._weak && b.put();
            return Math.sqrt(c * c + a * a);
          },
          get_radians: function (a) {
            var b = a.x;
            a = a.y;
            var c = !1;
            null == c && (c = !1);
            return c ? (180 / Math.PI) * Math.atan2(a, b) : Math.atan2(a, b);
          },
        },
        lh = function (a, b, c) {
          ba.call(this);
          this._setXCallback = a;
          this._setXYCallback = this._setYCallback = c;
          null != this._setXCallback &&
            (null == this._setYCallback && (this._setYCallback = a),
            null == this._setXYCallback && (this._setXYCallback = a));
        };
      h["flixel.math.FlxCallbackPoint"] = lh;
      lh.__name__ = "flixel.math.FlxCallbackPoint";
      lh.__super__ = ba;
      lh.prototype = q(ba.prototype, {
        set: function (a, b) {
          null == b && (b = 0);
          null == a && (a = 0);
          ba.prototype.set.call(this, a, b);
          null != this._setXYCallback && this._setXYCallback(this);
          return this;
        },
        set_x: function (a) {
          ba.prototype.set_x.call(this, a);
          null != this._setXCallback && this._setXCallback(this);
          return a;
        },
        set_y: function (a) {
          ba.prototype.set_y.call(this, a);
          null != this._setYCallback && this._setYCallback(this);
          return a;
        },
        destroy: function () {
          ba.prototype.destroy.call(this);
          this._setXYCallback = this._setYCallback = this._setXCallback = null;
        },
        put: function () {},
        __class__: lh,
      });
      var Rj = function () {};
      h["flixel.math.FlxVelocity"] = Rj;
      Rj.__name__ = "flixel.math.FlxVelocity";
      Rj.computeVelocity = function (a, b, c, d, e) {
        0 != b
          ? (a += b * e)
          : 0 != c &&
            ((b = c * e), (a = 0 < a - b ? a - b : 0 > a + b ? a + b : 0));
        0 != a && 0 != d && (a > d ? (a = d) : a < -d && (a = -d));
        return a;
      };
      var zd = function (a) {
        this._firstUpdate = !1;
        this._wasObjectImmovable = null;
        this._inc = 1;
        this.axes = 17;
        this.finished = !1;
        this.nodeIndex = 0;
        this.active = !1;
        this.angleOffset = 0;
        this.autoRotate = !1;
        this.autoCenter = !0;
        this.angle = 0;
        this.immovable = !1;
        this.speed = 0;
        this._nodes = null != a ? a.slice() : [];
      };
      h["flixel.path.FlxPath"] = zd;
      zd.__name__ = "flixel.path.FlxPath";
      zd.__interfaces__ = [U];
      zd.prototype = {
        update: function (a) {
          if (null != this.object) {
            this._firstUpdate &&
              (this.immovable &&
                ((this._wasObjectImmovable = this.object.immovable),
                this.object.set_immovable(!0)),
              (this._firstUpdate = !1));
            zd._point.set_x(this.object.x);
            zd._point.set_y(this.object.y);
            if (this.autoCenter) {
              var b = zd._point,
                c = 0.5 * this.object.get_width(),
                d = 0.5 * this.object.get_height();
              null == d && (d = 0);
              null == c && (c = 0);
              b.set_x(b.x + c);
              b.set_y(b.y + d);
            }
            var e = this._nodes[this.nodeIndex];
            b = e.x - zd._point.x;
            c = e.y - zd._point.y;
            var f = 1 == this.axes,
              k = 16 == this.axes;
            f
              ? (0 < b ? b : -b) < this.speed * a && (e = this.advancePath())
              : k
              ? (0 < c ? c : -c) < this.speed * a && (e = this.advancePath())
              : Math.sqrt(b * b + c * c) < this.speed * a &&
                (e = this.advancePath());
            null != this.object &&
              0 != this.speed &&
              (zd._point.set_x(this.object.x),
              zd._point.set_y(this.object.y),
              this.autoCenter &&
                ((b = zd._point),
                (c = 0.5 * this.object.get_width()),
                (d = 0.5 * this.object.get_height()),
                null == d && (d = 0),
                null == c && (c = 0),
                b.set_x(b.x + c),
                b.set_y(b.y + d)),
              (a = zd._point),
              (a = 1e-7 >= Math.abs(a.x - e.x) && 1e-7 >= Math.abs(a.y - e.y)),
              e._weak && e.put(),
              a
                ? ((b = this.object.velocity), b.set_x(0), b.set_y(0))
                : this.calculateVelocity(e, f, k),
              this.autoRotate &&
                ((this.object.angularVelocity = 0),
                (this.object.angularAcceleration = 0),
                this.object.set_angle(this.angle + this.angleOffset)),
              this.finished && this.cancel());
          }
        },
        calculateVelocity: function (a, b, c) {
          if (b || zd._point.y == a.y)
            this.object.velocity.set_x(
              zd._point.x < a.x ? this.speed : -this.speed
            ),
              (this.angle = 0 > this.object.velocity.x ? 180 : 0),
              b || this.object.velocity.set_y(0);
          else if (c || zd._point.x == a.x)
            this.object.velocity.set_y(
              zd._point.y < a.y ? this.speed : -this.speed
            ),
              (this.angle = 0 > this.object.velocity.y ? -90 : 90),
              c || this.object.velocity.set_x(0);
          else {
            b = this.object.velocity;
            c = a.x;
            var d = a.y;
            null == d && (d = 0);
            null == c && (c = 0);
            b.set_x(c);
            b.set_y(d);
            a._weak && a.put();
            a = zd._point;
            c = a.x;
            d = a.y;
            null == d && (d = 0);
            null == c && (c = 0);
            b.set_x(b.x - c);
            b.set_y(b.y - d);
            a._weak && a.put();
            a = this.speed;
            (1e-7 > Math.abs(b.x) && 1e-7 > Math.abs(b.y)) ||
              ((c = Ei.get_radians(b)),
              b.set_x(a * Math.cos(c)),
              b.set_y(a * Math.sin(c)));
            this.angle = Ei.get_radians(b) * (180 / Math.PI);
          }
        },
        advancePath: function (a) {
          null == a && (a = !0);
          if (a && ((a = this._nodes[this.nodeIndex]), null != a)) {
            var b = this.axes;
            if (1 == b || 17 == b)
              this.object.set_x(a.x),
                this.autoCenter &&
                  ((b = this.object),
                  b.set_x(b.x - 0.5 * this.object.get_width()));
            b = this.axes;
            if (16 == b || 17 == b)
              this.object.set_y(a.y),
                this.autoCenter &&
                  ((b = this.object),
                  b.set_y(b.y - 0.5 * this.object.get_height()));
          }
          a = !1;
          this.nodeIndex += this._inc;
          1 == this._mode
            ? 0 > this.nodeIndex &&
              ((this.nodeIndex = 0), (a = !0), this.onEnd())
            : 16 == this._mode
            ? this.nodeIndex >= this._nodes.length &&
              ((a = !0), (this.nodeIndex = 0))
            : 256 == this._mode
            ? 0 > this.nodeIndex &&
              ((this.nodeIndex = this._nodes.length - 1),
              (a = !0),
              0 > this.nodeIndex && (this.nodeIndex = 0))
            : 4096 == this._mode
            ? 0 < this._inc
              ? this.nodeIndex >= this._nodes.length &&
                ((this.nodeIndex = this._nodes.length - 2),
                (a = !0),
                0 > this.nodeIndex && (this.nodeIndex = 0),
                (this._inc = -this._inc))
              : 0 > this.nodeIndex &&
                ((this.nodeIndex = 1),
                (a = !0),
                this.nodeIndex >= this._nodes.length &&
                  (this.nodeIndex = this._nodes.length - 1),
                0 > this.nodeIndex && (this.nodeIndex = 0),
                (this._inc = -this._inc))
            : this.nodeIndex >= this._nodes.length &&
              ((this.nodeIndex = this._nodes.length - 1),
              (a = !0),
              this.onEnd());
          if (a && null != this.onComplete) this.onComplete(this);
          return this._nodes[this.nodeIndex];
        },
        cancel: function () {
          this.onEnd();
          if (null != this.object) {
            var a = this.object.velocity,
              b = 0,
              c = 0;
            null == c && (c = 0);
            null == b && (b = 0);
            a.set_x(b);
            a.set_y(c);
          }
          return this;
        },
        onEnd: function () {
          this.finished = !0;
          this.active = !1;
          null != this._wasObjectImmovable &&
            this.object.set_immovable(this._wasObjectImmovable);
          this._wasObjectImmovable = null;
        },
        destroy: function () {
          V.putArray(this._nodes);
          this.onComplete = this.object = this._nodes = null;
        },
        __class__: zd,
      };
      var Ce = function () {
        this._alreadyPaused = !1;
        this._pitch = this._volumeAdjust = 1;
        this.loopTime = this._time = this._length = 0;
        O.call(this);
        this.reset();
      };
      h["flixel.sound.FlxSound"] = Ce;
      Ce.__name__ = "flixel.sound.FlxSound";
      Ce.__super__ = O;
      Ce.prototype = q(O.prototype, {
        reset: function () {
          this.destroy();
          this._time = this.y = this.x = 0;
          this._paused = !1;
          this._volumeAdjust = this._volume = 1;
          this.looped = !1;
          this.endTime = this.loopTime = 0;
          this._target = null;
          this._radius = 0;
          this._proximityPan = !1;
          this.set_visible(!1);
          this.amplitudeRight = this.amplitudeLeft = this.amplitude = 0;
          this.autoDestroy = !1;
          null == this._transform && (this._transform = new tg());
          this._transform.pan = 0;
        },
        destroy: function () {
          this._transform = null;
          this.set_exists(!1);
          this.set_active(!1);
          this.artist = this.name = this._target = null;
          null != this._channel &&
            (this._channel.removeEventListener(
              "soundComplete",
              n(this, this.stopped)
            ),
            this._channel.stop(),
            (this._channel = null));
          null != this._sound &&
            (this._sound.removeEventListener("id3", n(this, this.gotID3)),
            (this._sound = null));
          this.onComplete = null;
          O.prototype.destroy.call(this);
        },
        update: function (a) {
          if (null != this._channel) {
            this._time = this._channel.get_position();
            var b = 1;
            if (null != this._target) {
              a = this._target.getPosition();
              b = this.x;
              var c = this.y;
              null == c && (c = 0);
              null == b && (b = 0);
              null == c && (c = 0);
              null == b && (b = 0);
              null == c && (c = 0);
              null == b && (b = 0);
              b = ba.pool.get().set(b, c);
              b._inPool = !1;
              b._weak = !0;
              b = Ei.distanceTo(a, b) / this._radius;
              a.put();
              a = 0 > b ? 0 : b;
              b = 1 - (1 < a ? 1 : a);
              this._proximityPan &&
                ((a = (this.x - this._target.x) / this._radius),
                (a = -1 > a ? -1 : a),
                (this._transform.pan = 1 < a ? 1 : a));
            }
            this._volumeAdjust = b;
            this.updateTransform();
            0 < this._transform.volume
              ? ((this.amplitudeLeft =
                  this._channel.leftPeak / this._transform.volume),
                (this.amplitudeRight =
                  this._channel.rightPeak / this._transform.volume),
                (this.amplitude =
                  0.5 * (this.amplitudeLeft + this.amplitudeRight)))
              : (this.amplitude = this.amplitudeRight = this.amplitudeLeft = 0);
            null != this.endTime &&
              this._time >= this.endTime &&
              this.stopped();
          }
        },
        kill: function () {
          O.prototype.kill.call(this);
          this.cleanup(!1);
        },
        loadEmbedded: function (a, b, c, d) {
          null == c && (c = !1);
          null == b && (b = !1);
          if (null == a) return this;
          this.cleanup(!0);
          a instanceof De
            ? (this._sound = a)
            : za.__instanceof(a, $m)
            ? (this._sound = zb.createInstance(a, []))
            : "string" == typeof a &&
              (aa.exists(a, "SOUND") || aa.exists(a, "MUSIC")
                ? (this._sound = aa.getSound(a))
                : g.log.advanced(
                    "Could not find a Sound asset with an ID of '" + a + "'.",
                    Ja.ERROR,
                    !0
                  ));
          return this.init(b, c, d);
        },
        loadStream: function (a, b, c, d, e) {
          null == c && (c = !1);
          null == b && (b = !1);
          var f = this;
          this.cleanup(!0);
          this._sound = new De();
          this._sound.addEventListener("id3", n(this, this.gotID3));
          var k = null;
          k = function (a) {
            a.target.removeEventListener(a.type, k);
            af.__eq(f._sound, a.target) &&
              ((f._length = f._sound.get_length()), null != e && e());
          };
          this._sound.addEventListener("complete", k, !1, 0, !0);
          this._sound.load(new Oi(a));
          return this.init(b, c, d);
        },
        init: function (a, b, c) {
          null == b && (b = !1);
          null == a && (a = !1);
          this.looped = a;
          this.autoDestroy = b;
          this.updateTransform();
          this.set_exists(!0);
          this.onComplete = c;
          this.set_pitch(1);
          this.endTime = this._length =
            null == this._sound ? 0 : this._sound.get_length();
          return this;
        },
        play: function (a, b, c) {
          null == b && (b = 0);
          null == a && (a = !1);
          if (!this.exists) return this;
          if (a) this.cleanup(!1, !0);
          else if (null != this._channel) return this;
          this._paused ? this.resume() : this.startSound(b);
          this.endTime = c;
          return this;
        },
        resume: function () {
          this._paused && this.startSound(this._time);
          return this;
        },
        pause: function () {
          if (null == this._channel) return this;
          this._time = this._channel.get_position();
          this._paused = !0;
          this.cleanup(!1, !1);
          return this;
        },
        volumeTween: function (a) {
          this.set_volume(a);
        },
        updateTransform: function () {
          this._transform.volume =
            (g.sound.muted ? 0 : 1) *
            g.sound.volume *
            (null != this.group ? this.group.volume : 1) *
            this._volume *
            this._volumeAdjust;
          null != this._channel &&
            this._channel.set_soundTransform(this._transform);
        },
        startSound: function (a) {
          null != this._sound &&
            ((this._time = a),
            (this._paused = !1),
            (this._channel = this._sound.play(this._time, 0, this._transform)),
            null != this._channel
              ? (this.set_pitch(this._pitch),
                this._channel.addEventListener(
                  "soundComplete",
                  n(this, this.stopped)
                ),
                this.set_active(!0))
              : (this.set_exists(!1), this.set_active(!1)));
        },
        stopped: function (a) {
          if (null != this.onComplete) this.onComplete();
          this.looped
            ? (this.cleanup(!1), this.play(!1, this.loopTime, this.endTime))
            : this.cleanup(this.autoDestroy);
        },
        cleanup: function (a, b) {
          null == b && (b = !0);
          a
            ? this.reset()
            : (null != this._channel &&
                (this._channel.removeEventListener(
                  "soundComplete",
                  n(this, this.stopped)
                ),
                this._channel.stop(),
                (this._channel = null)),
              this.set_active(!1),
              b && ((this._time = 0), (this._paused = !1)));
        },
        gotID3: function (a) {
          this.name = this._sound.get_id3().songName;
          this.artist = this._sound.get_id3().artist;
          this._sound.removeEventListener("id3", n(this, this.gotID3));
        },
        onFocus: function () {
          this._alreadyPaused || this.resume();
        },
        onFocusLost: function () {
          this._alreadyPaused = this._paused;
          this.pause();
        },
        set_group: function (a) {
          if (this.group != a) {
            var b = this.group;
            this.group = a;
            null != b && b.remove(this);
            null != a && a.add(this);
            this.updateTransform();
          }
          return a;
        },
        set_volume: function (a) {
          var b = 0 > a ? 0 : a;
          this._volume = 1 < b ? 1 : b;
          this.updateTransform();
          return a;
        },
        set_pitch: function (a) {
          null != this._channel &&
            null != this._channel.__audioSource &&
            this._channel.__audioSource.set_pitch(a);
          return (this._pitch = a);
        },
        set_time: function (a) {
          null != this._channel && (this.cleanup(!1, !0), this.startSound(a));
          return (this._time = a);
        },
        __class__: Ce,
        __properties__: q(O.prototype.__properties__, {
          set_time: "set_time",
          set_pitch: "set_pitch",
          set_volume: "set_volume",
          set_group: "set_group",
        }),
      });
      var ll = function (a) {
        null == a && (a = 1);
        this.sounds = [];
        this.set_volume(a);
      };
      h["flixel.sound.FlxSoundGroup"] = ll;
      ll.__name__ = "flixel.sound.FlxSoundGroup";
      ll.prototype = {
        add: function (a) {
          return 0 > this.sounds.indexOf(a)
            ? (this.sounds.push(a), a.set_group(this), !0)
            : !1;
        },
        remove: function (a) {
          return 0 <= this.sounds.indexOf(a)
            ? (a.set_group(null), X.remove(this.sounds, a))
            : !1;
        },
        set_volume: function (a) {
          this.volume = a;
          for (var b = 0, c = this.sounds; b < c.length; ) {
            var d = c[b];
            ++b;
            d.updateTransform();
          }
          return a;
        },
        __class__: ll,
        __properties__: { set_volume: "set_volume" },
      };
      var zf = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != zf.preload) this.__fromImage(zf.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(zf.resourceName), zf.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == zf.preload && (zf.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.system.GraphicLogo"] = zf;
      zf.__name__ = "flixel.system.GraphicLogo";
      zf.__super__ = S;
      zf.prototype = q(S.prototype, { __class__: zf });
      var Af = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != Af.preload) this.__fromImage(Af.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(Af.resourceName), Af.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == Af.preload && (Af.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.system.GraphicVirtualInput"] = Af;
      Af.__name__ = "flixel.system.GraphicVirtualInput";
      Af.__super__ = S;
      Af.prototype = q(S.prototype, { __class__: Af });
      var Nb = function (a) {
        this.length = a.byteLength;
        this.b = new Uint8Array(a);
        this.b.bufferValue = a;
        a.hxBytes = this;
        a.bytes = this.b;
      };
      h["haxe.io.Bytes"] = Nb;
      Nb.__name__ = "haxe.io.Bytes";
      Nb.ofString = function (a, b) {
        b = [];
        for (var c = 0; c < a.length; ) {
          var d = a.charCodeAt(c++);
          55296 <= d &&
            56319 >= d &&
            (d = ((d - 55232) << 10) | (a.charCodeAt(c++) & 1023));
          127 >= d
            ? b.push(d)
            : (2047 >= d
                ? b.push(192 | (d >> 6))
                : (65535 >= d
                    ? b.push(224 | (d >> 12))
                    : (b.push(240 | (d >> 18)), b.push(128 | ((d >> 12) & 63))),
                  b.push(128 | ((d >> 6) & 63))),
              b.push(128 | (d & 63)));
        }
        return new Nb(new Uint8Array(b).buffer);
      };
      Nb.ofData = function (a) {
        var b = a.hxBytes;
        return null != b ? b : new Nb(a);
      };
      Nb.prototype = {
        blit: function (a, b, c, d) {
          if (
            0 > a ||
            0 > c ||
            0 > d ||
            a + d > this.length ||
            c + d > b.length
          )
            throw N.thrown(Bf.OutsideBounds);
          0 == c && d == b.b.byteLength
            ? this.b.set(b.b, a)
            : this.b.set(b.b.subarray(c, c + d), a);
        },
        getString: function (a, b, c) {
          if (0 > a || 0 > b || a + b > this.length)
            throw N.thrown(Bf.OutsideBounds);
          c = "";
          var d = this.b,
            e = so.fromCharCode,
            f = a;
          for (a += b; f < a; )
            if (((b = d[f++]), 128 > b)) {
              if (0 == b) break;
              c += e(b);
            } else if (224 > b) c += e(((b & 63) << 6) | (d[f++] & 127));
            else if (240 > b) {
              var k = d[f++];
              c += e(((b & 31) << 12) | ((k & 127) << 6) | (d[f++] & 127));
            } else {
              k = d[f++];
              var g = d[f++];
              b =
                ((b & 15) << 18) |
                ((k & 127) << 12) |
                ((g & 127) << 6) |
                (d[f++] & 127);
              c += e((b >> 10) + 55232);
              c += e((b & 1023) | 56320);
            }
          return c;
        },
        toString: function () {
          return this.getString(0, this.length);
        },
        __class__: Nb,
      };
      var uo = function () {};
      h["openfl.utils.IDataOutput"] = uo;
      uo.__name__ = "openfl.utils.IDataOutput";
      uo.__isInterface__ = !0;
      var vo = function () {};
      h["openfl.utils.IDataInput"] = vo;
      vo.__name__ = "openfl.utils.IDataInput";
      vo.__isInterface__ = !0;
      var rd = function (a) {
        null == a && (a = 0);
        var b = new Nb(new ArrayBuffer(a));
        Nb.call(this, b.b.buffer);
        this.__allocated = a;
        null == rd.__defaultEndian &&
          (Pc.get_endianness() == ml.LITTLE_ENDIAN
            ? (rd.__defaultEndian = 1)
            : (rd.__defaultEndian = 0));
        this.__endian = rd.__defaultEndian;
        this.objectEncoding = rd.defaultObjectEncoding;
        this.position = 0;
      };
      h["openfl.utils.ByteArrayData"] = rd;
      rd.__name__ = "openfl.utils.ByteArrayData";
      rd.__interfaces__ = [uo, vo];
      rd.fromBytes = function (a) {
        var b = new rd();
        b.__fromBytes(a);
        return b;
      };
      rd.__super__ = Nb;
      rd.prototype = q(Nb.prototype, {
        readByte: function () {
          var a = this.readUnsignedByte();
          return 0 != (a & 128) ? a - 256 : a;
        },
        readInt: function () {
          var a = this.readUnsignedByte(),
            b = this.readUnsignedByte(),
            c = this.readUnsignedByte(),
            d = this.readUnsignedByte();
          return 1 == this.__endian
            ? (d << 24) | (c << 16) | (b << 8) | a
            : (a << 24) | (b << 16) | (c << 8) | d;
        },
        readUnsignedByte: function () {
          if (this.position < this.length) return this.b[this.position++];
          throw new tj();
        },
        readUnsignedInt: function () {
          var a = this.readUnsignedByte(),
            b = this.readUnsignedByte(),
            c = this.readUnsignedByte(),
            d = this.readUnsignedByte();
          return 1 == this.__endian
            ? (d << 24) | (c << 16) | (b << 8) | a
            : (a << 24) | (b << 16) | (c << 8) | d;
        },
        readUnsignedShort: function () {
          var a = this.readUnsignedByte(),
            b = this.readUnsignedByte();
          return 1 == this.__endian ? (b << 8) + a : (a << 8) | b;
        },
        readUTF: function () {
          var a = this.readUnsignedShort();
          return this.readUTFBytes(a);
        },
        readUTFBytes: function (a) {
          if (this.position + a > this.length) throw new tj();
          this.position += a;
          return this.getString(this.position - a, a);
        },
        writeByte: function (a) {
          this.__resize(this.position + 1);
          this.b[this.position++] = a & 255;
        },
        writeBytes: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = 0);
          0 != dg.get_length(a) &&
            (0 == c && (c = dg.get_length(a) - b),
            this.__resize(this.position + c),
            this.blit(this.position, a, b, c),
            (this.position += c));
        },
        writeInt: function (a) {
          this.__resize(this.position + 4);
          1 == this.__endian
            ? ((this.b[this.position++] = a & 255),
              (this.b[this.position++] = (a >> 8) & 255),
              (this.b[this.position++] = (a >> 16) & 255),
              (this.b[this.position++] = (a >> 24) & 255))
            : ((this.b[this.position++] = (a >> 24) & 255),
              (this.b[this.position++] = (a >> 16) & 255),
              (this.b[this.position++] = (a >> 8) & 255),
              (this.b[this.position++] = a & 255));
        },
        writeShort: function (a) {
          this.__resize(this.position + 2);
          1 == this.__endian
            ? ((this.b[this.position++] = a & 255),
              (this.b[this.position++] = (a >> 8) & 255))
            : ((this.b[this.position++] = (a >> 8) & 255),
              (this.b[this.position++] = a & 255));
        },
        writeUnsignedInt: function (a) {
          this.writeInt(a);
        },
        writeUTFBytes: function (a) {
          a = Nb.ofString(a);
          this.writeBytes(dg.fromBytes(a));
        },
        __fromBytes: function (a) {
          this.b = a.b;
          this.__allocated = a.length;
          this.data = a.data;
          this.length = a.length;
        },
        __resize: function (a) {
          if (a > this.__allocated) {
            var b = new Nb(new ArrayBuffer((3 * (a + 1)) >> 1));
            if (0 < this.__allocated) {
              var c = this.length;
              this.length = this.__allocated;
              b.blit(0, this, 0, this.__allocated);
              this.length = c;
            }
            this.b = b.b;
            this.__allocated = b.length;
            this.data = b.data;
          }
          this.length < a && (this.length = a);
        },
        __class__: rd,
      });
      var Zo = {
          getXml: function (a) {
            return "string" == typeof a
              ? aa.exists(a)
                ? oa.parse(aa.getText(a))
                : oa.parse(a)
              : za.__cast(a, oa);
          },
        },
        Fd = function () {};
      h["flixel.system.FlxAssets"] = Fd;
      Fd.__name__ = "flixel.system.FlxAssets";
      Fd.drawLogo = function (a) {
        a.beginFill(47394);
        a.moveTo(50, 13);
        a.lineTo(51, 13);
        a.lineTo(87, 50);
        a.lineTo(87, 51);
        a.lineTo(51, 87);
        a.lineTo(50, 87);
        a.lineTo(13, 51);
        a.lineTo(13, 50);
        a.lineTo(50, 13);
        a.endFill();
        a.beginFill(16761138);
        a.moveTo(0, 0);
        a.lineTo(25, 0);
        a.lineTo(50, 13);
        a.lineTo(13, 50);
        a.lineTo(0, 25);
        a.lineTo(0, 0);
        a.endFill();
        a.beginFill(16066382);
        a.moveTo(100, 0);
        a.lineTo(75, 0);
        a.lineTo(51, 13);
        a.lineTo(87, 50);
        a.lineTo(100, 25);
        a.lineTo(100, 0);
        a.endFill();
        a.beginFill(3555839);
        a.moveTo(0, 100);
        a.lineTo(25, 100);
        a.lineTo(50, 87);
        a.lineTo(13, 51);
        a.lineTo(0, 75);
        a.lineTo(0, 100);
        a.endFill();
        a.beginFill(314875);
        a.moveTo(100, 100);
        a.lineTo(75, 100);
        a.lineTo(51, 87);
        a.lineTo(87, 51);
        a.lineTo(100, 75);
        a.lineTo(100, 100);
        a.endFill();
      };
      Fd.getSound = function (a) {
        K.endsWith(a, ".mp3") ||
          K.endsWith(a, ".ogg") ||
          K.endsWith(a, ".wav") ||
          (a += "." + Fd.defaultSoundExtension);
        return aa.getSound(a);
      };
      var fk = function () {
        F.call(this);
        this.makeGraphic(1, 1, -1, !0, g.bitmap.getUniqueKey("bg_graphic_"));
        var a = this.scrollFactor;
        a.set_x(0);
        a.set_y(0);
      };
      h["flixel.system.FlxBGSprite"] = fk;
      fk.__name__ = "flixel.system.FlxBGSprite";
      fk.__super__ = F;
      fk.prototype = q(F.prototype, {
        draw: function () {
          for (var a = 0, b = this.get_cameras(); a < b.length; ) {
            var c = b[a];
            ++a;
            c.visible &&
              c.exists &&
              (this._matrix.identity(),
              this._matrix.scale(
                c.width - 2 * c.viewMarginX,
                c.height - 2 * c.viewMarginY
              ),
              c.drawPixels(
                this.frame,
                null,
                this._matrix,
                this.colorTransform
              ));
          }
        },
        __class__: fk,
      });
      var $g = function () {
        t.call(this);
        this.addEventListener("addedToStage", n(this, this.onAddedToStage));
      };
      h["flixel.system._FlxBasePreloader.DefaultPreloader"] = $g;
      $g.__name__ = "flixel.system._FlxBasePreloader.DefaultPreloader";
      $g.__super__ = t;
      $g.prototype = q(t.prototype, {
        onAddedToStage: function (a) {
          this.removeEventListener(
            "addedToStage",
            n(this, this.onAddedToStage)
          );
          this.onInit();
          this.onUpdate(
            this.get_loaderInfo().bytesLoaded,
            this.get_loaderInfo().bytesTotal
          );
          this.addEventListener("progress", n(this, this.onProgress));
          this.addEventListener("complete", n(this, this.onComplete));
        },
        onComplete: function (a) {
          a.preventDefault();
          this.removeEventListener("progress", n(this, this.onProgress));
          this.removeEventListener("complete", n(this, this.onComplete));
          this.onLoaded();
        },
        onProgress: function (a) {
          this.onUpdate(a.bytesLoaded | 0, a.bytesTotal | 0);
        },
        onInit: function () {},
        onLoaded: function () {
          this.dispatchEvent(new Ba("unload"));
        },
        onUpdate: function (a, b) {},
        __class__: $g,
      });
      var ah = function (a, b) {
        null == a && (a = 0);
        this._loaded = this._urlChecked = this._destroyed = !1;
        this._percent = 0;
        this.siteLockBodyText =
          "It appears the website you are using is hosting an unauthorized copy of this game. Storage or redistribution of this content, without the express permission of the developer or other copyright holder, is prohibited under copyright law.\n\nThank you for your interest in this game! Please support the developer by visiting the following website to play the game:";
        this.siteLockTitleText = "Sorry.";
        this.minDisplayTime = this.siteLockURLIndex = 0;
        $g.call(this);
        this.minDisplayTime = a;
        this.allowedURLs = null != b ? b : [];
        this._startTime = new Date().getTime();
      };
      h["flixel.system.FlxBasePreloader"] = ah;
      ah.__name__ = "flixel.system.FlxBasePreloader";
      ah.__super__ = $g;
      ah.prototype = q($g.prototype, {
        create: function () {},
        onInit: function () {
          $g.prototype.onInit.call(this);
          sa.get_current().stage.set_scaleMode(2);
          sa.get_current().stage.align = 6;
          this.create();
          this.addEventListener("enterFrame", n(this, this.onEnterFrame));
          this.checkSiteLock();
        },
        onUpdate: function (a, b) {
          this._percent = 0 != b ? a / b : 0;
        },
        onEnterFrame: function (a) {
          a = new Date().getTime() - this._startTime;
          var b = 1e3 * this.minDisplayTime,
            c = this._percent;
          0 < b && this._percent > a / b && (c = a / b);
          this._destroyed || this.update(c);
          this._loaded &&
            (0 >= b || 1 <= a / b) &&
            (this.removeEventListener("enterFrame", n(this, this.onEnterFrame)),
            $g.prototype.onLoaded.call(this),
            this.destroy(),
            (this._destroyed = !0));
        },
        destroy: function () {},
        update: function (a) {},
        onLoaded: function () {
          this._loaded = !0;
          this._percent = 1;
        },
        createBitmap: function (a, b) {
          var c = new lc();
          c.set_bitmapData(
            zb.createInstance(a, [
              0,
              0,
              !0,
              -1,
              function (a) {
                b(c);
              },
            ])
          );
          return c;
        },
        checkSiteLock: function () {
          this._urlChecked ||
            (this.isHostUrlAllowed()
              ? (this._urlChecked = !0)
              : (this.removeChildren(),
                this.removeEventListener(
                  "enterFrame",
                  n(this, this.onEnterFrame)
                ),
                this.createSiteLockFailureScreen()));
        },
        createSiteLockFailureScreen: function () {
          this.addChild(
            this.createSiteLockFailureBackground(16777215, 15066597)
          );
          this.addChild(this.createSiteLockFailureIcon(15066597, 0.9));
          this.addChild(this.createSiteLockFailureText(30));
        },
        createSiteLockFailureBackground: function (a, b) {
          var c = new wg(),
            d = c.get_graphics();
          d.clear();
          var e = new xa();
          e.createGradientBox(1, 1, 0, -0.5, -0.5);
          var f = Math.max(this.stage.stageWidth, this.stage.stageHeight);
          e.scale(f, f);
          e.translate(
            0.5 * this.stage.stageWidth,
            0.5 * this.stage.stageHeight
          );
          d.beginGradientFill(1, [a, b], [1, 1], [0, 255], e);
          d.drawRect(0, 0, this.stage.stageWidth, this.stage.stageHeight);
          d.endFill();
          return c;
        },
        createSiteLockFailureIcon: function (a, b) {
          var c = new wg(),
            d = c.get_graphics();
          d.clear();
          d.beginFill(a);
          a = [
            1, 6, 2, 2, 2, 6, 6, 2, 2, 2, 6, 1, 6, 2, 6, 2, 6, 2, 6, 1, 6, 6, 2,
            2, 2, 6, 6,
          ];
          for (var e = ja.toIntVector(null), f = 0, k = a.length; f < k; ) {
            var g = f++;
            e.set(g, a[g]);
          }
          var l = e;
          a = [
            120, 0, 164, 0, 200, 35, 200, 79, 200, 130, 160, 130, 160, 79, 160,
            57, 142, 40, 120, 40, 97, 40, 79, 57, 79, 79, 80, 130, 40, 130, 40,
            79, 40, 35, 75, 0, 120, 0, 220, 140, 231, 140, 240, 148, 240, 160,
            240, 300, 240, 311, 231, 320, 220, 320, 20, 320, 8, 320, 0, 311, 0,
            300, 0, 160, 0, 148, 8, 140, 20, 140, 120, 190, 108, 190, 100, 198,
            100, 210, 100, 217, 104, 223, 110, 227, 110, 270, 130, 270, 130,
            227, 135, 223, 140, 217, 140, 210, 140, 198, 131, 190, 120, 190,
          ];
          e = ja.toFloatVector(null);
          f = 0;
          for (k = a.length; f < k; ) (g = f++), e.set(g, a[g]);
          d.drawPath(l, e, 1);
          d.endFill();
          d = new xa();
          d.translate(-0.5 * c.get_width(), -0.5 * c.get_height());
          b *= Math.min(
            this.stage.stageWidth / c.get_width(),
            this.stage.stageHeight / c.get_height()
          );
          d.scale(b, b);
          d.translate(
            0.5 * this.stage.stageWidth,
            0.5 * this.stage.stageHeight
          );
          c.get_transform().set_matrix(d);
          return c;
        },
        createSiteLockFailureText: function (a) {
          var b = new t(),
            c = new ha(0, 0, this.stage.stageWidth, this.stage.stageHeight);
          c.inflate(-a, -a);
          a = new Kc();
          var d = new id("_sans", 33, 3355443, !0);
          d.align = 3;
          a.set_defaultTextFormat(d);
          a.set_selectable(!1);
          a.set_width(c.width);
          a.set_text(this.siteLockTitleText);
          d = new Kc();
          var e = new id("_sans", 22, 3355443);
          e.align = 2;
          d.set_defaultTextFormat(e);
          d.set_multiline(!0);
          d.set_wordWrap(!0);
          d.set_selectable(!1);
          d.set_width(c.width);
          d.set_text(this.siteLockBodyText);
          e = new Kc();
          var f = new id("_sans", 22, 7247820, !0, !1, !0);
          f.align = 0;
          f.url = this.allowedURLs[this.siteLockURLIndex];
          e.set_defaultTextFormat(f);
          e.set_selectable(!0);
          e.set_width(c.width);
          e.set_text(this.allowedURLs[this.siteLockURLIndex]);
          this.adjustSiteLockTextFields(a, d, e);
          a.set_height(a.get_textHeight() + 4);
          d.set_height(d.get_textHeight() + 4);
          e.set_height(e.get_textHeight() + 4);
          a.set_x(d.set_x(e.set_x(c.get_left())));
          a.set_y(c.get_top());
          d.set_y(a.get_y() + 2 * a.get_height());
          e.set_y(d.get_y() + d.get_height() + e.get_height());
          b.addChild(a);
          b.addChild(d);
          b.addChild(e);
          return b;
        },
        adjustSiteLockTextFields: function (a, b, c) {},
        isHostUrlAllowed: function () {
          if (0 == this.allowedURLs.length) return !0;
          for (
            var a = Bb.getDomain(H.location.href), b = 0, c = this.allowedURLs;
            b < c.length;

          ) {
            var d = c[b];
            ++b;
            if (Bb.getDomain(d) == a) return !0;
          }
          return !1;
        },
        __class__: ah,
      });
      var Ad = function () {
        this.exists = !0;
      };
      h["flixel.system.FlxLinkedList"] = Ad;
      Ad.__name__ = "flixel.system.FlxLinkedList";
      Ad.__interfaces__ = [U];
      Ad.recycle = function () {
        if (null != Ad._cachedListsHead) {
          var a = Ad._cachedListsHead;
          Ad._cachedListsHead = Ad._cachedListsHead.next;
          Ad._NUM_CACHED_FLX_LIST--;
          a.exists = !0;
          a.next = null;
          return a;
        }
        return new Ad();
      };
      Ad.prototype = {
        destroy: function () {
          this.exists &&
            ((this.object = null),
            null != this.next && this.next.destroy(),
            (this.exists = !1),
            (this.next = Ad._cachedListsHead),
            (Ad._cachedListsHead = this),
            Ad._NUM_CACHED_FLX_LIST++);
        },
        __class__: Ad,
      };
      var bf = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != bf.preload) this.__fromImage(bf.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(bf.resourceName), bf.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == bf.preload && (bf.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.system._FlxPreloader.GraphicLogoLight"] = bf;
      bf.__name__ = "flixel.system._FlxPreloader.GraphicLogoLight";
      bf.__super__ = S;
      bf.prototype = q(S.prototype, { __class__: bf });
      var cf = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != cf.preload) this.__fromImage(cf.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(cf.resourceName), cf.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == cf.preload && (cf.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.system._FlxPreloader.GraphicLogoCorners"] = cf;
      cf.__name__ = "flixel.system._FlxPreloader.GraphicLogoCorners";
      cf.__super__ = S;
      cf.prototype = q(S.prototype, { __class__: cf });
      var Uj = function (a, b) {
        null == a && (a = 0);
        ah.call(this, a, b);
      };
      h["flixel.system.FlxPreloader"] = Uj;
      Uj.__name__ = "flixel.system.FlxPreloader";
      Uj.__super__ = ah;
      Uj.prototype = q(ah.prototype, {
        create: function () {
          var a = this;
          this._buffer = new t();
          this._buffer.set_scaleX(this._buffer.set_scaleY(2));
          this.addChild(this._buffer);
          this._width =
            (sa.get_current().stage.stageWidth / this._buffer.get_scaleX()) | 0;
          this._height =
            (sa.get_current().stage.stageHeight / this._buffer.get_scaleY()) |
            0;
          this._buffer.addChild(
            new lc(new S(this._width, this._height, !1, 13406))
          );
          var b = this.createBitmap(bf, function (b) {
            b.set_width(b.set_height(a._height));
            b.set_x((a._width - b.get_width()) / 2);
          });
          b.smoothing = !0;
          this._buffer.addChild(b);
          this._bmpBar = new lc(new S(1, 7, !1, 6253311));
          this._bmpBar.set_x(4);
          this._bmpBar.set_y(this._height - 11);
          this._buffer.addChild(this._bmpBar);
          this._text = new Kc();
          this._text.set_defaultTextFormat(new id(Fd.FONT_DEFAULT, 8, 6253311));
          this._text.set_embedFonts(!0);
          this._text.set_selectable(!1);
          this._text.set_multiline(!1);
          this._text.set_x(2);
          this._text.set_y(this._bmpBar.get_y() - 11);
          this._text.set_width(200);
          this._buffer.addChild(this._text);
          this._logo = new t();
          Fd.drawLogo(this._logo.get_graphics());
          this._logo.set_scaleX(
            this._logo.set_scaleY((this._height / 8) * 0.04)
          );
          this._logo.set_x((this._width - this._logo.get_width()) / 2);
          this._logo.set_y((this._height - this._logo.get_height()) / 2);
          this._buffer.addChild(this._logo);
          this._logoGlow = new t();
          Fd.drawLogo(this._logoGlow.get_graphics());
          this._logoGlow.set_blendMode(12);
          this._logoGlow.set_scaleX(
            this._logoGlow.set_scaleY((this._height / 8) * 0.04)
          );
          this._logoGlow.set_x((this._width - this._logoGlow.get_width()) / 2);
          this._logoGlow.set_y(
            (this._height - this._logoGlow.get_height()) / 2
          );
          this._buffer.addChild(this._logoGlow);
          b = this.createBitmap(cf, function (b) {
            b.set_width(a._width);
            b.set_height(a.get_height());
          });
          b.smoothing = !0;
          this._buffer.addChild(b);
          b = new lc(new S(this._width, this._height, !1, 16777215));
          for (var c = 0, d = 0; c < this._height; ) {
            for (d = 0; d < this._width; )
              b.get_bitmapData().setPixel(d++, c, 0);
            c += 2;
          }
          b.set_blendMode(11);
          b.set_alpha(0.25);
          this._buffer.addChild(b);
          ah.prototype.create.call(this);
        },
        destroy: function () {
          null != this._buffer && this.removeChild(this._buffer);
          this._logoGlow =
            this._logo =
            this._text =
            this._bmpBar =
            this._buffer =
              null;
          ah.prototype.destroy.call(this);
        },
        update: function (a) {
          this._bmpBar.set_scaleX(a * (this._width - 8));
          this._text.set_text(
            M.string(g.VERSION) + " " + ((100 * a) | 0) + "%"
          );
          0.1 > a
            ? (this._logoGlow.set_alpha(0), this._logo.set_alpha(0))
            : 0.15 > a
            ? (this._logoGlow.set_alpha(Math.random()), this._logo.set_alpha(0))
            : 0.2 > a
            ? (this._logoGlow.set_alpha(0), this._logo.set_alpha(0))
            : 0.25 > a
            ? (this._logoGlow.set_alpha(0), this._logo.set_alpha(Math.random()))
            : 0.7 > a
            ? (this._logoGlow.set_alpha((a - 0.45) / 0.45),
              this._logo.set_alpha(1))
            : 0.8 < a && 0.9 > a
            ? (this._logoGlow.set_alpha(1 - (a - 0.8) / 0.1),
              this._logo.set_alpha(0))
            : 0.9 < a && this._buffer.set_alpha(1 - (a - 0.9) / 0.1);
        },
        __class__: Uj,
      });
      var ve = function (a, b, c, d, e) {
        Ga.call(this);
        var f = a,
          k = b,
          g = c,
          l = d;
        null == l && (l = 0);
        null == g && (g = 0);
        null == k && (k = 0);
        null == f && (f = 0);
        this.x = f;
        this.y = k;
        this.width = g;
        this.height = l;
        this.reset(a, b, c, d, e);
      };
      h["flixel.system.FlxQuadTree"] = ve;
      ve.__name__ = "flixel.system.FlxQuadTree";
      ve.__super__ = Ga;
      ve.prototype = q(Ga.prototype, {
        reset: function (a, b, c, d, e) {
          this.exists = !0;
          null == d && (d = 0);
          null == c && (c = 0);
          null == b && (b = 0);
          null == a && (a = 0);
          this.x = a;
          this.y = b;
          this.width = c;
          this.height = d;
          this._headA = this._tailA = Ad.recycle();
          this._headB = this._tailB = Ad.recycle();
          if (null != e) {
            if (null != e._headA.object)
              for (d = e._headA; null != d; )
                null != this._tailA.object &&
                  ((a = this._tailA),
                  (this._tailA = Ad.recycle()),
                  (a.next = this._tailA)),
                  (this._tailA.object = d.object),
                  (d = d.next);
            if (null != e._headB.object)
              for (d = e._headB; null != d; )
                null != this._tailB.object &&
                  ((a = this._tailB),
                  (this._tailB = Ad.recycle()),
                  (a.next = this._tailB)),
                  (this._tailB.object = d.object),
                  (d = d.next);
          } else
            ve._min = Math.floor(
              (this.width + this.height) / (2 * ve.divisions)
            );
          this._canSubdivide = this.width > ve._min || this.height > ve._min;
          this._southWestTree =
            this._southEastTree =
            this._northEastTree =
            this._northWestTree =
              null;
          this._leftEdge = this.x;
          this._rightEdge = this.x + this.width;
          this._halfWidth = this.width / 2;
          this._midpointX = this._leftEdge + this._halfWidth;
          this._topEdge = this.y;
          this._bottomEdge = this.y + this.height;
          this._halfHeight = this.height / 2;
          this._midpointY = this._topEdge + this._halfHeight;
        },
        destroy: function () {
          this._headA = V.destroy(this._headA);
          this._headB = V.destroy(this._headB);
          this._tailA = V.destroy(this._tailA);
          this._tailB = V.destroy(this._tailB);
          this._northWestTree = V.destroy(this._northWestTree);
          this._northEastTree = V.destroy(this._northEastTree);
          this._southWestTree = V.destroy(this._southWestTree);
          this._southEastTree = V.destroy(this._southEastTree);
          ve._object = null;
          ve._processingCallback = null;
          ve._notifyCallback = null;
          this.exists = !1;
          this.next = ve._cachedTreesHead;
          ve._cachedTreesHead = this;
          ve._NUM_CACHED_QUAD_TREES++;
          Ga.prototype.destroy.call(this);
        },
        __class__: ve,
      });
      var pe = function (a) {
        this._curPart = 0;
        ka.call(this, a);
      };
      h["flixel.system.FlxSplash"] = pe;
      pe.__name__ = "flixel.system.FlxSplash";
      pe.__super__ = ka;
      pe.prototype = q(ka.prototype, {
        create: function () {
          this._cachedBgColor = g.cameras.get_bgColor();
          g.cameras.set_bgColor(-16777216);
          this._cachedTimestep = g.fixedTimestep;
          g.fixedTimestep = !1;
          this._cachedAutoPause = g.autoPause;
          g.autoPause = !1;
          g.keys.enabled = !1;
          this._times = [0.041, 0.184, 0.334, 0.495, 0.636];
          this._colors = [47394, 16761138, 16066382, 3555839, 314875];
          this._functions = [
            n(this, this.drawGreen),
            n(this, this.drawYellow),
            n(this, this.drawRed),
            n(this, this.drawBlue),
            n(this, this.drawLightBlue),
          ];
          for (var a = 0, b = this._times; a < b.length; ) {
            var c = b[a];
            ++a;
            new fc().start(c, n(this, this.timerCallback));
          }
          a = sa.get_current().stage.stageWidth;
          b = sa.get_current().stage.stageHeight;
          this._sprite = new t();
          sa.get_current().stage.addChild(this._sprite);
          this._gfx = this._sprite.get_graphics();
          this._text = new Kc();
          this._text.set_selectable(!1);
          this._text.set_embedFonts(!0);
          c = new id(Fd.FONT_DEFAULT, 16, 16777215);
          c.align = 0;
          this._text.set_defaultTextFormat(c);
          this._text.set_text("HaxeFlixel");
          sa.get_current().stage.addChild(this._text);
          this.onResize(a, b);
          pe.muted || g.sound.load(Fd.getSound("flixel/sounds/flixel")).play();
        },
        destroy: function () {
          this._functions =
            this._colors =
            this._times =
            this._text =
            this._gfx =
            this._sprite =
              null;
          ka.prototype.destroy.call(this);
        },
        onResize: function (a, b) {
          ka.prototype.onResize.call(this, a, b);
          this._sprite.set_x(a / 2);
          this._sprite.set_y(b / 2 - 20 * g.game.get_scaleY());
          this._text.set_width(a / g.game.get_scaleX());
          this._text.set_x(0);
          this._text.set_y(this._sprite.get_y() + 80 * g.game.get_scaleY());
          this._sprite.set_scaleX(this._text.set_scaleX(g.game.get_scaleX()));
          this._sprite.set_scaleY(this._text.set_scaleY(g.game.get_scaleY()));
        },
        timerCallback: function (a) {
          this._functions[this._curPart]();
          this._text.set_textColor(this._colors[this._curPart]);
          this._text.set_text("HaxeFlixel");
          this._curPart++;
          5 == this._curPart &&
            (la.tween(this._sprite, { alpha: 0 }, 3, {
              ease: Aa.quadOut,
              onComplete: n(this, this.onComplete),
            }),
            la.tween(this._text, { alpha: 0 }, 3, { ease: Aa.quadOut }));
        },
        drawGreen: function () {
          this._gfx.beginFill(47394);
          this._gfx.moveTo(0, -37);
          this._gfx.lineTo(1, -37);
          this._gfx.lineTo(37, 0);
          this._gfx.lineTo(37, 1);
          this._gfx.lineTo(1, 37);
          this._gfx.lineTo(0, 37);
          this._gfx.lineTo(-37, 1);
          this._gfx.lineTo(-37, 0);
          this._gfx.lineTo(0, -37);
          this._gfx.endFill();
        },
        drawYellow: function () {
          this._gfx.beginFill(16761138);
          this._gfx.moveTo(-50, -50);
          this._gfx.lineTo(-25, -50);
          this._gfx.lineTo(0, -37);
          this._gfx.lineTo(-37, 0);
          this._gfx.lineTo(-50, -25);
          this._gfx.lineTo(-50, -50);
          this._gfx.endFill();
        },
        drawRed: function () {
          this._gfx.beginFill(16066382);
          this._gfx.moveTo(50, -50);
          this._gfx.lineTo(25, -50);
          this._gfx.lineTo(1, -37);
          this._gfx.lineTo(37, 0);
          this._gfx.lineTo(50, -25);
          this._gfx.lineTo(50, -50);
          this._gfx.endFill();
        },
        drawBlue: function () {
          this._gfx.beginFill(3555839);
          this._gfx.moveTo(-50, 50);
          this._gfx.lineTo(-25, 50);
          this._gfx.lineTo(0, 37);
          this._gfx.lineTo(-37, 1);
          this._gfx.lineTo(-50, 25);
          this._gfx.lineTo(-50, 50);
          this._gfx.endFill();
        },
        drawLightBlue: function () {
          this._gfx.beginFill(314875);
          this._gfx.moveTo(50, 50);
          this._gfx.lineTo(25, 50);
          this._gfx.lineTo(1, 37);
          this._gfx.lineTo(37, 1);
          this._gfx.lineTo(50, 25);
          this._gfx.lineTo(50, 50);
          this._gfx.endFill();
        },
        onComplete: function (a) {
          g.cameras.set_bgColor(this._cachedBgColor);
          g.fixedTimestep = this._cachedTimestep;
          g.autoPause = this._cachedAutoPause;
          g.keys.enabled = !0;
          sa.get_current().stage.removeChild(this._sprite);
          sa.get_current().stage.removeChild(this._text);
          var b = zb.createInstance(pe.nextState, []),
            c = g.game._state;
          qa.field(g.game._state, "switchTo")(b) &&
            g.game._state.startOutro(function () {
              g.game._state == c
                ? (g.game._requestedState = b)
                : g.log.advanced(
                    "`onOutroComplete` was called after the state was switched. This will be ignored",
                    Ja.WARNING,
                    !0
                  );
            });
          g.game._gameJustStarted = !0;
        },
        __class__: pe,
      });
      var eg = function () {};
      h["flixel.system.debug.DebuggerUtil"] = eg;
      eg.__name__ = "flixel.system.debug.DebuggerUtil";
      eg.createTextField = function (a, b, c, d) {
        null == d && (d = 12);
        null == c && (c = -1);
        null == b && (b = 0);
        null == a && (a = 0);
        return eg.initTextField(new Kc(), a, b, c, d);
      };
      eg.initTextField = function (a, b, c, d, e) {
        null == e && (e = 12);
        null == d && (d = -1);
        null == c && (c = 0);
        null == b && (b = 0);
        a.set_x(b);
        a.set_y(c);
        a.set_multiline(!1);
        a.set_wordWrap(!1);
        a.set_embedFonts(!0);
        a.set_selectable(!1);
        a.set_defaultTextFormat(new id(Fd.FONT_DEBUGGER, e, d & 16777215));
        a.set_alpha(((d >> 24) & 255) / 255);
        a.set_autoSize(1);
        return a;
      };
      eg.fixSize = function (a) {
        qa.setProperty(a, "width", 11);
        qa.setProperty(a, "height", 11);
        return a;
      };
      var Cf = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != Cf.preload) this.__fromImage(Cf.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(Cf.resourceName), Cf.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == Cf.preload && (Cf.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.system.debug._FlxDebugger.GraphicFlixel"] = Cf;
      Cf.__name__ = "flixel.system.debug._FlxDebugger.GraphicFlixel";
      Cf.__super__ = S;
      Cf.prototype = q(S.prototype, { __class__: Cf });
      var Df = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != Df.preload) this.__fromImage(Df.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(Df.resourceName), Df.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == Df.preload && (Df.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.system.debug._FlxDebugger.GraphicDrawDebug"] = Df;
      Df.__name__ = "flixel.system.debug._FlxDebugger.GraphicDrawDebug";
      Df.__super__ = S;
      Df.prototype = q(S.prototype, { __class__: Df });
      var Ef = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != Ef.preload) this.__fromImage(Ef.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(Ef.resourceName), Ef.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == Ef.preload && (Ef.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.system.debug.GraphicLog"] = Ef;
      Ef.__name__ = "flixel.system.debug.GraphicLog";
      Ef.__super__ = S;
      Ef.prototype = q(S.prototype, { __class__: Ef });
      var Ff = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != Ff.preload) this.__fromImage(Ff.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(Ff.resourceName), Ff.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == Ff.preload && (Ff.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.system.debug.GraphicStats"] = Ff;
      Ff.__name__ = "flixel.system.debug.GraphicStats";
      Ff.__super__ = S;
      Ff.prototype = q(S.prototype, { __class__: Ff });
      var Gf = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != Gf.preload) this.__fromImage(Gf.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(Gf.resourceName), Gf.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == Gf.preload && (Gf.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.system.debug.GraphicWatch"] = Gf;
      Gf.__name__ = "flixel.system.debug.GraphicWatch";
      Gf.__super__ = S;
      Gf.prototype = q(S.prototype, { __class__: Gf });
      var Hf = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != Hf.preload) this.__fromImage(Hf.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(Hf.resourceName), Hf.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == Hf.preload && (Hf.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.system.debug.GraphicBitmapLog"] = Hf;
      Hf.__name__ = "flixel.system.debug.GraphicBitmapLog";
      Hf.__super__ = S;
      Hf.prototype = q(S.prototype, { __class__: Hf });
      var If = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != If.preload) this.__fromImage(If.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(If.resourceName), If.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == If.preload && (If.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.system.debug.GraphicConsole"] = If;
      If.__name__ = "flixel.system.debug.GraphicConsole";
      If.__super__ = S;
      If.prototype = q(S.prototype, { __class__: If });
      var Jf = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != Jf.preload) this.__fromImage(Jf.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(Jf.resourceName), Jf.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == Jf.preload && (Jf.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.system.debug.GraphicArrowLeft"] = Jf;
      Jf.__name__ = "flixel.system.debug.GraphicArrowLeft";
      Jf.__super__ = S;
      Jf.prototype = q(S.prototype, { __class__: Jf });
      var Kf = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != Kf.preload) this.__fromImage(Kf.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(Kf.resourceName), Kf.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == Kf.preload && (Kf.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.system.debug.GraphicArrowRight"] = Kf;
      Kf.__name__ = "flixel.system.debug.GraphicArrowRight";
      Kf.__super__ = S;
      Kf.prototype = q(S.prototype, { __class__: Kf });
      var df = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != df.preload) this.__fromImage(df.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(df.resourceName), df.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == df.preload && (df.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.system.debug.GraphicCloseButton"] = df;
      df.__name__ = "flixel.system.debug.GraphicCloseButton";
      df.__super__ = S;
      df.prototype = q(S.prototype, { __class__: df });
      var ef = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != ef.preload) this.__fromImage(ef.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(ef.resourceName), ef.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == ef.preload && (ef.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.system.debug.GraphicInteractive"] = ef;
      ef.__name__ = "flixel.system.debug.GraphicInteractive";
      ef.__super__ = S;
      ef.prototype = q(S.prototype, { __class__: ef });
      var nl = function () {
        t.call(this);
      };
      h["flixel.system.debug.FlxDebugger"] = nl;
      nl.__name__ = "flixel.system.debug.FlxDebugger";
      nl.__super__ = t;
      nl.prototype = q(t.prototype, { __class__: nl });
      var gi = function () {};
      h["flixel.system.debug.Tooltip"] = gi;
      gi.__name__ = "flixel.system.debug.Tooltip";
      gi.add = function (a, b) {
        a = new ol(a, b);
        gi._container.addChild(a);
        gi._tooltips.push(a);
        return a;
      };
      var ol = function (a, b, c, d) {
        null == d && (d = 0);
        null == c && (c = 0);
        t.call(this);
        this.owner = a;
        this.maxSize = new gb(c, d);
        this._shadow = new lc(new S(1, 2, !0, -16777216));
        this._background = new lc(new S(1, 1, !0, -12961222));
        this.textField = eg.createTextField(2, 1);
        this.textField.set_alpha(0.8);
        this.textField.set_text(b);
        this.textField.set_wordWrap(!0);
        this.addChild(this._shadow);
        this.addChild(this._background);
        this.addChild(this.textField);
        this.updateSize();
        this.setVisible(!1);
        null != this.owner &&
          (this.owner.addEventListener(
            "mouseOver",
            n(this, this.handleMouseEvents)
          ),
          this.owner.addEventListener(
            "mouseOut",
            n(this, this.handleMouseEvents)
          ));
      };
      h["flixel.system.debug.TooltipOverlay"] = ol;
      ol.__name__ = "flixel.system.debug.TooltipOverlay";
      ol.__super__ = t;
      ol.prototype = q(t.prototype, {
        setVisible: function (a) {
          this.set_visible(a);
          this.get_visible() &&
            (this.parent.addChild(this), this.ensureOnScreen());
        },
        updateSize: function () {
          this._width =
            ((0 >= this.maxSize.x
              ? this.textField.get_textWidth()
              : Math.abs(this.maxSize.x)) |
              0) +
            8;
          this._height =
            ((0 >= this.maxSize.y
              ? this.textField.get_textHeight()
              : Math.abs(this.maxSize.y)) |
              0) +
            8;
          this._background.set_scaleX(this._width);
          this._background.set_scaleY(this._height);
          this._shadow.set_scaleX(this._width);
          this._shadow.set_y(this._height);
          this.textField.set_width(this._width);
        },
        ensureOnScreen: function () {
          this.set_x(0 > this.get_x() ? 0 : this.get_x());
          this.set_y(0 > this.get_y() ? 0 : this.get_y());
          var a =
              this.get_x() + this.get_width() >=
              sa.get_current().stage.stageWidth
                ? sa.get_current().stage.stageWidth -
                  (this.get_x() + this.get_width())
                : 0,
            b =
              this.get_y() + this.get_height() >=
              sa.get_current().stage.stageHeight
                ? sa.get_current().stage.stageHeight -
                  (this.get_y() + this.get_height())
                : 0;
          this.set_x(this.get_x() + a);
          this.set_y(this.get_y() + b);
        },
        handleMouseEvents: function (a) {
          "mouseOver" != a.type || this.get_visible()
            ? "mouseOut" == a.type && this.setVisible(!1)
            : (this.set_x(a.stageX + 10),
              this.set_y(a.stageY + 10),
              this.setVisible(!0));
        },
        __class__: ol,
      });
      var ff = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != ff.preload) this.__fromImage(ff.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(ff.resourceName), ff.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == ff.preload && (ff.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.system.debug._Window.GraphicWindowHandle"] = ff;
      ff.__name__ = "flixel.system.debug._Window.GraphicWindowHandle";
      ff.__super__ = S;
      ff.prototype = q(S.prototype, { __class__: ff });
      var Ke = function (a, b, c, d, e, f, k, g) {
        null == g && (g = !0);
        null == k && (k = !1);
        null == e && (e = !0);
        null == d && (d = 0);
        null == c && (c = 0);
        t.call(this);
        this.minSize = new gb(50, 30);
        this._width = Math.abs(c) | 0;
        this._height = Math.abs(d) | 0;
        this.updateBounds(f);
        this._drag = new gb();
        this._resizable = e;
        this._closable = k;
        this._alwaysOnTop = g;
        this._shadow = new lc(new S(1, 2, !0, -16777216));
        this._background = new lc(new S(1, 1, !0, -580952225));
        this._header = new lc(new S(1, 15, !0, -1157627904));
        this._background.set_y(this._header.get_height());
        this._title = eg.createTextField(2, -1);
        this._title.set_alpha(0.8);
        this._title.set_text(a);
        this.addChild(this._shadow);
        this.addChild(this._background);
        this.addChild(this._header);
        this.addChild(this._title);
        null != b &&
          (eg.fixSize(b),
          (this._icon = new lc(b)),
          this._icon.set_x(5),
          this._icon.set_y(2),
          this._icon.set_alpha(0.8),
          this._title.set_x(this._icon.get_x() + this._icon.get_width() + 2),
          this.addChild(this._icon));
        this._resizable &&
          ((this._handle = new lc(eg.fixSize(new ff(0, 0)))),
          this.addChild(this._handle));
        this._closable
          ? ((this._closeButton = new hi(new df(0, 0), n(this, this.close))),
            this._closeButton.set_alpha(0.8),
            this.addChild(this._closeButton))
          : ((this._id = Ke.windowAmount),
            this.loadSaveData(),
            Ke.windowAmount++);
        (0 == this._width && 0 == this._height) || this.updateSize();
        this.bound();
        this.addEventListener("enterFrame", n(this, this.init));
      };
      h["flixel.system.debug.Window"] = Ke;
      Ke.__name__ = "flixel.system.debug.Window";
      Ke.__super__ = t;
      Ke.prototype = q(t.prototype, {
        destroy: function () {
          this._bounds = this.maxSize = this.minSize = null;
          null != this._shadow && this.removeChild(this._shadow);
          this._shadow = null;
          null != this._background && this.removeChild(this._background);
          this._background = null;
          null != this._header && this.removeChild(this._header);
          this._header = null;
          null != this._title && this.removeChild(this._title);
          this._title = null;
          null != this._handle && this.removeChild(this._handle);
          this._drag = this._handle = null;
          this._closeButton = V.destroy(this._closeButton);
          var a = sa.get_current().stage;
          a.hasEventListener("mouseMove") &&
            a.removeEventListener("mouseMove", n(this, this.onMouseMove));
          this.hasEventListener("mouseDown") &&
            this.removeEventListener("mouseDown", n(this, this.onMouseDown));
          a.hasEventListener("mouseUp") &&
            a.removeEventListener("mouseUp", n(this, this.onMouseUp));
        },
        resize: function (a, b) {
          this._width = Math.abs(a) | 0;
          this._height = Math.abs(b) | 0;
          this.updateSize();
        },
        reposition: function (a, b) {
          this.set_x(a);
          this.set_y(b);
          this.bound();
        },
        updateBounds: function (a) {
          this._bounds = a;
          this.maxSize =
            null != this._bounds
              ? new gb(this._bounds.width, this._bounds.height)
              : new gb(1.79e308, 1.79e308);
        },
        loadSaveData: function () {
          1 == g.save.status._hx_index &&
            (null == g.save.data.windowSettings &&
              (this.initWindowsSave(), g.save.flush()),
            this.set_visible(g.save.data.windowSettings[this._id]));
        },
        initWindowsSave: function () {
          for (var a = [], b = 0; 10 > b; ) b++, a.push(!0);
          g.save.data.windowSettings = a;
        },
        init: function (a) {
          null != this.stage &&
            (this.removeEventListener("enterFrame", n(this, this.init)),
            this.stage.addEventListener("mouseMove", n(this, this.onMouseMove)),
            this.stage.addEventListener("mouseUp", n(this, this.onMouseUp)),
            this.addEventListener("mouseDown", n(this, this.onMouseDown)));
        },
        onMouseMove: function (a) {
          a = 0 > this.get_mouseX() ? 0 : this.get_mouseX();
          var b = 0 > this.get_mouseY() ? 0 : this.get_mouseY();
          this.parent.get_visible()
            ? this._dragging
              ? ((this._overHeader = !0),
                this.reposition(
                  this.parent.get_mouseX() - this._drag.x,
                  this.parent.get_mouseY() - this._drag.y
                ))
              : this._resizing
              ? ((this._overHandle = !0),
                this.resize(a - this._drag.x, b - this._drag.y))
              : 0 <= a && a <= this._width && 0 <= b && b <= this._height
              ? ((this._overHeader =
                  a <= this._header.get_width() &&
                  b <= this._header.get_height()),
                this._resizable &&
                  (this._overHandle =
                    a >= this._width - this._handle.get_width() &&
                    b >= this._height - this._handle.get_height()))
              : (this._overHandle = this._overHeader = !1)
            : (this._overHandle = this._overHeader = !1);
        },
        onMouseDown: function (a) {
          if (this._overHeader)
            this._alwaysOnTop && this.parent.addChild(this),
              (this._dragging = !0),
              (this._drag.x = this.get_mouseX()),
              (this._drag.y = this.get_mouseY());
          else if (this._overHandle) {
            this._alwaysOnTop && this.parent.addChild(this);
            this._resizing = !0;
            a = this._width;
            var b = this.get_mouseX();
            this._drag.x = a - b;
            a = this._height;
            b = this.get_mouseY();
            this._drag.y = a - b;
          }
        },
        onMouseUp: function (a) {
          this._resizing = this._dragging = !1;
        },
        bound: function () {
          if (null != this._bounds) {
            var a = this.get_x(),
              b = this._bounds.get_left(),
              c = this._bounds.get_right() - this._width;
            a = null != b && a < b ? b : a;
            this.set_x(null != c && a > c ? c : a);
            a = this.get_y();
            b = this._bounds.get_top();
            c = this._bounds.get_bottom() - this._height;
            a = null != b && a < b ? b : a;
            this.set_y(null != c && a > c ? c : a);
          }
        },
        updateSize: function () {
          var a = this._width,
            b = this.minSize.x,
            c = this.maxSize.x;
          a = null != b && a < b ? b : a;
          this._width = (null != c && a > c ? c : a) | 0;
          a = this._height;
          b = this.minSize.y;
          c = this.maxSize.y;
          a = null != b && a < b ? b : a;
          this._height = (null != c && a > c ? c : a) | 0;
          this._header.set_scaleX(this._width);
          this._background.set_scaleX(this._width);
          this._background.set_scaleY(this._height - this._header.get_height());
          this._shadow.set_scaleX(this._width);
          this._shadow.set_y(this._height);
          this._title.set_width(this._width - 4);
          this._resizable &&
            (this._handle.set_x(this._width - this._handle.get_width()),
            this._handle.set_y(this._height - this._handle.get_height()));
          null != this._closeButton &&
            (this._closeButton.set_x(
              this._width - this._closeButton.get_width() - 3
            ),
            this._closeButton.set_y(3));
        },
        close: function () {
          this.destroy();
        },
        __class__: Ke,
      });
      var Cn = function (a) {
        this.selectedIndex =
          this.lowerVisibleIndex =
          this.upperVisibleIndex =
            0;
        this.entries = [];
        t.call(this);
        this.set_visible(!1);
        this.upperVisibleIndex = a - 1;
        this.actualHeight = 20 * a;
        this.createPopupEntries(a);
        this.createScrollBar();
        this.updateSelectedItem();
        sa.get_current().stage.addEventListener(
          "keyDown",
          n(this, this.onKeyDown)
        );
      };
      h["flixel.system.debug.completion.CompletionList"] = Cn;
      Cn.__name__ = "flixel.system.debug.completion.CompletionList";
      Cn.__super__ = t;
      Cn.prototype = q(t.prototype, {
        close: function () {
          this.set_visible(!1);
          this.set_filter(null);
          null != this.closed && this.closed();
        },
        createPopupEntries: function (a) {
          for (var b = 0; b < a; ) {
            var c = b++,
              d = new Lf();
            this.entries.push(d);
            this.addChild(d);
            d.set_y(20 * c);
          }
        },
        createScrollBar: function () {
          this.scrollBar = new pl(150, 0, 5, this.actualHeight);
          this.addChild(this.scrollBar);
        },
        onKeyDown: function (a) {
          if (this.get_visible()) {
            switch (a.keyCode) {
              case 13:
                null != this.completed &&
                  this.completed(this.items[this.selectedIndex]);
                this.close();
                return;
              case 27:
                this.close();
                return;
              case 38:
                this.updateIndices(-1);
                break;
              case 40:
                this.updateIndices(1);
            }
            this.updateEntries();
          }
        },
        updateIndices: function (a) {
          var b = (this.selectedIndex = this.bound(this.selectedIndex + a)),
            c = this.lowerVisibleIndex,
            d = this.upperVisibleIndex;
          ((null == c || b >= c) && (null == d || b <= d)) ||
            ((this.lowerVisibleIndex = this.bound(this.lowerVisibleIndex + a)),
            (this.upperVisibleIndex = this.bound(this.upperVisibleIndex + a)),
            this.upperVisibleIndex - this.lowerVisibleIndex !=
              this.items.length &&
              (0 == this.lowerVisibleIndex
                ? (this.upperVisibleIndex = this.entries.length - 1)
                : this.upperVisibleIndex == this.items.length - 1 &&
                  (this.lowerVisibleIndex =
                    this.items.length - this.entries.length)));
        },
        bound: function (a) {
          var b = this.items.length - 1;
          a = 0 > a ? 0 : a;
          return (null != b && a > b ? b : a) | 0;
        },
        updateEntries: function () {
          this.updateLabels();
          this.updateSelectedItem();
          this.scrollBar.updateHandle(
            this.lowerVisibleIndex,
            this.items.length,
            this.entries.length
          );
        },
        updateLabels: function () {
          for (var a = 0, b = this.entries.length; a < b; ) {
            var c = a++,
              d = this.items[this.lowerVisibleIndex + c];
            null == d && (d = "");
            this.entries[c].setItem(d);
          }
        },
        updateSelectedItem: function () {
          for (var a = 0, b = this.entries; a < b.length; ) {
            var c = b[a];
            ++a;
            c.set_selected(!1);
          }
          this.entries[
            this.selectedIndex - this.lowerVisibleIndex
          ].set_selected(!0);
          null != this.selectionChanged &&
            this.selectionChanged(this.items[this.selectedIndex]);
        },
        setItems: function (a) {
          null != a &&
            (0 == a.length && this.close(),
            (this.items = a),
            (this.lowerVisibleIndex = this.selectedIndex = 0),
            (this.upperVisibleIndex = this.entries.length - 1),
            this.updateEntries());
        },
        filterItems: function (a) {
          null == a && (a = "");
          for (var b = [], c = 0, d = this.originalItems; c < d.length; ) {
            var e = d[c];
            ++c;
            -1 != e.toLowerCase().indexOf(a.toLowerCase()) && b.push(e);
          }
          return this.sortItems(a, b);
        },
        sortItems: function (a, b) {
          var c = this;
          if ("" == a) return b;
          b.sort(function (b, e) {
            var d = c.startsWithExt(b, a),
              k = c.startsWithExt(e, a);
            return d > k
              ? -d
              : k > d
              ? k
              : d == k
              ? (b.length - e.length) | 0
              : 0;
          });
          return b;
        },
        startsWithExt: function (a, b) {
          return K.startsWith(a, b)
            ? 2
            : K.startsWith(a.replace(/^[_]+/, ""), b)
            ? 1
            : 0;
        },
        set_filter: function (a) {
          if (a == this.filter) return a;
          this.setItems(this.filterItems(a));
          return (this.filter = a);
        },
        __class__: Cn,
        __properties__: q(t.prototype.__properties__, {
          set_filter: "set_filter",
        }),
      });
      var Lf = function () {
        this.selected = !1;
        t.call(this);
        this.initBitmapDatas();
        this.addChild((this.background = new lc()));
        this.background.set_bitmapData(Lf.normalBitmapData);
        this.label = eg.createTextField();
        this.label.set_x(4);
        this.addChild(this.label);
      };
      h["flixel.system.debug.completion.CompletionListEntry"] = Lf;
      Lf.__name__ = "flixel.system.debug.completion.CompletionListEntry";
      Lf.__super__ = t;
      Lf.prototype = q(t.prototype, {
        initBitmapDatas: function () {
          null == Lf.normalBitmapData &&
            (Lf.normalBitmapData = new S(150, 20, !0, -10526881));
          null == Lf.highlightBitmapData &&
            (Lf.highlightBitmapData = new S(150, 20, !0, -9605779));
        },
        setItem: function (a) {
          this.label.set_text(a);
          150 < this.label.get_width() &&
            (this.label.set_width(150), this.label.set_autoSize(2));
        },
        set_selected: function (a) {
          if (a == this.selected) return a;
          this.background.set_bitmapData(
            a ? Lf.highlightBitmapData : Lf.normalBitmapData
          );
          return (this.selected = a);
        },
        __class__: Lf,
        __properties__: q(t.prototype.__properties__, {
          set_selected: "set_selected",
        }),
      });
      var pl = function (a, b, c, d) {
        t.call(this);
        this.set_x(a);
        this.set_y(b);
        this.addChild(new lc(new S(c, d, !0, -12303292)));
        this.handle = new lc(new S(c, 1, !0, -14540254));
        this.addChild(this.handle);
      };
      h["flixel.system.debug.completion.CompletionListScrollBar"] = pl;
      pl.__name__ = "flixel.system.debug.completion.CompletionListScrollBar";
      pl.__super__ = t;
      pl.prototype = q(t.prototype, {
        updateHandle: function (a, b, c) {
          this.handle.set_scaleY(
            Math.min((this.get_height() / b) * c, this.get_height())
          );
          this.handle.set_y((this.get_height() / b) * a);
          a = this.handle;
          c = this.handle.get_y();
          b = this.get_height() - this.handle.get_scaleY();
          c = 0 > c ? 0 : c;
          a.set_y(null != b && c > b ? b : c);
        },
        __class__: pl,
      });
      var Dn = function (a) {
        this._flixelPointer = new Yc();
        this._debuggerInteraction = !1;
        this._keysUp = new kc();
        this._keysDown = new kc();
        this._turn = 2;
        this._tools = [];
        this.shouldDrawItemsSelection = !0;
        this.pointerJustPressed =
          this.pointerJustReleased =
          this.pointerPressed =
            !1;
        this.flixelPointer = new ba(0, 0);
        this.selectedItems = new ma();
        Ke.call(this, "Tools", new ef(0, 0), 40, 25, !1);
        this.reposition(2, 100);
        this._container = a;
        this._customCursor = new t();
        this._customCursor.mouseEnabled = !1;
        this._container.addChild(this._customCursor);
        this.addTool(new ql());
        this.addTool(new rl());
        this.addTool(new sl());
        this.addTool(new tl());
        g.signals.postDraw.add(n(this, this.postDraw));
        g.debugger.visibilityChanged.add(
          n(this, this.handleDebuggerVisibilityChanged)
        );
        sa.get_current().stage.addEventListener(
          "mouseMove",
          n(this, this.updateMouse)
        );
        sa.get_current().stage.addEventListener(
          "mouseDown",
          n(this, this.handleMouseClick)
        );
        sa.get_current().stage.addEventListener(
          "mouseUp",
          n(this, this.handleMouseClick)
        );
        sa.get_current().stage.addEventListener(
          "keyDown",
          n(this, this.handleKeyEvent)
        );
        sa.get_current().stage.addEventListener(
          "keyUp",
          n(this, this.handleKeyEvent)
        );
        this._container.addEventListener(
          "mouseOver",
          n(this, this.handleMouseInDebugger)
        );
        this._container.addEventListener(
          "mouseOut",
          n(this, this.handleMouseInDebugger)
        );
      };
      h["flixel.system.debug.interaction.Interaction"] = Dn;
      Dn.__name__ = "flixel.system.debug.interaction.Interaction";
      Dn.__super__ = Ke;
      Dn.prototype = q(Ke.prototype, {
        handleDebuggerVisibilityChanged: function () {
          g.debugger.visible
            ? this.saveSystemCursorInfo()
            : this.restoreSystemCursor();
        },
        updateMouse: function (a) {
          if (null != a.stageX && null != a.stageY) {
            var b = 0,
              c = 0;
            if (null != this.activeTool) {
              var d = this.activeTool.cursor;
              null != d &&
                ((b = d.width / g.scaleMode.scale.x / 2),
                (c = d.height / g.scaleMode.scale.y / 2));
            }
            this._customCursor.set_x(a.stageX + b);
            this._customCursor.set_y(a.stageY + c);
            d = this._flixelPointer;
            d._globalScreenX = (a.stageX / g.scaleMode.scale.x) | 0;
            d._globalScreenY = (a.stageY / g.scaleMode.scale.y) | 0;
            d.updatePositions();
            this.flixelPointer.set_x(this._flixelPointer.x + b);
            this.flixelPointer.set_y(this._flixelPointer.y + c);
          }
        },
        handleMouseClick: function (a) {
          ("mouseDown" == a.type && this.belongsToDebugger(a.target)) ||
            ((this.pointerJustPressed = "mouseDown" == a.type),
            (this.pointerJustReleased = "mouseUp" == a.type),
            this.pointerJustPressed
              ? (this.pointerPressed = !0)
              : this.pointerJustReleased && (this.pointerPressed = !1));
        },
        belongsToDebugger: function (a) {
          return null == a
            ? !1
            : a instanceof nl
            ? !0
            : this.belongsToDebugger(a.parent);
        },
        handleMouseInDebugger: function (a) {
          this.isActive() &&
            ("mouseOver" == a.type
              ? (this._debuggerInteraction = !0)
              : "mouseOut" == a.type && (this._debuggerInteraction = !1),
            a.stopPropagation());
        },
        handleKeyEvent: function (a) {
          "keyDown" == a.type
            ? (this._keysDown.h[a.keyCode] = !0)
            : "keyUp" == a.type &&
              ((this._keysDown.h[a.keyCode] = !1),
              (this._keysUp.h[a.keyCode] = this._turn));
        },
        countToolsWithUIButton: function () {
          for (var a = 0, b = 0, c = this._tools; b < c.length; ) {
            var d = c[b];
            ++b;
            null != d.button && ++a;
          }
          return a;
        },
        addTool: function (a) {
          a.init(this);
          this._tools.push(a);
          a = a.button;
          if (null != a) {
            var b = this.countToolsWithUIButton(),
              c = Math.ceil(b / 2);
            a.set_x(10 + ((b - 1) % 2) * 25);
            a.set_y(20 * c);
            this.addChild(a);
            this.resize(25 * Math.min(b, 2) + 10, 25 * Math.ceil(b / 2) + 10);
          }
        },
        destroy: function () {
          g.signals.postDraw.remove(n(this, this.postDraw));
          g.debugger.visibilityChanged.remove(
            n(this, this.handleDebuggerVisibilityChanged)
          );
          sa.get_current().stage.removeEventListener(
            "mouseMove",
            n(this, this.updateMouse)
          );
          sa.get_current().stage.removeEventListener(
            "mouseDown",
            n(this, this.handleMouseClick)
          );
          sa.get_current().stage.removeEventListener(
            "mouseUp",
            n(this, this.handleMouseClick)
          );
          sa.get_current().stage.removeEventListener(
            "keyDown",
            n(this, this.handleKeyEvent)
          );
          sa.get_current().stage.removeEventListener(
            "keyUp",
            n(this, this.handleKeyEvent)
          );
          null != this._container &&
            (this._container.removeEventListener(
              "mouseOver",
              n(this, this.handleMouseInDebugger)
            ),
            this._container.removeEventListener(
              "mouseOut",
              n(this, this.handleMouseInDebugger)
            ));
          null != this._customCursor &&
            (this._customCursor.parent.removeChild(this._customCursor),
            (this._customCursor = null));
          this._tools = V.destroyArray(this._tools);
          this.selectedItems = V.destroy(this.selectedItems);
          this.flixelPointer = V.destroy(this.flixelPointer);
          this._keysUp = this._keysDown = null;
        },
        isActive: function () {
          return g.debugger.visible ? this.get_visible() : !1;
        },
        postDraw: function () {
          if (this.isActive()) {
            for (var a = 0, b = this._tools; a < b.length; ) {
              var c = b[a];
              ++a;
              c.draw();
            }
            this.shouldDrawItemsSelection && this.drawItemsSelection();
          }
        },
        getDebugGraphics: function () {
          return g.renderBlit ? (wd.flashGfx.clear(), wd.flashGfx) : null;
        },
        drawItemsSelection: function () {
          var a = this.getDebugGraphics();
          if (null != a) {
            for (
              var b = new Mg(this.selectedItems.members, null);
              b.hasNext();

            ) {
              var c = b.next();
              null != c &&
                null != c.scrollFactor &&
                c.isOnScreen() &&
                (a.lineStyle(0.9, 16711680),
                a.drawRect(
                  c.x - g.camera.scroll.x,
                  c.y - g.camera.scroll.y,
                  c.get_width(),
                  c.get_height()
                ));
            }
            g.renderBlit && g.camera.buffer.draw(wd.flashGfxSprite);
          }
        },
        registerCustomCursor: function (a, b) {
          if (null != b) {
            var c = new t();
            c.set_visible(!1);
            c.set_name(a);
            c.addChild(new lc(b));
            this._customCursor.addChild(c);
          }
        },
        updateCustomCursors: function () {
          if (null == this.activeTool || this._debuggerInteraction)
            g.mouse.set_useSystemCursor(!0);
          else if (null != this.activeTool.cursor) {
            for (
              var a =
                  "" == this.activeTool.cursorInUse
                    ? this.activeTool.getName()
                    : this.activeTool.cursorInUse,
                b = 0,
                c = this._customCursor.get_numChildren();
              b < c;

            ) {
              var d = b++;
              d = this._customCursor.getChildAt(d);
              d.set_visible(d.get_name() == a);
            }
            g.mouse.visible && g.mouse.set_visible(!1);
          } else g.mouse.set_useSystemCursor(!0);
        },
        saveSystemCursorInfo: function () {
          this._wasMouseVisible = g.mouse.visible;
          this._wasUsingSystemCursor = g.mouse.useSystemCursor;
        },
        restoreSystemCursor: function () {
          g.mouse.set_useSystemCursor(this._wasUsingSystemCursor);
          g.mouse.set_visible(this._wasMouseVisible);
          this._customCursor.set_visible(!1);
        },
        setActiveTool: function (a) {
          null != this.activeTool &&
            (this.activeTool.deactivate(),
            this.activeTool.button.set_toggled(!0));
          this.activeTool == a && (a = null);
          this.activeTool = a;
          null != this.activeTool
            ? (this.setToolsCursorVisibility(!0),
              this.activeTool.button.set_toggled(!1),
              this.activeTool.activate(),
              this.updateCustomCursors())
            : this.setSystemCursorVisibility(!0);
          g.mouse.enabled = !this.isInUse();
        },
        setSystemCursorVisibility: function (a) {
          g.mouse.set_useSystemCursor(a);
          this._customCursor.set_visible(!a);
        },
        setToolsCursorVisibility: function (a) {
          g.mouse.set_useSystemCursor(!1);
          this._customCursor.set_visible(a);
          if (!a) {
            a = 0;
            for (var b = this._customCursor.get_numChildren(); a < b; ) {
              var c = a++;
              this._customCursor.getChildAt(c).set_visible(!1);
            }
          }
        },
        keyPressed: function (a) {
          return this._keysDown.h[a];
        },
        isInUse: function () {
          return g.debugger.visible && this.get_visible()
            ? null != this.activeTool
            : !1;
        },
        __class__: Dn,
      });
      var Mf = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != Mf.preload) this.__fromImage(Mf.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(Mf.resourceName), Mf.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == Mf.preload && (Mf.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.system.debug.interaction.tools._Eraser.GraphicEraserTool"] = Mf;
      Mf.__name__ =
        "flixel.system.debug.interaction.tools._Eraser.GraphicEraserTool";
      Mf.__super__ = S;
      Mf.prototype = q(S.prototype, { __class__: Mf });
      var ld = function () {
        this._name = "(Unknown tool)";
        this.cursorInUse = "";
        t.call(this);
      };
      h["flixel.system.debug.interaction.tools.Tool"] = ld;
      ld.__name__ = "flixel.system.debug.interaction.tools.Tool";
      ld.__interfaces__ = [U];
      ld.__super__ = t;
      ld.prototype = q(t.prototype, {
        init: function (a) {
          this._brain = a;
          return this;
        },
        draw: function () {},
        activate: function () {},
        deactivate: function () {},
        destroy: function () {},
        isActive: function () {
          return this._brain.activeTool == this
            ? this._brain.get_visible()
            : !1;
        },
        setButton: function (a) {
          this.button = new hi(
            zb.createInstance(a, [0, 0]),
            n(this, this.onButtonClicked),
            !0
          );
          this.button.set_toggled(!0);
          a = this._name;
          null != this._shortcut && (a += " (" + this._shortcut + ")");
          gi.add(this.button, a);
        },
        setCursor: function (a) {
          this.cursor = a;
          this._brain.registerCustomCursor(this._name, this.cursor);
        },
        onButtonClicked: function () {
          this._brain.setActiveTool(this);
        },
        getName: function () {
          return this._name;
        },
        __class__: ld,
      });
      var sl = function () {
        ld.call(this);
      };
      h["flixel.system.debug.interaction.tools.Eraser"] = sl;
      sl.__name__ = "flixel.system.debug.interaction.tools.Eraser";
      sl.__super__ = ld;
      sl.prototype = q(ld.prototype, {
        init: function (a) {
          ld.prototype.init.call(this, a);
          this._name = "Eraser";
          return this;
        },
        activate: function () {
          this.doDeletion(this._brain.keyPressed(16));
          this._brain.setActiveTool(null);
        },
        doDeletion: function (a) {
          var b = this._brain.selectedItems;
          null != b && (this.findAndDelete(b, a), b.clear());
        },
        findAndDelete: function (a, b) {
          null == b && (b = !1);
          for (a = new Mg(a.members, null); a.hasNext(); ) {
            var c = a.next();
            null == c ||
              c instanceof ma ||
              (c.kill(), b && this.removeFromMemory(c, g.game._state));
          }
        },
        removeFromMemory: function (a, b) {
          for (var c = 0, d = b.members; c < d.length; ) {
            var e = d[c];
            ++c;
            null != e &&
              (e instanceof ma
                ? this.removeFromMemory(a, e)
                : e == a && b.remove(e));
          }
        },
        __class__: sl,
      });
      var Le = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != Le.preload) this.__fromImage(Le.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(Le.resourceName), Le.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == Le.preload && (Le.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.system.debug.interaction.tools._Mover.GraphicMoverTool"] = Le;
      Le.__name__ =
        "flixel.system.debug.interaction.tools._Mover.GraphicMoverTool";
      Le.__super__ = S;
      Le.prototype = q(S.prototype, { __class__: Le });
      var rl = function () {
        ld.call(this);
      };
      h["flixel.system.debug.interaction.tools.Mover"] = rl;
      rl.__name__ = "flixel.system.debug.interaction.tools.Mover";
      rl.__super__ = ld;
      rl.prototype = q(ld.prototype, {
        init: function (a) {
          ld.prototype.init.call(this, a);
          var b = a.flixelPointer.x;
          a = a.flixelPointer.x;
          null == a && (a = 0);
          null == b && (b = 0);
          this._lastCursorPosition = new ba(b, a);
          this._name = "Mover";
          this._shortcut = "Shift";
          this.setButton(Le);
          this.setCursor(new Le(0, 0));
          return this;
        },
        __class__: rl,
      });
      var ne = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != ne.preload) this.__fromImage(ne.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(ne.resourceName), ne.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == ne.preload && (ne.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.system.debug.interaction.tools.GraphicCursorCross"] = ne;
      ne.__name__ = "flixel.system.debug.interaction.tools.GraphicCursorCross";
      ne.__super__ = S;
      ne.prototype = q(S.prototype, { __class__: ne });
      var ql = function () {
        this._selectionArea = new Ga();
        this._selectionHappening = !1;
        ld.call(this);
      };
      h["flixel.system.debug.interaction.tools.Pointer"] = ql;
      ql.__name__ = "flixel.system.debug.interaction.tools.Pointer";
      ql.__super__ = ld;
      ql.prototype = q(ld.prototype, {
        init: function (a) {
          ld.prototype.init.call(this, a);
          this._name = "Pointer";
          this.setButton(ne);
          this.setCursor(new ne(0, 0));
          return this;
        },
        draw: function () {
          var a = this._brain.getDebugGraphics();
          null != a &&
            (this._selectionHappening &&
              (a.lineStyle(0.9, 12255232),
              a.drawRect(
                this._selectionArea.x - g.camera.scroll.x,
                this._selectionArea.y - g.camera.scroll.y,
                this._selectionArea.width,
                this._selectionArea.height
              )),
            g.renderBlit && g.camera.buffer.draw(wd.flashGfxSprite));
        },
        __class__: ql,
      });
      var gf = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != gf.preload) this.__fromImage(gf.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(gf.resourceName), gf.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == gf.preload && (gf.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h[
        "flixel.system.debug.interaction.tools._Transform.GraphicTransformTool"
      ] = gf;
      gf.__name__ =
        "flixel.system.debug.interaction.tools._Transform.GraphicTransformTool";
      gf.__super__ = S;
      gf.prototype = q(S.prototype, { __class__: gf });
      var hf = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != hf.preload) this.__fromImage(hf.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(hf.resourceName), hf.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == hf.preload && (hf.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h[
        "flixel.system.debug.interaction.tools._Transform.GraphicTransformCursorDefault"
      ] = hf;
      hf.__name__ =
        "flixel.system.debug.interaction.tools._Transform.GraphicTransformCursorDefault";
      hf.__super__ = S;
      hf.prototype = q(S.prototype, { __class__: hf });
      var jf = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != jf.preload) this.__fromImage(jf.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(jf.resourceName), jf.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == jf.preload && (jf.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h[
        "flixel.system.debug.interaction.tools._Transform.GraphicTransformCursorScaleY"
      ] = jf;
      jf.__name__ =
        "flixel.system.debug.interaction.tools._Transform.GraphicTransformCursorScaleY";
      jf.__super__ = S;
      jf.prototype = q(S.prototype, { __class__: jf });
      var kf = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != kf.preload) this.__fromImage(kf.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(kf.resourceName), kf.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == kf.preload && (kf.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h[
        "flixel.system.debug.interaction.tools._Transform.GraphicTransformCursorScaleX"
      ] = kf;
      kf.__name__ =
        "flixel.system.debug.interaction.tools._Transform.GraphicTransformCursorScaleX";
      kf.__super__ = S;
      kf.prototype = q(S.prototype, { __class__: kf });
      var lf = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != lf.preload) this.__fromImage(lf.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(lf.resourceName), lf.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == lf.preload && (lf.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h[
        "flixel.system.debug.interaction.tools._Transform.GraphicTransformCursorScaleXY"
      ] = lf;
      lf.__name__ =
        "flixel.system.debug.interaction.tools._Transform.GraphicTransformCursorScaleXY";
      lf.__super__ = S;
      lf.prototype = q(S.prototype, { __class__: lf });
      var mf = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != mf.preload) this.__fromImage(mf.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(mf.resourceName), mf.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == mf.preload && (mf.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h[
        "flixel.system.debug.interaction.tools._Transform.GraphicTransformCursorRotate"
      ] = mf;
      mf.__name__ =
        "flixel.system.debug.interaction.tools._Transform.GraphicTransformCursorRotate";
      mf.__super__ = S;
      mf.prototype = q(S.prototype, { __class__: mf });
      var tl = function () {
        this._markers = [];
        ld.call(this);
      };
      h["flixel.system.debug.interaction.tools.Transform"] = tl;
      tl.__name__ = "flixel.system.debug.interaction.tools.Transform";
      tl.__super__ = ld;
      tl.prototype = q(ld.prototype, {
        init: function (a) {
          var b = this;
          ld.prototype.init.call(this, a);
          this._name = "Transform";
          this.setButton(gf);
          this.setCursor(new hf(0, 0));
          a.registerCustomCursor("transformRotate", new mf(0, 0));
          a.registerCustomCursor("transformScaleX", new kf(0, 0));
          a.registerCustomCursor("transformScaleY", new jf(0, 0));
          a.registerCustomCursor("transformScaleXY", new lf(0, 0));
          this._tooltip = gi.add(null, "");
          this._tooltip.textField.set_wordWrap(!1);
          a = this._markers;
          var c = new ba(0, 0);
          a.push(c);
          a = this._markers;
          c = new ba(0, 0);
          a.push(c);
          a = this._markers;
          c = new ba(0, 0);
          a.push(c);
          a = this._markers;
          c = new ba(0, 0);
          a.push(c);
          this.stopAction();
          g.signals.preStateSwitch.add(function () {
            b._target = null;
          });
          return this;
        },
        stopAction: function () {
          this._actionHappening = !1;
          this._actionMarker = -1;
          this._tooltip.setVisible(!1);
        },
        drawTargetAreaOutline: function (a) {
          a.lineStyle(0.9, -65281, 1, !1, 2, 2);
          a.moveTo(this._markers[0].x, this._markers[0].y);
          for (var b = 0, c = this._markers.length; b < c; ) {
            var d = b++;
            a.lineTo(this._markers[d].x, this._markers[d].y);
          }
          a.lineTo(this._markers[0].x, this._markers[0].y);
        },
        drawMarkers: function (a) {
          a.lineStyle(0.9, -65281, 1, !1, 2, 2);
          a.beginFill(-65281);
          for (var b = 0, c = this._markers.length; b < c; ) {
            var d = b++;
            0 == d
              ? a.drawCircle(this._markers[d].x, this._markers[d].y, 2.7)
              : a.drawRect(
                  this._markers[d].x - 1.5,
                  this._markers[d].y - 1.5,
                  3,
                  3
                );
          }
          a.endFill();
        },
        draw: function () {
          var a = this._brain.getDebugGraphics();
          null != a &&
            null != this._target &&
            this.isActive() &&
            (this.drawTargetAreaOutline(a),
            this.drawMarkers(a),
            g.renderBlit && g.camera.buffer.draw(wd.flashGfxSprite));
        },
        activate: function () {
          this._target = null;
          if (0 != this._brain.selectedItems.length) {
            for (
              var a = new Mg(this._brain.selectedItems.members, null);
              a.hasNext();

            ) {
              var b = a.next();
              if (null != b && null != b.scrollFactor && b.isOnScreen()) {
                this._target = b;
                break;
              }
            }
            this._brain.shouldDrawItemsSelection = !1;
          }
        },
        deactivate: function () {
          this._brain.shouldDrawItemsSelection = !0;
        },
        __class__: tl,
      });
      var Ja = function (a, b, c, d, e, f, k, g, l, h) {
        null == h && (h = !1);
        null == g && (g = !1);
        null == f && (f = !1);
        null == e && (e = !1);
        null == d && (d = !1);
        null == c && (c = 12);
        null == b && (b = "FFFFFF");
        null == a && (a = "");
        this.throwException = !1;
        this.prefix = a;
        this.color = b;
        this.size = c;
        this.bold = d;
        this.italic = e;
        this.underlined = f;
        this.errorSound = k;
        this.openConsole = g;
        this.callbackFunction = l;
        this.throwException = h;
      };
      h["flixel.system.debug.log.LogStyle"] = Ja;
      Ja.__name__ = "flixel.system.debug.log.LogStyle";
      Ja.prototype = {
        toLogString: function (a) {
          for (var b = [], c = 0, d = a.length; c < d; ) {
            var e = c++;
            e = M.string(a[e]);
            b.push(K.htmlEscape(e));
          }
          return this.prefix + b.join(" ");
        },
        __class__: Ja,
      };
      var Nf = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != Nf.preload) this.__fromImage(Nf.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(Nf.resourceName), Nf.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == Nf.preload && (Nf.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.system.debug.stats._Stats.GraphicMinimizeButton"] = Nf;
      Nf.__name__ = "flixel.system.debug.stats._Stats.GraphicMinimizeButton";
      Nf.__super__ = S;
      Nf.prototype = q(S.prototype, { __class__: Nf });
      var Of = function (a, b, c, d, e) {
        null == d && (d = -1);
        null == c && (c = !0);
        S.call(this, 0, 0, c, d);
        if (null != Of.preload) this.__fromImage(Of.preload);
        else {
          var f = this;
          Va.loadFromBase64(Tb.getString(Of.resourceName), Of.resourceType)
            .then(function (a) {
              f.__fromImage(a);
              return Ua.withValue(f);
            })
            .onComplete(function (a) {
              null == Of.preload && (Of.preload = a.image);
              null != e && qa.isFunction(e) && e(a);
            });
        }
      };
      h["flixel.system.debug.stats._Stats.GraphicMaximizeButton"] = Of;
      Of.__name__ = "flixel.system.debug.stats._Stats.GraphicMaximizeButton";
      Of.__super__ = S;
      Of.prototype = q(S.prototype, { __class__: Of });
      var uj = function (a, b, c, d, e, f, k, g) {
        Ke.call(this, a, b, c, d, e, f, k, g);
      };
      h["flixel.system.debug.watch.Watch"] = uj;
      uj.__name__ = "flixel.system.debug.watch.Watch";
      uj.__super__ = Ke;
      uj.prototype = q(Ke.prototype, { __class__: uj });
      var En = function (a, b, c, d, e, f, k, g) {
        Ke.call(this, a, b, c, d, e, f, k, g);
      };
      h["flixel.system.debug.watch.Tracker"] = En;
      En.__name__ = "flixel.system.debug.watch.Tracker";
      En.__super__ = uj;
      En.prototype = q(uj.prototype, { __class__: En });
      var en = function () {
        this.list = [];
        this.add_flixel_util_FlxTimerManager((fc.globalManager = new ul()));
        this.add_flixel_tweens_FlxTweenManager((la.globalManager = new vl()));
        this.add_flixel_input_mouse_FlxMouseEventManager(
          (jl.globalManager = new kl())
        );
      };
      h["flixel.system.frontEnds.PluginFrontEnd"] = en;
      en.__name__ = "flixel.system.frontEnds.PluginFrontEnd";
      en.prototype = {
        add_flixel_input_mouse_FlxMouseEventManager: function (a) {
          for (var b = 0, c = this.list; b < c.length; ) {
            var d = c[b];
            ++b;
            if (Bb.getClassName(a, !0) == Bb.getClassName(d, !0)) return a;
          }
          this.list.push(a);
          return a;
        },
        add_flixel_tweens_FlxTweenManager: function (a) {
          for (var b = 0, c = this.list; b < c.length; ) {
            var d = c[b];
            ++b;
            if (Bb.getClassName(a, !0) == Bb.getClassName(d, !0)) return a;
          }
          this.list.push(a);
          return a;
        },
        add_flixel_util_FlxTimerManager: function (a) {
          for (var b = 0, c = this.list; b < c.length; ) {
            var d = c[b];
            ++b;
            if (Bb.getClassName(a, !0) == Bb.getClassName(d, !0)) return a;
          }
          this.list.push(a);
          return a;
        },
        __class__: en,
      };
      var gn = function () {
        this.volume = 1;
        this.list = new ma();
        this.defaultSoundGroup = new ll();
        this.defaultMusicGroup = new ll();
        this.soundTrayEnabled = !0;
        this.muteKeys = [48, 96];
        this.volumeDownKeys = [189, 109];
        this.volumeUpKeys = [187, 107];
        this.muted = !1;
        this.loadSavedPrefs();
      };
      h["flixel.system.frontEnds.SoundFrontEnd"] = gn;
      gn.__name__ = "flixel.system.frontEnds.SoundFrontEnd";
      gn.prototype = {
        playMusic: function (a, b, c, d) {
          null == c && (c = !0);
          null == b && (b = 1);
          if (null == this.music) this.music = new Ce();
          else if (this.music.active) {
            var e = this.music;
            e.cleanup(e.autoDestroy, !0);
          }
          this.music.loadEmbedded(a, c);
          this.music.set_volume(b);
          this.music.persist = !0;
          this.music.set_group(null == d ? this.defaultMusicGroup : d);
          this.music.play();
        },
        load: function (a, b, c, d, e, f, k, r, l) {
          null == f && (f = !1);
          null == e && (e = !1);
          null == c && (c = !1);
          null == b && (b = 1);
          if (null == a && null == k)
            return (
              g.log.advanced(
                "FlxG.sound.load() requires either\nan embedded sound or a URL to work.",
                Ja.WARNING,
                !0
              ),
              null
            );
          var h = this.list.recycle(Ce);
          null != a
            ? (h.loadEmbedded(a, c, e, r),
              this.loadHelper(h, b, d, f),
              null != l && null != h._sound && l())
            : ((a = l),
              f &&
                (a = function () {
                  h.play();
                  null != l && l();
                }),
              h.loadStream(k, c, e, r, a),
              this.loadHelper(h, b, d));
          return h;
        },
        loadHelper: function (a, b, c, d) {
          null == d && (d = !1);
          a.set_volume(b);
          d && a.play();
          a.set_group(null == c ? this.defaultSoundGroup : c);
          return a;
        },
        play: function (a, b, c, d, e, f) {
          null == e && (e = !0);
          null == c && (c = !1);
          null == b && (b = 1);
          "string" == typeof a &&
            (aa.exists(a, "SOUND") || aa.exists(a, "MUSIC")
              ? (a = aa.getSound(a, !0))
              : (g.log.advanced(
                  "Could not find a Sound asset with an ID of '" + a + "'.",
                  Ja.ERROR,
                  !0
                ),
                (a = null)));
          a = this.list.recycle(Ce).loadEmbedded(a, c, e, f);
          return this.loadHelper(a, b, d, !0);
        },
        pause: function () {
          null != this.music &&
            this.music.exists &&
            this.music.active &&
            this.music.pause();
          for (var a = 0, b = this.list.members; a < b.length; ) {
            var c = b[a];
            ++a;
            null != c && c.exists && c.active && c.pause();
          }
        },
        destroy: function (a) {
          null == a && (a = !1);
          null == this.music ||
            (!a && this.music.persist) ||
            (this.destroySound(this.music), (this.music = null));
          for (var b = 0, c = this.list.members; b < c.length; ) {
            var d = c[b];
            ++b;
            null == d || (!a && d.persist) || this.destroySound(d);
          }
        },
        destroySound: function (a) {
          this.defaultMusicGroup.remove(a);
          this.defaultSoundGroup.remove(a);
          a.destroy();
        },
        toggleMuted: function () {
          this.muted = !this.muted;
          null != this.volumeHandler &&
            this.volumeHandler(this.muted ? 0 : this.volume);
          this.showSoundTray(!0);
        },
        changeVolume: function (a) {
          this.muted = !1;
          this.set_volume(this.volume + a);
          this.showSoundTray(0 < a);
        },
        showSoundTray: function (a) {
          null == a && (a = !1);
          null != g.game.soundTray &&
            this.soundTrayEnabled &&
            g.game.soundTray.show(a);
        },
        update: function (a) {
          null != this.music && this.music.active && this.music.update(a);
          null != this.list && this.list.active && this.list.update(a);
          g.keys.checkKeyArrayState(this.muteKeys, -1)
            ? this.toggleMuted()
            : g.keys.checkKeyArrayState(this.volumeUpKeys, -1)
            ? this.changeVolume(0.1)
            : g.keys.checkKeyArrayState(this.volumeDownKeys, -1) &&
              this.changeVolume(-0.1);
        },
        onFocusLost: function () {
          if (null != this.music) this.music.onFocusLost();
          for (var a = 0, b = this.list.members; a < b.length; ) {
            var c = b[a];
            ++a;
            if (null != c) c.onFocusLost();
          }
        },
        onFocus: function () {
          if (null != this.music) this.music.onFocus();
          for (var a = 0, b = this.list.members; a < b.length; ) {
            var c = b[a];
            ++a;
            if (null != c) c.onFocus();
          }
        },
        loadSavedPrefs: function () {
          1 == g.save.status._hx_index &&
            (null != g.save.data.volume && this.set_volume(g.save.data.volume),
            null != g.save.data.mute && (this.muted = g.save.data.mute));
        },
        set_volume: function (a) {
          a = 0 > a ? 0 : a;
          a = 1 < a ? 1 : a;
          null != this.volumeHandler && this.volumeHandler(this.muted ? 0 : a);
          return (this.volume = a);
        },
        __class__: gn,
        __properties__: { set_volume: "set_volume" },
      };
      var fn = function () {
        this.paused = this.stepRequested = !1;
      };
      h["flixel.system.frontEnds.VCRFrontEnd"] = fn;
      fn.__name__ = "flixel.system.frontEnds.VCRFrontEnd";
      fn.prototype = { __class__: fn };
      var Fk = function () {
        this.silent = !1;
        this.volumeUpSound = this.volumeDownSound = "flixel/sounds/beep";
        this._defaultScale = 2;
        this._width = 80;
        t.call(this);
        this.set_visible(!1);
        this.set_scaleX(this._defaultScale);
        this.set_scaleY(this._defaultScale);
        var a = new lc(new S(this._width, 30, !0, 2130706432));
        this.screenCenter();
        this.addChild(a);
        var b = new Kc();
        b.set_width(a.get_width());
        b.set_height(a.get_height());
        b.set_multiline(!0);
        b.set_wordWrap(!0);
        b.set_selectable(!1);
        a = new id(Fd.FONT_DEFAULT, 10, 16777215);
        a.align = 0;
        b.set_defaultTextFormat(a);
        this.addChild(b);
        b.set_text("VOLUME");
        b.set_y(16);
        b = 10;
        var c = 14;
        this._bars = [];
        for (var d = 0; 10 > d; )
          (a = d++),
            (a = new lc(new S(4, a + 1, !1, -1))),
            a.set_x(b),
            a.set_y(c),
            this.addChild(a),
            this._bars.push(a),
            (b += 6),
            --c;
        this.set_y(-this.get_height());
        this.set_visible(!1);
      };
      h["flixel.system.ui.FlxSoundTray"] = Fk;
      Fk.__name__ = "flixel.system.ui.FlxSoundTray";
      Fk.__super__ = t;
      Fk.prototype = q(t.prototype, {
        update: function (a) {
          0 < this._timer
            ? (this._timer -= a / 1e3)
            : this.get_y() > -this.get_height() &&
              (this.set_y(this.get_y() - (a / 1e3) * this.get_height() * 0.5),
              this.get_y() <= -this.get_height() &&
                (this.set_visible(!1),
                (this.active = !1),
                1 == g.save.status._hx_index &&
                  ((g.save.data.mute = g.sound.muted),
                  (g.save.data.volume = g.sound.volume),
                  g.save.flush())));
        },
        show: function (a) {
          null == a && (a = !1);
          this.silent ||
            ((a = Fd.getSound(a ? this.volumeUpSound : this.volumeDownSound)),
            null != a && g.sound.load(a).play());
          this._timer = 1;
          this.set_y(0);
          this.set_visible(!0);
          this.active = !0;
          a = Math.round(10 * g.sound.volume);
          g.sound.muted && (a = 0);
          for (var b = 0, c = this._bars.length; b < c; ) {
            var d = b++;
            d < a ? this._bars[d].set_alpha(1) : this._bars[d].set_alpha(0.5);
          }
        },
        screenCenter: function () {
          this.set_scaleX(this._defaultScale);
          this.set_scaleY(this._defaultScale);
          this.set_x(
            0.5 *
              (sa.get_current().stage.stageWidth -
                this._width * this._defaultScale) -
              g.game.get_x()
          );
        },
        __class__: Fk,
      });
      var hi = function (a, b, c) {
        null == c && (c = !1);
        this.toggleMode = this.toggled = this._mouseDown = !1;
        this.enabled = !0;
        t.call(this);
        null != a && this.changeIcon(a);
        this.upHandler = b;
        this.toggleMode = c;
        this.addEventListener("mouseUp", n(this, this.onMouseUp));
        this.addEventListener("mouseDown", n(this, this.onMouseDown));
        this.addEventListener("mouseOut", n(this, this.onMouseOut));
        this.addEventListener("mouseOver", n(this, this.onMouseOver));
      };
      h["flixel.system.ui.FlxSystemButton"] = hi;
      hi.__name__ = "flixel.system.ui.FlxSystemButton";
      hi.__interfaces__ = [U];
      hi.__super__ = t;
      hi.prototype = q(t.prototype, {
        changeIcon: function (a) {
          null != this._icon && this.removeChild(this._icon);
          eg.fixSize(a);
          this._icon = new lc(a);
          this.addChild(this._icon);
        },
        destroy: function () {
          this.removeEventListener("mouseUp", n(this, this.onMouseUp));
          this.removeEventListener("mouseDown", n(this, this.onMouseDown));
          this.removeEventListener("mouseOut", n(this, this.onMouseOut));
          this.removeEventListener("mouseOver", n(this, this.onMouseOver));
          this.upHandler = this._icon = null;
        },
        onMouseUp: function (a) {
          this.enabled &&
            this._mouseDown &&
            (this.set_toggled(!this.toggled),
            (this._mouseDown = !1),
            null != this.upHandler && this.upHandler());
        },
        onMouseDown: function (a) {
          this._mouseDown = !0;
        },
        onMouseOver: function (a) {
          this.enabled && this.set_alpha(this.get_alpha() - 0.2);
        },
        onMouseOut: function (a) {
          this.enabled && this.set_alpha(this.get_alpha() + 0.2);
        },
        set_toggled: function (a) {
          this.toggleMode && this.set_alpha(a ? 0.3 : 1);
          return (this.toggled = a);
        },
        __class__: hi,
        __properties__: q(t.prototype.__properties__, {
          set_toggled: "set_toggled",
        }),
      });
      var wo = function (a, b, c, d) {
        this.format = new id(null, null, a, b, c);
        this.borderColor = null == d ? 0 : d;
      };
      h["flixel.text.FlxTextFormat"] = wo;
      wo.__name__ = "flixel.text.FlxTextFormat";
      wo.prototype = { __class__: wo };
      var xo = function (a, b, c) {
        this.range = new yf(b, c);
        this.format = a;
      };
      h["flixel.text._FlxText.FlxTextFormatRange"] = xo;
      xo.__name__ = "flixel.text._FlxText.FlxTextFormatRange";
      xo.prototype = { __class__: xo };
      var Ya = (w["flixel.text.FlxTextBorderStyle"] = {
        __ename__: "flixel.text.FlxTextBorderStyle",
        __constructs__: null,
        NONE: {
          _hx_name: "NONE",
          _hx_index: 0,
          __enum__: "flixel.text.FlxTextBorderStyle",
          toString: p,
        },
        SHADOW: {
          _hx_name: "SHADOW",
          _hx_index: 1,
          __enum__: "flixel.text.FlxTextBorderStyle",
          toString: p,
        },
        OUTLINE: {
          _hx_name: "OUTLINE",
          _hx_index: 2,
          __enum__: "flixel.text.FlxTextBorderStyle",
          toString: p,
        },
        OUTLINE_FAST: {
          _hx_name: "OUTLINE_FAST",
          _hx_index: 3,
          __enum__: "flixel.text.FlxTextBorderStyle",
          toString: p,
        },
      });
      Ya.__constructs__ = [Ya.NONE, Ya.SHADOW, Ya.OUTLINE, Ya.OUTLINE_FAST];
      var Nm = {
          fromOpenFL: function (a) {
            switch (a) {
              case 0:
                return "center";
              case 2:
                return "justify";
              case 3:
                return "left";
              case 4:
                return "right";
              default:
                return "left";
            }
          },
          toOpenFL: function (a) {
            switch (a) {
              case "center":
                return 0;
              case "justify":
                return 2;
              case "left":
                return 3;
              case "right":
                return 4;
              default:
                return 3;
            }
          },
        },
        Fn = function () {
          this._tileObjects = [];
          ca.call(this);
          this.flixelType = 3;
          this.set_immovable(!0);
          this.set_moves(!1);
        };
      h["flixel.tile.FlxBaseTilemap"] = Fn;
      Fn.__name__ = "flixel.tile.FlxBaseTilemap";
      Fn.__super__ = ca;
      Fn.prototype = q(ca.prototype, {
        getTileIndexByCoords: function (a) {
          throw N.thrown("getTileIndexByCoords must be implemented");
        },
        overlapsWithCallback: function (a, b, c, d) {
          throw N.thrown("overlapsWithCallback must be implemented");
        },
        destroy: function () {
          this._data = null;
          ca.prototype.destroy.call(this);
        },
        overlaps: function (a, b, c) {
          null == b && (b = !1);
          var d = ma.resolveGroup(a);
          if (null != d) {
            var e = n(this, this.tilemapOverlapsCallback),
              f = b;
            return d.any(function (a) {
              return e(a, 0, 0, f, c);
            });
          }
          return 1 == a.flixelType || 3 == a.flixelType
            ? this.overlapsWithCallback(a)
            : this.overlaps(a, !1, null);
        },
        tilemapOverlapsCallback: function (a, b, c, d, e) {
          null == d && (d = !1);
          return 1 == a.flixelType || 3 == a.flixelType
            ? this.overlapsWithCallback(a)
            : this.overlaps(a, d, e);
        },
        overlapsPoint: function (a, b, c) {
          null == b && (b = !1);
          if (b) {
            null == c && (c = g.camera);
            b = c.scroll;
            c = b.x;
            var d = b.y;
            null == d && (d = 0);
            null == c && (c = 0);
            a.set_x(a.x - c);
            a.set_y(a.y - d);
            b._weak && b.put();
            a._weak && a.put();
          }
          return this.tileAtPointAllowsCollisions(a);
        },
        tileAtPointAllowsCollisions: function (a) {
          a = this.getTileIndexByCoords(a);
          return 0 > a || a >= this._data.length
            ? !1
            : 0 < this._tileObjects[this._data[a]].allowCollisions;
        },
        __class__: Fn,
      });
      var Gn = function (a, b, c, d) {
        F.call(this, a, b);
        this.makeGraphic(c, d, 0, !0);
        this.set_active(!1);
        this.set_immovable(!0);
        this.set_moves(!1);
      };
      h["flixel.tile.FlxTileblock"] = Gn;
      Gn.__name__ = "flixel.tile.FlxTileblock";
      Gn.__super__ = F;
      Gn.prototype = q(F.prototype, {
        destroy: function () {
          this.tileSprite = V.destroy(this.tileSprite);
          F.prototype.destroy.call(this);
        },
        __class__: Gn,
      });
      var Aa = function () {};
      h["flixel.tweens.FlxEase"] = Aa;
      Aa.__name__ = "flixel.tweens.FlxEase";
      Aa.linear = function (a) {
        return a;
      };
      Aa.quadOut = function (a) {
        return -a * (a - 2);
      };
      Aa.quadInOut = function (a) {
        return 0.5 >= a ? a * a * 2 : 1 - --a * a * 2;
      };
      Aa.cubeInOut = function (a) {
        return 0.5 >= a ? a * a * a * 4 : 1 + --a * a * a * 4;
      };
      Aa.quartInOut = function (a) {
        if (0.5 >= a) return a * a * a * a * 8;
        a = 2 * a - 2;
        return (1 - a * a * a * a) / 2 + 0.5;
      };
      Aa.sineIn = function (a) {
        return -Math.cos(Aa.PI2 * a) + 1;
      };
      Aa.sineOut = function (a) {
        return Math.sin(Aa.PI2 * a);
      };
      Aa.sineInOut = function (a) {
        return -Math.cos(Math.PI * a) / 2 + 0.5;
      };
      Aa.circOut = function (a) {
        return Math.sqrt(1 - (a - 1) * (a - 1));
      };
      Aa.elasticInOut = function (a) {
        return 0.5 > a
          ? -0.5 *
              Math.pow(2, 10 * (a -= 0.5)) *
              Math.sin(
                (2 * (a - Aa.ELASTIC_PERIOD / 4) * Math.PI) / Aa.ELASTIC_PERIOD
              )
          : Math.pow(2, -10 * (a -= 0.5)) *
              Math.sin(
                (2 * (a - Aa.ELASTIC_PERIOD / 4) * Math.PI) / Aa.ELASTIC_PERIOD
              ) *
              0.5 +
              1;
      };
      var la = function (a, b) {
        this._running = this._waitingForRestart = !1;
        this.duration =
          this.scale =
          this.executions =
          this.startDelay =
          this.loopDelay =
          this._secondsSinceStart =
          this._delayToUse =
            0;
        this.active = !1;
        a = this.resolveTweenOptions(a);
        this.set_type(a.type);
        this.onStart = a.onStart;
        this.onUpdate = a.onUpdate;
        this.onComplete = a.onComplete;
        this.ease = a.ease;
        this.setDelays(a.startDelay, a.loopDelay);
        this.manager = null != b ? b : la.globalManager;
      };
      h["flixel.tweens.FlxTween"] = la;
      la.__name__ = "flixel.tweens.FlxTween";
      la.__interfaces__ = [U];
      la.tween = function (a, b, c, d) {
        null == c && (c = 1);
        return la.globalManager.tween(a, b, c, d);
      };
      la.num = function (a, b, c, d, e) {
        null == c && (c = 1);
        return la.globalManager.num(a, b, c, d, e);
      };
      la.color = function (a, b, c, d, e) {
        null == b && (b = 1);
        return la.globalManager.color(a, b, c, d, e);
      };
      la.prototype = {
        resolveTweenOptions: function (a) {
          null == a && (a = { type: 8 });
          null == a.type && (a.type = 8);
          return a;
        },
        destroy: function () {
          this._nextTweenInChain =
            this._chainedTweens =
            this.manager =
            this.ease =
            this.onComplete =
            this.onUpdate =
            this.onStart =
              null;
        },
        update: function (a) {
          this._secondsSinceStart += a;
          a = 0 < this.executions ? this.loopDelay : this.startDelay;
          if (!(this._secondsSinceStart < a)) {
            this.scale =
              Math.max(this._secondsSinceStart - a, 0) / this.duration;
            null != this.ease && (this.scale = this.ease(this.scale));
            this.backward && (this.scale = 1 - this.scale);
            if (
              this._secondsSinceStart > a &&
              !this._running &&
              ((this._running = !0), null != this.onStart)
            )
              this.onStart(this);
            if (this._secondsSinceStart >= this.duration + a)
              (this.scale = this.backward ? 0 : 1), (this.finished = !0);
            else if (null != this.onUpdate) this.onUpdate(this);
          }
        },
        start: function () {
          this._waitingForRestart = !1;
          this._secondsSinceStart = 0;
          this._delayToUse =
            0 < this.executions ? this.loopDelay : this.startDelay;
          if (0 == this.duration) return this.set_active(!1), this;
          this.set_active(!0);
          this.finished = this._running = !1;
          return this;
        },
        cancel: function () {
          this.onEnd();
          null != this.manager && this.manager.remove(this);
        },
        finish: function () {
          this.executions++;
          if (null != this.onComplete) this.onComplete(this);
          var a = this.type & -17;
          if (1 == a || 8 == a)
            this.onEnd(),
              (this._secondsSinceStart = this.duration + this.startDelay),
              8 == a && null != this.manager && this.manager.remove(this);
          if (2 == a || 4 == a)
            (this._secondsSinceStart =
              ((this._secondsSinceStart - this._delayToUse) % this.duration) +
              this._delayToUse),
              (this.scale =
                Math.max(this._secondsSinceStart - this._delayToUse, 0) /
                this.duration),
              null != this.ease &&
                0 < this.scale &&
                1 > this.scale &&
                (this.scale = this.ease(this.scale)),
              4 == a &&
                (this.backward = !this.backward) &&
                (this.scale = 1 - this.scale),
              this.restart();
        },
        onEnd: function () {
          this.setVarsOnEnd();
          this.processTweenChain();
        },
        setVarsOnEnd: function () {
          this.set_active(!1);
          this._running = !1;
          this.finished = !0;
        },
        processTweenChain: function () {
          null == this._chainedTweens ||
            0 >= this._chainedTweens.length ||
            ((this._nextTweenInChain = this._chainedTweens.shift()),
            this.doNextTween(this._nextTweenInChain),
            (this._chainedTweens = null));
        },
        doNextTween: function (a) {
          a.active || (a.start(), this.manager.add_flixel_tweens_FlxTween(a));
          a.setChain(this._chainedTweens);
        },
        setChain: function (a) {
          null != a &&
            (this._chainedTweens =
              null == this._chainedTweens ? a : this._chainedTweens.concat(a));
        },
        restart: function () {
          this.active ? this.start() : (this._waitingForRestart = !0);
        },
        setDelays: function (a, b) {
          this.set_startDelay(null != a ? a : 0);
          this.set_loopDelay(null != b ? b : 0);
          return this;
        },
        set_startDelay: function (a) {
          a = Math.abs(a);
          0 == this.executions && (this._delayToUse = a);
          return (this.startDelay = a);
        },
        set_loopDelay: function (a) {
          a = Math.abs(a);
          0 < this.executions &&
            ((this._secondsSinceStart =
              (Math.max(this._secondsSinceStart - this._delayToUse, 0) /
                this.duration) *
                this.duration +
              Math.max(a - this.loopDelay, 0)),
            (this._delayToUse = a));
          return (this.loopDelay = a);
        },
        set_type: function (a) {
          0 == a ? (a = 8) : 16 == a && (a = 17);
          this.backward = 0 < (a & 16);
          return (this.type = a);
        },
        set_active: function (a) {
          this.active = a;
          this._waitingForRestart && this.restart();
          return a;
        },
        __class__: la,
        __properties__: {
          set_loopDelay: "set_loopDelay",
          set_startDelay: "set_startDelay",
          set_type: "set_type",
          set_active: "set_active",
        },
      };
      var vl = function () {
        this._tweens = [];
        O.call(this);
        this.set_visible(!1);
        g.signals.preStateSwitch.add(n(this, this.clear));
      };
      h["flixel.tweens.FlxTweenManager"] = vl;
      vl.__name__ = "flixel.tweens.FlxTweenManager";
      vl.__super__ = O;
      vl.prototype = q(O.prototype, {
        add_flixel_tweens_misc_NumTween: function (a, b) {
          null == b && (b = !1);
          if (null == a) return null;
          this._tweens.push(a);
          b && a.start();
          return a;
        },
        add_flixel_tweens_misc_ColorTween: function (a, b) {
          null == b && (b = !1);
          if (null == a) return null;
          this._tweens.push(a);
          b && a.start();
          return a;
        },
        add_flixel_tweens_FlxTween: function (a, b) {
          null == b && (b = !1);
          if (null == a) return null;
          this._tweens.push(a);
          b && a.start();
          return a;
        },
        add_flixel_tweens_misc_VarTween: function (a, b) {
          null == b && (b = !1);
          if (null == a) return null;
          this._tweens.push(a);
          b && a.start();
          return a;
        },
        tween: function (a, b, c, d) {
          null == c && (c = 1);
          d = new wl(d, this);
          d.tween(a, b, c);
          return this.add_flixel_tweens_misc_VarTween(d);
        },
        num: function (a, b, c, d, e) {
          null == c && (c = 1);
          d = new xl(d, this);
          d.tween(a, b, c, e);
          return this.add_flixel_tweens_misc_NumTween(d);
        },
        color: function (a, b, c, d, e) {
          null == b && (b = 1);
          e = new yl(e, this);
          e.tween(b, c, d, a);
          return this.add_flixel_tweens_misc_ColorTween(e);
        },
        destroy: function () {
          O.prototype.destroy.call(this);
          g.signals.preStateSwitch.remove(n(this, this.clear));
        },
        update: function (a) {
          for (var b = null, c = 0, d = this._tweens; c < d.length; ) {
            var e = d[c];
            ++c;
            e.active &&
              (e.update(a), e.finished && (null == b && (b = []), b.push(e)));
          }
          if (null != b) for (; 0 < b.length; ) b.shift().finish();
        },
        remove: function (a, b) {
          null == b && (b = !0);
          if (null == a) return null;
          a.set_active(!1);
          b && a.destroy();
          b = this._tweens;
          var c = b.indexOf(a);
          -1 != c && ((b[c] = b[b.length - 1]), b.pop());
          return a;
        },
        clear: function () {
          for (var a = 0, b = this._tweens; a < b.length; ) {
            var c = b[a];
            ++a;
            null != c && (c.set_active(!1), c.destroy());
          }
          this._tweens.splice(0, this._tweens.length);
        },
        __class__: vl,
      });
      var yl = function (a, b) {
        la.call(this, a, b);
      };
      h["flixel.tweens.misc.ColorTween"] = yl;
      yl.__name__ = "flixel.tweens.misc.ColorTween";
      yl.__super__ = la;
      yl.prototype = q(la.prototype, {
        destroy: function () {
          la.prototype.destroy.call(this);
          this.sprite = null;
        },
        tween: function (a, b, c, d) {
          this.color = this.startColor = b;
          this.endColor = c;
          this.duration = a;
          this.sprite = d;
          this.start();
          return this;
        },
        update: function (a) {
          la.prototype.update.call(this, a);
          var b = this.startColor,
            c = this.endColor,
            d = this.scale;
          null == d && (d = 0.5);
          a =
            ((((c >> 16) & 255) - ((b >> 16) & 255)) * d + ((b >> 16) & 255)) |
            0;
          var e =
              ((((c >> 8) & 255) - ((b >> 8) & 255)) * d + ((b >> 8) & 255)) |
              0,
            f = (((c & 255) - (b & 255)) * d + (b & 255)) | 0;
          c =
            ((((c >> 24) & 255) - ((b >> 24) & 255)) * d + ((b >> 24) & 255)) |
            0;
          null == c && (c = 255);
          b = ob._new();
          null == c && (c = 255);
          b =
            (((b & -16711681) | ((255 < a ? 255 : 0 > a ? 0 : a) << 16)) &
              -65281) |
            ((255 < e ? 255 : 0 > e ? 0 : e) << 8);
          b &= -256;
          b |= 255 < f ? 255 : 0 > f ? 0 : f;
          b &= 16777215;
          this.color = b |= (255 < c ? 255 : 0 > c ? 0 : c) << 24;
          null != this.sprite &&
            (this.sprite.set_color(this.color),
            this.sprite.set_alpha(((this.color >> 24) & 255) / 255));
        },
        __class__: yl,
      });
      var xl = function (a, b) {
        la.call(this, a, b);
      };
      h["flixel.tweens.misc.NumTween"] = xl;
      xl.__name__ = "flixel.tweens.misc.NumTween";
      xl.__super__ = la;
      xl.prototype = q(la.prototype, {
        destroy: function () {
          la.prototype.destroy.call(this);
          this._tweenFunction = null;
        },
        tween: function (a, b, c, d) {
          this._tweenFunction = d;
          this._start = this.value = a;
          this._range = b - this.value;
          this.duration = c;
          this.start();
          return this;
        },
        update: function (a) {
          la.prototype.update.call(this, a);
          this.value = this._start + this._range * this.scale;
          null != this._tweenFunction && this._tweenFunction(this.value);
        },
        __class__: xl,
      });
      var wl = function (a, b) {
        la.call(this, a, b);
      };
      h["flixel.tweens.misc.VarTween"] = wl;
      wl.__name__ = "flixel.tweens.misc.VarTween";
      wl.__super__ = la;
      wl.prototype = q(la.prototype, {
        tween: function (a, b, c) {
          this._object = a;
          this._properties = b;
          this._propertyInfos = [];
          this.duration = c;
          this.start();
          this.initializeVars();
          return this;
        },
        update: function (a) {
          if (
            this._secondsSinceStart <
            (0 < this.executions ? this.loopDelay : this.startDelay)
          )
            la.prototype.update.call(this, a);
          else if (
            (isNaN(this._propertyInfos[0].startValue) && this.setStartValues(),
            la.prototype.update.call(this, a),
            this.active)
          ) {
            a = 0;
            for (var b = this._propertyInfos; a < b.length; ) {
              var c = b[a];
              ++a;
              qa.setProperty(
                c.object,
                c.field,
                c.startValue + c.range * this.scale
              );
            }
          }
        },
        initializeVars: function () {
          if (qa.isObject(this._properties))
            var a = qa.fields(this._properties);
          else
            throw N.thrown(
              "Unsupported properties container - use an object containing key/value pairs."
            );
          for (var b = 0; b < a.length; ) {
            var c = a[b];
            ++b;
            for (
              var d = this._object, e = c.split("."), f = e.pop(), k = 0;
              k < e.length;

            ) {
              var g = e[k];
              ++k;
              d = qa.getProperty(d, g);
              if (!qa.isObject(d))
                throw N.thrown(
                  'The object does not have the property "' +
                    g +
                    '" in "' +
                    c +
                    '"'
                );
            }
            this._propertyInfos.push({
              object: d,
              field: f,
              startValue: NaN,
              range: qa.getProperty(this._properties, c),
            });
          }
        },
        setStartValues: function () {
          for (var a = 0, b = this._propertyInfos; a < b.length; ) {
            var c = b[a];
            ++a;
            if (null == qa.getProperty(c.object, c.field))
              throw N.thrown(
                'The object does not have the property "' + c.field + '"'
              );
            var d = qa.getProperty(c.object, c.field);
            if (isNaN(d))
              throw N.thrown('The property "' + c.field + '" is not numeric.');
            c.startValue = d;
            c.range -= d;
          }
        },
        destroy: function () {
          la.prototype.destroy.call(this);
          this._propertyInfos = this._properties = this._object = null;
        },
        __class__: wl,
      });
      var jd = (w["flixel.ui.FlxBarFillDirection"] = {
        __ename__: "flixel.ui.FlxBarFillDirection",
        __constructs__: null,
        LEFT_TO_RIGHT: {
          _hx_name: "LEFT_TO_RIGHT",
          _hx_index: 0,
          __enum__: "flixel.ui.FlxBarFillDirection",
          toString: p,
        },
        RIGHT_TO_LEFT: {
          _hx_name: "RIGHT_TO_LEFT",
          _hx_index: 1,
          __enum__: "flixel.ui.FlxBarFillDirection",
          toString: p,
        },
        TOP_TO_BOTTOM: {
          _hx_name: "TOP_TO_BOTTOM",
          _hx_index: 2,
          __enum__: "flixel.ui.FlxBarFillDirection",
          toString: p,
        },
        BOTTOM_TO_TOP: {
          _hx_name: "BOTTOM_TO_TOP",
          _hx_index: 3,
          __enum__: "flixel.ui.FlxBarFillDirection",
          toString: p,
        },
        HORIZONTAL_INSIDE_OUT: {
          _hx_name: "HORIZONTAL_INSIDE_OUT",
          _hx_index: 4,
          __enum__: "flixel.ui.FlxBarFillDirection",
          toString: p,
        },
        HORIZONTAL_OUTSIDE_IN: {
          _hx_name: "HORIZONTAL_OUTSIDE_IN",
          _hx_index: 5,
          __enum__: "flixel.ui.FlxBarFillDirection",
          toString: p,
        },
        VERTICAL_INSIDE_OUT: {
          _hx_name: "VERTICAL_INSIDE_OUT",
          _hx_index: 6,
          __enum__: "flixel.ui.FlxBarFillDirection",
          toString: p,
        },
        VERTICAL_OUTSIDE_IN: {
          _hx_name: "VERTICAL_OUTSIDE_IN",
          _hx_index: 7,
          __enum__: "flixel.ui.FlxBarFillDirection",
          toString: p,
        },
      });
      jd.__constructs__ = [
        jd.LEFT_TO_RIGHT,
        jd.RIGHT_TO_LEFT,
        jd.TOP_TO_BOTTOM,
        jd.BOTTOM_TO_TOP,
        jd.HORIZONTAL_INSIDE_OUT,
        jd.HORIZONTAL_OUTSIDE_IN,
        jd.VERTICAL_INSIDE_OUT,
        jd.VERTICAL_OUTSIDE_IN,
      ];
      var bh = function (a, b, c) {
        null == b && (b = 0);
        null == a && (a = 0);
        this.lastStatus = -1;
        this.maxInputMovement = Infinity;
        this.mouseButtons = [-1];
        this.allowSwiping = !0;
        this.statusAnimations = ["normal", "highlight", "pressed"];
        this.labelAlphas = [0.8, 1, 0.5];
        var d = 0,
          e = 0;
        null == e && (e = 0);
        null == d && (d = 0);
        var f = ba.pool.get().set(d, e);
        f._inPool = !1;
        e = d = 0;
        null == e && (e = 0);
        null == d && (d = 0);
        var k = ba.pool.get().set(d, e);
        k._inPool = !1;
        d = 0;
        e = 1;
        null == e && (e = 0);
        null == d && (d = 0);
        null == e && (e = 0);
        null == d && (d = 0);
        e = ba.pool.get().set(d, e);
        e._inPool = !1;
        this.labelOffsets = [f, k, e];
        F.call(this, a, b);
        this.loadDefaultGraphic();
        this.onUp = new fe(c);
        this.onDown = new fe();
        this.onOver = new fe();
        this.onOut = new fe();
        this.set_status(0);
        a = this.scrollFactor;
        a.set_x(0);
        a.set_y(0);
        sa.get_current().stage.addEventListener(
          "mouseUp",
          n(this, this.onUpEventListener)
        );
        this.input = new Ld(0);
      };
      h["flixel.ui.FlxTypedButton_flixel_text_FlxText"] = bh;
      bh.__name__ = "flixel.ui.FlxTypedButton_flixel_text_FlxText";
      bh.__interfaces__ = [vg];
      bh.__super__ = F;
      bh.prototype = q(F.prototype, {
        graphicLoaded: function () {
          F.prototype.graphicLoaded.call(this);
          this.setupAnimation("normal", 0);
          this.setupAnimation("highlight", 1);
          this.setupAnimation("pressed", 2);
        },
        loadDefaultGraphic: function () {
          this.loadGraphic("flixel/images/ui/button.png", !0, 80, 20);
        },
        setupAnimation: function (a, b) {
          b = Math.min(b, this.animation._sprite.get_numFrames() - 1) | 0;
          this.animation.add(a, [b]);
        },
        destroy: function () {
          this.set_label(V.destroy(this.label));
          this._spriteLabel = null;
          this.onUp = V.destroy(this.onUp);
          this.onDown = V.destroy(this.onDown);
          this.onOver = V.destroy(this.onOver);
          this.onOut = V.destroy(this.onOut);
          this.labelOffsets = V.putArray(this.labelOffsets);
          this.input = this.currentInput = this.labelAlphas = null;
          sa.get_current().stage.removeEventListener(
            "mouseUp",
            n(this, this.onUpEventListener)
          );
          F.prototype.destroy.call(this);
        },
        update: function (a) {
          F.prototype.update.call(this, a);
          this.visible &&
            (this.updateButton(),
            this.lastStatus != this.status &&
              (this.updateStatusAnimation(), (this.lastStatus = this.status)));
          this.input.update();
        },
        updateStatusAnimation: function () {
          this.animation.play(this.statusAnimations[this.status]);
        },
        draw: function () {
          F.prototype.draw.call(this);
          null != this._spriteLabel &&
            this._spriteLabel.visible &&
            (this._spriteLabel.set_cameras(this.get_cameras()),
            this._spriteLabel.draw());
        },
        updateButton: function () {
          var a = this.checkMouseOverlap();
          a || (a = this.checkTouchOverlap());
          if (
            null != this.currentInput &&
            this.currentInput.get_justReleased() &&
            a
          )
            this.onUpHandler();
          if (
            0 != this.status &&
            (!a ||
              (null != this.currentInput &&
                this.currentInput.get_justReleased()))
          )
            this.onOutHandler();
        },
        checkMouseOverlap: function () {
          for (var a = !1, b = 0, c = this.get_cameras(); b < c.length; ) {
            var d = c[b];
            ++b;
            for (var e = 0, f = this.mouseButtons; e < f.length; ) {
              var k = f[e];
              ++e;
              k = Ge.getByID(k);
              null != k &&
                this.checkInput(g.mouse, k, k.justPressedPosition, d) &&
                (a = !0);
            }
          }
          return a;
        },
        checkTouchOverlap: function () {
          for (var a = !1, b = 0, c = this.get_cameras(); b < c.length; ) {
            var d = c[b];
            ++b;
            for (var e = 0, f = g.touches.list; e < f.length; ) {
              var k = f[e];
              ++e;
              this.checkInput(k, k, k.justPressedPosition, d) && (a = !0);
            }
          }
          return a;
        },
        checkInput: function (a, b, c, d) {
          if (Infinity != this.maxInputMovement) {
            var e = 0,
              f = 0;
            null == f && (f = 0);
            null == e && (e = 0);
            null == f && (f = 0);
            null == e && (e = 0);
            f = ba.pool.get().set(e, f);
            f._inPool = !1;
            f._weak = !0;
            c =
              Ei.distanceTo(c, a.getScreenPosition(null, f)) >
              this.maxInputMovement;
          } else c = !1;
          if (c && b == this.currentInput) this.currentInput = null;
          else if (
            this.overlapsPoint(a.getWorldPosition(d, this._point), !0, d)
          )
            return this.updateStatus(b), !0;
          return !1;
        },
        updateStatus: function (a) {
          if (a.get_justPressed())
            (this.currentInput = a), this.onDownHandler();
          else if (0 == this.status)
            if (this.allowSwiping && a.get_pressed()) this.onDownHandler();
            else this.onOverHandler();
        },
        updateLabelPosition: function () {
          null != this._spriteLabel &&
            (this._spriteLabel.set_x(
              (this.pixelPerfectPosition ? Math.floor(this.x) : this.x) +
                this.labelOffsets[this.status].x
            ),
            this._spriteLabel.set_y(
              (this.pixelPerfectPosition ? Math.floor(this.y) : this.y) +
                this.labelOffsets[this.status].y
            ));
        },
        updateLabelAlpha: function () {
          null != this._spriteLabel &&
            this.labelAlphas.length > this.status &&
            this._spriteLabel.set_alpha(
              this.alpha * this.labelAlphas[this.status]
            );
        },
        onUpEventListener: function (a) {
          if (this.visible && this.exists && this.active && 2 == this.status)
            this.onUpHandler();
        },
        onUpHandler: function () {
          this.set_status(1);
          this.input.release();
          this.currentInput = null;
          var a = this.onUp;
          null != a.callback && a.callback();
          null != a.sound && a.sound.play(!0);
        },
        onDownHandler: function () {
          this.set_status(2);
          this.input.press();
          var a = this.onDown;
          null != a.callback && a.callback();
          null != a.sound && a.sound.play(!0);
        },
        onOverHandler: function () {
          if (g.mouse.enabled) {
            this.set_status(1);
            var a = this.onOver;
            null != a.callback && a.callback();
            null != a.sound && a.sound.play(!0);
          } else this.set_status(0);
        },
        onOutHandler: function () {
          this.set_status(0);
          this.input.release();
          var a = this.onOut;
          null != a.callback && a.callback();
          null != a.sound && a.sound.play(!0);
        },
        set_label: function (a) {
          null != a &&
            (a.scrollFactor.put(), (a.scrollFactor = this.scrollFactor));
          this._spriteLabel = this.label = a;
          this.updateLabelPosition();
          return a;
        },
        set_status: function (a) {
          this.status = a;
          this.updateLabelAlpha();
          return this.status;
        },
        set_alpha: function (a) {
          F.prototype.set_alpha.call(this, a);
          this.updateLabelAlpha();
          return this.alpha;
        },
        set_x: function (a) {
          F.prototype.set_x.call(this, a);
          this.updateLabelPosition();
          return this.x;
        },
        set_y: function (a) {
          F.prototype.set_y.call(this, a);
          this.updateLabelPosition();
          return this.y;
        },
        get_justReleased: function () {
          return -1 == this.input.current;
        },
        get_pressed: function () {
          var a = this.input;
          return 1 != a.current ? 2 == a.current : !0;
        },
        get_justPressed: function () {
          return 2 == this.input.current;
        },
        __class__: bh,
        __properties__: q(F.prototype.__properties__, {
          get_justPressed: "get_justPressed",
          get_pressed: "get_pressed",
          get_justReleased: "get_justReleased",
          set_status: "set_status",
          set_label: "set_label",
        }),
      });
      var lb = function (a, b, c, d) {
        null == b && (b = 0);
        null == a && (a = 0);
        bh.call(this, a, b, d);
        a = 0;
        for (b = this.labelOffsets; a < b.length; ) {
          d = b[a];
          ++a;
          var e = d.x,
            f = d.y + 3;
          null == f && (f = 0);
          null == e && (e = 0);
          d.set_x(e);
          d.set_y(f);
        }
        null != c &&
          (this.set_label(
            new W(
              this.x + this.labelOffsets[0].x,
              this.y + this.labelOffsets[0].y,
              80,
              c
            )
          ),
          this.label.setFormat(null, 8, 3355443, "center"),
          this.label.set_alpha(this.labelAlphas[this.status]),
          this.label.drawFrame(!0));
      };
      h["flixel.ui.FlxButton"] = lb;
      lb.__name__ = "flixel.ui.FlxButton";
      lb.__super__ = bh;
      lb.prototype = q(bh.prototype, {
        resetHelpers: function () {
          bh.prototype.resetHelpers.call(this);
          if (null != this.label) {
            var a = this.label,
              b = this.get_width() | 0;
            a.set_fieldWidth((this.label.frameWidth = b));
            this.label.set_size(this.label._defaultFormat.size | 0);
          }
        },
        __class__: lb,
      });
      var fe = function (a, b) {
        this.callback = a;
        this.sound = b;
      };
      h["flixel.ui._FlxButton.FlxButtonEvent"] = fe;
      fe.__name__ = "flixel.ui._FlxButton.FlxButtonEvent";
      fe.__interfaces__ = [U];
      fe.prototype = {
        destroy: function () {
          this.callback = null;
          this.sound = V.destroy(this.sound);
        },
        __class__: fe,
      };
      var yh = function (a, b, c) {
        null == b && (b = 0);
        null == a && (a = 0);
        this.lastStatus = -1;
        this.maxInputMovement = Infinity;
        this.mouseButtons = [-1];
        this.allowSwiping = !0;
        this.statusAnimations = ["normal", "highlight", "pressed"];
        this.labelAlphas = [0.8, 1, 0.5];
        var d = 0,
          e = 0;
        null == e && (e = 0);
        null == d && (d = 0);
        var f = ba.pool.get().set(d, e);
        f._inPool = !1;
        e = d = 0;
        null == e && (e = 0);
        null == d && (d = 0);
        var k = ba.pool.get().set(d, e);
        k._inPool = !1;
        d = 0;
        e = 1;
        null == e && (e = 0);
        null == d && (d = 0);
        null == e && (e = 0);
        null == d && (d = 0);
        e = ba.pool.get().set(d, e);
        e._inPool = !1;
        this.labelOffsets = [f, k, e];
        F.call(this, a, b);
        this.loadDefaultGraphic();
        this.onUp = new fe(c);
        this.onDown = new fe();
        this.onOver = new fe();
        this.onOut = new fe();
        this.set_status(0);
        a = this.scrollFactor;
        a.set_x(0);
        a.set_y(0);
        sa.get_current().stage.addEventListener(
          "mouseUp",
          n(this, this.onUpEventListener)
        );
        this.input = new Ld(0);
      };
      h["flixel.ui.FlxTypedButton_flixel_FlxSprite"] = yh;
      yh.__name__ = "flixel.ui.FlxTypedButton_flixel_FlxSprite";
      yh.__interfaces__ = [vg];
      yh.__super__ = F;
      yh.prototype = q(F.prototype, {
        graphicLoaded: function () {
          F.prototype.graphicLoaded.call(this);
          this.setupAnimation("normal", 0);
          this.setupAnimation("highlight", 1);
          this.setupAnimation("pressed", 2);
        },
        loadDefaultGraphic: function () {
          this.loadGraphic("flixel/images/ui/button.png", !0, 80, 20);
        },
        setupAnimation: function (a, b) {
          b = Math.min(b, this.animation._sprite.get_numFrames() - 1) | 0;
          this.animation.add(a, [b]);
        },
        destroy: function () {
          this.set_label(V.destroy(this.label));
          this._spriteLabel = null;
          this.onUp = V.destroy(this.onUp);
          this.onDown = V.destroy(this.onDown);
          this.onOver = V.destroy(this.onOver);
          this.onOut = V.destroy(this.onOut);
          this.labelOffsets = V.putArray(this.labelOffsets);
          this.input = this.currentInput = this.labelAlphas = null;
          sa.get_current().stage.removeEventListener(
            "mouseUp",
            n(this, this.onUpEventListener)
          );
          F.prototype.destroy.call(this);
        },
        update: function (a) {
          F.prototype.update.call(this, a);
          this.visible &&
            (this.updateButton(),
            this.lastStatus != this.status &&
              (this.updateStatusAnimation(), (this.lastStatus = this.status)));
          this.input.update();
        },
        updateStatusAnimation: function () {
          this.animation.play(this.statusAnimations[this.status]);
        },
        draw: function () {
          F.prototype.draw.call(this);
          null != this._spriteLabel &&
            this._spriteLabel.visible &&
            (this._spriteLabel.set_cameras(this.get_cameras()),
            this._spriteLabel.draw());
        },
        updateButton: function () {
          var a = this.checkMouseOverlap();
          a || (a = this.checkTouchOverlap());
          if (
            null != this.currentInput &&
            this.currentInput.get_justReleased() &&
            a
          )
            this.onUpHandler();
          if (
            0 != this.status &&
            (!a ||
              (null != this.currentInput &&
                this.currentInput.get_justReleased()))
          )
            this.onOutHandler();
        },
        checkMouseOverlap: function () {
          for (var a = !1, b = 0, c = this.get_cameras(); b < c.length; ) {
            var d = c[b];
            ++b;
            for (var e = 0, f = this.mouseButtons; e < f.length; ) {
              var k = f[e];
              ++e;
              k = Ge.getByID(k);
              null != k &&
                this.checkInput(g.mouse, k, k.justPressedPosition, d) &&
                (a = !0);
            }
          }
          return a;
        },
        checkTouchOverlap: function () {
          for (var a = !1, b = 0, c = this.get_cameras(); b < c.length; ) {
            var d = c[b];
            ++b;
            for (var e = 0, f = g.touches.list; e < f.length; ) {
              var k = f[e];
              ++e;
              this.checkInput(k, k, k.justPressedPosition, d) && (a = !0);
            }
          }
          return a;
        },
        checkInput: function (a, b, c, d) {
          if (Infinity != this.maxInputMovement) {
            var e = 0,
              f = 0;
            null == f && (f = 0);
            null == e && (e = 0);
            null == f && (f = 0);
            null == e && (e = 0);
            f = ba.pool.get().set(e, f);
            f._inPool = !1;
            f._weak = !0;
            c =
              Ei.distanceTo(c, a.getScreenPosition(null, f)) >
              this.maxInputMovement;
          } else c = !1;
          if (c && b == this.currentInput) this.currentInput = null;
          else if (
            this.overlapsPoint(a.getWorldPosition(d, this._point), !0, d)
          )
            return this.updateStatus(b), !0;
          return !1;
        },
        updateStatus: function (a) {
          if (a.get_justPressed())
            (this.currentInput = a), this.onDownHandler();
          else if (0 == this.status)
            if (this.allowSwiping && a.get_pressed()) this.onDownHandler();
            else this.onOverHandler();
        },
        updateLabelPosition: function () {
          null != this._spriteLabel &&
            (this._spriteLabel.set_x(
              (this.pixelPerfectPosition ? Math.floor(this.x) : this.x) +
                this.labelOffsets[this.status].x
            ),
            this._spriteLabel.set_y(
              (this.pixelPerfectPosition ? Math.floor(this.y) : this.y) +
                this.labelOffsets[this.status].y
            ));
        },
        updateLabelAlpha: function () {
          null != this._spriteLabel &&
            this.labelAlphas.length > this.status &&
            this._spriteLabel.set_alpha(
              this.alpha * this.labelAlphas[this.status]
            );
        },
        onUpEventListener: function (a) {
          if (this.visible && this.exists && this.active && 2 == this.status)
            this.onUpHandler();
        },
        onUpHandler: function () {
          this.set_status(1);
          this.input.release();
          this.currentInput = null;
          var a = this.onUp;
          null != a.callback && a.callback();
          null != a.sound && a.sound.play(!0);
        },
        onDownHandler: function () {
          this.set_status(2);
          this.input.press();
          var a = this.onDown;
          null != a.callback && a.callback();
          null != a.sound && a.sound.play(!0);
        },
        onOverHandler: function () {
          if (g.mouse.enabled) {
            this.set_status(1);
            var a = this.onOver;
            null != a.callback && a.callback();
            null != a.sound && a.sound.play(!0);
          } else this.set_status(0);
        },
        onOutHandler: function () {
          this.set_status(0);
          this.input.release();
          var a = this.onOut;
          null != a.callback && a.callback();
          null != a.sound && a.sound.play(!0);
        },
        set_label: function (a) {
          null != a &&
            (a.scrollFactor.put(), (a.scrollFactor = this.scrollFactor));
          this._spriteLabel = this.label = a;
          this.updateLabelPosition();
          return a;
        },
        set_status: function (a) {
          this.status = a;
          this.updateLabelAlpha();
          return this.status;
        },
        set_alpha: function (a) {
          F.prototype.set_alpha.call(this, a);
          this.updateLabelAlpha();
          return this.alpha;
        },
        set_x: function (a) {
          F.prototype.set_x.call(this, a);
          this.updateLabelPosition();
          return this.x;
        },
        set_y: function (a) {
          F.prototype.set_y.call(this, a);
          this.updateLabelPosition();
          return this.y;
        },
        get_justReleased: function () {
          return -1 == this.input.current;
        },
        get_pressed: function () {
          var a = this.input;
          return 1 != a.current ? 2 == a.current : !0;
        },
        get_justPressed: function () {
          return 2 == this.input.current;
        },
        __class__: yh,
        __properties__: q(F.prototype.__properties__, {
          get_justPressed: "get_justPressed",
          get_pressed: "get_pressed",
          get_justReleased: "get_justReleased",
          set_status: "set_status",
          set_label: "set_label",
        }),
      });
      var zl = function (a, b, c, d) {
        null == b && (b = 0);
        null == a && (a = 0);
        yh.call(this, a, b, d);
        a = 0;
        for (b = this.labelOffsets; a < b.length; ) {
          d = b[a];
          ++a;
          var e = d.x - 1,
            f = d.y + 4;
          null == f && (f = 0);
          null == e && (e = 0);
          d.set_x(e);
          d.set_y(f);
        }
        this.set_label(c);
      };
      h["flixel.ui.FlxSpriteButton"] = zl;
      zl.__name__ = "flixel.ui.FlxSpriteButton";
      zl.__interfaces__ = [vg];
      zl.__super__ = yh;
      zl.prototype = q(yh.prototype, { __class__: zl });
      var Od = function () {};
      h["flixel.util.FlxArrayUtil"] = Od;
      Od.__name__ = "flixel.util.FlxArrayUtil";
      Od.setLength_cacheValue_T = function (a, b) {
        if (0 > b) return a;
        var c = b - a.length;
        if (0 <= c) return a;
        b = 0;
        for (c = -c; b < c; ) b++, a.pop();
        return a;
      };
      Od.clearArray = function (a, b) {
        null == b && (b = !1);
        if (null == a) return a;
        if (b)
          for (; 0 < a.length; )
            a.pop() instanceof Array && Od.clearArray(a, b);
        else for (; 0 < a.length; ) a.pop();
        return a;
      };
      Od.equals = function (a, b) {
        if (null == a && null == b) return !0;
        if (
          (null == a && null != b) ||
          (null != a && null == b) ||
          a.length != b.length
        )
          return !1;
        for (var c = 0, d = a.length; c < d; ) {
          var e = c++;
          if (a[e] != b[e]) return !1;
        }
        return !0;
      };
      var ob = {
          __properties__: { get_hue: "get_hue" },
          fromHSB: function (a, b, c, d) {
            null == d && (d = 1);
            var e = ob._new();
            b *= c;
            c -= b;
            var f = (a % 360) / 60;
            a = b * (1 - Math.abs((f % 2) - 1)) + c;
            b += c;
            switch (f | 0) {
              case 0:
                null == d && (d = 1);
                f = Math.round(255 * b);
                e = (e & -16711681) | ((255 < f ? 255 : 0 > f ? 0 : f) << 16);
                f = Math.round(255 * a);
                e = (e & -65281) | ((255 < f ? 255 : 0 > f ? 0 : f) << 8);
                f = Math.round(255 * c);
                e = (e & -256) | (255 < f ? 255 : 0 > f ? 0 : f);
                f = Math.round(255 * d);
                e = (e & 16777215) | ((255 < f ? 255 : 0 > f ? 0 : f) << 24);
                break;
              case 1:
                null == d && (d = 1);
                f = Math.round(255 * a);
                e = (e & -16711681) | ((255 < f ? 255 : 0 > f ? 0 : f) << 16);
                f = Math.round(255 * b);
                e = (e & -65281) | ((255 < f ? 255 : 0 > f ? 0 : f) << 8);
                f = Math.round(255 * c);
                e = (e & -256) | (255 < f ? 255 : 0 > f ? 0 : f);
                f = Math.round(255 * d);
                e = (e & 16777215) | ((255 < f ? 255 : 0 > f ? 0 : f) << 24);
                break;
              case 2:
                null == d && (d = 1);
                f = Math.round(255 * c);
                e = (e & -16711681) | ((255 < f ? 255 : 0 > f ? 0 : f) << 16);
                f = Math.round(255 * b);
                e = (e & -65281) | ((255 < f ? 255 : 0 > f ? 0 : f) << 8);
                f = Math.round(255 * a);
                e = (e & -256) | (255 < f ? 255 : 0 > f ? 0 : f);
                f = Math.round(255 * d);
                e = (e & 16777215) | ((255 < f ? 255 : 0 > f ? 0 : f) << 24);
                break;
              case 3:
                null == d && (d = 1);
                f = Math.round(255 * c);
                e = (e & -16711681) | ((255 < f ? 255 : 0 > f ? 0 : f) << 16);
                f = Math.round(255 * a);
                e = (e & -65281) | ((255 < f ? 255 : 0 > f ? 0 : f) << 8);
                f = Math.round(255 * b);
                e = (e & -256) | (255 < f ? 255 : 0 > f ? 0 : f);
                f = Math.round(255 * d);
                e = (e & 16777215) | ((255 < f ? 255 : 0 > f ? 0 : f) << 24);
                break;
              case 4:
                null == d && (d = 1);
                f = Math.round(255 * a);
                e = (e & -16711681) | ((255 < f ? 255 : 0 > f ? 0 : f) << 16);
                f = Math.round(255 * c);
                e = (e & -65281) | ((255 < f ? 255 : 0 > f ? 0 : f) << 8);
                f = Math.round(255 * b);
                e = (e & -256) | (255 < f ? 255 : 0 > f ? 0 : f);
                f = Math.round(255 * d);
                e = (e & 16777215) | ((255 < f ? 255 : 0 > f ? 0 : f) << 24);
                break;
              case 5:
                null == d && (d = 1),
                  (f = Math.round(255 * b)),
                  (e =
                    (e & -16711681) | ((255 < f ? 255 : 0 > f ? 0 : f) << 16)),
                  (f = Math.round(255 * c)),
                  (e = (e & -65281) | ((255 < f ? 255 : 0 > f ? 0 : f) << 8)),
                  (f = Math.round(255 * a)),
                  (e = (e & -256) | (255 < f ? 255 : 0 > f ? 0 : f)),
                  (f = Math.round(255 * d)),
                  (e =
                    (e & 16777215) | ((255 < f ? 255 : 0 > f ? 0 : f) << 24));
            }
            return e;
          },
          fromString: function (a) {
            var b = null;
            a = K.trim(a);
            if (ob.COLOR_REGEX.match(a))
              (a = "0x" + ob.COLOR_REGEX.matched(2)),
                (b = ob._new(M.parseInt(a))),
                8 == a.length && (b = (b & 16777215) | -16777216);
            else {
              a = a.toUpperCase();
              for (
                var c = Object.keys(ob.colorLookup.h), d = c.length, e = 0;
                e < d;

              ) {
                var f = c[e++];
                if (f.toUpperCase() == a) {
                  b = ob._new(ob.colorLookup.h[f]);
                  break;
                }
              }
            }
            return b;
          },
          _new: function (a) {
            null == a && (a = 0);
            return a;
          },
          get_hue: function (a) {
            a = Math.atan2(
              Math.sqrt(3) * (((a >> 8) & 255) / 255 - (a & 255) / 255),
              (((a >> 16) & 255) / 255) * 2 -
                ((a >> 8) & 255) / 255 -
                (a & 255) / 255
            );
            var b = 0;
            0 != a && (b = (180 / Math.PI) * a);
            return 0 > b ? b + 360 : b;
          },
        },
        of = function () {};
      h["flixel.util.FlxColorTransformUtil"] = of;
      of.__name__ = "flixel.util.FlxColorTransformUtil";
      of.setMultipliers = function (a, b, c, d, e) {
        a.redMultiplier = b;
        a.greenMultiplier = c;
        a.blueMultiplier = d;
        a.alphaMultiplier = e;
        return a;
      };
      of.hasRGBMultipliers = function (a) {
        return 1 == a.redMultiplier && 1 == a.greenMultiplier
          ? 1 != a.blueMultiplier
          : !0;
      };
      of.hasRGBOffsets = function (a) {
        return 0 == a.redOffset && 0 == a.greenOffset ? 0 != a.blueOffset : !0;
      };
      of.hasRGBAOffsets = function (a) {
        return of.hasRGBOffsets(a) ? !0 : 0 != a.alphaOffset;
      };
      var V = function () {};
      h["flixel.util.FlxDestroyUtil"] = V;
      V.__name__ = "flixel.util.FlxDestroyUtil";
      V.destroy = function (a) {
        null != a && a.destroy();
        return null;
      };
      V.destroyArray = function (a) {
        if (null != a) {
          for (var b = 0; b < a.length; ) {
            var c = a[b];
            ++b;
            V.destroy(c);
          }
          a.splice(0, a.length);
        }
        return null;
      };
      V.put = function (a) {
        null != a && a.put();
        return null;
      };
      V.putArray = function (a) {
        if (null != a) {
          for (var b = 0; b < a.length; ) {
            var c = a[b];
            ++b;
            V.put(c);
          }
          a.splice(0, a.length);
        }
        return null;
      };
      V.dispose = function (a) {
        null != a && a.dispose();
        return null;
      };
      V.disposeIfNotEqual = function (a, b, c) {
        if (null != a && (a.width != b || a.height != c)) a.dispose();
        else if (null != a) return a;
        return null;
      };
      V.removeChild = function (a, b) {
        null != a && null != b && a.contains(b) && a.removeChild(b);
        return null;
      };
      var ud = function () {};
      h["flixel.util.FlxGradient"] = ud;
      ud.__name__ = "flixel.util.FlxGradient";
      ud.createGradientMatrix = function (a, b, c, d, e) {
        null == e && (e = 90);
        null == d && (d = 1);
        var f = new xa();
        e *= Math.PI / 180;
        f.createGradientBox(a, rc.toFloat(b) / rc.toFloat(d), e, 0, 0);
        a = [];
        b = 0;
        for (d = c.length; b < d; )
          (e = b++), a.push(((c[e] >> 24) & 255) / 255);
        e = [];
        if (2 == c.length) (e[0] = 0), (e[1] = 255);
        else {
          var k = (255 / (c.length - 1)) | 0;
          e.push(0);
          b = 1;
          for (d = c.length - 1; b < d; ) (c = b++), e.push(c * k);
          e.push(255);
        }
        return { matrix: f, alpha: a, ratio: e };
      };
      ud.createGradientFlxSprite = function (a, b, c, d, e, f) {
        null == f && (f = !0);
        null == e && (e = 90);
        null == d && (d = 1);
        a = ud.createGradientBitmapData(a, b, c, d, e, f);
        b = new F();
        b.set_pixels(a);
        return b;
      };
      ud.createGradientBitmapData = function (a, b, c, d, e, f) {
        null == f && (f = !0);
        null == e && (e = 90);
        null == d && (d = 1);
        rc.gt(1, a) && (a = 1);
        rc.gt(1, b) && (b = 1);
        var k = ud.createGradientMatrix(a, b, c, d, e);
        e = new wg();
        f = f ? 1 : 0;
        e.get_graphics().beginGradientFill(
          0,
          c,
          k.alpha,
          k.ratio,
          k.matrix,
          0,
          f,
          0
        );
        e.get_graphics().drawRect(
          0,
          0,
          rc.toFloat(a),
          rc.toFloat(b) / rc.toFloat(d)
        );
        f = new S(a, b, !0, 0);
        1 == d
          ? f.draw(e)
          : ((k = new lc(new S(a, (rc.toFloat(b) / rc.toFloat(d)) | 0, !0, 0))),
            k.get_bitmapData().draw(e),
            k.set_scaleY(rc.toFloat(d)),
            (d = new xa()),
            d.scale(k.get_scaleX(), k.get_scaleY()),
            f.draw(k, d),
            (d = k.get_height()),
            (a = rc.toFloat(a)),
            (e = k.get_height()),
            (b = new ha(0, d, a, rc.toFloat(b) - e)),
            f.fillRect(b, c[c.length - 1]));
        return f;
      };
      ud.overlayGradientOnBitmapData = function (a, b, c, d, e, f, k, g, l) {
        null == l && (l = !0);
        null == g && (g = 90);
        null == k && (k = 1);
        null == f && (f = 0);
        null == e && (e = 0);
        b > a.width && (b = a.width);
        c > a.height && (c = a.height);
        b = ud.createGradientBitmapData(b, c, d, k, g, l);
        a.copyPixels(
          b,
          new ha(0, 0, b.width, b.height),
          new gb(e, f),
          null,
          null,
          !0
        );
        b.dispose();
        return a;
      };
      var bn = (w["flixel.util.FlxHorizontalAlign"] = {
        __ename__: "flixel.util.FlxHorizontalAlign",
        __constructs__: null,
        LEFT: {
          _hx_name: "LEFT",
          _hx_index: 0,
          __enum__: "flixel.util.FlxHorizontalAlign",
          toString: p,
        },
        CENTER: {
          _hx_name: "CENTER",
          _hx_index: 1,
          __enum__: "flixel.util.FlxHorizontalAlign",
          toString: p,
        },
        RIGHT: {
          _hx_name: "RIGHT",
          _hx_index: 2,
          __enum__: "flixel.util.FlxHorizontalAlign",
          toString: p,
        },
      });
      bn.__constructs__ = [bn.LEFT, bn.CENTER, bn.RIGHT];
      var fg = function () {
        pa.call(this);
        this.client = this;
        this.objectEncoding = fg.defaultObjectEncoding;
      };
      h["openfl.net.SharedObject"] = fg;
      fg.__name__ = "openfl.net.SharedObject";
      fg.__resolveClass = function (a) {
        return null != a
          ? (K.startsWith(a, "neash.") &&
              (a = K.replace(a, "neash.", "openfl.")),
            K.startsWith(a, "native.") &&
              (a = K.replace(a, "native.", "openfl.")),
            K.startsWith(a, "flash.") &&
              (a = K.replace(a, "flash.", "openfl.")),
            K.startsWith(a, "openfl._v2.") &&
              (a = K.replace(a, "openfl._v2.", "openfl.")),
            K.startsWith(a, "openfl._legacy.") &&
              (a = K.replace(a, "openfl._legacy.", "openfl.")),
            h[a])
          : null;
      };
      fg.__super__ = pa;
      fg.prototype = q(pa.prototype, {
        clear: function () {
          this.data = {};
          try {
            var a = xg.getLocalStorage();
            null != a && a.removeItem(this.__localPath + ":" + this.__name);
          } catch (b) {}
        },
        flush: function (a) {
          if (0 == qa.fields(this.data).length) return 0;
          a = he.run(this.data);
          try {
            var b = xg.getLocalStorage();
            null != b &&
              (b.removeItem(this.__localPath + ":" + this.__name),
              b.setItem(this.__localPath + ":" + this.__name, a));
          } catch (c) {
            return 1;
          }
          return 0;
        },
        __class__: fg,
      });
      var Uc = function () {
        fg.call(this);
      };
      h["flixel.util._FlxSave.FlxSharedObject"] = Uc;
      Uc.__name__ = "flixel.util._FlxSave.FlxSharedObject";
      Uc.init = function () {
        if (null == Uc.all) {
          Uc.all = new Q();
          var a = B.current;
          null != a && a.onExit.add(Uc.onExit);
        }
      };
      Uc.onExit = function (a) {
        a = Uc.all.h;
        for (var b = Object.keys(a), c = b.length, d = 0; d < c; )
          a[b[d++]].flush();
      };
      Uc.getDefaultLocalPath = function () {
        var a = sa.get_current().stage.application.meta.h.company;
        return (a = null == a || "" == a ? "HaxeFlixel" : ke.validate(a));
      };
      Uc.getLocal = function (a, b) {
        if (null == a || "" == a)
          throw new Cb('Error: Invalid name:"' + a + '".');
        null == b && (b = "");
        var c = b + "/" + a;
        Uc.init();
        if (!Object.prototype.hasOwnProperty.call(Uc.all.h, c)) {
          var d = null;
          try {
            if (new ya("(?:^|/)\\.\\./", "").match(b))
              throw new Cb("../ not allowed in localPath");
            d = Uc.getData(a, b);
          } catch (k) {}
          "" == b && (b = Uc.getDefaultLocalPath());
          var e = new Uc();
          e.data = {};
          e.__localPath = b;
          e.__name = a;
          if (null != d && "" != d)
            try {
              var f = new Rd(d);
              f.setResolver({
                resolveEnum: zb.resolveEnum,
                resolveClass: fg.__resolveClass,
              });
              e.data = f.unserialize();
            } catch (k) {}
          Uc.all.h[c] = e;
        }
        return Uc.all.h[c];
      };
      Uc.getData = function (a, b) {
        var c = xg.getLocalStorage();
        if (null == c) return null;
        if ("" != b) return c.getItem(b + ":" + a);
        b = c.getItem(Uc.getDefaultLocalPath() + ":" + a);
        if (null != b) return b;
        b = c.getItem(window.location.pathname + ":" + a);
        return null != b ? b : c.getItem(window.location.href + ":" + a);
      };
      Uc.__super__ = fg;
      Uc.prototype = q(fg.prototype, { __class__: Uc });
      var th = (w["flixel.util.FlxSaveStatus"] = {
        __ename__: "flixel.util.FlxSaveStatus",
        __constructs__: null,
        EMPTY: {
          _hx_name: "EMPTY",
          _hx_index: 0,
          __enum__: "flixel.util.FlxSaveStatus",
          toString: p,
        },
        BOUND:
          ((x = function (a, b) {
            return {
              _hx_index: 1,
              name: a,
              path: b,
              __enum__: "flixel.util.FlxSaveStatus",
              toString: p,
            };
          }),
          (x._hx_name = "BOUND"),
          (x.__params__ = ["name", "path"]),
          x),
        ERROR:
          ((x = function (a) {
            return {
              _hx_index: 2,
              msg: a,
              __enum__: "flixel.util.FlxSaveStatus",
              toString: p,
            };
          }),
          (x._hx_name = "ERROR"),
          (x.__params__ = ["msg"]),
          x),
      });
      th.__constructs__ = [th.EMPTY, th.BOUND, th.ERROR];
      var Al = function (a, b) {
        this.dispatchOnce = !1;
        this.listener = a;
        this.dispatchOnce = b;
      };
      h["flixel.util._FlxSignal.FlxSignalHandler"] = Al;
      Al.__name__ = "flixel.util._FlxSignal.FlxSignalHandler";
      Al.__interfaces__ = [U];
      Al.prototype = {
        destroy: function () {
          this.listener = null;
        },
        __class__: Al,
      };
      var vj = function () {};
      h["flixel.util.IFlxSignal"] = vj;
      vj.__name__ = "flixel.util.IFlxSignal";
      vj.__isInterface__ = !0;
      vj.__interfaces__ = [U];
      vj.prototype = { __class__: vj };
      var nf = function () {
        this.processingListeners = !1;
        this.handlers = [];
        this.pendingRemove = [];
      };
      h["flixel.util._FlxSignal.FlxBaseSignal"] = nf;
      nf.__name__ = "flixel.util._FlxSignal.FlxBaseSignal";
      nf.__interfaces__ = [vj];
      nf.prototype = {
        add: function (a) {
          null != a && this.registerListener(a, !1);
        },
        remove: function (a) {
          null != a &&
            ((a = this.getHandler(a)),
            null != a &&
              (this.processingListeners
                ? this.pendingRemove.push(a)
                : (X.remove(this.handlers, a), a.destroy())));
        },
        destroy: function () {
          V.destroyArray(this.handlers);
          this.pendingRemove = this.handlers = null;
        },
        registerListener: function (a, b) {
          var c = this.getHandler(a);
          if (null == c) return (c = new Al(a, b)), this.handlers.push(c), c;
          if (c.dispatchOnce != b)
            throw N.thrown(
              "You cannot addOnce() then add() the same listener without removing the relationship first."
            );
          return c;
        },
        getHandler: function (a) {
          for (var b = 0, c = this.handlers; b < c.length; ) {
            var d = c[b];
            ++b;
            if (d.listener == a) return d;
          }
          return null;
        },
        __class__: nf,
      };
      var Qd = function () {
        nf.call(this);
        this.dispatch = n(this, this.dispatch0);
      };
      h["flixel.util._FlxSignal.FlxSignal0"] = Qd;
      Qd.__name__ = "flixel.util._FlxSignal.FlxSignal0";
      Qd.__super__ = nf;
      Qd.prototype = q(nf.prototype, {
        dispatch0: function () {
          this.processingListeners = !0;
          for (var a = 0, b = this.handlers; a < b.length; ) {
            var c = b[a];
            ++a;
            c.listener();
            c.dispatchOnce && this.remove(c.listener);
          }
          this.processingListeners = !1;
          a = 0;
          for (b = this.pendingRemove; a < b.length; )
            (c = b[a]), ++a, this.remove(c.listener);
          0 < this.pendingRemove.length && (this.pendingRemove = []);
        },
        __class__: Qd,
      });
      var pf = function () {
        nf.call(this);
        this.dispatch = n(this, this.dispatch1);
      };
      h["flixel.util._FlxSignal.FlxSignal1"] = pf;
      pf.__name__ = "flixel.util._FlxSignal.FlxSignal1";
      pf.__super__ = nf;
      pf.prototype = q(nf.prototype, {
        dispatch1: function (a) {
          this.processingListeners = !0;
          for (var b = 0, c = this.handlers; b < c.length; ) {
            var d = c[b];
            ++b;
            d.listener(a);
            d.dispatchOnce && this.remove(d.listener);
          }
          this.processingListeners = !1;
          b = 0;
          for (c = this.pendingRemove; b < c.length; )
            (d = c[b]), ++b, this.remove(d.listener);
          0 < this.pendingRemove.length && (this.pendingRemove = []);
        },
        __class__: pf,
      });
      var Dk = function () {
        nf.call(this);
        this.dispatch = n(this, this.dispatch2);
      };
      h["flixel.util._FlxSignal.FlxSignal2"] = Dk;
      Dk.__name__ = "flixel.util._FlxSignal.FlxSignal2";
      Dk.__super__ = nf;
      Dk.prototype = q(nf.prototype, {
        dispatch2: function (a, b) {
          this.processingListeners = !0;
          for (var c = 0, d = this.handlers; c < d.length; ) {
            var e = d[c];
            ++c;
            e.listener(a, b);
            e.dispatchOnce && this.remove(e.listener);
          }
          this.processingListeners = !1;
          c = 0;
          for (d = this.pendingRemove; c < d.length; )
            (e = d[c]), ++c, this.remove(e.listener);
          0 < this.pendingRemove.length && (this.pendingRemove = []);
        },
        __class__: Dk,
      });
      var Um = function () {};
      h["flixel.util.FlxSort"] = Um;
      Um.__name__ = "flixel.util.FlxSort";
      Um.byY = function (a, b, c) {
        b = b.y;
        c = c.y;
        var d = 0;
        b < c ? (d = a) : b > c && (d = -a);
        return d;
      };
      var wd = function () {};
      h["flixel.util.FlxSpriteUtil"] = wd;
      wd.__name__ = "flixel.util.FlxSpriteUtil";
      wd.drawLine = function (a, b, c, d, e, f, k) {
        null == f && (f = { thickness: 1, color: -1 });
        null == f.thickness && (f.thickness = 1);
        null == f.color && (f.color = -1);
        wd.flashGfx.clear();
        if (null != f) {
          var g = null == f.color ? -16777216 : f.color;
          null == f.thickness && (f.thickness = 1);
          null == f.pixelHinting && (f.pixelHinting = !1);
          null == f.miterLimit && (f.miterLimit = 3);
          wd.flashGfx.lineStyle(
            f.thickness,
            g & 16777215,
            ((g >> 24) & 255) / 255,
            f.pixelHinting,
            f.scaleMode,
            f.capsStyle,
            f.jointStyle,
            f.miterLimit
          );
        }
        wd.flashGfx.moveTo(b, c);
        wd.flashGfx.lineTo(d, e);
        wd.flashGfx.endFill();
        wd.updateSpriteGraphic(a, k);
        return a;
      };
      wd.updateSpriteGraphic = function (a, b) {
        null == b
          ? (b = { smoothing: !1 })
          : null == b.smoothing && (b.smoothing = !1);
        a.get_pixels().draw(
          wd.flashGfxSprite,
          b.matrix,
          b.colorTransform,
          b.blendMode,
          b.clipRect,
          b.smoothing
        );
        a.dirty = !0;
        return a;
      };
      var Bb = function () {};
      h["flixel.util.FlxStringUtil"] = Bb;
      Bb.__name__ = "flixel.util.FlxStringUtil";
      Bb.formatTime = function (a, b) {
        null == b && (b = !1);
        var c = ((a / 60) | 0) + ":",
          d = (a | 0) % 60;
        10 > d && (c += "0");
        c += d;
        b &&
          ((c += "."),
          (d = (100 * (a - (a | 0))) | 0),
          10 > d && (c += "0"),
          (c += d));
        return c;
      };
      Bb.getClassName = function (a, b) {
        null == b && (b = !1);
        a = za.__instanceof(a, $m) ? a : za.getClass(a);
        return Bb.formatPackage(a.__name__, b);
      };
      Bb.formatPackage = function (a, b) {
        if (null == a) return null;
        a = K.replace(a, "::", ".");
        b && (a = X.substr(a, a.lastIndexOf(".") + 1, null));
        return a;
      };
      Bb.getHost = function (a) {
        var b = new ya(
          "^(?:[a-z][a-z0-9+\\-.]*://)?(?:[a-z0-9\\-._~%!$&'()*+,;=]+@)?([a-z0-9\\-._~%]{3,}|\\[[a-f0-9:.]+\\])?(?::[0-9]+)?",
          "i"
        );
        return b.match(a) && ((a = b.matched(1)), null != a)
          ? decodeURIComponent(a.split("+").join(" ")).toLowerCase()
          : "";
      };
      Bb.getDomain = function (a) {
        a = Bb.getHost(a);
        var b = new ya("^(localhost|[0-9.]+|\\[[a-f0-9:.]+\\])$", "i"),
          c = new ya(
            "^(?:[a-z0-9\\-]+\\.)*([a-z0-9\\-]+\\.[a-z0-9\\-]+)$",
            "i"
          );
        return !b.match(a) && c.match(a) && ((a = c.matched(1)), null != a)
          ? a.toLowerCase()
          : "";
      };
      Bb.toIntArray = function (a) {
        if (null != a && "" != a) {
          a = a.split(",");
          for (var b = [], c = 0; c < a.length; ) {
            var d = a[c];
            ++c;
            b.push(M.parseInt(d));
          }
          return b;
        }
        return null;
      };
      Bb.getDebugString = function (a) {
        for (var b = "(", c = 0; c < a.length; ) {
          var d = a[c];
          ++c;
          b += d.label + ": ";
          var e = d.value;
          "number" == typeof e &&
            (e = hc.roundDecimal(e, g.debugger.precision));
          b += M.string(e) + " | ";
          Ic._pool.put(d);
        }
        b = K.trim(X.substr(b, 0, b.length - 2));
        return b + ")";
      };
      var Ic = function () {};
      h["flixel.util.LabelValuePair"] = Ic;
      Ic.__name__ = "flixel.util.LabelValuePair";
      Ic.__interfaces__ = [U];
      Ic.prototype = {
        destroy: function () {
          this.value = this.label = null;
        },
        __class__: Ic,
      };
      var fc = function (a) {
        this._inManager = !1;
        this._timeCounter = this._loopsCounter = 0;
        this.active = this.finished = !1;
        this.time = this.loops = 0;
        this.manager = null != a ? a : fc.globalManager;
      };
      h["flixel.util.FlxTimer"] = fc;
      fc.__name__ = "flixel.util.FlxTimer";
      fc.__interfaces__ = [U];
      fc.prototype = {
        destroy: function () {
          this.onComplete = null;
        },
        start: function (a, b, c) {
          null == c && (c = 1);
          null == a && (a = 1);
          null == this.manager ||
            this._inManager ||
            (this.manager.add(this), (this._inManager = !0));
          this.active = !0;
          this.finished = !1;
          this.time = Math.abs(a);
          0 > c && (c *= -1);
          this.loops = c;
          this.onComplete = b;
          this._loopsCounter = this._timeCounter = 0;
          return this;
        },
        reset: function (a) {
          null == a && (a = -1);
          0 > a && (a = this.time);
          this.start(a, this.onComplete, this.loops);
          return this;
        },
        cancel: function () {
          this.finished = !0;
          this.active = !1;
          null != this.manager &&
            this._inManager &&
            (this.manager.remove(this), (this._inManager = !1));
        },
        update: function (a) {
          for (
            this._timeCounter += a;
            this._timeCounter >= this.time && this.active && !this.finished;

          )
            (this._timeCounter -= this.time),
              this._loopsCounter++,
              0 < this.loops &&
                this._loopsCounter >= this.loops &&
                (this.finished = !0);
        },
        onLoopFinished: function () {
          this.finished && this.cancel();
          if (null != this.onComplete) this.onComplete(this);
        },
        __class__: fc,
      };
      var ul = function () {
        this._timers = [];
        O.call(this);
        this.set_visible(!1);
        g.signals.preStateSwitch.add(n(this, this.clear));
      };
      h["flixel.util.FlxTimerManager"] = ul;
      ul.__name__ = "flixel.util.FlxTimerManager";
      ul.__super__ = O;
      ul.prototype = q(O.prototype, {
        destroy: function () {
          Od.clearArray(this._timers);
          this._timers = null;
          g.signals.preStateSwitch.remove(n(this, this.clear));
          O.prototype.destroy.call(this);
        },
        update: function (a) {
          for (var b = null, c = 0, d = this._timers; c < d.length; ) {
            var e = d[c];
            ++c;
            if (e.active && !e.finished && 0 <= e.time) {
              var f = e._loopsCounter;
              e.update(a);
              f != e._loopsCounter && (null == b && (b = []), b.push(e));
            }
          }
          if (null != b) for (; 0 < b.length; ) b.shift().onLoopFinished();
        },
        add: function (a) {
          this._timers.push(a);
        },
        remove: function (a) {
          var b = this._timers;
          a = b.indexOf(a);
          -1 != a && ((b[a] = b[b.length - 1]), b.pop());
        },
        clear: function () {
          Od.clearArray(this._timers);
        },
        __class__: ul,
      });
      var an = (w["flixel.util.FlxVerticalAlign"] = {
        __ename__: "flixel.util.FlxVerticalAlign",
        __constructs__: null,
        TOP: {
          _hx_name: "TOP",
          _hx_index: 0,
          __enum__: "flixel.util.FlxVerticalAlign",
          toString: p,
        },
        CENTER: {
          _hx_name: "CENTER",
          _hx_index: 1,
          __enum__: "flixel.util.FlxVerticalAlign",
          toString: p,
        },
        BOTTOM: {
          _hx_name: "BOTTOM",
          _hx_index: 2,
          __enum__: "flixel.util.FlxVerticalAlign",
          toString: p,
        },
      });
      an.__constructs__ = [an.TOP, an.CENTER, an.BOTTOM];
      var Xg = function (a, b) {
        this.active = !0;
        this.min = a;
        this.max = null == b ? a : b;
      };
      h["flixel.util.helpers.FlxBounds"] = Xg;
      Xg.__name__ = "flixel.util.helpers.FlxBounds";
      Xg.prototype = { __class__: Xg };
      var wh = function (a, b, c, d, e, f, k, g) {
        this.active = !0;
        var l = 0,
          r = 0;
        null == r && (r = 0);
        null == l && (l = 0);
        var h = ba.pool.get().set(l, r);
        h._inPool = !1;
        r = l = 0;
        null == r && (r = 0);
        null == l && (l = 0);
        l = ba.pool.get().set(l, r);
        l._inPool = !1;
        this.start = new Xg(h, l);
        r = l = 0;
        null == r && (r = 0);
        null == l && (l = 0);
        h = ba.pool.get().set(l, r);
        h._inPool = !1;
        r = l = 0;
        null == r && (r = 0);
        null == l && (l = 0);
        l = ba.pool.get().set(l, r);
        l._inPool = !1;
        this.end = new Xg(h, l);
        this.set(a, b, c, d, e, f, k, g);
      };
      h["flixel.util.helpers.FlxPointRangeBounds"] = wh;
      wh.__name__ = "flixel.util.helpers.FlxPointRangeBounds";
      wh.__interfaces__ = [U];
      wh.prototype = {
        set: function (a, b, c, d, e, f, k, g) {
          this.start.min.set_x(a);
          this.start.min.set_y(null == b ? this.start.min.x : b);
          this.start.max.set_x(null == c ? this.start.min.x : c);
          this.start.max.set_y(null == d ? this.start.min.y : d);
          this.end.min.set_x(null == e ? this.start.min.x : e);
          this.end.min.set_y(null == f ? this.start.min.y : f);
          this.end.max.set_x(
            null == k ? (null == e ? this.start.max.x : this.end.min.x) : k
          );
          this.end.max.set_y(
            null == g ? (null == f ? this.start.max.y : this.end.min.y) : g
          );
          return this;
        },
        destroy: function () {
          this.start.min = V.put(this.start.min);
          this.start.max = V.put(this.start.max);
          this.end.min = V.put(this.end.min);
          this.end.max = V.put(this.end.max);
        },
        __class__: wh,
      };
      var yf = function (a, b) {
        this.active = !0;
        this.start = a;
        this.end = null == b ? a : b;
      };
      h["flixel.util.helpers.FlxRange"] = yf;
      yf.__name__ = "flixel.util.helpers.FlxRange";
      yf.prototype = { __class__: yf };
      var ag = function (a, b, c, d) {
        this.active = !0;
        this.start = new Xg(a, null == b ? a : b);
        this.end = new Xg(null == c ? a : c, null == d ? this.start.max : d);
      };
      h["flixel.util.helpers.FlxRangeBounds"] = ag;
      ag.__name__ = "flixel.util.helpers.FlxRangeBounds";
      ag.prototype = { __class__: ag };
      var Pf = (w["haxe.StackItem"] = {
        __ename__: "haxe.StackItem",
        __constructs__: null,
        CFunction: {
          _hx_name: "CFunction",
          _hx_index: 0,
          __enum__: "haxe.StackItem",
          toString: p,
        },
        Module:
          ((x = function (a) {
            return {
              _hx_index: 1,
              m: a,
              __enum__: "haxe.StackItem",
              toString: p,
            };
          }),
          (x._hx_name = "Module"),
          (x.__params__ = ["m"]),
          x),
        FilePos:
          ((x = function (a, b, c, d) {
            return {
              _hx_index: 2,
              s: a,
              file: b,
              line: c,
              column: d,
              __enum__: "haxe.StackItem",
              toString: p,
            };
          }),
          (x._hx_name = "FilePos"),
          (x.__params__ = ["s", "file", "line", "column"]),
          x),
        Method:
          ((x = function (a, b) {
            return {
              _hx_index: 3,
              classname: a,
              method: b,
              __enum__: "haxe.StackItem",
              toString: p,
            };
          }),
          (x._hx_name = "Method"),
          (x.__params__ = ["classname", "method"]),
          x),
        LocalFunction:
          ((x = function (a) {
            return {
              _hx_index: 4,
              v: a,
              __enum__: "haxe.StackItem",
              toString: p,
            };
          }),
          (x._hx_name = "LocalFunction"),
          (x.__params__ = ["v"]),
          x),
      });
      Pf.__constructs__ = [
        Pf.CFunction,
        Pf.Module,
        Pf.FilePos,
        Pf.Method,
        Pf.LocalFunction,
      ];
      var ch = {
          callStack: function () {
            return pc.toHaxe(pc.callStack());
          },
          exceptionStack: function (a) {
            null == a && (a = !1);
            var b = pc.toHaxe(pc.exceptionStack());
            return a ? b : ch.subtract(b, ch.callStack());
          },
          toString: function (a) {
            for (var b = new Yf(), c = 0; c < a.length; ) {
              var d = a[c];
              ++c;
              b.b += "\nCalled from ";
              ch.itemToString(b, d);
            }
            return b.b;
          },
          subtract: function (a, b) {
            for (var c = -1, d = -1; ++d < a.length; ) {
              for (var e = 0, f = b.length; e < f; ) {
                var k = e++;
                if (ch.equalItems(a[d], b[k])) {
                  if ((0 > c && (c = d), ++d, d >= a.length)) break;
                } else c = -1;
              }
              if (0 <= c) break;
            }
            return 0 <= c ? a.slice(0, c) : a;
          },
          equalItems: function (a, b) {
            if (null == a) return null == b ? !0 : !1;
            switch (a._hx_index) {
              case 0:
                return null == b ? !1 : 0 == b._hx_index ? !0 : !1;
              case 1:
                return null == b ? !1 : 1 == b._hx_index ? a.m == b.m : !1;
              case 2:
                if (null == b) return !1;
                if (2 == b._hx_index) {
                  var c = b.s,
                    d = b.line,
                    e = b.column,
                    f = a.column,
                    k = a.line,
                    g = a.s;
                  return a.file == b.file && k == d && f == e
                    ? ch.equalItems(g, c)
                    : !1;
                }
                return !1;
              case 3:
                return null == b
                  ? !1
                  : 3 == b._hx_index
                  ? ((c = b.method),
                    (d = a.method),
                    a.classname == b.classname ? d == c : !1)
                  : !1;
              case 4:
                return null == b ? !1 : 4 == b._hx_index ? a.v == b.v : !1;
            }
          },
          itemToString: function (a, b) {
            switch (b._hx_index) {
              case 0:
                a.b += "a C function";
                break;
              case 1:
                b = b.m;
                a.b += "module ";
                a.b += null == b ? "null" : "" + b;
                break;
              case 2:
                var c = b.s,
                  d = b.file,
                  e = b.line;
                b = b.column;
                null != c && (ch.itemToString(a, c), (a.b += " ("));
                a.b += null == d ? "null" : "" + d;
                a.b += " line ";
                a.b += null == e ? "null" : "" + e;
                null != b &&
                  ((a.b += " column "), (a.b += null == b ? "null" : "" + b));
                null != c && (a.b += ")");
                break;
              case 3:
                c = b.classname;
                b = b.method;
                a.b += M.string(null == c ? "<unknown>" : c);
                a.b += ".";
                a.b += null == b ? "null" : "" + b;
                break;
              case 4:
                (b = b.v),
                  (a.b += "local function #"),
                  (a.b += null == b ? "null" : "" + b);
            }
          },
        },
        N = function (a, b, c) {
          Error.call(this, a);
          this.message = a;
          this.__previousException = b;
          this.__nativeException = null != c ? c : this;
          this.__skipStack = 0;
          a = Error.prepareStackTrace;
          Error.prepareStackTrace = function (a) {
            return a.stack;
          };
          if (c instanceof Error) this.stack = c.stack;
          else {
            c = null;
            if (Error.captureStackTrace)
              Error.captureStackTrace(this, N), (c = this);
            else if (((c = Error()), "undefined" == typeof c.stack)) {
              try {
                throw c;
              } catch (d) {}
              this.__skipStack++;
            }
            this.stack = c.stack;
          }
          Error.prepareStackTrace = a;
        };
      h["haxe.Exception"] = N;
      N.__name__ = "haxe.Exception";
      N.caught = function (a) {
        return a instanceof N
          ? a
          : a instanceof Error
          ? new N(a.message, null, a)
          : new wj(a, null, a);
      };
      N.thrown = function (a) {
        if (a instanceof N) return a.get_native();
        if (a instanceof Error) return a;
        a = new wj(a);
        a.__skipStack++;
        return a;
      };
      N.__super__ = Error;
      N.prototype = q(Error.prototype, {
        unwrap: function () {
          return this.__nativeException;
        },
        toString: function () {
          return this.get_message();
        },
        __shiftStack: function () {
          this.__skipStack++;
        },
        get_message: function () {
          return this.message;
        },
        get_native: function () {
          return this.__nativeException;
        },
        get_stack: function () {
          var a = this.__exceptionStack;
          null == a &&
            ((a = pc.toHaxe(pc.normalize(this.stack), this.__skipStack)),
            this.setProperty("__exceptionStack", a));
          return a;
        },
        setProperty: function (a, b) {
          try {
            Object.defineProperty(this, a, { value: b });
          } catch (c) {
            this[a] = b;
          }
        },
        __class__: N,
        __properties__: {
          get_native: "get_native",
          get_stack: "get_stack",
          get_message: "get_message",
        },
      });
      var sb = function (a, b) {
        this.high = a;
        this.low = b;
      };
      h["haxe._Int64.___Int64"] = sb;
      sb.__name__ = "haxe._Int64.___Int64";
      sb.prototype = { __class__: sb };
      var pc = function () {};
      h["haxe.NativeStackTrace"] = pc;
      pc.__name__ = "haxe.NativeStackTrace";
      pc.saveStack = function (a) {
        pc.lastError = a;
      };
      pc.callStack = function () {
        var a = Error(""),
          b = pc.tryHaxeStack(a);
        if ("undefined" == typeof b) {
          try {
            throw a;
          } catch (c) {}
          b = a.stack;
        }
        return pc.normalize(b, 2);
      };
      pc.exceptionStack = function () {
        return pc.normalize(pc.tryHaxeStack(pc.lastError));
      };
      pc.toHaxe = function (a, b) {
        null == b && (b = 0);
        if (null == a) return [];
        if ("string" == typeof a) {
          a = a.split("\n");
          "Error" == a[0] && a.shift();
          for (var c = [], d = 0, e = a.length; d < e; ) {
            var f = d++;
            if (!(b > f)) {
              var k = a[f];
              f = k.match(
                /^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/
              );
              if (null != f) {
                k = f[1].split(".");
                "$hxClasses" == k[0] && k.shift();
                var g = k.pop(),
                  l = f[2],
                  h = M.parseInt(f[3]);
                f = M.parseInt(f[4]);
                c.push(
                  Pf.FilePos(
                    "Anonymous function" == g
                      ? Pf.LocalFunction()
                      : "Global code" == g
                      ? null
                      : Pf.Method(k.join("."), g),
                    l,
                    h,
                    f
                  )
                );
              } else c.push(Pf.Module(K.trim(k)));
            }
          }
          return c;
        }
        return 0 < b && Array.isArray(a) ? a.slice(b) : a;
      };
      pc.tryHaxeStack = function (a) {
        if (null == a) return [];
        var b = Error.prepareStackTrace;
        Error.prepareStackTrace = pc.prepareHxStackTrace;
        a = a.stack;
        Error.prepareStackTrace = b;
        return a;
      };
      pc.prepareHxStackTrace = function (a, b) {
        a = [];
        for (var c = 0; c < b.length; ) {
          var d = b[c];
          ++c;
          null != pc.wrapCallSite && (d = pc.wrapCallSite(d));
          var e = null,
            f = d.getFunctionName();
          if (null != f) {
            var k = f.lastIndexOf(".");
            0 <= k
              ? ((e = f.substring(0, k)),
                (f = f.substring(k + 1)),
                (e = Pf.Method(e, f)))
              : (e = Pf.Method(null, f));
          }
          f = d.getFileName();
          k = null == f ? -1 : f.indexOf("file:");
          null != pc.wrapCallSite && 0 < k && (f = f.substring(k + 6));
          a.push(Pf.FilePos(e, f, d.getLineNumber(), d.getColumnNumber()));
        }
        return a;
      };
      pc.normalize = function (a, b) {
        null == b && (b = 0);
        if (Array.isArray(a) && 0 < b) return a.slice(b);
        if ("string" == typeof a) {
          switch (a.substring(0, 6)) {
            case "Error\n":
            case "Error:":
              ++b;
          }
          return pc.skipLines(a, b);
        }
        return a;
      };
      pc.skipLines = function (a, b, c) {
        null == c && (c = 0);
        return 0 < b
          ? ((c = a.indexOf("\n", c)), 0 > c ? "" : pc.skipLines(a, --b, c + 1))
          : a.substring(c);
      };
      var Tb = function () {};
      h["haxe.Resource"] = Tb;
      Tb.__name__ = "haxe.Resource";
      Tb.getString = function (a) {
        for (var b = 0, c = Tb.content; b < c.length; ) {
          var d = c[b];
          ++b;
          if (d.name == a)
            return null != d.str ? d.str : ii.decode(d.data).toString();
        }
        return null;
      };
      var he = function () {
        this.buf = new Yf();
        this.cache = [];
        this.useCache = he.USE_CACHE;
        this.useEnumIndex = he.USE_ENUM_INDEX;
        this.shash = new Q();
        this.scount = 0;
      };
      h["haxe.Serializer"] = he;
      he.__name__ = "haxe.Serializer";
      he.run = function (a) {
        var b = new he();
        b.serialize(a);
        return b.toString();
      };
      he.prototype = {
        toString: function () {
          return this.buf.b;
        },
        serializeString: function (a) {
          var b = this.shash.h[a];
          null != b
            ? ((this.buf.b += "R"), (this.buf.b += null == b ? "null" : "" + b))
            : ((this.shash.h[a] = this.scount++),
              (this.buf.b += "y"),
              (a = encodeURIComponent(a)),
              (this.buf.b += M.string(a.length)),
              (this.buf.b += ":"),
              (this.buf.b += null == a ? "null" : "" + a));
        },
        serializeRef: function (a) {
          for (var b = typeof a, c = 0, d = this.cache.length; c < d; ) {
            var e = c++,
              f = this.cache[e];
            if (typeof f == b && f == a)
              return (
                (this.buf.b += "r"),
                (this.buf.b += null == e ? "null" : "" + e),
                !0
              );
          }
          this.cache.push(a);
          return !1;
        },
        serializeFields: function (a) {
          for (var b = 0, c = qa.fields(a); b < c.length; ) {
            var d = c[b];
            ++b;
            this.serializeString(d);
            this.serialize(qa.field(a, d));
          }
          this.buf.b += "g";
        },
        serialize: function (a) {
          var b = zb.typeof(a);
          switch (b._hx_index) {
            case 0:
              this.buf.b += "n";
              break;
            case 1:
              if (0 == a) {
                this.buf.b += "z";
                break;
              }
              this.buf.b += "i";
              this.buf.b += null == a ? "null" : "" + a;
              break;
            case 2:
              isNaN(a)
                ? (this.buf.b += "k")
                : isFinite(a)
                ? ((this.buf.b += "d"),
                  (this.buf.b += null == a ? "null" : "" + a))
                : (this.buf.b += 0 > a ? "m" : "p");
              break;
            case 3:
              this.buf.b += a ? "t" : "f";
              break;
            case 4:
              za.__instanceof(a, $m)
                ? ((a = a.__name__),
                  (this.buf.b += "A"),
                  this.serializeString(a))
                : za.__instanceof(a, Ro)
                ? ((this.buf.b += "B"), this.serializeString(a.__ename__))
                : (this.useCache && this.serializeRef(a)) ||
                  ((this.buf.b += "o"), this.serializeFields(a));
              break;
            case 5:
              throw N.thrown("Cannot serialize function");
            case 6:
              b = b.c;
              if (b == String) {
                this.serializeString(a);
                break;
              }
              if (this.useCache && this.serializeRef(a)) break;
              switch (b) {
                case Array:
                  var c = 0;
                  this.buf.b += "a";
                  for (var d = 0, e = a.length; d < e; )
                    (b = d++),
                      null == a[b]
                        ? ++c
                        : (0 < c &&
                            (1 == c
                              ? (this.buf.b += "n")
                              : ((this.buf.b += "u"),
                                (this.buf.b += null == c ? "null" : "" + c)),
                            (c = 0)),
                          this.serialize(a[b]));
                  0 < c &&
                    (1 == c
                      ? (this.buf.b += "n")
                      : ((this.buf.b += "u"),
                        (this.buf.b += null == c ? "null" : "" + c)));
                  this.buf.b += "h";
                  break;
                case Date:
                  this.buf.b += "v";
                  this.buf.b += M.string(a.getTime());
                  break;
                case kc:
                  this.buf.b += "q";
                  for (b = a.keys(); b.hasNext(); )
                    (c = b.next()),
                      (this.buf.b += ":"),
                      (this.buf.b += null == c ? "null" : "" + c),
                      this.serialize(a.h[c]);
                  this.buf.b += "h";
                  break;
                case kb:
                  this.buf.b += "l";
                  for (a = a.h; null != a; )
                    (b = a.item), (a = a.next), this.serialize(b);
                  this.buf.b += "h";
                  break;
                case Yb:
                  this.buf.b += "M";
                  for (b = a.keys(); b.hasNext(); ) {
                    c = b.next();
                    var f = qa.field(c, "__id__");
                    qa.deleteField(c, "__id__");
                    this.serialize(c);
                    c.__id__ = f;
                    this.serialize(a.h[c.__id__]);
                  }
                  this.buf.b += "h";
                  break;
                case Q:
                  this.buf.b += "b";
                  c = Object.keys(a.h);
                  f = c.length;
                  for (d = 0; d < f; )
                    (b = c[d++]),
                      this.serializeString(b),
                      this.serialize(a.h[b]);
                  this.buf.b += "h";
                  break;
                case Nb:
                  this.buf.b += "s";
                  this.buf.b += M.string(Math.ceil((8 * a.length) / 6));
                  this.buf.b += ":";
                  b = 0;
                  c = a.length - 2;
                  f = he.BASE64_CODES;
                  if (null == f) {
                    f = Array(he.BASE64.length);
                    d = 0;
                    for (e = he.BASE64.length; d < e; ) {
                      var k = d++;
                      f[k] = X.cca(he.BASE64, k);
                    }
                    he.BASE64_CODES = f;
                  }
                  for (; b < c; )
                    (d = a.b[b++]),
                      (e = a.b[b++]),
                      (k = a.b[b++]),
                      (this.buf.b += String.fromCodePoint(f[d >> 2])),
                      (this.buf.b += String.fromCodePoint(
                        f[((d << 4) | (e >> 4)) & 63]
                      )),
                      (this.buf.b += String.fromCodePoint(
                        f[((e << 2) | (k >> 6)) & 63]
                      )),
                      (this.buf.b += String.fromCodePoint(f[k & 63]));
                  b == c
                    ? ((d = a.b[b++]),
                      (e = a.b[b++]),
                      (this.buf.b += String.fromCodePoint(f[d >> 2])),
                      (this.buf.b += String.fromCodePoint(
                        f[((d << 4) | (e >> 4)) & 63]
                      )),
                      (this.buf.b += String.fromCodePoint(f[(e << 2) & 63])))
                    : b == c + 1 &&
                      ((d = a.b[b++]),
                      (this.buf.b += String.fromCodePoint(f[d >> 2])),
                      (this.buf.b += String.fromCodePoint(f[(d << 4) & 63])));
                  break;
                default:
                  this.useCache && this.cache.pop(),
                    null != a.hxSerialize
                      ? ((this.buf.b += "C"),
                        this.serializeString(b.__name__),
                        this.useCache && this.cache.push(a),
                        a.hxSerialize(this),
                        (this.buf.b += "g"))
                      : ((this.buf.b += "c"),
                        this.serializeString(b.__name__),
                        this.useCache && this.cache.push(a),
                        this.serializeFields(a));
              }
              break;
            case 7:
              b = b.e;
              if (this.useCache) {
                if (this.serializeRef(a)) break;
                this.cache.pop();
              }
              this.buf.b += M.string(this.useEnumIndex ? "j" : "w");
              this.serializeString(b.__ename__);
              this.useEnumIndex
                ? ((this.buf.b += ":"), (this.buf.b += M.string(a._hx_index)))
                : ((b = a),
                  this.serializeString(
                    w[b.__enum__].__constructs__[b._hx_index]._hx_name
                  ));
              this.buf.b += ":";
              c = zb.enumParameters(a);
              this.buf.b += M.string(c.length);
              for (b = 0; b < c.length; ) (f = c[b]), ++b, this.serialize(f);
              this.useCache && this.cache.push(a);
              break;
            default:
              throw N.thrown("Cannot serialize " + M.string(a));
          }
        },
        __class__: he,
      };
      var yg = function (a) {
        var b = this;
        this.id = setInterval(function () {
          b.run();
        }, a);
      };
      h["haxe.Timer"] = yg;
      yg.__name__ = "haxe.Timer";
      yg.delay = function (a, b) {
        var c = new yg(b);
        c.run = function () {
          c.stop();
          a();
        };
        return c;
      };
      yg.prototype = {
        stop: function () {
          null != this.id && (clearInterval(this.id), (this.id = null));
        },
        run: function () {},
        __class__: yg,
      };
      var Bl = function () {};
      h["haxe._Unserializer.DefaultResolver"] = Bl;
      Bl.__name__ = "haxe._Unserializer.DefaultResolver";
      Bl.prototype = {
        resolveClass: function (a) {
          return h[a];
        },
        resolveEnum: function (a) {
          return w[a];
        },
        __class__: Bl,
      };
      var Rd = function (a) {
        this.buf = a;
        this.length = this.buf.length;
        this.pos = 0;
        this.scache = [];
        this.cache = [];
        a = Rd.DEFAULT_RESOLVER;
        null == a && ((a = new Bl()), (Rd.DEFAULT_RESOLVER = a));
        this.resolver = a;
      };
      h["haxe.Unserializer"] = Rd;
      Rd.__name__ = "haxe.Unserializer";
      Rd.initCodes = function () {
        for (var a = [], b = 0, c = Rd.BASE64.length; b < c; ) {
          var d = b++;
          a[Rd.BASE64.charCodeAt(d)] = d;
        }
        return a;
      };
      Rd.run = function (a) {
        return new Rd(a).unserialize();
      };
      Rd.prototype = {
        setResolver: function (a) {
          null == a
            ? (null == ji.instance && (ji.instance = new ji()),
              (this.resolver = ji.instance))
            : (this.resolver = a);
        },
        readDigits: function () {
          for (var a = 0, b = !1, c = this.pos; ; ) {
            var d = this.buf.charCodeAt(this.pos);
            if (d != d) break;
            if (45 == d) {
              if (this.pos != c) break;
              b = !0;
            } else {
              if (48 > d || 57 < d) break;
              a = 10 * a + (d - 48);
            }
            this.pos++;
          }
          b && (a *= -1);
          return a;
        },
        readFloat: function () {
          for (var a = this.pos; ; ) {
            var b = this.buf.charCodeAt(this.pos);
            if (b != b) break;
            if ((43 <= b && 58 > b) || 101 == b || 69 == b) this.pos++;
            else break;
          }
          return parseFloat(X.substr(this.buf, a, this.pos - a));
        },
        unserializeObject: function (a) {
          for (;;) {
            if (this.pos >= this.length) throw N.thrown("Invalid object");
            if (103 == this.buf.charCodeAt(this.pos)) break;
            var b = this.unserialize();
            if ("string" != typeof b) throw N.thrown("Invalid object key");
            var c = this.unserialize();
            a[b] = c;
          }
          this.pos++;
        },
        unserializeEnum: function (a, b) {
          if (58 != this.buf.charCodeAt(this.pos++))
            throw N.thrown("Invalid enum format");
          var c = this.readDigits();
          if (0 == c) return zb.createEnum(a, b);
          for (var d = []; 0 < c--; ) d.push(this.unserialize());
          return zb.createEnum(a, b, d);
        },
        unserialize: function () {
          switch (this.buf.charCodeAt(this.pos++)) {
            case 65:
              var a = this.unserialize(),
                b = this.resolver.resolveClass(a);
              if (null == b) throw N.thrown("Class not found " + a);
              return b;
            case 66:
              a = this.unserialize();
              b = this.resolver.resolveEnum(a);
              if (null == b) throw N.thrown("Enum not found " + a);
              return b;
            case 67:
              a = this.unserialize();
              b = this.resolver.resolveClass(a);
              if (null == b) throw N.thrown("Class not found " + a);
              b = Object.create(b.prototype);
              this.cache.push(b);
              b.hxUnserialize(this);
              if (103 != this.buf.charCodeAt(this.pos++))
                throw N.thrown("Invalid custom data");
              return b;
            case 77:
              a = new Yb();
              this.cache.push(a);
              for (var c; 104 != this.buf.charCodeAt(this.pos); )
                (b = this.unserialize()), a.set(b, this.unserialize());
              this.pos++;
              return a;
            case 82:
              a = this.readDigits();
              if (0 > a || a >= this.scache.length)
                throw N.thrown("Invalid string reference");
              return this.scache[a];
            case 97:
              b = [];
              for (this.cache.push(b); ; ) {
                c = this.buf.charCodeAt(this.pos);
                if (104 == c) {
                  this.pos++;
                  break;
                }
                117 == c
                  ? (this.pos++,
                    (a = this.readDigits()),
                    (b[b.length + a - 1] = null))
                  : b.push(this.unserialize());
              }
              return b;
            case 98:
              a = new Q();
              for (this.cache.push(a); 104 != this.buf.charCodeAt(this.pos); )
                (b = this.unserialize()),
                  (c = this.unserialize()),
                  (a.h[b] = c);
              this.pos++;
              return a;
            case 99:
              a = this.unserialize();
              b = this.resolver.resolveClass(a);
              if (null == b) throw N.thrown("Class not found " + a);
              b = Object.create(b.prototype);
              this.cache.push(b);
              this.unserializeObject(b);
              return b;
            case 100:
              return this.readFloat();
            case 102:
              return !1;
            case 105:
              return this.readDigits();
            case 106:
              a = this.unserialize();
              c = this.resolver.resolveEnum(a);
              if (null == c) throw N.thrown("Enum not found " + a);
              this.pos++;
              for (
                var d = this.readDigits(),
                  e = c.__constructs__,
                  f = Array(e.length),
                  k = 0,
                  g = e.length;
                k < g;

              )
                (b = k++), (f[b] = e[b]._hx_name);
              b = f[d];
              if (null == b)
                throw N.thrown("Unknown enum index " + a + "@" + d);
              b = this.unserializeEnum(c, b);
              this.cache.push(b);
              return b;
            case 107:
              return NaN;
            case 108:
              b = new kb();
              for (this.cache.push(b); 104 != this.buf.charCodeAt(this.pos); )
                b.add(this.unserialize());
              this.pos++;
              return b;
            case 109:
              return -Infinity;
            case 110:
              return null;
            case 111:
              return (b = {}), this.cache.push(b), this.unserializeObject(b), b;
            case 112:
              return Infinity;
            case 113:
              a = new kc();
              this.cache.push(a);
              for (c = this.buf.charCodeAt(this.pos++); 58 == c; )
                (b = this.readDigits()),
                  (c = this.unserialize()),
                  (a.h[b] = c),
                  (c = this.buf.charCodeAt(this.pos++));
              if (104 != c) throw N.thrown("Invalid IntMap format");
              return a;
            case 114:
              a = this.readDigits();
              if (0 > a || a >= this.cache.length)
                throw N.thrown("Invalid reference");
              return this.cache[a];
            case 115:
              a = this.readDigits();
              c = this.buf;
              if (
                58 != this.buf.charCodeAt(this.pos++) ||
                this.length - this.pos < a
              )
                throw N.thrown("Invalid bytes length");
              d = Rd.CODES;
              null == d && ((d = Rd.initCodes()), (Rd.CODES = d));
              b = this.pos;
              e = a & 3;
              f = b + (a - e);
              k = new Nb(new ArrayBuffer(3 * (a >> 2) + (2 <= e ? e - 1 : 0)));
              for (g = 0; b < f; ) {
                var l = d[c.charCodeAt(b++)],
                  h = d[c.charCodeAt(b++)];
                k.b[g++] = ((l << 2) | (h >> 4)) & 255;
                l = d[c.charCodeAt(b++)];
                k.b[g++] = ((h << 4) | (l >> 2)) & 255;
                h = d[c.charCodeAt(b++)];
                k.b[g++] = ((l << 6) | h) & 255;
              }
              2 <= e &&
                ((l = d[c.charCodeAt(b++)]),
                (h = d[c.charCodeAt(b++)]),
                (k.b[g++] = ((l << 2) | (h >> 4)) & 255),
                3 == e &&
                  ((l = d[c.charCodeAt(b++)]),
                  (k.b[g++] = ((h << 4) | (l >> 2)) & 255)));
              this.pos += a;
              this.cache.push(k);
              return k;
            case 116:
              return !0;
            case 118:
              return (
                48 <= this.buf.charCodeAt(this.pos) &&
                57 >= this.buf.charCodeAt(this.pos) &&
                48 <= this.buf.charCodeAt(this.pos + 1) &&
                57 >= this.buf.charCodeAt(this.pos + 1) &&
                48 <= this.buf.charCodeAt(this.pos + 2) &&
                57 >= this.buf.charCodeAt(this.pos + 2) &&
                48 <= this.buf.charCodeAt(this.pos + 3) &&
                57 >= this.buf.charCodeAt(this.pos + 3) &&
                45 == this.buf.charCodeAt(this.pos + 4)
                  ? ((b = X.strDate(X.substr(this.buf, this.pos, 19))),
                    (this.pos += 19))
                  : (b = new Date(this.readFloat())),
                this.cache.push(b),
                b
              );
            case 119:
              a = this.unserialize();
              c = this.resolver.resolveEnum(a);
              if (null == c) throw N.thrown("Enum not found " + a);
              b = this.unserializeEnum(c, this.unserialize());
              this.cache.push(b);
              return b;
            case 120:
              throw N.thrown(this.unserialize());
            case 121:
              a = this.readDigits();
              if (
                58 != this.buf.charCodeAt(this.pos++) ||
                this.length - this.pos < a
              )
                throw N.thrown("Invalid string length");
              b = X.substr(this.buf, this.pos, a);
              this.pos += a;
              b = decodeURIComponent(b.split("+").join(" "));
              this.scache.push(b);
              return b;
            case 122:
              return 0;
          }
          this.pos--;
          throw N.thrown(
            "Invalid char " +
              this.buf.charAt(this.pos) +
              " at position " +
              this.pos
          );
        },
        __class__: Rd,
      };
      var ji = function () {};
      h["haxe._Unserializer.NullResolver"] = ji;
      ji.__name__ = "haxe._Unserializer.NullResolver";
      ji.prototype = {
        resolveClass: function (a) {
          return null;
        },
        resolveEnum: function (a) {
          return null;
        },
        __class__: ji,
      };
      var wj = function (a, b, c) {
        N.call(this, String(a), b, c);
        this.value = a;
        this.__skipStack++;
      };
      h["haxe.ValueException"] = wj;
      wj.__name__ = "haxe.ValueException";
      wj.__super__ = N;
      wj.prototype = q(N.prototype, {
        unwrap: function () {
          return this.value;
        },
        __class__: wj,
      });
      var ki = function () {
        this.a1 = 1;
        this.a2 = 0;
      };
      h["haxe.crypto.Adler32"] = ki;
      ki.__name__ = "haxe.crypto.Adler32";
      ki.read = function (a) {
        var b = new ki(),
          c = a.readByte(),
          d = a.readByte(),
          e = a.readByte();
        a = a.readByte();
        b.a1 = (e << 8) | a;
        b.a2 = (c << 8) | d;
        return b;
      };
      ki.prototype = {
        update: function (a, b, c) {
          var d = this.a1,
            e = this.a2,
            f = b;
          for (b += c; f < b; )
            (c = f++), (d = (d + a.b[c]) % 65521), (e = (e + d) % 65521);
          this.a1 = d;
          this.a2 = e;
        },
        equals: function (a) {
          return a.a1 == this.a1 ? a.a2 == this.a2 : !1;
        },
        __class__: ki,
      };
      var ii = function () {};
      h["haxe.crypto.Base64"] = ii;
      ii.__name__ = "haxe.crypto.Base64";
      ii.decode = function (a, b) {
        null == b && (b = !0);
        if (b) for (; 61 == X.cca(a, a.length - 1); ) a = X.substr(a, 0, -1);
        return new Hn(ii.BYTES).decodeBytes(Nb.ofString(a));
      };
      var Hn = function (a) {
        for (var b = a.length, c = 1; b > 1 << c; ) ++c;
        if (8 < c || b != 1 << c)
          throw N.thrown("BaseCode : base length must be a power of two.");
        this.base = a;
        this.nbits = c;
      };
      h["haxe.crypto.BaseCode"] = Hn;
      Hn.__name__ = "haxe.crypto.BaseCode";
      Hn.prototype = {
        initTable: function () {
          for (var a = [], b = 0; 256 > b; ) {
            var c = b++;
            a[c] = -1;
          }
          b = 0;
          for (var d = this.base.length; b < d; )
            (c = b++), (a[this.base.b[c]] = c);
          this.tbl = a;
        },
        decodeBytes: function (a) {
          var b = this.nbits;
          null == this.tbl && this.initTable();
          for (
            var c = this.tbl,
              d = (a.length * b) >> 3,
              e = new Nb(new ArrayBuffer(d)),
              f = 0,
              k = 0,
              g = 0,
              l = 0;
            l < d;

          ) {
            for (; 8 > k; ) {
              k += b;
              f <<= b;
              var h = c[a.b[g++]];
              if (-1 == h) throw N.thrown("BaseCode : invalid encoded char");
              f |= h;
            }
            k -= 8;
            e.b[l++] = (f >> k) & 255;
          }
          return e;
        },
        __class__: Hn,
      };
      var Nc = function () {};
      h["haxe.ds.ArraySort"] = Nc;
      Nc.__name__ = "haxe.ds.ArraySort";
      Nc.sort = function (a, b) {
        Nc.rec(a, b, 0, a.length);
      };
      Nc.rec = function (a, b, c, d) {
        var e = (c + d) >> 1;
        if (12 > d - c) {
          if (!(d <= c))
            for (e = c + 1; e < d; )
              for (var f = e++; f > c; ) {
                if (0 > b(a[f], a[f - 1])) Nc.swap(a, f - 1, f);
                else break;
                --f;
              }
        } else
          Nc.rec(a, b, c, e),
            Nc.rec(a, b, e, d),
            Nc.doMerge(a, b, c, e, d, e - c, d - e);
      };
      Nc.doMerge = function (a, b, c, d, e, f, k) {
        if (0 != f && 0 != k)
          if (2 == f + k) 0 > b(a[d], a[c]) && Nc.swap(a, d, c);
          else {
            if (f > k) {
              var g = f >> 1;
              var l = c + g;
              var h = Nc.lower(a, b, d, e, l);
              var u = h - d;
            } else
              (u = k >> 1),
                (h = d + u),
                (l = Nc.upper(a, b, c, d, h)),
                (g = l - c);
            Nc.rotate(a, b, l, d, h);
            d = l + u;
            Nc.doMerge(a, b, c, l, d, g, u);
            Nc.doMerge(a, b, d, h, e, f - g, k - u);
          }
      };
      Nc.rotate = function (a, b, c, d, e) {
        if (c != d && d != e)
          for (b = Nc.gcd(e - c, d - c); 0 != b--; ) {
            for (
              var f = a[c + b], k = d - c, g = c + b, l = c + b + k;
              l != c + b;

            )
              (a[g] = a[l]),
                (g = l),
                (l = e - l > k ? l + k : c + (k - (e - l)));
            a[g] = f;
          }
      };
      Nc.gcd = function (a, b) {
        for (; 0 != b; ) {
          var c = a % b;
          a = b;
          b = c;
        }
        return a;
      };
      Nc.upper = function (a, b, c, d, e) {
        d -= c;
        for (var f, k; 0 < d; )
          (f = d >> 1),
            (k = c + f),
            0 > b(a[e], a[k]) ? (d = f) : ((c = k + 1), (d = d - f - 1));
        return c;
      };
      Nc.lower = function (a, b, c, d, e) {
        d -= c;
        for (var f, k; 0 < d; )
          (f = d >> 1),
            (k = c + f),
            0 > b(a[k], a[e]) ? ((c = k + 1), (d = d - f - 1)) : (d = f);
        return c;
      };
      Nc.swap = function (a, b, c) {
        var d = a[b];
        a[b] = a[c];
        a[c] = d;
      };
      var xj = function () {};
      h["haxe.ds.BalancedTree"] = xj;
      xj.__name__ = "haxe.ds.BalancedTree";
      xj.__interfaces__ = [Qa];
      xj.prototype = {
        set: function (a, b) {
          this.root = this.setLoop(a, b, this.root);
        },
        get: function (a) {
          for (var b = this.root; null != b; ) {
            var c = this.compare(a, b.key);
            if (0 == c) return b.value;
            b = 0 > c ? b.left : b.right;
          }
          return null;
        },
        remove: function (a) {
          try {
            return (this.root = this.removeLoop(a, this.root)), !0;
          } catch (b) {
            if ("string" == typeof N.caught(b).unwrap()) return !1;
            throw b;
          }
        },
        keys: function () {
          var a = [];
          this.keysLoop(this.root, a);
          return new Vf(a);
        },
        setLoop: function (a, b, c) {
          if (null == c) return new ie(null, a, b, null);
          var d = this.compare(a, c.key);
          if (0 == d)
            return new ie(c.left, a, b, c.right, null == c ? 0 : c._height);
          if (0 > d)
            return (
              (a = this.setLoop(a, b, c.left)),
              this.balance(a, c.key, c.value, c.right)
            );
          a = this.setLoop(a, b, c.right);
          return this.balance(c.left, c.key, c.value, a);
        },
        removeLoop: function (a, b) {
          if (null == b) throw N.thrown("Not_found");
          var c = this.compare(a, b.key);
          return 0 == c
            ? this.merge(b.left, b.right)
            : 0 > c
            ? this.balance(this.removeLoop(a, b.left), b.key, b.value, b.right)
            : this.balance(b.left, b.key, b.value, this.removeLoop(a, b.right));
        },
        keysLoop: function (a, b) {
          null != a &&
            (this.keysLoop(a.left, b),
            b.push(a.key),
            this.keysLoop(a.right, b));
        },
        merge: function (a, b) {
          if (null == a) return b;
          if (null == b) return a;
          var c = this.minBinding(b);
          return this.balance(a, c.key, c.value, this.removeMinBinding(b));
        },
        minBinding: function (a) {
          if (null == a) throw N.thrown("Not_found");
          return null == a.left ? a : this.minBinding(a.left);
        },
        removeMinBinding: function (a) {
          return null == a.left
            ? a.right
            : this.balance(
                this.removeMinBinding(a.left),
                a.key,
                a.value,
                a.right
              );
        },
        balance: function (a, b, c, d) {
          var e = null == a ? 0 : a._height,
            f = null == d ? 0 : d._height;
          return e > f + 2
            ? ((e = a.left),
              (f = a.right),
              (null == e ? 0 : e._height) >= (null == f ? 0 : f._height)
                ? new ie(a.left, a.key, a.value, new ie(a.right, b, c, d))
                : new ie(
                    new ie(a.left, a.key, a.value, a.right.left),
                    a.right.key,
                    a.right.value,
                    new ie(a.right.right, b, c, d)
                  ))
            : f > e + 2
            ? ((e = d.right),
              (f = d.left),
              (null == e ? 0 : e._height) > (null == f ? 0 : f._height)
                ? new ie(new ie(a, b, c, d.left), d.key, d.value, d.right)
                : new ie(
                    new ie(a, b, c, d.left.left),
                    d.left.key,
                    d.left.value,
                    new ie(d.left.right, d.key, d.value, d.right)
                  ))
            : new ie(a, b, c, d, (e > f ? e : f) + 1);
        },
        compare: function (a, b) {
          return qa.compare(a, b);
        },
        __class__: xj,
      };
      var ie = function (a, b, c, d, e) {
        null == e && (e = -1);
        this.left = a;
        this.key = b;
        this.value = c;
        this.right = d;
        -1 == e
          ? ((a = this.left),
            (b = this.right),
            (a =
              (null == a ? 0 : a._height) > (null == b ? 0 : b._height)
                ? this.left
                : this.right),
            (this._height = (null == a ? 0 : a._height) + 1))
          : (this._height = e);
      };
      h["haxe.ds.TreeNode"] = ie;
      ie.__name__ = "haxe.ds.TreeNode";
      ie.prototype = { __class__: ie };
      var Oh = function () {};
      h["haxe.ds.EnumValueMap"] = Oh;
      Oh.__name__ = "haxe.ds.EnumValueMap";
      Oh.__interfaces__ = [Qa];
      Oh.__super__ = xj;
      Oh.prototype = q(xj.prototype, {
        compare: function (a, b) {
          var c = a._hx_index - b._hx_index;
          if (0 != c) return c;
          a = zb.enumParameters(a);
          b = zb.enumParameters(b);
          return 0 == a.length && 0 == b.length ? 0 : this.compareArgs(a, b);
        },
        compareArgs: function (a, b) {
          var c = a.length - b.length;
          if (0 != c) return c;
          c = 0;
          for (var d = a.length; c < d; ) {
            var e = c++;
            e = this.compareArg(a[e], b[e]);
            if (0 != e) return e;
          }
          return 0;
        },
        compareArg: function (a, b) {
          return qa.isEnumValue(a) && qa.isEnumValue(b)
            ? this.compare(a, b)
            : a instanceof Array && b instanceof Array
            ? this.compareArgs(a, b)
            : qa.compare(a, b);
        },
        __class__: Oh,
      });
      var Wj = function (a, b) {
        this.item = a;
        this.next = b;
      };
      h["haxe.ds._List.ListNode"] = Wj;
      Wj.__name__ = "haxe.ds._List.ListNode";
      Wj.prototype = { __class__: Wj };
      var Im = function (a) {
        this.head = a;
      };
      h["haxe.ds._List.ListIterator"] = Im;
      Im.__name__ = "haxe.ds._List.ListIterator";
      Im.prototype = {
        hasNext: function () {
          return null != this.head;
        },
        next: function () {
          var a = this.head.item;
          this.head = this.head.next;
          return a;
        },
        __class__: Im,
      };
      var Vj = function (a) {
        this.h = a;
        this.keys = Object.keys(a);
        this.length = this.keys.length;
        this.current = 0;
      };
      h["haxe.ds._StringMap.StringMapKeyIterator"] = Vj;
      Vj.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
      Vj.prototype = {
        hasNext: function () {
          return this.current < this.length;
        },
        next: function () {
          return this.keys[this.current++];
        },
        __class__: Vj,
      };
      var li = function (a, b, c) {
        N.call(this, a, b);
        this.posInfos =
          null == c
            ? {
                fileName: "(unknown)",
                lineNumber: 0,
                className: "(unknown)",
                methodName: "(unknown)",
              }
            : c;
        this.__skipStack++;
      };
      h["haxe.exceptions.PosException"] = li;
      li.__name__ = "haxe.exceptions.PosException";
      li.__super__ = N;
      li.prototype = q(N.prototype, {
        toString: function () {
          return (
            "" +
            N.prototype.toString.call(this) +
            " in " +
            this.posInfos.className +
            "." +
            this.posInfos.methodName +
            " at " +
            this.posInfos.fileName +
            ":" +
            this.posInfos.lineNumber
          );
        },
        __class__: li,
      });
      var Cl = function (a, b, c) {
        null == a && (a = "Not implemented");
        li.call(this, a, b, c);
        this.__skipStack++;
      };
      h["haxe.exceptions.NotImplementedException"] = Cl;
      Cl.__name__ = "haxe.exceptions.NotImplementedException";
      Cl.__super__ = li;
      Cl.prototype = q(li.prototype, { __class__: Cl });
      var Dl = function () {
        this.size = this.pos = 0;
      };
      h["haxe.io.BytesBuffer"] = Dl;
      Dl.__name__ = "haxe.io.BytesBuffer";
      Dl.prototype = {
        addByte: function (a) {
          this.pos == this.size && this.grow(1);
          this.view.setUint8(this.pos++, a);
        },
        add: function (a) {
          this.pos + a.length > this.size && this.grow(a.length);
          if (0 != this.size) {
            var b = new Uint8Array(a.b.buffer, a.b.byteOffset, a.length);
            this.u8.set(b, this.pos);
            this.pos += a.length;
          }
        },
        addBytes: function (a, b, c) {
          if (0 > b || 0 > c || b + c > a.length)
            throw N.thrown(Bf.OutsideBounds);
          this.pos + c > this.size && this.grow(c);
          0 != this.size &&
            ((a = new Uint8Array(a.b.buffer, a.b.byteOffset + b, c)),
            this.u8.set(a, this.pos),
            (this.pos += c));
        },
        grow: function (a) {
          var b = this.pos + a;
          for (a = 0 == this.size ? 16 : this.size; a < b; ) a = (3 * a) >> 1;
          b = new ArrayBuffer(a);
          var c = new Uint8Array(b);
          0 < this.size && c.set(this.u8);
          this.size = a;
          this.buffer = b;
          this.u8 = c;
          this.view = new DataView(this.buffer);
        },
        getBytes: function () {
          if (0 == this.size) return new Nb(new ArrayBuffer(0));
          var a = new Nb(this.buffer);
          a.length = this.pos;
          return a;
        },
        __class__: Dl,
      };
      var El = function () {};
      h["haxe.io.Input"] = El;
      El.__name__ = "haxe.io.Input";
      El.prototype = {
        readByte: function () {
          throw new Cl(null, null, {
            fileName: "haxe/io/Input.hx",
            lineNumber: 53,
            className: "haxe.io.Input",
            methodName: "readByte",
          });
        },
        readBytes: function (a, b, c) {
          var d = c,
            e = a.b;
          if (0 > b || 0 > c || b + c > a.length)
            throw N.thrown(Bf.OutsideBounds);
          try {
            for (; 0 < d; ) (e[b] = this.readByte()), ++b, --d;
          } catch (f) {
            if (!(N.caught(f).unwrap() instanceof yj)) throw f;
          }
          return c - d;
        },
        readFullBytes: function (a, b, c) {
          for (; 0 < c; ) {
            var d = this.readBytes(a, b, c);
            if (0 == d) throw N.thrown(Bf.Blocked);
            b += d;
            c -= d;
          }
        },
        read: function (a) {
          for (var b = new Nb(new ArrayBuffer(a)), c = 0; 0 < a; ) {
            var d = this.readBytes(b, c, a);
            if (0 == d) throw N.thrown(Bf.Blocked);
            c += d;
            a -= d;
          }
          return b;
        },
        readInt16: function () {
          var a = this.readByte(),
            b = this.readByte();
          a = this.bigEndian ? b | (a << 8) : a | (b << 8);
          return 0 != (a & 32768) ? a - 65536 : a;
        },
        readUInt16: function () {
          var a = this.readByte(),
            b = this.readByte();
          return this.bigEndian ? b | (a << 8) : a | (b << 8);
        },
        readInt32: function () {
          var a = this.readByte(),
            b = this.readByte(),
            c = this.readByte(),
            d = this.readByte();
          return this.bigEndian
            ? d | (c << 8) | (b << 16) | (a << 24)
            : a | (b << 8) | (c << 16) | (d << 24);
        },
        readString: function (a, b) {
          var c = new Nb(new ArrayBuffer(a));
          this.readFullBytes(c, 0, a);
          return c.getString(0, a, b);
        },
        __class__: El,
      };
      var Fl = function (a, b, c) {
        null == b && (b = 0);
        null == c && (c = a.length - b);
        if (0 > b || 0 > c || b + c > a.length)
          throw N.thrown(Bf.OutsideBounds);
        this.b = a.b;
        this.pos = b;
        this.totlen = this.len = c;
      };
      h["haxe.io.BytesInput"] = Fl;
      Fl.__name__ = "haxe.io.BytesInput";
      Fl.__super__ = El;
      Fl.prototype = q(El.prototype, {
        readByte: function () {
          if (0 == this.len) throw N.thrown(new yj());
          this.len--;
          return this.b[this.pos++];
        },
        readBytes: function (a, b, c) {
          if (0 > b || 0 > c || b + c > a.length)
            throw N.thrown(Bf.OutsideBounds);
          if (0 == this.len && 0 < c) throw N.thrown(new yj());
          this.len < c && (c = this.len);
          var d = this.b;
          a = a.b;
          for (var e = 0, f = c; e < f; ) {
            var k = e++;
            a[b + k] = d[this.pos + k];
          }
          this.pos += c;
          this.len -= c;
          return c;
        },
        __class__: Fl,
      });
      var Mo = (w["haxe.io.Encoding"] = {
        __ename__: "haxe.io.Encoding",
        __constructs__: null,
        UTF8: {
          _hx_name: "UTF8",
          _hx_index: 0,
          __enum__: "haxe.io.Encoding",
          toString: p,
        },
        RawNative: {
          _hx_name: "RawNative",
          _hx_index: 1,
          __enum__: "haxe.io.Encoding",
          toString: p,
        },
      });
      Mo.__constructs__ = [Mo.UTF8, Mo.RawNative];
      var yj = function () {};
      h["haxe.io.Eof"] = yj;
      yj.__name__ = "haxe.io.Eof";
      yj.prototype = {
        toString: function () {
          return "Eof";
        },
        __class__: yj,
      };
      var Bf = (w["haxe.io.Error"] = {
        __ename__: "haxe.io.Error",
        __constructs__: null,
        Blocked: {
          _hx_name: "Blocked",
          _hx_index: 0,
          __enum__: "haxe.io.Error",
          toString: p,
        },
        Overflow: {
          _hx_name: "Overflow",
          _hx_index: 1,
          __enum__: "haxe.io.Error",
          toString: p,
        },
        OutsideBounds: {
          _hx_name: "OutsideBounds",
          _hx_index: 2,
          __enum__: "haxe.io.Error",
          toString: p,
        },
        Custom:
          ((x = function (a) {
            return {
              _hx_index: 3,
              e: a,
              __enum__: "haxe.io.Error",
              toString: p,
            };
          }),
          (x._hx_name = "Custom"),
          (x.__params__ = ["e"]),
          x),
      });
      Bf.__constructs__ = [
        Bf.Blocked,
        Bf.Overflow,
        Bf.OutsideBounds,
        Bf.Custom,
      ];
      var $o = {
          fromBytes: function (a, b, c) {
            null == b && (b = 0);
            null == c && (c = (a.length - b) >> 2);
            return new Float32Array(a.b.bufferValue, b, c);
          },
        },
        Hd = function (a) {
          switch (a) {
            case ".":
            case "..":
              this.dir = a;
              this.file = "";
              return;
          }
          var b = a.lastIndexOf("/"),
            c = a.lastIndexOf("\\");
          b < c
            ? ((this.dir = X.substr(a, 0, c)),
              (a = X.substr(a, c + 1, null)),
              (this.backslash = !0))
            : c < b
            ? ((this.dir = X.substr(a, 0, b)), (a = X.substr(a, b + 1, null)))
            : (this.dir = null);
          b = a.lastIndexOf(".");
          -1 != b
            ? ((this.ext = X.substr(a, b + 1, null)),
              (this.file = X.substr(a, 0, b)))
            : ((this.ext = null), (this.file = a));
        };
      h["haxe.io.Path"] = Hd;
      Hd.__name__ = "haxe.io.Path";
      Hd.withoutDirectory = function (a) {
        a = new Hd(a);
        a.dir = null;
        return a.toString();
      };
      Hd.directory = function (a) {
        a = new Hd(a);
        return null == a.dir ? "" : a.dir;
      };
      Hd.extension = function (a) {
        a = new Hd(a);
        return null == a.ext ? "" : a.ext;
      };
      Hd.prototype = {
        toString: function () {
          return (
            (null == this.dir ? "" : this.dir + (this.backslash ? "\\" : "/")) +
            this.file +
            (null == this.ext ? "" : "." + this.ext)
          );
        },
        __class__: Hd,
      };
      var Vf = function (a) {
        this.current = 0;
        this.array = a;
      };
      h["haxe.iterators.ArrayIterator"] = Vf;
      Vf.__name__ = "haxe.iterators.ArrayIterator";
      Vf.prototype = {
        hasNext: function () {
          return this.current < this.array.length;
        },
        next: function () {
          return this.array[this.current++];
        },
        __class__: Vf,
      };
      var ub = {
          resolve: function (a, b) {
            var c = a.elementsNamed(b).next();
            if (null == c) {
              if (a.nodeType == oa.Document) a = "Document";
              else {
                if (a.nodeType != oa.Element)
                  throw N.thrown(
                    "Bad node type, expected Element but found " +
                      (null == a.nodeType ? "null" : bb.toString(a.nodeType))
                  );
                a = a.nodeName;
              }
              throw N.thrown(a + " is missing element " + b);
            }
            if (c.nodeType != oa.Document && c.nodeType != oa.Element)
              throw N.thrown(
                "Invalid nodeType " +
                  (null == c.nodeType ? "null" : bb.toString(c.nodeType))
              );
            return c;
          },
        },
        sc = {
          resolve: function (a, b) {
            if (a.nodeType == oa.Document)
              throw N.thrown("Cannot access document attribute " + b);
            var c = a.get(b);
            if (null == c) {
              if (a.nodeType != oa.Element)
                throw N.thrown(
                  "Bad node type, expected Element but found " +
                    (null == a.nodeType ? "null" : bb.toString(a.nodeType))
                );
              throw N.thrown(a.nodeName + " is missing attribute " + b);
            }
            return c;
          },
        },
        ic = {
          resolve: function (a, b) {
            if (a.nodeType == oa.Document)
              throw N.thrown("Cannot access document attribute " + b);
            return a.exists(b);
          },
        },
        Pa = {
          resolve: function (a, b) {
            return a.elementsNamed(b).hasNext();
          },
        },
        Ub = {
          resolve: function (a, b) {
            var c = [];
            for (b = a.elementsNamed(b); b.hasNext(); ) {
              a = b.next();
              if (a.nodeType != oa.Document && a.nodeType != oa.Element)
                throw N.thrown(
                  "Invalid nodeType " +
                    (null == a.nodeType ? "null" : bb.toString(a.nodeType))
                );
              c.push(a);
            }
            return c;
          },
        },
        $c = function (a, b, c) {
          this.xml = b;
          this.message = a;
          this.position = c;
          this.lineNumber = 1;
          for (a = this.positionAtLine = 0; a < c; ) {
            var d = a++;
            d = b.charCodeAt(d);
            10 == d
              ? (this.lineNumber++, (this.positionAtLine = 0))
              : 13 != d && this.positionAtLine++;
          }
        };
      h["haxe.xml.XmlParserException"] = $c;
      $c.__name__ = "haxe.xml.XmlParserException";
      $c.prototype = {
        toString: function () {
          return (
            za.getClass(this).__name__ +
            ": " +
            this.message +
            " at line " +
            this.lineNumber +
            " char " +
            this.positionAtLine
          );
        },
        __class__: $c,
      };
      var Og = function () {};
      h["haxe.xml.Parser"] = Og;
      Og.__name__ = "haxe.xml.Parser";
      Og.parse = function (a, b) {
        null == b && (b = !1);
        var c = oa.createDocument();
        Og.doParse(a, b, 0, c);
        return c;
      };
      Og.doParse = function (a, b, c, d) {
        null == c && (c = 0);
        for (
          var e = null,
            f = 1,
            k = 1,
            g = null,
            l = 0,
            h = 0,
            u = 0,
            m = new Yf(),
            p = 1,
            n = -1;
          c < a.length;

        ) {
          var q = a.charCodeAt(c);
          switch (f) {
            case 0:
              switch (q) {
                case 9:
                case 10:
                case 13:
                case 32:
                  break;
                default:
                  f = k;
                  continue;
              }
              break;
            case 1:
              if (60 == q) (f = 0), (k = 2);
              else {
                l = c;
                f = 13;
                continue;
              }
              break;
            case 2:
              switch (q) {
                case 33:
                  if (91 == a.charCodeAt(c + 1)) {
                    c += 2;
                    if ("CDATA[" != X.substr(a, c, 6).toUpperCase())
                      throw N.thrown(new $c("Expected <![CDATA[", a, c));
                    c += 5;
                    f = 17;
                  } else if (
                    68 == a.charCodeAt(c + 1) ||
                    100 == a.charCodeAt(c + 1)
                  ) {
                    if ("OCTYPE" != X.substr(a, c + 2, 6).toUpperCase())
                      throw N.thrown(new $c("Expected <!DOCTYPE", a, c));
                    c += 8;
                    f = 16;
                  } else {
                    if (45 != a.charCodeAt(c + 1) || 45 != a.charCodeAt(c + 2))
                      throw N.thrown(new $c("Expected \x3c!--", a, c));
                    c += 2;
                    f = 15;
                  }
                  l = c + 1;
                  break;
                case 47:
                  if (null == d)
                    throw N.thrown(new $c("Expected node name", a, c));
                  l = c + 1;
                  f = 0;
                  k = 10;
                  break;
                case 63:
                  f = 14;
                  l = c;
                  break;
                default:
                  f = 3;
                  l = c;
                  continue;
              }
              break;
            case 3:
              if (
                !(
                  (97 <= q && 122 >= q) ||
                  (65 <= q && 90 >= q) ||
                  (48 <= q && 57 >= q) ||
                  58 == q ||
                  46 == q ||
                  95 == q ||
                  45 == q
                )
              ) {
                if (c == l) throw N.thrown(new $c("Expected node name", a, c));
                e = oa.createElement(X.substr(a, l, c - l));
                d.addChild(e);
                ++h;
                f = 0;
                k = 4;
                continue;
              }
              break;
            case 4:
              switch (q) {
                case 47:
                  f = 11;
                  break;
                case 62:
                  f = 9;
                  break;
                default:
                  f = 5;
                  l = c;
                  continue;
              }
              break;
            case 5:
              if (
                !(
                  (97 <= q && 122 >= q) ||
                  (65 <= q && 90 >= q) ||
                  (48 <= q && 57 >= q) ||
                  58 == q ||
                  46 == q ||
                  95 == q ||
                  45 == q
                )
              ) {
                if (l == c)
                  throw N.thrown(new $c("Expected attribute name", a, c));
                g = X.substr(a, l, c - l);
                if (e.exists(g))
                  throw N.thrown(
                    new $c("Duplicate attribute [" + g + "]", a, c)
                  );
                f = 0;
                k = 6;
                continue;
              }
              break;
            case 6:
              if (61 == q) (f = 0), (k = 7);
              else throw N.thrown(new $c("Expected =", a, c));
              break;
            case 7:
              switch (q) {
                case 34:
                case 39:
                  m = new Yf();
                  f = 8;
                  l = c + 1;
                  n = q;
                  break;
                default:
                  throw N.thrown(new $c('Expected "', a, c));
              }
              break;
            case 8:
              switch (q) {
                case 38:
                  p = c - l;
                  m.b += null == p ? X.substr(a, l, null) : X.substr(a, l, p);
                  f = 18;
                  p = 8;
                  l = c + 1;
                  break;
                case 60:
                case 62:
                  if (b)
                    throw N.thrown(
                      new $c(
                        "Invalid unescaped " +
                          String.fromCodePoint(q) +
                          " in attribute value",
                        a,
                        c
                      )
                    );
                  q == n &&
                    ((k = c - l),
                    (m.b +=
                      null == k ? X.substr(a, l, null) : X.substr(a, l, k)),
                    (k = m.b),
                    (m = new Yf()),
                    e.set(g, k),
                    (f = 0),
                    (k = 4));
                  break;
                default:
                  q == n &&
                    ((k = c - l),
                    (m.b +=
                      null == k ? X.substr(a, l, null) : X.substr(a, l, k)),
                    (k = m.b),
                    (m = new Yf()),
                    e.set(g, k),
                    (f = 0),
                    (k = 4));
              }
              break;
            case 9:
              l = c = Og.doParse(a, b, c, e);
              f = 1;
              break;
            case 10:
              if (
                !(
                  (97 <= q && 122 >= q) ||
                  (65 <= q && 90 >= q) ||
                  (48 <= q && 57 >= q) ||
                  58 == q ||
                  46 == q ||
                  95 == q ||
                  45 == q
                )
              ) {
                if (l == c) throw N.thrown(new $c("Expected node name", a, c));
                k = X.substr(a, l, c - l);
                if (null == d || 0 != d.nodeType)
                  throw N.thrown(
                    new $c("Unexpected </" + k + ">, tag is not open", a, c)
                  );
                if (d.nodeType != oa.Element)
                  throw N.thrown(
                    "Bad node type, expected Element but found " +
                      (null == d.nodeType ? "null" : bb.toString(d.nodeType))
                  );
                if (k != d.nodeName) {
                  if (d.nodeType != oa.Element)
                    throw N.thrown(
                      "Bad node type, expected Element but found " +
                        (null == d.nodeType ? "null" : bb.toString(d.nodeType))
                    );
                  throw N.thrown(
                    new $c("Expected </" + d.nodeName + ">", a, c)
                  );
                }
                f = 0;
                k = 12;
                continue;
              }
              break;
            case 11:
              if (62 == q) f = 1;
              else throw N.thrown(new $c("Expected >", a, c));
              break;
            case 12:
              if (62 == q) return 0 == h && d.addChild(oa.createPCData("")), c;
              throw N.thrown(new $c("Expected >", a, c));
            case 13:
              60 == q
                ? ((k = c - l),
                  (m.b += null == k ? X.substr(a, l, null) : X.substr(a, l, k)),
                  (k = oa.createPCData(m.b)),
                  (m = new Yf()),
                  d.addChild(k),
                  ++h,
                  (f = 0),
                  (k = 2))
                : 38 == q &&
                  ((p = c - l),
                  (m.b += null == p ? X.substr(a, l, null) : X.substr(a, l, p)),
                  (f = 18),
                  (p = 13),
                  (l = c + 1));
              break;
            case 14:
              63 == q &&
                62 == a.charCodeAt(c + 1) &&
                (++c,
                (f = X.substr(a, l + 1, c - l - 2)),
                d.addChild(oa.createProcessingInstruction(f)),
                ++h,
                (f = 1));
              break;
            case 15:
              45 == q &&
                45 == a.charCodeAt(c + 1) &&
                62 == a.charCodeAt(c + 2) &&
                (d.addChild(oa.createComment(X.substr(a, l, c - l))),
                ++h,
                (c += 2),
                (f = 1));
              break;
            case 16:
              91 == q
                ? ++u
                : 93 == q
                ? --u
                : 62 == q &&
                  0 == u &&
                  (d.addChild(oa.createDocType(X.substr(a, l, c - l))),
                  ++h,
                  (f = 1));
              break;
            case 17:
              93 == q &&
                93 == a.charCodeAt(c + 1) &&
                62 == a.charCodeAt(c + 2) &&
                ((f = oa.createCData(X.substr(a, l, c - l))),
                d.addChild(f),
                ++h,
                (c += 2),
                (f = 1));
              break;
            case 18:
              if (59 == q) {
                l = X.substr(a, l, c - l);
                if (35 == l.charCodeAt(0))
                  (l =
                    120 == l.charCodeAt(1)
                      ? M.parseInt("0" + X.substr(l, 1, l.length - 1))
                      : M.parseInt(X.substr(l, 1, l.length - 1))),
                    (m.b += String.fromCodePoint(l));
                else if (Object.prototype.hasOwnProperty.call(Og.escapes.h, l))
                  m.b += M.string(Og.escapes.h[l]);
                else {
                  if (b) throw N.thrown(new $c("Undefined entity: " + l, a, c));
                  m.b += M.string("&" + l + ";");
                }
                l = c + 1;
                f = p;
              } else if (
                !(
                  (97 <= q && 122 >= q) ||
                  (65 <= q && 90 >= q) ||
                  (48 <= q && 57 >= q) ||
                  58 == q ||
                  46 == q ||
                  95 == q ||
                  45 == q
                ) &&
                35 != q
              ) {
                if (b)
                  throw N.thrown(
                    new $c(
                      "Invalid character in entity: " + String.fromCodePoint(q),
                      a,
                      c
                    )
                  );
                m.b += String.fromCodePoint(38);
                f = c - l;
                m.b += null == f ? X.substr(a, l, null) : X.substr(a, l, f);
                --c;
                l = c + 1;
                f = p;
              }
          }
          ++c;
        }
        1 == f && ((l = c), (f = 13));
        if (13 == f) {
          if (0 == d.nodeType) {
            if (d.nodeType != oa.Element)
              throw N.thrown(
                "Bad node type, expected Element but found " +
                  (null == d.nodeType ? "null" : bb.toString(d.nodeType))
              );
            throw N.thrown(new $c("Unclosed node <" + d.nodeName + ">", a, c));
          }
          if (c != l || 0 == h)
            (p = c - l),
              (m.b += null == p ? X.substr(a, l, null) : X.substr(a, l, p)),
              d.addChild(oa.createPCData(m.b));
          return c;
        }
        if (!b && 18 == f && 13 == p)
          return (
            (m.b += String.fromCodePoint(38)),
            (p = c - l),
            (m.b += null == p ? X.substr(a, l, null) : X.substr(a, l, p)),
            d.addChild(oa.createPCData(m.b)),
            c
          );
        throw N.thrown(new $c("Unexpected end", a, c));
      };
      var Pg = function (a) {
        this.output = new Yf();
        this.pretty = a;
      };
      h["haxe.xml.Printer"] = Pg;
      Pg.__name__ = "haxe.xml.Printer";
      Pg.print = function (a, b) {
        null == b && (b = !1);
        b = new Pg(b);
        b.writeNode(a, "");
        return b.output.b;
      };
      Pg.prototype = {
        writeNode: function (a, b) {
          switch (a.nodeType) {
            case 0:
              this.output.b += M.string(b + "<");
              if (a.nodeType != oa.Element)
                throw N.thrown(
                  "Bad node type, expected Element but found " +
                    (null == a.nodeType ? "null" : bb.toString(a.nodeType))
                );
              this.output.b += M.string(a.nodeName);
              for (var c = a.attributes(); c.hasNext(); ) {
                var d = c.next();
                this.output.b += M.string(" " + d + '="');
                d = K.htmlEscape(a.get(d), !0);
                this.output.b += M.string(d);
                this.output.b += '"';
              }
              if (this.hasChildren(a)) {
                this.output.b += ">";
                this.pretty && (this.output.b += "\n");
                if (a.nodeType != oa.Document && a.nodeType != oa.Element)
                  throw N.thrown(
                    "Bad node type, expected Element or Document but found " +
                      (null == a.nodeType ? "null" : bb.toString(a.nodeType))
                  );
                c = 0;
                for (d = a.children; c < d.length; ) {
                  var e = d[c++];
                  this.writeNode(e, this.pretty ? b + "\t" : b);
                }
                this.output.b += M.string(b + "</");
                if (a.nodeType != oa.Element)
                  throw N.thrown(
                    "Bad node type, expected Element but found " +
                      (null == a.nodeType ? "null" : bb.toString(a.nodeType))
                  );
                this.output.b += M.string(a.nodeName);
                this.output.b += ">";
              } else this.output.b += "/>";
              this.pretty && (this.output.b += "\n");
              break;
            case 1:
              if (a.nodeType == oa.Document || a.nodeType == oa.Element)
                throw N.thrown(
                  "Bad node type, unexpected " +
                    (null == a.nodeType ? "null" : bb.toString(a.nodeType))
                );
              a = a.nodeValue;
              0 != a.length &&
                ((d = b + K.htmlEscape(a)),
                (this.output.b += M.string(d)),
                this.pretty && (this.output.b += "\n"));
              break;
            case 2:
              this.output.b += M.string(b + "<![CDATA[");
              if (a.nodeType == oa.Document || a.nodeType == oa.Element)
                throw N.thrown(
                  "Bad node type, unexpected " +
                    (null == a.nodeType ? "null" : bb.toString(a.nodeType))
                );
              this.output.b += M.string(a.nodeValue);
              this.output.b += "]]\x3e";
              this.pretty && (this.output.b += "\n");
              break;
            case 3:
              if (a.nodeType == oa.Document || a.nodeType == oa.Element)
                throw N.thrown(
                  "Bad node type, unexpected " +
                    (null == a.nodeType ? "null" : bb.toString(a.nodeType))
                );
              a = a.nodeValue;
              a = a.replace(/[\n\r\t]+/g, "");
              this.output.b += null == b ? "null" : "" + b;
              d = K.trim("\x3c!--" + a + "--\x3e");
              this.output.b += M.string(d);
              this.pretty && (this.output.b += "\n");
              break;
            case 4:
              if (a.nodeType == oa.Document || a.nodeType == oa.Element)
                throw N.thrown(
                  "Bad node type, unexpected " +
                    (null == a.nodeType ? "null" : bb.toString(a.nodeType))
                );
              this.output.b += M.string("<!DOCTYPE " + a.nodeValue + ">");
              this.pretty && (this.output.b += "\n");
              break;
            case 5:
              if (a.nodeType == oa.Document || a.nodeType == oa.Element)
                throw N.thrown(
                  "Bad node type, unexpected " +
                    (null == a.nodeType ? "null" : bb.toString(a.nodeType))
                );
              this.output.b += M.string("<?" + a.nodeValue + "?>");
              this.pretty && (this.output.b += "\n");
              break;
            case 6:
              if (a.nodeType != oa.Document && a.nodeType != oa.Element)
                throw N.thrown(
                  "Bad node type, expected Element or Document but found " +
                    (null == a.nodeType ? "null" : bb.toString(a.nodeType))
                );
              c = 0;
              for (d = a.children; c < d.length; )
                (e = d[c++]), this.writeNode(e, b);
          }
        },
        hasChildren: function (a) {
          if (a.nodeType != oa.Document && a.nodeType != oa.Element)
            throw N.thrown(
              "Bad node type, expected Element or Document but found " +
                (null == a.nodeType ? "null" : bb.toString(a.nodeType))
            );
          var b = 0;
          for (a = a.children; b < a.length; ) {
            var c = a[b++];
            switch (c.nodeType) {
              case 0:
              case 1:
                return !0;
              case 2:
              case 3:
                if (c.nodeType == oa.Document || c.nodeType == oa.Element)
                  throw N.thrown(
                    "Bad node type, unexpected " +
                      (null == c.nodeType ? "null" : bb.toString(c.nodeType))
                  );
                if (0 != K.ltrim(c.nodeValue).length) return !0;
            }
          }
          return !1;
        },
        __class__: Pg,
      };
      var mi = (w["haxe.zip.ExtraField"] = {
        __ename__: "haxe.zip.ExtraField",
        __constructs__: null,
        FUnknown:
          ((x = function (a, b) {
            return {
              _hx_index: 0,
              tag: a,
              bytes: b,
              __enum__: "haxe.zip.ExtraField",
              toString: p,
            };
          }),
          (x._hx_name = "FUnknown"),
          (x.__params__ = ["tag", "bytes"]),
          x),
        FInfoZipUnicodePath:
          ((x = function (a, b) {
            return {
              _hx_index: 1,
              name: a,
              crc: b,
              __enum__: "haxe.zip.ExtraField",
              toString: p,
            };
          }),
          (x._hx_name = "FInfoZipUnicodePath"),
          (x.__params__ = ["name", "crc"]),
          x),
        FUtf8: {
          _hx_name: "FUtf8",
          _hx_index: 2,
          __enum__: "haxe.zip.ExtraField",
          toString: p,
        },
      });
      mi.__constructs__ = [mi.FUnknown, mi.FInfoZipUnicodePath, mi.FUtf8];
      var Qf = (w["haxe.zip.Huffman"] = {
        __ename__: "haxe.zip.Huffman",
        __constructs__: null,
        Found:
          ((x = function (a) {
            return {
              _hx_index: 0,
              i: a,
              __enum__: "haxe.zip.Huffman",
              toString: p,
            };
          }),
          (x._hx_name = "Found"),
          (x.__params__ = ["i"]),
          x),
        NeedBit:
          ((x = function (a, b) {
            return {
              _hx_index: 1,
              left: a,
              right: b,
              __enum__: "haxe.zip.Huffman",
              toString: p,
            };
          }),
          (x._hx_name = "NeedBit"),
          (x.__params__ = ["left", "right"]),
          x),
        NeedBits:
          ((x = function (a, b) {
            return {
              _hx_index: 2,
              n: a,
              table: b,
              __enum__: "haxe.zip.Huffman",
              toString: p,
            };
          }),
          (x._hx_name = "NeedBits"),
          (x.__params__ = ["n", "table"]),
          x),
      });
      Qf.__constructs__ = [Qf.Found, Qf.NeedBit, Qf.NeedBits];
      var In = function () {};
      h["haxe.zip.HuffTools"] = In;
      In.__name__ = "haxe.zip.HuffTools";
      In.prototype = {
        treeDepth: function (a) {
          switch (a._hx_index) {
            case 0:
              return 0;
            case 1:
              var b = a.right;
              a = this.treeDepth(a.left);
              b = this.treeDepth(b);
              return 1 + (a < b ? a : b);
            case 2:
              throw N.thrown("assert");
          }
        },
        treeCompress: function (a) {
          var b = this.treeDepth(a);
          if (0 == b) return a;
          if (1 == b) {
            if (1 == a._hx_index)
              return (
                (b = a.right),
                Qf.NeedBit(this.treeCompress(a.left), this.treeCompress(b))
              );
            throw N.thrown("assert");
          }
          for (var c = [], d = 0, e = 1 << b; d < e; )
            d++, c.push(Qf.Found(-1));
          this.treeWalk(c, 0, 0, b, a);
          return Qf.NeedBits(b, c);
        },
        treeWalk: function (a, b, c, d, e) {
          if (1 == e._hx_index) {
            var f = e.left,
              k = e.right;
            0 < d
              ? (this.treeWalk(a, b, c + 1, d - 1, f),
                this.treeWalk(a, b | (1 << c), c + 1, d - 1, k))
              : (a[b] = this.treeCompress(e));
          } else a[b] = this.treeCompress(e);
        },
        treeMake: function (a, b, c, d) {
          if (d > b) throw N.thrown("Invalid huffman");
          var e = (c << 5) | d;
          if (a.h.hasOwnProperty(e)) return Qf.Found(a.h[e]);
          c <<= 1;
          ++d;
          return Qf.NeedBit(
            this.treeMake(a, b, c, d),
            this.treeMake(a, b, c | 1, d)
          );
        },
        make: function (a, b, c, d) {
          if (1 == c) return Qf.NeedBit(Qf.Found(0), Qf.Found(0));
          var e = [],
            f = [];
          if (32 < d) throw N.thrown("Invalid huffman");
          for (var k = 0, g = d; k < g; ) k++, e.push(0), f.push(0);
          k = 0;
          for (g = c; k < g; ) {
            var l = k++;
            l = a[l + b];
            if (l >= d) throw N.thrown("Invalid huffman");
            e[l]++;
          }
          var h = 0;
          k = 1;
          for (g = d - 1; k < g; ) (l = k++), (h = (h + e[l]) << 1), (f[l] = h);
          e = new kc();
          k = 0;
          for (g = c; k < g; )
            (l = k++),
              (c = a[l + b]),
              0 != c &&
                ((h = f[c - 1]), (f[c - 1] = h + 1), (e.h[(h << 5) | c] = l));
          return this.treeCompress(
            Qf.NeedBit(this.treeMake(e, d, 0, 1), this.treeMake(e, d, 1, 1))
          );
        },
        __class__: In,
      };
      var Jn = function (a) {
        this.buffer = new Nb(new ArrayBuffer(65536));
        this.pos = 0;
        a && (this.crc = new ki());
      };
      h["haxe.zip._InflateImpl.Window"] = Jn;
      Jn.__name__ = "haxe.zip._InflateImpl.Window";
      Jn.prototype = {
        slide: function () {
          null != this.crc && this.crc.update(this.buffer, 0, 32768);
          var a = new Nb(new ArrayBuffer(65536));
          this.pos -= 32768;
          a.blit(0, this.buffer, 32768, this.pos);
          this.buffer = a;
        },
        addBytes: function (a, b, c) {
          65536 < this.pos + c && this.slide();
          this.buffer.blit(this.pos, a, b, c);
          this.pos += c;
        },
        addByte: function (a) {
          65536 == this.pos && this.slide();
          this.buffer.b[this.pos] = a & 255;
          this.pos++;
        },
        getLastChar: function () {
          return this.buffer.b[this.pos - 1];
        },
        available: function () {
          return this.pos;
        },
        checksum: function () {
          null != this.crc && this.crc.update(this.buffer, 0, this.pos);
          return this.crc;
        },
        __class__: Jn,
      };
      var Fc = (w["haxe.zip._InflateImpl.State"] = {
        __ename__: "haxe.zip._InflateImpl.State",
        __constructs__: null,
        Head: {
          _hx_name: "Head",
          _hx_index: 0,
          __enum__: "haxe.zip._InflateImpl.State",
          toString: p,
        },
        Block: {
          _hx_name: "Block",
          _hx_index: 1,
          __enum__: "haxe.zip._InflateImpl.State",
          toString: p,
        },
        CData: {
          _hx_name: "CData",
          _hx_index: 2,
          __enum__: "haxe.zip._InflateImpl.State",
          toString: p,
        },
        Flat: {
          _hx_name: "Flat",
          _hx_index: 3,
          __enum__: "haxe.zip._InflateImpl.State",
          toString: p,
        },
        Crc: {
          _hx_name: "Crc",
          _hx_index: 4,
          __enum__: "haxe.zip._InflateImpl.State",
          toString: p,
        },
        Dist: {
          _hx_name: "Dist",
          _hx_index: 5,
          __enum__: "haxe.zip._InflateImpl.State",
          toString: p,
        },
        DistOne: {
          _hx_name: "DistOne",
          _hx_index: 6,
          __enum__: "haxe.zip._InflateImpl.State",
          toString: p,
        },
        Done: {
          _hx_name: "Done",
          _hx_index: 7,
          __enum__: "haxe.zip._InflateImpl.State",
          toString: p,
        },
      });
      Fc.__constructs__ = [
        Fc.Head,
        Fc.Block,
        Fc.CData,
        Fc.Flat,
        Fc.Crc,
        Fc.Dist,
        Fc.DistOne,
        Fc.Done,
      ];
      var Bd = function (a, b, c) {
        null == c && (c = !0);
        null == b && (b = !0);
        this.isFinal = !1;
        this.htools = new In();
        this.huffman = this.buildFixedHuffman();
        this.huffdist = null;
        this.dist = this.len = 0;
        this.state = b ? Fc.Head : Fc.Block;
        this.input = a;
        this.needed = this.nbits = this.bits = 0;
        this.output = null;
        this.outpos = 0;
        this.lengths = [];
        this.lengths.push(-1);
        this.lengths.push(-1);
        this.lengths.push(-1);
        this.lengths.push(-1);
        this.lengths.push(-1);
        this.lengths.push(-1);
        this.lengths.push(-1);
        this.lengths.push(-1);
        this.lengths.push(-1);
        this.lengths.push(-1);
        this.lengths.push(-1);
        this.lengths.push(-1);
        this.lengths.push(-1);
        this.lengths.push(-1);
        this.lengths.push(-1);
        this.lengths.push(-1);
        this.lengths.push(-1);
        this.lengths.push(-1);
        this.lengths.push(-1);
        this.window = new Jn(c);
      };
      h["haxe.zip.InflateImpl"] = Bd;
      Bd.__name__ = "haxe.zip.InflateImpl";
      Bd.prototype = {
        buildFixedHuffman: function () {
          if (null != Bd.FIXED_HUFFMAN) return Bd.FIXED_HUFFMAN;
          for (var a = [], b = 0; 288 > b; ) {
            var c = b++;
            a.push(143 >= c ? 8 : 255 >= c ? 9 : 279 >= c ? 7 : 8);
          }
          Bd.FIXED_HUFFMAN = this.htools.make(a, 0, 288, 10);
          return Bd.FIXED_HUFFMAN;
        },
        readBytes: function (a, b, c) {
          this.needed = c;
          this.outpos = b;
          this.output = a;
          if (0 < c) for (; this.inflateLoop(); );
          return c - this.needed;
        },
        getBits: function (a) {
          for (; this.nbits < a; )
            (this.bits |= this.input.readByte() << this.nbits),
              (this.nbits += 8);
          var b = this.bits & ((1 << a) - 1);
          this.nbits -= a;
          this.bits >>= a;
          return b;
        },
        getBit: function () {
          0 == this.nbits &&
            ((this.nbits = 8), (this.bits = this.input.readByte()));
          var a = 1 == (this.bits & 1);
          this.nbits--;
          this.bits >>= 1;
          return a;
        },
        getRevBits: function (a) {
          return 0 == a
            ? 0
            : this.getBit()
            ? (1 << (a - 1)) | this.getRevBits(a - 1)
            : this.getRevBits(a - 1);
        },
        resetBits: function () {
          this.nbits = this.bits = 0;
        },
        addBytes: function (a, b, c) {
          this.window.addBytes(a, b, c);
          this.output.blit(this.outpos, a, b, c);
          this.needed -= c;
          this.outpos += c;
        },
        addByte: function (a) {
          this.window.addByte(a);
          this.output.b[this.outpos] = a & 255;
          this.needed--;
          this.outpos++;
        },
        addDistOne: function (a) {
          for (var b = this.window.getLastChar(), c = 0; c < a; )
            c++, this.addByte(b);
        },
        addDist: function (a, b) {
          this.addBytes(this.window.buffer, this.window.pos - a, b);
        },
        applyHuffman: function (a) {
          switch (a._hx_index) {
            case 0:
              var b = a.i;
              return b;
            case 1:
              return (
                (b = a.left),
                (a = a.right),
                this.applyHuffman(this.getBit() ? a : b)
              );
            case 2:
              return (b = a.n), this.applyHuffman(a.table[this.getBits(b)]);
          }
        },
        inflateLengths: function (a, b) {
          for (var c = 0, d = 0; c < b; ) {
            var e = this.applyHuffman(this.huffman);
            switch (e) {
              case 0:
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 14:
              case 15:
                d = e;
                a[c] = e;
                ++c;
                break;
              case 16:
                e = c + 3 + this.getBits(2);
                if (e > b) throw N.thrown("Invalid data");
                for (; c < e; ) (a[c] = d), ++c;
                break;
              case 17:
                c += 3 + this.getBits(3);
                if (c > b) throw N.thrown("Invalid data");
                break;
              case 18:
                c += 11 + this.getBits(7);
                if (c > b) throw N.thrown("Invalid data");
                break;
              default:
                throw N.thrown("Invalid data");
            }
          }
        },
        inflateLoop: function () {
          switch (this.state._hx_index) {
            case 0:
              var a = this.input.readByte();
              if (8 != (a & 15)) throw N.thrown("Invalid data");
              var b = this.input.readByte(),
                c = 0 != (b & 32);
              if (0 != ((a << 8) + b) % 31) throw N.thrown("Invalid data");
              if (c) throw N.thrown("Unsupported dictionary");
              this.state = Fc.Block;
              return !0;
            case 1:
              switch (((this.isFinal = this.getBit()), this.getBits(2))) {
                case 0:
                  this.len = this.input.readUInt16();
                  if (this.input.readUInt16() != 65535 - this.len)
                    throw N.thrown("Invalid data");
                  this.state = Fc.Flat;
                  a = this.inflateLoop();
                  this.resetBits();
                  return a;
                case 1:
                  return (
                    (this.huffman = this.buildFixedHuffman()),
                    (this.huffdist = null),
                    (this.state = Fc.CData),
                    !0
                  );
                case 2:
                  a = this.getBits(5) + 257;
                  b = this.getBits(5) + 1;
                  var d = this.getBits(4) + 4;
                  c = 0;
                  for (var e = d; c < e; ) {
                    var f = c++;
                    this.lengths[Bd.CODE_LENGTHS_POS[f]] = this.getBits(3);
                  }
                  c = d;
                  for (e = 19; c < e; )
                    (f = c++), (this.lengths[Bd.CODE_LENGTHS_POS[f]] = 0);
                  this.huffman = this.htools.make(this.lengths, 0, 19, 8);
                  d = [];
                  c = 0;
                  for (e = a + b; c < e; ) c++, d.push(0);
                  this.inflateLengths(d, a + b);
                  this.huffdist = this.htools.make(d, a, b, 16);
                  this.huffman = this.htools.make(d, 0, a, 16);
                  this.state = Fc.CData;
                  return !0;
                default:
                  throw N.thrown("Invalid data");
              }
            case 2:
              b = this.applyHuffman(this.huffman);
              if (256 > b) return this.addByte(b), 0 < this.needed;
              if (256 == b) this.state = this.isFinal ? Fc.Crc : Fc.Block;
              else {
                b -= 257;
                a = Bd.LEN_EXTRA_BITS_TBL[b];
                if (-1 == a) throw N.thrown("Invalid data");
                this.len = Bd.LEN_BASE_VAL_TBL[b] + this.getBits(a);
                b =
                  null == this.huffdist
                    ? this.getRevBits(5)
                    : this.applyHuffman(this.huffdist);
                a = Bd.DIST_EXTRA_BITS_TBL[b];
                if (-1 == a) throw N.thrown("Invalid data");
                this.dist = Bd.DIST_BASE_VAL_TBL[b] + this.getBits(a);
                if (this.dist > this.window.available())
                  throw N.thrown("Invalid data");
                this.state = 1 == this.dist ? Fc.DistOne : Fc.Dist;
              }
              return !0;
            case 3:
              return (
                (a = this.len < this.needed ? this.len : this.needed),
                (b = this.input.read(a)),
                (this.len -= a),
                this.addBytes(b, 0, a),
                0 == this.len &&
                  (this.state = this.isFinal ? Fc.Crc : Fc.Block),
                0 < this.needed
              );
            case 4:
              a = this.window.checksum();
              if (null == a) return (this.state = Fc.Done), !0;
              b = ki.read(this.input);
              if (!a.equals(b)) throw N.thrown("Invalid CRC");
              this.state = Fc.Done;
              return !0;
            case 5:
              for (; 0 < this.len && 0 < this.needed; )
                (a = this.len < this.dist ? this.len : this.dist),
                  (a = this.needed < a ? this.needed : a),
                  this.addDist(this.dist, a),
                  (this.len -= a);
              0 == this.len && (this.state = Fc.CData);
              return 0 < this.needed;
            case 6:
              return (
                (a = this.len < this.needed ? this.len : this.needed),
                this.addDistOne(a),
                (this.len -= a),
                0 == this.len && (this.state = Fc.CData),
                0 < this.needed
              );
            case 7:
              return !1;
          }
        },
        __class__: Bd,
      };
      var zj = function (a) {
        this.i = a;
      };
      h["haxe.zip.Reader"] = zj;
      zj.__name__ = "haxe.zip.Reader";
      zj.readZip = function (a) {
        return new zj(a).read();
      };
      zj.prototype = {
        readZipDate: function () {
          var a = this.i.readUInt16(),
            b = (a >> 11) & 31,
            c = (a >> 5) & 63;
          a &= 31;
          var d = this.i.readUInt16();
          return new Date(
            (d >> 9) + 1980,
            ((d >> 5) & 15) - 1,
            d & 31,
            b,
            c,
            a << 1
          );
        },
        readExtraFields: function (a) {
          for (var b = new kb(); 0 < a; ) {
            if (4 > a) throw N.thrown("Invalid extra fields data");
            var c = this.i.readUInt16(),
              d = this.i.readUInt16();
            if (a < d) throw N.thrown("Invalid extra fields data");
            if (28789 == c) {
              var e = this.i.readByte();
              if (1 != e) {
                var f = new Dl();
                f.addByte(e);
                f.add(this.i.read(d - 1));
                b.add(mi.FUnknown(c, f.getBytes()));
              } else
                (c = this.i.readInt32()),
                  (e = this.i.read(d - 5).toString()),
                  b.add(mi.FInfoZipUnicodePath(e, c));
            } else b.add(mi.FUnknown(c, this.i.read(d)));
            a -= 4 + d;
          }
          return b;
        },
        readEntryHeader: function () {
          var a = this.i,
            b = a.readInt32();
          if (33639248 == b || 101010256 == b) return null;
          if (67324752 != b) throw N.thrown("Invalid Zip Data");
          a.readUInt16();
          b = a.readUInt16();
          var c = 0 != (b & 2048);
          if (0 != (b & 63473)) throw N.thrown("Unsupported flags " + b);
          var d = a.readUInt16(),
            e = 0 != d;
          if (e && 8 != d) throw N.thrown("Unsupported compression " + d);
          d = this.readZipDate();
          var f = a.readInt32(),
            k = a.readInt32(),
            g = a.readInt32(),
            l = a.readInt16(),
            h = a.readInt16();
          a = a.readString(l);
          h = this.readExtraFields(h);
          c && h.push(mi.FUtf8);
          0 != (b & 8) && (f = null);
          return {
            fileName: a,
            fileSize: g,
            fileTime: d,
            compressed: e,
            dataSize: k,
            data: null,
            crc32: f,
            extraFields: h,
          };
        },
        read: function () {
          for (var a = new kb(), b = null; ; ) {
            var c = this.readEntryHeader();
            if (null == c) break;
            if (null == c.crc32) {
              if (c.compressed) {
                null == b && (b = new Nb(new ArrayBuffer(65536)));
                for (var d = new Dl(), e = new Bd(this.i, !1, !1); ; ) {
                  var f = e.readBytes(b, 0, 65536);
                  d.addBytes(b, 0, f);
                  if (65536 > f) break;
                }
                c.data = d.getBytes();
              } else c.data = this.i.read(c.dataSize);
              c.crc32 = this.i.readInt32();
              134695760 == c.crc32 && (c.crc32 = this.i.readInt32());
              c.dataSize = this.i.readInt32();
              c.fileSize = this.i.readInt32();
              c.dataSize = c.fileSize;
              c.compressed = !1;
            } else c.data = this.i.read(c.dataSize);
            a.add(c);
          }
          return a;
        },
        __class__: zj,
      };
      var xg = function () {};
      h["js.Browser"] = xg;
      xg.__name__ = "js.Browser";
      xg.__properties__ = { get_supported: "get_supported" };
      xg.get_supported = function () {
        return "undefined" != typeof window &&
          "undefined" != typeof window.location
          ? "string" == typeof window.location.protocol
          : !1;
      };
      xg.getLocalStorage = function () {
        try {
          var a = window.localStorage;
          a.getItem("");
          if (0 == a.length) {
            var b = "_hx_" + Math.random();
            a.setItem(b, b);
            a.removeItem(b);
          }
          return a;
        } catch (c) {
          return null;
        }
      };
      var yo = function () {};
      h["js.html._CanvasElement.CanvasUtil"] = yo;
      yo.__name__ = "js.html._CanvasElement.CanvasUtil";
      yo.getContextWebGL = function (a, b) {
        var c = a.getContext("webgl", b);
        if (null != c) return c;
        c = a.getContext("experimental-webgl", b);
        return null != c ? c : null;
      };
      var zo = function () {};
      h["js.lib._ArrayBuffer.ArrayBufferCompat"] = zo;
      zo.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
      zo.sliceImpl = function (a, b) {
        a = new Uint8Array(this, a, null == b ? null : b - a);
        b = new Uint8Array(a.byteLength);
        b.set(a);
        return b.buffer;
      };
      var Fm = function () {
        this.connected = !0;
        this.buttons = [];
        this.axes = [];
      };
      h["lime._internal.backend.html5.GameDeviceData"] = Fm;
      Fm.__name__ = "lime._internal.backend.html5.GameDeviceData";
      Fm.prototype = { __class__: Fm };
      var Ln = function (a) {
        this.parent = a;
        this.id = -1;
        this.gain = 1;
        this.position = new Kn();
      };
      h["lime._internal.backend.html5.HTML5AudioSource"] = Ln;
      Ln.__name__ = "lime._internal.backend.html5.HTML5AudioSource";
      Ln.prototype = {
        dispose: function () {},
        init: function () {},
        play: function () {
          if (
            !this.playing &&
            null != this.parent.buffer &&
            null != this.parent.buffer.__srcHowl
          ) {
            this.playing = !0;
            var a = this.getCurrentTime();
            this.completed = !1;
            var b = this.parent.buffer.__srcHowl._volume;
            this.parent.buffer.__srcHowl._volume = this.parent.get_gain();
            this.id = this.parent.buffer.__srcHowl.play();
            this.parent.buffer.__srcHowl._volume = b;
            this.setPosition(this.parent.get_position());
            this.parent.buffer.__srcHowl.on(
              "end",
              n(this, this.howl_onEnd),
              this.id
            );
            this.setCurrentTime(a);
          }
        },
        stop: function () {
          this.playing = !1;
          null != this.parent.buffer &&
            null != this.parent.buffer.__srcHowl &&
            (this.parent.buffer.__srcHowl.stop(this.id),
            this.parent.buffer.__srcHowl.off(
              "end",
              n(this, this.howl_onEnd),
              this.id
            ));
        },
        howl_onEnd: function () {
          this.playing = !1;
          0 < this.loops
            ? (this.loops--, this.stop(), this.play())
            : (null != this.parent.buffer &&
                null != this.parent.buffer.__srcHowl &&
                (this.parent.buffer.__srcHowl.stop(this.id),
                this.parent.buffer.__srcHowl.off(
                  "end",
                  n(this, this.howl_onEnd),
                  this.id
                )),
              (this.completed = !0),
              this.parent.onComplete.dispatch());
        },
        getCurrentTime: function () {
          if (-1 == this.id) return 0;
          if (this.completed) return this.getLength();
          if (
            null != this.parent.buffer &&
            null != this.parent.buffer.__srcHowl
          ) {
            var a =
              ((1e3 * this.parent.buffer.__srcHowl.seek(this.id)) | 0) -
              this.parent.offset;
            return 0 > a ? 0 : a;
          }
          return 0;
        },
        setCurrentTime: function (a) {
          if (
            null != this.parent.buffer &&
            null != this.parent.buffer.__srcHowl
          ) {
            var b = (a + this.parent.offset) / 1e3;
            0 > b && (b = 0);
            this.parent.buffer.__srcHowl.seek(b, this.id);
          }
          return a;
        },
        getGain: function () {
          return this.gain;
        },
        setGain: function (a) {
          null != this.parent.buffer &&
            null != this.parent.buffer.__srcHowl &&
            -1 != this.id &&
            this.parent.buffer.__srcHowl.volume(a, this.id);
          return (this.gain = a);
        },
        getLength: function () {
          return 0 != this.length
            ? this.length
            : null != this.parent.buffer && null != this.parent.buffer.__srcHowl
            ? (1e3 * this.parent.buffer.__srcHowl.duration()) | 0
            : 0;
        },
        setLength: function (a) {
          return (this.length = a);
        },
        setLoops: function (a) {
          return (this.loops = a);
        },
        getPitch: function () {
          return this.parent.buffer.__srcHowl.rate();
        },
        setPitch: function (a) {
          this.parent.buffer.__srcHowl.rate(a);
          return this.getPitch();
        },
        getPosition: function () {
          return this.position;
        },
        setPosition: function (a) {
          this.position.x = a.x;
          this.position.y = a.y;
          this.position.z = a.z;
          this.position.w = a.w;
          null != this.parent.buffer &&
            null != this.parent.buffer.__srcHowl &&
            null != this.parent.buffer.__srcHowl.pos &&
            this.parent.buffer.__srcHowl.pos(
              this.position.x,
              this.position.y,
              this.position.z,
              this.id
            );
          return this.position;
        },
        __class__: Ln,
      };
      var Ia = function () {
        this.validStatus0 = new ya("Tizen", "gi").match(
          window.navigator.userAgent
        );
      };
      h["lime._internal.backend.html5.HTML5HTTPRequest"] = Ia;
      Ia.__name__ = "lime._internal.backend.html5.HTML5HTTPRequest";
      Ia.loadImage = function (a) {
        var b = new Gd();
        Ia.activeRequests < Ia.requestLimit
          ? (Ia.activeRequests++, Ia.__loadImage(a, b, 0))
          : Ia.requestQueue.add({
              instance: null,
              uri: a,
              promise: b,
              type: "IMAGE",
              options: 0,
            });
        return b.future;
      };
      Ia.loadImageFromBytes = function (a, b) {
        var c = URL.createObjectURL(new Blob([a.b.bufferValue], { type: b }));
        return null != c
          ? ((a = new Gd()),
            Ia.activeRequests < Ia.requestLimit
              ? (Ia.activeRequests++, Ia.__loadImage(c, a, 1))
              : Ia.requestQueue.add({
                  instance: null,
                  uri: c,
                  promise: a,
                  type: "IMAGE",
                  options: 1,
                }),
            a.future)
          : Ia.loadImage("data:" + b + ";base64," + gg.encode(a));
      };
      Ia.processQueue = function () {
        if (Ia.activeRequests < Ia.requestLimit && 0 < Ia.requestQueue.length) {
          Ia.activeRequests++;
          var a = Ia.requestQueue.pop();
          switch (a.type) {
            case "BINARY":
              a.instance.__loadData(a.uri, a.promise);
              break;
            case "IMAGE":
              Ia.__loadImage(a.uri, a.promise, a.options);
              break;
            case "TEXT":
              a.instance.__loadText(a.uri, a.promise);
              break;
            default:
              Ia.activeRequests--;
          }
        }
      };
      Ia.__fixHostname = function (a) {
        return null == a ? "" : a;
      };
      Ia.__fixPort = function (a, b) {
        if (null == a || "" == a)
          switch (b) {
            case "ftp:":
              return "21";
            case "gopher:":
              return "70";
            case "http:":
              return "80";
            case "https:":
              return "443";
            case "ws:":
              return "80";
            case "wss:":
              return "443";
            default:
              return "";
          }
        return a;
      };
      Ia.__fixProtocol = function (a) {
        return null == a || "" == a ? "http:" : a;
      };
      Ia.__isInMemoryURI = function (a) {
        return K.startsWith(a, "data:") ? !0 : K.startsWith(a, "blob:");
      };
      Ia.__isSameOrigin = function (a) {
        if (null == a || "" == a || Ia.__isInMemoryURI(a)) return !0;
        null == Ia.originElement &&
          ((Ia.originElement = window.document.createElement("a")),
          (Ia.originHostname = Ia.__fixHostname(H.location.hostname)),
          (Ia.originProtocol = Ia.__fixProtocol(H.location.protocol)),
          (Ia.originPort = Ia.__fixPort(H.location.port, Ia.originProtocol)));
        var b = Ia.originElement;
        b.href = a;
        "" == b.hostname && (b.href = b.href);
        var c = Ia.__fixHostname(b.hostname);
        a = Ia.__fixProtocol(b.protocol);
        b = Ia.__fixPort(b.port, a);
        c = "" == c || c == Ia.originHostname;
        b = "" == b || b == Ia.originPort;
        return "file:" != a && c ? b : !1;
      };
      Ia.__loadImage = function (a, b, c) {
        var d = new window.Image();
        Ia.__isSameOrigin(a) || (d.crossOrigin = "Anonymous");
        null == Ia.supportsImageProgress &&
          (Ia.supportsImageProgress = "onprogress" in d);
        if (Ia.supportsImageProgress || Ia.__isInMemoryURI(a))
          d.addEventListener(
            "load",
            function (e) {
              Ia.__revokeBlobURI(a, c);
              e = new zg(null, d.width, d.height);
              e.__srcImage = d;
              Ia.activeRequests--;
              Ia.processQueue();
              b.complete(new Va(e));
            },
            !1
          ),
            d.addEventListener(
              "progress",
              function (a) {
                b.progress(a.loaded, a.total);
              },
              !1
            ),
            d.addEventListener(
              "error",
              function (d) {
                Ia.__revokeBlobURI(a, c);
                Ia.activeRequests--;
                Ia.processQueue();
                b.error(new ni(d.detail, null));
              },
              !1
            ),
            (d.src = a);
        else {
          var e = new XMLHttpRequest();
          e.onload = function (a) {
            Ia.activeRequests--;
            Ia.processQueue();
            new Va().__fromBytes(Nb.ofData(e.response), function (a) {
              b.complete(a);
            });
          };
          e.onerror = function (a) {
            b.error(new ni(a.message, null));
          };
          e.onprogress = function (a) {
            a.lengthComputable && b.progress(a.loaded, a.total);
          };
          e.open("GET", a, !0);
          e.responseType = "arraybuffer";
          e.overrideMimeType("text/plain; charset=x-user-defined");
          e.send(null);
        }
      };
      Ia.__revokeBlobURI = function (a, b) {
        0 != (b & 1) && URL.revokeObjectURL(a);
      };
      Ia.prototype = {
        init: function (a) {
          this.parent = a;
        },
        load: function (a, b, c) {
          this.request = new XMLHttpRequest();
          "POST" == this.parent.method
            ? this.request.upload.addEventListener("progress", b, !1)
            : this.request.addEventListener("progress", b, !1);
          this.request.onreadystatechange = c;
          b = "";
          if (null == this.parent.data) {
            c = Object.keys(this.parent.formData.h);
            for (var d = c.length, e = 0; e < d; ) {
              var f = c[e++];
              0 < b.length && (b += "&");
              var k = this.parent.formData.h[f];
              if (-1 < f.indexOf("[]") && k instanceof Array) {
                var g = [];
                for (k = T(k); k.hasNext(); ) {
                  var l = k.next();
                  g.push(encodeURIComponent(l));
                }
                g = g.join("&amp;" + f + "=");
                b += encodeURIComponent(f) + "=" + g;
              } else
                (g = encodeURIComponent(f) + "="),
                  (f = M.string(k)),
                  (b += g + encodeURIComponent(f));
            }
            "GET" == this.parent.method &&
              "" != b &&
              ((a = -1 < a.indexOf("?") ? a + ("&" + b) : a + ("?" + b)),
              (b = ""));
          }
          this.request.open(M.string(this.parent.method), a, !0);
          0 < this.parent.timeout &&
            (this.request.timeout = this.parent.timeout);
          this.binary && (this.request.responseType = "arraybuffer");
          a = null;
          g = 0;
          for (c = this.parent.headers; g < c.length; )
            (d = c[g]),
              ++g,
              "Content-Type" == d.name
                ? (a = d.value)
                : this.request.setRequestHeader(d.name, d.value);
          null != this.parent.contentType && (a = this.parent.contentType);
          null == a &&
            (null != this.parent.data
              ? (a = "application/octet-stream")
              : "" != b && (a = "application/x-www-form-urlencoded"));
          null != a && this.request.setRequestHeader("Content-Type", a);
          this.parent.withCredentials && (this.request.withCredentials = !0);
          null != this.parent.data
            ? this.request.send(this.parent.data.b.bufferValue)
            : this.request.send(b);
        },
        loadData: function (a) {
          var b = new Gd();
          Ia.activeRequests < Ia.requestLimit
            ? (Ia.activeRequests++, this.__loadData(a, b))
            : Ia.requestQueue.add({
                instance: this,
                uri: a,
                promise: b,
                type: "BINARY",
                options: 0,
              });
          return b.future;
        },
        loadText: function (a) {
          var b = new Gd();
          Ia.activeRequests < Ia.requestLimit
            ? (Ia.activeRequests++, this.__loadText(a, b))
            : Ia.requestQueue.add({
                instance: this,
                uri: a,
                promise: b,
                type: "TEXT",
                options: 0,
              });
          return b.future;
        },
        processResponse: function () {
          if (this.parent.enableResponseHeaders) {
            this.parent.responseHeaders = [];
            for (
              var a,
                b,
                c = 0,
                d = this.request.getAllResponseHeaders().split("\n");
              c < d.length;

            )
              (b = d[c]),
                ++c,
                (a = K.trim(X.substr(b, 0, b.indexOf(":")))),
                (b = K.trim(X.substr(b, b.indexOf(":") + 1, null))),
                "" != a && this.parent.responseHeaders.push(new Gl(a, b));
          }
          this.parent.responseStatus = this.request.status;
        },
        __loadData: function (a, b) {
          var c = this;
          this.binary = !0;
          this.load(
            a,
            function (a) {
              b.progress(a.loaded, a.total);
            },
            function (a) {
              4 == c.request.readyState &&
                ((a = null),
                "" == c.request.responseType
                  ? null != c.request.responseText &&
                    (a = Nb.ofString(c.request.responseText))
                  : null != c.request.response &&
                    (a = Nb.ofData(c.request.response)),
                null != c.request.status &&
                ((200 <= c.request.status && 400 > c.request.status) ||
                  (c.validStatus0 && 0 == c.request.status))
                  ? (c.processResponse(), b.complete(a))
                  : (c.processResponse(), b.error(new ni(c.request.status, a))),
                (c.request = null),
                Ia.activeRequests--,
                Ia.processQueue());
            }
          );
        },
        __loadText: function (a, b) {
          var c = this;
          this.binary = !1;
          this.load(
            a,
            function (a) {
              b.progress(a.loaded, a.total);
            },
            function (a) {
              4 == c.request.readyState &&
                (null != c.request.status &&
                ((200 <= c.request.status && 400 > c.request.status) ||
                  (c.validStatus0 && 0 == c.request.status))
                  ? (c.processResponse(), b.complete(c.request.responseText))
                  : (c.processResponse(),
                    b.error(new ni(c.request.status, c.request.responseText))),
                (c.request = null),
                Ia.activeRequests--,
                Ia.processQueue());
            }
          );
        },
        __class__: Ia,
      };
      var Oa = function (a) {
        this.imeCompositionActive = !1;
        this.unusedTouchesPool = new kb();
        this.scale = 1;
        this.currentTouches = new kc();
        this.parent = a;
        this.cursor = Db.DEFAULT;
        this.cacheMouseY = this.cacheMouseX = 0;
        var b = a.__attributes;
        Object.prototype.hasOwnProperty.call(b, "context") || (b.context = {});
        this.renderType = b.context.type;
        Object.prototype.hasOwnProperty.call(b, "element") &&
          (a.element = b.element);
        var c = a.element;
        Object.prototype.hasOwnProperty.call(b, "allowHighDPI") &&
          b.allowHighDPI &&
          "dom" != this.renderType &&
          (this.scale = window.devicePixelRatio);
        a.__scale = this.scale;
        this.setWidth = Object.prototype.hasOwnProperty.call(b, "width")
          ? b.width
          : 0;
        this.setHeight = Object.prototype.hasOwnProperty.call(b, "height")
          ? b.height
          : 0;
        a.__width = this.setWidth;
        a.__height = this.setHeight;
        a.id = Oa.windowID++;
        c instanceof HTMLCanvasElement
          ? (this.canvas = c)
          : "dom" == this.renderType
          ? (this.div = window.document.createElement("div"))
          : (this.canvas = window.document.createElement("canvas"));
        if (null != this.canvas) {
          var d = this.canvas.style;
          d.setProperty("-webkit-transform", "translateZ(0)", null);
          d.setProperty("transform", "translateZ(0)", null);
        } else
          null != this.div &&
            ((d = this.div.style),
            d.setProperty("-webkit-transform", "translate3D(0,0,0)", null),
            d.setProperty("transform", "translate3D(0,0,0)", null),
            (d.position = "relative"),
            (d.overflow = "hidden"),
            d.setProperty("-webkit-user-select", "none", null),
            d.setProperty("-moz-user-select", "none", null),
            d.setProperty("-ms-user-select", "none", null),
            d.setProperty("-o-user-select", "none", null));
        0 == a.__width &&
          0 == a.__height &&
          (null != c
            ? ((a.__width = c.clientWidth), (a.__height = c.clientHeight))
            : ((a.__width = window.innerWidth),
              (a.__height = window.innerHeight)),
          (this.cacheElementWidth = a.__width),
          (this.cacheElementHeight = a.__height),
          (this.resizeElement = !0));
        null != this.canvas
          ? ((this.canvas.width = Math.round(a.__width * this.scale)),
            (this.canvas.height = Math.round(a.__height * this.scale)),
            (this.canvas.style.width = a.__width + "px"),
            (this.canvas.style.height = a.__height + "px"))
          : ((this.div.style.width = a.__width + "px"),
            (this.div.style.height = a.__height + "px"));
        if (
          (Object.prototype.hasOwnProperty.call(b, "resizable") &&
            b.resizable) ||
          (!Object.prototype.hasOwnProperty.call(b, "width") &&
            0 == this.setWidth &&
            0 == this.setHeight)
        )
          a.__resizable = !0;
        this.updateSize();
        if (null != c) {
          null != this.canvas
            ? c != this.canvas && c.appendChild(this.canvas)
            : c.appendChild(this.div);
          b = "mousedown mouseenter mouseleave mousemove mouseup wheel".split(
            " "
          );
          for (d = 0; d < b.length; ) {
            var e = b[d];
            ++d;
            c.addEventListener(e, n(this, this.handleMouseEvent), !0);
          }
          c.addEventListener(
            "contextmenu",
            n(this, this.handleContextMenuEvent),
            !0
          );
          c.addEventListener("dragstart", n(this, this.handleDragEvent), !0);
          c.addEventListener("dragover", n(this, this.handleDragEvent), !0);
          c.addEventListener("drop", n(this, this.handleDragEvent), !0);
          c.addEventListener("touchstart", n(this, this.handleTouchEvent), !0);
          c.addEventListener("touchmove", n(this, this.handleTouchEvent), !0);
          c.addEventListener("touchend", n(this, this.handleTouchEvent), !0);
          c.addEventListener("touchcancel", n(this, this.handleTouchEvent), !0);
          c.addEventListener(
            "gamepadconnected",
            n(this, this.handleGamepadEvent),
            !0
          );
          c.addEventListener(
            "gamepaddisconnected",
            n(this, this.handleGamepadEvent),
            !0
          );
        }
        this.createContext();
        "webgl" == a.context.type &&
          (this.canvas.addEventListener(
            "webglcontextlost",
            n(this, this.handleContextEvent),
            !1
          ),
          this.canvas.addEventListener(
            "webglcontextrestored",
            n(this, this.handleContextEvent),
            !1
          ));
      };
      h["lime._internal.backend.html5.HTML5Window"] = Oa;
      Oa.__name__ = "lime._internal.backend.html5.HTML5Window";
      Oa.prototype = {
        close: function () {
          var a = this.parent.element;
          if (null != a) {
            null != this.canvas
              ? (a != this.canvas && a.removeChild(this.canvas),
                (this.canvas = null))
              : null != this.div &&
                (a.removeChild(this.div), (this.div = null));
            for (
              var b =
                  "mousedown mouseenter mouseleave mousemove mouseup wheel".split(
                    " "
                  ),
                c = 0;
              c < b.length;

            ) {
              var d = b[c];
              ++c;
              a.removeEventListener(d, n(this, this.handleMouseEvent), !0);
            }
            a.removeEventListener(
              "contextmenu",
              n(this, this.handleContextMenuEvent),
              !0
            );
            a.removeEventListener(
              "dragstart",
              n(this, this.handleDragEvent),
              !0
            );
            a.removeEventListener(
              "dragover",
              n(this, this.handleDragEvent),
              !0
            );
            a.removeEventListener("drop", n(this, this.handleDragEvent), !0);
            a.removeEventListener(
              "touchstart",
              n(this, this.handleTouchEvent),
              !0
            );
            a.removeEventListener(
              "touchmove",
              n(this, this.handleTouchEvent),
              !0
            );
            a.removeEventListener(
              "touchend",
              n(this, this.handleTouchEvent),
              !0
            );
            a.removeEventListener(
              "touchcancel",
              n(this, this.handleTouchEvent),
              !0
            );
            a.removeEventListener(
              "gamepadconnected",
              n(this, this.handleGamepadEvent),
              !0
            );
            a.removeEventListener(
              "gamepaddisconnected",
              n(this, this.handleGamepadEvent),
              !0
            );
          }
          this.parent.application.__removeWindow(this.parent);
        },
        createContext: function () {
          var a = new Mn(),
            b = this.parent.__attributes.context;
          a.window = this.parent;
          a.attributes = b;
          if (null != this.div)
            (a.dom = this.div), (a.type = "dom"), (a.version = "");
          else if (null != this.canvas) {
            var c = null,
              d = "canvas" == this.renderType,
              e =
                "opengl" == this.renderType ||
                "opengles" == this.renderType ||
                "webgl" == this.renderType,
              f =
                !Object.prototype.hasOwnProperty.call(b, "version") ||
                "1" != b.version,
              k = !1;
            if (
              e ||
              (!d &&
                (!Object.prototype.hasOwnProperty.call(b, "hardware") ||
                  b.hardware))
            ) {
              d =
                Object.prototype.hasOwnProperty.call(b, "background") &&
                null == b.background;
              e = Object.prototype.hasOwnProperty.call(b, "colorDepth")
                ? b.colorDepth
                : 16;
              var g =
                  Object.prototype.hasOwnProperty.call(b, "antialiasing") &&
                  0 < b.antialiasing,
                l = Object.prototype.hasOwnProperty.call(b, "depth")
                  ? b.depth
                  : !0;
              b =
                Object.prototype.hasOwnProperty.call(b, "stencil") && b.stencil;
              b = {
                alpha: d || 16 < e,
                antialias: g,
                depth: l,
                premultipliedAlpha: !0,
                stencil: b,
                preserveDrawingBuffer: !1,
                failIfMajorPerformanceCaveat: !1,
              };
              d = ["webgl", "experimental-webgl"];
              f && d.unshift("webgl2");
              for (
                f = 0;
                f < d.length &&
                ((e = d[f]),
                ++f,
                (c = this.canvas.getContext(e, b)),
                null != c && "webgl2" == e && (k = !0),
                null == c);

              );
            }
            null == c
              ? ((a.canvas2D = this.canvas.getContext("2d")),
                (a.type = "canvas"),
                (a.version = ""))
              : ((a.webgl = Sc.fromWebGL2RenderContext(c)),
                k && (a.webgl2 = c),
                null == Ag.context &&
                  ((Ag.context = c),
                  (Ag.type = "webgl"),
                  (Ag.version = k ? 2 : 1)),
                (a.type = "webgl"),
                (a.version = k ? "2" : "1"));
          }
          this.parent.context = a;
        },
        focusTextInput: function () {
          var a = this;
          this.__focusPending ||
            ((this.__focusPending = !0),
            yg.delay(function () {
              a.__focusPending = !1;
              a.textInputEnabled && Oa.textInput.focus();
            }, 20));
        },
        getFrameRate: function () {
          return null == this.parent.application
            ? 0
            : 0 > this.parent.application.__backend.framePeriod
            ? 60
            : 1e3 == this.parent.application.__backend.framePeriod
            ? 0
            : 1e3 / this.parent.application.__backend.framePeriod;
        },
        handleContextEvent: function (a) {
          switch (a.type) {
            case "webglcontextlost":
              a.cancelable && a.preventDefault();
              this.parent.context = null;
              this.parent.onRenderContextLost.dispatch();
              break;
            case "webglcontextrestored":
              this.createContext(),
                this.parent.onRenderContextRestored.dispatch(
                  this.parent.context
                );
          }
        },
        handleContextMenuEvent: function (a) {
          (this.parent.onMouseUp.canceled ||
            this.parent.onMouseDown.canceled) &&
            a.cancelable &&
            a.preventDefault();
        },
        handleCutOrCopyEvent: function (a) {
          var b = mc.get_text();
          null == b && (b = "");
          a.clipboardData.setData("text/plain", b);
          a.cancelable && a.preventDefault();
        },
        handleDragEvent: function (a) {
          switch (a.type) {
            case "dragover":
              return a.preventDefault(), !1;
            case "dragstart":
              if (
                "img" ==
                  za.__cast(a.target, HTMLElement).nodeName.toLowerCase() &&
                a.cancelable
              )
                return a.preventDefault(), !1;
              break;
            case "drop":
              if (null != a.dataTransfer && 0 < a.dataTransfer.files.length)
                return (
                  this.parent.onDropFile.dispatch(a.dataTransfer.files),
                  a.preventDefault(),
                  !1
                );
          }
          return !0;
        },
        handleFocusEvent: function (a) {
          this.textInputEnabled &&
            (null == a.relatedTarget || this.isDescendent(a.relatedTarget)) &&
            this.focusTextInput();
        },
        handleFullscreenEvent: function (a) {
          if (
            null !=
            (document.fullscreenElement ||
              document.mozFullScreenElement ||
              document.webkitFullscreenElement ||
              document.msFullscreenElement)
          )
            (this.isFullscreen = !0),
              (this.parent.__fullscreen = !0),
              this.requestedFullscreen &&
                ((this.requestedFullscreen = !1),
                this.parent.onFullscreen.dispatch());
          else {
            this.isFullscreen = !1;
            this.parent.__fullscreen = !1;
            this.parent.onRestore.dispatch();
            a = [
              "fullscreenchange",
              "mozfullscreenchange",
              "webkitfullscreenchange",
              "MSFullscreenChange",
            ];
            for (
              var b = [
                  "fullscreenerror",
                  "mozfullscreenerror",
                  "webkitfullscreenerror",
                  "MSFullscreenError",
                ],
                c = 0,
                d = a.length;
              c < d;

            ) {
              var e = c++;
              window.document.removeEventListener(
                a[e],
                n(this, this.handleFullscreenEvent),
                !1
              );
              window.document.removeEventListener(
                b[e],
                n(this, this.handleFullscreenEvent),
                !1
              );
            }
          }
        },
        handleGamepadEvent: function (a) {
          switch (a.type) {
            case "gamepadconnected":
              xc.__connect(a.gamepad.index);
              "standard" == a.gamepad.mapping && Bc.__connect(a.gamepad.index);
              break;
            case "gamepaddisconnected":
              xc.__disconnect(a.gamepad.index),
                Bc.__disconnect(a.gamepad.index);
          }
        },
        handleInputEvent: function (a) {
          this.imeCompositionActive ||
            Oa.textInput.value == Oa.dummyCharacter ||
            ((a = K.replace(Oa.textInput.value, Oa.dummyCharacter, "")),
            0 < a.length && this.parent.onTextInput.dispatch(a),
            (Oa.textInput.value = Oa.dummyCharacter));
        },
        handleMouseEvent: function (a) {
          if ("wheel" != a.type) {
            if (null != this.parent.element)
              if (null != this.canvas) {
                var b = this.canvas.getBoundingClientRect();
                var c = (this.parent.__width / b.width) * (a.clientX - b.left);
                b = (this.parent.__height / b.height) * (a.clientY - b.top);
              } else
                null != this.div
                  ? ((b = this.div.getBoundingClientRect()),
                    (c = a.clientX - b.left),
                    (b = a.clientY - b.top))
                  : ((b = this.parent.element.getBoundingClientRect()),
                    (c =
                      (this.parent.__width / b.width) * (a.clientX - b.left)),
                    (b =
                      (this.parent.__height / b.height) * (a.clientY - b.top)));
            else (c = a.clientX), (b = a.clientY);
            switch (a.type) {
              case "mousedown":
                a.currentTarget == this.parent.element &&
                  window.addEventListener(
                    "mouseup",
                    n(this, this.handleMouseEvent)
                  );
                this.parent.clickCount = a.detail;
                this.parent.onMouseDown.dispatch(c, b, a.button);
                this.parent.clickCount = 0;
                this.parent.onMouseDown.canceled &&
                  a.cancelable &&
                  a.preventDefault();
                break;
              case "mouseenter":
                a.target == this.parent.element &&
                  (this.parent.onEnter.dispatch(),
                  this.parent.onEnter.canceled &&
                    a.cancelable &&
                    a.preventDefault());
                break;
              case "mouseleave":
                a.target == this.parent.element &&
                  (this.parent.onLeave.dispatch(),
                  this.parent.onLeave.canceled &&
                    a.cancelable &&
                    a.preventDefault());
                break;
              case "mousemove":
                if (c != this.cacheMouseX || b != this.cacheMouseY)
                  this.parent.onMouseMove.dispatch(c, b),
                    this.parent.onMouseMoveRelative.dispatch(
                      c - this.cacheMouseX,
                      b - this.cacheMouseY
                    ),
                    (this.parent.onMouseMove.canceled ||
                      this.parent.onMouseMoveRelative.canceled) &&
                      a.cancelable &&
                      a.preventDefault();
                break;
              case "mouseup":
                window.removeEventListener(
                  "mouseup",
                  n(this, this.handleMouseEvent)
                ),
                  a.currentTarget == this.parent.element && a.stopPropagation(),
                  (this.parent.clickCount = a.detail),
                  this.parent.onMouseUp.dispatch(c, b, a.button),
                  (this.parent.clickCount = 0),
                  this.parent.onMouseUp.canceled &&
                    a.cancelable &&
                    a.preventDefault();
            }
            this.cacheMouseX = c;
            this.cacheMouseY = b;
          } else {
            switch (a.deltaMode) {
              case 0:
                c = dh.PIXELS;
                break;
              case 1:
                c = dh.LINES;
                break;
              case 2:
                c = dh.PAGES;
                break;
              default:
                c = dh.UNKNOWN;
            }
            this.parent.onMouseWheel.dispatch(a.deltaX, -a.deltaY, c);
            this.parent.onMouseWheel.canceled &&
              a.cancelable &&
              a.preventDefault();
          }
        },
        handlePasteEvent: function (a) {
          if (-1 < a.clipboardData.types.indexOf("text/plain")) {
            var b = a.clipboardData.getData("text/plain");
            mc.set_text(b);
            this.textInputEnabled && this.parent.onTextInput.dispatch(b);
            a.cancelable && a.preventDefault();
          }
        },
        handleResizeEvent: function (a) {
          this.primaryTouch = null;
          this.updateSize();
        },
        handleTouchEvent: function (a) {
          a.cancelable && a.preventDefault();
          var b = null;
          null != this.parent.element &&
            (b =
              null != this.canvas
                ? this.canvas.getBoundingClientRect()
                : null != this.div
                ? this.div.getBoundingClientRect()
                : this.parent.element.getBoundingClientRect());
          var c = this.setWidth,
            d = this.setHeight;
          if (0 == c || 0 == d)
            null != b ? ((c = b.width), (d = b.height)) : (d = c = 1);
          for (var e, f, k, g, l, h = 0, u = a.changedTouches; h < u.length; ) {
            var m = u[h];
            ++h;
            null != b
              ? ((f = (c / b.width) * (m.clientX - b.left)),
                (k = (d / b.height) * (m.clientY - b.top)))
              : ((f = m.clientX), (k = m.clientY));
            if ("touchstart" == a.type)
              (e = this.unusedTouchesPool.pop()),
                null == e
                  ? (e = new oc(
                      f / c,
                      k / d,
                      m.identifier,
                      0,
                      0,
                      m.force,
                      this.parent.id
                    ))
                  : ((e.x = f / c),
                    (e.y = k / d),
                    (e.id = m.identifier),
                    (e.dx = 0),
                    (e.dy = 0),
                    (e.pressure = m.force),
                    (e.device = this.parent.id)),
                (this.currentTouches.h[m.identifier] = e),
                oc.onStart.dispatch(e),
                null == this.primaryTouch && (this.primaryTouch = e),
                e == this.primaryTouch &&
                  this.parent.onMouseDown.dispatch(f, k, 0);
            else if (((e = this.currentTouches.h[m.identifier]), null != e))
              switch (
                ((g = e.x),
                (l = e.y),
                (e.x = f / c),
                (e.y = k / d),
                (e.dx = e.x - g),
                (e.dy = e.y - l),
                (e.pressure = m.force),
                a.type)
              ) {
                case "touchcancel":
                  oc.onCancel.dispatch(e);
                  this.currentTouches.remove(m.identifier);
                  this.unusedTouchesPool.add(e);
                  e == this.primaryTouch && (this.primaryTouch = null);
                  break;
                case "touchend":
                  oc.onEnd.dispatch(e);
                  this.currentTouches.remove(m.identifier);
                  this.unusedTouchesPool.add(e);
                  e == this.primaryTouch &&
                    (this.parent.onMouseUp.dispatch(f, k, 0),
                    (this.primaryTouch = null));
                  break;
                case "touchmove":
                  oc.onMove.dispatch(e),
                    e == this.primaryTouch &&
                      this.parent.onMouseMove.dispatch(f, k);
              }
          }
        },
        isDescendent: function (a) {
          if (a == this.parent.element) return !0;
          for (; null != a; ) {
            if (a.parentNode == this.parent.element) return !0;
            a = a.parentNode;
          }
          return !1;
        },
        setClipboard: function (a) {
          null == Oa.textArea &&
            ((Oa.textArea = window.document.createElement("textarea")),
            (Oa.textArea.style.height = "0px"),
            (Oa.textArea.style.left = "-100px"),
            (Oa.textArea.style.opacity = "0"),
            (Oa.textArea.style.position = "fixed"),
            (Oa.textArea.style.top = "-100px"),
            (Oa.textArea.style.width = "0px"),
            window.document.body.appendChild(Oa.textArea));
          Oa.textArea.value = a;
          Oa.textArea.focus();
          Oa.textArea.select();
          window.document.queryCommandEnabled("copy") &&
            window.document.execCommand("copy");
          this.textInputEnabled && this.focusTextInput();
        },
        setCursor: function (a) {
          if (this.cursor != a) {
            if (null == a) this.parent.element.style.cursor = "none";
            else {
              switch (a._hx_index) {
                case 0:
                  var b = "default";
                  break;
                case 1:
                  b = "crosshair";
                  break;
                case 3:
                  b = "move";
                  break;
                case 4:
                  b = "pointer";
                  break;
                case 5:
                  b = "nesw-resize";
                  break;
                case 6:
                  b = "ns-resize";
                  break;
                case 7:
                  b = "nwse-resize";
                  break;
                case 8:
                  b = "ew-resize";
                  break;
                case 9:
                  b = "text";
                  break;
                case 10:
                  b = "wait";
                  break;
                case 11:
                  b = "wait";
                  break;
                default:
                  b = "auto";
              }
              this.parent.element.style.cursor = b;
            }
            this.cursor = a;
          }
          return this.cursor;
        },
        setFrameRate: function (a) {
          null != this.parent.application &&
            (60 <= a
              ? this.parent == this.parent.application.__window &&
                (this.parent.application.__backend.framePeriod = -1)
              : 0 < a
              ? this.parent == this.parent.application.__window &&
                (this.parent.application.__backend.framePeriod = 1e3 / a)
              : this.parent == this.parent.application.__window &&
                (this.parent.application.__backend.framePeriod = 1e3));
          return a;
        },
        setFullscreen: function (a) {
          a
            ? this.requestedFullscreen ||
              this.isFullscreen ||
              ((this.requestedFullscreen = !0),
              ((x = this.parent.element), n(x, x.requestFullscreen))
                ? (document.addEventListener(
                    "fullscreenchange",
                    n(this, this.handleFullscreenEvent),
                    !1
                  ),
                  document.addEventListener(
                    "fullscreenerror",
                    n(this, this.handleFullscreenEvent),
                    !1
                  ),
                  this.parent.element.requestFullscreen())
                : this.parent.element.mozRequestFullScreen
                ? (document.addEventListener(
                    "mozfullscreenchange",
                    n(this, this.handleFullscreenEvent),
                    !1
                  ),
                  document.addEventListener(
                    "mozfullscreenerror",
                    n(this, this.handleFullscreenEvent),
                    !1
                  ),
                  this.parent.element.mozRequestFullScreen())
                : this.parent.element.webkitRequestFullscreen
                ? (document.addEventListener(
                    "webkitfullscreenchange",
                    n(this, this.handleFullscreenEvent),
                    !1
                  ),
                  document.addEventListener(
                    "webkitfullscreenerror",
                    n(this, this.handleFullscreenEvent),
                    !1
                  ),
                  this.parent.element.webkitRequestFullscreen())
                : this.parent.element.msRequestFullscreen &&
                  (document.addEventListener(
                    "MSFullscreenChange",
                    n(this, this.handleFullscreenEvent),
                    !1
                  ),
                  document.addEventListener(
                    "MSFullscreenError",
                    n(this, this.handleFullscreenEvent),
                    !1
                  ),
                  this.parent.element.msRequestFullscreen()))
            : this.isFullscreen &&
              ((this.requestedFullscreen = !1),
              document.exitFullscreen
                ? document.exitFullscreen()
                : document.mozCancelFullScreen
                ? document.mozCancelFullScreen()
                : document.webkitExitFullscreen
                ? document.webkitExitFullscreen()
                : document.msExitFullscreen && document.msExitFullscreen());
          return a;
        },
        setTextInputEnabled: function (a) {
          if (a) {
            if (null == Oa.textInput) {
              Oa.textInput = window.document.createElement("input");
              var b =
                0 <= H.navigator.userAgent.indexOf("Android")
                  ? "password"
                  : "text";
              Oa.textInput.type = b;
              Oa.textInput.style.position = "absolute";
              Oa.textInput.style.opacity = "0";
              Oa.textInput.style.color = "transparent";
              Oa.textInput.value = Oa.dummyCharacter;
              Oa.textInput.autocapitalize = "off";
              Oa.textInput.autocorrect = "off";
              Oa.textInput.autocomplete = "off";
              Oa.textInput.style.left = "0px";
              Oa.textInput.style.top = "50%";
              new ya("(iPad|iPhone|iPod).*OS 8_", "gi").match(
                window.navigator.userAgent
              )
                ? ((Oa.textInput.style.fontSize = "0px"),
                  (Oa.textInput.style.width = "0px"),
                  (Oa.textInput.style.height = "0px"))
                : ((Oa.textInput.style.width = "1px"),
                  (Oa.textInput.style.height = "1px"));
              Oa.textInput.style.pointerEvents = "none";
              Oa.textInput.style.zIndex = "-10000000";
            }
            null == Oa.textInput.parentNode &&
              this.parent.element.appendChild(Oa.textInput);
            this.textInputEnabled ||
              (Oa.textInput.addEventListener(
                "input",
                n(this, this.handleInputEvent),
                !0
              ),
              Oa.textInput.addEventListener(
                "blur",
                n(this, this.handleFocusEvent),
                !0
              ),
              Oa.textInput.addEventListener(
                "cut",
                n(this, this.handleCutOrCopyEvent),
                !0
              ),
              Oa.textInput.addEventListener(
                "copy",
                n(this, this.handleCutOrCopyEvent),
                !0
              ),
              Oa.textInput.addEventListener(
                "paste",
                n(this, this.handlePasteEvent),
                !0
              ),
              Oa.textInput.addEventListener(
                "compositionstart",
                n(this, this.handleCompositionstartEvent),
                !0
              ),
              Oa.textInput.addEventListener(
                "compositionend",
                n(this, this.handleCompositionendEvent),
                !0
              ));
            Oa.textInput.focus();
            Oa.textInput.select();
          } else
            null != Oa.textInput &&
              (Oa.textInput.blur(),
              Oa.textInput.removeEventListener(
                "input",
                n(this, this.handleInputEvent),
                !0
              ),
              Oa.textInput.removeEventListener(
                "blur",
                n(this, this.handleFocusEvent),
                !0
              ),
              Oa.textInput.removeEventListener(
                "cut",
                n(this, this.handleCutOrCopyEvent),
                !0
              ),
              Oa.textInput.removeEventListener(
                "copy",
                n(this, this.handleCutOrCopyEvent),
                !0
              ),
              Oa.textInput.removeEventListener(
                "paste",
                n(this, this.handlePasteEvent),
                !0
              ),
              Oa.textInput.removeEventListener(
                "compositionstart",
                n(this, this.handleCompositionstartEvent),
                !0
              ),
              Oa.textInput.removeEventListener(
                "compositionend",
                n(this, this.handleCompositionendEvent),
                !0
              ));
          return (this.textInputEnabled = a);
        },
        setTextInputRect: function (a) {
          return (this.textInputRect = a);
        },
        handleCompositionstartEvent: function (a) {
          this.imeCompositionActive = !0;
        },
        handleCompositionendEvent: function (a) {
          this.imeCompositionActive = !1;
          this.handleInputEvent(a);
        },
        updateSize: function () {
          if (this.parent.__resizable) {
            if (null != this.parent.element) {
              var a = this.parent.element.clientWidth;
              var b = this.parent.element.clientHeight;
            } else (a = window.innerWidth), (b = window.innerHeight);
            if (a != this.cacheElementWidth || b != this.cacheElementHeight) {
              this.cacheElementWidth = a;
              this.cacheElementHeight = b;
              var c =
                this.resizeElement ||
                (0 == this.setWidth && 0 == this.setHeight);
              if (
                null != this.parent.element &&
                (null == this.div || (null != this.div && c))
              )
                if (c) {
                  if (this.parent.__width != a || this.parent.__height != b)
                    (this.parent.__width = a),
                      (this.parent.__height = b),
                      null != this.canvas
                        ? this.parent.element != this.canvas &&
                          ((this.canvas.width = Math.round(a * this.scale)),
                          (this.canvas.height = Math.round(b * this.scale)),
                          (this.canvas.style.width = a + "px"),
                          (this.canvas.style.height = b + "px"))
                        : ((this.div.style.width = a + "px"),
                          (this.div.style.height = b + "px")),
                      this.parent.onResize.dispatch(a, b);
                } else {
                  c = 0 != this.setWidth ? a / this.setWidth : 1;
                  var d = 0 != this.setHeight ? b / this.setHeight : 1,
                    e = a,
                    f = b,
                    k = 0,
                    g = 0;
                  c < d
                    ? ((f = Math.floor(this.setHeight * c)),
                      (g = Math.floor((b - f) / 2)))
                    : ((e = Math.floor(this.setWidth * d)),
                      (k = Math.floor((a - e) / 2)));
                  null != this.canvas
                    ? this.parent.element != this.canvas &&
                      ((this.canvas.style.width = e + "px"),
                      (this.canvas.style.height = f + "px"),
                      (this.canvas.style.marginLeft = k + "px"),
                      (this.canvas.style.marginTop = g + "px"))
                    : ((this.div.style.width = e + "px"),
                      (this.div.style.height = f + "px"),
                      (this.div.style.marginLeft = k + "px"),
                      (this.div.style.marginTop = g + "px"));
                }
            }
          }
        },
        __class__: Oa,
      };
      var gg = function () {};
      h["lime._internal.format.Base64"] = gg;
      gg.__name__ = "lime._internal.format.Base64";
      gg.encode = function (a) {
        var b = [],
          c = gg.DICTIONARY,
          d = gg.EXTENDED_DICTIONARY,
          e = a.length,
          f = Math.floor(e / 3),
          k = 2 * f;
        b.length = 2 * Math.ceil(e / 3);
        for (var g = 0, l = 0, h; l < k; )
          (h = (a.b[g] << 16) | (a.b[g + 1] << 8) | a.b[g + 2]),
            (b[l] = d[(h >> 12) & 4095]),
            (b[l + 1] = d[h & 4095]),
            (g += 3),
            (l += 2);
        switch (e - 3 * f) {
          case 1:
            h = a.b[g] << 16;
            b[l] = d[(h >> 12) & 4095];
            b[l + 1] = "==";
            break;
          case 2:
            (h = (a.b[g] << 16) | (a.b[g + 1] << 8)),
              (b[l] = d[(h >> 12) & 4095]),
              (b[l + 1] = c[(h >> 6) & 63] + "=");
        }
        return b.join("");
      };
      var Ao = function () {};
      h["lime._internal.format.Deflate"] = Ao;
      Ao.__name__ = "lime._internal.format.Deflate";
      Ao.decompress = function (a) {
        a = pako.inflateRaw(a.b.bufferValue);
        return Nb.ofData(a);
      };
      var Bo = function () {};
      h["lime._internal.format.GZip"] = Bo;
      Bo.__name__ = "lime._internal.format.GZip";
      Bo.decompress = function (a) {
        a = pako.ungzip(a.b.bufferValue);
        return Nb.ofData(a);
      };
      var Co = function () {};
      h["lime._internal.format.LZMA"] = Co;
      Co.__name__ = "lime._internal.format.LZMA";
      Co.decompress = function (a) {
        return null;
      };
      var Do = function () {};
      h["lime._internal.format.Zlib"] = Do;
      Do.__name__ = "lime._internal.format.Zlib";
      Do.decompress = function (a) {
        a = pako.inflate(a.b.bufferValue);
        return Nb.ofData(a);
      };
      var Ra = function () {};
      h["lime._internal.graphics.ImageCanvasUtil"] = Ra;
      Ra.__name__ = "lime._internal.graphics.ImageCanvasUtil";
      Ra.colorTransform = function (a, b, c) {
        Ra.convertToData(a);
        jc.colorTransform(a, b, c);
      };
      Ra.convertToCanvas = function (a, b) {
        null == b && (b = !1);
        var c = a.buffer;
        null != c.__srcImage
          ? (null == c.__srcCanvas &&
              (Ra.createCanvas(a, c.__srcImage.width, c.__srcImage.height),
              c.__srcContext.drawImage(c.__srcImage, 0, 0)),
            (c.__srcImage = null))
          : null == c.__srcCanvas && null != c.data
          ? (a.set_transparent(!0),
            Ra.createCanvas(a, c.width, c.height),
            Ra.createImageData(a),
            c.__srcContext.putImageData(c.__srcImageData, 0, 0))
          : a.type == Nd.DATA &&
            null != c.__srcImageData &&
            a.dirty &&
            (c.__srcContext.putImageData(c.__srcImageData, 0, 0),
            (a.dirty = !1));
        b
          ? ((c.data = null), (c.__srcImageData = null))
          : null == c.data &&
            null != c.__srcImageData &&
            (c.data = c.__srcImageData.data);
        a.type = Nd.CANVAS;
      };
      Ra.convertToData = function (a, b) {
        null == b && (b = !1);
        var c = a.buffer;
        null != c.__srcImage && Ra.convertToCanvas(a);
        if (null != c.__srcCanvas && null == c.data)
          Ra.createImageData(a), a.type == Nd.CANVAS && (a.dirty = !1);
        else if (a.type == Nd.CANVAS && null != c.__srcCanvas && a.dirty) {
          if (null == c.__srcImageData) Ra.createImageData(a);
          else {
            c.__srcImageData = c.__srcContext.getImageData(
              0,
              0,
              c.width,
              c.height
            );
            var d = c.__srcImageData.data.buffer;
            d = null != d ? new Uint8Array(d) : null;
            c.data = d;
          }
          a.dirty = !1;
        }
        b && ((a.buffer.__srcCanvas = null), (a.buffer.__srcContext = null));
        a.type = Nd.DATA;
      };
      Ra.copyChannel = function (a, b, c, d, e, f) {
        Ra.convertToData(b);
        Ra.convertToData(a);
        jc.copyChannel(a, b, c, d, e, f);
      };
      Ra.copyPixels = function (a, b, c, d, e, f, k) {
        null == k && (k = !1);
        null == d ||
          d.x >= a.width ||
          d.y >= a.height ||
          null == c ||
          1 > c.width ||
          1 > c.height ||
          (null != e &&
            e.get_transparent() &&
            (null == f && (f = new Xh()),
            (b = b.clone()),
            b.copyChannel(
              e,
              new Fe(c.x + f.x, c.y + f.y, c.width, c.height),
              new Xh(c.x, c.y),
              oi.ALPHA,
              oi.ALPHA
            )),
          Ra.convertToCanvas(a, !0),
          k ||
            (a.get_transparent() &&
              b.get_transparent() &&
              a.buffer.__srcContext.clearRect(
                d.x + a.offsetX,
                d.y + a.offsetY,
                c.width + a.offsetX,
                c.height + a.offsetY
              )),
          Ra.convertToCanvas(b),
          null != b.buffer.get_src() &&
            ((a.buffer.__srcContext.globalCompositeOperation = "source-over"),
            a.buffer.__srcContext.drawImage(
              b.buffer.get_src(),
              (c.x + b.offsetX) | 0,
              (c.y + b.offsetY) | 0,
              c.width | 0,
              c.height | 0,
              (d.x + a.offsetX) | 0,
              (d.y + a.offsetY) | 0,
              c.width | 0,
              c.height | 0
            )),
          (a.dirty = !0),
          a.version++);
      };
      Ra.createCanvas = function (a, b, c) {
        var d = a.buffer;
        null == d.__srcCanvas &&
          ((d.__srcCanvas = window.document.createElement("canvas")),
          (d.__srcCanvas.width = b),
          (d.__srcCanvas.height = c),
          a.get_transparent()
            ? (d.__srcContext = d.__srcCanvas.getContext("2d"))
            : (a.get_transparent() ||
                d.__srcCanvas.setAttribute("moz-opaque", "true"),
              (d.__srcContext = d.__srcCanvas.getContext("2d", {
                alpha: !1,
              }))));
      };
      Ra.createImageData = function (a) {
        a = a.buffer;
        if (null == a.__srcImageData) {
          null == a.data
            ? (a.__srcImageData = a.__srcContext.getImageData(
                0,
                0,
                a.width,
                a.height
              ))
            : ((a.__srcImageData = a.__srcContext.createImageData(
                a.width,
                a.height
              )),
              a.__srcImageData.data.set(a.data));
          var b = a.__srcImageData.data.buffer;
          b = null != b ? new Uint8Array(b) : null;
          a.data = b;
        }
      };
      Ra.fillRect = function (a, b, c, d) {
        Ra.convertToCanvas(a);
        if (1 == d) {
          d = (c >> 16) & 255;
          var e = (c >> 8) & 255;
          var f = c & 255;
          c = a.get_transparent() ? (c >> 24) & 255 : 255;
        } else
          (d = (c >> 24) & 255),
            (e = (c >> 16) & 255),
            (f = (c >> 8) & 255),
            (c = a.get_transparent() ? c & 255 : 255);
        0 == b.x &&
        0 == b.y &&
        b.width == a.width &&
        b.height == a.height &&
        a.get_transparent() &&
        0 == c
          ? (a.buffer.__srcCanvas.width = a.buffer.width)
          : (255 > c &&
              a.buffer.__srcContext.clearRect(
                b.x + a.offsetX,
                b.y + a.offsetY,
                b.width + a.offsetX,
                b.height + a.offsetY
              ),
            0 < c &&
              ((a.buffer.__srcContext.fillStyle =
                "rgba(" + d + ", " + e + ", " + f + ", " + c / 255 + ")"),
              a.buffer.__srcContext.fillRect(
                b.x + a.offsetX,
                b.y + a.offsetY,
                b.width + a.offsetX,
                b.height + a.offsetY
              )),
            (a.dirty = !0),
            a.version++);
      };
      Ra.getPixel32 = function (a, b, c, d) {
        Ra.convertToData(a);
        return jc.getPixel32(a, b, c, d);
      };
      Ra.setPixel = function (a, b, c, d, e) {
        Ra.convertToData(a);
        jc.setPixel(a, b, c, d, e);
      };
      Ra.setPixel32 = function (a, b, c, d, e) {
        Ra.convertToData(a);
        jc.setPixel32(a, b, c, d, e);
      };
      Ra.sync = function (a, b) {
        null != a &&
          (a.type != Nd.CANVAS ||
          (null == a.buffer.__srcCanvas && null == a.buffer.data)
            ? a.type == Nd.DATA && Ra.convertToData(a, b)
            : Ra.convertToCanvas(a, b));
      };
      var jc = function () {};
      h["lime._internal.graphics.ImageDataUtil"] = jc;
      jc.__name__ = "lime._internal.graphics.ImageDataUtil";
      jc.colorTransform = function (a, b, c) {
        var d = a.buffer.data;
        if (null != d) {
          var e = a.buffer.format,
            f = a.buffer.premultiplied;
          b = new Bg(a, b);
          var k = md.getAlphaTable(c),
            g = md.getRedTable(c),
            l = md.getGreenTable(c);
          c = md.getBlueTable(c);
          for (var h, u, m = 0, p = 0, n = b.height; p < n; ) {
            h = p++;
            h = b.byteOffset + b.stride * h;
            for (var q = 0, z = b.width; q < z; ) {
              u = q++;
              u = h + 4 * u;
              var t = e,
                w = f;
              null == w && (w = !1);
              null == t && (t = 0);
              switch (t) {
                case 0:
                  m =
                    ((d[u] & 255) << 24) |
                    ((d[u + 1] & 255) << 16) |
                    ((d[u + 2] & 255) << 8) |
                    (d[u + 3] & 255);
                  break;
                case 1:
                  m =
                    ((d[u + 1] & 255) << 24) |
                    ((d[u + 2] & 255) << 16) |
                    ((d[u + 3] & 255) << 8) |
                    (d[u] & 255);
                  break;
                case 2:
                  m =
                    ((d[u + 2] & 255) << 24) |
                    ((d[u + 1] & 255) << 16) |
                    ((d[u] & 255) << 8) |
                    (d[u + 3] & 255);
              }
              w &&
                0 != (m & 255) &&
                255 != (m & 255) &&
                ((Y.unmult = 255 / (m & 255)),
                (m =
                  ((Y.__clamp[Math.round(((m >>> 24) & 255) * Y.unmult)] &
                    255) <<
                    24) |
                  ((Y.__clamp[Math.round(((m >>> 16) & 255) * Y.unmult)] &
                    255) <<
                    16) |
                  ((Y.__clamp[Math.round(((m >>> 8) & 255) * Y.unmult)] &
                    255) <<
                    8) |
                  (m & 255)));
              m =
                ((g[(m >>> 24) & 255] & 255) << 24) |
                ((l[(m >>> 16) & 255] & 255) << 16) |
                ((c[(m >>> 8) & 255] & 255) << 8) |
                (k[m & 255] & 255);
              t = e;
              w = f;
              null == w && (w = !1);
              null == t && (t = 0);
              w &&
                (0 == (m & 255)
                  ? 0 != m && (m = 0)
                  : 255 != (m & 255) &&
                    ((Y.a16 = Y.__alpha16[m & 255]),
                    (m =
                      ((((((m >>> 24) & 255) * Y.a16) >> 16) & 255) << 24) |
                      ((((((m >>> 16) & 255) * Y.a16) >> 16) & 255) << 16) |
                      ((((((m >>> 8) & 255) * Y.a16) >> 16) & 255) << 8) |
                      (m & 255))));
              switch (t) {
                case 0:
                  d[u] = (m >>> 24) & 255;
                  d[u + 1] = (m >>> 16) & 255;
                  d[u + 2] = (m >>> 8) & 255;
                  d[u + 3] = m & 255;
                  break;
                case 1:
                  d[u] = m & 255;
                  d[u + 1] = (m >>> 24) & 255;
                  d[u + 2] = (m >>> 16) & 255;
                  d[u + 3] = (m >>> 8) & 255;
                  break;
                case 2:
                  (d[u] = (m >>> 8) & 255),
                    (d[u + 1] = (m >>> 16) & 255),
                    (d[u + 2] = (m >>> 24) & 255),
                    (d[u + 3] = m & 255);
              }
            }
          }
          a.dirty = !0;
          a.version++;
        }
      };
      jc.copyChannel = function (a, b, c, d, e, f) {
        switch (f._hx_index) {
          case 0:
            var k = 0;
            break;
          case 1:
            k = 1;
            break;
          case 2:
            k = 2;
            break;
          case 3:
            k = 3;
        }
        switch (e._hx_index) {
          case 0:
            var g = 0;
            break;
          case 1:
            g = 1;
            break;
          case 2:
            g = 2;
            break;
          case 3:
            g = 3;
        }
        e = b.buffer.data;
        f = a.buffer.data;
        if (null != e && null != f) {
          c = new Bg(b, c);
          d = new Bg(a, new Fe(d.x, d.y, c.width, c.height));
          var l = b.buffer.format,
            h = a.buffer.format;
          b = b.buffer.premultiplied;
          for (
            var u = a.buffer.premultiplied,
              m,
              p,
              n = 0,
              q = 0,
              z = 0,
              t = 0,
              w = d.height;
            t < w;

          ) {
            p = t++;
            m = c.byteOffset + c.stride * p;
            p = d.byteOffset + d.stride * p;
            for (var x = 0, y = d.width; x < y; ) {
              x++;
              var D = l,
                A = b;
              null == A && (A = !1);
              null == D && (D = 0);
              switch (D) {
                case 0:
                  n =
                    ((e[m] & 255) << 24) |
                    ((e[m + 1] & 255) << 16) |
                    ((e[m + 2] & 255) << 8) |
                    (e[m + 3] & 255);
                  break;
                case 1:
                  n =
                    ((e[m + 1] & 255) << 24) |
                    ((e[m + 2] & 255) << 16) |
                    ((e[m + 3] & 255) << 8) |
                    (e[m] & 255);
                  break;
                case 2:
                  n =
                    ((e[m + 2] & 255) << 24) |
                    ((e[m + 1] & 255) << 16) |
                    ((e[m] & 255) << 8) |
                    (e[m + 3] & 255);
              }
              A &&
                0 != (n & 255) &&
                255 != (n & 255) &&
                ((Y.unmult = 255 / (n & 255)),
                (n =
                  ((Y.__clamp[Math.round(((n >>> 24) & 255) * Y.unmult)] &
                    255) <<
                    24) |
                  ((Y.__clamp[Math.round(((n >>> 16) & 255) * Y.unmult)] &
                    255) <<
                    16) |
                  ((Y.__clamp[Math.round(((n >>> 8) & 255) * Y.unmult)] &
                    255) <<
                    8) |
                  (n & 255)));
              D = h;
              A = u;
              null == A && (A = !1);
              null == D && (D = 0);
              switch (D) {
                case 0:
                  q =
                    ((f[p] & 255) << 24) |
                    ((f[p + 1] & 255) << 16) |
                    ((f[p + 2] & 255) << 8) |
                    (f[p + 3] & 255);
                  break;
                case 1:
                  q =
                    ((f[p + 1] & 255) << 24) |
                    ((f[p + 2] & 255) << 16) |
                    ((f[p + 3] & 255) << 8) |
                    (f[p] & 255);
                  break;
                case 2:
                  q =
                    ((f[p + 2] & 255) << 24) |
                    ((f[p + 1] & 255) << 16) |
                    ((f[p] & 255) << 8) |
                    (f[p + 3] & 255);
              }
              A &&
                0 != (q & 255) &&
                255 != (q & 255) &&
                ((Y.unmult = 255 / (q & 255)),
                (q =
                  ((Y.__clamp[Math.round(((q >>> 24) & 255) * Y.unmult)] &
                    255) <<
                    24) |
                  ((Y.__clamp[Math.round(((q >>> 16) & 255) * Y.unmult)] &
                    255) <<
                    16) |
                  ((Y.__clamp[Math.round(((q >>> 8) & 255) * Y.unmult)] &
                    255) <<
                    8) |
                  (q & 255)));
              switch (g) {
                case 0:
                  z = (n >>> 24) & 255;
                  break;
                case 1:
                  z = (n >>> 16) & 255;
                  break;
                case 2:
                  z = (n >>> 8) & 255;
                  break;
                case 3:
                  z = n & 255;
              }
              switch (k) {
                case 0:
                  q =
                    ((z & 255) << 24) |
                    (((q >>> 16) & 255) << 16) |
                    (((q >>> 8) & 255) << 8) |
                    (q & 255);
                  break;
                case 1:
                  q =
                    (((q >>> 24) & 255) << 24) |
                    ((z & 255) << 16) |
                    (((q >>> 8) & 255) << 8) |
                    (q & 255);
                  break;
                case 2:
                  q =
                    (((q >>> 24) & 255) << 24) |
                    (((q >>> 16) & 255) << 16) |
                    ((z & 255) << 8) |
                    (q & 255);
                  break;
                case 3:
                  q =
                    (((q >>> 24) & 255) << 24) |
                    (((q >>> 16) & 255) << 16) |
                    (((q >>> 8) & 255) << 8) |
                    (z & 255);
              }
              D = h;
              A = u;
              null == A && (A = !1);
              null == D && (D = 0);
              A &&
                (0 == (q & 255)
                  ? 0 != q && (q = 0)
                  : 255 != (q & 255) &&
                    ((Y.a16 = Y.__alpha16[q & 255]),
                    (q =
                      ((((((q >>> 24) & 255) * Y.a16) >> 16) & 255) << 24) |
                      ((((((q >>> 16) & 255) * Y.a16) >> 16) & 255) << 16) |
                      ((((((q >>> 8) & 255) * Y.a16) >> 16) & 255) << 8) |
                      (q & 255))));
              switch (D) {
                case 0:
                  f[p] = (q >>> 24) & 255;
                  f[p + 1] = (q >>> 16) & 255;
                  f[p + 2] = (q >>> 8) & 255;
                  f[p + 3] = q & 255;
                  break;
                case 1:
                  f[p] = q & 255;
                  f[p + 1] = (q >>> 24) & 255;
                  f[p + 2] = (q >>> 16) & 255;
                  f[p + 3] = (q >>> 8) & 255;
                  break;
                case 2:
                  (f[p] = (q >>> 8) & 255),
                    (f[p + 1] = (q >>> 16) & 255),
                    (f[p + 2] = (q >>> 24) & 255),
                    (f[p + 3] = q & 255);
              }
              m += 4;
              p += 4;
            }
          }
          a.dirty = !0;
          a.version++;
        }
      };
      jc.copyPixels = function (a, b, c, d, e, f, k) {
        null == k && (k = !1);
        if (
          a.width == b.width &&
          a.height == b.height &&
          c.width == b.width &&
          c.height == b.height &&
          0 == c.x &&
          0 == c.y &&
          0 == d.x &&
          0 == d.y &&
          null == e &&
          null == f &&
          0 == k &&
          a.get_format() == b.get_format()
        )
          a.buffer.data.set(b.buffer.data);
        else {
          var g = b.buffer.data,
            l = a.buffer.data;
          if (null == g || null == l) return;
          c = new Bg(b, c);
          var h = new Fe(d.x, d.y, c.width, c.height);
          h = new Bg(a, h);
          var u = b.buffer.format,
            m = a.buffer.format,
            p = 0,
            n = 0,
            q = b.buffer.premultiplied,
            z = a.buffer.premultiplied,
            t = (b.buffer.bitsPerPixel / 8) | 0,
            w = (a.buffer.bitsPerPixel / 8) | 0,
            x = null != e && e.get_transparent(),
            y =
              k ||
              (x && !a.get_transparent()) ||
              (!k && !a.get_transparent() && b.get_transparent());
          if (x)
            if (
              ((w = e.buffer.data),
              (b = e.buffer.format),
              (k = 0),
              (e = new Bg(
                e,
                new Fe(
                  c.x + (null == f ? 0 : f.x),
                  c.y + (null == f ? 0 : f.y),
                  c.width,
                  c.height
                )
              )),
              h.clip(d.x | 0, d.y | 0, e.width, e.height),
              y)
            )
              for (y = 0, t = h.height; y < t; )
                for (
                  x = y++,
                    d = c.byteOffset + c.stride * x,
                    f = h.byteOffset + h.stride * x,
                    x = e.byteOffset + e.stride * x,
                    F = 0,
                    G = h.width;
                  F < G;

                ) {
                  F++;
                  var D = u;
                  var A = q;
                  null == A && (A = !1);
                  null == D && (D = 0);
                  switch (D) {
                    case 0:
                      p =
                        ((g[d] & 255) << 24) |
                        ((g[d + 1] & 255) << 16) |
                        ((g[d + 2] & 255) << 8) |
                        (g[d + 3] & 255);
                      break;
                    case 1:
                      p =
                        ((g[d + 1] & 255) << 24) |
                        ((g[d + 2] & 255) << 16) |
                        ((g[d + 3] & 255) << 8) |
                        (g[d] & 255);
                      break;
                    case 2:
                      p =
                        ((g[d + 2] & 255) << 24) |
                        ((g[d + 1] & 255) << 16) |
                        ((g[d] & 255) << 8) |
                        (g[d + 3] & 255);
                  }
                  A &&
                    0 != (p & 255) &&
                    255 != (p & 255) &&
                    ((Y.unmult = 255 / (p & 255)),
                    (p =
                      ((Y.__clamp[Math.round(((p >>> 24) & 255) * Y.unmult)] &
                        255) <<
                        24) |
                      ((Y.__clamp[Math.round(((p >>> 16) & 255) * Y.unmult)] &
                        255) <<
                        16) |
                      ((Y.__clamp[Math.round(((p >>> 8) & 255) * Y.unmult)] &
                        255) <<
                        8) |
                      (p & 255)));
                  D = m;
                  A = z;
                  null == A && (A = !1);
                  null == D && (D = 0);
                  switch (D) {
                    case 0:
                      n =
                        ((l[f] & 255) << 24) |
                        ((l[f + 1] & 255) << 16) |
                        ((l[f + 2] & 255) << 8) |
                        (l[f + 3] & 255);
                      break;
                    case 1:
                      n =
                        ((l[f + 1] & 255) << 24) |
                        ((l[f + 2] & 255) << 16) |
                        ((l[f + 3] & 255) << 8) |
                        (l[f] & 255);
                      break;
                    case 2:
                      n =
                        ((l[f + 2] & 255) << 24) |
                        ((l[f + 1] & 255) << 16) |
                        ((l[f] & 255) << 8) |
                        (l[f + 3] & 255);
                  }
                  A &&
                    0 != (n & 255) &&
                    255 != (n & 255) &&
                    ((Y.unmult = 255 / (n & 255)),
                    (n =
                      ((Y.__clamp[Math.round(((n >>> 24) & 255) * Y.unmult)] &
                        255) <<
                        24) |
                      ((Y.__clamp[Math.round(((n >>> 16) & 255) * Y.unmult)] &
                        255) <<
                        16) |
                      ((Y.__clamp[Math.round(((n >>> 8) & 255) * Y.unmult)] &
                        255) <<
                        8) |
                      (n & 255)));
                  D = b;
                  A = !1;
                  null == A && (A = !1);
                  null == D && (D = 0);
                  switch (D) {
                    case 0:
                      k =
                        ((w[x] & 255) << 24) |
                        ((w[x + 1] & 255) << 16) |
                        ((w[x + 2] & 255) << 8) |
                        (w[x + 3] & 255);
                      break;
                    case 1:
                      k =
                        ((w[x + 1] & 255) << 24) |
                        ((w[x + 2] & 255) << 16) |
                        ((w[x + 3] & 255) << 8) |
                        (w[x] & 255);
                      break;
                    case 2:
                      k =
                        ((w[x + 2] & 255) << 24) |
                        ((w[x + 1] & 255) << 16) |
                        ((w[x] & 255) << 8) |
                        (w[x + 3] & 255);
                  }
                  A &&
                    0 != (k & 255) &&
                    255 != (k & 255) &&
                    ((Y.unmult = 255 / (k & 255)),
                    (k =
                      ((Y.__clamp[Math.round(((k >>> 24) & 255) * Y.unmult)] &
                        255) <<
                        24) |
                      ((Y.__clamp[Math.round(((k >>> 16) & 255) * Y.unmult)] &
                        255) <<
                        16) |
                      ((Y.__clamp[Math.round(((k >>> 8) & 255) * Y.unmult)] &
                        255) <<
                        8) |
                      (k & 255)));
                  A = ((k & 255) / 255) * ((p & 255) / 255);
                  if (0 < A) {
                    var C = (n & 255) / 255;
                    var E = 1 - A;
                    D = A + C * E;
                    B =
                      Y.__clamp[
                        Math.round(
                          (((p >>> 24) & 255) * A +
                            ((n >>> 24) & 255) * C * E) /
                            D
                        )
                      ];
                    n =
                      ((B & 255) << 24) |
                      (((n >>> 16) & 255) << 16) |
                      (((n >>> 8) & 255) << 8) |
                      (n & 255);
                    B =
                      Y.__clamp[
                        Math.round(
                          (((p >>> 16) & 255) * A +
                            ((n >>> 16) & 255) * C * E) /
                            D
                        )
                      ];
                    n =
                      (((n >>> 24) & 255) << 24) |
                      ((B & 255) << 16) |
                      (((n >>> 8) & 255) << 8) |
                      (n & 255);
                    A =
                      Y.__clamp[
                        Math.round(
                          (((p >>> 8) & 255) * A + ((n >>> 8) & 255) * C * E) /
                            D
                        )
                      ];
                    n =
                      (((n >>> 24) & 255) << 24) |
                      (((n >>> 16) & 255) << 16) |
                      ((A & 255) << 8) |
                      (n & 255);
                    D = Y.__clamp[Math.round(255 * D)];
                    n =
                      (((n >>> 24) & 255) << 24) |
                      (((n >>> 16) & 255) << 16) |
                      (((n >>> 8) & 255) << 8) |
                      (D & 255);
                    D = m;
                    A = z;
                    null == A && (A = !1);
                    null == D && (D = 0);
                    A &&
                      (0 == (n & 255)
                        ? 0 != n && (n = 0)
                        : 255 != (n & 255) &&
                          ((Y.a16 = Y.__alpha16[n & 255]),
                          (n =
                            ((((((n >>> 24) & 255) * Y.a16) >> 16) & 255) <<
                              24) |
                            ((((((n >>> 16) & 255) * Y.a16) >> 16) & 255) <<
                              16) |
                            ((((((n >>> 8) & 255) * Y.a16) >> 16) & 255) << 8) |
                            (n & 255))));
                    switch (D) {
                      case 0:
                        l[f] = (n >>> 24) & 255;
                        l[f + 1] = (n >>> 16) & 255;
                        l[f + 2] = (n >>> 8) & 255;
                        l[f + 3] = n & 255;
                        break;
                      case 1:
                        l[f] = n & 255;
                        l[f + 1] = (n >>> 24) & 255;
                        l[f + 2] = (n >>> 16) & 255;
                        l[f + 3] = (n >>> 8) & 255;
                        break;
                      case 2:
                        (l[f] = (n >>> 8) & 255),
                          (l[f + 1] = (n >>> 16) & 255),
                          (l[f + 2] = (n >>> 24) & 255),
                          (l[f + 3] = n & 255);
                    }
                  }
                  d += 4;
                  f += 4;
                  x += 4;
                }
            else
              for (y = 0, t = h.height; y < t; )
                for (
                  x = y++,
                    d = c.byteOffset + c.stride * x,
                    f = h.byteOffset + h.stride * x,
                    x = e.byteOffset + e.stride * x,
                    F = 0,
                    G = h.width;
                  F < G;

                ) {
                  F++;
                  D = u;
                  A = q;
                  null == A && (A = !1);
                  null == D && (D = 0);
                  switch (D) {
                    case 0:
                      p =
                        ((g[d] & 255) << 24) |
                        ((g[d + 1] & 255) << 16) |
                        ((g[d + 2] & 255) << 8) |
                        (g[d + 3] & 255);
                      break;
                    case 1:
                      p =
                        ((g[d + 1] & 255) << 24) |
                        ((g[d + 2] & 255) << 16) |
                        ((g[d + 3] & 255) << 8) |
                        (g[d] & 255);
                      break;
                    case 2:
                      p =
                        ((g[d + 2] & 255) << 24) |
                        ((g[d + 1] & 255) << 16) |
                        ((g[d] & 255) << 8) |
                        (g[d + 3] & 255);
                  }
                  A &&
                    0 != (p & 255) &&
                    255 != (p & 255) &&
                    ((Y.unmult = 255 / (p & 255)),
                    (p =
                      ((Y.__clamp[Math.round(((p >>> 24) & 255) * Y.unmult)] &
                        255) <<
                        24) |
                      ((Y.__clamp[Math.round(((p >>> 16) & 255) * Y.unmult)] &
                        255) <<
                        16) |
                      ((Y.__clamp[Math.round(((p >>> 8) & 255) * Y.unmult)] &
                        255) <<
                        8) |
                      (p & 255)));
                  D = b;
                  A = !1;
                  null == A && (A = !1);
                  null == D && (D = 0);
                  switch (D) {
                    case 0:
                      k =
                        ((w[x] & 255) << 24) |
                        ((w[x + 1] & 255) << 16) |
                        ((w[x + 2] & 255) << 8) |
                        (w[x + 3] & 255);
                      break;
                    case 1:
                      k =
                        ((w[x + 1] & 255) << 24) |
                        ((w[x + 2] & 255) << 16) |
                        ((w[x + 3] & 255) << 8) |
                        (w[x] & 255);
                      break;
                    case 2:
                      k =
                        ((w[x + 2] & 255) << 24) |
                        ((w[x + 1] & 255) << 16) |
                        ((w[x] & 255) << 8) |
                        (w[x + 3] & 255);
                  }
                  A &&
                    0 != (k & 255) &&
                    255 != (k & 255) &&
                    ((Y.unmult = 255 / (k & 255)),
                    (k =
                      ((Y.__clamp[Math.round(((k >>> 24) & 255) * Y.unmult)] &
                        255) <<
                        24) |
                      ((Y.__clamp[Math.round(((k >>> 16) & 255) * Y.unmult)] &
                        255) <<
                        16) |
                      ((Y.__clamp[Math.round(((k >>> 8) & 255) * Y.unmult)] &
                        255) <<
                        8) |
                      (k & 255)));
                  B = Math.round(((k & 255) / 255) * (p & 255));
                  p =
                    (((p >>> 24) & 255) << 24) |
                    (((p >>> 16) & 255) << 16) |
                    (((p >>> 8) & 255) << 8) |
                    (B & 255);
                  D = m;
                  A = z;
                  null == A && (A = !1);
                  null == D && (D = 0);
                  A &&
                    (0 == (p & 255)
                      ? 0 != p && (p = 0)
                      : 255 != (p & 255) &&
                        ((Y.a16 = Y.__alpha16[p & 255]),
                        (p =
                          ((((((p >>> 24) & 255) * Y.a16) >> 16) & 255) << 24) |
                          ((((((p >>> 16) & 255) * Y.a16) >> 16) & 255) << 16) |
                          ((((((p >>> 8) & 255) * Y.a16) >> 16) & 255) << 8) |
                          (p & 255))));
                  switch (D) {
                    case 0:
                      l[f] = (p >>> 24) & 255;
                      l[f + 1] = (p >>> 16) & 255;
                      l[f + 2] = (p >>> 8) & 255;
                      l[f + 3] = p & 255;
                      break;
                    case 1:
                      l[f] = p & 255;
                      l[f + 1] = (p >>> 24) & 255;
                      l[f + 2] = (p >>> 16) & 255;
                      l[f + 3] = (p >>> 8) & 255;
                      break;
                    case 2:
                      (l[f] = (p >>> 8) & 255),
                        (l[f + 1] = (p >>> 16) & 255),
                        (l[f + 2] = (p >>> 24) & 255),
                        (l[f + 3] = p & 255);
                  }
                  d += 4;
                  f += 4;
                  x += 4;
                }
          else if (y)
            for (y = 0, t = h.height; y < t; ) {
              x = y++;
              d = c.byteOffset + c.stride * x;
              f = h.byteOffset + h.stride * x;
              for (var F = 0, G = h.width; F < G; ) {
                F++;
                D = u;
                A = q;
                null == A && (A = !1);
                null == D && (D = 0);
                switch (D) {
                  case 0:
                    p =
                      ((g[d] & 255) << 24) |
                      ((g[d + 1] & 255) << 16) |
                      ((g[d + 2] & 255) << 8) |
                      (g[d + 3] & 255);
                    break;
                  case 1:
                    p =
                      ((g[d + 1] & 255) << 24) |
                      ((g[d + 2] & 255) << 16) |
                      ((g[d + 3] & 255) << 8) |
                      (g[d] & 255);
                    break;
                  case 2:
                    p =
                      ((g[d + 2] & 255) << 24) |
                      ((g[d + 1] & 255) << 16) |
                      ((g[d] & 255) << 8) |
                      (g[d + 3] & 255);
                }
                A &&
                  0 != (p & 255) &&
                  255 != (p & 255) &&
                  ((Y.unmult = 255 / (p & 255)),
                  (p =
                    ((Y.__clamp[Math.round(((p >>> 24) & 255) * Y.unmult)] &
                      255) <<
                      24) |
                    ((Y.__clamp[Math.round(((p >>> 16) & 255) * Y.unmult)] &
                      255) <<
                      16) |
                    ((Y.__clamp[Math.round(((p >>> 8) & 255) * Y.unmult)] &
                      255) <<
                      8) |
                    (p & 255)));
                D = m;
                A = z;
                null == A && (A = !1);
                null == D && (D = 0);
                switch (D) {
                  case 0:
                    n =
                      ((l[f] & 255) << 24) |
                      ((l[f + 1] & 255) << 16) |
                      ((l[f + 2] & 255) << 8) |
                      (l[f + 3] & 255);
                    break;
                  case 1:
                    n =
                      ((l[f + 1] & 255) << 24) |
                      ((l[f + 2] & 255) << 16) |
                      ((l[f + 3] & 255) << 8) |
                      (l[f] & 255);
                    break;
                  case 2:
                    n =
                      ((l[f + 2] & 255) << 24) |
                      ((l[f + 1] & 255) << 16) |
                      ((l[f] & 255) << 8) |
                      (l[f + 3] & 255);
                }
                A &&
                  0 != (n & 255) &&
                  255 != (n & 255) &&
                  ((Y.unmult = 255 / (n & 255)),
                  (n =
                    ((Y.__clamp[Math.round(((n >>> 24) & 255) * Y.unmult)] &
                      255) <<
                      24) |
                    ((Y.__clamp[Math.round(((n >>> 16) & 255) * Y.unmult)] &
                      255) <<
                      16) |
                    ((Y.__clamp[Math.round(((n >>> 8) & 255) * Y.unmult)] &
                      255) <<
                      8) |
                    (n & 255)));
                A = (p & 255) / 255;
                C = (n & 255) / 255;
                E = 1 - A;
                D = A + C * E;
                if (0 == D) n = 0;
                else {
                  var B =
                    Y.__clamp[
                      Math.round(
                        (((p >>> 24) & 255) * A + ((n >>> 24) & 255) * C * E) /
                          D
                      )
                    ];
                  n =
                    ((B & 255) << 24) |
                    (((n >>> 16) & 255) << 16) |
                    (((n >>> 8) & 255) << 8) |
                    (n & 255);
                  B =
                    Y.__clamp[
                      Math.round(
                        (((p >>> 16) & 255) * A + ((n >>> 16) & 255) * C * E) /
                          D
                      )
                    ];
                  n =
                    (((n >>> 24) & 255) << 24) |
                    ((B & 255) << 16) |
                    (((n >>> 8) & 255) << 8) |
                    (n & 255);
                  A =
                    Y.__clamp[
                      Math.round(
                        (((p >>> 8) & 255) * A + ((n >>> 8) & 255) * C * E) / D
                      )
                    ];
                  n =
                    (((n >>> 24) & 255) << 24) |
                    (((n >>> 16) & 255) << 16) |
                    ((A & 255) << 8) |
                    (n & 255);
                  D = Y.__clamp[Math.round(255 * D)];
                  n =
                    (((n >>> 24) & 255) << 24) |
                    (((n >>> 16) & 255) << 16) |
                    (((n >>> 8) & 255) << 8) |
                    (D & 255);
                }
                D = m;
                A = z;
                null == A && (A = !1);
                null == D && (D = 0);
                A &&
                  (0 == (n & 255)
                    ? 0 != n && (n = 0)
                    : 255 != (n & 255) &&
                      ((Y.a16 = Y.__alpha16[n & 255]),
                      (n =
                        ((((((n >>> 24) & 255) * Y.a16) >> 16) & 255) << 24) |
                        ((((((n >>> 16) & 255) * Y.a16) >> 16) & 255) << 16) |
                        ((((((n >>> 8) & 255) * Y.a16) >> 16) & 255) << 8) |
                        (n & 255))));
                switch (D) {
                  case 0:
                    l[f] = (n >>> 24) & 255;
                    l[f + 1] = (n >>> 16) & 255;
                    l[f + 2] = (n >>> 8) & 255;
                    l[f + 3] = n & 255;
                    break;
                  case 1:
                    l[f] = n & 255;
                    l[f + 1] = (n >>> 24) & 255;
                    l[f + 2] = (n >>> 16) & 255;
                    l[f + 3] = (n >>> 8) & 255;
                    break;
                  case 2:
                    (l[f] = (n >>> 8) & 255),
                      (l[f + 1] = (n >>> 16) & 255),
                      (l[f + 2] = (n >>> 24) & 255),
                      (l[f + 3] = n & 255);
                }
                d += 4;
                f += 4;
              }
            }
          else if (u == m && q == z && t == w)
            for (y = 0, t = h.height; y < t; )
              (x = y++),
                (d = c.byteOffset + c.stride * x),
                (f = h.byteOffset + h.stride * x),
                l.set(g.subarray(d, d + h.width * w), f);
          else
            for (y = 0, t = h.height; y < t; )
              for (
                x = y++,
                  d = c.byteOffset + c.stride * x,
                  f = h.byteOffset + h.stride * x,
                  F = 0,
                  G = h.width;
                F < G;

              ) {
                F++;
                D = u;
                A = q;
                null == A && (A = !1);
                null == D && (D = 0);
                switch (D) {
                  case 0:
                    p =
                      ((g[d] & 255) << 24) |
                      ((g[d + 1] & 255) << 16) |
                      ((g[d + 2] & 255) << 8) |
                      (g[d + 3] & 255);
                    break;
                  case 1:
                    p =
                      ((g[d + 1] & 255) << 24) |
                      ((g[d + 2] & 255) << 16) |
                      ((g[d + 3] & 255) << 8) |
                      (g[d] & 255);
                    break;
                  case 2:
                    p =
                      ((g[d + 2] & 255) << 24) |
                      ((g[d + 1] & 255) << 16) |
                      ((g[d] & 255) << 8) |
                      (g[d + 3] & 255);
                }
                A &&
                  0 != (p & 255) &&
                  255 != (p & 255) &&
                  ((Y.unmult = 255 / (p & 255)),
                  (p =
                    ((Y.__clamp[Math.round(((p >>> 24) & 255) * Y.unmult)] &
                      255) <<
                      24) |
                    ((Y.__clamp[Math.round(((p >>> 16) & 255) * Y.unmult)] &
                      255) <<
                      16) |
                    ((Y.__clamp[Math.round(((p >>> 8) & 255) * Y.unmult)] &
                      255) <<
                      8) |
                    (p & 255)));
                D = m;
                A = z;
                null == A && (A = !1);
                null == D && (D = 0);
                A &&
                  (0 == (p & 255)
                    ? 0 != p && (p = 0)
                    : 255 != (p & 255) &&
                      ((Y.a16 = Y.__alpha16[p & 255]),
                      (p =
                        ((((((p >>> 24) & 255) * Y.a16) >> 16) & 255) << 24) |
                        ((((((p >>> 16) & 255) * Y.a16) >> 16) & 255) << 16) |
                        ((((((p >>> 8) & 255) * Y.a16) >> 16) & 255) << 8) |
                        (p & 255))));
                switch (D) {
                  case 0:
                    l[f] = (p >>> 24) & 255;
                    l[f + 1] = (p >>> 16) & 255;
                    l[f + 2] = (p >>> 8) & 255;
                    l[f + 3] = p & 255;
                    break;
                  case 1:
                    l[f] = p & 255;
                    l[f + 1] = (p >>> 24) & 255;
                    l[f + 2] = (p >>> 16) & 255;
                    l[f + 3] = (p >>> 8) & 255;
                    break;
                  case 2:
                    (l[f] = (p >>> 8) & 255),
                      (l[f + 1] = (p >>> 16) & 255),
                      (l[f + 2] = (p >>> 24) & 255),
                      (l[f + 3] = p & 255);
                }
                d += 4;
                f += 4;
              }
        }
        a.dirty = !0;
        a.version++;
      };
      jc.fillRect = function (a, b, c, d) {
        switch (d) {
          case 1:
            c =
              (((c >>> 16) & 255) << 24) |
              (((c >>> 8) & 255) << 16) |
              ((c & 255) << 8) |
              ((c >>> 24) & 255);
            break;
          case 2:
            c =
              (((c >>> 8) & 255) << 24) |
              (((c >>> 16) & 255) << 16) |
              (((c >>> 24) & 255) << 8) |
              (c & 255);
        }
        a.get_transparent() ||
          (c =
            (((c >>> 24) & 255) << 24) |
            (((c >>> 16) & 255) << 16) |
            (((c >>> 8) & 255) << 8) |
            255);
        var e = a.buffer.data;
        if (null != e) {
          d = a.buffer.format;
          var f = a.buffer.premultiplied;
          f &&
            (0 == (c & 255)
              ? 0 != c && (c = 0)
              : 255 != (c & 255) &&
                ((Y.a16 = Y.__alpha16[c & 255]),
                (c =
                  ((((((c >>> 24) & 255) * Y.a16) >> 16) & 255) << 24) |
                  ((((((c >>> 16) & 255) * Y.a16) >> 16) & 255) << 16) |
                  ((((((c >>> 8) & 255) * Y.a16) >> 16) & 255) << 8) |
                  (c & 255))));
          b = new Bg(a, b);
          for (var k, g = 0, l = b.height; g < l; ) {
            f = g++;
            k = b.byteOffset + b.stride * f;
            for (var h = 0, p = b.width; h < p; ) {
              f = h++;
              var m = k + 4 * f,
                n = d;
              f = !1;
              null == f && (f = !1);
              null == n && (n = 0);
              f &&
                (0 == (c & 255)
                  ? 0 != c && (c = 0)
                  : 255 != (c & 255) &&
                    ((Y.a16 = Y.__alpha16[c & 255]),
                    (c =
                      ((((((c >>> 24) & 255) * Y.a16) >> 16) & 255) << 24) |
                      ((((((c >>> 16) & 255) * Y.a16) >> 16) & 255) << 16) |
                      ((((((c >>> 8) & 255) * Y.a16) >> 16) & 255) << 8) |
                      (c & 255))));
              switch (n) {
                case 0:
                  e[m] = (c >>> 24) & 255;
                  e[m + 1] = (c >>> 16) & 255;
                  e[m + 2] = (c >>> 8) & 255;
                  e[m + 3] = c & 255;
                  break;
                case 1:
                  e[m] = c & 255;
                  e[m + 1] = (c >>> 24) & 255;
                  e[m + 2] = (c >>> 16) & 255;
                  e[m + 3] = (c >>> 8) & 255;
                  break;
                case 2:
                  (e[m] = (c >>> 8) & 255),
                    (e[m + 1] = (c >>> 16) & 255),
                    (e[m + 2] = (c >>> 24) & 255),
                    (e[m + 3] = c & 255);
              }
            }
          }
          a.dirty = !0;
          a.version++;
        }
      };
      jc.gaussianBlur = function (a, b, c, d, e, f, k, g, l) {
        null == k && (k = 1);
        null == f && (f = 4);
        null == e && (e = 4);
        (g = a.get_premultiplied()) && a.set_premultiplied(!1);
        je.blur(a, b, c, d, e, f, k);
        a.dirty = !0;
        a.version++;
        g && a.set_premultiplied(!0);
        return a;
      };
      jc.getPixel32 = function (a, b, c, d) {
        var e = 0,
          f = a.buffer.data;
        b = 4 * (c + a.offsetY) * a.buffer.width + 4 * (b + a.offsetX);
        c = a.buffer.format;
        a = a.buffer.premultiplied;
        null == a && (a = !1);
        null == c && (c = 0);
        switch (c) {
          case 0:
            e =
              ((f[b] & 255) << 24) |
              ((f[b + 1] & 255) << 16) |
              ((f[b + 2] & 255) << 8) |
              (f[b + 3] & 255);
            break;
          case 1:
            e =
              ((f[b + 1] & 255) << 24) |
              ((f[b + 2] & 255) << 16) |
              ((f[b + 3] & 255) << 8) |
              (f[b] & 255);
            break;
          case 2:
            e =
              ((f[b + 2] & 255) << 24) |
              ((f[b + 1] & 255) << 16) |
              ((f[b] & 255) << 8) |
              (f[b + 3] & 255);
        }
        a &&
          0 != (e & 255) &&
          255 != (e & 255) &&
          ((Y.unmult = 255 / (e & 255)),
          (e =
            ((Y.__clamp[Math.round(((e >>> 24) & 255) * Y.unmult)] & 255) <<
              24) |
            ((Y.__clamp[Math.round(((e >>> 16) & 255) * Y.unmult)] & 255) <<
              16) |
            ((Y.__clamp[Math.round(((e >>> 8) & 255) * Y.unmult)] & 255) << 8) |
            (e & 255)));
        switch (d) {
          case 1:
            return (
              ((e & 255) << 24) |
              (((e >>> 24) & 255) << 16) |
              (((e >>> 16) & 255) << 8) |
              ((e >>> 8) & 255)
            );
          case 2:
            return (
              (((e >>> 8) & 255) << 24) |
              (((e >>> 16) & 255) << 16) |
              (((e >>> 24) & 255) << 8) |
              (e & 255)
            );
          default:
            return e;
        }
      };
      jc.multiplyAlpha = function (a) {
        var b = a.buffer.data;
        if (null != b && a.buffer.transparent) {
          for (
            var c = a.buffer.format, d = 0, e = 0, f = (b.length / 4) | 0;
            e < f;

          ) {
            var k = e++,
              g = 4 * k,
              l = c,
              h = !1;
            null == h && (h = !1);
            null == l && (l = 0);
            switch (l) {
              case 0:
                d =
                  ((b[g] & 255) << 24) |
                  ((b[g + 1] & 255) << 16) |
                  ((b[g + 2] & 255) << 8) |
                  (b[g + 3] & 255);
                break;
              case 1:
                d =
                  ((b[g + 1] & 255) << 24) |
                  ((b[g + 2] & 255) << 16) |
                  ((b[g + 3] & 255) << 8) |
                  (b[g] & 255);
                break;
              case 2:
                d =
                  ((b[g + 2] & 255) << 24) |
                  ((b[g + 1] & 255) << 16) |
                  ((b[g] & 255) << 8) |
                  (b[g + 3] & 255);
            }
            h &&
              0 != (d & 255) &&
              255 != (d & 255) &&
              ((Y.unmult = 255 / (d & 255)),
              (d =
                ((Y.__clamp[Math.round(((d >>> 24) & 255) * Y.unmult)] & 255) <<
                  24) |
                ((Y.__clamp[Math.round(((d >>> 16) & 255) * Y.unmult)] & 255) <<
                  16) |
                ((Y.__clamp[Math.round(((d >>> 8) & 255) * Y.unmult)] & 255) <<
                  8) |
                (d & 255)));
            k *= 4;
            g = c;
            l = !0;
            null == l && (l = !1);
            null == g && (g = 0);
            l &&
              (0 == (d & 255)
                ? 0 != d && (d = 0)
                : 255 != (d & 255) &&
                  ((Y.a16 = Y.__alpha16[d & 255]),
                  (d =
                    ((((((d >>> 24) & 255) * Y.a16) >> 16) & 255) << 24) |
                    ((((((d >>> 16) & 255) * Y.a16) >> 16) & 255) << 16) |
                    ((((((d >>> 8) & 255) * Y.a16) >> 16) & 255) << 8) |
                    (d & 255))));
            switch (g) {
              case 0:
                b[k] = (d >>> 24) & 255;
                b[k + 1] = (d >>> 16) & 255;
                b[k + 2] = (d >>> 8) & 255;
                b[k + 3] = d & 255;
                break;
              case 1:
                b[k] = d & 255;
                b[k + 1] = (d >>> 24) & 255;
                b[k + 2] = (d >>> 16) & 255;
                b[k + 3] = (d >>> 8) & 255;
                break;
              case 2:
                (b[k] = (d >>> 8) & 255),
                  (b[k + 1] = (d >>> 16) & 255),
                  (b[k + 2] = (d >>> 24) & 255),
                  (b[k + 3] = d & 255);
            }
          }
          a.buffer.premultiplied = !0;
          a.dirty = !0;
          a.version++;
        }
      };
      jc.setFormat = function (a, b) {
        var c = a.buffer.data;
        if (null != c) {
          var d = (c.length / 4) | 0;
          switch (a.get_format()) {
            case 0:
              var e = 0;
              var f = 1;
              var k = 2;
              var g = 3;
              break;
            case 1:
              e = 1;
              f = 2;
              k = 3;
              g = 0;
              break;
            case 2:
              (e = 2), (f = 1), (k = 0), (g = 3);
          }
          switch (b) {
            case 0:
              var l = 0;
              var h = 1;
              var p = 2;
              var m = 3;
              break;
            case 1:
              l = 1;
              h = 2;
              p = 3;
              m = 0;
              break;
            case 2:
              (l = 2), (h = 1), (p = 0), (m = 3);
          }
          for (var n = 0; n < d; ) {
            var q = 4 * n++;
            var z = c[q + e];
            var t = c[q + f];
            var w = c[q + k];
            var x = c[q + g];
            c[q + l] = z;
            c[q + h] = t;
            c[q + p] = w;
            c[q + m] = x;
          }
          a.buffer.format = b;
          a.dirty = !0;
          a.version++;
        }
      };
      jc.setPixel = function (a, b, c, d, e) {
        switch (e) {
          case 1:
            d =
              (((d >>> 16) & 255) << 24) |
              (((d >>> 8) & 255) << 16) |
              ((d & 255) << 8) |
              ((d >>> 24) & 255);
            break;
          case 2:
            d =
              (((d >>> 8) & 255) << 24) |
              (((d >>> 16) & 255) << 16) |
              (((d >>> 24) & 255) << 8) |
              (d & 255);
        }
        var f = 0,
          k = a.buffer.data,
          g = 4 * (c + a.offsetY) * a.buffer.width + 4 * (b + a.offsetX);
        e = a.buffer.format;
        var l = a.buffer.premultiplied;
        null == l && (l = !1);
        null == e && (e = 0);
        switch (e) {
          case 0:
            f =
              ((k[g] & 255) << 24) |
              ((k[g + 1] & 255) << 16) |
              ((k[g + 2] & 255) << 8) |
              (k[g + 3] & 255);
            break;
          case 1:
            f =
              ((k[g + 1] & 255) << 24) |
              ((k[g + 2] & 255) << 16) |
              ((k[g + 3] & 255) << 8) |
              (k[g] & 255);
            break;
          case 2:
            f =
              ((k[g + 2] & 255) << 24) |
              ((k[g + 1] & 255) << 16) |
              ((k[g] & 255) << 8) |
              (k[g + 3] & 255);
        }
        l &&
          0 != (f & 255) &&
          255 != (f & 255) &&
          ((Y.unmult = 255 / (f & 255)),
          (f =
            ((Y.__clamp[Math.round(((f >>> 24) & 255) * Y.unmult)] & 255) <<
              24) |
            ((Y.__clamp[Math.round(((f >>> 16) & 255) * Y.unmult)] & 255) <<
              16) |
            ((Y.__clamp[Math.round(((f >>> 8) & 255) * Y.unmult)] & 255) << 8) |
            (f & 255)));
        d =
          (((d >>> 24) & 255) << 24) |
          (((d >>> 16) & 255) << 16) |
          (((d >>> 8) & 255) << 8) |
          (f & 255);
        k = a.buffer.data;
        g = 4 * (c + a.offsetY) * a.buffer.width + 4 * (b + a.offsetX);
        e = a.buffer.format;
        l = a.buffer.premultiplied;
        null == l && (l = !1);
        null == e && (e = 0);
        l &&
          (0 == (d & 255)
            ? 0 != d && (d = 0)
            : 255 != (d & 255) &&
              ((Y.a16 = Y.__alpha16[d & 255]),
              (d =
                ((((((d >>> 24) & 255) * Y.a16) >> 16) & 255) << 24) |
                ((((((d >>> 16) & 255) * Y.a16) >> 16) & 255) << 16) |
                ((((((d >>> 8) & 255) * Y.a16) >> 16) & 255) << 8) |
                (d & 255))));
        switch (e) {
          case 0:
            k[g] = (d >>> 24) & 255;
            k[g + 1] = (d >>> 16) & 255;
            k[g + 2] = (d >>> 8) & 255;
            k[g + 3] = d & 255;
            break;
          case 1:
            k[g] = d & 255;
            k[g + 1] = (d >>> 24) & 255;
            k[g + 2] = (d >>> 16) & 255;
            k[g + 3] = (d >>> 8) & 255;
            break;
          case 2:
            (k[g] = (d >>> 8) & 255),
              (k[g + 1] = (d >>> 16) & 255),
              (k[g + 2] = (d >>> 24) & 255),
              (k[g + 3] = d & 255);
        }
        a.dirty = !0;
        a.version++;
      };
      jc.setPixel32 = function (a, b, c, d, e) {
        switch (e) {
          case 1:
            d =
              (((d >>> 16) & 255) << 24) |
              (((d >>> 8) & 255) << 16) |
              ((d & 255) << 8) |
              ((d >>> 24) & 255);
            break;
          case 2:
            d =
              (((d >>> 8) & 255) << 24) |
              (((d >>> 16) & 255) << 16) |
              (((d >>> 24) & 255) << 8) |
              (d & 255);
        }
        a.get_transparent() ||
          (d =
            (((d >>> 24) & 255) << 24) |
            (((d >>> 16) & 255) << 16) |
            (((d >>> 8) & 255) << 8) |
            255);
        var f = a.buffer.data;
        b = 4 * (c + a.offsetY) * a.buffer.width + 4 * (b + a.offsetX);
        e = a.buffer.format;
        c = a.buffer.premultiplied;
        null == c && (c = !1);
        null == e && (e = 0);
        c &&
          (0 == (d & 255)
            ? 0 != d && (d = 0)
            : 255 != (d & 255) &&
              ((Y.a16 = Y.__alpha16[d & 255]),
              (d =
                ((((((d >>> 24) & 255) * Y.a16) >> 16) & 255) << 24) |
                ((((((d >>> 16) & 255) * Y.a16) >> 16) & 255) << 16) |
                ((((((d >>> 8) & 255) * Y.a16) >> 16) & 255) << 8) |
                (d & 255))));
        switch (e) {
          case 0:
            f[b] = (d >>> 24) & 255;
            f[b + 1] = (d >>> 16) & 255;
            f[b + 2] = (d >>> 8) & 255;
            f[b + 3] = d & 255;
            break;
          case 1:
            f[b] = d & 255;
            f[b + 1] = (d >>> 24) & 255;
            f[b + 2] = (d >>> 16) & 255;
            f[b + 3] = (d >>> 8) & 255;
            break;
          case 2:
            (f[b] = (d >>> 8) & 255),
              (f[b + 1] = (d >>> 16) & 255),
              (f[b + 2] = (d >>> 24) & 255),
              (f[b + 3] = d & 255);
        }
        a.dirty = !0;
        a.version++;
      };
      jc.unmultiplyAlpha = function (a) {
        var b = a.buffer.data;
        if (null != b) {
          for (
            var c = a.buffer.format, d = 0, e = 0, f = (b.length / 4) | 0;
            e < f;

          ) {
            var k = e++,
              g = 4 * k,
              l = c,
              h = !0;
            null == h && (h = !1);
            null == l && (l = 0);
            switch (l) {
              case 0:
                d =
                  ((b[g] & 255) << 24) |
                  ((b[g + 1] & 255) << 16) |
                  ((b[g + 2] & 255) << 8) |
                  (b[g + 3] & 255);
                break;
              case 1:
                d =
                  ((b[g + 1] & 255) << 24) |
                  ((b[g + 2] & 255) << 16) |
                  ((b[g + 3] & 255) << 8) |
                  (b[g] & 255);
                break;
              case 2:
                d =
                  ((b[g + 2] & 255) << 24) |
                  ((b[g + 1] & 255) << 16) |
                  ((b[g] & 255) << 8) |
                  (b[g + 3] & 255);
            }
            h &&
              0 != (d & 255) &&
              255 != (d & 255) &&
              ((Y.unmult = 255 / (d & 255)),
              (d =
                ((Y.__clamp[Math.round(((d >>> 24) & 255) * Y.unmult)] & 255) <<
                  24) |
                ((Y.__clamp[Math.round(((d >>> 16) & 255) * Y.unmult)] & 255) <<
                  16) |
                ((Y.__clamp[Math.round(((d >>> 8) & 255) * Y.unmult)] & 255) <<
                  8) |
                (d & 255)));
            k *= 4;
            g = c;
            l = !1;
            null == l && (l = !1);
            null == g && (g = 0);
            l &&
              (0 == (d & 255)
                ? 0 != d && (d = 0)
                : 255 != (d & 255) &&
                  ((Y.a16 = Y.__alpha16[d & 255]),
                  (d =
                    ((((((d >>> 24) & 255) * Y.a16) >> 16) & 255) << 24) |
                    ((((((d >>> 16) & 255) * Y.a16) >> 16) & 255) << 16) |
                    ((((((d >>> 8) & 255) * Y.a16) >> 16) & 255) << 8) |
                    (d & 255))));
            switch (g) {
              case 0:
                b[k] = (d >>> 24) & 255;
                b[k + 1] = (d >>> 16) & 255;
                b[k + 2] = (d >>> 8) & 255;
                b[k + 3] = d & 255;
                break;
              case 1:
                b[k] = d & 255;
                b[k + 1] = (d >>> 24) & 255;
                b[k + 2] = (d >>> 16) & 255;
                b[k + 3] = (d >>> 8) & 255;
                break;
              case 2:
                (b[k] = (d >>> 8) & 255),
                  (b[k + 1] = (d >>> 16) & 255),
                  (b[k + 2] = (d >>> 24) & 255),
                  (b[k + 3] = d & 255);
            }
          }
          a.buffer.premultiplied = !1;
          a.dirty = !0;
          a.version++;
        }
      };
      var Bg = function (a, b) {
        this.image = a;
        null == b
          ? (this.rect = a.get_rect())
          : (0 > b.x && (b.x = 0),
            0 > b.y && (b.y = 0),
            b.x + b.width > a.width && (b.width = a.width - b.x),
            b.y + b.height > a.height && (b.height = a.height - b.y),
            0 > b.width && (b.width = 0),
            0 > b.height && (b.height = 0),
            (this.rect = b));
        this.stride = a.buffer.get_stride();
        this.__update();
      };
      h["lime._internal.graphics._ImageDataUtil.ImageDataView"] = Bg;
      Bg.__name__ = "lime._internal.graphics._ImageDataUtil.ImageDataView";
      Bg.prototype = {
        clip: function (a, b, c, d) {
          null == this.tempRect && (this.tempRect = new Fe());
          this.tempRect.setTo(a, b, c, d);
          this.rect.intersection(this.tempRect, this.rect);
          this.__update();
        },
        __update: function () {
          this.x = Math.ceil(this.rect.x);
          this.y = Math.ceil(this.rect.y);
          this.width = Math.floor(this.rect.width);
          this.height = Math.floor(this.rect.height);
          this.byteOffset =
            this.stride * (this.y + this.image.offsetY) +
            4 * (this.x + this.image.offsetX);
        },
        __class__: Bg,
      };
      var je = function () {};
      h["lime._internal.graphics.StackBlur"] = je;
      je.__name__ = "lime._internal.graphics.StackBlur";
      je.blur = function (a, b, c, d, e, f, k) {
        a.copyPixels(b, c, d);
        je.__stackBlurCanvasRGBA(a, c.width | 0, c.height | 0, e, f, k);
      };
      je.__stackBlurCanvasRGBA = function (a, b, c, d, e, f) {
        d = Math.round(d) >> 1;
        e = Math.round(e) >> 1;
        if (
          null != je.MUL_TABLE &&
          (d >= je.MUL_TABLE.length && (d = je.MUL_TABLE.length - 1),
          e >= je.MUL_TABLE.length && (e = je.MUL_TABLE.length - 1),
          !(0 > d || 0 > e))
        ) {
          1 > f && (f = 1);
          3 < f && (f = 3);
          a = a.get_data();
          var k,
            g,
            l = d + d + 1;
          var h = e + e + 1;
          var p = b - 1,
            m = c - 1,
            n = d + 1,
            q = e + 1,
            z = new pi(),
            t = z;
          var w = 1;
          for (var x = l; w < x; ) w++, (t = t.n = new pi());
          t.n = z;
          var D = (l = new pi());
          w = 1;
          for (x = h; w < x; ) w++, (D = D.n = new pi());
          D.n = l;
          for (
            var y = je.MUL_TABLE[d],
              A = je.SHG_TABLE[d],
              C = je.MUL_TABLE[e],
              E = je.SHG_TABLE[e];
            0 < f;

          ) {
            --f;
            var F = (g = 0);
            var B = y,
              G = A;
            for (k = c; ; ) {
              var v = a[g];
              h = n * v;
              var K = a[g + 1];
              var I = n * K;
              var U = a[g + 2];
              var Z = n * U;
              w = a[g + 3];
              var O = n * w;
              t = z;
              for (
                D = n;
                (t.r = v), (t.g = K), (t.b = U), (t.a = w), (t = t.n), -1 < --D;

              );
              w = 1;
              for (x = n; w < x; )
                (D = w++),
                  (D = g + ((p < D ? p : D) << 2)),
                  (h += t.r = a[D]),
                  (I += t.g = a[D + 1]),
                  (Z += t.b = a[D + 2]),
                  (O += t.a = a[D + 3]),
                  (t = t.n);
              x = z;
              t = 0;
              for (w = b; t < w; )
                (D = t++),
                  (a[g++] = (h * B) >>> G),
                  (a[g++] = (I * B) >>> G),
                  (a[g++] = (Z * B) >>> G),
                  (a[g++] = (O * B) >>> G),
                  (D = D + d + 1),
                  (D = (F + (D < p ? D : p)) << 2),
                  (h -= x.r - (x.r = a[D])),
                  (I -= x.g - (x.g = a[D + 1])),
                  (Z -= x.b - (x.b = a[D + 2])),
                  (O -= x.a - (x.a = a[D + 3])),
                  (x = x.n);
              F += b;
              if (!(0 < --k)) break;
            }
            B = C;
            G = E;
            k = 0;
            for (F = b; k < F; ) {
              t = k++;
              g = t << 2;
              v = a[g];
              h = q * v;
              K = a[g + 1];
              I = q * K;
              U = a[g + 2];
              Z = q * U;
              w = a[g + 3];
              O = q * w;
              D = l;
              g = 0;
              for (x = q; g < x; )
                g++, (D.r = v), (D.g = K), (D.b = U), (D.a = w), (D = D.n);
              w = b;
              x = 1;
              for (v = e + 1; x < v; )
                (K = x++),
                  (g = (w + t) << 2),
                  (h += D.r = a[g]),
                  (I += D.g = a[g + 1]),
                  (Z += D.b = a[g + 2]),
                  (O += D.a = a[g + 3]),
                  (D = D.n),
                  K < m && (w += b);
              g = t;
              x = l;
              if (0 < f)
                for (v = 0, K = c; v < K; )
                  (U = v++),
                    (D = g << 2),
                    (w = (O * B) >>> G),
                    (a[D + 3] = w),
                    0 < w
                      ? ((a[D] = (h * B) >>> G),
                        (a[D + 1] = (I * B) >>> G),
                        (a[D + 2] = (Z * B) >>> G))
                      : (a[D] = a[D + 1] = a[D + 2] = 0),
                    (D = U + q),
                    (D = (t + (D < m ? D : m) * b) << 2),
                    (h -= x.r - (x.r = a[D])),
                    (I -= x.g - (x.g = a[D + 1])),
                    (Z -= x.b - (x.b = a[D + 2])),
                    (O -= x.a - (x.a = a[D + 3])),
                    (x = x.n),
                    (g += b);
              else
                for (var M = 0, N = c; M < N; ) {
                  var Ha = M++;
                  D = g << 2;
                  w = (O * B) >>> G;
                  a[D + 3] = w;
                  0 < w
                    ? ((w = 255 / w),
                      (v = (((h * B) >>> G) * w) | 0),
                      (K = (((I * B) >>> G) * w) | 0),
                      (U = (((Z * B) >>> G) * w) | 0),
                      (a[D] = 255 < v ? 255 : v),
                      (a[D + 1] = 255 < K ? 255 : K),
                      (a[D + 2] = 255 < U ? 255 : U))
                    : (a[D] = a[D + 1] = a[D + 2] = 0);
                  D = Ha + q;
                  D = (t + (D < m ? D : m) * b) << 2;
                  h -= x.r - (x.r = a[D]);
                  I -= x.g - (x.g = a[D + 1]);
                  Z -= x.b - (x.b = a[D + 2]);
                  O -= x.a - (x.a = a[D + 3]);
                  x = x.n;
                  g += b;
                }
            }
          }
        }
      };
      var pi = function () {
        this.a = this.b = this.g = this.r = 0;
        this.n = null;
      };
      h["lime._internal.graphics.BlurStack"] = pi;
      pi.__name__ = "lime._internal.graphics.BlurStack";
      pi.prototype = { __class__: pi };
      var Ua = function (a, b) {
        null == b && (b = !1);
        if (null != a)
          if (b)
            (b = new Gd()),
              (b.future = this),
              Sd.queue({ promise: b, work: a });
          else
            try {
              (this.value = a()), (this.isComplete = !0);
            } catch (c) {
              (this.error = N.caught(c).unwrap()), (this.isError = !0);
            }
      };
      h["lime.app.Future"] = Ua;
      Ua.__name__ = "lime.app.Future";
      Ua.withError = function (a) {
        var b = new Ua();
        b.isError = !0;
        b.error = a;
        return b;
      };
      Ua.withValue = function (a) {
        var b = new Ua();
        b.isComplete = !0;
        b.value = a;
        return b;
      };
      Ua.prototype = {
        onComplete: function (a) {
          null != a &&
            (this.isComplete
              ? a(this.value)
              : this.isError ||
                (null == this.__completeListeners &&
                  (this.__completeListeners = []),
                this.__completeListeners.push(a)));
          return this;
        },
        onError: function (a) {
          null != a &&
            (this.isError
              ? a(this.error)
              : this.isComplete ||
                (null == this.__errorListeners && (this.__errorListeners = []),
                this.__errorListeners.push(a)));
          return this;
        },
        onProgress: function (a) {
          null != a &&
            (null == this.__progressListeners &&
              (this.__progressListeners = []),
            this.__progressListeners.push(a));
          return this;
        },
        then: function (a) {
          if (this.isComplete) return a(this.value);
          if (this.isError) {
            var b = new Ua();
            b.isError = !0;
            b.error = this.error;
            return b;
          }
          var c = new Gd();
          this.onError(n(c, c.error));
          this.onProgress(n(c, c.progress));
          this.onComplete(function (b) {
            b = a(b);
            b.onError(n(c, c.error));
            b.onComplete(n(c, c.complete));
          });
          return c.future;
        },
        __class__: Ua,
      };
      var Sd = function () {};
      h["lime.app._Future.FutureWork"] = Sd;
      Sd.__name__ = "lime.app._Future.FutureWork";
      Sd.queue = function (a) {
        null == Sd.threadPool &&
          ((Sd.threadPool = new Nn()),
          Sd.threadPool.doWork.add(Sd.threadPool_doWork),
          Sd.threadPool.onComplete.add(Sd.threadPool_onComplete),
          Sd.threadPool.onError.add(Sd.threadPool_onError));
        Sd.threadPool.queue(a);
      };
      Sd.threadPool_doWork = function (a) {
        try {
          var b = a.work();
          Sd.threadPool.sendComplete({ promise: a.promise, result: b });
        } catch (c) {
          (b = N.caught(c).unwrap()),
            Sd.threadPool.sendError({ promise: a.promise, error: b });
        }
      };
      Sd.threadPool_onComplete = function (a) {
        a.promise.complete(a.result);
      };
      Sd.threadPool_onError = function (a) {
        a.promise.error(a.error);
      };
      var Gd = function () {
        this.future = new Ua();
      };
      h["lime.app.Promise"] = Gd;
      Gd.__name__ = "lime.app.Promise";
      Gd.prototype = {
        complete: function (a) {
          if (
            !this.future.isError &&
            ((this.future.isComplete = !0),
            (this.future.value = a),
            null != this.future.__completeListeners)
          ) {
            for (
              var b = 0, c = this.future.__completeListeners;
              b < c.length;

            ) {
              var d = c[b];
              ++b;
              d(a);
            }
            this.future.__completeListeners = null;
          }
          return this;
        },
        completeWith: function (a) {
          a.onComplete(n(this, this.complete));
          a.onError(n(this, this.error));
          a.onProgress(n(this, this.progress));
          return this;
        },
        error: function (a) {
          if (
            !this.future.isComplete &&
            ((this.future.isError = !0),
            (this.future.error = a),
            null != this.future.__errorListeners)
          ) {
            for (var b = 0, c = this.future.__errorListeners; b < c.length; ) {
              var d = c[b];
              ++b;
              d(a);
            }
            this.future.__errorListeners = null;
          }
          return this;
        },
        progress: function (a, b) {
          if (
            !this.future.isError &&
            !this.future.isComplete &&
            null != this.future.__progressListeners
          )
            for (
              var c = 0, d = this.future.__progressListeners;
              c < d.length;

            ) {
              var e = d[c];
              ++c;
              e(a, b);
            }
          return this;
        },
        __class__: Gd,
      };
      var qi = function () {
        this.canceled = !1;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
      };
      h["lime.app._Event_Dynamic_Void"] = qi;
      qi.__name__ = "lime.app._Event_Dynamic_Void";
      qi.prototype = {
        add: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = 0, e = this.__priorities.length; d < e; ) {
            var f = d++;
            if (c > this.__priorities[f]) {
              this.__listeners.splice(f, 0, a);
              this.__priorities.splice(f, 0, c);
              this.__repeat.splice(f, 0, !b);
              return;
            }
          }
          this.__listeners.push(a);
          this.__priorities.push(c);
          this.__repeat.push(!b);
        },
        remove: function (a) {
          for (var b = this.__listeners.length; 0 <= --b; )
            qa.compareMethods(this.__listeners[b], a) &&
              (this.__listeners.splice(b, 1),
              this.__priorities.splice(b, 1),
              this.__repeat.splice(b, 1));
        },
        dispatch: function (a) {
          this.canceled = !1;
          for (
            var b = this.__listeners, c = this.__repeat, d = 0;
            d < b.length &&
            (b[d](a), c[d] ? ++d : this.remove(b[d]), !this.canceled);

          );
        },
        __class__: qi,
      };
      var On = function () {
        this.canceled = !1;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
      };
      h["lime.app._Event_Float_Float_Float_Void"] = On;
      On.__name__ = "lime.app._Event_Float_Float_Float_Void";
      On.prototype = {
        add: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = 0, e = this.__priorities.length; d < e; ) {
            var f = d++;
            if (c > this.__priorities[f]) {
              this.__listeners.splice(f, 0, a);
              this.__priorities.splice(f, 0, c);
              this.__repeat.splice(f, 0, !b);
              return;
            }
          }
          this.__listeners.push(a);
          this.__priorities.push(c);
          this.__repeat.push(!b);
        },
        remove: function (a) {
          for (var b = this.__listeners.length; 0 <= --b; )
            qa.compareMethods(this.__listeners[b], a) &&
              (this.__listeners.splice(b, 1),
              this.__priorities.splice(b, 1),
              this.__repeat.splice(b, 1));
        },
        dispatch: function (a, b, c) {
          this.canceled = !1;
          for (
            var d = this.__listeners, e = this.__repeat, f = 0;
            f < d.length &&
            (d[f](a, b, c), e[f] ? ++f : this.remove(d[f]), !this.canceled);

          );
        },
        __class__: On,
      };
      var Pn = function () {
        this.canceled = !1;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
      };
      h["lime.app._Event_Float_Float_Int_Void"] = Pn;
      Pn.__name__ = "lime.app._Event_Float_Float_Int_Void";
      Pn.prototype = {
        add: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = 0, e = this.__priorities.length; d < e; ) {
            var f = d++;
            if (c > this.__priorities[f]) {
              this.__listeners.splice(f, 0, a);
              this.__priorities.splice(f, 0, c);
              this.__repeat.splice(f, 0, !b);
              return;
            }
          }
          this.__listeners.push(a);
          this.__priorities.push(c);
          this.__repeat.push(!b);
        },
        cancel: function () {
          this.canceled = !0;
        },
        remove: function (a) {
          for (var b = this.__listeners.length; 0 <= --b; )
            qa.compareMethods(this.__listeners[b], a) &&
              (this.__listeners.splice(b, 1),
              this.__priorities.splice(b, 1),
              this.__repeat.splice(b, 1));
        },
        dispatch: function (a, b, c) {
          this.canceled = !1;
          for (
            var d = this.__listeners, e = this.__repeat, f = 0;
            f < d.length &&
            (d[f](a, b, c), e[f] ? ++f : this.remove(d[f]), !this.canceled);

          );
        },
        __class__: Pn,
      };
      var Aj = function () {
        this.canceled = !1;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
      };
      h["lime.app._Event_Float_Float_Void"] = Aj;
      Aj.__name__ = "lime.app._Event_Float_Float_Void";
      Aj.prototype = {
        add: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = 0, e = this.__priorities.length; d < e; ) {
            var f = d++;
            if (c > this.__priorities[f]) {
              this.__listeners.splice(f, 0, a);
              this.__priorities.splice(f, 0, c);
              this.__repeat.splice(f, 0, !b);
              return;
            }
          }
          this.__listeners.push(a);
          this.__priorities.push(c);
          this.__repeat.push(!b);
        },
        remove: function (a) {
          for (var b = this.__listeners.length; 0 <= --b; )
            qa.compareMethods(this.__listeners[b], a) &&
              (this.__listeners.splice(b, 1),
              this.__priorities.splice(b, 1),
              this.__repeat.splice(b, 1));
        },
        dispatch: function (a, b) {
          this.canceled = !1;
          for (
            var c = this.__listeners, d = this.__repeat, e = 0;
            e < c.length &&
            (c[e](a, b), d[e] ? ++e : this.remove(c[e]), !this.canceled);

          );
        },
        __class__: Aj,
      };
      var Qn = function () {
        this.canceled = !1;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
      };
      h["lime.app._Event_Float_Float_lime_ui_MouseButton_Void"] = Qn;
      Qn.__name__ = "lime.app._Event_Float_Float_lime_ui_MouseButton_Void";
      Qn.prototype = {
        add: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = 0, e = this.__priorities.length; d < e; ) {
            var f = d++;
            if (c > this.__priorities[f]) {
              this.__listeners.splice(f, 0, a);
              this.__priorities.splice(f, 0, c);
              this.__repeat.splice(f, 0, !b);
              return;
            }
          }
          this.__listeners.push(a);
          this.__priorities.push(c);
          this.__repeat.push(!b);
        },
        cancel: function () {
          this.canceled = !0;
        },
        remove: function (a) {
          for (var b = this.__listeners.length; 0 <= --b; )
            qa.compareMethods(this.__listeners[b], a) &&
              (this.__listeners.splice(b, 1),
              this.__priorities.splice(b, 1),
              this.__repeat.splice(b, 1));
        },
        dispatch: function (a, b, c) {
          this.canceled = !1;
          for (
            var d = this.__listeners, e = this.__repeat, f = 0;
            f < d.length &&
            (d[f](a, b, c), e[f] ? ++f : this.remove(d[f]), !this.canceled);

          );
        },
        __class__: Qn,
      };
      var Rn = function () {
        this.canceled = !1;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
      };
      h["lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void"] = Rn;
      Rn.__name__ = "lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void";
      Rn.prototype = {
        add: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = 0, e = this.__priorities.length; d < e; ) {
            var f = d++;
            if (c > this.__priorities[f]) {
              this.__listeners.splice(f, 0, a);
              this.__priorities.splice(f, 0, c);
              this.__repeat.splice(f, 0, !b);
              return;
            }
          }
          this.__listeners.push(a);
          this.__priorities.push(c);
          this.__repeat.push(!b);
        },
        cancel: function () {
          this.canceled = !0;
        },
        remove: function (a) {
          for (var b = this.__listeners.length; 0 <= --b; )
            qa.compareMethods(this.__listeners[b], a) &&
              (this.__listeners.splice(b, 1),
              this.__priorities.splice(b, 1),
              this.__repeat.splice(b, 1));
        },
        dispatch: function (a, b, c) {
          this.canceled = !1;
          for (
            var d = this.__listeners, e = this.__repeat, f = 0;
            f < d.length &&
            (d[f](a, b, c), e[f] ? ++f : this.remove(d[f]), !this.canceled);

          );
        },
        __class__: Rn,
      };
      var Sn = function () {
        this.canceled = !1;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
      };
      h["lime.app._Event_Int_Float_Float_Void"] = Sn;
      Sn.__name__ = "lime.app._Event_Int_Float_Float_Void";
      Sn.prototype = {
        add: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = 0, e = this.__priorities.length; d < e; ) {
            var f = d++;
            if (c > this.__priorities[f]) {
              this.__listeners.splice(f, 0, a);
              this.__priorities.splice(f, 0, c);
              this.__repeat.splice(f, 0, !b);
              return;
            }
          }
          this.__listeners.push(a);
          this.__priorities.push(c);
          this.__repeat.push(!b);
        },
        __class__: Sn,
      };
      var Tn = function () {
        this.canceled = !1;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
      };
      h["lime.app._Event_Int_Float_Void"] = Tn;
      Tn.__name__ = "lime.app._Event_Int_Float_Void";
      Tn.prototype = {
        add: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = 0, e = this.__priorities.length; d < e; ) {
            var f = d++;
            if (c > this.__priorities[f]) {
              this.__listeners.splice(f, 0, a);
              this.__priorities.splice(f, 0, c);
              this.__repeat.splice(f, 0, !b);
              return;
            }
          }
          this.__listeners.push(a);
          this.__priorities.push(c);
          this.__repeat.push(!b);
        },
        remove: function (a) {
          for (var b = this.__listeners.length; 0 <= --b; )
            qa.compareMethods(this.__listeners[b], a) &&
              (this.__listeners.splice(b, 1),
              this.__priorities.splice(b, 1),
              this.__repeat.splice(b, 1));
        },
        dispatch: function (a, b) {
          this.canceled = !1;
          for (
            var c = this.__listeners, d = this.__repeat, e = 0;
            e < c.length &&
            (c[e](a, b), d[e] ? ++e : this.remove(c[e]), !this.canceled);

          );
        },
        __class__: Tn,
      };
      var Hl = function () {
        this.canceled = !1;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
      };
      h["lime.app._Event_Int_Int_Void"] = Hl;
      Hl.__name__ = "lime.app._Event_Int_Int_Void";
      Hl.prototype = {
        add: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = 0, e = this.__priorities.length; d < e; ) {
            var f = d++;
            if (c > this.__priorities[f]) {
              this.__listeners.splice(f, 0, a);
              this.__priorities.splice(f, 0, c);
              this.__repeat.splice(f, 0, !b);
              return;
            }
          }
          this.__listeners.push(a);
          this.__priorities.push(c);
          this.__repeat.push(!b);
        },
        remove: function (a) {
          for (var b = this.__listeners.length; 0 <= --b; )
            qa.compareMethods(this.__listeners[b], a) &&
              (this.__listeners.splice(b, 1),
              this.__priorities.splice(b, 1),
              this.__repeat.splice(b, 1));
        },
        dispatch: function (a, b) {
          this.canceled = !1;
          for (
            var c = this.__listeners, d = this.__repeat, e = 0;
            e < c.length &&
            (c[e](a, b), d[e] ? ++e : this.remove(c[e]), !this.canceled);

          );
        },
        __class__: Hl,
      };
      var mh = function () {
        this.canceled = !1;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
      };
      h["lime.app._Event_Int_Void"] = mh;
      mh.__name__ = "lime.app._Event_Int_Void";
      mh.prototype = {
        add: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = 0, e = this.__priorities.length; d < e; ) {
            var f = d++;
            if (c > this.__priorities[f]) {
              this.__listeners.splice(f, 0, a);
              this.__priorities.splice(f, 0, c);
              this.__repeat.splice(f, 0, !b);
              return;
            }
          }
          this.__listeners.push(a);
          this.__priorities.push(c);
          this.__repeat.push(!b);
        },
        remove: function (a) {
          for (var b = this.__listeners.length; 0 <= --b; )
            qa.compareMethods(this.__listeners[b], a) &&
              (this.__listeners.splice(b, 1),
              this.__priorities.splice(b, 1),
              this.__repeat.splice(b, 1));
        },
        dispatch: function (a) {
          this.canceled = !1;
          for (
            var b = this.__listeners, c = this.__repeat, d = 0;
            d < b.length &&
            (b[d](a), c[d] ? ++d : this.remove(b[d]), !this.canceled);

          );
        },
        __class__: mh,
      };
      var Un = function () {
        this.canceled = !1;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
      };
      h["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = Un;
      Un.__name__ = "lime.app._Event_Int_lime_ui_JoystickHatPosition_Void";
      Un.prototype = {
        add: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = 0, e = this.__priorities.length; d < e; ) {
            var f = d++;
            if (c > this.__priorities[f]) {
              this.__listeners.splice(f, 0, a);
              this.__priorities.splice(f, 0, c);
              this.__repeat.splice(f, 0, !b);
              return;
            }
          }
          this.__listeners.push(a);
          this.__priorities.push(c);
          this.__repeat.push(!b);
        },
        __class__: Un,
      };
      var Vn = function () {
        this.canceled = !1;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
      };
      h["lime.app._Event_String_Int_Int_Void"] = Vn;
      Vn.__name__ = "lime.app._Event_String_Int_Int_Void";
      Vn.prototype = {
        add: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = 0, e = this.__priorities.length; d < e; ) {
            var f = d++;
            if (c > this.__priorities[f]) {
              this.__listeners.splice(f, 0, a);
              this.__priorities.splice(f, 0, c);
              this.__repeat.splice(f, 0, !b);
              return;
            }
          }
          this.__listeners.push(a);
          this.__priorities.push(c);
          this.__repeat.push(!b);
        },
        __class__: Vn,
      };
      var Bj = function () {
        this.canceled = !1;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
      };
      h["lime.app._Event_String_Void"] = Bj;
      Bj.__name__ = "lime.app._Event_String_Void";
      Bj.prototype = {
        add: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = 0, e = this.__priorities.length; d < e; ) {
            var f = d++;
            if (c > this.__priorities[f]) {
              this.__listeners.splice(f, 0, a);
              this.__priorities.splice(f, 0, c);
              this.__repeat.splice(f, 0, !b);
              return;
            }
          }
          this.__listeners.push(a);
          this.__priorities.push(c);
          this.__repeat.push(!b);
        },
        cancel: function () {
          this.canceled = !0;
        },
        has: function (a) {
          for (var b = 0, c = this.__listeners; b < c.length; ) {
            var d = c[b];
            ++b;
            if (qa.compareMethods(d, a)) return !0;
          }
          return !1;
        },
        remove: function (a) {
          for (var b = this.__listeners.length; 0 <= --b; )
            qa.compareMethods(this.__listeners[b], a) &&
              (this.__listeners.splice(b, 1),
              this.__priorities.splice(b, 1),
              this.__repeat.splice(b, 1));
        },
        dispatch: function (a) {
          this.canceled = !1;
          for (
            var b = this.__listeners, c = this.__repeat, d = 0;
            d < b.length &&
            (b[d](a), c[d] ? ++d : this.remove(b[d]), !this.canceled);

          );
        },
        __class__: Bj,
      };
      var Gc = function () {
        this.canceled = !1;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
      };
      h["lime.app._Event_Void_Void"] = Gc;
      Gc.__name__ = "lime.app._Event_Void_Void";
      Gc.prototype = {
        add: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = 0, e = this.__priorities.length; d < e; ) {
            var f = d++;
            if (c > this.__priorities[f]) {
              this.__listeners.splice(f, 0, a);
              this.__priorities.splice(f, 0, c);
              this.__repeat.splice(f, 0, !b);
              return;
            }
          }
          this.__listeners.push(a);
          this.__priorities.push(c);
          this.__repeat.push(!b);
        },
        has: function (a) {
          for (var b = 0, c = this.__listeners; b < c.length; ) {
            var d = c[b];
            ++b;
            if (qa.compareMethods(d, a)) return !0;
          }
          return !1;
        },
        remove: function (a) {
          for (var b = this.__listeners.length; 0 <= --b; )
            qa.compareMethods(this.__listeners[b], a) &&
              (this.__listeners.splice(b, 1),
              this.__priorities.splice(b, 1),
              this.__repeat.splice(b, 1));
        },
        dispatch: function () {
          this.canceled = !1;
          for (
            var a = this.__listeners, b = this.__repeat, c = 0;
            c < a.length &&
            (a[c](), b[c] ? ++c : this.remove(a[c]), !this.canceled);

          );
        },
        __class__: Gc,
      };
      var Il = function () {
        this.canceled = !1;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
      };
      h["lime.app._Event_lime_graphics_RenderContext_Void"] = Il;
      Il.__name__ = "lime.app._Event_lime_graphics_RenderContext_Void";
      Il.prototype = {
        add: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = 0, e = this.__priorities.length; d < e; ) {
            var f = d++;
            if (c > this.__priorities[f]) {
              this.__listeners.splice(f, 0, a);
              this.__priorities.splice(f, 0, c);
              this.__repeat.splice(f, 0, !b);
              return;
            }
          }
          this.__listeners.push(a);
          this.__priorities.push(c);
          this.__repeat.push(!b);
        },
        cancel: function () {
          this.canceled = !0;
        },
        remove: function (a) {
          for (var b = this.__listeners.length; 0 <= --b; )
            qa.compareMethods(this.__listeners[b], a) &&
              (this.__listeners.splice(b, 1),
              this.__priorities.splice(b, 1),
              this.__repeat.splice(b, 1));
        },
        dispatch: function (a) {
          this.canceled = !1;
          for (
            var b = this.__listeners, c = this.__repeat, d = 0;
            d < b.length &&
            (b[d](a), c[d] ? ++d : this.remove(b[d]), !this.canceled);

          );
        },
        __class__: Il,
      };
      var Wn = function () {
        this.canceled = !1;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
      };
      h["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = Wn;
      Wn.__name__ = "lime.app._Event_lime_ui_GamepadAxis_Float_Void";
      Wn.prototype = {
        add: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = 0, e = this.__priorities.length; d < e; ) {
            var f = d++;
            if (c > this.__priorities[f]) {
              this.__listeners.splice(f, 0, a);
              this.__priorities.splice(f, 0, c);
              this.__repeat.splice(f, 0, !b);
              return;
            }
          }
          this.__listeners.push(a);
          this.__priorities.push(c);
          this.__repeat.push(!b);
        },
        remove: function (a) {
          for (var b = this.__listeners.length; 0 <= --b; )
            qa.compareMethods(this.__listeners[b], a) &&
              (this.__listeners.splice(b, 1),
              this.__priorities.splice(b, 1),
              this.__repeat.splice(b, 1));
        },
        dispatch: function (a, b) {
          this.canceled = !1;
          for (
            var c = this.__listeners, d = this.__repeat, e = 0;
            e < c.length &&
            (c[e](a, b), d[e] ? ++e : this.remove(c[e]), !this.canceled);

          );
        },
        __class__: Wn,
      };
      var Jl = function () {
        this.canceled = !1;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
      };
      h["lime.app._Event_lime_ui_GamepadButton_Void"] = Jl;
      Jl.__name__ = "lime.app._Event_lime_ui_GamepadButton_Void";
      Jl.prototype = {
        add: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = 0, e = this.__priorities.length; d < e; ) {
            var f = d++;
            if (c > this.__priorities[f]) {
              this.__listeners.splice(f, 0, a);
              this.__priorities.splice(f, 0, c);
              this.__repeat.splice(f, 0, !b);
              return;
            }
          }
          this.__listeners.push(a);
          this.__priorities.push(c);
          this.__repeat.push(!b);
        },
        remove: function (a) {
          for (var b = this.__listeners.length; 0 <= --b; )
            qa.compareMethods(this.__listeners[b], a) &&
              (this.__listeners.splice(b, 1),
              this.__priorities.splice(b, 1),
              this.__repeat.splice(b, 1));
        },
        dispatch: function (a) {
          this.canceled = !1;
          for (
            var b = this.__listeners, c = this.__repeat, d = 0;
            d < b.length &&
            (b[d](a), c[d] ? ++d : this.remove(b[d]), !this.canceled);

          );
        },
        __class__: Jl,
      };
      var Xn = function () {
        this.canceled = !1;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
      };
      h["lime.app._Event_lime_ui_Gamepad_Void"] = Xn;
      Xn.__name__ = "lime.app._Event_lime_ui_Gamepad_Void";
      Xn.prototype = {
        add: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = 0, e = this.__priorities.length; d < e; ) {
            var f = d++;
            if (c > this.__priorities[f]) {
              this.__listeners.splice(f, 0, a);
              this.__priorities.splice(f, 0, c);
              this.__repeat.splice(f, 0, !b);
              return;
            }
          }
          this.__listeners.push(a);
          this.__priorities.push(c);
          this.__repeat.push(!b);
        },
        remove: function (a) {
          for (var b = this.__listeners.length; 0 <= --b; )
            qa.compareMethods(this.__listeners[b], a) &&
              (this.__listeners.splice(b, 1),
              this.__priorities.splice(b, 1),
              this.__repeat.splice(b, 1));
        },
        dispatch: function (a) {
          this.canceled = !1;
          for (
            var b = this.__listeners, c = this.__repeat, d = 0;
            d < b.length &&
            (b[d](a), c[d] ? ++d : this.remove(b[d]), !this.canceled);

          );
        },
        __class__: Xn,
      };
      var Yn = function () {
        this.canceled = !1;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
      };
      h["lime.app._Event_lime_ui_Joystick_Void"] = Yn;
      Yn.__name__ = "lime.app._Event_lime_ui_Joystick_Void";
      Yn.prototype = {
        add: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = 0, e = this.__priorities.length; d < e; ) {
            var f = d++;
            if (c > this.__priorities[f]) {
              this.__listeners.splice(f, 0, a);
              this.__priorities.splice(f, 0, c);
              this.__repeat.splice(f, 0, !b);
              return;
            }
          }
          this.__listeners.push(a);
          this.__priorities.push(c);
          this.__repeat.push(!b);
        },
        remove: function (a) {
          for (var b = this.__listeners.length; 0 <= --b; )
            qa.compareMethods(this.__listeners[b], a) &&
              (this.__listeners.splice(b, 1),
              this.__priorities.splice(b, 1),
              this.__repeat.splice(b, 1));
        },
        dispatch: function (a) {
          this.canceled = !1;
          for (
            var b = this.__listeners, c = this.__repeat, d = 0;
            d < b.length &&
            (b[d](a), c[d] ? ++d : this.remove(b[d]), !this.canceled);

          );
        },
        __class__: Yn,
      };
      var Kl = function () {
        this.canceled = !1;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
      };
      h["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = Kl;
      Kl.__name__ = "lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void";
      Kl.prototype = {
        add: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = 0, e = this.__priorities.length; d < e; ) {
            var f = d++;
            if (c > this.__priorities[f]) {
              this.__listeners.splice(f, 0, a);
              this.__priorities.splice(f, 0, c);
              this.__repeat.splice(f, 0, !b);
              return;
            }
          }
          this.__listeners.push(a);
          this.__priorities.push(c);
          this.__repeat.push(!b);
        },
        cancel: function () {
          this.canceled = !0;
        },
        remove: function (a) {
          for (var b = this.__listeners.length; 0 <= --b; )
            qa.compareMethods(this.__listeners[b], a) &&
              (this.__listeners.splice(b, 1),
              this.__priorities.splice(b, 1),
              this.__repeat.splice(b, 1));
        },
        dispatch: function (a, b) {
          this.canceled = !1;
          for (
            var c = this.__listeners, d = this.__repeat, e = 0;
            e < c.length &&
            (c[e](a, b), d[e] ? ++e : this.remove(c[e]), !this.canceled);

          );
        },
        __class__: Kl,
      };
      var ri = function () {
        this.canceled = !1;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
      };
      h["lime.app._Event_lime_ui_Touch_Void"] = ri;
      ri.__name__ = "lime.app._Event_lime_ui_Touch_Void";
      ri.prototype = {
        add: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = 0, e = this.__priorities.length; d < e; ) {
            var f = d++;
            if (c > this.__priorities[f]) {
              this.__listeners.splice(f, 0, a);
              this.__priorities.splice(f, 0, c);
              this.__repeat.splice(f, 0, !b);
              return;
            }
          }
          this.__listeners.push(a);
          this.__priorities.push(c);
          this.__repeat.push(!b);
        },
        remove: function (a) {
          for (var b = this.__listeners.length; 0 <= --b; )
            qa.compareMethods(this.__listeners[b], a) &&
              (this.__listeners.splice(b, 1),
              this.__priorities.splice(b, 1),
              this.__repeat.splice(b, 1));
        },
        dispatch: function (a) {
          this.canceled = !1;
          for (
            var b = this.__listeners, c = this.__repeat, d = 0;
            d < b.length &&
            (b[d](a), c[d] ? ++d : this.remove(b[d]), !this.canceled);

          );
        },
        __class__: ri,
      };
      var Gm = function () {
        this.canceled = !1;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
      };
      h["lime.app._Event_lime_ui_Window_Void"] = Gm;
      Gm.__name__ = "lime.app._Event_lime_ui_Window_Void";
      Gm.prototype = {
        add: function (a, b, c) {
          null == c && (c = 0);
          null == b && (b = !1);
          for (var d = 0, e = this.__priorities.length; d < e; ) {
            var f = d++;
            if (c > this.__priorities[f]) {
              this.__listeners.splice(f, 0, a);
              this.__priorities.splice(f, 0, c);
              this.__repeat.splice(f, 0, !b);
              return;
            }
          }
          this.__listeners.push(a);
          this.__priorities.push(c);
          this.__repeat.push(!b);
        },
        remove: function (a) {
          for (var b = this.__listeners.length; 0 <= --b; )
            qa.compareMethods(this.__listeners[b], a) &&
              (this.__listeners.splice(b, 1),
              this.__priorities.splice(b, 1),
              this.__repeat.splice(b, 1));
        },
        dispatch: function (a) {
          this.canceled = !1;
          for (
            var b = this.__listeners, c = this.__repeat, d = 0;
            d < b.length &&
            (b[d](a), c[d] ? ++d : this.remove(b[d]), !this.canceled);

          );
        },
        __class__: Gm,
      };
      var Va = function (a, b, c, d, e, f, k) {
        null == e && (e = -1);
        null == d && (d = -1);
        null == c && (c = 0);
        null == b && (b = 0);
        this.offsetX = b;
        this.offsetY = c;
        this.width = d;
        this.height = e;
        this.version = 0;
        null == k && (k = Nd.CANVAS);
        this.type = k;
        if (null == a) {
          if (0 < d && 0 < e)
            switch (this.type._hx_index) {
              case 0:
                this.buffer = new zg(null, d, e);
                Ra.createCanvas(this, d, e);
                null != f && 0 != f && this.fillRect(new Fe(0, 0, d, e), f);
                break;
              case 1:
                (a = d * e * 4),
                  (a = null != a ? new Uint8Array(a) : null),
                  (this.buffer = new zg(a, d, e)),
                  null != f && 0 != f && this.fillRect(new Fe(0, 0, d, e), f);
            }
        } else this.__fromImageBuffer(a);
      };
      h["lime.graphics.Image"] = Va;
      Va.__name__ = "lime.graphics.Image";
      Va.fromCanvas = function (a) {
        if (null == a) return null;
        var b = new zg(null, a.width, a.height);
        b.set_src(a);
        a = new Va(b);
        a.type = Nd.CANVAS;
        return a;
      };
      Va.fromFile = function (a) {
        if (null == a) return null;
        var b = new Va();
        return b.__fromFile(a) ? b : null;
      };
      Va.loadFromBase64 = function (a, b) {
        return null == a || null == b
          ? Ua.withValue(null)
          : Ia.loadImage("data:" + b + ";base64," + a);
      };
      Va.loadFromBytes = function (a) {
        if (null == a) return Ua.withValue(null);
        if (Va.__isPNG(a)) var b = "image/png";
        else if (Va.__isJPG(a)) b = "image/jpeg";
        else if (Va.__isGIF(a)) b = "image/gif";
        else if (Va.__isWebP(a)) b = "image/webp";
        else return Ua.withValue(null);
        return Ia.loadImageFromBytes(a, b);
      };
      Va.loadFromFile = function (a) {
        return null == a ? Ua.withValue(null) : Ia.loadImage(a);
      };
      Va.__isGIF = function (a) {
        if (null == a || 6 > a.length) return !1;
        a = a.getString(0, 6);
        return "GIF87a" != a ? "GIF89a" == a : !0;
      };
      Va.__isJPG = function (a) {
        return null == a || 4 > a.length
          ? !1
          : 255 == a.b[0] && 216 == a.b[1] && 255 == a.b[a.length - 2]
          ? 217 == a.b[a.length - 1]
          : !1;
      };
      Va.__isPNG = function (a) {
        return null == a || 8 > a.length
          ? !1
          : 137 == a.b[0] &&
            80 == a.b[1] &&
            78 == a.b[2] &&
            71 == a.b[3] &&
            13 == a.b[4] &&
            10 == a.b[5] &&
            26 == a.b[6]
          ? 10 == a.b[7]
          : !1;
      };
      Va.__isWebP = function (a) {
        return null == a || 16 > a.length
          ? !1
          : "RIFF" == a.getString(0, 4)
          ? "WEBP" == a.getString(8, 4)
          : !1;
      };
      Va.prototype = {
        clone: function () {
          if (null != this.buffer) {
            this.type == Nd.CANVAS
              ? Ra.convertToCanvas(this)
              : Ra.convertToData(this);
            var a = new Va(
              this.buffer.clone(),
              this.offsetX,
              this.offsetY,
              this.width,
              this.height,
              null,
              this.type
            );
            a.version = this.version;
            return a;
          }
          return new Va(
            null,
            this.offsetX,
            this.offsetY,
            this.width,
            this.height,
            null,
            this.type
          );
        },
        colorTransform: function (a, b) {
          a = this.__clipRect(a);
          if (null != this.buffer && null != a)
            switch (this.type._hx_index) {
              case 0:
                Ra.colorTransform(this, a, b);
                break;
              case 1:
                Ra.convertToData(this);
                jc.colorTransform(this, a, b);
                break;
              case 2:
                a.offset(this.offsetX, this.offsetY),
                  this.buffer.__srcBitmapData.colorTransform(
                    a.__toFlashRectangle(),
                    md.__toFlashColorTransform(b)
                  );
            }
        },
        copyChannel: function (a, b, c, d, e) {
          b = this.__clipRect(b);
          if (
            null != this.buffer &&
            null != b &&
            !(
              (e == oi.ALPHA && !this.get_transparent()) ||
              0 >= b.width ||
              0 >= b.height
            )
          )
            switch (
              (b.x + b.width > a.width && (b.width = a.width - b.x),
              b.y + b.height > a.height && (b.height = a.height - b.y),
              this.type._hx_index)
            ) {
              case 0:
                Ra.copyChannel(this, a, b, c, d, e);
                break;
              case 1:
                Ra.convertToData(this);
                Ra.convertToData(a);
                jc.copyChannel(this, a, b, c, d, e);
                break;
              case 2:
                switch (d._hx_index) {
                  case 0:
                    var f = 1;
                    break;
                  case 1:
                    f = 2;
                    break;
                  case 2:
                    f = 4;
                    break;
                  case 3:
                    f = 8;
                }
                switch (e._hx_index) {
                  case 0:
                    var k = 1;
                    break;
                  case 1:
                    k = 2;
                    break;
                  case 2:
                    k = 4;
                    break;
                  case 3:
                    k = 8;
                }
                b.offset(a.offsetX, a.offsetY);
                c.offset(this.offsetX, this.offsetY);
                this.buffer.__srcBitmapData.copyChannel(
                  a.buffer.get_src(),
                  b.__toFlashRectangle(),
                  c.__toFlashPoint(),
                  f,
                  k
                );
            }
        },
        copyPixels: function (a, b, c, d, e, f) {
          null == f && (f = !1);
          if (
            null != this.buffer &&
            null != a &&
            !(
              0 >= b.width ||
              0 >= b.height ||
              0 >= this.width ||
              0 >= this.height
            )
          )
            switch (
              (b.x + b.width > a.width && (b.width = a.width - b.x),
              b.y + b.height > a.height && (b.height = a.height - b.y),
              0 > b.x && ((b.width += b.x), (b.x = 0)),
              0 > b.y && ((b.height += b.y), (b.y = 0)),
              c.x + b.width > this.width && (b.width = this.width - c.x),
              c.y + b.height > this.height && (b.height = this.height - c.y),
              0 > c.x && ((b.width += c.x), (b.x -= c.x), (c.x = 0)),
              0 > c.y && ((b.height += c.y), (b.y -= c.y), (c.y = 0)),
              a == this &&
                c.x < b.get_right() &&
                c.y < b.get_bottom() &&
                (a = this.clone()),
              d == a && (null == e || (0 == e.x && 0 == e.y)) && (e = d = null),
              this.type._hx_index)
            ) {
              case 0:
                null != d
                  ? (Ra.convertToData(this),
                    Ra.convertToData(a),
                    null != d && Ra.convertToData(d),
                    jc.copyPixels(this, a, b, c, d, e, f))
                  : (Ra.convertToCanvas(this),
                    Ra.convertToCanvas(a),
                    Ra.copyPixels(this, a, b, c, d, e, f));
                break;
              case 1:
                Ra.convertToData(this);
                Ra.convertToData(a);
                null != d && Ra.convertToData(d);
                jc.copyPixels(this, a, b, c, d, e, f);
                break;
              case 2:
                b.offset(a.offsetX, a.offsetY),
                  c.offset(this.offsetX, this.offsetY),
                  null != d && null != e && e.offset(d.offsetX, d.offsetY),
                  this.buffer.__srcBitmapData.copyPixels(
                    a.buffer.__srcBitmapData,
                    b.__toFlashRectangle(),
                    c.__toFlashPoint(),
                    null != d ? d.buffer.get_src() : null,
                    null != e ? e.__toFlashPoint() : null,
                    f
                  );
            }
        },
        fillRect: function (a, b, c) {
          a = this.__clipRect(a);
          if (null != this.buffer && null != a)
            switch (this.type._hx_index) {
              case 0:
                Ra.fillRect(this, a, b, c);
                break;
              case 1:
                Ra.convertToData(this);
                if (0 == this.buffer.data.length) break;
                jc.fillRect(this, a, b, c);
                break;
              case 2:
                a.offset(this.offsetX, this.offsetY);
                if (null == c)
                  b =
                    ((b & 255) << 24) |
                    (((b >>> 24) & 255) << 16) |
                    (((b >>> 16) & 255) << 8) |
                    ((b >>> 8) & 255);
                else
                  switch (c) {
                    case 1:
                      break;
                    case 2:
                      b =
                        ((b & 255) << 24) |
                        (((b >>> 8) & 255) << 16) |
                        (((b >>> 16) & 255) << 8) |
                        ((b >>> 24) & 255);
                      break;
                    default:
                      b =
                        ((b & 255) << 24) |
                        (((b >>> 24) & 255) << 16) |
                        (((b >>> 16) & 255) << 8) |
                        ((b >>> 8) & 255);
                  }
                this.buffer.__srcBitmapData.fillRect(a.__toFlashRectangle(), b);
            }
        },
        getPixel32: function (a, b, c) {
          if (
            null == this.buffer ||
            0 > a ||
            0 > b ||
            a >= this.width ||
            b >= this.height
          )
            return 0;
          switch (this.type._hx_index) {
            case 0:
              return Ra.getPixel32(this, a, b, c);
            case 1:
              return Ra.convertToData(this), jc.getPixel32(this, a, b, c);
            case 2:
              a = this.buffer.__srcBitmapData.getPixel32(
                a + this.offsetX,
                b + this.offsetY
              );
              if (null == c)
                return (
                  (((a >>> 16) & 255) << 24) |
                  (((a >>> 8) & 255) << 16) |
                  ((a & 255) << 8) |
                  ((a >>> 24) & 255)
                );
              switch (c) {
                case 1:
                  return a;
                case 2:
                  return (
                    ((a & 255) << 24) |
                    (((a >>> 8) & 255) << 16) |
                    (((a >>> 16) & 255) << 8) |
                    ((a >>> 24) & 255)
                  );
                default:
                  return (
                    (((a >>> 16) & 255) << 24) |
                    (((a >>> 8) & 255) << 16) |
                    ((a & 255) << 8) |
                    ((a >>> 24) & 255)
                  );
              }
            default:
              return 0;
          }
        },
        setPixel: function (a, b, c, d) {
          if (
            !(
              null == this.buffer ||
              0 > a ||
              0 > b ||
              a >= this.width ||
              b >= this.height
            )
          )
            switch (this.type._hx_index) {
              case 0:
                Ra.setPixel(this, a, b, c, d);
                break;
              case 1:
                Ra.convertToData(this);
                jc.setPixel(this, a, b, c, d);
                break;
              case 2:
                if (null == d)
                  c =
                    ((c & 255) << 24) |
                    (((c >>> 24) & 255) << 16) |
                    (((c >>> 16) & 255) << 8) |
                    ((c >>> 8) & 255);
                else
                  switch (d) {
                    case 1:
                      break;
                    case 2:
                      c =
                        ((c & 255) << 24) |
                        (((c >>> 8) & 255) << 16) |
                        (((c >>> 16) & 255) << 8) |
                        ((c >>> 24) & 255);
                      break;
                    default:
                      c =
                        ((c & 255) << 24) |
                        (((c >>> 24) & 255) << 16) |
                        (((c >>> 16) & 255) << 8) |
                        ((c >>> 8) & 255);
                  }
                this.buffer.__srcBitmapData.setPixel(
                  a + this.offsetX,
                  b + this.offsetX,
                  c
                );
            }
        },
        setPixel32: function (a, b, c, d) {
          if (
            !(
              null == this.buffer ||
              0 > a ||
              0 > b ||
              a >= this.width ||
              b >= this.height
            )
          )
            switch (this.type._hx_index) {
              case 0:
                Ra.setPixel32(this, a, b, c, d);
                break;
              case 1:
                Ra.convertToData(this);
                jc.setPixel32(this, a, b, c, d);
                break;
              case 2:
                if (null == d)
                  c =
                    ((c & 255) << 24) |
                    (((c >>> 24) & 255) << 16) |
                    (((c >>> 16) & 255) << 8) |
                    ((c >>> 8) & 255);
                else
                  switch (d) {
                    case 1:
                      break;
                    case 2:
                      c =
                        ((c & 255) << 24) |
                        (((c >>> 8) & 255) << 16) |
                        (((c >>> 16) & 255) << 8) |
                        ((c >>> 24) & 255);
                      break;
                    default:
                      c =
                        ((c & 255) << 24) |
                        (((c >>> 24) & 255) << 16) |
                        (((c >>> 16) & 255) << 8) |
                        ((c >>> 8) & 255);
                  }
                this.buffer.__srcBitmapData.setPixel32(
                  a + this.offsetX,
                  b + this.offsetY,
                  c
                );
            }
        },
        __clipRect: function (a) {
          return null == a ||
            (0 > a.x && ((a.width -= -a.x), (a.x = 0), 0 >= a.x + a.width)) ||
            (0 > a.y && ((a.height -= -a.y), (a.y = 0), 0 >= a.y + a.height)) ||
            (a.x + a.width >= this.width &&
              ((a.width -= a.x + a.width - this.width), 0 >= a.width)) ||
            (a.y + a.height >= this.height &&
              ((a.height -= a.y + a.height - this.height), 0 >= a.height))
            ? null
            : a;
        },
        __fromBase64: function (a, b, c) {
          var d = this,
            e = new window.Image();
          e.addEventListener(
            "load",
            function (a) {
              d.buffer = new zg(null, e.width, e.height);
              d.buffer.__srcImage = e;
              d.offsetX = 0;
              d.offsetY = 0;
              d.width = d.buffer.width;
              d.height = d.buffer.height;
              null != c && c(d);
            },
            !1
          );
          e.src = "data:" + b + ";base64," + a;
        },
        __fromBytes: function (a, b) {
          if (Va.__isPNG(a)) var c = "image/png";
          else if (Va.__isJPG(a)) c = "image/jpeg";
          else if (Va.__isGIF(a)) c = "image/gif";
          else return !1;
          this.__fromBase64(gg.encode(a), c, b);
          return !0;
        },
        __fromFile: function (a, b, c) {
          var d = this,
            e = new window.Image();
          Ia.__isSameOrigin(a) || (e.crossOrigin = "Anonymous");
          e.onload = function (a) {
            d.buffer = new zg(null, e.width, e.height);
            d.buffer.__srcImage = e;
            d.width = e.width;
            d.height = e.height;
            null != b && b(d);
          };
          e.onerror = function (a) {
            null != c && c();
          };
          e.src = a;
          return !0;
        },
        __fromImageBuffer: function (a) {
          this.buffer = a;
          null != a &&
            (-1 == this.width && (this.width = a.width),
            -1 == this.height && (this.height = a.height));
        },
        get_data: function () {
          null == this.buffer.data &&
            0 < this.buffer.width &&
            0 < this.buffer.height &&
            Ra.convertToData(this);
          return this.buffer.data;
        },
        get_format: function () {
          return this.buffer.format;
        },
        set_format: function (a) {
          this.buffer.format != a &&
            1 == this.type._hx_index &&
            jc.setFormat(this, a);
          return (this.buffer.format = a);
        },
        get_premultiplied: function () {
          return this.buffer.premultiplied;
        },
        set_premultiplied: function (a) {
          if (a && !this.buffer.premultiplied)
            switch (this.type._hx_index) {
              case 0:
              case 1:
                Ra.convertToData(this), jc.multiplyAlpha(this);
            }
          else
            !a &&
              this.buffer.premultiplied &&
              1 == this.type._hx_index &&
              (Ra.convertToData(this), jc.unmultiplyAlpha(this));
          return a;
        },
        get_rect: function () {
          return new Fe(0, 0, this.width, this.height);
        },
        get_src: function () {
          null != this.buffer.__srcCanvas ||
            (null == this.buffer.data && this.type != Nd.DATA) ||
            Ra.convertToCanvas(this);
          return this.buffer.get_src();
        },
        get_transparent: function () {
          return null == this.buffer ? !1 : this.buffer.transparent;
        },
        set_transparent: function (a) {
          return null == this.buffer ? !1 : (this.buffer.transparent = a);
        },
        __class__: Va,
        __properties__: {
          set_transparent: "set_transparent",
          get_transparent: "get_transparent",
          get_src: "get_src",
          get_rect: "get_rect",
          set_premultiplied: "set_premultiplied",
          get_premultiplied: "get_premultiplied",
          set_format: "set_format",
          get_format: "get_format",
          get_data: "get_data",
        },
      };
      var zg = function (a, b, c, d, e) {
        null == d && (d = 32);
        null == c && (c = 0);
        null == b && (b = 0);
        this.data = a;
        this.width = b;
        this.height = c;
        this.bitsPerPixel = d;
        this.format = null == e ? 0 : e;
        this.premultiplied = !1;
        this.transparent = !0;
      };
      h["lime.graphics.ImageBuffer"] = zg;
      zg.__name__ = "lime.graphics.ImageBuffer";
      zg.prototype = {
        clone: function () {
          var a = new zg(this.data, this.width, this.height, this.bitsPerPixel);
          if (null != this.data) {
            var b = this.data.byteLength,
              c = null,
              d = null,
              e = null,
              f = null,
              k = null;
            b =
              null != b
                ? new Uint8Array(b)
                : null != c
                ? new Uint8Array(c)
                : null != d
                ? new Uint8Array(d.__array)
                : null != e
                ? new Uint8Array(e)
                : null != f
                ? null == k
                  ? new Uint8Array(f, 0)
                  : new Uint8Array(f, 0, k)
                : null;
            a.data = b;
            d = c = b = null;
            e = this.data;
            k = f = null;
            b =
              null != b
                ? new Uint8Array(b)
                : null != c
                ? new Uint8Array(c)
                : null != d
                ? new Uint8Array(d.__array)
                : null != e
                ? new Uint8Array(e)
                : null != f
                ? null == k
                  ? new Uint8Array(f, 0)
                  : new Uint8Array(f, 0, k)
                : null;
            a.data.set(b);
          } else
            null != this.__srcImageData
              ? ((a.__srcCanvas = window.document.createElement("canvas")),
                (a.__srcContext = a.__srcCanvas.getContext("2d")),
                (a.__srcCanvas.width = this.__srcImageData.width),
                (a.__srcCanvas.height = this.__srcImageData.height),
                (a.__srcImageData = a.__srcContext.createImageData(
                  this.__srcImageData.width,
                  this.__srcImageData.height
                )),
                (b = new Uint8ClampedArray(this.__srcImageData.data)),
                a.__srcImageData.data.set(b))
              : null != this.__srcCanvas
              ? ((a.__srcCanvas = window.document.createElement("canvas")),
                (a.__srcContext = a.__srcCanvas.getContext("2d")),
                (a.__srcCanvas.width = this.__srcCanvas.width),
                (a.__srcCanvas.height = this.__srcCanvas.height),
                a.__srcContext.drawImage(this.__srcCanvas, 0, 0))
              : (a.__srcImage = this.__srcImage);
          a.bitsPerPixel = this.bitsPerPixel;
          a.format = this.format;
          a.premultiplied = this.premultiplied;
          a.transparent = this.transparent;
          return a;
        },
        get_src: function () {
          return null != this.__srcImage ? this.__srcImage : this.__srcCanvas;
        },
        set_src: function (a) {
          a instanceof Image
            ? (this.__srcImage = a)
            : a instanceof HTMLCanvasElement &&
              ((this.__srcCanvas = a),
              (this.__srcContext = this.__srcCanvas.getContext("2d")));
          return a;
        },
        get_stride: function () {
          return this.width * ((this.bitsPerPixel / 8) | 0);
        },
        __class__: zg,
        __properties__: {
          get_stride: "get_stride",
          set_src: "set_src",
          get_src: "get_src",
        },
      };
      var oi = (w["lime.graphics.ImageChannel"] = {
        __ename__: "lime.graphics.ImageChannel",
        __constructs__: null,
        RED: {
          _hx_name: "RED",
          _hx_index: 0,
          __enum__: "lime.graphics.ImageChannel",
          toString: p,
        },
        GREEN: {
          _hx_name: "GREEN",
          _hx_index: 1,
          __enum__: "lime.graphics.ImageChannel",
          toString: p,
        },
        BLUE: {
          _hx_name: "BLUE",
          _hx_index: 2,
          __enum__: "lime.graphics.ImageChannel",
          toString: p,
        },
        ALPHA: {
          _hx_name: "ALPHA",
          _hx_index: 3,
          __enum__: "lime.graphics.ImageChannel",
          toString: p,
        },
      });
      oi.__constructs__ = [oi.RED, oi.GREEN, oi.BLUE, oi.ALPHA];
      var Nd = (w["lime.graphics.ImageType"] = {
        __ename__: "lime.graphics.ImageType",
        __constructs__: null,
        CANVAS: {
          _hx_name: "CANVAS",
          _hx_index: 0,
          __enum__: "lime.graphics.ImageType",
          toString: p,
        },
        DATA: {
          _hx_name: "DATA",
          _hx_index: 1,
          __enum__: "lime.graphics.ImageType",
          toString: p,
        },
        FLASH: {
          _hx_name: "FLASH",
          _hx_index: 2,
          __enum__: "lime.graphics.ImageType",
          toString: p,
        },
        CUSTOM: {
          _hx_name: "CUSTOM",
          _hx_index: 3,
          __enum__: "lime.graphics.ImageType",
          toString: p,
        },
      });
      Nd.__constructs__ = [Nd.CANVAS, Nd.DATA, Nd.FLASH, Nd.CUSTOM];
      var Mn = function () {};
      h["lime.graphics.RenderContext"] = Mn;
      Mn.__name__ = "lime.graphics.RenderContext";
      Mn.prototype = { __class__: Mn };
      var ap = {
          uniform2fv: function (a, b, c, d, e) {
            null != d ? a.uniform2fv(b, c, d, e) : a.uniform2fv(b, c);
          },
        },
        Sc = {
          bufferData: function (a, b, c, d) {
            a.bufferData(b, c, d);
          },
          texImage2D: function (a, b, c, d, e, f, k, g, l, h) {
            null != g
              ? a.texImage2D(b, c, d, e, f, k, g, l, h)
              : a.texImage2D(b, c, d, e, f, k);
          },
          uniformMatrix2fv: function (a, b, c, d) {
            a.uniformMatrix2fv(b, c, d);
          },
          uniformMatrix3fv: function (a, b, c, d) {
            a.uniformMatrix3fv(b, c, d);
          },
          uniformMatrix4fv: function (a, b, c, d) {
            a.uniformMatrix4fv(b, c, d);
          },
          fromWebGL2RenderContext: function (a) {
            return a;
          },
        },
        Eo = function (a) {};
      h["lime.graphics.cairo.Cairo"] = Eo;
      Eo.__name__ = "lime.graphics.cairo.Cairo";
      Eo.prototype = {
        clip: function () {},
        identityMatrix: function () {},
        newPath: function () {},
        paint: function () {},
        rectangle: function (a, b, c, d) {},
        restore: function () {},
        save: function () {},
        setOperator: function (a) {
          return a;
        },
        setSourceRGB: function (a, b, c) {},
        set_matrix: function (a) {
          return a;
        },
        __class__: Eo,
        __properties__: { set_matrix: "set_matrix" },
      };
      var Yo = { flush: function (a) {} },
        Ag = function () {};
      h["lime.graphics.opengl.GL"] = Ag;
      Ag.__name__ = "lime.graphics.opengl.GL";
      var Fo = function () {
        this.STACK_UNDERFLOW = 1284;
        this.STACK_OVERFLOW = 1283;
        this.CONTEXT_FLAG_DEBUG_BIT = 2;
        this.DEBUG_OUTPUT = 37600;
        this.DEBUG_SEVERITY_LOW = 37192;
        this.DEBUG_SEVERITY_MEDIUM = 37191;
        this.DEBUG_SEVERITY_HIGH = 37190;
        this.DEBUG_LOGGED_MESSAGES = 37189;
        this.MAX_DEBUG_LOGGED_MESSAGES = 37188;
        this.MAX_DEBUG_MESSAGE_LENGTH = 37187;
        this.MAX_LABEL_LENGTH = 33512;
        this.SAMPLER = 33510;
        this.QUERY = 33507;
        this.PROGRAM = 33506;
        this.SHADER = 33505;
        this.BUFFER = 33504;
        this.DEBUG_GROUP_STACK_DEPTH = 33389;
        this.MAX_DEBUG_GROUP_STACK_DEPTH = 33388;
        this.DEBUG_SEVERITY_NOTIFICATION = 33387;
        this.DEBUG_TYPE_POP_GROUP = 33386;
        this.DEBUG_TYPE_PUSH_GROUP = 33385;
        this.DEBUG_TYPE_MARKER = 33384;
        this.DEBUG_TYPE_OTHER = 33361;
        this.DEBUG_TYPE_PERFORMANCE = 33360;
        this.DEBUG_TYPE_PORTABILITY = 33359;
        this.DEBUG_TYPE_UNDEFINED_BEHAVIOR = 33358;
        this.DEBUG_TYPE_DEPRECATED_BEHAVIOR = 33357;
        this.DEBUG_TYPE_ERROR = 33356;
        this.DEBUG_SOURCE_OTHER = 33355;
        this.DEBUG_SOURCE_APPLICATION = 33354;
        this.DEBUG_SOURCE_THIRD_PARTY = 33353;
        this.DEBUG_SOURCE_SHADER_COMPILER = 33352;
        this.DEBUG_SOURCE_WINDOW_SYSTEM = 33351;
        this.DEBUG_SOURCE_API = 33350;
        this.DEBUG_CALLBACK_USER_PARAM = 33349;
        this.DEBUG_CALLBACK_FUNCTION = 33348;
        this.DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 33347;
        this.DEBUG_OUTPUT_SYNCHRONOUS = 33346;
      };
      h["lime.graphics.opengl.ext.KHR_debug"] = Fo;
      Fo.__name__ = "lime.graphics.opengl.ext.KHR_debug";
      Fo.prototype = { __class__: Fo };
      var md = {
          getAlphaTable: function (a) {
            if (null == md.__alphaTable) {
              var b = new Uint8Array(256);
              md.__alphaTable = b;
            }
            md.__alphaTable[0] = 0;
            for (var c = 1; 256 > c; ) {
              var d = c++;
              b = Math.floor(d * a[18] + 255 * a[19]);
              255 < b && (b = 255);
              0 > b && (b = 0);
              md.__alphaTable[d] = b;
            }
            return md.__alphaTable;
          },
          getBlueTable: function (a) {
            if (null == md.__blueTable) {
              var b = new Uint8Array(256);
              md.__blueTable = b;
            }
            for (var c = 0; 256 > c; ) {
              var d = c++;
              b = Math.floor(d * a[12] + 255 * a[14]);
              255 < b && (b = 255);
              0 > b && (b = 0);
              md.__blueTable[d] = b;
            }
            return md.__blueTable;
          },
          getGreenTable: function (a) {
            if (null == md.__greenTable) {
              var b = new Uint8Array(256);
              md.__greenTable = b;
            }
            for (var c = 0; 256 > c; ) {
              var d = c++;
              b = Math.floor(d * a[6] + 255 * a[9]);
              255 < b && (b = 255);
              0 > b && (b = 0);
              md.__greenTable[d] = b;
            }
            return md.__greenTable;
          },
          getRedTable: function (a) {
            if (null == md.__redTable) {
              var b = new Uint8Array(256);
              md.__redTable = b;
            }
            for (var c = 0; 256 > c; ) {
              var d = c++;
              b = Math.floor(d * a[0] + 255 * a[4]);
              255 < b && (b = 255);
              0 > b && (b = 0);
              md.__redTable[d] = b;
            }
            return md.__redTable;
          },
          __toFlashColorTransform: function (a) {
            return null;
          },
        },
        nb = {
          _new: function (a) {
            if (null == a || 16 != a.length)
              (a = nb.__identity), (a = null != a ? new Float32Array(a) : null);
            return a;
          },
          append: function (a, b) {
            var c = a[0],
              d = a[4],
              e = a[8],
              f = a[12],
              k = a[1],
              g = a[5],
              l = a[9],
              h = a[13],
              p = a[2],
              m = a[6],
              n = a[10],
              q = a[14],
              z = a[3],
              t = a[7],
              w = a[11],
              x = a[15],
              D = nb.get(b, 0),
              y = nb.get(b, 4),
              A = nb.get(b, 8),
              C = nb.get(b, 12),
              E = nb.get(b, 1),
              F = nb.get(b, 5),
              B = nb.get(b, 9),
              G = nb.get(b, 13),
              v = nb.get(b, 2),
              K = nb.get(b, 6),
              I = nb.get(b, 10),
              U = nb.get(b, 14),
              Z = nb.get(b, 3),
              O = nb.get(b, 7),
              M = nb.get(b, 11);
            b = nb.get(b, 15);
            a[0] = c * D + k * y + p * A + z * C;
            a[1] = c * E + k * F + p * B + z * G;
            a[2] = c * v + k * K + p * I + z * U;
            a[3] = c * Z + k * O + p * M + z * b;
            a[4] = d * D + g * y + m * A + t * C;
            a[5] = d * E + g * F + m * B + t * G;
            a[6] = d * v + g * K + m * I + t * U;
            a[7] = d * Z + g * O + m * M + t * b;
            a[8] = e * D + l * y + n * A + w * C;
            a[9] = e * E + l * F + n * B + w * G;
            a[10] = e * v + l * K + n * I + w * U;
            a[11] = e * Z + l * O + n * M + w * b;
            a[12] = f * D + h * y + q * A + x * C;
            a[13] = f * E + h * F + q * B + x * G;
            a[14] = f * v + h * K + q * I + x * U;
            a[15] = f * Z + h * O + q * M + x * b;
          },
          createOrtho: function (a, b, c, d, e, f, k) {
            var g = 1 / (c - b),
              l = 1 / (e - d),
              h = 1 / (k - f);
            a[0] = 2 * g;
            a[1] = 0;
            a[2] = 0;
            a[3] = 0;
            a[4] = 0;
            a[5] = 2 * l;
            a[6] = 0;
            a[7] = 0;
            a[8] = 0;
            a[9] = 0;
            a[10] = -2 * h;
            a[11] = 0;
            a[12] = -(b + c) * g;
            a[13] = -(d + e) * l;
            a[14] = -(f + k) * h;
            a[15] = 1;
          },
          identity: function (a) {
            a[0] = 1;
            a[1] = 0;
            a[2] = 0;
            a[3] = 0;
            a[4] = 0;
            a[5] = 1;
            a[6] = 0;
            a[7] = 0;
            a[8] = 0;
            a[9] = 0;
            a[10] = 1;
            a[11] = 0;
            a[12] = 0;
            a[13] = 0;
            a[14] = 0;
            a[15] = 1;
          },
          get: function (a, b) {
            return a[b];
          },
          set: function (a, b, c) {
            return (a[b] = c);
          },
        },
        Y = {},
        Fe = function (a, b, c, d) {
          null == d && (d = 0);
          null == c && (c = 0);
          null == b && (b = 0);
          null == a && (a = 0);
          this.x = a;
          this.y = b;
          this.width = c;
          this.height = d;
        };
      h["lime.math.Rectangle"] = Fe;
      Fe.__name__ = "lime.math.Rectangle";
      Fe.prototype = {
        intersection: function (a, b) {
          null == b && (b = new Fe());
          var c = this.x < a.x ? a.x : this.x,
            d =
              this.get_right() > a.get_right()
                ? a.get_right()
                : this.get_right();
          if (d <= c) return b.setEmpty(), b;
          var e = this.y < a.y ? a.y : this.y;
          a =
            this.get_bottom() > a.get_bottom()
              ? a.get_bottom()
              : this.get_bottom();
          if (a <= e) return b.setEmpty(), b;
          b.x = c;
          b.y = e;
          b.width = d - c;
          b.height = a - e;
          return b;
        },
        offset: function (a, b) {
          this.x += a;
          this.y += b;
        },
        setEmpty: function () {
          this.x = this.y = this.width = this.height = 0;
        },
        setTo: function (a, b, c, d) {
          this.x = a;
          this.y = b;
          this.width = c;
          this.height = d;
        },
        __toFlashRectangle: function () {
          return null;
        },
        get_bottom: function () {
          return this.y + this.height;
        },
        get_right: function () {
          return this.x + this.width;
        },
        __class__: Fe,
        __properties__: { get_right: "get_right", get_bottom: "get_bottom" },
      };
      var Kn = function (a, b, c, d) {
        null == d && (d = 0);
        null == c && (c = 0);
        null == b && (b = 0);
        null == a && (a = 0);
        this.w = d;
        this.x = a;
        this.y = b;
        this.z = c;
      };
      h["lime.math.Vector4"] = Kn;
      Kn.__name__ = "lime.math.Vector4";
      Kn.prototype = { __class__: Kn };
      var Mc = function () {};
      h["lime.media.AudioBuffer"] = Mc;
      Mc.__name__ = "lime.media.AudioBuffer";
      Mc.fromBytes = function (a) {
        if (null == a) return null;
        var b = new Mc();
        b.set_src(
          new Howl({
            src: ["data:" + Mc.__getCodec(a) + ";base64," + gg.encode(a)],
            html5: !0,
            preload: !1,
          })
        );
        return b;
      };
      Mc.fromFile = function (a) {
        if (null == a) return null;
        var b = new Mc();
        b.__srcHowl = new Howl({ src: [a], preload: !1 });
        return b;
      };
      Mc.fromFiles = function (a) {
        var b = new Mc();
        b.__srcHowl = new Howl({ src: a, preload: !1 });
        return b;
      };
      Mc.loadFromFile = function (a) {
        var b = new Gd(),
          c = Mc.fromFile(a);
        null != c
          ? null != c &&
            (c.__srcHowl.on("load", function () {
              b.complete(c);
            }),
            c.__srcHowl.on("loaderror", function (a, c) {
              b.error(c);
            }),
            c.__srcHowl.load())
          : b.error(null);
        return b.future;
      };
      Mc.loadFromFiles = function (a) {
        var b = new Gd(),
          c = Mc.fromFiles(a);
        null != c
          ? (c.__srcHowl.on("load", function () {
              b.complete(c);
            }),
            c.__srcHowl.on("loaderror", function () {
              b.error(null);
            }),
            c.__srcHowl.load())
          : b.error(null);
        return b.future;
      };
      Mc.__getCodec = function (a) {
        switch (a.getString(0, 4)) {
          case "OggS":
            return "audio/ogg";
          case "RIFF":
            if ("WAVE" == a.getString(8, 4)) return "audio/wav";
            var b = a.b[1],
              c = a.b[2];
            switch (a.b[0]) {
              case 73:
                if (68 == b && 51 == c) return "audio/mp3";
                break;
              case 255:
                switch (b) {
                  case 243:
                  case 250:
                  case 251:
                    return "audio/mp3";
                }
            }
            break;
          case "fLaC":
            return "audio/flac";
          default:
            switch (((b = a.b[1]), (c = a.b[2]), a.b[0])) {
              case 73:
                if (68 == b && 51 == c) return "audio/mp3";
                break;
              case 255:
                switch (b) {
                  case 243:
                  case 250:
                  case 251:
                    return "audio/mp3";
                }
            }
        }
        Ka.error("Unsupported sound format", {
          fileName: "lime/media/AudioBuffer.hx",
          lineNumber: 362,
          className: "lime.media.AudioBuffer",
          methodName: "__getCodec",
        });
        return null;
      };
      Mc.prototype = {
        get_src: function () {
          return this.__srcHowl;
        },
        set_src: function (a) {
          return (this.__srcHowl = a);
        },
        __class__: Mc,
        __properties__: { set_src: "set_src", get_src: "get_src" },
      };
      var $n = function (a) {
        if ("custom" != a) {
          if (null == a || "web" == a)
            try {
              (window.AudioContext =
                window.AudioContext || window.webkitAudioContext),
                (this.web = new window.AudioContext()),
                (this.type = "web");
            } catch (b) {}
          null == this.web &&
            "web" != a &&
            ((this.html5 = new Zn()), (this.type = "html5"));
        } else this.type = "custom";
      };
      h["lime.media.AudioContext"] = $n;
      $n.__name__ = "lime.media.AudioContext";
      $n.prototype = { __class__: $n };
      var lg = function () {};
      h["lime.media.AudioManager"] = lg;
      lg.__name__ = "lime.media.AudioManager";
      lg.init = function (a) {
        if (null == lg.context) {
          if (
            null == a &&
            ((lg.context = new $n()), (a = lg.context), "openal" == a.type)
          ) {
            var b = a.openal,
              c = b.openDevice();
            c = b.createContext(c);
            b.makeContextCurrent(c);
            b.processContext(c);
          }
          lg.context = a;
        }
      };
      var ln = function (a, b, c, d) {
        null == d && (d = 0);
        null == b && (b = 0);
        this.onComplete = new Gc();
        this.buffer = a;
        this.offset = b;
        this.__backend = new Ln(this);
        null != c && 0 != c && this.set_length(c);
        this.set_loops(d);
        null != a && this.init();
      };
      h["lime.media.AudioSource"] = ln;
      ln.__name__ = "lime.media.AudioSource";
      ln.prototype = {
        dispose: function () {
          this.__backend.dispose();
        },
        init: function () {
          this.__backend.init();
        },
        play: function () {
          this.__backend.play();
        },
        stop: function () {
          this.__backend.stop();
        },
        get_currentTime: function () {
          return this.__backend.getCurrentTime();
        },
        set_currentTime: function (a) {
          return this.__backend.setCurrentTime(a);
        },
        get_gain: function () {
          return this.__backend.getGain();
        },
        set_gain: function (a) {
          return this.__backend.setGain(a);
        },
        set_length: function (a) {
          return this.__backend.setLength(a);
        },
        set_loops: function (a) {
          return this.__backend.setLoops(a);
        },
        set_pitch: function (a) {
          return this.__backend.setPitch(a);
        },
        get_position: function () {
          return this.__backend.getPosition();
        },
        set_position: function (a) {
          return this.__backend.setPosition(a);
        },
        __class__: ln,
        __properties__: {
          set_pitch: "set_pitch",
          set_loops: "set_loops",
          set_length: "set_length",
          set_position: "set_position",
          get_position: "get_position",
          set_gain: "set_gain",
          get_gain: "get_gain",
          set_currentTime: "set_currentTime",
          get_currentTime: "get_currentTime",
        },
      };
      var Zn = function () {};
      h["lime.media.HTML5AudioContext"] = Zn;
      Zn.__name__ = "lime.media.HTML5AudioContext";
      Zn.prototype = { __class__: Zn };
      var Go = function () {};
      h["lime.media.OpenALAudioContext"] = Go;
      Go.__name__ = "lime.media.OpenALAudioContext";
      Go.prototype = {
        createContext: function (a, b) {
          return eh.createContext(a, b);
        },
        makeContextCurrent: function (a) {
          return eh.makeContextCurrent(a);
        },
        openDevice: function (a) {
          return eh.openDevice(a);
        },
        processContext: function (a) {
          eh.processContext(a);
        },
        __class__: Go,
      };
      var eh = function () {};
      h["lime.media.openal.ALC"] = eh;
      eh.__name__ = "lime.media.openal.ALC";
      eh.createContext = function (a, b) {
        return null;
      };
      eh.makeContextCurrent = function (a) {
        return !1;
      };
      eh.openDevice = function (a) {
        return null;
      };
      eh.processContext = function (a) {};
      var Ll = function () {};
      h["lime.net._IHTTPRequest"] = Ll;
      Ll.__name__ = "lime.net._IHTTPRequest";
      Ll.__isInterface__ = !0;
      Ll.prototype = { __class__: Ll };
      var Rf = function (a) {
        this.uri = a;
        this.contentType = "application/x-www-form-urlencoded";
        this.followRedirects = !0;
        this.enableResponseHeaders = !1;
        this.formData = new Q();
        this.headers = [];
        this.method = "GET";
        this.timeout = 3e4;
        this.withCredentials = !1;
        this.manageCookies = !0;
        this.__backend = new Ia();
        this.__backend.init(this);
      };
      h["lime.net._HTTPRequest.AbstractHTTPRequest"] = Rf;
      Rf.__name__ = "lime.net._HTTPRequest.AbstractHTTPRequest";
      Rf.__interfaces__ = [Ll];
      Rf.prototype = { __class__: Rf };
      var fh = function (a) {
        Rf.call(this, a);
      };
      h["lime.net._HTTPRequest_Bytes"] = fh;
      fh.__name__ = "lime.net._HTTPRequest_Bytes";
      fh.__super__ = Rf;
      fh.prototype = q(Rf.prototype, {
        fromBytes: function (a) {
          return a;
        },
        load: function (a) {
          var b = this;
          null != a && (this.uri = a);
          var c = new Gd();
          a = this.__backend.loadData(this.uri);
          a.onProgress(n(c, c.progress));
          a.onError(function (a) {
            b.responseData = a.responseData;
            c.error(a.error);
          });
          a.onComplete(function (a) {
            b.responseData = b.fromBytes(a);
            c.complete(b.responseData);
          });
          return c.future;
        },
        __class__: fh,
      });
      var si = function (a) {
        Rf.call(this, a);
      };
      h["lime.net._HTTPRequest_String"] = si;
      si.__name__ = "lime.net._HTTPRequest_String";
      si.__super__ = Rf;
      si.prototype = q(Rf.prototype, {
        load: function (a) {
          var b = this;
          null != a && (this.uri = a);
          var c = new Gd();
          a = this.__backend.loadText(this.uri);
          a.onProgress(n(c, c.progress));
          a.onError(function (a) {
            b.responseData = a.responseData;
            c.error(a.error);
          });
          a.onComplete(function (a) {
            b.responseData = a;
            c.complete(b.responseData);
          });
          return c.future;
        },
        __class__: si,
      });
      var ni = function (a, b) {
        this.error = a;
        this.responseData = b;
      };
      h["lime.net._HTTPRequestErrorResponse"] = ni;
      ni.__name__ = "lime.net._HTTPRequestErrorResponse";
      ni.prototype = { __class__: ni };
      var Gl = function (a, b) {
        null == b && (b = "");
        this.name = a;
        this.value = b;
      };
      h["lime.net.HTTPRequestHeader"] = Gl;
      Gl.__name__ = "lime.net.HTTPRequestHeader";
      Gl.prototype = { __class__: Gl };
      var Ml = function (a) {
        Rf.call(this, a);
      };
      h["lime.net._HTTPRequest_lime_utils_Bytes"] = Ml;
      Ml.__name__ = "lime.net._HTTPRequest_lime_utils_Bytes";
      Ml.__super__ = fh;
      Ml.prototype = q(fh.prototype, {
        fromBytes: function (a) {
          return zh.fromBytes(a);
        },
        __class__: Ml,
      });
      var Nl = function (a) {
        Rf.call(this, a);
      };
      h["lime.net._HTTPRequest_openfl_utils_ByteArray"] = Nl;
      Nl.__name__ = "lime.net._HTTPRequest_openfl_utils_ByteArray";
      Nl.__super__ = fh;
      Nl.prototype = q(fh.prototype, {
        fromBytes: function (a) {
          return dg.fromBytes(a);
        },
        __class__: Nl,
      });
      var mc = function () {};
      h["lime.system.Clipboard"] = mc;
      mc.__name__ = "lime.system.Clipboard";
      mc.__properties__ = { set_text: "set_text", get_text: "get_text" };
      mc.__update = function () {
        var a = mc._text;
        mc._text = null;
        mc.__updated = !0;
        mc._text != a && mc.onUpdate.dispatch();
      };
      mc.get_text = function () {
        mc.__update();
        return mc._text;
      };
      mc.set_text = function (a) {
        var b = mc._text;
        mc._text = a;
        var c = B.current.__window;
        null != c && c.__backend.setClipboard(a);
        mc._text != b && mc.onUpdate.dispatch();
        return a;
      };
      var ml = (w["lime.system.Endian"] = {
        __ename__: "lime.system.Endian",
        __constructs__: null,
        LITTLE_ENDIAN: {
          _hx_name: "LITTLE_ENDIAN",
          _hx_index: 0,
          __enum__: "lime.system.Endian",
          toString: p,
        },
        BIG_ENDIAN: {
          _hx_name: "BIG_ENDIAN",
          _hx_index: 1,
          __enum__: "lime.system.Endian",
          toString: p,
        },
      });
      ml.__constructs__ = [ml.LITTLE_ENDIAN, ml.BIG_ENDIAN];
      var xe = function (a, b) {
        this.onUpdate = new On();
        this.type = a;
        this.id = b;
      };
      h["lime.system.Sensor"] = xe;
      xe.__name__ = "lime.system.Sensor";
      xe.getSensors = function (a) {
        if (null == a) return xe.sensors.slice();
        for (var b = [], c = 0, d = xe.sensors; c < d.length; ) {
          var e = d[c];
          ++c;
          e.type == a && b.push(e);
        }
        return b;
      };
      xe.registerSensor = function (a, b) {
        a = new xe(a, b);
        xe.sensors.push(a);
        return (xe.sensorByID.h[b] = a);
      };
      xe.prototype = { __class__: xe };
      var po = (w["lime.system.SensorType"] = {
        __ename__: "lime.system.SensorType",
        __constructs__: null,
        ACCELEROMETER: {
          _hx_name: "ACCELEROMETER",
          _hx_index: 0,
          __enum__: "lime.system.SensorType",
          toString: p,
        },
      });
      po.__constructs__ = [po.ACCELEROMETER];
      var Pc = function () {};
      h["lime.system.System"] = Pc;
      Pc.__name__ = "lime.system.System";
      Pc.__properties__ = { get_endianness: "get_endianness" };
      Pc.embed = v.lime.embed = function (a, b, c, d, e) {
        if (
          null != Pc.__applicationEntryPoint &&
          Object.prototype.hasOwnProperty.call(Pc.__applicationEntryPoint.h, a)
        ) {
          var f =
            "string" == typeof b
              ? window.document.getElementById(b)
              : null == b
              ? window.document.createElement("div")
              : b;
          null == f
            ? window.console.log(
                "[lime.embed] ERROR: Cannot find target element: " + M.string(b)
              )
            : (null == c && (c = 0),
              null == d && (d = 0),
              null == e && (e = {}),
              Object.prototype.hasOwnProperty.call(e, "background") &&
                "string" == typeof e.background &&
                ((b = K.replace(M.string(e.background), "#", "")),
                -1 < b.indexOf("0x")
                  ? (e.background = M.parseInt(b))
                  : (e.background = M.parseInt("0x" + b))),
              (e.element = f),
              (e.width = c),
              (e.height = d),
              Pc.__applicationEntryPoint.h[a](e));
        }
      };
      Pc.exit = function (a) {
        var b = B.current;
        if (null != b && (b.onExit.dispatch(a), b.onExit.canceled)) return;
        null != b && null != b.__window && b.__window.close();
      };
      Pc.getTimer = function () {
        return window.performance.now() | 0;
      };
      Pc.openURL = function (a, b) {
        null == b && (b = "_blank");
        null != a && window.open(a, b);
      };
      Pc.__registerEntryPoint = function (a, b) {
        null == Pc.__applicationEntryPoint &&
          (Pc.__applicationEntryPoint = new Q());
        Pc.__applicationEntryPoint.h[a] = b;
      };
      Pc.get_endianness = function () {
        if (null == Pc.__endianness) {
          var a = new ArrayBuffer(2),
            b = null,
            c = null,
            d = null,
            e = null,
            f = null,
            k = (b =
              null != b
                ? new Uint8Array(b)
                : null != c
                ? new Uint8Array(c)
                : null != d
                ? new Uint8Array(d.__array)
                : null != e
                ? new Uint8Array(e)
                : null != a
                ? null == f
                  ? new Uint8Array(a, 0)
                  : new Uint8Array(a, 0, f)
                : null);
          f = e = d = c = b = null;
          b =
            null != b
              ? new Uint16Array(b)
              : null != c
              ? new Uint16Array(c)
              : null != d
              ? new Uint16Array(d.__array)
              : null != e
              ? new Uint16Array(e)
              : null != a
              ? null == f
                ? new Uint16Array(a, 0)
                : new Uint16Array(a, 0, f)
              : null;
          k[0] = 170;
          k[1] = 187;
          Pc.__endianness = 43707 == b[0] ? ml.BIG_ENDIAN : ml.LITTLE_ENDIAN;
        }
        return Pc.__endianness;
      };
      var Nn = function (a, b) {
        null == b && (b = 1);
        null == a && (a = 0);
        this.onRun = new qi();
        this.onError = new qi();
        this.onComplete = new qi();
        this.doWork = new qi();
        this.minThreads = a;
        this.maxThreads = b;
        this.currentThreads = 0;
      };
      h["lime.system.ThreadPool"] = Nn;
      Nn.__name__ = "lime.system.ThreadPool";
      Nn.prototype = {
        queue: function (a) {
          this.runWork(a);
        },
        sendComplete: function (a) {
          this.onComplete.dispatch(a);
        },
        sendError: function (a) {
          this.onError.dispatch(a);
        },
        runWork: function (a) {
          this.onRun.dispatch(a);
          this.doWork.dispatch(a);
        },
        __class__: Nn,
      };
      var ao = function () {
        this.onSave = new Bj();
        this.onCancel = new Gc();
      };
      h["lime.ui.FileDialog"] = ao;
      ao.__name__ = "lime.ui.FileDialog";
      ao.prototype = {
        save: function (a, b, c, d, e) {
          null == e && (e = "application/octet-stream");
          if (null == a) return this.onCancel.dispatch(), !1;
          b = "";
          Va.__isPNG(a)
            ? ((e = "image/png"), (b = ".png"))
            : Va.__isJPG(a)
            ? ((e = "image/jpeg"), (b = ".jpg"))
            : Va.__isGIF(a)
            ? ((e = "image/gif"), (b = ".gif"))
            : Va.__isWebP(a) && ((e = "image/webp"), (b = ".webp"));
          c = null != c ? Hd.withoutDirectory(c) : "download" + b;
          b = a.b.bufferValue;
          b = b.slice(0, a.length);
          window.saveAs(new Blob([b], { type: e }), c, !0);
          this.onSave.dispatch(c);
          return !0;
        },
        __class__: ao,
      };
      var Bc = function (a) {
        this.onDisconnect = new Gc();
        this.onButtonUp = new Jl();
        this.onButtonDown = new Jl();
        this.onAxisMove = new Wn();
        this.id = a;
        this.connected = !0;
      };
      h["lime.ui.Gamepad"] = Bc;
      Bc.__name__ = "lime.ui.Gamepad";
      Bc.__connect = function (a) {
        if (!Bc.devices.h.hasOwnProperty(a)) {
          var b = new Bc(a);
          Bc.devices.h[a] = b;
          Bc.onConnect.dispatch(b);
        }
      };
      Bc.__disconnect = function (a) {
        var b = Bc.devices.h[a];
        null != b && (b.connected = !1);
        Bc.devices.remove(a);
        null != b && b.onDisconnect.dispatch();
      };
      Bc.prototype = { __class__: Bc };
      var xc = function (a) {
        this.onTrackballMove = new Sn();
        this.onHatMove = new Un();
        this.onDisconnect = new Gc();
        this.onButtonUp = new mh();
        this.onButtonDown = new mh();
        this.onAxisMove = new Tn();
        this.id = a;
        this.connected = !0;
      };
      h["lime.ui.Joystick"] = xc;
      xc.__name__ = "lime.ui.Joystick";
      xc.__connect = function (a) {
        if (!xc.devices.h.hasOwnProperty(a)) {
          var b = new xc(a);
          xc.devices.h[a] = b;
          xc.onConnect.dispatch(b);
        }
      };
      xc.__disconnect = function (a) {
        var b = xc.devices.h[a];
        null != b && (b.connected = !1);
        xc.devices.remove(a);
        null != b && b.onDisconnect.dispatch();
      };
      xc.__getDeviceData = function () {
        var a = null;
        try {
          a = navigator.getGamepads
            ? navigator.getGamepads()
            : navigator.webkitGetGamepads
            ? navigator.webkitGetGamepads()
            : null;
        } catch (b) {}
        return a;
      };
      xc.prototype = { __class__: xc };
      var Eb = {
          __properties__: {
            get_shiftKey: "get_shiftKey",
            get_metaKey: "get_metaKey",
            get_ctrlKey: "get_ctrlKey",
            get_altKey: "get_altKey",
          },
          get_altKey: function (a) {
            return 0 >= (a & 256) ? 0 < (a & 512) : !0;
          },
          get_ctrlKey: function (a) {
            return 0 >= (a & 64) ? 0 < (a & 128) : !0;
          },
          get_metaKey: function (a) {
            return 0 >= (a & 1024) ? 0 < (a & 2048) : !0;
          },
          get_shiftKey: function (a) {
            return 0 >= (a & 1) ? 0 < (a & 2) : !0;
          },
        },
        Db = (w["lime.ui.MouseCursor"] = {
          __ename__: "lime.ui.MouseCursor",
          __constructs__: null,
          ARROW: {
            _hx_name: "ARROW",
            _hx_index: 0,
            __enum__: "lime.ui.MouseCursor",
            toString: p,
          },
          CROSSHAIR: {
            _hx_name: "CROSSHAIR",
            _hx_index: 1,
            __enum__: "lime.ui.MouseCursor",
            toString: p,
          },
          DEFAULT: {
            _hx_name: "DEFAULT",
            _hx_index: 2,
            __enum__: "lime.ui.MouseCursor",
            toString: p,
          },
          MOVE: {
            _hx_name: "MOVE",
            _hx_index: 3,
            __enum__: "lime.ui.MouseCursor",
            toString: p,
          },
          POINTER: {
            _hx_name: "POINTER",
            _hx_index: 4,
            __enum__: "lime.ui.MouseCursor",
            toString: p,
          },
          RESIZE_NESW: {
            _hx_name: "RESIZE_NESW",
            _hx_index: 5,
            __enum__: "lime.ui.MouseCursor",
            toString: p,
          },
          RESIZE_NS: {
            _hx_name: "RESIZE_NS",
            _hx_index: 6,
            __enum__: "lime.ui.MouseCursor",
            toString: p,
          },
          RESIZE_NWSE: {
            _hx_name: "RESIZE_NWSE",
            _hx_index: 7,
            __enum__: "lime.ui.MouseCursor",
            toString: p,
          },
          RESIZE_WE: {
            _hx_name: "RESIZE_WE",
            _hx_index: 8,
            __enum__: "lime.ui.MouseCursor",
            toString: p,
          },
          TEXT: {
            _hx_name: "TEXT",
            _hx_index: 9,
            __enum__: "lime.ui.MouseCursor",
            toString: p,
          },
          WAIT: {
            _hx_name: "WAIT",
            _hx_index: 10,
            __enum__: "lime.ui.MouseCursor",
            toString: p,
          },
          WAIT_ARROW: {
            _hx_name: "WAIT_ARROW",
            _hx_index: 11,
            __enum__: "lime.ui.MouseCursor",
            toString: p,
          },
          CUSTOM: {
            _hx_name: "CUSTOM",
            _hx_index: 12,
            __enum__: "lime.ui.MouseCursor",
            toString: p,
          },
        });
      Db.__constructs__ = [
        Db.ARROW,
        Db.CROSSHAIR,
        Db.DEFAULT,
        Db.MOVE,
        Db.POINTER,
        Db.RESIZE_NESW,
        Db.RESIZE_NS,
        Db.RESIZE_NWSE,
        Db.RESIZE_WE,
        Db.TEXT,
        Db.WAIT,
        Db.WAIT_ARROW,
        Db.CUSTOM,
      ];
      var dh = (w["lime.ui.MouseWheelMode"] = {
        __ename__: "lime.ui.MouseWheelMode",
        __constructs__: null,
        PIXELS: {
          _hx_name: "PIXELS",
          _hx_index: 0,
          __enum__: "lime.ui.MouseWheelMode",
          toString: p,
        },
        LINES: {
          _hx_name: "LINES",
          _hx_index: 1,
          __enum__: "lime.ui.MouseWheelMode",
          toString: p,
        },
        PAGES: {
          _hx_name: "PAGES",
          _hx_index: 2,
          __enum__: "lime.ui.MouseWheelMode",
          toString: p,
        },
        UNKNOWN: {
          _hx_name: "UNKNOWN",
          _hx_index: 3,
          __enum__: "lime.ui.MouseWheelMode",
          toString: p,
        },
      });
      dh.__constructs__ = [dh.PIXELS, dh.LINES, dh.PAGES, dh.UNKNOWN];
      var oc = function (a, b, c, d, e, f, k) {
        this.x = a;
        this.y = b;
        this.id = c;
        this.dx = d;
        this.dy = e;
        this.pressure = f;
        this.device = k;
      };
      h["lime.ui.Touch"] = oc;
      oc.__name__ = "lime.ui.Touch";
      oc.prototype = { __class__: oc };
      var ti = function (a, b) {
        this.clickCount = 0;
        this.onTextInput = new Bj();
        this.onTextEdit = new Vn();
        this.onRestore = new Gc();
        this.onResize = new Hl();
        this.onRenderContextRestored = new Il();
        this.onRenderContextLost = new Gc();
        this.onRender = new Il();
        this.onMove = new Aj();
        this.onMouseWheel = new Rn();
        this.onMouseUp = new Pn();
        this.onMouseMoveRelative = new Aj();
        this.onMouseMove = new Aj();
        this.onMouseDown = new Qn();
        this.onMinimize = new Gc();
        this.onLeave = new Gc();
        this.onKeyUp = new Kl();
        this.onKeyDown = new Kl();
        this.onFullscreen = new Gc();
        this.onFocusOut = new Gc();
        this.onFocusIn = new Gc();
        this.onExpose = new Gc();
        this.onEnter = new Gc();
        this.onDropFile = new Bj();
        this.onDeactivate = new Gc();
        this.onClose = new Gc();
        this.onActivate = new Gc();
        this.application = a;
        this.__attributes = null != b ? b : {};
        Object.prototype.hasOwnProperty.call(this.__attributes, "parameters") &&
          (this.parameters = this.__attributes.parameters);
        this.__height = this.__width = 0;
        this.__fullscreen = !1;
        this.__scale = 1;
        this.__y = this.__x = 0;
        this.__title = Object.prototype.hasOwnProperty.call(
          this.__attributes,
          "title"
        )
          ? this.__attributes.title
          : "";
        this.id = -1;
        this.__backend = new Oa(this);
      };
      h["lime.ui.Window"] = ti;
      ti.__name__ = "lime.ui.Window";
      ti.prototype = {
        close: function () {
          this.__backend.close();
        },
        set_cursor: function (a) {
          return this.__backend.setCursor(a);
        },
        set_fullscreen: function (a) {
          return (this.__fullscreen = this.__backend.setFullscreen(a));
        },
        setTextInputRect: function (a) {
          return this.__backend.setTextInputRect(a);
        },
        __class__: ti,
        __properties__: {
          set_fullscreen: "set_fullscreen",
          set_cursor: "set_cursor",
        },
      };
      var Sf = function () {
        this.data = new Q();
        this.paths = [];
      };
      h["lime.utils.AssetBundle"] = Sf;
      Sf.__name__ = "lime.utils.AssetBundle";
      Sf.fromBytes = function (a) {
        a = new Fl(a);
        return Sf.__extractBundle(a);
      };
      Sf.loadFromBytes = function (a) {
        return Ua.withValue(Sf.fromBytes(a));
      };
      Sf.loadFromFile = function (a) {
        return zh.loadFromFile(a).then(Sf.loadFromBytes);
      };
      Sf.__extractBundle = function (a) {
        var b = zj.readZip(a);
        a = new Sf();
        for (b = b.h; null != b; ) {
          var c = b.item;
          b = b.next;
          if (c.compressed) {
            var d = a.data,
              e = c.fileName,
              f = zh.decompress(c.data, Ol.DEFLATE);
            d.h[e] = f;
          } else a.data.h[c.fileName] = c.data;
          a.paths.push(c.fileName);
        }
        return a;
      };
      Sf.prototype = { __class__: Sf };
      var bo = function () {
        this.enabled = !0;
        this.audio = new Q();
        this.font = new Q();
        this.image = new Q();
        this.version = 277782;
      };
      h["lime.utils.AssetCache"] = bo;
      bo.__name__ = "lime.utils.AssetCache";
      bo.prototype = {
        exists: function (a, b) {
          return (("IMAGE" == b || null == b) &&
            Object.prototype.hasOwnProperty.call(this.image.h, a)) ||
            (("FONT" == b || null == b) &&
              Object.prototype.hasOwnProperty.call(this.font.h, a)) ||
            (("SOUND" == b || "MUSIC" == b || null == b) &&
              Object.prototype.hasOwnProperty.call(this.audio.h, a))
            ? !0
            : !1;
        },
        set: function (a, b, c) {
          switch (b) {
            case "FONT":
              this.font.h[a] = c;
              break;
            case "IMAGE":
              if (!(c instanceof Va))
                throw N.thrown(
                  "Cannot cache non-Image asset: " + M.string(c) + " as Image"
                );
              this.image.h[a] = c;
              break;
            case "MUSIC":
            case "SOUND":
              if (!(c instanceof Mc))
                throw N.thrown(
                  "Cannot cache non-AudioBuffer asset: " +
                    M.string(c) +
                    " as AudioBuffer"
                );
              this.audio.h[a] = c;
              break;
            default:
              throw N.thrown(b + " assets are not cachable");
          }
        },
        clear: function (a) {
          if (null == a)
            (this.audio = new Q()),
              (this.font = new Q()),
              (this.image = new Q());
          else {
            var b = this.audio.h;
            b = Object.keys(b);
            for (var c = b.length, d = 0; d < c; ) {
              var e = b[d++];
              if (K.startsWith(e, a)) {
                var f = this.audio;
                Object.prototype.hasOwnProperty.call(f.h, e) && delete f.h[e];
              }
            }
            b = this.font.h;
            b = Object.keys(b);
            c = b.length;
            for (d = 0; d < c; )
              (e = b[d++]),
                K.startsWith(e, a) &&
                  ((f = this.font),
                  Object.prototype.hasOwnProperty.call(f.h, e) &&
                    delete f.h[e]);
            b = this.image.h;
            b = Object.keys(b);
            c = b.length;
            for (d = 0; d < c; )
              (e = b[d++]),
                K.startsWith(e, a) &&
                  ((f = this.image),
                  Object.prototype.hasOwnProperty.call(f.h, e) &&
                    delete f.h[e]);
          }
        },
        __class__: bo,
      };
      var Wb = function () {
        this.types = new Q();
        this.sizes = new Q();
        this.preload = new Q();
        this.paths = new Q();
        this.pathGroups = new Q();
        this.classTypes = new Q();
        this.cachedText = new Q();
        this.cachedImages = new Q();
        this.cachedFonts = new Q();
        this.cachedBytes = new Q();
        this.cachedAudioBuffers = new Q();
        this.onChange = new Gc();
        this.bytesTotal = this.bytesLoaded = 0;
      };
      h["lime.utils.AssetLibrary"] = Wb;
      Wb.__name__ = "lime.utils.AssetLibrary";
      Wb.fromBundle = function (a) {
        if (Object.prototype.hasOwnProperty.call(a.data.h, "library.json")) {
          var b = Pd.fromBytes(a.data.h["library.json"]);
          if (null != b) {
            if (null == b.libraryType) var c = new Wb();
            else if (((c = h[b.libraryType]), null != c))
              c = zb.createInstance(c, b.libraryArgs);
            else
              return (
                Ka.warn("Could not find library type: " + b.libraryType, {
                  fileName: "lime/utils/AssetLibrary.hx",
                  lineNumber: 122,
                  className: "lime.utils.AssetLibrary",
                  methodName: "fromBundle",
                }),
                null
              );
            c.__fromBundle(a, b);
            return c;
          }
        } else return (c = new Wb()), c.__fromBundle(a), c;
        return null;
      };
      Wb.fromManifest = function (a) {
        if (null == a) return null;
        if (null == a.libraryType) var b = new Wb();
        else if (((b = h[a.libraryType]), null != b))
          b = zb.createInstance(b, a.libraryArgs);
        else
          return (
            Ka.warn("Could not find library type: " + a.libraryType, {
              fileName: "lime/utils/AssetLibrary.hx",
              lineNumber: 160,
              className: "lime.utils.AssetLibrary",
              methodName: "fromManifest",
            }),
            null
          );
        b.__fromManifest(a);
        return b;
      };
      Wb.prototype = {
        exists: function (a, b) {
          b = null != b ? za.__cast(b, String) : null;
          a = this.types.h[a];
          return null == a ||
            (a != b &&
              (("SOUND" != b && "MUSIC" != b) ||
                ("MUSIC" != a && "SOUND" != a)) &&
              "BINARY" != b &&
              null != b &&
              ("BINARY" != a || "TEXT" != b))
            ? !1
            : !0;
        },
        getAsset: function (a, b) {
          switch (b) {
            case "BINARY":
              return this.getBytes(a);
            case "FONT":
              return this.getFont(a);
            case "IMAGE":
              return this.getImage(a);
            case "MUSIC":
            case "SOUND":
              return this.getAudioBuffer(a);
            case "TEMPLATE":
              throw N.thrown("Not sure how to get template: " + a);
            case "TEXT":
              return this.getText(a);
            default:
              throw N.thrown("Unknown asset type: " + b);
          }
        },
        getAudioBuffer: function (a) {
          return Object.prototype.hasOwnProperty.call(
            this.cachedAudioBuffers.h,
            a
          )
            ? this.cachedAudioBuffers.h[a]
            : Object.prototype.hasOwnProperty.call(this.classTypes.h, a)
            ? Mc.fromBytes(
                za.__cast(zb.createInstance(this.classTypes.h[a], []), Nb)
              )
            : Mc.fromFile(this.getPath(a));
        },
        getBytes: function (a) {
          if (Object.prototype.hasOwnProperty.call(this.cachedBytes.h, a))
            return this.cachedBytes.h[a];
          if (Object.prototype.hasOwnProperty.call(this.cachedText.h, a)) {
            var b = zh.ofString(this.cachedText.h[a]);
            return (this.cachedBytes.h[a] = b);
          }
          return Object.prototype.hasOwnProperty.call(this.classTypes.h, a)
            ? za.__cast(zb.createInstance(this.classTypes.h[a], []), Nb)
            : zh.fromFile(this.getPath(a));
        },
        getFont: function (a) {
          return Object.prototype.hasOwnProperty.call(this.cachedFonts.h, a)
            ? this.cachedFonts.h[a]
            : Object.prototype.hasOwnProperty.call(this.classTypes.h, a)
            ? za.__cast(zb.createInstance(this.classTypes.h[a], []), Zb)
            : Zb.fromFile(this.getPath(a));
        },
        getImage: function (a) {
          return Object.prototype.hasOwnProperty.call(this.cachedImages.h, a)
            ? this.cachedImages.h[a]
            : Object.prototype.hasOwnProperty.call(this.classTypes.h, a)
            ? za.__cast(zb.createInstance(this.classTypes.h[a], []), Va)
            : Va.fromFile(this.getPath(a));
        },
        getPath: function (a) {
          return Object.prototype.hasOwnProperty.call(this.paths.h, a)
            ? this.paths.h[a]
            : Object.prototype.hasOwnProperty.call(this.pathGroups.h, a)
            ? this.pathGroups.h[a][0]
            : null;
        },
        getText: function (a) {
          if (Object.prototype.hasOwnProperty.call(this.cachedText.h, a))
            return this.cachedText.h[a];
          a = this.getBytes(a);
          return null == a ? null : a.getString(0, a.length);
        },
        isLocal: function (a, b) {
          if (Object.prototype.hasOwnProperty.call(this.classTypes.h, a))
            return !0;
          b = za.__cast(b, String);
          if (null == b)
            return Object.prototype.hasOwnProperty.call(
              this.cachedBytes.h,
              a
            ) ||
              Object.prototype.hasOwnProperty.call(this.cachedText.h, a) ||
              Object.prototype.hasOwnProperty.call(this.cachedImages.h, a) ||
              Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h, a)
              ? !0
              : Object.prototype.hasOwnProperty.call(this.cachedFonts.h, a);
          switch (b) {
            case "FONT":
              return Object.prototype.hasOwnProperty.call(
                this.cachedFonts.h,
                a
              );
            case "IMAGE":
              return Object.prototype.hasOwnProperty.call(
                this.cachedImages.h,
                a
              );
            case "MUSIC":
            case "SOUND":
              return Object.prototype.hasOwnProperty.call(
                this.cachedAudioBuffers.h,
                a
              );
            default:
              return Object.prototype.hasOwnProperty.call(this.cachedBytes.h, a)
                ? !0
                : Object.prototype.hasOwnProperty.call(this.cachedText.h, a);
          }
        },
        loadAsset: function (a, b) {
          switch (b) {
            case "BINARY":
              return this.loadBytes(a);
            case "FONT":
              return this.loadFont(a);
            case "IMAGE":
              return this.loadImage(a);
            case "MUSIC":
            case "SOUND":
              return this.loadAudioBuffer(a);
            case "TEMPLATE":
              throw N.thrown("Not sure how to load template: " + a);
            case "TEXT":
              return this.loadText(a);
            default:
              throw N.thrown("Unknown asset type: " + b);
          }
        },
        load: function () {
          if (this.loaded) return Ua.withValue(this);
          if (null == this.promise) {
            this.promise = new Gd();
            this.bytesLoadedCache = new Q();
            this.assetsLoaded = 0;
            this.assetsTotal = 1;
            for (
              var a = Object.keys(this.preload.h), b = a.length, c = 0;
              c < b;

            ) {
              var d = a[c++];
              if (this.preload.h[d]) {
                Ka.verbose(
                  "Preloading asset: " + d + " [" + this.types.h[d] + "]",
                  {
                    fileName: "lime/utils/AssetLibrary.hx",
                    lineNumber: 408,
                    className: "lime.utils.AssetLibrary",
                    methodName: "load",
                  }
                );
                var e = this.types.h[d];
                if (null != e)
                  switch (e) {
                    case "BINARY":
                      this.assetsTotal++;
                      e = this.loadBytes(d);
                      e.onProgress(
                        (function (a, b) {
                          return function (c, d) {
                            b[0](a[0], c, d);
                          };
                        })([d], [n(this, this.load_onProgress)])
                      );
                      e.onError(
                        (function (a, b) {
                          return function (c) {
                            b[0](a[0], c);
                          };
                        })([d], [n(this, this.load_onError)])
                      );
                      e.onComplete(
                        (function (a, b) {
                          return function (c) {
                            b[0](a[0], c);
                          };
                        })([d], [n(this, this.loadBytes_onComplete)])
                      );
                      break;
                    case "FONT":
                      this.assetsTotal++;
                      e = this.loadFont(d);
                      e.onProgress(
                        (function (a, b) {
                          return function (c, d) {
                            b[0](a[0], c, d);
                          };
                        })([d], [n(this, this.load_onProgress)])
                      );
                      e.onError(
                        (function (a, b) {
                          return function (c) {
                            b[0](a[0], c);
                          };
                        })([d], [n(this, this.load_onError)])
                      );
                      e.onComplete(
                        (function (a, b) {
                          return function (c) {
                            b[0](a[0], c);
                          };
                        })([d], [n(this, this.loadFont_onComplete)])
                      );
                      break;
                    case "IMAGE":
                      this.assetsTotal++;
                      e = this.loadImage(d);
                      e.onProgress(
                        (function (a, b) {
                          return function (c, d) {
                            b[0](a[0], c, d);
                          };
                        })([d], [n(this, this.load_onProgress)])
                      );
                      e.onError(
                        (function (a, b) {
                          return function (c) {
                            b[0](a[0], c);
                          };
                        })([d], [n(this, this.load_onError)])
                      );
                      e.onComplete(
                        (function (a, b) {
                          return function (c) {
                            b[0](a[0], c);
                          };
                        })([d], [n(this, this.loadImage_onComplete)])
                      );
                      break;
                    case "MUSIC":
                    case "SOUND":
                      this.assetsTotal++;
                      e = this.loadAudioBuffer(d);
                      e.onProgress(
                        (function (a, b) {
                          return function (c, d) {
                            b[0](a[0], c, d);
                          };
                        })([d], [n(this, this.load_onProgress)])
                      );
                      e.onError(
                        (function (a, b) {
                          return function (c) {
                            b[0](a[0], c);
                          };
                        })([d], [n(this, this.loadAudioBuffer_onError)])
                      );
                      e.onComplete(
                        (function (a, b) {
                          return function (c) {
                            b[0](a[0], c);
                          };
                        })([d], [n(this, this.loadAudioBuffer_onComplete)])
                      );
                      break;
                    case "TEXT":
                      this.assetsTotal++,
                        (e = this.loadText(d)),
                        e.onProgress(
                          (function (a, b) {
                            return function (c, d) {
                              b[0](a[0], c, d);
                            };
                          })([d], [n(this, this.load_onProgress)])
                        ),
                        e.onError(
                          (function (a, b) {
                            return function (c) {
                              b[0](a[0], c);
                            };
                          })([d], [n(this, this.load_onError)])
                        ),
                        e.onComplete(
                          (function (a, b) {
                            return function (c) {
                              b[0](a[0], c);
                            };
                          })([d], [n(this, this.loadText_onComplete)])
                        );
                  }
              }
            }
            this.__assetLoaded(null);
          }
          return this.promise.future;
        },
        loadAudioBuffer: function (a) {
          return Object.prototype.hasOwnProperty.call(
            this.cachedAudioBuffers.h,
            a
          )
            ? Ua.withValue(this.cachedAudioBuffers.h[a])
            : Object.prototype.hasOwnProperty.call(this.classTypes.h, a)
            ? Ua.withValue(
                Mc.fromBytes(
                  za.__cast(zb.createInstance(this.classTypes.h[a], []), Nb)
                )
              )
            : Object.prototype.hasOwnProperty.call(this.pathGroups.h, a)
            ? Mc.loadFromFiles(this.pathGroups.h[a])
            : Mc.loadFromFile(this.paths.h[a]);
        },
        loadBytes: function (a) {
          return Object.prototype.hasOwnProperty.call(this.cachedBytes.h, a)
            ? Ua.withValue(this.cachedBytes.h[a])
            : Object.prototype.hasOwnProperty.call(this.classTypes.h, a)
            ? Ua.withValue(zb.createInstance(this.classTypes.h[a], []))
            : zh.loadFromFile(this.getPath(a));
        },
        loadFont: function (a) {
          return Object.prototype.hasOwnProperty.call(this.cachedFonts.h, a)
            ? Ua.withValue(this.cachedFonts.h[a])
            : Object.prototype.hasOwnProperty.call(this.classTypes.h, a)
            ? ((a = zb.createInstance(this.classTypes.h[a], [])),
              a.__loadFromName(a.name))
            : Zb.loadFromName(this.getPath(a));
        },
        loadImage: function (a) {
          var b = this;
          return Object.prototype.hasOwnProperty.call(this.cachedImages.h, a)
            ? Ua.withValue(this.cachedImages.h[a])
            : Object.prototype.hasOwnProperty.call(this.classTypes.h, a)
            ? Ua.withValue(zb.createInstance(this.classTypes.h[a], []))
            : Object.prototype.hasOwnProperty.call(this.cachedBytes.h, a)
            ? Va.loadFromBytes(this.cachedBytes.h[a]).then(function (c) {
                var d = b.cachedBytes;
                Object.prototype.hasOwnProperty.call(d.h, a) && delete d.h[a];
                b.cachedImages.h[a] = c;
                return Ua.withValue(c);
              })
            : Va.loadFromFile(this.getPath(a));
        },
        loadText: function (a) {
          if (Object.prototype.hasOwnProperty.call(this.cachedText.h, a))
            return Ua.withValue(this.cachedText.h[a]);
          if (
            Object.prototype.hasOwnProperty.call(this.cachedBytes.h, a) ||
            Object.prototype.hasOwnProperty.call(this.classTypes.h, a)
          ) {
            var b = this.getBytes(a);
            if (null == b) return Ua.withValue(null);
            b = b.getString(0, b.length);
            this.cachedText.h[a] = b;
            return Ua.withValue(b);
          }
          return new si().load(this.getPath(a));
        },
        unload: function () {
          this.cachedBytes.h = Object.create(null);
          this.cachedFonts.h = Object.create(null);
          this.cachedImages.h = Object.create(null);
          this.cachedAudioBuffers.h = Object.create(null);
          this.cachedText.h = Object.create(null);
        },
        __assetLoaded: function (a) {
          this.assetsLoaded++;
          null != a &&
            Ka.verbose(
              "Loaded asset: " +
                a +
                " [" +
                this.types.h[a] +
                "] (" +
                (this.assetsLoaded - 1) +
                "/" +
                (this.assetsTotal - 1) +
                ")",
              {
                fileName: "lime/utils/AssetLibrary.hx",
                lineNumber: 637,
                className: "lime.utils.AssetLibrary",
                methodName: "__assetLoaded",
              }
            );
          if (null != a) {
            var b = Object.prototype.hasOwnProperty.call(this.sizes.h, a)
              ? this.sizes.h[a]
              : 0;
            if (
              Object.prototype.hasOwnProperty.call(this.bytesLoadedCache.h, a)
            ) {
              var c = this.bytesLoadedCache.h[a];
              c < b && (this.bytesLoaded += b - c);
            } else this.bytesLoaded += b;
            this.bytesLoadedCache.h[a] = b;
          }
          this.assetsLoaded < this.assetsTotal
            ? this.promise.progress(this.bytesLoaded, this.bytesTotal)
            : ((this.loaded = !0),
              this.promise.progress(this.bytesTotal, this.bytesTotal),
              this.promise.complete(this));
        },
        __cacheBreak: function (a) {
          return ra.__cacheBreak(a);
        },
        __fromBundle: function (a, b) {
          if (null != b) {
            var c = 0;
            for (b = b.assets; c < b.length; ) {
              var d = b[c];
              ++c;
              var e = Object.prototype.hasOwnProperty.call(d, "id")
                ? d.id
                : d.path;
              var f = a.data.h[d.path];
              if (Object.prototype.hasOwnProperty.call(d, "type")) {
                var k = d.type;
                "TEXT" == k
                  ? (this.cachedText.h[e] = null != f ? M.string(f) : null)
                  : (this.cachedBytes.h[e] = f);
                this.types.h[e] = d.type;
              } else (this.cachedBytes.h[e] = f), (this.types.h[e] = "BINARY");
            }
          } else
            for (c = 0, b = a.paths; c < b.length; )
              (e = b[c]),
                ++c,
                (this.cachedBytes.h[e] = a.data.h[e]),
                (this.types.h[e] = "BINARY");
        },
        __fromManifest: function (a) {
          var b = 2 <= a.version,
            c = a.rootPath;
          null == c && (c = "");
          "" != c && (c += "/");
          for (var d = 0, e = a.assets; d < e.length; ) {
            var f = e[d];
            ++d;
            var k =
              b && Object.prototype.hasOwnProperty.call(f, "size")
                ? f.size
                : 100;
            var g = Object.prototype.hasOwnProperty.call(f, "id")
              ? f.id
              : f.path;
            if (Object.prototype.hasOwnProperty.call(f, "path")) {
              var l = this.paths;
              var p = this.__cacheBreak(
                this.__resolvePath(c + M.string(qa.field(f, "path")))
              );
              l.h[g] = p;
            }
            if (Object.prototype.hasOwnProperty.call(f, "pathGroup")) {
              l = qa.field(f, "pathGroup");
              p = 0;
              for (var n = l.length; p < n; ) {
                var m = p++;
                l[m] = this.__cacheBreak(this.__resolvePath(c + l[m]));
              }
              this.pathGroups.h[g] = l;
            }
            this.sizes.h[g] = k;
            this.types.h[g] = f.type;
            Object.prototype.hasOwnProperty.call(f, "preload") &&
              (this.preload.h[g] = qa.field(f, "preload"));
            Object.prototype.hasOwnProperty.call(f, "className") &&
              ((k = qa.field(f, "className")),
              (k = h[k]),
              (this.classTypes.h[g] = k));
          }
          d = this.bytesTotal = 0;
          for (e = a.assets; d < e.length; )
            (f = e[d]),
              ++d,
              (g = Object.prototype.hasOwnProperty.call(f, "id")
                ? f.id
                : f.path),
              Object.prototype.hasOwnProperty.call(this.preload.h, g) &&
                this.preload.h[g] &&
                Object.prototype.hasOwnProperty.call(this.sizes.h, g) &&
                (this.bytesTotal += this.sizes.h[g]);
        },
        __resolvePath: function (a) {
          a = K.replace(a, "\\", "/");
          var b = a.indexOf(":");
          K.startsWith(a, "http") && 0 < b
            ? ((b += 3),
              (a =
                X.substr(a, 0, b) + K.replace(X.substr(a, b, null), "//", "/")))
            : (a = K.replace(a, "//", "/"));
          if (-1 < a.indexOf("./")) {
            a = a.split("/");
            b = [];
            for (var c = 0, d = a.length; c < d; ) {
              var e = c++;
              ".." == a[e]
                ? 0 == e || ".." == b[e - 1]
                  ? b.push("..")
                  : b.pop()
                : "." == a[e]
                ? 0 == e && b.push(".")
                : b.push(a[e]);
            }
            a = b.join("/");
          }
          return a;
        },
        loadAudioBuffer_onComplete: function (a, b) {
          this.cachedAudioBuffers.h[a] = b;
          if (Object.prototype.hasOwnProperty.call(this.pathGroups.h, a))
            for (
              var c = this.pathGroups.h[a],
                d = Object.keys(this.pathGroups.h),
                e = d.length,
                f = 0;
              f < e;

            ) {
              var k = d[f++];
              if (k != a)
                for (var g = 0; g < c.length; ) {
                  var l = c[g];
                  ++g;
                  if (-1 < this.pathGroups.h[k].indexOf(l)) {
                    this.cachedAudioBuffers.h[k] = b;
                    break;
                  }
                }
            }
          this.__assetLoaded(a);
        },
        loadAudioBuffer_onError: function (a, b) {
          null != b && "" != b
            ? Ka.warn('Could not load "' + a + '": ' + M.string(b), {
                fileName: "lime/utils/AssetLibrary.hx",
                lineNumber: 883,
                className: "lime.utils.AssetLibrary",
                methodName: "loadAudioBuffer_onError",
              })
            : Ka.warn('Could not load "' + a + '"', {
                fileName: "lime/utils/AssetLibrary.hx",
                lineNumber: 887,
                className: "lime.utils.AssetLibrary",
                methodName: "loadAudioBuffer_onError",
              });
          this.loadAudioBuffer_onComplete(a, new Mc());
        },
        loadBytes_onComplete: function (a, b) {
          this.cachedBytes.h[a] = b;
          this.__assetLoaded(a);
        },
        loadFont_onComplete: function (a, b) {
          this.cachedFonts.h[a] = b;
          this.__assetLoaded(a);
        },
        loadImage_onComplete: function (a, b) {
          this.cachedImages.h[a] = b;
          this.__assetLoaded(a);
        },
        loadText_onComplete: function (a, b) {
          this.cachedText.h[a] = b;
          this.__assetLoaded(a);
        },
        load_onError: function (a, b) {
          null != b && "" != b
            ? this.promise.error(
                'Error loading asset "' + a + '": ' + M.string(b)
              )
            : this.promise.error('Error loading asset "' + a + '"');
        },
        load_onProgress: function (a, b, c) {
          if (0 < b) {
            var d = this.sizes.h[a];
            0 < c
              ? ((b /= c), 1 < b && (b = 1), (b = Math.floor(b * d)))
              : b > d && (b = d);
            Object.prototype.hasOwnProperty.call(this.bytesLoadedCache.h, a)
              ? ((d = this.bytesLoadedCache.h[a]),
                b != d && (this.bytesLoaded += b - d))
              : (this.bytesLoaded += b);
            this.bytesLoadedCache.h[a] = b;
            this.promise.progress(this.bytesLoaded, this.bytesTotal);
          }
        },
        __class__: Wb,
      };
      var Pd = function () {
        this.assets = [];
        this.libraryArgs = [];
        this.version = 2;
      };
      h["lime.utils.AssetManifest"] = Pd;
      Pd.__name__ = "lime.utils.AssetManifest";
      Pd.fromBytes = function (a, b) {
        return null != a ? Pd.parse(a.getString(0, a.length), b) : null;
      };
      Pd.loadFromFile = function (a, b) {
        a = Pd.__resolvePath(a);
        b = Pd.__resolveRootPath(b, a);
        return null == a
          ? null
          : zh.loadFromFile(a).then(function (a) {
              return Ua.withValue(Pd.fromBytes(a, b));
            });
      };
      Pd.parse = function (a, b) {
        if (null == a || "" == a) return null;
        a = JSON.parse(a);
        var c = new Pd();
        Object.prototype.hasOwnProperty.call(a, "name") && (c.name = a.name);
        Object.prototype.hasOwnProperty.call(a, "libraryType") &&
          (c.libraryType = a.libraryType);
        Object.prototype.hasOwnProperty.call(a, "libraryArgs") &&
          (c.libraryArgs = a.libraryArgs);
        if (Object.prototype.hasOwnProperty.call(a, "assets")) {
          var d = a.assets;
          Object.prototype.hasOwnProperty.call(a, "version") && 2 >= a.version
            ? (c.assets = Rd.run(d))
            : (c.assets = d);
        }
        Object.prototype.hasOwnProperty.call(a, "rootPath") &&
          (c.rootPath = a.rootPath);
        null != b &&
          "" != b &&
          (c.rootPath =
            null == c.rootPath || "" == c.rootPath ? b : b + "/" + c.rootPath);
        return c;
      };
      Pd.__resolvePath = function (a) {
        if (null == a) return null;
        var b = a.indexOf("?");
        var c = -1 < b ? X.substr(a, 0, b) : a;
        for (c = K.replace(c, "\\", "/"); K.endsWith(c, "/"); )
          c = X.substr(c, 0, c.length - 1);
        return K.endsWith(c, ".bundle")
          ? -1 < b
            ? c + "/library.json" + X.substr(a, b, null)
            : c + "/library.json"
          : a;
      };
      Pd.__resolveRootPath = function (a, b) {
        if (null != a) return a;
        a = b.indexOf("?");
        a = -1 < a ? X.substr(b, 0, a) : b;
        for (a = K.replace(a, "\\", "/"); K.endsWith(a, "/"); ) {
          if ("/" == a) return a;
          a = X.substr(a, 0, a.length - 1);
        }
        return K.endsWith(a, ".bundle") ? a : Hd.directory(a);
      };
      Pd.prototype = { __class__: Pd };
      var ra = function () {};
      h["lime.utils.Assets"] = ra;
      ra.__name__ = "lime.utils.Assets";
      ra.exists = function (a, b) {
        null == b && (b = "BINARY");
        var c = a.indexOf(":"),
          d = a.substring(0, c);
        a = a.substring(c + 1);
        d = ra.getLibrary(d);
        return null != d ? d.exists(a, b) : !1;
      };
      ra.getAsset = function (a, b, c) {
        if (c && ra.cache.enabled)
          switch (b) {
            case "BINARY":
            case "TEXT":
              c = !1;
              break;
            case "FONT":
              var d = ra.cache.font.h[a];
              if (null != d) return d;
              break;
            case "IMAGE":
              d = ra.cache.image.h[a];
              if (ra.isValidImage(d)) return d;
              break;
            case "MUSIC":
            case "SOUND":
              d = ra.cache.audio.h[a];
              if (ra.isValidAudio(d)) return d;
              break;
            case "TEMPLATE":
              throw N.thrown("Not sure how to get template: " + a);
            default:
              return null;
          }
        var e = a.indexOf(":");
        d = a.substring(0, e);
        e = a.substring(e + 1);
        var f = ra.getLibrary(d);
        if (null != f)
          if (f.exists(e, b)) {
            if (f.isLocal(e, b))
              return (
                (d = f.getAsset(e, b)),
                c && ra.cache.enabled && ra.cache.set(a, b, d),
                d
              );
            Ka.error(b + ' asset "' + a + '" exists, but only asynchronously', {
              fileName: "lime/utils/Assets.hx",
              lineNumber: 133,
              className: "lime.utils.Assets",
              methodName: "getAsset",
            });
          } else
            Ka.error("There is no " + b + ' asset with an ID of "' + a + '"', {
              fileName: "lime/utils/Assets.hx",
              lineNumber: 138,
              className: "lime.utils.Assets",
              methodName: "getAsset",
            });
        else
          Ka.error(ra.__libraryNotFound(d), {
            fileName: "lime/utils/Assets.hx",
            lineNumber: 143,
            className: "lime.utils.Assets",
            methodName: "getAsset",
          });
        return null;
      };
      ra.getAudioBuffer = function (a, b) {
        null == b && (b = !0);
        return ra.getAsset(a, "SOUND", b);
      };
      ra.getBytes = function (a) {
        return ra.getAsset(a, "BINARY", !1);
      };
      ra.getFont = function (a, b) {
        null == b && (b = !0);
        return ra.getAsset(a, "FONT", b);
      };
      ra.getImage = function (a, b) {
        null == b && (b = !0);
        return ra.getAsset(a, "IMAGE", b);
      };
      ra.getLibrary = function (a) {
        if (null == a || "" == a) a = "default";
        return ra.libraries.h[a];
      };
      ra.getText = function (a) {
        return ra.getAsset(a, "TEXT", !1);
      };
      ra.hasLibrary = function (a) {
        if (null == a || "" == a) a = "default";
        return Object.prototype.hasOwnProperty.call(ra.libraries.h, a);
      };
      ra.isLocal = function (a, b, c) {
        null == c && (c = !0);
        if (c && ra.cache.enabled && ra.cache.exists(a, b)) return !0;
        var d = a.indexOf(":");
        c = a.substring(0, d);
        a = a.substring(d + 1);
        c = ra.getLibrary(c);
        return null != c ? c.isLocal(a, b) : !1;
      };
      ra.isValidAudio = function (a) {
        return null != a;
      };
      ra.isValidImage = function (a) {
        return null != a ? null != a.buffer : !1;
      };
      ra.loadAsset = function (a, b, c) {
        if (c && ra.cache.enabled)
          switch (b) {
            case "BINARY":
            case "TEXT":
              c = !1;
              break;
            case "FONT":
              var d = ra.cache.font.h[a];
              if (null != d) return Ua.withValue(d);
              break;
            case "IMAGE":
              d = ra.cache.image.h[a];
              if (ra.isValidImage(d)) return Ua.withValue(d);
              break;
            case "MUSIC":
            case "SOUND":
              d = ra.cache.audio.h[a];
              if (ra.isValidAudio(d)) return Ua.withValue(d);
              break;
            case "TEMPLATE":
              throw N.thrown("Not sure how to get template: " + a);
            default:
              return null;
          }
        var e = a.indexOf(":");
        d = a.substring(0, e);
        e = a.substring(e + 1);
        var f = ra.getLibrary(d);
        if (null != f) {
          if (f.exists(e, b)) {
            d = f.loadAsset(e, b);
            if (c && ra.cache.enabled)
              d.onComplete(function (c) {
                ra.cache.set(a, b, c);
              });
            return d;
          }
          return Ua.withError(
            "There is no " + b + ' asset with an ID of "' + a + '"'
          );
        }
        return Ua.withError(ra.__libraryNotFound(d));
      };
      ra.loadAudioBuffer = function (a, b) {
        null == b && (b = !0);
        return ra.loadAsset(a, "SOUND", b);
      };
      ra.loadLibrary = function (a) {
        var b = new Gd(),
          c = ra.getLibrary(a);
        if (null != c) return c.load();
        c = a;
        var d = null;
        if (Object.prototype.hasOwnProperty.call(ra.bundlePaths.h, a))
          Sf.loadFromFile(ra.bundlePaths.h[a])
            .onComplete(function (c) {
              null == c
                ? b.error('Cannot load bundle for library "' + a + '"')
                : ((c = Wb.fromBundle(c)),
                  null == c
                    ? b.error('Cannot open library "' + a + '"')
                    : ((ra.libraries.h[a] = c),
                      c.onChange.add(((x = ra.onChange), n(x, x.dispatch))),
                      b.completeWith(c.load())));
            })
            .onError(function (c) {
              b.error('There is no asset library with an ID of "' + a + '"');
            });
        else
          Object.prototype.hasOwnProperty.call(ra.libraryPaths.h, a)
            ? ((c = ra.libraryPaths.h[a]), (d = Hd.directory(c)))
            : (K.endsWith(c, ".bundle")
                ? ((d = c), (c += "/library.json"))
                : (d = Hd.directory(c)),
              (c = ra.__cacheBreak(c))),
            Pd.loadFromFile(c, d)
              .onComplete(function (c) {
                null == c
                  ? b.error(
                      'Cannot parse asset manifest for library "' + a + '"'
                    )
                  : ((c = Wb.fromManifest(c)),
                    null == c
                      ? b.error('Cannot open library "' + a + '"')
                      : ((ra.libraries.h[a] = c),
                        c.onChange.add(((x = ra.onChange), n(x, x.dispatch))),
                        b.completeWith(c.load())));
              })
              .onError(function (c) {
                b.error('There is no asset library with an ID of "' + a + '"');
              });
        return b.future;
      };
      ra.registerLibrary = function (a, b) {
        if (null == a || "" == a) a = "default";
        if (Object.prototype.hasOwnProperty.call(ra.libraries.h, a)) {
          if (ra.libraries.h[a] == b) return;
          ra.unloadLibrary(a);
        }
        null != b && b.onChange.add(ra.library_onChange);
        ra.libraries.h[a] = b;
      };
      ra.unloadLibrary = function (a) {
        if (null == a || "" == a) a = "default";
        var b = ra.libraries.h[a];
        null != b &&
          (ra.cache.clear(a + ":"),
          b.onChange.remove(ra.library_onChange),
          b.unload());
        b = ra.libraries;
        Object.prototype.hasOwnProperty.call(b.h, a) && delete b.h[a];
      };
      ra.__cacheBreak = function (a) {
        0 < ra.cache.version &&
          (a =
            -1 < a.indexOf("?")
              ? a + ("&" + ra.cache.version)
              : a + ("?" + ra.cache.version));
        return a;
      };
      ra.__libraryNotFound = function (a) {
        if (null == a || "" == a) a = "default";
        return null == B.current ||
          null == B.current.__preloader ||
          B.current.__preloader.complete
          ? 'There is no asset library named "' + a + '"'
          : 'There is no asset library named "' +
              a +
              '", or it is not yet preloaded';
      };
      ra.library_onChange = function () {
        ra.cache.clear();
        ra.onChange.dispatch();
      };
      var co = function (a, b) {
        this.bytes = a;
        this.offset = b;
      };
      h["lime.utils.BytePointerData"] = co;
      co.__name__ = "lime.utils.BytePointerData";
      co.prototype = { __class__: co };
      var zh = {
          _new: function (a, b) {
            return new Nb(b);
          },
          decompress: function (a, b) {
            switch (b._hx_index) {
              case 0:
                return Ao.decompress(a);
              case 1:
                return Bo.decompress(a);
              case 2:
                return Co.decompress(a);
              case 3:
                return Do.decompress(a);
            }
          },
          fromBytes: function (a) {
            return null == a ? null : zh._new(a.length, a.b.bufferValue);
          },
          fromFile: function (a) {
            return null;
          },
          loadFromFile: function (a) {
            return new Ml().load(a);
          },
          ofString: function (a) {
            a = Nb.ofString(a);
            return zh._new(a.length, a.b.bufferValue);
          },
        },
        Ol = (w["lime.utils.CompressionAlgorithm"] = {
          __ename__: "lime.utils.CompressionAlgorithm",
          __constructs__: null,
          DEFLATE: {
            _hx_name: "DEFLATE",
            _hx_index: 0,
            __enum__: "lime.utils.CompressionAlgorithm",
            toString: p,
          },
          GZIP: {
            _hx_name: "GZIP",
            _hx_index: 1,
            __enum__: "lime.utils.CompressionAlgorithm",
            toString: p,
          },
          LZMA: {
            _hx_name: "LZMA",
            _hx_index: 2,
            __enum__: "lime.utils.CompressionAlgorithm",
            toString: p,
          },
          ZLIB: {
            _hx_name: "ZLIB",
            _hx_index: 3,
            __enum__: "lime.utils.CompressionAlgorithm",
            toString: p,
          },
        });
      Ol.__constructs__ = [Ol.DEFLATE, Ol.GZIP, Ol.LZMA, Ol.ZLIB];
      var bj = {
          toArrayBufferView: function (a) {
            return a;
          },
        },
        Ka = function () {};
      h["lime.utils.Log"] = Ka;
      Ka.__name__ = "lime.utils.Log";
      Ka.debug = function (a, b) {
        4 <= Ka.level && console.debug("[" + b.className + "] " + M.string(a));
      };
      Ka.error = function (a, b) {
        if (1 <= Ka.level) {
          a = "[" + b.className + "] ERROR: " + M.string(a);
          if (Ka.throwErrors) throw N.thrown(a);
          console.error(a);
        }
      };
      Ka.info = function (a, b) {
        3 <= Ka.level && console.info("[" + b.className + "] " + M.string(a));
      };
      Ka.verbose = function (a, b) {
        5 <= Ka.level &&
          ((a = "[" + b.className + "] " + M.string(a)), console.log(a));
      };
      Ka.warn = function (a, b) {
        2 <= Ka.level &&
          console.warn("[" + b.className + "] WARNING: " + M.string(a));
      };
      var Hm = function () {
        this.bytesTotalCache = new Q();
        this.bytesLoadedCache2 = new Q();
        this.bytesLoadedCache = new Yb();
        this.onProgress = new Hl();
        this.onComplete = new Gc();
        this.bytesTotal = this.bytesLoaded = 0;
        this.libraries = [];
        this.libraryNames = [];
        this.onProgress.add(n(this, this.update));
      };
      h["lime.utils.Preloader"] = Hm;
      Hm.__name__ = "lime.utils.Preloader";
      Hm.prototype = {
        addLibrary: function (a) {
          this.libraries.push(a);
        },
        addLibraryName: function (a) {
          -1 == this.libraryNames.indexOf(a) && this.libraryNames.push(a);
        },
        load: function () {
          for (var a = this, b = 0, c = this.libraries; b < c.length; ) {
            var d = c[b];
            ++b;
            this.bytesTotal += d.bytesTotal;
          }
          this.loadedLibraries = -1;
          this.preloadStarted = !1;
          b = 0;
          for (c = this.libraries; b < c.length; )
            (d = [c[b]]),
              ++b,
              Ka.verbose("Preloading asset library", {
                fileName: "lime/utils/Preloader.hx",
                lineNumber: 134,
                className: "lime.utils.Preloader",
                methodName: "load",
              }),
              d[0]
                .load()
                .onProgress(
                  (function (b) {
                    return function (c, d) {
                      a.bytesLoaded =
                        null == a.bytesLoadedCache.h.__keys__[b[0].__id__]
                          ? a.bytesLoaded + c
                          : a.bytesLoaded +
                            (c - a.bytesLoadedCache.h[b[0].__id__]);
                      a.bytesLoadedCache.set(b[0], c);
                      a.simulateProgress ||
                        a.onProgress.dispatch(a.bytesLoaded, a.bytesTotal);
                    };
                  })(d)
                )
                .onComplete(
                  (function (b) {
                    return function (c) {
                      a.bytesLoaded =
                        null == a.bytesLoadedCache.h.__keys__[b[0].__id__]
                          ? a.bytesLoaded + b[0].bytesTotal
                          : a.bytesLoaded +
                            ((b[0].bytesTotal | 0) -
                              a.bytesLoadedCache.h[b[0].__id__]);
                      a.loadedAssetLibrary();
                    };
                  })(d)
                )
                .onError(
                  (function () {
                    return function (a) {
                      Ka.error(a, {
                        fileName: "lime/utils/Preloader.hx",
                        lineNumber: 170,
                        className: "lime.utils.Preloader",
                        methodName: "load",
                      });
                    };
                  })()
                );
          b = 0;
          for (c = this.libraryNames; b < c.length; )
            ++b, (this.bytesTotal += 200);
          this.loadedLibraries++;
          this.preloadStarted = !0;
          this.updateProgress();
        },
        loadedAssetLibrary: function (a) {
          this.loadedLibraries++;
          var b = this.loadedLibraries;
          this.preloadStarted || ++b;
          var c = this.libraries.length + this.libraryNames.length;
          null != a
            ? Ka.verbose(
                "Loaded asset library: " + a + " [" + b + "/" + c + "]",
                {
                  fileName: "lime/utils/Preloader.hx",
                  lineNumber: 197,
                  className: "lime.utils.Preloader",
                  methodName: "loadedAssetLibrary",
                }
              )
            : Ka.verbose("Loaded asset library [" + b + "/" + c + "]", {
                fileName: "lime/utils/Preloader.hx",
                lineNumber: 201,
                className: "lime.utils.Preloader",
                methodName: "loadedAssetLibrary",
              });
          this.updateProgress();
        },
        start: function () {
          this.complete ||
            this.simulateProgress ||
            !this.preloadComplete ||
            ((this.complete = !0), this.onComplete.dispatch());
        },
        update: function (a, b) {},
        updateProgress: function () {
          var a = this;
          this.simulateProgress ||
            this.onProgress.dispatch(this.bytesLoaded, this.bytesTotal);
          if (
            this.loadedLibraries == this.libraries.length &&
            !this.initLibraryNames
          ) {
            this.initLibraryNames = !0;
            for (var b = 0, c = this.libraryNames; b < c.length; ) {
              var d = [c[b]];
              ++b;
              Ka.verbose("Preloading asset library: " + d[0], {
                fileName: "lime/utils/Preloader.hx",
                lineNumber: 239,
                className: "lime.utils.Preloader",
                methodName: "updateProgress",
              });
              ra.loadLibrary(d[0])
                .onProgress(
                  (function (b) {
                    return function (c, d) {
                      0 < d &&
                        (Object.prototype.hasOwnProperty.call(
                          a.bytesTotalCache.h,
                          b[0]
                        ) ||
                          ((a.bytesTotalCache.h[b[0]] = d),
                          (a.bytesTotal += d - 200)),
                        c > d && (c = d),
                        Object.prototype.hasOwnProperty.call(
                          a.bytesLoadedCache2.h,
                          b[0]
                        )
                          ? (a.bytesLoaded += c - a.bytesLoadedCache2.h[b[0]])
                          : (a.bytesLoaded += c),
                        (a.bytesLoadedCache2.h[b[0]] = c),
                        a.simulateProgress ||
                          a.onProgress.dispatch(a.bytesLoaded, a.bytesTotal));
                    };
                  })(d)
                )
                .onComplete(
                  (function (b) {
                    return function (c) {
                      c = 200;
                      Object.prototype.hasOwnProperty.call(
                        a.bytesTotalCache.h,
                        b[0]
                      ) && (c = a.bytesTotalCache.h[b[0]]);
                      Object.prototype.hasOwnProperty.call(
                        a.bytesLoadedCache2.h,
                        b[0]
                      )
                        ? (a.bytesLoaded += c - a.bytesLoadedCache2.h[b[0]])
                        : (a.bytesLoaded += c);
                      a.loadedAssetLibrary(b[0]);
                    };
                  })(d)
                )
                .onError(
                  (function () {
                    return function (a) {
                      Ka.error(a, {
                        fileName: "lime/utils/Preloader.hx",
                        lineNumber: 293,
                        className: "lime.utils.Preloader",
                        methodName: "updateProgress",
                      });
                    };
                  })()
                );
            }
          }
          this.simulateProgress ||
            this.loadedLibraries !=
              this.libraries.length + this.libraryNames.length ||
            (this.preloadComplete ||
              ((this.preloadComplete = !0),
              Ka.verbose("Preload complete", {
                fileName: "lime/utils/Preloader.hx",
                lineNumber: 306,
                className: "lime.utils.Preloader",
                methodName: "updateProgress",
              })),
            this.start());
        },
        __class__: Hm,
      };
      var sa = function () {};
      h["openfl.Lib"] = sa;
      sa.__name__ = "openfl.Lib";
      sa.__properties__ = { get_current: "get_current" };
      sa.getTimer = function () {
        return Pc.getTimer();
      };
      sa.getURL = function (a, b) {
        sa.navigateToURL(a, b);
      };
      sa.navigateToURL = function (a, b) {
        null == b && (b = "_blank");
        var c = a.url;
        if (zb.typeof(a.data) == Lc.TObject) {
          for (var d = "", e = qa.fields(a.data), f = 0; f < e.length; ) {
            var k = e[f];
            ++f;
            0 < d.length && (d += "&");
            var g = encodeURIComponent(k) + "=";
            k = M.string(qa.field(a.data, k));
            d += g + encodeURIComponent(k);
          }
          c = -1 < c.indexOf("?") ? c + ("&" + d) : c + ("?" + d);
        }
        Pc.openURL(c, b);
      };
      sa.setTimeout = function (a, b, c) {
        var d = ++sa.__lastTimerID,
          e = sa.__timers;
        b = yg.delay(function () {
          sa.__timers.remove(d);
          a.apply(a, null == c ? [] : c);
        }, b);
        e.h[d] = b;
        return d;
      };
      sa.get_current = function () {
        null == td.current && (td.current = new Cj());
        return td.current;
      };
      var Pl = function (a, b, c) {
        null == b && (b = !1);
        null == a && (a = 0);
        null == c && (c = []);
        this.__array = c;
        0 < a && this.set_length(a);
        this.fixed = b;
      };
      h["openfl._Vector.BoolVector"] = Pl;
      Pl.__name__ = "openfl._Vector.BoolVector";
      Pl.__interfaces__ = [na];
      Pl.prototype = {
        toJSON: function () {
          return this.__array;
        },
        set_length: function (a) {
          if (!this.fixed) {
            var b = this.__array.length;
            0 > a && (a = 0);
            if (a > b)
              for (; b < a; ) {
                var c = b++;
                this.__array[c] = !1;
              }
            else for (; this.__array.length > a; ) this.__array.pop();
          }
          return this.__array.length;
        },
        __class__: Pl,
        __properties__: { set_length: "set_length" },
      };
      var Ql = function (a, b, c) {
        null == b && (b = !1);
        null == a && (a = 0);
        null == c && (c = []);
        this.__array = c;
        0 < a && this.set_length(a);
        this.fixed = b;
      };
      h["openfl._Vector.FunctionVector"] = Ql;
      Ql.__name__ = "openfl._Vector.FunctionVector";
      Ql.__interfaces__ = [na];
      Ql.prototype = {
        toJSON: function () {
          return this.__array;
        },
        set_length: function (a) {
          if (!this.fixed) {
            var b = this.__array.length;
            0 > a && (a = 0);
            if (a > b)
              for (; b < a; ) {
                var c = b++;
                this.__array[c] = null;
              }
            else for (; this.__array.length > a; ) this.__array.pop();
          }
          return this.__array.length;
        },
        __class__: Ql,
        __properties__: { set_length: "set_length" },
      };
      var Jh = function (a, b, c) {
        null == b && (b = !1);
        null == a && (a = 0);
        null == c && (c = []);
        this.__array = c;
        0 < a && this.set_length(a);
        this.fixed = b;
      };
      h["openfl._Vector.IntVector"] = Jh;
      Jh.__name__ = "openfl._Vector.IntVector";
      Jh.__interfaces__ = [na];
      Jh.prototype = {
        get: function (a) {
          return this.__array[a];
        },
        insertAt: function (a, b) {
          (!this.fixed || a < this.__array.length) &&
            this.__array.splice(a, 0, b);
        },
        iterator: function () {
          return new Vf(this.__array);
        },
        push: function (a) {
          return this.fixed ? this.__array.length : this.__array.push(a);
        },
        set: function (a, b) {
          return !this.fixed || a < this.__array.length
            ? (this.__array[a] = b)
            : b;
        },
        splice: function (a, b) {
          return new Jh(0, !1, this.__array.splice(a, b));
        },
        toJSON: function () {
          return this.__array;
        },
        get_length: function () {
          return this.__array.length;
        },
        set_length: function (a) {
          if (!this.fixed) {
            var b = this.__array.length;
            0 > a && (a = 0);
            if (a > b)
              for (; b < a; ) {
                var c = b++;
                this.__array[c] = 0;
              }
            else for (; this.__array.length > a; ) this.__array.pop();
          }
          return this.__array.length;
        },
        __class__: Jh,
        __properties__: { set_length: "set_length", get_length: "get_length" },
      };
      var Ii = function () {
        B.call(this);
        null == td.application && (td.application = this);
        null == td.current && (td.current = new Cj());
        td.current.__loaderInfo = Tf.create(null);
        td.current.__loaderInfo.content = td.current;
      };
      h["openfl.display.Application"] = Ii;
      Ii.__name__ = "openfl.display.Application";
      Ii.__super__ = B;
      Ii.prototype = q(B.prototype, {
        createWindow: function (a) {
          var b = new Dj(this, a);
          this.__windows.push(b);
          this.__windowByID.h[b.id] = b;
          var c = n(this, this.__onWindowClose);
          b.onClose.add(
            function () {
              c(b);
            },
            !1,
            -1e4
          );
          null == this.__window &&
            ((this.__window = b),
            b.onActivate.add(n(this, this.onWindowActivate)),
            b.onRenderContextLost.add(n(this, this.onRenderContextLost)),
            b.onRenderContextRestored.add(
              n(this, this.onRenderContextRestored)
            ),
            b.onDeactivate.add(n(this, this.onWindowDeactivate)),
            b.onDropFile.add(n(this, this.onWindowDropFile)),
            b.onEnter.add(n(this, this.onWindowEnter)),
            b.onExpose.add(n(this, this.onWindowExpose)),
            b.onFocusIn.add(n(this, this.onWindowFocusIn)),
            b.onFocusOut.add(n(this, this.onWindowFocusOut)),
            b.onFullscreen.add(n(this, this.onWindowFullscreen)),
            b.onKeyDown.add(n(this, this.onKeyDown)),
            b.onKeyUp.add(n(this, this.onKeyUp)),
            b.onLeave.add(n(this, this.onWindowLeave)),
            b.onMinimize.add(n(this, this.onWindowMinimize)),
            b.onMouseDown.add(n(this, this.onMouseDown)),
            b.onMouseMove.add(n(this, this.onMouseMove)),
            b.onMouseMoveRelative.add(n(this, this.onMouseMoveRelative)),
            b.onMouseUp.add(n(this, this.onMouseUp)),
            b.onMouseWheel.add(n(this, this.onMouseWheel)),
            b.onMove.add(n(this, this.onWindowMove)),
            b.onRender.add(n(this, this.render)),
            b.onResize.add(n(this, this.onWindowResize)),
            b.onRestore.add(n(this, this.onWindowRestore)),
            b.onTextEdit.add(n(this, this.onTextEdit)),
            b.onTextInput.add(n(this, this.onTextInput)),
            this.onWindowCreate());
          this.onCreateWindow.dispatch(b);
          return b;
        },
        exec: function () {
          return B.prototype.exec.call(this);
        },
        __checkForAllWindowsClosed: function () {
          0 < this.__windows.length ||
            B.prototype.__checkForAllWindowsClosed.call(this);
        },
        __onModuleExit: function (a) {
          this.onExit.canceled ||
            (td.application == this && (td.application = null),
            B.prototype.__onModuleExit.call(this, a));
        },
        __class__: Ii,
      });
      var lc = function (a, b, c) {
        null == c && (c = !1);
        z.call(this);
        this.__drawableType = 2;
        this.__bitmapData = a;
        this.pixelSnapping = b;
        this.smoothing = c;
        null == b && (this.pixelSnapping = 1);
      };
      h["openfl.display.Bitmap"] = lc;
      lc.__name__ = "openfl.display.Bitmap";
      lc.__super__ = z;
      lc.prototype = q(z.prototype, {
        __enterFrame: function (a) {
          null == this.__bitmapData ||
            null == this.__bitmapData.image ||
            this.__bitmapData.image.version == this.__imageVersion ||
            this.__renderDirty ||
            ((this.__renderDirty = !0), this.__setParentRenderDirty());
        },
        __getBounds: function (a, b) {
          var c = ha.__pool.get();
          null != this.__bitmapData
            ? c.setTo(0, 0, this.__bitmapData.width, this.__bitmapData.height)
            : c.setTo(0, 0, 0, 0);
          c.__transform(c, b);
          a.__expand(c.x, c.y, c.width, c.height);
          ha.__pool.release(c);
        },
        __hitTest: function (a, b, c, d, e, f) {
          if (
            !f.get_visible() ||
            this.__isMask ||
            null == this.__bitmapData ||
            (null != this.get_mask() && !this.get_mask().__hitTestMask(a, b))
          )
            return !1;
          this.__getRenderTransform();
          var k = this.__renderTransform,
            g = k.a * k.d - k.b * k.c;
          c = 0 == g ? -k.tx : (1 / g) * (k.c * (k.ty - b) + k.d * (a - k.tx));
          k = this.__renderTransform;
          g = k.a * k.d - k.b * k.c;
          a = 0 == g ? -k.ty : (1 / g) * (k.a * (b - k.ty) + k.b * (k.tx - a));
          if (
            0 < c &&
            0 < a &&
            c <= this.__bitmapData.width &&
            a <= this.__bitmapData.height
          ) {
            if (null != this.__scrollRect && !this.__scrollRect.contains(c, a))
              return !1;
            null == d || e || d.push(f);
            return !0;
          }
          return !1;
        },
        __hitTestMask: function (a, b) {
          if (null == this.__bitmapData) return !1;
          this.__getRenderTransform();
          var c = this.__renderTransform,
            d = c.a * c.d - c.b * c.c,
            e =
              0 == d ? -c.tx : (1 / d) * (c.c * (c.ty - b) + c.d * (a - c.tx));
          c = this.__renderTransform;
          d = c.a * c.d - c.b * c.c;
          a = 0 == d ? -c.ty : (1 / d) * (c.a * (b - c.ty) + c.b * (c.tx - a));
          return 0 < e &&
            0 < a &&
            e <= this.__bitmapData.width &&
            a <= this.__bitmapData.height
            ? !0
            : !1;
        },
        get_bitmapData: function () {
          return this.__bitmapData;
        },
        set_bitmapData: function (a) {
          this.__bitmapData = a;
          this.smoothing = !1;
          this.__renderDirty ||
            ((this.__renderDirty = !0), this.__setParentRenderDirty());
          this.__imageVersion = -1;
          return this.__bitmapData;
        },
        set_height: function (a) {
          null != this.__bitmapData
            ? this.set_scaleY(a / this.__bitmapData.height)
            : this.set_scaleY(0);
          return a;
        },
        set_width: function (a) {
          null != this.__bitmapData
            ? this.set_scaleX(a / this.__bitmapData.width)
            : this.set_scaleX(0);
          return a;
        },
        __class__: lc,
        __properties__: q(z.prototype.__properties__, {
          set_bitmapData: "set_bitmapData",
          get_bitmapData: "get_bitmapData",
        }),
      });
      var Td = function () {
        pa.call(this);
        this.__allowSmoothing = !0;
        this.__pixelRatio = 1;
        this.__tempColorTransform = new Qb();
        this.__worldAlpha = 1;
      };
      h["openfl.display.DisplayObjectRenderer"] = Td;
      Td.__name__ = "openfl.display.DisplayObjectRenderer";
      Td.__super__ = pa;
      Td.prototype = q(pa.prototype, {
        __clear: function () {},
        __getAlpha: function (a) {
          return a * this.__worldAlpha;
        },
        __popMaskObject: function (a, b) {},
        __pushMaskObject: function (a, b) {},
        __render: function (a) {},
        __renderEvent: function (a) {
          if (null != a.__customRenderEvent && a.__renderable) {
            a.__customRenderEvent.allowSmoothing = this.__allowSmoothing;
            a.__customRenderEvent.objectMatrix.copyFrom(a.__renderTransform);
            a.__customRenderEvent.objectColorTransform.__copyFrom(
              a.__worldColorTransform
            );
            a.__customRenderEvent.renderer = this;
            switch (this.__type) {
              case "cairo":
                a.__customRenderEvent.type = "renderCairo";
                break;
              case "canvas":
                a.__customRenderEvent.type = "renderCanvas";
                break;
              case "dom":
                a.__customRenderEvent.type =
                  null != a.stage && a.__worldVisible
                    ? "renderDOM"
                    : "clearDOM";
                break;
              case "opengl":
                this.__cleared || this.__clear();
                this.setShader(a.__worldShader);
                this.__context3D.__flushGL();
                a.__customRenderEvent.type = "renderOpenGL";
                break;
              default:
                return;
            }
            this.__setBlendMode(a.__worldBlendMode);
            this.__pushMaskObject(a);
            a.dispatchEvent(a.__customRenderEvent);
            this.__popMaskObject(a);
            "opengl" == this.__type && this.setViewport();
          }
        },
        __resize: function (a, b) {},
        __setBlendMode: function (a) {},
        __shouldCacheHardware: function (a, b) {
          if (null == a) return null;
          switch (a.__drawableType) {
            case 4:
            case 5:
              if (1 == b) return !0;
              b = this.__shouldCacheHardware_DisplayObject(a, b);
              if (1 == b) return !0;
              if (null != a.__children) {
                var c = 0;
                for (a = a.__children; c < a.length; ) {
                  var d = a[c];
                  ++c;
                  b = this.__shouldCacheHardware_DisplayObject(d, b);
                  if (1 == b) return !0;
                }
              }
              return b;
            case 7:
              return 1 == b ? !0 : !1;
            case 9:
              return !0;
            default:
              return this.__shouldCacheHardware_DisplayObject(a, b);
          }
        },
        __shouldCacheHardware_DisplayObject: function (a, b) {
          return 1 == b || null != a.__filters
            ? !0
            : 0 == b || (null != a.__graphics && !bc.isCompatible(a.__graphics))
            ? !1
            : null;
        },
        __updateCacheBitmap: function (a, b) {
          if (null == a) return !1;
          switch (a.__drawableType) {
            case 2:
              var c = a;
              if (
                null == c.__bitmapData ||
                (null == c.__filters &&
                  "opengl" == this.__type &&
                  null == c.__cacheBitmap)
              )
                return !1;
              b =
                null != c.__bitmapData.image &&
                c.__bitmapData.image.version != c.__imageVersion;
              break;
            case 7:
              var d = a;
              if (
                null == d.__filters &&
                "opengl" == this.__type &&
                null == d.__cacheBitmap &&
                !d.__domRender
              )
                return !1;
              b && (d.__renderDirty = !0);
              b = b || d.__dirty;
              break;
            case 9:
              if (
                null == a.__filters &&
                "opengl" == this.__type &&
                null == a.__cacheBitmap
              )
                return !1;
          }
          if (a.__isCacheBitmapRender) return !1;
          d = Qb.__pool.get();
          d.__copyFrom(a.__worldColorTransform);
          null != this.__worldColorTransform &&
            d.__combine(this.__worldColorTransform);
          var e = !1;
          if (
            a.get_cacheAsBitmap() ||
            ("opengl" != this.__type && !d.__isDefault(!0))
          ) {
            e = null;
            var f =
                (b =
                  null == a.__cacheBitmap ||
                  (a.__renderDirty &&
                    (b || (null != a.__children && 0 < a.__children.length))) ||
                  a.opaqueBackground != a.__cacheBitmapBackground) ||
                (null != a.__graphics && a.__graphics.__softwareDirty) ||
                !a.__cacheBitmapColorTransform.__equals(d, !0),
              k = b || (null != a.__graphics && a.__graphics.__hardwareDirty),
              g = this.__type;
            if (f || k)
              "opengl" == g &&
                0 == this.__shouldCacheHardware(a, null) &&
                (g = "canvas"),
                !f || ("canvas" != g && "cairo" != g) || (b = !0),
                k && "opengl" == g && (b = !0);
            f =
              b || !a.__cacheBitmap.__worldTransform.equals(a.__worldTransform);
            c = null != a.__filters;
            if ("dom" == this.__type && !c) return !1;
            if (c && !b)
              for (var l = 0, h = a.__filters; l < h.length; ) {
                var p = h[l];
                ++l;
                if (p.__renderDirty) {
                  b = !0;
                  break;
                }
              }
            null == a.__cacheBitmapMatrix && (a.__cacheBitmapMatrix = new xa());
            l =
              null != a.__cacheAsBitmapMatrix
                ? a.__cacheAsBitmapMatrix
                : a.__renderTransform;
            b ||
              (l.a == a.__cacheBitmapMatrix.a &&
                l.b == a.__cacheBitmapMatrix.b &&
                l.c == a.__cacheBitmapMatrix.c &&
                l.d == a.__cacheBitmapMatrix.d) ||
              (b = !0);
            !b &&
              "opengl" != this.__type &&
              null != a.__cacheBitmapData &&
              null != a.__cacheBitmapData.image &&
              a.__cacheBitmapData.image.version <
                a.__cacheBitmapData.__textureVersion &&
              (b = !0);
            if (!b)
              for (k = a; null != k; ) {
                if (null != k.get_scrollRect()) {
                  f = !0;
                  break;
                }
                k = k.parent;
              }
            a.__cacheBitmapMatrix.copyFrom(l);
            a.__cacheBitmapMatrix.tx = 0;
            var m = (k = a.__cacheBitmapMatrix.ty = 0),
              n = 0,
              q = 0,
              z = (p = 0);
            h = this.__pixelRatio;
            if (f || b)
              (e = ha.__pool.get()),
                a.__getFilterBounds(e, a.__cacheBitmapMatrix),
                (n = 0 < e.width ? Math.ceil((e.width + 1) * h) : 0),
                (q = 0 < e.height ? Math.ceil((e.height + 1) * h) : 0),
                (p = 0 < e.x ? Math.ceil(e.x) : Math.floor(e.x)),
                (z = 0 < e.y ? Math.ceil(e.y) : Math.floor(e.y)),
                null != a.__cacheBitmapData
                  ? n > a.__cacheBitmapData.width ||
                    q > a.__cacheBitmapData.height
                    ? ((k = Math.ceil(
                        Math.max(1.25 * n, a.__cacheBitmapData.width)
                      )),
                      (m = Math.ceil(
                        Math.max(1.25 * q, a.__cacheBitmapData.height)
                      )),
                      (b = !0))
                    : ((k = a.__cacheBitmapData.width),
                      (m = a.__cacheBitmapData.height))
                  : ((k = n), (m = q));
            if (b)
              if (
                ((f = !0),
                (a.__cacheBitmapBackground = a.opaqueBackground),
                0.5 <= n && 0.5 <= q)
              ) {
                var t = null != a.opaqueBackground && (k != n || m != q),
                  w =
                    null != a.opaqueBackground
                      ? -16777216 | a.opaqueBackground
                      : 0,
                  x = t ? 0 : w,
                  D = "opengl" == this.__type;
                null == a.__cacheBitmapData ||
                k > a.__cacheBitmapData.width ||
                m > a.__cacheBitmapData.height
                  ? ((a.__cacheBitmapData = new S(k, m, !0, x)),
                    null == a.__cacheBitmap && (a.__cacheBitmap = new lc()),
                    (a.__cacheBitmap.__bitmapData = a.__cacheBitmapData),
                    (a.__cacheBitmapRenderer = null))
                  : a.__cacheBitmapData.__fillRect(
                      a.__cacheBitmapData.rect,
                      x,
                      D
                    );
                t &&
                  (e.setTo(0, 0, n, q),
                  a.__cacheBitmapData.__fillRect(e, w, D));
              } else
                return (
                  Qb.__pool.release(d),
                  (a.__cacheBitmap = null),
                  (a.__cacheBitmapData = null),
                  (a.__cacheBitmapData2 = null),
                  (a.__cacheBitmapData3 = null),
                  (a.__cacheBitmapRenderer = null),
                  7 == a.__drawableType &&
                    ((d = a),
                    null != d.__cacheBitmap &&
                      ((d.__cacheBitmap.__renderTransform.tx -=
                        d.__offsetX * h),
                      (d.__cacheBitmap.__renderTransform.ty -=
                        d.__offsetY * h))),
                  !0
                );
            else
              (a.__cacheBitmapData = a.__cacheBitmap.get_bitmapData()),
                (a.__cacheBitmapData2 = null),
                (a.__cacheBitmapData3 = null);
            if (f || b)
              a.__cacheBitmap.__worldTransform.copyFrom(a.__worldTransform),
                l == a.__renderTransform
                  ? (a.__cacheBitmap.__renderTransform.identity(),
                    a.__cacheBitmap.__renderTransform.scale(1 / h, 1 / h),
                    (a.__cacheBitmap.__renderTransform.tx =
                      a.__renderTransform.tx + p),
                    (a.__cacheBitmap.__renderTransform.ty =
                      a.__renderTransform.ty + z))
                  : (a.__cacheBitmap.__renderTransform.copyFrom(
                      a.__cacheBitmapMatrix
                    ),
                    a.__cacheBitmap.__renderTransform.invert(),
                    a.__cacheBitmap.__renderTransform.concat(
                      a.__renderTransform
                    ),
                    (a.__cacheBitmap.__renderTransform.a *= 1 / h),
                    (a.__cacheBitmap.__renderTransform.d *= 1 / h),
                    (a.__cacheBitmap.__renderTransform.tx += p),
                    (a.__cacheBitmap.__renderTransform.ty += z));
            a.__cacheBitmap.smoothing = this.__allowSmoothing;
            a.__cacheBitmap.__renderable = a.__renderable;
            a.__cacheBitmap.__worldAlpha = a.__worldAlpha;
            a.__cacheBitmap.__worldBlendMode = a.__worldBlendMode;
            a.__cacheBitmap.__worldShader = a.__worldShader;
            a.__cacheBitmap.set_mask(a.__mask);
            if (b) {
              if (
                null == a.__cacheBitmapRenderer ||
                g != a.__cacheBitmapRenderer.__type
              )
                "opengl" == g
                  ? (a.__cacheBitmapRenderer = new mb(
                      za.__cast(this, mb).__context3D,
                      a.__cacheBitmapData
                    ))
                  : (null == a.__cacheBitmapData.image &&
                      ((a.__cacheBitmapData = new S(
                        k,
                        m,
                        !0,
                        null != a.opaqueBackground
                          ? -16777216 | a.opaqueBackground
                          : 0
                      )),
                      (a.__cacheBitmap.__bitmapData = a.__cacheBitmapData)),
                    Ra.convertToCanvas(a.__cacheBitmapData.image),
                    (a.__cacheBitmapRenderer = new ug(
                      a.__cacheBitmapData.image.buffer.__srcContext
                    ))),
                  (a.__cacheBitmapRenderer.__worldTransform = new xa()),
                  (a.__cacheBitmapRenderer.__worldColorTransform = new Qb());
              null == a.__cacheBitmapColorTransform &&
                (a.__cacheBitmapColorTransform = new Qb());
              a.__cacheBitmapRenderer.__stage = a.stage;
              a.__cacheBitmapRenderer.__allowSmoothing = this.__allowSmoothing;
              a.__cacheBitmapRenderer.__setBlendMode(10);
              a.__cacheBitmapRenderer.__worldAlpha = 1 / a.__worldAlpha;
              a.__cacheBitmapRenderer.__worldTransform.copyFrom(
                a.__renderTransform
              );
              a.__cacheBitmapRenderer.__worldTransform.invert();
              a.__cacheBitmapRenderer.__worldTransform.concat(
                a.__cacheBitmapMatrix
              );
              a.__cacheBitmapRenderer.__worldTransform.tx -= p;
              a.__cacheBitmapRenderer.__worldTransform.ty -= z;
              a.__cacheBitmapRenderer.__worldTransform.scale(h, h);
              a.__cacheBitmapRenderer.__pixelRatio = h;
              a.__cacheBitmapRenderer.__worldColorTransform.__copyFrom(d);
              a.__cacheBitmapRenderer.__worldColorTransform.__invert();
              a.__isCacheBitmapRender = !0;
              if ("opengl" == a.__cacheBitmapRenderer.__type) {
                t = a.__cacheBitmapRenderer;
                w = t.__context3D;
                x = w.__state.renderToTexture;
                D = w.__state.renderToTextureDepthStencil;
                var y = w.__state.renderToTextureAntiAlias,
                  A = w.__state.renderToTextureSurfaceSelector,
                  C = this.__blendMode;
                this.__suspendClipAndMask();
                t.__copyShader(this);
                a.__cacheBitmapData.__setUVRect(w, 0, 0, n, q);
                t.__setRenderTarget(a.__cacheBitmapData);
                null != a.__cacheBitmapData.image &&
                  (a.__cacheBitmapData.__textureVersion =
                    a.__cacheBitmapData.image.version + 1);
                a.__cacheBitmapData.__drawGL(a, t);
                if (c) {
                  var E = !1;
                  l = 0;
                  for (h = a.__filters; l < h.length; )
                    (p = h[l]), ++l, p.__preserveObject && (E = !0);
                  c = a.__cacheBitmapData;
                  z = null;
                  null == a.__cacheBitmapData2 ||
                  k > a.__cacheBitmapData2.width ||
                  m > a.__cacheBitmapData2.height
                    ? (a.__cacheBitmapData2 = new S(k, m, !0, 0))
                    : (a.__cacheBitmapData2.fillRect(
                        a.__cacheBitmapData2.rect,
                        0
                      ),
                      null != a.__cacheBitmapData2.image &&
                        (a.__cacheBitmapData2.__textureVersion =
                          a.__cacheBitmapData2.image.version + 1));
                  a.__cacheBitmapData2.__setUVRect(w, 0, 0, n, q);
                  g = a.__cacheBitmapData2;
                  E &&
                    (null == a.__cacheBitmapData3 ||
                    k > a.__cacheBitmapData3.width ||
                    m > a.__cacheBitmapData3.height
                      ? (a.__cacheBitmapData3 = new S(k, m, !0, 0))
                      : (a.__cacheBitmapData3.fillRect(
                          a.__cacheBitmapData3.rect,
                          0
                        ),
                        null != a.__cacheBitmapData3.image &&
                          (a.__cacheBitmapData3.__textureVersion =
                            a.__cacheBitmapData3.image.version + 1)),
                    a.__cacheBitmapData3.__setUVRect(w, 0, 0, n, q),
                    (z = a.__cacheBitmapData3));
                  t.__setBlendMode(10);
                  t.__worldAlpha = 1;
                  t.__worldTransform.identity();
                  t.__worldColorTransform.__identity();
                  l = 0;
                  for (h = a.__filters; l < h.length; ) {
                    p = h[l];
                    ++l;
                    p.__preserveObject &&
                      (t.__setRenderTarget(z),
                      t.__renderFilterPass(
                        c,
                        t.__defaultDisplayShader,
                        p.__smooth
                      ));
                    m = 0;
                    for (n = p.__numShaderPasses; m < n; )
                      (k = m++),
                        (k = p.__initShader(
                          t,
                          k,
                          p.__preserveObject ? z : null
                        )),
                        t.__setBlendMode(p.__shaderBlendMode),
                        t.__setRenderTarget(g),
                        t.__renderFilterPass(c, k, p.__smooth),
                        (k = c),
                        (c = g),
                        (g = k);
                    p.__renderDirty = !1;
                  }
                  a.__cacheBitmap.__bitmapData = c;
                }
                this.__blendMode = 10;
                this.__setBlendMode(C);
                this.__copyShader(t);
                null != x
                  ? w.setRenderToTexture(x, D, y, A)
                  : w.setRenderToBackBuffer();
                this.__resumeClipAndMask(t);
                this.setViewport();
                a.__cacheBitmapColorTransform.__copyFrom(d);
              } else {
                a.__cacheBitmapData.__drawCanvas(a, a.__cacheBitmapRenderer);
                if (c) {
                  E = n = !1;
                  l = 0;
                  for (h = a.__filters; l < h.length; )
                    (p = h[l]),
                      ++l,
                      p.__needSecondBitmapData && (n = !0),
                      p.__preserveObject && (E = !0);
                  c = a.__cacheBitmapData;
                  z = null;
                  n
                    ? (null == a.__cacheBitmapData2 ||
                      null == a.__cacheBitmapData2.image ||
                      k > a.__cacheBitmapData2.width ||
                      m > a.__cacheBitmapData2.height
                        ? (a.__cacheBitmapData2 = new S(k, m, !0, 0))
                        : a.__cacheBitmapData2.fillRect(
                            a.__cacheBitmapData2.rect,
                            0
                          ),
                      (g = a.__cacheBitmapData2))
                    : (g = c);
                  E &&
                    (null == a.__cacheBitmapData3 ||
                    null == a.__cacheBitmapData3.image ||
                    k > a.__cacheBitmapData3.width ||
                    m > a.__cacheBitmapData3.height
                      ? (a.__cacheBitmapData3 = new S(k, m, !0, 0))
                      : a.__cacheBitmapData3.fillRect(
                          a.__cacheBitmapData3.rect,
                          0
                        ),
                    (z = a.__cacheBitmapData3));
                  null == a.__tempPoint && (a.__tempPoint = new gb());
                  m = a.__tempPoint;
                  l = 0;
                  for (h = a.__filters; l < h.length; )
                    (p = h[l]),
                      ++l,
                      p.__preserveObject && z.copyPixels(c, c.rect, m),
                      (k = p.__applyFilter(g, c, c.rect, m)),
                      p.__preserveObject &&
                        k.draw(
                          z,
                          null,
                          null != a.__objectTransform
                            ? a.__objectTransform.__colorTransform
                            : null
                        ),
                      (p.__renderDirty = !1),
                      n && k == g && ((k = c), (c = g), (g = k));
                  a.__cacheBitmapData != c &&
                    ((k = a.__cacheBitmapData),
                    (a.__cacheBitmapData = c),
                    (a.__cacheBitmapData2 = k),
                    (a.__cacheBitmap.__bitmapData = a.__cacheBitmapData),
                    (a.__cacheBitmapRenderer = null));
                  a.__cacheBitmap.__imageVersion =
                    a.__cacheBitmapData.__textureVersion;
                }
                a.__cacheBitmapColorTransform.__copyFrom(d);
                a.__cacheBitmapColorTransform.__isDefault(!0) ||
                  ((a.__cacheBitmapColorTransform.alphaMultiplier = 1),
                  a.__cacheBitmapData.colorTransform(
                    a.__cacheBitmapData.rect,
                    a.__cacheBitmapColorTransform
                  ));
              }
              a.__isCacheBitmapRender = !1;
            }
            (f || b) && ha.__pool.release(e);
            e = f;
          } else
            null != a.__cacheBitmap &&
              ("dom" == this.__type &&
                this.__renderDrawableClear(a.__cacheBitmap),
              (a.__cacheBitmap = null),
              (a.__cacheBitmapData = null),
              (a.__cacheBitmapData2 = null),
              (a.__cacheBitmapData3 = null),
              (a.__cacheBitmapColorTransform = null),
              (a.__cacheBitmapRenderer = null),
              (e = !0));
          Qb.__pool.release(d);
          e &&
            7 == a.__drawableType &&
            ((d = a),
            null != d.__cacheBitmap &&
              ((d.__cacheBitmap.__renderTransform.tx -= d.__offsetX),
              (d.__cacheBitmap.__renderTransform.ty -= d.__offsetY)));
          return e;
        },
        __class__: Td,
      });
      var Rl = function (a) {
        Td.call(this);
      };
      h["openfl.display.CairoRenderer"] = Rl;
      Rl.__name__ = "openfl.display.CairoRenderer";
      Rl.__super__ = Td;
      Rl.prototype = q(Td.prototype, {
        applyMatrix: function (a, b) {
          null == b && (b = this.cairo);
          this.__matrix.copyFrom(a);
          this.cairo == b &&
            null != this.__worldTransform &&
            this.__matrix.concat(this.__worldTransform);
          this.__matrix3.a = this.__matrix.a;
          this.__matrix3.b = this.__matrix.b;
          this.__matrix3.c = this.__matrix.c;
          this.__matrix3.d = this.__matrix.d;
          this.__roundPixels
            ? ((this.__matrix3.tx = Math.round(this.__matrix.tx)),
              (this.__matrix3.ty = Math.round(this.__matrix.ty)))
            : ((this.__matrix3.tx = this.__matrix.tx),
              (this.__matrix3.ty = this.__matrix.ty));
          b.set_matrix(this.__matrix3);
        },
        __clear: function () {
          if (
            null != this.cairo &&
            (this.cairo.identityMatrix(),
            null != this.__stage && this.__stage.__clearBeforeRender)
          ) {
            var a = this.__blendMode;
            this.__setBlendMode(10);
            this.cairo.setSourceRGB(
              this.__stage.__colorSplit[0],
              this.__stage.__colorSplit[1],
              this.__stage.__colorSplit[2]
            );
            this.cairo.paint();
            this.__setBlendMode(a);
          }
        },
        __popMask: function () {
          this.cairo.restore();
        },
        __popMaskObject: function (a, b) {
          null == b && (b = !0);
          a.__isCacheBitmapRender || null == a.__mask || this.__popMask();
          b && null != a.__scrollRect && this.__popMaskRect();
        },
        __popMaskRect: function () {
          this.cairo.restore();
        },
        __pushMask: function (a) {
          this.cairo.save();
          this.applyMatrix(a.__renderTransform, this.cairo);
          this.cairo.newPath();
          this.__renderDrawableMask(a);
          this.cairo.clip();
        },
        __pushMaskObject: function (a, b) {
          null == b && (b = !0);
          b &&
            null != a.__scrollRect &&
            this.__pushMaskRect(a.__scrollRect, a.__renderTransform);
          a.__isCacheBitmapRender ||
            null == a.__mask ||
            this.__pushMask(a.__mask);
        },
        __pushMaskRect: function (a, b) {
          this.cairo.save();
          this.applyMatrix(b, this.cairo);
          this.cairo.newPath();
          this.cairo.rectangle(a.x, a.y, a.width, a.height);
          this.cairo.clip();
        },
        __render: function (a) {
          null != this.cairo && this.__renderDrawable(a);
        },
        __renderDrawable: function (a) {
          if (null != a)
            switch (a.__drawableType) {
              case 6:
                !a.__renderable ||
                  0 >= a.__worldAlpha ||
                  null == a.__currentState ||
                  (this.__pushMaskObject(a),
                  this.__renderDrawable(a.__currentState),
                  this.__popMaskObject(a),
                  this.__renderEvent(a));
            }
        },
        __renderDrawableMask: function (a) {
          if (null != a)
            switch (a.__drawableType) {
              case 2:
                this.cairo.rectangle(0, 0, a.get_width(), a.get_height());
                break;
              case 6:
                this.__renderDrawableMask(a.__currentState);
            }
        },
        __setBlendMode: function (a) {
          null != this.__overrideBlendMode && (a = this.__overrideBlendMode);
          this.__blendMode != a &&
            ((this.__blendMode = a), this.__setBlendModeCairo(this.cairo, a));
        },
        __setBlendModeCairo: function (a, b) {
          switch (b) {
            case 0:
              a.setOperator(12);
              break;
            case 2:
              a.setOperator(17);
              break;
            case 3:
              a.setOperator(23);
              break;
            case 5:
              a.setOperator(21);
              break;
            case 7:
              a.setOperator(2);
              break;
            case 8:
              a.setOperator(18);
              break;
            case 9:
              a.setOperator(14);
              break;
            case 11:
              a.setOperator(16);
              break;
            case 12:
              a.setOperator(15);
              break;
            default:
              a.setOperator(2);
          }
        },
        __class__: Rl,
      });
      var ug = function (a) {
        Td.call(this);
        this.context = a;
        this.__tempMatrix = new xa();
        this.__type = "canvas";
      };
      h["openfl.display.CanvasRenderer"] = ug;
      ug.__name__ = "openfl.display.CanvasRenderer";
      ug.__super__ = Td;
      ug.prototype = q(Td.prototype, {
        applySmoothing: function (a, b) {
          a.imageSmoothingEnabled = b;
        },
        setTransform: function (a, b) {
          null == b
            ? (b = this.context)
            : this.context == b &&
              null != this.__worldTransform &&
              (this.__tempMatrix.copyFrom(a),
              this.__tempMatrix.concat(this.__worldTransform),
              (a = this.__tempMatrix));
          this.__roundPixels
            ? b.setTransform(a.a, a.b, a.c, a.d, a.tx | 0, a.ty | 0)
            : b.setTransform(a.a, a.b, a.c, a.d, a.tx, a.ty);
        },
        __clear: function () {
          if (null != this.__stage) {
            var a = this.__blendMode;
            this.__blendMode = null;
            this.__setBlendMode(10);
            this.context.setTransform(1, 0, 0, 1, 0, 0);
            this.context.globalAlpha = 1;
            !this.__stage.__transparent && this.__stage.__clearBeforeRender
              ? ((this.context.fillStyle = this.__stage.__colorString),
                this.context.fillRect(
                  0,
                  0,
                  this.__stage.stageWidth * this.__stage.window.__scale,
                  this.__stage.stageHeight * this.__stage.window.__scale
                ))
              : this.__stage.__transparent &&
                this.__stage.__clearBeforeRender &&
                this.context.clearRect(
                  0,
                  0,
                  this.__stage.stageWidth * this.__stage.window.__scale,
                  this.__stage.stageHeight * this.__stage.window.__scale
                );
            this.__setBlendMode(a);
          }
        },
        __popMask: function () {
          this.context.restore();
        },
        __popMaskObject: function (a, b) {
          null == b && (b = !0);
          a.__isCacheBitmapRender || null == a.__mask || this.__popMask();
          b && null != a.__scrollRect && this.__popMaskRect();
        },
        __popMaskRect: function () {
          this.context.restore();
        },
        __pushMask: function (a) {
          this.context.save();
          this.setTransform(a.__renderTransform, this.context);
          this.context.beginPath();
          this.__renderDrawableMask(a);
          this.context.closePath();
          this.context.clip();
        },
        __pushMaskObject: function (a, b) {
          null == b && (b = !0);
          b &&
            null != a.__scrollRect &&
            this.__pushMaskRect(a.__scrollRect, a.__renderTransform);
          a.__isCacheBitmapRender ||
            null == a.__mask ||
            this.__pushMask(a.__mask);
        },
        __pushMaskRect: function (a, b) {
          this.context.save();
          this.setTransform(b, this.context);
          this.context.beginPath();
          this.context.rect(a.x, a.y, a.width, a.height);
          this.context.clip();
        },
        __render: function (a) {
          this.__renderDrawable(a);
        },
        __renderDrawable: function (a) {
          if (null != a)
            switch (a.__drawableType) {
              case 0:
                Sl.renderDrawable(a, this);
                break;
              case 2:
                Ej.renderDrawable(a, this);
                break;
              case 3:
                Ah.renderDrawable(a, this);
                break;
              case 4:
              case 5:
                Tl.renderDrawable(a, this);
                break;
              case 6:
                Ul.renderDrawable(a, this);
                break;
              case 7:
                fa.renderDrawable(a, this);
                break;
              case 8:
                Bh.renderDrawable(a, this);
                break;
              case 9:
                Cg.renderDrawable(a, this);
            }
        },
        __renderDrawableMask: function (a) {
          if (null != a)
            switch (a.__drawableType) {
              case 0:
                Sl.renderDrawableMask(a, this);
                break;
              case 2:
                Ej.renderDrawableMask(a, this);
                break;
              case 3:
                Ah.renderDrawableMask(a, this);
                break;
              case 4:
              case 5:
                Tl.renderDrawableMask(a, this);
                break;
              case 6:
                Ul.renderDrawableMask(a, this);
                break;
              case 7:
                fa.renderDrawableMask(a, this);
                break;
              case 8:
                Bh.renderDrawableMask(a, this);
                break;
              case 9:
                Cg.renderDrawableMask(a, this);
            }
        },
        __setBlendMode: function (a) {
          null != this.__overrideBlendMode && (a = this.__overrideBlendMode);
          this.__blendMode != a &&
            ((this.__blendMode = a),
            this.__setBlendModeContext(this.context, a));
        },
        __setBlendModeContext: function (a, b) {
          switch (b) {
            case 0:
              a.globalCompositeOperation = "lighter";
              break;
            case 2:
              a.globalCompositeOperation = "darken";
              break;
            case 3:
              a.globalCompositeOperation = "difference";
              break;
            case 5:
              a.globalCompositeOperation = "hard-light";
              break;
            case 8:
              a.globalCompositeOperation = "lighten";
              break;
            case 9:
              a.globalCompositeOperation = "multiply";
              break;
            case 11:
              a.globalCompositeOperation = "overlay";
              break;
            case 12:
              a.globalCompositeOperation = "screen";
              break;
            default:
              a.globalCompositeOperation = "source-over";
          }
        },
        __class__: ug,
      });
      var bp = {
          toString: function (a) {
            switch (a) {
              case 0:
                return "none";
              case 1:
                return "round";
              case 2:
                return "square";
              default:
                return null;
            }
          },
        },
        Vl = function (a) {
          z.call(this);
          this.__drawableType = 10;
          this.__element = a;
        };
      h["openfl.display.DOMElement"] = Vl;
      Vl.__name__ = "openfl.display.DOMElement";
      Vl.__super__ = z;
      Vl.prototype = q(z.prototype, { __class__: Vl });
      var Fj = function (a) {
        Td.call(this);
        this.element = a;
        z.__supportDOM = !0;
        a = window.getComputedStyle(document.documentElement, "");
        a = (Array.prototype.slice
          .call(a)
          .join("")
          .match(/-(moz|webkit|ms)-/) ||
          ("" === a.OLink && ["", "o"]))[1];
        "WebKit|Moz|MS|O".match(new RegExp("(" + a + ")", "i"));
        a[0].toUpperCase();
        a.substr(1);
        this.__vendorPrefix = a;
        this.__transformProperty =
          "webkit" == a ? "-webkit-transform" : "transform";
        this.__transformOriginProperty =
          "webkit" == a ? "-webkit-transform-origin" : "transform-origin";
        this.__clipRects = [];
        this.__z = this.__numClipRects = 0;
        this.__type = "dom";
        this.__canvasRenderer = new ug(null);
        this.__canvasRenderer.__isDOM = !0;
      };
      h["openfl.display.DOMRenderer"] = Fj;
      Fj.__name__ = "openfl.display.DOMRenderer";
      Fj.__super__ = Td;
      Fj.prototype = q(Td.prototype, {
        __applyStyle: function (a, b, c, d) {
          var e = a.__style;
          if (b && a.__renderTransformChanged) {
            b = a.__renderTransform;
            var f = this.__roundPixels;
            null == f && (f = !1);
            e.setProperty(
              this.__transformProperty,
              f
                ? "matrix3d(" +
                    b.a +
                    ", " +
                    b.b +
                    ", 0, 0, " +
                    b.c +
                    ", " +
                    b.d +
                    ", 0, 0, 0, 0, 1, 0, " +
                    (b.tx | 0) +
                    ", " +
                    (b.ty | 0) +
                    ", 0, 1)"
                : "matrix3d(" +
                    b.a +
                    ", " +
                    b.b +
                    ", 0, 0, " +
                    b.c +
                    ", " +
                    b.d +
                    ", 0, 0, 0, 0, 1, 0, " +
                    b.tx +
                    ", " +
                    b.ty +
                    ", 0, 1)",
              null
            );
          }
          a.__worldZ != ++this.__z &&
            ((a.__worldZ = this.__z),
            e.setProperty(
              "z-index",
              null == a.__worldZ ? "null" : "" + a.__worldZ,
              null
            ));
          c &&
            a.__worldAlphaChanged &&
            (1 > a.__worldAlpha
              ? e.setProperty(
                  "opacity",
                  null == a.__worldAlpha ? "null" : "" + a.__worldAlpha,
                  null
                )
              : e.removeProperty("opacity"));
          d &&
            a.__worldClipChanged &&
            (null == a.__worldClip
              ? e.removeProperty("clip")
              : ((a = a.__worldClip),
                e.setProperty(
                  "clip",
                  "rect(" +
                    a.y +
                    "px, " +
                    a.get_right() +
                    "px, " +
                    a.get_bottom() +
                    "px, " +
                    a.x +
                    "px)",
                  null
                )));
        },
        __initializeElement: function (a, b) {
          var c = (a.__style = b.style);
          c.setProperty("position", "absolute", null);
          c.setProperty("top", "0", null);
          c.setProperty("left", "0", null);
          c.setProperty(this.__transformOriginProperty, "0 0 0", null);
          this.element.appendChild(b);
          a.__worldAlphaChanged = !0;
          a.__renderTransformChanged = !0;
          a.__worldVisibleChanged = !0;
          a.__worldClipChanged = !0;
          a.__worldClip = null;
          a.__worldZ = -1;
        },
        __popMask: function () {
          this.__popMaskRect();
        },
        __popMaskObject: function (a, b) {
          null == b && (b = !0);
          null != a.__mask && this.__popMask();
          b && null != a.__scrollRect && this.__popMaskRect();
        },
        __popMaskRect: function () {
          0 < this.__numClipRects &&
            (this.__numClipRects--,
            (this.__currentClipRect =
              0 < this.__numClipRects
                ? this.__clipRects[this.__numClipRects - 1]
                : null));
        },
        __pushMask: function (a) {
          this.__pushMaskRect(a.getBounds(a), a.__renderTransform);
        },
        __pushMaskObject: function (a, b) {
          null == b && (b = !0);
          b &&
            null != a.__scrollRect &&
            this.__pushMaskRect(a.__scrollRect, a.__renderTransform);
          null != a.__mask && this.__pushMask(a.__mask);
        },
        __pushMaskRect: function (a, b) {
          this.__numClipRects == this.__clipRects.length &&
            (this.__clipRects[this.__numClipRects] = new ha());
          var c = this.__clipRects[this.__numClipRects];
          a.__transform(c, b);
          0 < this.__numClipRects &&
            ((a = this.__clipRects[this.__numClipRects - 1]),
            c.__contract(a.x, a.y, a.width, a.height));
          0 > c.height && (c.height = 0);
          0 > c.width && (c.width = 0);
          this.__currentClipRect = c;
          this.__numClipRects++;
        },
        __render: function (a) {
          this.element.style.background = this.__stage.__transparent
            ? "none"
            : this.__stage.__colorString;
          this.__z = 1;
          this.__renderDrawable(a);
        },
        __renderDrawable: function (a) {
          if (null != a)
            switch (a.__drawableType) {
              case 2:
                dc.renderDrawable(a, this);
                break;
              case 3:
                Ud.renderDrawable(a, this);
                break;
              case 4:
              case 5:
                Wl.renderDrawable(a, this);
                break;
              case 6:
                Xl.renderDrawable(a, this);
                break;
              case 7:
                gh.renderDrawable(a, this);
                break;
              case 8:
                Dg.renderDrawable(a, this);
                break;
              case 9:
                hh.renderDrawable(a, this);
                break;
              case 10:
                null != a.stage && a.__worldVisible && a.__renderable
                  ? (a.__active ||
                      (this.__initializeElement(a, a.__element),
                      (a.__active = !0)),
                    this.__updateClip(a),
                    this.__applyStyle(a, !0, !0, !0))
                  : a.__active &&
                    (this.element.removeChild(a.__element), (a.__active = !1)),
                  Ud.renderDrawable(a, this);
            }
        },
        __renderDrawableClear: function (a) {
          if (null != a)
            switch (a.__drawableType) {
              case 2:
                dc.renderDrawableClear(a, this);
                break;
              case 3:
                Ud.renderDrawableClear(a, this);
                break;
              case 4:
              case 5:
                Wl.renderDrawableClear(a, this);
                break;
              case 6:
                Xl.renderDrawableClear(a, this);
                break;
              case 7:
                gh.renderDrawableClear(a, this);
                break;
              case 8:
                Dg.renderDrawableClear(a, this);
                break;
              case 9:
                hh.renderDrawableClear(a, this);
            }
        },
        __setBlendMode: function (a) {
          null != this.__overrideBlendMode && (a = this.__overrideBlendMode);
          this.__blendMode != a && (this.__blendMode = a);
        },
        __updateClip: function (a) {
          if (null == this.__currentClipRect)
            (a.__worldClipChanged = null != a.__worldClip),
              (a.__worldClip = null);
          else {
            null == a.__worldClip && (a.__worldClip = new ha());
            var b = ha.__pool.get(),
              c = xa.__pool.get();
            c.copyFrom(a.__renderTransform);
            c.invert();
            this.__currentClipRect.__transform(b, c);
            b.equals(a.__worldClip)
              ? (a.__worldClipChanged = !1)
              : (a.__worldClip.copyFrom(b), (a.__worldClipChanged = !0));
            ha.__pool.release(b);
            xa.__pool.release(c);
          }
        },
        __class__: Fj,
      });
      var Yl = function (a) {
        null == this.__glFragmentSource &&
          (this.__glFragmentSource =
            "varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n\t\t}");
        null == this.__glVertexSource &&
          (this.__glVertexSource =
            "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t}");
        Zd.call(this, a);
        this.__isGenerated = !0;
        this.__initGL();
      };
      h["openfl.display.DisplayObjectShader"] = Yl;
      Yl.__name__ = "openfl.display.DisplayObjectShader";
      Yl.__super__ = Zd;
      Yl.prototype = q(Zd.prototype, { __class__: Yl });
      var Kc = function () {
        this.__renderedOnCanvasWhileOnDOM = this.__forceCachedBitmapUpdate = !1;
        this.__mouseScrollVCounter = 0;
        this.condenseWhite = !1;
        hb.call(this);
        this.__drawableType = 7;
        this.__selectionIndex = this.__caretIndex = -1;
        this.__displayAsPassword = !1;
        this.__graphics = new Yd(this);
        this.__textEngine = new Vb(this);
        this.__layoutDirty = !0;
        this.__offsetY = this.__offsetX = 0;
        this.__mouseWheelEnabled = !0;
        this.__text = "";
        this.doubleClickEnabled = !0;
        null == Kc.__defaultTextFormat &&
          ((Kc.__defaultTextFormat = new id(
            "Times New Roman",
            12,
            0,
            !1,
            !1,
            !1,
            "",
            "",
            3,
            0,
            0,
            0,
            0
          )),
          (Kc.__defaultTextFormat.blockIndent = 0),
          (Kc.__defaultTextFormat.bullet = !1),
          (Kc.__defaultTextFormat.letterSpacing = 0),
          (Kc.__defaultTextFormat.kerning = !1));
        this.__textFormat = Kc.__defaultTextFormat.clone();
        this.__textEngine.textFormatRanges.push(
          new Vd(this.__textFormat, 0, 0)
        );
        this.addEventListener("mouseDown", n(this, this.this_onMouseDown));
        this.addEventListener("focusIn", n(this, this.this_onFocusIn));
        this.addEventListener("focusOut", n(this, this.this_onFocusOut));
        this.addEventListener("keyDown", n(this, this.this_onKeyDown));
        this.addEventListener("mouseWheel", n(this, this.this_onMouseWheel));
        this.addEventListener("doubleClick", n(this, this.this_onDoubleClick));
      };
      h["openfl.text.TextField"] = Kc;
      Kc.__name__ = "openfl.text.TextField";
      Kc.__super__ = hb;
      Kc.prototype = q(hb.prototype, {
        appendText: function (a) {
          null != a &&
            "" != a &&
            ((this.__layoutDirty = this.__dirty = !0),
            this.__renderDirty ||
              ((this.__renderDirty = !0), this.__setParentRenderDirty()),
            this.__updateText(this.__text + a),
            (this.__selectionIndex =
              this.__caretIndex =
              this.__textEngine.textFormatRanges.get(
                this.__textEngine.textFormatRanges.get_length() - 1
              ).end =
                this.__text.length));
        },
        getCharBoundaries: function (a) {
          if (0 > a || a > this.__text.length - 1) return null;
          var b = new ha();
          return this.__getCharBoundaries(a, b) ? b : null;
        },
        getLineIndexOfChar: function (a) {
          if (0 > a || a > this.__text.length) return -1;
          this.__updateLayout();
          for (
            var b = this.__textEngine.layoutGroups.iterator();
            b.hasNext();

          ) {
            var c = b.next();
            if (c.startIndex <= a && c.endIndex >= a) return c.lineIndex;
          }
          return -1;
        },
        getLineLength: function (a) {
          this.__updateLayout();
          if (0 > a || a > this.__textEngine.numLines - 1) return 0;
          for (
            var b = -1, c = -1, d = this.__textEngine.layoutGroups.iterator();
            d.hasNext();

          ) {
            var e = d.next();
            if (e.lineIndex == a) -1 == b && (b = e.startIndex);
            else if (e.lineIndex == a + 1) {
              c = e.startIndex;
              break;
            }
          }
          -1 == c && (c = this.__text.length);
          return c - b;
        },
        getLineOffset: function (a) {
          this.__updateLayout();
          if (0 > a || a > this.__textEngine.numLines - 1) return -1;
          for (
            var b = this.__textEngine.layoutGroups.iterator();
            b.hasNext();

          ) {
            var c = b.next();
            if (c.lineIndex == a) return c.startIndex;
          }
          return 0;
        },
        replaceSelectedText: function (a) {
          this.__replaceSelectedText(a, !1);
        },
        replaceText: function (a, b, c) {
          this.__replaceText(a, b, c, !1);
        },
        setSelection: function (a, b) {
          this.__selectionIndex = a;
          this.__caretIndex = b;
          this.__updateScrollV();
          this.__updateScrollH();
          null != this.stage &&
            this.stage.get_focus() == this &&
            (this.__stopCursorTimer(), this.__startCursorTimer());
        },
        setTextFormat: function (a, b, c) {
          null == c && (c = -1);
          null == b && (b = -1);
          var d = this.get_text().length;
          -1 == b ? (-1 == c && (c = d), (b = 0)) : -1 == c && (c = b + 1);
          if (b != c) {
            if (0 > b || 0 >= c || c < b || b >= d || c > d) throw new Li();
            if (0 == b && c == d) {
              this.__textEngine.textFormatRanges.set_length(1);
              var e = this.__textEngine.textFormatRanges.get(0);
              e.start = 0;
              e.end = d;
              e.format.__merge(a);
            } else {
              d = 0;
              for (var f; d < this.__textEngine.textFormatRanges.get_length(); )
                if (
                  ((e = this.__textEngine.textFormatRanges.get(d)), e.end <= b)
                )
                  ++d;
                else if (e.start >= c) break;
                else if (e.start <= b && e.end >= c)
                  if (e.start == b && e.end == c) {
                    e.format = e.format.clone();
                    e.format.__merge(a);
                    break;
                  } else if (e.start == b)
                    (f = new Vd(e.format.clone(), b, c)),
                      f.format.__merge(a),
                      this.__textEngine.textFormatRanges.insertAt(d, f),
                      (e.start = c),
                      (d += 2);
                  else {
                    e.end == c
                      ? ((f = new Vd(e.format.clone(), b, c)),
                        f.format.__merge(a),
                        this.__textEngine.textFormatRanges.insertAt(d + 1, f))
                      : ((f = new Vd(e.format.clone(), b, c)),
                        f.format.__merge(a),
                        this.__textEngine.textFormatRanges.insertAt(d + 1, f),
                        (f = new Vd(e.format.clone(), c, e.end)),
                        this.__textEngine.textFormatRanges.insertAt(d + 2, f));
                    e.end = b;
                    break;
                  }
                else if (e.start >= b && e.end <= c)
                  e.start == b
                    ? ((e.format = e.format.clone()),
                      e.format.__merge(a),
                      (e.end = c))
                    : this.__textEngine.textFormatRanges.removeAt(d);
                else if (e.start > b && e.end > b) {
                  e.start = c;
                  break;
                } else
                  e.start < b && e.end <= c
                    ? ((f = new Vd(e.format.clone(), b, c)),
                      f.format.__merge(a),
                      this.__textEngine.textFormatRanges.insertAt(d + 1, f),
                      (e.end = b),
                      (d += 2))
                    : (++d,
                      Ka.warn(
                        "You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",
                        {
                          fileName: "openfl/text/TextField.hx",
                          lineNumber: 1578,
                          className: "openfl.text.TextField",
                          methodName: "setTextFormat",
                        }
                      ));
            }
            this.__layoutDirty = this.__dirty = !0;
            this.__renderDirty ||
              ((this.__renderDirty = !0), this.__setParentRenderDirty());
          }
        },
        __allowMouseFocus: function () {
          return this.mouseEnabled;
        },
        __caretBeginningOfLine: function () {
          this.__caretIndex = this.getLineOffset(
            this.getLineIndexOfChar(this.__caretIndex)
          );
        },
        __caretBeginningOfNextLine: function () {
          var a = this.getLineIndexOfChar(this.__caretIndex);
          this.__caretIndex =
            a < this.__textEngine.numLines - 1
              ? this.getLineOffset(a + 1)
              : this.__text.length;
        },
        __caretBeginningOfPreviousLine: function () {
          var a = this.getLineIndexOfChar(this.__caretIndex);
          if (0 < a) {
            var b = this.getLineOffset(
              this.getLineIndexOfChar(this.__caretIndex)
            );
            this.__caretIndex =
              this.__caretIndex == b ? this.getLineOffset(a - 1) : b;
          }
        },
        __caretEndOfLine: function () {
          var a = this.getLineIndexOfChar(this.__caretIndex);
          this.__caretIndex =
            a < this.__textEngine.numLines - 1
              ? this.getLineOffset(a + 1) - 1
              : this.__text.length;
        },
        __caretNextCharacter: function () {
          this.__caretIndex < this.__text.length && this.__caretIndex++;
        },
        __caretNextLine: function () {
          var a = this.getLineIndexOfChar(this.__caretIndex);
          a < this.__textEngine.numLines - 1 &&
            (this.__caretIndex = this.__getCharIndexOnDifferentLine(
              this.get_caretIndex(),
              a + 1
            ));
        },
        __caretPreviousCharacter: function () {
          0 < this.__caretIndex && this.__caretIndex--;
        },
        __caretPreviousLine: function () {
          var a = this.getLineIndexOfChar(this.__caretIndex);
          0 < a &&
            (this.__caretIndex = this.__getCharIndexOnDifferentLine(
              this.get_caretIndex(),
              a - 1
            ));
        },
        __disableInput: function () {
          this.__inputEnabled &&
            null != this.stage &&
            (this.stage.window.__backend.setTextInputEnabled(!1),
            this.stage.window.onTextInput.remove(
              n(this, this.window_onTextInput)
            ),
            this.stage.window.onKeyDown.remove(n(this, this.window_onKeyDown)),
            (this.__inputEnabled = !1),
            this.__stopCursorTimer());
        },
        __dispatch: function (a) {
          if (2 == a.eventPhase && "mouseUp" == a.type) {
            var b = this.__getGroup(this.get_mouseX(), this.get_mouseY(), !0);
            null != b &&
              ((b = b.format.url),
              null != b &&
                "" != b &&
                (K.startsWith(b, "event:")
                  ? this.dispatchEvent(
                      new hg("link", !0, !1, X.substr(b, 6, null))
                    )
                  : sa.getURL(new Oi(b))));
          }
          return hb.prototype.__dispatch.call(this, a);
        },
        __enableInput: function () {
          if (null != this.stage) {
            var a = this.getBounds(this.stage);
            a = new Fe(a.x, a.y, a.width, a.height);
            this.stage.window.setTextInputRect(a);
            this.stage.window.__backend.setTextInputEnabled(!0);
            this.__inputEnabled ||
              (this.stage.window.__backend.setTextInputEnabled(!0),
              this.stage.window.onTextInput.has(
                n(this, this.window_onTextInput)
              ) ||
                (this.stage.window.onTextInput.add(
                  n(this, this.window_onTextInput)
                ),
                this.stage.window.onKeyDown.add(
                  n(this, this.window_onKeyDown)
                )),
              (this.__inputEnabled = !0),
              this.__stopCursorTimer(),
              this.__startCursorTimer());
          }
        },
        __getBounds: function (a, b) {
          this.__updateLayout();
          var c = ha.__pool.get();
          c.copyFrom(this.__textEngine.bounds);
          c.offset(this.__offsetX, this.__offsetY);
          c.__transform(c, b);
          a.__expand(c.x, c.y, c.width, c.height);
          ha.__pool.release(c);
        },
        __getCharBoundaries: function (a, b) {
          if (0 > a || a > this.__text.length - 1) return !1;
          this.__updateLayout();
          for (
            var c = this.__textEngine.layoutGroups.iterator();
            c.hasNext();

          ) {
            var d = c.next();
            if (a >= d.startIndex && a < d.endIndex)
              try {
                for (var e = d.offsetX, f = 0, k = a - d.startIndex; f < k; ) {
                  var g = f++;
                  e += d.positions[g];
                }
                b.setTo(
                  e,
                  d.offsetY,
                  d.positions[a - d.startIndex],
                  d.ascent + d.descent
                );
                return !0;
              } catch (l) {}
          }
          return !1;
        },
        __getCharIndexOnDifferentLine: function (a, b) {
          if (
            0 > a ||
            a > this.__text.length ||
            0 > b ||
            b > this.__textEngine.numLines - 1
          )
            return -1;
          for (
            var c = null,
              d = null,
              e = this.__textEngine.layoutGroups.iterator();
            e.hasNext();

          ) {
            var f = e.next();
            if (a >= f.startIndex && a <= f.endIndex) {
              c = f.offsetX;
              for (var k = 0, g = a - f.startIndex; k < g; ) {
                var l = k++;
                c += f.positions[l];
              }
              if (null != d) return this.__getPosition(c, d);
            }
            if (f.lineIndex == b) {
              d = f.offsetY + f.height / 2;
              f = 0;
              for (k = this.get_scrollV() - 1; f < k; )
                (g = f++), (d -= this.__textEngine.lineHeights.get(g));
              if (null != c) return this.__getPosition(c, d);
            }
          }
          return -1;
        },
        __getCursor: function () {
          var a = this.__getGroup(this.get_mouseX(), this.get_mouseY(), !0);
          return null != a && "" != a.format.url
            ? "button"
            : this.__textEngine.selectable
            ? "ibeam"
            : null;
        },
        __getGroup: function (a, b, c) {
          null == c && (c = !1);
          this.__updateLayout();
          a += this.get_scrollH();
          for (var d = 0, e = this.get_scrollV() - 1; d < e; ) {
            var f = d++;
            b += this.__textEngine.lineHeights.get(f);
          }
          !c &&
            b > this.__textEngine.textHeight &&
            (b = this.__textEngine.textHeight);
          var k = !0;
          d = 0;
          for (e = this.__textEngine.layoutGroups.get_length(); d < e; ) {
            f = d++;
            var g = this.__textEngine.layoutGroups.get(f);
            f =
              f < this.__textEngine.layoutGroups.get_length() - 1
                ? this.__textEngine.layoutGroups.get(f + 1)
                : null;
            k &&
              (b < g.offsetY && (b = g.offsetY),
              a < g.offsetX && (a = g.offsetX),
              (k = !1));
            if (
              (b >= g.offsetY && b <= g.offsetY + g.height) ||
              (!c && null == f)
            )
              if (
                (a >= g.offsetX && a <= g.offsetX + g.width) ||
                (!c && (null == f || f.lineIndex != g.lineIndex))
              )
                return g;
          }
          return null;
        },
        __getPosition: function (a, b) {
          b = this.__getGroup(a, b);
          if (null == b) return this.__text.length;
          for (var c = 0, d = 0, e = b.positions.length; d < e; ) {
            var f = d++;
            c += b.positions[f];
            if (a <= b.offsetX + c) {
              if (a <= b.offsetX + (c - b.positions[f]) + b.positions[f] / 2)
                return b.startIndex + f;
              if (b.startIndex + f < b.endIndex) return b.startIndex + f + 1;
              break;
            }
          }
          return b.endIndex;
        },
        __hitTest: function (a, b, c, d, e, f) {
          if (
            !f.get_visible() ||
            this.__isMask ||
            (e && !this.mouseEnabled) ||
            (null != this.get_mask() && !this.get_mask().__hitTestMask(a, b))
          )
            return !1;
          this.__getRenderTransform();
          this.__updateLayout();
          c = this.__renderTransform;
          e = c.a * c.d - c.b * c.c;
          var k =
            0 == e ? -c.tx : (1 / e) * (c.c * (c.ty - b) + c.d * (a - c.tx));
          c = this.__renderTransform;
          e = c.a * c.d - c.b * c.c;
          return this.__textEngine.bounds.contains(
            k,
            0 == e ? -c.ty : (1 / e) * (c.a * (b - c.ty) + c.b * (c.tx - a))
          )
            ? (null != d && d.push(f), !0)
            : !1;
        },
        __hitTestMask: function (a, b) {
          this.__getRenderTransform();
          this.__updateLayout();
          var c = this.__renderTransform,
            d = c.a * c.d - c.b * c.c,
            e =
              0 == d ? -c.tx : (1 / d) * (c.c * (c.ty - b) + c.d * (a - c.tx));
          c = this.__renderTransform;
          d = c.a * c.d - c.b * c.c;
          return this.__textEngine.bounds.contains(
            e,
            0 == d ? -c.ty : (1 / d) * (c.a * (b - c.ty) + c.b * (c.tx - a))
          )
            ? !0
            : !1;
        },
        __replaceSelectedText: function (a, b) {
          null == b && (b = !0);
          null == a && (a = "");
          if ("" != a || this.__selectionIndex != this.__caretIndex) {
            var c =
                this.__caretIndex < this.__selectionIndex
                  ? this.__caretIndex
                  : this.__selectionIndex,
              d =
                this.__caretIndex > this.__selectionIndex
                  ? this.__caretIndex
                  : this.__selectionIndex;
            if (
              !(
                c == d &&
                0 < this.__textEngine.maxChars &&
                this.__text.length == this.__textEngine.maxChars
              )
            ) {
              c > this.__text.length && (c = this.__text.length);
              d > this.__text.length && (d = this.__text.length);
              if (d < c) {
                var e = d;
                d = c;
                c = e;
              }
              0 > c && (c = 0);
              this.__replaceText(c, d, a, b);
            }
          }
        },
        __replaceText: function (a, b, c, d) {
          if (!(b < a || 0 > a || b > this.__text.length || null == c)) {
            d &&
              ((c = this.__textEngine.restrictText(c)),
              0 < this.__textEngine.maxChars &&
                ((d =
                  this.__textEngine.maxChars - this.__text.length + (b - a)),
                0 >= d ? (c = "") : d < c.length && (c = X.substr(c, 0, d))));
            this.__updateText(
              this.__text.substring(0, a) + c + this.__text.substring(b)
            );
            d = c.length - (b - a);
            for (
              var e = 0, f;
              e < this.__textEngine.textFormatRanges.get_length();

            ) {
              f = this.__textEngine.textFormatRanges.get(e);
              if (a == b)
                f.start == f.end
                  ? 0 != f.start
                    ? Ka.warn(
                        "You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",
                        {
                          fileName: "openfl/text/TextField.hx",
                          lineNumber: 2087,
                          className: "openfl.text.TextField",
                          methodName: "__replaceText",
                        }
                      )
                    : (f.end += d)
                  : f.end >= a &&
                    (f.start >= a
                      ? ((f.start += d), (f.end += d))
                      : f.start < a && f.end >= b && (f.end += d));
              else if (f.end > a)
                if (f.start > b) (f.start += d), (f.end += d);
                else if (f.start <= a && f.end > b) f.end += d;
                else if (f.start >= a && f.end <= b) {
                  f = this.__textEngine.textFormatRanges;
                  f.__tempIndex = e--;
                  for (var k = 0, g = []; k < g.length; ) {
                    var l = g[k++];
                    f.insertAt(f.__tempIndex, l);
                    f.__tempIndex++;
                  }
                  f.splice(f.__tempIndex, 1);
                } else
                  f.end > b && f.start > a && f.start <= b
                    ? ((f.start = a), (f.end += d))
                    : f.start < a && f.end > a && f.end <= b && (f.end = a);
              ++e;
            }
            0 == this.__textEngine.textFormatRanges.get_length()
              ? this.__textEngine.textFormatRanges.push(
                  new Vd(this.get_defaultTextFormat().clone(), 0, c.length)
                )
              : a == b && 0 < this.__textEngine.textFormatRanges.get(0).start
              ? this.__textEngine.textFormatRanges.unshift(
                  new Vd(
                    this.get_defaultTextFormat().clone(),
                    0,
                    this.__textEngine.textFormatRanges.get(0).start
                  )
                )
              : a != b &&
                this.__textEngine.textFormatRanges.get(
                  this.__textEngine.textFormatRanges.get_length() - 1
                ).end < this.__text.length &&
                this.__textEngine.textFormatRanges.push(
                  new Vd(
                    this.get_defaultTextFormat().clone(),
                    this.__textEngine.textFormatRanges.get(
                      this.__textEngine.textFormatRanges.get_length() - 1
                    ).end,
                    this.__text.length
                  )
                );
            this.__selectionIndex = this.__caretIndex = a + c.length;
            this.__layoutDirty = this.__dirty = !0;
            this.__renderDirty ||
              ((this.__renderDirty = !0), this.__setParentRenderDirty());
          }
        },
        __startCursorTimer: function () {
          1 == this.get_type()
            ? (this.__inputEnabled &&
                ((this.__cursorTimer = yg.delay(
                  n(this, this.__startCursorTimer),
                  600
                )),
                (this.__showCursor = !this.__showCursor)),
              (this.__dirty = !0),
              this.__renderDirty ||
                ((this.__renderDirty = !0), this.__setParentRenderDirty()))
            : this.get_selectable() &&
              ((this.__dirty = !0),
              this.__renderDirty ||
                ((this.__renderDirty = !0), this.__setParentRenderDirty()));
        },
        __startTextInput: function () {
          0 > this.__caretIndex &&
            (this.__selectionIndex = this.__caretIndex = this.__text.length);
          (z.__supportDOM ? this.__renderedOnCanvasWhileOnDOM : 1) &&
            this.__enableInput();
        },
        __stopCursorTimer: function () {
          null != this.__cursorTimer &&
            (this.__cursorTimer.stop(), (this.__cursorTimer = null));
          this.__showCursor &&
            ((this.__showCursor = !1),
            (this.__dirty = !0),
            this.__renderDirty ||
              ((this.__renderDirty = !0), this.__setParentRenderDirty()));
        },
        __stopTextInput: function () {
          (z.__supportDOM ? this.__renderedOnCanvasWhileOnDOM : 1) &&
            this.__disableInput();
        },
        __updateLayout: function () {
          if (this.__layoutDirty) {
            var a = this.__textEngine.width;
            this.__textEngine.update();
            if (2 != this.__textEngine.autoSize) {
              if (this.__textEngine.width != a)
                switch (this.__textEngine.autoSize) {
                  case 0:
                    this.set_x(
                      this.get_x() + (a - this.__textEngine.width) / 2
                    );
                    break;
                  case 3:
                    this.set_x(this.get_x() + (a - this.__textEngine.width));
                }
              this.__textEngine.getBounds();
            }
            this.__layoutDirty = !1;
            this.setSelection(this.__selectionIndex, this.__caretIndex);
          }
        },
        __updateMouseDrag: function () {
          if (null != this.stage) {
            var a = this.getBounds(this);
            this.get_mouseX() > a.width - 1
              ? this.set_scrollH(
                  this.get_scrollH() +
                    (Math.max(
                      Math.min(0.1 * (this.get_mouseX() - a.width), 10),
                      1
                    ) |
                      0)
                )
              : 1 > this.get_mouseX() &&
                this.set_scrollH(
                  this.get_scrollH() -
                    (Math.max(Math.min(-0.1 * this.get_mouseX(), 10), 1) | 0)
                );
            this.__mouseScrollVCounter++;
            this.__mouseScrollVCounter > this.stage.get_frameRate() / 10 &&
              (this.get_mouseY() > a.height - 2
                ? this.set_scrollV(
                    Math.min(
                      this.get_scrollV() +
                        Math.max(
                          Math.min(0.03 * (this.get_mouseY() - a.height), 5),
                          1
                        ),
                      this.get_maxScrollV()
                    ) | 0
                  )
                : 2 > this.get_mouseY() &&
                  this.set_scrollV(
                    this.get_scrollV() -
                      (Math.max(Math.min(-0.03 * this.get_mouseY(), 5), 1) | 0)
                  ),
              (this.__mouseScrollVCounter = 0));
            this.stage_onMouseMove(null);
          }
        },
        __updateScrollH: function () {
          this.__updateLayout();
          var a = this.getBounds(this);
          if (this.get_textWidth() <= a.width - 4) this.set_scrollH(0);
          else {
            var b = this.get_scrollH();
            if (
              0 == this.__caretIndex ||
              this.getLineOffset(this.getLineIndexOfChar(this.__caretIndex)) ==
                this.__caretIndex
            )
              b = 0;
            else {
              var c = ha.__pool.get(),
                d = !1;
              this.__caretIndex < this.__text.length &&
                (d = this.__getCharBoundaries(this.__caretIndex, c));
              d ||
                (this.__getCharBoundaries(this.__caretIndex - 1, c),
                (c.x += c.width));
              for (; c.x < b && 0 < b; ) b -= 24;
              for (; c.x > b + a.width - 4; ) b += 24;
              ha.__pool.release(c);
            }
            0 < b &&
              1 != this.get_type() &&
              ((c = this.getLineLength(
                this.getLineIndexOfChar(this.__caretIndex)
              )),
              this.get_scrollH() + a.width - 4 > c &&
                this.set_scrollH(Math.ceil(c - a.width + 4)));
            0 > b
              ? this.set_scrollH(0)
              : b > this.get_maxScrollH()
              ? this.set_scrollH(this.get_maxScrollH())
              : this.set_scrollH(b);
          }
        },
        __updateScrollV: function () {
          this.__updateLayout();
          if (this.get_textHeight() <= this.get_height() - 4)
            this.set_scrollV(1);
          else {
            var a = this.getLineIndexOfChar(this.__caretIndex);
            -1 == a &&
              0 < this.__caretIndex &&
              (a = this.getLineIndexOfChar(this.__caretIndex - 1) + 1);
            if (a + 1 < this.get_scrollV()) this.set_scrollV(a + 1);
            else if (a + 1 > this.get_bottomScrollV()) {
              var b = 0;
              for (
                a >= this.__textEngine.lineHeights.get_length() &&
                (a = this.__textEngine.lineHeights.get_length() - 1);
                0 <= a;

              ) {
                b += this.__textEngine.lineHeights.get(a);
                if (b > this.get_height() - 4) {
                  a += 0 > b - this.get_height() ? 1 : 2;
                  break;
                }
                --a;
              }
              this.set_scrollV(a);
            } else this.set_scrollV(this.get_scrollV());
          }
        },
        __updateText: function (a) {
          z.__supportDOM &&
            this.__renderedOnCanvasWhileOnDOM &&
            (this.__forceCachedBitmapUpdate = this.__text != a);
          this.__textEngine.set_text(a);
          this.__text = this.__textEngine.text;
          null != this.stage && this.stage.get_focus() == this
            ? (this.__text.length < this.__selectionIndex &&
                (this.__selectionIndex = this.__text.length),
              this.__text.length < this.__caretIndex &&
                (this.__caretIndex = this.__text.length))
            : this.__isHTML
            ? (this.__selectionIndex = this.__caretIndex = this.__text.length)
            : (this.__caretIndex = this.__selectionIndex = 0);
          if (
            !this.__displayAsPassword ||
            (z.__supportDOM && !this.__renderedOnCanvasWhileOnDOM)
          )
            this.__textEngine.set_text(this.__text);
          else {
            a = "";
            for (var b = 0, c = this.get_text().length; b < c; )
              b++, (a += "*");
            this.__textEngine.set_text(a);
          }
        },
        __updateTransforms: function (a) {
          hb.prototype.__updateTransforms.call(this, a);
          a = this.__renderTransform;
          var b = this.__offsetX,
            c = this.__offsetY;
          a.tx = b * a.a + c * a.c + a.tx;
          a.ty = b * a.b + c * a.d + a.ty;
        },
        set_autoSize: function (a) {
          a != this.__textEngine.autoSize &&
            ((this.__layoutDirty = this.__dirty = !0),
            this.__renderDirty ||
              ((this.__renderDirty = !0), this.__setParentRenderDirty()));
          return (this.__textEngine.autoSize = a);
        },
        get_bottomScrollV: function () {
          this.__updateLayout();
          return this.__textEngine.get_bottomScrollV();
        },
        get_caretIndex: function () {
          return this.__caretIndex;
        },
        get_defaultTextFormat: function () {
          return this.__textFormat.clone();
        },
        set_defaultTextFormat: function (a) {
          this.__textFormat.__merge(a);
          this.__dirty = this.__layoutDirty = !0;
          this.__renderDirty ||
            ((this.__renderDirty = !0), this.__setParentRenderDirty());
          return a;
        },
        get_displayAsPassword: function () {
          return this.__displayAsPassword;
        },
        set_displayAsPassword: function (a) {
          a != this.__displayAsPassword &&
            ((this.__layoutDirty = this.__dirty = !0),
            this.__renderDirty ||
              ((this.__renderDirty = !0), this.__setParentRenderDirty()),
            (this.__displayAsPassword = a),
            this.__updateText(this.__text));
          return a;
        },
        get_embedFonts: function () {
          return this.__textEngine.embedFonts;
        },
        set_embedFonts: function (a) {
          return (this.__textEngine.embedFonts = a);
        },
        get_height: function () {
          this.__updateLayout();
          return this.__textEngine.height * Math.abs(this.get_scaleY());
        },
        set_height: function (a) {
          a != this.__textEngine.height &&
            (this.__setTransformDirty(),
            (this.__layoutDirty = this.__dirty = !0),
            this.__renderDirty ||
              ((this.__renderDirty = !0), this.__setParentRenderDirty()),
            (this.__textEngine.height = a));
          return this.__textEngine.height * Math.abs(this.get_scaleY());
        },
        get_htmlText: function () {
          return this.__isHTML ? this.__htmlText : this.__text;
        },
        set_htmlText: function (a) {
          (this.__isHTML && this.__text == a) ||
            ((this.__layoutDirty = this.__dirty = !0),
            this.__renderDirty ||
              ((this.__renderDirty = !0), this.__setParentRenderDirty()));
          this.__isHTML = !0;
          this.condenseWhite && (a = a.replace(/\s+/g, " "));
          this.__htmlText = a;
          a = Ma.parse(
            a,
            this.get_multiline(),
            this.__styleSheet,
            this.__textFormat,
            this.__textEngine.textFormatRanges
          );
          this.__updateText(a);
          return a;
        },
        get_maxScrollH: function () {
          this.__updateLayout();
          return this.__textEngine.maxScrollH;
        },
        get_maxScrollV: function () {
          this.__updateLayout();
          return this.__textEngine.get_maxScrollV();
        },
        get_mouseWheelEnabled: function () {
          return this.__mouseWheelEnabled;
        },
        get_multiline: function () {
          return this.__textEngine.multiline;
        },
        set_multiline: function (a) {
          return (this.__textEngine.multiline = a);
        },
        get_numLines: function () {
          this.__updateLayout();
          return this.__textEngine.numLines;
        },
        get_scrollH: function () {
          return this.__textEngine.scrollH;
        },
        set_scrollH: function (a) {
          this.__updateLayout();
          a > this.__textEngine.maxScrollH &&
            (a = this.__textEngine.maxScrollH);
          0 > a && (a = 0);
          a != this.__textEngine.scrollH &&
            ((this.__dirty = !0),
            this.__renderDirty ||
              ((this.__renderDirty = !0), this.__setParentRenderDirty()),
            (this.__textEngine.scrollH = a),
            this.dispatchEvent(new Ba("scroll")));
          return this.__textEngine.scrollH;
        },
        get_scrollV: function () {
          return this.__textEngine.get_scrollV();
        },
        set_scrollV: function (a) {
          this.__updateLayout();
          a > this.__textEngine.get_maxScrollV() &&
            (a = this.__textEngine.get_maxScrollV());
          1 > a && (a = 1);
          if (
            a != this.__textEngine.get_scrollV() ||
            0 == this.__textEngine.get_scrollV()
          )
            (this.__dirty = !0),
              this.__renderDirty ||
                ((this.__renderDirty = !0), this.__setParentRenderDirty()),
              this.__textEngine.set_scrollV(a),
              this.dispatchEvent(new Ba("scroll"));
          return this.__textEngine.get_scrollV();
        },
        get_selectable: function () {
          return this.__textEngine.selectable;
        },
        set_selectable: function (a) {
          a != this.__textEngine.selectable &&
            1 == this.get_type() &&
            (null != this.stage && this.stage.get_focus() == this
              ? this.__startTextInput()
              : a || this.__stopTextInput());
          return (this.__textEngine.selectable = a);
        },
        set_sharpness: function (a) {
          a != this.__textEngine.sharpness &&
            ((this.__dirty = !0),
            this.__renderDirty ||
              ((this.__renderDirty = !0), this.__setParentRenderDirty()));
          return (this.__textEngine.sharpness = a);
        },
        get_tabEnabled: function () {
          return null == this.__tabEnabled
            ? 1 == this.__textEngine.type
            : this.__tabEnabled;
        },
        get_text: function () {
          return this.__text;
        },
        set_text: function (a) {
          if (null != this.__styleSheet) return this.set_htmlText(a);
          if (this.__isHTML || this.__text != a)
            (this.__layoutDirty = this.__dirty = !0),
              this.__renderDirty ||
                ((this.__renderDirty = !0), this.__setParentRenderDirty());
          else return a;
          if (1 < this.__textEngine.textFormatRanges.get_length()) {
            var b = this.__textEngine.textFormatRanges,
              c = this.__textEngine.textFormatRanges.get_length() - 1;
            b.__tempIndex = 1;
            for (var d = 0, e = []; d < e.length; ) {
              var f = e[d++];
              b.insertAt(b.__tempIndex, f);
              b.__tempIndex++;
            }
            b.splice(b.__tempIndex, c);
          }
          b = this.__textEngine.textFormatRanges.get(0);
          b.format = this.__textFormat;
          b.start = 0;
          b.end = a.length;
          this.__isHTML = !1;
          this.__updateText(a);
          return a;
        },
        set_textColor: function (a) {
          a != this.__textFormat.color &&
            ((this.__dirty = !0),
            this.__renderDirty ||
              ((this.__renderDirty = !0), this.__setParentRenderDirty()));
          for (
            var b = this.__textEngine.textFormatRanges.iterator();
            b.hasNext();

          )
            b.next().format.color = a;
          return (this.__textFormat.color = a);
        },
        get_textWidth: function () {
          this.__updateLayout();
          return this.__textEngine.textWidth;
        },
        get_textHeight: function () {
          this.__updateLayout();
          return this.__textEngine.textHeight;
        },
        get_type: function () {
          return this.__textEngine.type;
        },
        get_width: function () {
          this.__updateLayout();
          return this.__textEngine.width * Math.abs(this.__scaleX);
        },
        set_width: function (a) {
          a != this.__textEngine.width &&
            (this.__setTransformDirty(),
            (this.__layoutDirty = this.__dirty = !0),
            this.__renderDirty ||
              ((this.__renderDirty = !0), this.__setParentRenderDirty()),
            (this.__textEngine.width = a));
          return this.__textEngine.width * Math.abs(this.__scaleX);
        },
        get_wordWrap: function () {
          return this.__textEngine.wordWrap;
        },
        set_wordWrap: function (a) {
          a != this.__textEngine.wordWrap &&
            ((this.__layoutDirty = this.__dirty = !0),
            this.__renderDirty ||
              ((this.__renderDirty = !0), this.__setParentRenderDirty()));
          return (this.__textEngine.wordWrap = a);
        },
        get_x: function () {
          return this.__transform.tx + this.__offsetX;
        },
        set_x: function (a) {
          a != this.__transform.tx + this.__offsetX &&
            this.__setTransformDirty();
          this.__transform.tx = a - this.__offsetX;
          return a;
        },
        get_y: function () {
          return this.__transform.ty + this.__offsetY;
        },
        set_y: function (a) {
          a != this.__transform.ty + this.__offsetY &&
            this.__setTransformDirty();
          this.__transform.ty = a - this.__offsetY;
          return a;
        },
        stage_onMouseMove: function (a) {
          null != this.stage &&
            this.get_selectable() &&
            0 <= this.__selectionIndex &&
            (this.__updateLayout(),
            (a = this.__getPosition(
              this.get_mouseX() + this.get_scrollH(),
              this.get_mouseY()
            )),
            a != this.__caretIndex &&
              ((this.__caretIndex = a),
              (a = !0),
              z.__supportDOM &&
                (this.__renderedOnCanvasWhileOnDOM &&
                  (this.__forceCachedBitmapUpdate = !0),
                (a = !1)),
              a &&
                ((this.__dirty = !0),
                this.__renderDirty ||
                  ((this.__renderDirty = !0), this.__setParentRenderDirty()))));
        },
        stage_onMouseUp: function (a) {
          a = a.currentTarget;
          a.removeEventListener("enterFrame", n(this, this.this_onEnterFrame));
          a.removeEventListener("mouseMove", n(this, this.stage_onMouseMove));
          a.removeEventListener("mouseUp", n(this, this.stage_onMouseUp));
          if (this.stage == a && a.get_focus() == this) {
            this.__getWorldTransform();
            this.__updateLayout();
            a = this.__getPosition(
              this.get_mouseX() + this.get_scrollH(),
              this.get_mouseY()
            );
            var b = Math.max(this.__selectionIndex, a) | 0;
            this.__selectionIndex = Math.min(this.__selectionIndex, a) | 0;
            this.__caretIndex = b;
            this.__inputEnabled &&
              (this.this_onFocusIn(null),
              this.__stopCursorTimer(),
              this.__startCursorTimer(),
              z.__supportDOM &&
                this.__renderedOnCanvasWhileOnDOM &&
                (this.__forceCachedBitmapUpdate = !0));
          }
        },
        this_onEnterFrame: function (a) {
          this.__updateMouseDrag();
        },
        this_onFocusIn: function (a) {
          1 == this.get_type() &&
          null != this.stage &&
          this.stage.get_focus() == this
            ? this.__startTextInput()
            : 1 != this.get_type() &&
              this.get_selectable() &&
              null != this.stage &&
              this.stage.get_focus() == this &&
              this.__startCursorTimer();
        },
        this_onFocusOut: function (a) {
          this.__stopCursorTimer();
          this.__stopTextInput();
          this.__selectionIndex != this.__caretIndex &&
            ((this.__selectionIndex = this.__caretIndex),
            (this.__dirty = !0),
            this.__renderDirty ||
              ((this.__renderDirty = !0), this.__setParentRenderDirty()));
        },
        this_onKeyDown: function (a) {
          this.get_selectable() &&
            1 != this.get_type() &&
            67 == a.keyCode &&
            (a.commandKey || a.ctrlKey) &&
            (this.__caretIndex == this.__selectionIndex ||
              this.get_displayAsPassword() ||
              mc.set_text(
                this.__text.substring(this.__caretIndex, this.__selectionIndex)
              ));
        },
        this_onMouseDown: function (a) {
          if (this.get_selectable() || 1 == this.get_type())
            this.__updateLayout(),
              (this.__selectionIndex = this.__caretIndex =
                this.__getPosition(
                  this.get_mouseX() + this.get_scrollH(),
                  this.get_mouseY()
                )),
              z.__supportDOM ||
                ((this.__dirty = !0),
                this.__renderDirty ||
                  ((this.__renderDirty = !0), this.__setParentRenderDirty())),
              null != this.stage &&
                (this.stage.addEventListener(
                  "enterFrame",
                  n(this, this.this_onEnterFrame)
                ),
                this.stage.addEventListener(
                  "mouseMove",
                  n(this, this.stage_onMouseMove)
                ),
                this.stage.addEventListener(
                  "mouseUp",
                  n(this, this.stage_onMouseUp)
                ));
        },
        this_onMouseWheel: function (a) {
          this.get_mouseWheelEnabled() &&
            this.set_scrollV(
              Math.min(this.get_scrollV() - a.delta, this.get_maxScrollV()) | 0
            );
        },
        this_onDoubleClick: function (a) {
          if (this.get_selectable()) {
            this.__updateLayout();
            a = "\n.!?, ;:()-_/".split("");
            var b = this.__text,
              c = -1,
              d = b.length,
              e = Math.max(this.__caretIndex, 1) | 0;
            if (
              0 < b.length &&
              0 <= this.__caretIndex &&
              d >= this.__caretIndex
            ) {
              for (var f = 0; f < a.length; ) {
                var k = a[f];
                ++f;
                var g = b.lastIndexOf(k, e - 1);
                g > c && (c = g + 1);
                g = b.indexOf(k, e);
                g < d && -1 != g && (d = g);
              }
              c != d &&
                (this.setSelection(c, d),
                (a = !0),
                z.__supportDOM &&
                  (this.__renderedOnCanvasWhileOnDOM &&
                    (this.__forceCachedBitmapUpdate = !0),
                  (a = !1)),
                a &&
                  ((this.__dirty = !0),
                  this.__renderDirty ||
                    ((this.__renderDirty = !0),
                    this.__setParentRenderDirty())));
            }
          }
        },
        window_onKeyDown: function (a, b) {
          switch (a) {
            case 8:
              this.__selectionIndex == this.__caretIndex &&
                0 < this.__caretIndex &&
                (this.__selectionIndex = this.__caretIndex - 1);
              this.__selectionIndex != this.__caretIndex
                ? (this.replaceSelectedText(""),
                  (this.__selectionIndex = this.__caretIndex),
                  this.dispatchEvent(new Ba("change", !0)))
                : (this.__stopCursorTimer(), this.__startCursorTimer());
              break;
            case 97:
              this.get_selectable() &&
                (Eb.get_metaKey(b) || Eb.get_ctrlKey(b)) &&
                this.setSelection(0, this.__text.length);
              break;
            case 99:
              if (Eb.get_metaKey(b) || Eb.get_ctrlKey(b))
                this.__caretIndex == this.__selectionIndex ||
                  this.get_displayAsPassword() ||
                  mc.set_text(
                    this.__text.substring(
                      this.__caretIndex,
                      this.__selectionIndex
                    )
                  );
              break;
            case 120:
              (!Eb.get_metaKey(b) && !Eb.get_ctrlKey(b)) ||
                this.__caretIndex == this.__selectionIndex ||
                this.get_displayAsPassword() ||
                (mc.set_text(
                  this.__text.substring(
                    this.__caretIndex,
                    this.__selectionIndex
                  )
                ),
                this.replaceSelectedText(""),
                this.dispatchEvent(new Ba("change", !0)));
              break;
            case 127:
              this.__selectionIndex == this.__caretIndex &&
                this.__caretIndex < this.__text.length &&
                (this.__selectionIndex = this.__caretIndex + 1);
              this.__selectionIndex != this.__caretIndex
                ? (this.replaceSelectedText(""),
                  (this.__selectionIndex = this.__caretIndex),
                  this.dispatchEvent(new Ba("change", !0)))
                : (this.__stopCursorTimer(), this.__startCursorTimer());
              break;
            case 1073741898:
              this.get_selectable() &&
                (Eb.get_metaKey(b) || Eb.get_ctrlKey(b)
                  ? (this.__caretIndex = 0)
                  : this.__caretBeginningOfLine(),
                Eb.get_shiftKey(b) ||
                  (this.__selectionIndex = this.__caretIndex),
                this.setSelection(this.__selectionIndex, this.__caretIndex));
              break;
            case 1073741901:
              this.get_selectable() &&
                (Eb.get_metaKey(b) || Eb.get_ctrlKey(b)
                  ? (this.__caretIndex = this.__text.length)
                  : this.__caretEndOfLine(),
                Eb.get_shiftKey(b) ||
                  (this.__selectionIndex = this.__caretIndex),
                this.setSelection(this.__selectionIndex, this.__caretIndex));
              break;
            case 1073741903:
              this.get_selectable() &&
                (Eb.get_metaKey(b) || Eb.get_ctrlKey(b)
                  ? this.__caretBeginningOfNextLine()
                  : this.__caretNextCharacter(),
                Eb.get_shiftKey(b) ||
                  (this.__selectionIndex = this.__caretIndex),
                this.setSelection(this.__selectionIndex, this.__caretIndex));
              break;
            case 1073741904:
              this.get_selectable() &&
                (Eb.get_metaKey(b) || Eb.get_ctrlKey(b)
                  ? this.__caretBeginningOfPreviousLine()
                  : this.__caretPreviousCharacter(),
                Eb.get_shiftKey(b) ||
                  (this.__selectionIndex = this.__caretIndex),
                this.setSelection(this.__selectionIndex, this.__caretIndex));
              break;
            case 1073741905:
              this.get_selectable() &&
                (Eb.get_metaKey(b) || Eb.get_ctrlKey(b)
                  ? (this.__caretIndex = this.__text.length)
                  : this.__caretNextLine(),
                Eb.get_shiftKey(b) ||
                  (this.__selectionIndex = this.__caretIndex),
                this.setSelection(this.__selectionIndex, this.__caretIndex));
              break;
            case 1073741906:
              this.get_selectable() &&
                (Eb.get_metaKey(b) || Eb.get_ctrlKey(b)
                  ? (this.__caretIndex = 0)
                  : this.__caretPreviousLine(),
                Eb.get_shiftKey(b) ||
                  (this.__selectionIndex = this.__caretIndex),
                this.setSelection(this.__selectionIndex, this.__caretIndex));
              break;
            case 13:
            case 1073741912:
              this.__textEngine.multiline
                ? ((a = new hg("textInput", !0, !0, "\n")),
                  this.dispatchEvent(a),
                  a.isDefaultPrevented() ||
                    (this.__replaceSelectedText("\n", !0),
                    this.dispatchEvent(new Ba("change", !0))))
                : (this.__stopCursorTimer(), this.__startCursorTimer());
          }
        },
        window_onTextInput: function (a) {
          this.__replaceSelectedText(a, !0);
          this.dispatchEvent(new Ba("change", !0));
        },
        __class__: Kc,
        __properties__: q(hb.prototype.__properties__, {
          set_textColor: "set_textColor",
          set_sharpness: "set_sharpness",
          set_autoSize: "set_autoSize",
          set_wordWrap: "set_wordWrap",
          get_wordWrap: "get_wordWrap",
          get_type: "get_type",
          get_textWidth: "get_textWidth",
          get_textHeight: "get_textHeight",
          set_text: "set_text",
          get_text: "get_text",
          set_selectable: "set_selectable",
          get_selectable: "get_selectable",
          set_scrollV: "set_scrollV",
          get_scrollV: "get_scrollV",
          set_scrollH: "set_scrollH",
          get_scrollH: "get_scrollH",
          get_numLines: "get_numLines",
          set_multiline: "set_multiline",
          get_multiline: "get_multiline",
          get_mouseWheelEnabled: "get_mouseWheelEnabled",
          get_maxScrollV: "get_maxScrollV",
          get_maxScrollH: "get_maxScrollH",
          set_htmlText: "set_htmlText",
          get_htmlText: "get_htmlText",
          set_embedFonts: "set_embedFonts",
          get_embedFonts: "get_embedFonts",
          set_displayAsPassword: "set_displayAsPassword",
          get_displayAsPassword: "get_displayAsPassword",
          set_defaultTextFormat: "set_defaultTextFormat",
          get_defaultTextFormat: "get_defaultTextFormat",
          get_caretIndex: "get_caretIndex",
          get_bottomScrollV: "get_bottomScrollV",
        }),
      });
      var ak = function (a, b, c) {
        null == c && (c = 0);
        null == b && (b = 10);
        null == a && (a = 10);
        Kc.call(this);
        this.set_x(a);
        this.set_y(b);
        this.currentFPS = 0;
        this.set_selectable(!1);
        this.mouseEnabled = !1;
        this.set_defaultTextFormat(new id("_sans", 14, c));
        this.set_autoSize(1);
        this.set_multiline(!0);
        this.set_text("FPS: ");
        this.currentTime = this.cacheCount = 0;
        this.times = [];
      };
      h["openfl.display.FPS"] = ak;
      ak.__name__ = "openfl.display.FPS";
      ak.__super__ = Kc;
      ak.prototype = q(Kc.prototype, {
        __enterFrame: function (a) {
          this.currentTime += a;
          for (
            this.times.push(this.currentTime);
            this.times[0] < this.currentTime - 1e3;

          )
            this.times.shift();
          a = this.times.length;
          this.currentFPS = Math.round((a + this.cacheCount) / 2);
          this.currentFPS > y.framerate && (this.currentFPS = y.framerate);
          if (a != this.cacheCount) {
            this.set_text("FPS: " + this.currentFPS);
            var b = Math.abs(hc.roundDecimal(eo.get_totalMemory() / 1e6, 1));
            this.set_text(this.get_text() + ("\nMemory: " + b + " MB"));
            this.set_textColor(-1);
            (3e3 < b || this.currentFPS <= y.framerate / 2) &&
              this.set_textColor(-65536);
            this.set_text(this.get_text() + "\n");
          }
          this.cacheCount = a;
        },
        __class__: ak,
      });
      var yk = function (a, b) {
        pa.call(this);
        this.name = a;
        this.frame = b;
      };
      h["openfl.display.FrameLabel"] = yk;
      yk.__name__ = "openfl.display.FrameLabel";
      yk.__super__ = pa;
      yk.prototype = q(pa.prototype, { __class__: yk });
      var Yd = function (a) {
        this.__dirty = !0;
        this.__owner = a;
        this.__commands = new Wd();
        this.__positionY = this.__positionX = this.__strokePadding = 0;
        this.__renderTransform = new xa();
        this.__usedShaderBuffers = new kb();
        this.__worldTransform = new xa();
        this.__height = this.__width = 0;
        this.__bitmapScale = 1;
        this.__shaderBufferPool = new db(function () {
          return new Zl();
        });
        this.moveTo(0, 0);
      };
      h["openfl.display.Graphics"] = Yd;
      Yd.__name__ = "openfl.display.Graphics";
      Yd.prototype = {
        beginFill: function (a, b) {
          null == b && (b = 1);
          null == a && (a = 0);
          this.__commands.beginFill(a & 16777215, b);
          0 < b && (this.__visible = !0);
        },
        beginGradientFill: function (a, b, c, d, e, f, k, g) {
          null == g && (g = 0);
          null == k && (k = 1);
          null == f && (f = 0);
          if (null != b && 0 != b.length) {
            if (null == c) {
              c = [];
              for (var l = 0, r = b.length; l < r; ) l++, c.push(1);
            }
            if (null == d)
              for (d = [], l = 0, r = b.length; l < r; ) {
                var h = l++;
                d.push(Math.ceil((h / (b.length - 1)) * 255));
              }
            if (!(c.length < b.length || d.length < b.length))
              for (
                this.__commands.beginGradientFill(a, b, c, d, e, f, k, g),
                  l = 0;
                l < c.length;

              )
                if (((a = c[l]), ++l, 0 < a)) {
                  this.__visible = !0;
                  break;
                }
          }
        },
        beginShaderFill: function (a, b) {
          null != a &&
            ((b = this.__shaderBufferPool.get()),
            this.__usedShaderBuffers.add(b),
            b.update(a),
            this.__commands.beginShaderFill(b));
        },
        clear: function () {
          for (var a = this.__usedShaderBuffers.h; null != a; ) {
            var b = a.item;
            a = a.next;
            this.__shaderBufferPool.release(b);
          }
          this.__usedShaderBuffers.clear();
          this.__commands.clear();
          this.__strokePadding = 0;
          null != this.__bounds &&
            (this.set___dirty(!0),
            (this.__transformDirty = !0),
            (this.__bounds = null));
          this.__visible = !1;
          this.__positionY = this.__positionX = 0;
          this.moveTo(0, 0);
        },
        cubicCurveTo: function (a, b, c, d, e, f) {
          var k = this.__findExtrema(this.__positionX, a, c, e),
            g = this.__findExtrema(this.__positionY, b, d, f);
          this.__inflateBounds(
            k.min - this.__strokePadding,
            g.min - this.__strokePadding
          );
          this.__inflateBounds(
            k.max + this.__strokePadding,
            g.max + this.__strokePadding
          );
          this.__positionX = e;
          this.__positionY = f;
          this.__commands.cubicCurveTo(a, b, c, d, e, f);
          this.set___dirty(!0);
        },
        curveTo: function (a, b, c, d) {
          this.__inflateBounds(
            this.__positionX - this.__strokePadding,
            this.__positionY - this.__strokePadding
          );
          this.__inflateBounds(
            this.__positionX + this.__strokePadding,
            this.__positionY + this.__strokePadding
          );
          var e =
            (a < c && a > this.__positionX) || (a > c && a < this.__positionX)
              ? c
              : this.__calculateBezierQuadPoint(
                  (this.__positionX - a) / (this.__positionX - 2 * a + c),
                  this.__positionX,
                  a,
                  c
                );
          var f =
            (b < d && b > this.__positionY) || (b > d && b < this.__positionY)
              ? d
              : this.__calculateBezierQuadPoint(
                  (this.__positionY - b) / (this.__positionY - 2 * b + d),
                  this.__positionY,
                  b,
                  d
                );
          this.__inflateBounds(
            e - this.__strokePadding,
            f - this.__strokePadding
          );
          this.__inflateBounds(
            e + this.__strokePadding,
            f + this.__strokePadding
          );
          this.__positionX = c;
          this.__positionY = d;
          this.__inflateBounds(
            this.__positionX - this.__strokePadding,
            this.__positionY - this.__strokePadding
          );
          this.__inflateBounds(
            this.__positionX + this.__strokePadding,
            this.__positionY + this.__strokePadding
          );
          this.__commands.curveTo(a, b, c, d);
          this.set___dirty(!0);
        },
        drawCircle: function (a, b, c) {
          0 >= c ||
            (this.__inflateBounds(
              a - c - this.__strokePadding,
              b - c - this.__strokePadding
            ),
            this.__inflateBounds(
              a + c + this.__strokePadding,
              b + c + this.__strokePadding
            ),
            this.__commands.drawCircle(a, b, c),
            this.set___dirty(!0));
        },
        drawPath: function (a, b, c) {
          null == c && (c = 0);
          var d = 0;
          1 == c && this.__commands.windingNonZero();
          a = a.iterator();
          a: for (; a.hasNext(); )
            switch (a.next()) {
              case 1:
                this.moveTo(b.get(d), b.get(d + 1));
                d += 2;
                break;
              case 2:
                this.lineTo(b.get(d), b.get(d + 1));
                d += 2;
                break;
              case 3:
                this.curveTo(
                  b.get(d),
                  b.get(d + 1),
                  b.get(d + 2),
                  b.get(d + 3)
                );
                d += 4;
                break;
              case 4:
                this.moveTo(b.get(d + 2), b.get(d + 3));
                break a;
              case 5:
                this.lineTo(b.get(d + 2), b.get(d + 3));
                break a;
              case 6:
                this.cubicCurveTo(
                  b.get(d),
                  b.get(d + 1),
                  b.get(d + 2),
                  b.get(d + 3),
                  b.get(d + 4),
                  b.get(d + 5)
                ),
                  (d += 6);
            }
        },
        drawQuads: function (a, b, c) {
          if (null != a) {
            var d = null != b,
              e = !1,
              f = !1,
              k = d ? b.get_length() : Math.floor(a.get_length() / 4);
            if (0 != k) {
              null != c &&
                (c.get_length() >= 6 * k
                  ? (f = e = !0)
                  : c.get_length() >= 4 * k
                  ? (e = !0)
                  : c.get_length() >= 2 * k && (f = !0));
              for (
                var g = ha.__pool.get(),
                  l = xa.__pool.get(),
                  h = Infinity,
                  p = Infinity,
                  m = -Infinity,
                  n = -Infinity,
                  q,
                  t = 0;
                t < k;

              ) {
                var z = t++;
                q = d ? 4 * b.get(z) : 4 * z;
                0 > q ||
                  (g.setTo(0, 0, a.get(q + 2), a.get(q + 3)),
                  0 >= g.width ||
                    0 >= g.height ||
                    (e && f
                      ? ((q = 6 * z),
                        l.setTo(
                          c.get(q),
                          c.get(q + 1),
                          c.get(q + 2),
                          c.get(q + 3),
                          c.get(q + 4),
                          c.get(q + 5)
                        ))
                      : e
                      ? ((q = 4 * z),
                        l.setTo(
                          c.get(q),
                          c.get(q + 1),
                          c.get(q + 2),
                          c.get(q + 3),
                          g.x,
                          g.y
                        ))
                      : f
                      ? ((q = 2 * z), (l.tx = c.get(q)), (l.ty = c.get(q + 1)))
                      : ((l.tx = g.x), (l.ty = g.y)),
                    g.__transform(g, l),
                    h > g.x && (h = g.x),
                    p > g.y && (p = g.y),
                    m < g.get_right() && (m = g.get_right()),
                    n < g.get_bottom() && (n = g.get_bottom())));
              }
              this.__inflateBounds(h, p);
              this.__inflateBounds(m, n);
              this.__commands.drawQuads(a, b, c);
              this.set___dirty(!0);
              this.__visible = !0;
              ha.__pool.release(g);
              xa.__pool.release(l);
            }
          }
        },
        drawRect: function (a, b, c, d) {
          if (0 != c || 0 != d) {
            var e = 0 > c ? -1 : 1,
              f = 0 > d ? -1 : 1;
            this.__inflateBounds(
              a - this.__strokePadding * e,
              b - this.__strokePadding * f
            );
            this.__inflateBounds(
              a + c + this.__strokePadding * e,
              b + d + this.__strokePadding * f
            );
            this.__commands.drawRect(a, b, c, d);
            this.set___dirty(!0);
          }
        },
        drawTriangles: function (a, b, c, d) {
          null == d && (d = 1);
          if (null != a && 0 != a.get_length()) {
            var e = (a.get_length() / 2) | 0;
            if (null == b) {
              if (0 != e % 3)
                throw new oh("Not enough vertices to close a triangle.");
              b = ja.toIntVector(null);
              for (var f = 0, k = e; f < k; ) {
                var g = f++;
                b.push(g);
              }
            }
            null == d && (d = 1);
            var l = Infinity,
              h = Infinity,
              p = -Infinity,
              m = -Infinity;
            f = 0;
            for (k = e; f < k; )
              (g = f++),
                (e = a.get(2 * g)),
                (g = a.get(2 * g + 1)),
                l > e && (l = e),
                h > g && (h = g),
                p < e && (p = e),
                m < g && (m = g);
            this.__inflateBounds(l, h);
            this.__inflateBounds(p, m);
            this.__commands.drawTriangles(a, b, c, d);
            this.set___dirty(!0);
            this.__visible = !0;
          }
        },
        endFill: function () {
          this.__commands.endFill();
        },
        lineStyle: function (a, b, c, d, e, f, k, g) {
          null == g && (g = 3);
          null == e && (e = 2);
          null == d && (d = !1);
          null == c && (c = 1);
          null == b && (b = 0);
          null == f && (f = 1);
          null == k && (k = 2);
          null != a &&
            (1 == k
              ? a > this.__strokePadding &&
                (this.__strokePadding = Math.ceil(a))
              : a / 2 > this.__strokePadding &&
                (this.__strokePadding = Math.ceil(a / 2)));
          this.__commands.lineStyle(a, b, c, d, e, f, k, g);
          null != a && (this.__visible = !0);
        },
        lineTo: function (a, b) {
          isFinite(a) &&
            isFinite(b) &&
            (this.__inflateBounds(
              this.__positionX - this.__strokePadding,
              this.__positionY - this.__strokePadding
            ),
            this.__inflateBounds(
              this.__positionX + this.__strokePadding,
              this.__positionY + this.__strokePadding
            ),
            (this.__positionX = a),
            (this.__positionY = b),
            this.__inflateBounds(
              this.__positionX - this.__strokePadding,
              this.__positionY - this.__strokePadding
            ),
            this.__inflateBounds(
              this.__positionX + 2 * this.__strokePadding,
              this.__positionY + this.__strokePadding
            ),
            this.__commands.lineTo(a, b),
            this.set___dirty(!0));
        },
        moveTo: function (a, b) {
          this.__positionX = a;
          this.__positionY = b;
          this.__commands.moveTo(a, b);
        },
        overrideBlendMode: function (a) {
          null == a && (a = 10);
          this.__commands.overrideBlendMode(a);
        },
        __calculateBezierCubicPoint: function (a, b, c, d, e) {
          var f = 1 - a;
          return (
            b * f * f * f +
            3 * c * a * f * f +
            3 * d * f * a * a +
            e * a * a * a
          );
        },
        __calculateBezierQuadPoint: function (a, b, c, d) {
          var e = 1 - a;
          return e * e * b + 2 * e * a * c + a * a * d;
        },
        __cleanup: function () {
          null != this.__bounds &&
            null != this.__canvas &&
            (this.set___dirty(!0), (this.__transformDirty = !0));
          this.__context = this.__canvas = this.__bitmap = null;
        },
        __getBounds: function (a, b) {
          if (null != this.__bounds) {
            var c = ha.__pool.get();
            this.__bounds.__transform(c, b);
            a.__expand(c.x, c.y, c.width, c.height);
            ha.__pool.release(c);
          }
        },
        __hitTest: function (a, b, c, d) {
          if (null == this.__bounds) return !1;
          var e = d.a * d.d - d.b * d.c,
            f =
              0 == e ? -d.tx : (1 / e) * (d.c * (d.ty - b) + d.d * (a - d.tx));
          e = d.a * d.d - d.b * d.c;
          a = 0 == e ? -d.ty : (1 / e) * (d.a * (b - d.ty) + d.b * (d.tx - a));
          return f > this.__bounds.x &&
            a > this.__bounds.y &&
            this.__bounds.contains(f, a)
            ? c
              ? A.hitTest(this, f, a)
              : !0
            : !1;
        },
        __findExtrema: function (a, b, c, d) {
          var e = [];
          if (
            !((b < d && b > a) || (b > d && b < a)) ||
            !((c < d && c > a) || (c > d && c < a))
          ) {
            var f = -a + 3 * b + d - 3 * c,
              k = 2 * a - 4 * b + 2 * c,
              g = b - a,
              l = k * k - 4 * f * g;
            0 == f
              ? ((f = -g / k),
                0 < f &&
                  1 > f &&
                  e.push(this.__calculateBezierCubicPoint(f, a, b, c, d)))
              : 0 <= l &&
                ((g = (-k + Math.sqrt(l)) / (2 * f)),
                (f = (-k - Math.sqrt(l)) / (2 * f)),
                0 < g &&
                  1 > g &&
                  e.push(this.__calculateBezierCubicPoint(g, a, b, c, d)),
                0 < f &&
                  1 > f &&
                  e.push(this.__calculateBezierCubicPoint(f, a, b, c, d)));
          }
          b = a;
          e.push(d);
          for (d = 0; d < e.length; )
            (c = e[d]), ++d, c < b && (b = c), c > a && (a = c);
          return { min: b, max: a };
        },
        __inflateBounds: function (a, b) {
          null == this.__bounds
            ? ((this.__bounds = new ha(a, b, 0, 0)),
              (this.__transformDirty = !0))
            : (a < this.__bounds.x &&
                ((this.__bounds.width += this.__bounds.x - a),
                (this.__bounds.x = a),
                (this.__transformDirty = !0)),
              b < this.__bounds.y &&
                ((this.__bounds.height += this.__bounds.y - b),
                (this.__bounds.y = b),
                (this.__transformDirty = !0)),
              a > this.__bounds.x + this.__bounds.width &&
                (this.__bounds.width = a - this.__bounds.x),
              b > this.__bounds.y + this.__bounds.height &&
                (this.__bounds.height = b - this.__bounds.y));
        },
        __update: function (a, b) {
          if (
            !(
              null == this.__bounds ||
              0 >= this.__bounds.width ||
              0 >= this.__bounds.height
            )
          ) {
            var c = this.__owner.__renderTransform;
            if (null != c) {
              var d = b,
                e = b;
              null == this.__owner.__worldScale9Grid &&
                ((d =
                  0 == c.b ? Math.abs(c.a) : Math.sqrt(c.a * c.a + c.b * c.b)),
                (e =
                  0 == c.c ? Math.abs(c.d) : Math.sqrt(c.c * c.c + c.d * c.d)),
                null != a &&
                  ((d =
                    0 == a.b ? d * a.a : d * Math.sqrt(a.a * a.a + a.b * a.b)),
                  (e =
                    0 == a.c
                      ? e * a.d
                      : e * Math.sqrt(a.c * a.c + a.d * a.d))));
              a = this.__bounds.width * d;
              e *= this.__bounds.height;
              if (1 > a || 1 > e)
                (1 <= this.__width || 1 <= this.__height) &&
                  this.set___dirty(!0),
                  (this.__height = this.__width = 0);
              else {
                null != Yd.maxTextureWidth &&
                  a > Yd.maxTextureWidth &&
                  (a = Yd.maxTextureWidth);
                null != Yd.maxTextureWidth &&
                  e > Yd.maxTextureHeight &&
                  (e = Yd.maxTextureHeight);
                if (null != this.__owner.__worldScale9Grid) {
                  this.__renderTransform.a = b;
                  this.__renderTransform.d = b;
                  d = 1 / b;
                  var f = 1 / b;
                } else
                  (this.__renderTransform.a = a / this.__bounds.width),
                    (this.__renderTransform.d = e / this.__bounds.height),
                    (d = 1 / this.__renderTransform.a),
                    (f = 1 / this.__renderTransform.d);
                this.__worldTransform.a = d * c.a;
                this.__worldTransform.b = d * c.b;
                this.__worldTransform.c = f * c.c;
                this.__worldTransform.d = f * c.d;
                f = this.__bounds.x;
                var k = this.__bounds.y;
                d = f * c.a + k * c.c + c.tx;
                c = f * c.b + k * c.d + c.ty;
                1 < b
                  ? ((b = 1 / b),
                    (this.__worldTransform.tx = Math.round(d / b) * b),
                    (this.__worldTransform.ty = Math.round(c / b) * b))
                  : ((this.__worldTransform.tx = Math.round(d)),
                    (this.__worldTransform.ty = Math.round(c)));
                b = this.__worldTransform;
                f = b.a * b.d - b.b * b.c;
                this.__renderTransform.tx =
                  0 == f
                    ? -b.tx
                    : (1 / f) * (b.c * (b.ty - c) + b.d * (d - b.tx));
                b = this.__worldTransform;
                f = b.a * b.d - b.b * b.c;
                this.__renderTransform.ty =
                  0 == f
                    ? -b.ty
                    : (1 / f) * (b.a * (c - b.ty) + b.b * (b.tx - d));
                a = Math.ceil(a + 1);
                e = Math.ceil(e + 1);
                (a == this.__width && e == this.__height) ||
                  this.set___dirty(!0);
                this.__width = a;
                this.__height = e;
              }
            }
          }
        },
        set___dirty: function (a) {
          if (a && null != this.__owner) {
            var b = this.__owner;
            b.__renderDirty ||
              ((b.__renderDirty = !0), b.__setParentRenderDirty());
          }
          a && (this.__hardwareDirty = this.__softwareDirty = !0);
          return (this.__dirty = a);
        },
        __class__: Yd,
        __properties__: { set___dirty: "set___dirty" },
      };
      var fo = function () {};
      h["openfl.display.ITileContainer"] = fo;
      fo.__name__ = "openfl.display.ITileContainer";
      fo.__isInterface__ = !0;
      var cp = {
          toString: function (a) {
            switch (a) {
              case 0:
                return "bevel";
              case 1:
                return "miter";
              case 2:
                return "round";
              default:
                return null;
            }
          },
        },
        go = function () {
          D.call(this);
          this.__drawableType = 4;
          this.contentLoaderInfo = Tf.create(this);
          this.uncaughtErrorEvents = this.contentLoaderInfo.uncaughtErrorEvents;
          this.__unloaded = !0;
        };
      h["openfl.display.Loader"] = go;
      go.__name__ = "openfl.display.Loader";
      go.__super__ = D;
      go.prototype = q(D.prototype, {
        addChild: function (a) {
          throw new Cb(
            "Error #2069: The Loader class does not implement this method.",
            2069
          );
        },
        addChildAt: function (a, b) {
          throw new Cb(
            "Error #2069: The Loader class does not implement this method.",
            2069
          );
        },
        removeChild: function (a) {
          if (a == this.content)
            return D.prototype.removeChild.call(this, this.content);
          throw new Cb(
            "Error #2069: The Loader class does not implement this method.",
            2069
          );
        },
        removeChildAt: function (a) {
          throw new Cb(
            "Error #2069: The Loader class does not implement this method.",
            2069
          );
        },
        __class__: go,
      });
      var Tf = function () {
        pa.call(this);
        this.applicationDomain = ui.currentDomain;
        this.bytesTotal = this.bytesLoaded = 0;
        this.childAllowsParent = !0;
        this.parameters = {};
      };
      h["openfl.display.LoaderInfo"] = Tf;
      Tf.__name__ = "openfl.display.LoaderInfo";
      Tf.create = function (a) {
        var b = new Tf();
        b.uncaughtErrorEvents = new $l();
        null != a ? (b.loader = a) : (b.url = Tf.__rootURL);
        return b;
      };
      Tf.__super__ = pa;
      Tf.prototype = q(pa.prototype, {
        __complete: function () {
          this.__completed ||
            (this.bytesLoaded < this.bytesTotal &&
              (this.bytesLoaded = this.bytesTotal),
            this.__update(this.bytesLoaded, this.bytesTotal),
            (this.__completed = !0),
            this.dispatchEvent(new Ba("complete")));
        },
        __update: function (a, b) {
          this.bytesLoaded = a;
          this.bytesTotal = b;
          this.dispatchEvent(new vi("progress", !1, !1, a, b));
        },
        __class__: Tf,
      });
      var Cj = function () {
        t.call(this);
        this.__enabled = !0;
      };
      h["openfl.display.MovieClip"] = Cj;
      Cj.__name__ = "openfl.display.MovieClip";
      Cj.__super__ = t;
      Cj.prototype = q(t.prototype, {
        __enterFrame: function (a) {
          null != this.__timeline && this.__timeline.__enterFrame(a);
          for (var b = 0, c = this.__children; b < c.length; ) {
            var d = c[b];
            ++b;
            d.__enterFrame(a);
          }
        },
        __tabTest: function (a) {
          this.__enabled && t.prototype.__tabTest.call(this, a);
        },
        __class__: Cj,
      });
      var mb = function (a, b) {
        Td.call(this);
        this.__context3D = a;
        this.__context = a.__context;
        this.__gl = this.gl = a.__context.webgl;
        this.__defaultRenderTarget = b;
        this.__flipped = null == this.__defaultRenderTarget;
        null == Yd.maxTextureWidth &&
          (Yd.maxTextureWidth = Yd.maxTextureHeight =
            this.__gl.getParameter(this.__gl.MAX_TEXTURE_SIZE));
        this.__matrix = nb._new();
        this.__values = [];
        this.__softwareRenderer = new ug(null);
        this.__type = "opengl";
        this.__setBlendMode(10);
        this.__context3D.__setGLBlend(!0);
        this.__clipRects = [];
        this.__maskObjects = [];
        this.__numClipRects = 0;
        this.__projection = nb._new();
        this.__projectionFlipped = nb._new();
        this.__stencilReference = 0;
        this.__tempRect = new ha();
        this.__defaultDisplayShader = new Yl();
        this.__defaultGraphicsShader = new qh();
        this.__defaultShader = this.__defaultDisplayShader;
        this.__initShader(this.__defaultShader);
        this.__scrollRectMasks = new db(function () {
          return new wg();
        });
        this.__maskShader = new Ch();
      };
      h["openfl.display.OpenGLRenderer"] = mb;
      mb.__name__ = "openfl.display.OpenGLRenderer";
      mb.__super__ = Td;
      mb.prototype = q(Td.prototype, {
        applyAlpha: function (a) {
          mb.__alphaValue[0] = a * this.__worldAlpha;
          null != this.__currentShaderBuffer
            ? this.__currentShaderBuffer.addFloatOverride(
                "openfl_Alpha",
                mb.__alphaValue
              )
            : null != this.__currentShader &&
              null != this.__currentShader.__alpha &&
              (this.__currentShader.__alpha.value = mb.__alphaValue);
        },
        applyBitmapData: function (a, b, c) {
          null == c && (c = !1);
          null != this.__currentShaderBuffer
            ? null != a &&
              ((mb.__textureSizeValue[0] = a.__textureWidth),
              (mb.__textureSizeValue[1] = a.__textureHeight),
              this.__currentShaderBuffer.addFloatOverride(
                "openfl_TextureSize",
                mb.__textureSizeValue
              ))
            : null != this.__currentShader &&
              (null != this.__currentShader.__bitmap &&
                ((this.__currentShader.__bitmap.input = a),
                (this.__currentShader.__bitmap.filter =
                  b && this.__allowSmoothing ? 4 : 5),
                (this.__currentShader.__bitmap.mipFilter = 2),
                (this.__currentShader.__bitmap.wrap = c ? 2 : 0)),
              null != this.__currentShader.__texture &&
                ((this.__currentShader.__texture.input = a),
                (this.__currentShader.__texture.filter =
                  b && this.__allowSmoothing ? 4 : 5),
                (this.__currentShader.__texture.mipFilter = 2),
                (this.__currentShader.__texture.wrap = c ? 2 : 0)),
              null != this.__currentShader.__textureSize &&
                (null != a
                  ? ((mb.__textureSizeValue[0] = a.__textureWidth),
                    (mb.__textureSizeValue[1] = a.__textureHeight),
                    (this.__currentShader.__textureSize.value =
                      mb.__textureSizeValue))
                  : (this.__currentShader.__textureSize.value = null)));
        },
        applyColorTransform: function (a) {
          var b = null != a && !a.__isDefault(!0);
          this.applyHasColorTransform(b);
          b
            ? (a.__setArrays(
                mb.__colorMultipliersValue,
                mb.__colorOffsetsValue
              ),
              null != this.__currentShaderBuffer
                ? (this.__currentShaderBuffer.addFloatOverride(
                    "openfl_ColorMultiplier",
                    mb.__colorMultipliersValue
                  ),
                  this.__currentShaderBuffer.addFloatOverride(
                    "openfl_ColorOffset",
                    mb.__colorOffsetsValue
                  ))
                : null != this.__currentShader &&
                  (null != this.__currentShader.__colorMultiplier &&
                    (this.__currentShader.__colorMultiplier.value =
                      mb.__colorMultipliersValue),
                  null != this.__currentShader.__colorOffset &&
                    (this.__currentShader.__colorOffset.value =
                      mb.__colorOffsetsValue)))
            : null != this.__currentShaderBuffer
            ? (this.__currentShaderBuffer.addFloatOverride(
                "openfl_ColorMultiplier",
                mb.__emptyColorValue
              ),
              this.__currentShaderBuffer.addFloatOverride(
                "openfl_ColorOffset",
                mb.__emptyColorValue
              ))
            : null != this.__currentShader &&
              (null != this.__currentShader.__colorMultiplier &&
                (this.__currentShader.__colorMultiplier.value =
                  mb.__emptyColorValue),
              null != this.__currentShader.__colorOffset &&
                (this.__currentShader.__colorOffset.value =
                  mb.__emptyColorValue));
        },
        applyHasColorTransform: function (a) {
          mb.__hasColorTransformValue[0] = a;
          null != this.__currentShaderBuffer
            ? this.__currentShaderBuffer.addBoolOverride(
                "openfl_HasColorTransform",
                mb.__hasColorTransformValue
              )
            : null != this.__currentShader &&
              null != this.__currentShader.__hasColorTransform &&
              (this.__currentShader.__hasColorTransform.value =
                mb.__hasColorTransformValue);
        },
        applyMatrix: function (a) {
          null != this.__currentShaderBuffer
            ? this.__currentShaderBuffer.addFloatOverride("openfl_Matrix", a)
            : null != this.__currentShader &&
              null != this.__currentShader.__matrix &&
              (this.__currentShader.__matrix.value = a);
        },
        setShader: function (a) {
          this.__currentShaderBuffer = null;
          this.__currentShader != a &&
            (null == a
              ? ((this.__currentShader = null),
                this.__context3D.setProgram(null))
              : ((this.__currentShader = a),
                this.__initShader(a),
                this.__context3D.setProgram(a.program),
                this.__context3D.__flushGLProgram(),
                this.__currentShader.__enable(),
                (this.__context3D.__state.shader = a)));
        },
        setViewport: function () {
          this.__gl.viewport(
            this.__offsetX,
            this.__offsetY,
            this.__displayWidth,
            this.__displayHeight
          );
        },
        updateShader: function () {
          null != this.__currentShader &&
            (null != this.__currentShader.__position &&
              (this.__currentShader.__position.__useArray = !0),
            null != this.__currentShader.__textureCoord &&
              (this.__currentShader.__textureCoord.__useArray = !0),
            this.__context3D.setProgram(this.__currentShader.program),
            this.__context3D.__flushGLProgram(),
            this.__context3D.__flushGLTextures(),
            this.__currentShader.__update());
        },
        useAlphaArray: function () {
          null != this.__currentShader &&
            null != this.__currentShader.__alpha &&
            (this.__currentShader.__alpha.__useArray = !0);
        },
        useColorTransformArray: function () {
          null != this.__currentShader &&
            (null != this.__currentShader.__colorMultiplier &&
              (this.__currentShader.__colorMultiplier.__useArray = !0),
            null != this.__currentShader.__colorOffset &&
              (this.__currentShader.__colorOffset.__useArray = !0));
        },
        __clear: function () {
          null == this.__stage || this.__stage.__transparent
            ? this.__context3D.clear(0, 0, 0, 0, 0, 0, 1)
            : this.__context3D.clear(
                this.__stage.__colorSplit[0],
                this.__stage.__colorSplit[1],
                this.__stage.__colorSplit[2],
                1,
                0,
                0,
                1
              );
          this.__cleared = !0;
        },
        __clearShader: function () {
          null != this.__currentShader &&
            (null == this.__currentShaderBuffer
              ? null != this.__currentShader.__bitmap &&
                (this.__currentShader.__bitmap.input = null)
              : this.__currentShaderBuffer.clearOverride(),
            null != this.__currentShader.__texture &&
              (this.__currentShader.__texture.input = null),
            null != this.__currentShader.__textureSize &&
              (this.__currentShader.__textureSize.value = null),
            null != this.__currentShader.__hasColorTransform &&
              (this.__currentShader.__hasColorTransform.value = null),
            null != this.__currentShader.__position &&
              (this.__currentShader.__position.value = null),
            null != this.__currentShader.__matrix &&
              (this.__currentShader.__matrix.value = null),
            this.__currentShader.__clearUseArray());
        },
        __copyShader: function (a) {
          this.__currentShader = a.__currentShader;
          this.__currentShaderBuffer = a.__currentShaderBuffer;
          this.__currentDisplayShader = a.__currentDisplayShader;
          this.__currentGraphicsShader = a.__currentGraphicsShader;
        },
        __getMatrix: function (a, b) {
          var c = xa.__pool.get();
          c.copyFrom(a);
          c.concat(this.__worldTransform);
          if (
            0 == b ||
            (1 == b &&
              0 == c.b &&
              0 == c.c &&
              1.001 > c.a &&
              0.999 < c.a &&
              1.001 > c.d &&
              0.999 < c.d)
          )
            (c.tx = Math.round(c.tx)), (c.ty = Math.round(c.ty));
          nb.identity(this.__matrix);
          nb.set(this.__matrix, 0, c.a);
          nb.set(this.__matrix, 1, c.b);
          nb.set(this.__matrix, 4, c.c);
          nb.set(this.__matrix, 5, c.d);
          nb.set(this.__matrix, 12, c.tx);
          nb.set(this.__matrix, 13, c.ty);
          nb.append(
            this.__matrix,
            this.__flipped ? this.__projectionFlipped : this.__projection
          );
          this.__values[0] = nb.get(this.__matrix, 0);
          this.__values[1] = nb.get(this.__matrix, 1);
          this.__values[2] = nb.get(this.__matrix, 2);
          this.__values[3] = nb.get(this.__matrix, 3);
          this.__values[4] = nb.get(this.__matrix, 4);
          this.__values[5] = nb.get(this.__matrix, 5);
          this.__values[6] = nb.get(this.__matrix, 6);
          this.__values[7] = nb.get(this.__matrix, 7);
          this.__values[8] = nb.get(this.__matrix, 8);
          this.__values[9] = nb.get(this.__matrix, 9);
          this.__values[10] = nb.get(this.__matrix, 10);
          this.__values[11] = nb.get(this.__matrix, 11);
          this.__values[12] = nb.get(this.__matrix, 12);
          this.__values[13] = nb.get(this.__matrix, 13);
          this.__values[14] = nb.get(this.__matrix, 14);
          this.__values[15] = nb.get(this.__matrix, 15);
          xa.__pool.release(c);
          return this.__values;
        },
        __initShader: function (a) {
          return null != a
            ? (null == a.__context &&
                ((a.__context = this.__context3D), a.__init()),
              a)
            : this.__defaultShader;
        },
        __initDisplayShader: function (a) {
          return null != a
            ? (null == a.__context &&
                ((a.__context = this.__context3D), a.__init()),
              a)
            : this.__defaultDisplayShader;
        },
        __initGraphicsShader: function (a) {
          return null != a
            ? (null == a.__context &&
                ((a.__context = this.__context3D), a.__init()),
              a)
            : this.__defaultGraphicsShader;
        },
        __initShaderBuffer: function (a) {
          return null != a
            ? this.__initGraphicsShader(a.shader)
            : this.__defaultGraphicsShader;
        },
        __popMask: function () {
          if (0 != this.__stencilReference) {
            var a = this.__maskObjects.pop();
            1 < this.__stencilReference
              ? (this.__context3D.setStencilActions(2, 1, 0, 0, 5),
                this.__context3D.setStencilReferenceValue(
                  this.__stencilReference,
                  255,
                  255
                ),
                this.__context3D.setColorMask(!1, !1, !1, !1),
                this.__renderDrawableMask(a),
                this.__stencilReference--,
                this.__context3D.setStencilActions(2, 1, 5, 5, 5),
                this.__context3D.setStencilReferenceValue(
                  this.__stencilReference,
                  255,
                  0
                ),
                this.__context3D.setColorMask(!0, !0, !0, !0))
              : ((this.__stencilReference = 0),
                this.__context3D.setStencilActions(),
                this.__context3D.setStencilReferenceValue(0, 0, 0));
          }
        },
        __popMaskObject: function (a, b) {
          null == b && (b = !0);
          null != a.__mask && this.__popMask();
          b &&
            null != a.__scrollRect &&
            (0 != a.__renderTransform.b || 0 != a.__renderTransform.c
              ? (this.__scrollRectMasks.release(
                  this.__maskObjects[this.__maskObjects.length - 1]
                ),
                this.__popMask())
              : this.__popMaskRect());
        },
        __popMaskRect: function () {
          0 < this.__numClipRects &&
            (this.__numClipRects--,
            0 < this.__numClipRects
              ? this.__scissorRect(this.__clipRects[this.__numClipRects - 1])
              : this.__scissorRect());
        },
        __pushMask: function (a) {
          0 == this.__stencilReference &&
            (this.__context3D.clear(0, 0, 0, 0, 0, 0, 4),
            (this.__updatedStencil = !0));
          this.__context3D.setStencilActions(2, 1, 2, 5, 5);
          this.__context3D.setStencilReferenceValue(
            this.__stencilReference,
            255,
            255
          );
          this.__context3D.setColorMask(!1, !1, !1, !1);
          this.__renderDrawableMask(a);
          this.__maskObjects.push(a);
          this.__stencilReference++;
          this.__context3D.setStencilActions(2, 1, 5, 5, 5);
          this.__context3D.setStencilReferenceValue(
            this.__stencilReference,
            255,
            0
          );
          this.__context3D.setColorMask(!0, !0, !0, !0);
        },
        __pushMaskObject: function (a, b) {
          null == b && (b = !0);
          b &&
            null != a.__scrollRect &&
            (0 != a.__renderTransform.b || 0 != a.__renderTransform.c
              ? ((b = this.__scrollRectMasks.get()),
                b.get_graphics().clear(),
                b.get_graphics().beginFill(65280),
                b
                  .get_graphics()
                  .drawRect(
                    a.__scrollRect.x,
                    a.__scrollRect.y,
                    a.__scrollRect.width,
                    a.__scrollRect.height
                  ),
                b.__renderTransform.copyFrom(a.__renderTransform),
                this.__pushMask(b))
              : this.__pushMaskRect(a.__scrollRect, a.__renderTransform));
          null != a.__mask && this.__pushMask(a.__mask);
        },
        __pushMaskRect: function (a, b) {
          this.__numClipRects == this.__clipRects.length &&
            (this.__clipRects[this.__numClipRects] = new ha());
          var c = xa.__pool.get();
          c.copyFrom(b);
          c.concat(this.__worldTransform);
          b = this.__clipRects[this.__numClipRects];
          a.__transform(b, c);
          0 < this.__numClipRects &&
            ((a = this.__clipRects[this.__numClipRects - 1]),
            b.__contract(a.x, a.y, a.width, a.height));
          0 > b.height && (b.height = 0);
          0 > b.width && (b.width = 0);
          xa.__pool.release(c);
          this.__scissorRect(b);
          this.__numClipRects++;
        },
        __render: function (a) {
          this.__context3D.setColorMask(!0, !0, !0, !0);
          this.__context3D.setCulling(3);
          this.__context3D.setDepthTest(!1, 0);
          this.__context3D.setStencilActions();
          this.__context3D.setStencilReferenceValue(0, 0, 0);
          this.__context3D.setScissorRectangle(null);
          this.__blendMode = null;
          this.__setBlendMode(10);
          if (null == this.__defaultRenderTarget) {
            if (
              (mb.__scissorRectangle.setTo(
                this.__offsetX,
                this.__offsetY,
                this.__displayWidth,
                this.__displayHeight
              ),
              this.__context3D.setScissorRectangle(mb.__scissorRectangle),
              (this.__upscaled =
                1 != this.__worldTransform.a || 1 != this.__worldTransform.d),
              this.__renderDrawable(a),
              0 < this.__offsetX || 0 < this.__offsetY)
            )
              0 < this.__offsetX &&
                (mb.__scissorRectangle.setTo(
                  0,
                  0,
                  this.__offsetX,
                  this.__height
                ),
                this.__context3D.setScissorRectangle(mb.__scissorRectangle),
                this.__context3D.__flushGL(),
                this.__gl.clearColor(0, 0, 0, 1),
                this.__gl.clear(this.__gl.COLOR_BUFFER_BIT),
                mb.__scissorRectangle.setTo(
                  this.__offsetX + this.__displayWidth,
                  0,
                  this.__width,
                  this.__height
                ),
                this.__context3D.setScissorRectangle(mb.__scissorRectangle),
                this.__context3D.__flushGL(),
                this.__gl.clearColor(0, 0, 0, 1),
                this.__gl.clear(this.__gl.COLOR_BUFFER_BIT)),
                0 < this.__offsetY &&
                  (mb.__scissorRectangle.setTo(
                    0,
                    0,
                    this.__width,
                    this.__offsetY
                  ),
                  this.__context3D.setScissorRectangle(mb.__scissorRectangle),
                  this.__context3D.__flushGL(),
                  this.__gl.clearColor(0, 0, 0, 1),
                  this.__gl.clear(this.__gl.COLOR_BUFFER_BIT),
                  mb.__scissorRectangle.setTo(
                    0,
                    this.__offsetY + this.__displayHeight,
                    this.__width,
                    this.__height
                  ),
                  this.__context3D.setScissorRectangle(mb.__scissorRectangle),
                  this.__context3D.__flushGL(),
                  this.__gl.clearColor(0, 0, 0, 1),
                  this.__gl.clear(this.__gl.COLOR_BUFFER_BIT)),
                this.__context3D.setScissorRectangle(null);
          } else {
            mb.__scissorRectangle.setTo(
              this.__offsetX,
              this.__offsetY,
              this.__displayWidth,
              this.__displayHeight
            );
            this.__context3D.setScissorRectangle(mb.__scissorRectangle);
            var b = a.__mask,
              c = a.__scrollRect;
            a.__mask = null;
            a.__scrollRect = null;
            this.__renderDrawable(a);
            a.__mask = b;
            a.__scrollRect = c;
          }
          this.__context3D.present();
        },
        __renderDrawable: function (a) {
          if (null != a)
            switch (a.__drawableType) {
              case 0:
                am.renderDrawable(a, this);
                break;
              case 2:
                Me.renderDrawable(a, this);
                break;
              case 3:
                Dh.renderDrawable(a, this);
                break;
              case 4:
              case 5:
                bm.renderDrawable(a, this);
                break;
              case 6:
                cm.renderDrawable(a, this);
                break;
              case 7:
                Eg.renderDrawable(a, this);
                break;
              case 8:
                Ne.renderDrawable(a, this);
                break;
              case 9:
                R.renderDrawable(a, this);
            }
        },
        __renderDrawableMask: function (a) {
          if (null != a)
            switch (a.__drawableType) {
              case 0:
                am.renderDrawableMask(a, this);
                break;
              case 2:
                Me.renderDrawableMask(a, this);
                break;
              case 3:
                Dh.renderDrawableMask(a, this);
                break;
              case 4:
              case 5:
                bm.renderDrawableMask(a, this);
                break;
              case 6:
                cm.renderDrawableMask(a, this);
                break;
              case 7:
                Eg.renderDrawableMask(a, this);
                break;
              case 8:
                Ne.renderDrawableMask(a, this);
                break;
              case 9:
                R.renderDrawableMask(a, this);
            }
        },
        __renderFilterPass: function (a, b, c, d) {
          null == d && (d = !0);
          if (null != a && null != b && null != this.__defaultRenderTarget) {
            var e = this.__context3D.__state.renderToTexture,
              f = this.__context3D.__state.renderToTextureDepthStencil,
              k = this.__context3D.__state.renderToTextureAntiAlias,
              g = this.__context3D.__state.renderToTextureSurfaceSelector;
            this.__context3D.setRenderToTexture(
              this.__defaultRenderTarget.getTexture(this.__context3D),
              !1
            );
            d && this.__context3D.clear(0, 0, 0, 0, 0, 0, 1);
            b = this.__initShader(b);
            this.setShader(b);
            this.applyAlpha(1);
            this.applyBitmapData(a, c);
            this.applyColorTransform(null);
            this.applyMatrix(this.__getMatrix(a.__renderTransform, 1));
            this.updateShader();
            c = a.getVertexBuffer(this.__context3D);
            null != b.__position &&
              this.__context3D.setVertexBufferAt(b.__position.index, c, 0, 3);
            null != b.__textureCoord &&
              this.__context3D.setVertexBufferAt(
                b.__textureCoord.index,
                c,
                3,
                2
              );
            a = a.getIndexBuffer(this.__context3D);
            this.__context3D.drawTriangles(a);
            null != e
              ? this.__context3D.setRenderToTexture(e, f, k, g)
              : this.__context3D.setRenderToBackBuffer();
            this.__clearShader();
          }
        },
        __resize: function (a, b) {
          this.__width = a;
          this.__height = b;
          a =
            null == this.__defaultRenderTarget
              ? this.__stage.stageWidth
              : this.__defaultRenderTarget.width;
          b =
            null == this.__defaultRenderTarget
              ? this.__stage.stageHeight
              : this.__defaultRenderTarget.height;
          if (null == this.__defaultRenderTarget) {
            var c = this.__worldTransform;
            c = Math.round(0 * c.a + 0 * c.c + c.tx);
          } else c = 0;
          this.__offsetX = c;
          null == this.__defaultRenderTarget
            ? ((c = this.__worldTransform),
              (c = Math.round(0 * c.b + 0 * c.d + c.ty)))
            : (c = 0);
          this.__offsetY = c;
          null == this.__defaultRenderTarget
            ? ((c = this.__worldTransform),
              (c = Math.round(a * c.a + 0 * c.c + c.tx - this.__offsetX)))
            : (c = a);
          this.__displayWidth = c;
          null == this.__defaultRenderTarget
            ? ((c = this.__worldTransform),
              (c = Math.round(0 * c.b + b * c.d + c.ty - this.__offsetY)))
            : (c = b);
          this.__displayHeight = c;
          nb.createOrtho(
            this.__projection,
            0,
            this.__displayWidth + 2 * this.__offsetX,
            0,
            this.__displayHeight + 2 * this.__offsetY,
            -1e3,
            1e3
          );
          nb.createOrtho(
            this.__projectionFlipped,
            0,
            this.__displayWidth + 2 * this.__offsetX,
            this.__displayHeight + 2 * this.__offsetY,
            0,
            -1e3,
            1e3
          );
        },
        __resumeClipAndMask: function (a) {
          0 < this.__stencilReference
            ? (this.__context3D.setStencilActions(2, 1, 5, 5, 5),
              this.__context3D.setStencilReferenceValue(
                this.__stencilReference,
                255,
                0
              ))
            : (this.__context3D.setStencilActions(),
              this.__context3D.setStencilReferenceValue(0, 0, 0));
          0 < this.__numClipRects
            ? this.__scissorRect(this.__clipRects[this.__numClipRects - 1])
            : this.__scissorRect();
        },
        __scissorRect: function (a) {
          if (null != a) {
            var b = Math.floor(a.x),
              c = Math.floor(a.y),
              d = 0 < a.width ? Math.ceil(a.get_right()) - b : 0,
              e = 0 < a.height ? Math.ceil(a.get_bottom()) - c : 0;
            this.__context3D.__backBufferWantsBestResolution &&
              ((b = Math.floor(a.x / this.__pixelRatio)),
              (c = Math.floor(a.y / this.__pixelRatio)),
              (d =
                0 < a.width
                  ? Math.ceil(a.get_right() / this.__pixelRatio) - b
                  : 0),
              (e =
                0 < a.height
                  ? Math.ceil(a.get_bottom() / this.__pixelRatio) - c
                  : 0));
            0 > d && (d = 0);
            0 > e && (e = 0);
            mb.__scissorRectangle.setTo(b, c, d, e);
            this.__context3D.setScissorRectangle(mb.__scissorRectangle);
          } else this.__context3D.setScissorRectangle(null);
        },
        __setBlendMode: function (a) {
          null != this.__overrideBlendMode && (a = this.__overrideBlendMode);
          if (this.__blendMode != a)
            switch (((this.__blendMode = a), a)) {
              case 0:
                this.__context3D.setBlendFactors(2, 2);
                break;
              case 9:
                this.__context3D.setBlendFactors(1, 5);
                break;
              case 12:
                this.__context3D.setBlendFactors(2, 6);
                break;
              case 14:
                this.__context3D.setBlendFactors(2, 2);
                this.__context3D.__setGLBlendEquation(
                  this.__gl.FUNC_REVERSE_SUBTRACT
                );
                break;
              default:
                this.__context3D.setBlendFactors(2, 5);
            }
        },
        __setRenderTarget: function (a) {
          this.__defaultRenderTarget = a;
          this.__flipped = null == a;
          null != a && this.__resize(a.width, a.height);
        },
        __setShaderBuffer: function (a) {
          this.setShader(a.shader);
          this.__currentShaderBuffer = a;
        },
        __suspendClipAndMask: function () {
          0 < this.__stencilReference &&
            (this.__context3D.setStencilActions(),
            this.__context3D.setStencilReferenceValue(0, 0, 0));
          0 < this.__numClipRects && this.__scissorRect();
        },
        __updateShaderBuffer: function (a) {
          null != this.__currentShader &&
            null != this.__currentShaderBuffer &&
            this.__currentShader.__updateFromBuffer(
              this.__currentShaderBuffer,
              a
            );
        },
        __class__: mb,
      });
      var Tj = function (a) {
        this.onComplete = new Gc();
        this.display = a;
        null != a &&
          (a.addEventListener("unload", n(this, this.display_onUnload)),
          sa.get_current().addChild(a));
      };
      h["openfl.display.Preloader"] = Tj;
      Tj.__name__ = "openfl.display.Preloader";
      Tj.prototype = {
        start: function () {
          this.ready = !0;
          sa.get_current().get_loaderInfo().__complete();
          if (null != this.display) {
            var a = new Ba("complete", !0, !0);
            this.display.dispatchEvent(a);
            a.isDefaultPrevented() ||
              this.display.dispatchEvent(new Ba("unload"));
          } else
            this.complete || ((this.complete = !0), this.onComplete.dispatch());
        },
        update: function (a, b) {
          sa.get_current().get_loaderInfo().__update(a, b);
          null != this.display &&
            this.display.dispatchEvent(new vi("progress", !0, !0, a, b));
        },
        display_onUnload: function (a) {
          null != this.display &&
            (this.display.removeEventListener(
              "unload",
              n(this, this.display_onUnload)
            ),
            this.display.parent == sa.get_current() &&
              sa.get_current().removeChild(this.display),
            sa.get_current().stage.set_focus(null),
            (this.display = null));
          this.ready &&
            !this.complete &&
            ((this.complete = !0), this.onComplete.dispatch());
        },
        __class__: Tj,
      };
      var dm = function () {
        t.call(this);
        var a = this.getBackgroundColor(),
          b = 0;
        70 >
          0.299 * ((a >> 16) & 255) +
            0.587 * ((a >> 8) & 255) +
            0.114 * (a & 255) && (b = 16777215);
        a = this.getHeight() / 2 - 3.5;
        var c = this.getWidth() - 60;
        this.outline = new wg();
        this.outline.get_graphics().beginFill(b, 0.07);
        this.outline.get_graphics().drawRect(0, 0, c, 7);
        this.outline.set_x(30);
        this.outline.set_y(a);
        this.outline.set_alpha(0);
        this.addChild(this.outline);
        this.progress = new wg();
        this.progress.get_graphics().beginFill(b, 0.35);
        this.progress.get_graphics().drawRect(0, 0, c - 4, 3);
        this.progress.set_x(32);
        this.progress.set_y(a + 2);
        this.progress.set_scaleX(0);
        this.progress.set_alpha(0);
        this.addChild(this.progress);
        this.startAnimation = sa.getTimer() + 100;
        this.endAnimation = this.startAnimation + 1e3;
        this.addEventListener(
          "addedToStage",
          n(this, this.this_onAddedToStage)
        );
      };
      h["openfl.display.DefaultPreloader"] = dm;
      dm.__name__ = "openfl.display.DefaultPreloader";
      dm.__super__ = t;
      dm.prototype = q(t.prototype, {
        getBackgroundColor: function () {
          var a = sa.get_current().stage.window.context.attributes;
          return Object.prototype.hasOwnProperty.call(a, "background") &&
            null != a.background
            ? a.background
            : 0;
        },
        getHeight: function () {
          var a = sa.get_current().stage.window.__height;
          return 0 < a ? a : sa.get_current().stage.stageHeight;
        },
        getWidth: function () {
          var a = sa.get_current().stage.window.__width;
          return 0 < a ? a : sa.get_current().stage.stageWidth;
        },
        onInit: function () {
          this.addEventListener("enterFrame", n(this, this.this_onEnterFrame));
        },
        onLoaded: function () {
          this.removeEventListener(
            "enterFrame",
            n(this, this.this_onEnterFrame)
          );
          this.dispatchEvent(new Ba("unload"));
        },
        onUpdate: function (a, b) {
          var c = 0;
          0 < b && ((c = a / b), 1 < c && (c = 1));
          this.progress.set_scaleX(c);
        },
        this_onAddedToStage: function (a) {
          this.removeEventListener(
            "addedToStage",
            n(this, this.this_onAddedToStage)
          );
          this.onInit();
          this.onUpdate(
            this.get_loaderInfo().bytesLoaded,
            this.get_loaderInfo().bytesTotal
          );
          this.addEventListener("progress", n(this, this.this_onProgress));
          this.addEventListener("complete", n(this, this.this_onComplete));
        },
        this_onComplete: function (a) {
          a.preventDefault();
          this.removeEventListener("progress", n(this, this.this_onProgress));
          this.removeEventListener("complete", n(this, this.this_onComplete));
          this.onLoaded();
        },
        this_onEnterFrame: function (a) {
          a =
            (sa.getTimer() - this.startAnimation) /
            (this.endAnimation - this.startAnimation);
          0 > a && (a = 0);
          1 < a && (a = 1);
          this.outline.set_alpha(this.progress.set_alpha(a));
        },
        this_onProgress: function (a) {
          this.onUpdate(a.bytesLoaded | 0, a.bytesTotal | 0);
        },
        __class__: dm,
      });
      var Oo = {
          _new: function (a) {
            return {};
          },
        },
        Ni = function () {
          this.channels = 0;
          this.filter = 5;
          this.index = this.height = 0;
          this.mipFilter = 2;
          this.wrap = this.width = 0;
        };
      h["openfl.display.ShaderInput"] = Ni;
      Ni.__name__ = "openfl.display.ShaderInput";
      Ni.prototype = {
        __disableGL: function (a, b) {
          0 > b || a.setTextureAt(b, null);
        },
        __updateGL: function (a, b, c, d, e, f) {
          c = null != c ? c : this.input;
          d = null != d ? d : this.filter;
          e = null != e ? e : this.mipFilter;
          f = null != f ? f : this.wrap;
          null != c
            ? (a.setTextureAt(b, c.getTexture(a)),
              a.setSamplerStateAt(b, f, d, e))
            : a.setTextureAt(b, null);
        },
        __class__: Ni,
      };
      var ng = function () {
        this.index = 0;
      };
      h["openfl.display.ShaderParameter"] = ng;
      ng.__name__ = "openfl.display.ShaderParameter";
      ng.prototype = {
        __disableGL: function (a) {
          if (!(0 > this.index || ((a = a.gl), this.__isUniform)))
            for (var b = 0, c = this.__arrayLength; b < c; ) {
              var d = b++;
              a.disableVertexAttribArray(this.index + d);
            }
        },
        __updateGL: function (a, b) {
          if (!(0 > this.index)) {
            a = a.gl;
            b = null != b ? b : this.value;
            var c = this.__isBool ? b : null,
              d = this.__isFloat ? b : null,
              e = this.__isInt ? b : null;
            if (this.__isUniform)
              if (null != b && b.length >= this.__length)
                switch (this.type) {
                  case 0:
                    a.uniform1i(this.index, c[0] ? 1 : 0);
                    break;
                  case 1:
                    a.uniform2i(this.index, c[0] ? 1 : 0, c[1] ? 1 : 0);
                    break;
                  case 2:
                    a.uniform3i(
                      this.index,
                      c[0] ? 1 : 0,
                      c[1] ? 1 : 0,
                      c[2] ? 1 : 0
                    );
                    break;
                  case 3:
                    a.uniform4i(
                      this.index,
                      c[0] ? 1 : 0,
                      c[1] ? 1 : 0,
                      c[2] ? 1 : 0,
                      c[3] ? 1 : 0
                    );
                    break;
                  case 4:
                    a.uniform1f(this.index, d[0]);
                    break;
                  case 5:
                    a.uniform2f(this.index, d[0], d[1]);
                    break;
                  case 6:
                    a.uniform3f(this.index, d[0], d[1], d[2]);
                    break;
                  case 7:
                    a.uniform4f(this.index, d[0], d[1], d[2], d[3]);
                    break;
                  case 8:
                    a.uniform1i(this.index, e[0]);
                    break;
                  case 9:
                    a.uniform2i(this.index, e[0], e[1]);
                    break;
                  case 10:
                    a.uniform3i(this.index, e[0], e[1], e[2]);
                    break;
                  case 11:
                    a.uniform4i(this.index, e[0], e[1], e[2], e[3]);
                    break;
                  case 12:
                    this.__uniformMatrix[0] = d[0];
                    this.__uniformMatrix[1] = d[1];
                    this.__uniformMatrix[2] = d[2];
                    this.__uniformMatrix[3] = d[3];
                    Sc.uniformMatrix2fv(
                      a,
                      this.index,
                      !1,
                      this.__uniformMatrix
                    );
                    break;
                  case 16:
                    this.__uniformMatrix[0] = d[0];
                    this.__uniformMatrix[1] = d[1];
                    this.__uniformMatrix[2] = d[2];
                    this.__uniformMatrix[3] = d[3];
                    this.__uniformMatrix[4] = d[4];
                    this.__uniformMatrix[5] = d[5];
                    this.__uniformMatrix[6] = d[6];
                    this.__uniformMatrix[7] = d[7];
                    this.__uniformMatrix[8] = d[8];
                    Sc.uniformMatrix3fv(
                      a,
                      this.index,
                      !1,
                      this.__uniformMatrix
                    );
                    break;
                  case 20:
                    (this.__uniformMatrix[0] = d[0]),
                      (this.__uniformMatrix[1] = d[1]),
                      (this.__uniformMatrix[2] = d[2]),
                      (this.__uniformMatrix[3] = d[3]),
                      (this.__uniformMatrix[4] = d[4]),
                      (this.__uniformMatrix[5] = d[5]),
                      (this.__uniformMatrix[6] = d[6]),
                      (this.__uniformMatrix[7] = d[7]),
                      (this.__uniformMatrix[8] = d[8]),
                      (this.__uniformMatrix[9] = d[9]),
                      (this.__uniformMatrix[10] = d[10]),
                      (this.__uniformMatrix[11] = d[11]),
                      (this.__uniformMatrix[12] = d[12]),
                      (this.__uniformMatrix[13] = d[13]),
                      (this.__uniformMatrix[14] = d[14]),
                      (this.__uniformMatrix[15] = d[15]),
                      Sc.uniformMatrix4fv(
                        a,
                        this.index,
                        !1,
                        this.__uniformMatrix
                      );
                }
              else
                switch (this.type) {
                  case 1:
                  case 9:
                    a.uniform2i(this.index, 0, 0);
                    break;
                  case 3:
                  case 11:
                    a.uniform4i(this.index, 0, 0, 0, 0);
                    break;
                  case 4:
                    a.uniform1f(this.index, 0);
                    break;
                  case 5:
                    a.uniform2f(this.index, 0, 0);
                    break;
                  case 6:
                    a.uniform3f(this.index, 0, 0, 0);
                    break;
                  case 7:
                    a.uniform4f(this.index, 0, 0, 0, 0);
                    break;
                  case 0:
                  case 8:
                    a.uniform1i(this.index, 0);
                    break;
                  case 2:
                  case 10:
                    a.uniform3i(this.index, 0, 0, 0);
                    break;
                  case 12:
                    this.__uniformMatrix[0] = 0;
                    this.__uniformMatrix[1] = 0;
                    this.__uniformMatrix[2] = 0;
                    this.__uniformMatrix[3] = 0;
                    Sc.uniformMatrix2fv(
                      a,
                      this.index,
                      !1,
                      this.__uniformMatrix
                    );
                    break;
                  case 16:
                    this.__uniformMatrix[0] = 0;
                    this.__uniformMatrix[1] = 0;
                    this.__uniformMatrix[2] = 0;
                    this.__uniformMatrix[3] = 0;
                    this.__uniformMatrix[4] = 0;
                    this.__uniformMatrix[5] = 0;
                    this.__uniformMatrix[6] = 0;
                    this.__uniformMatrix[7] = 0;
                    this.__uniformMatrix[8] = 0;
                    Sc.uniformMatrix3fv(
                      a,
                      this.index,
                      !1,
                      this.__uniformMatrix
                    );
                    break;
                  case 20:
                    (this.__uniformMatrix[0] = 0),
                      (this.__uniformMatrix[1] = 0),
                      (this.__uniformMatrix[2] = 0),
                      (this.__uniformMatrix[3] = 0),
                      (this.__uniformMatrix[4] = 0),
                      (this.__uniformMatrix[5] = 0),
                      (this.__uniformMatrix[6] = 0),
                      (this.__uniformMatrix[7] = 0),
                      (this.__uniformMatrix[8] = 0),
                      (this.__uniformMatrix[9] = 0),
                      (this.__uniformMatrix[10] = 0),
                      (this.__uniformMatrix[11] = 0),
                      (this.__uniformMatrix[12] = 0),
                      (this.__uniformMatrix[13] = 0),
                      (this.__uniformMatrix[14] = 0),
                      (this.__uniformMatrix[15] = 0),
                      Sc.uniformMatrix4fv(
                        a,
                        this.index,
                        !1,
                        this.__uniformMatrix
                      );
                }
            else if (
              this.__useArray ||
              (null != b && b.length != this.__length)
            )
              for (f = 0, k = this.__arrayLength; f < k; )
                (g = f++), a.enableVertexAttribArray(this.index + g);
            else {
              for (var f = 0, k = this.__arrayLength; f < k; ) {
                var g = f++;
                a.disableVertexAttribArray(this.index + g);
              }
              if (null != b)
                switch (this.type) {
                  case 0:
                    a.vertexAttrib1f(this.index, c[0] ? 1 : 0);
                    break;
                  case 1:
                    a.vertexAttrib2f(this.index, c[0] ? 1 : 0, c[1] ? 1 : 0);
                    break;
                  case 2:
                    a.vertexAttrib3f(
                      this.index,
                      c[0] ? 1 : 0,
                      c[1] ? 1 : 0,
                      c[2] ? 1 : 0
                    );
                    break;
                  case 3:
                    a.vertexAttrib4f(
                      this.index,
                      c[0] ? 1 : 0,
                      c[1] ? 1 : 0,
                      c[2] ? 1 : 0,
                      c[3] ? 1 : 0
                    );
                    break;
                  case 4:
                    a.vertexAttrib1f(this.index, d[0]);
                    break;
                  case 5:
                    a.vertexAttrib2f(this.index, d[0], d[1]);
                    break;
                  case 6:
                    a.vertexAttrib3f(this.index, d[0], d[1], d[2]);
                    break;
                  case 7:
                    a.vertexAttrib4f(this.index, d[0], d[1], d[2], d[3]);
                    break;
                  case 8:
                    a.vertexAttrib1f(this.index, e[0]);
                    break;
                  case 9:
                    a.vertexAttrib2f(this.index, e[0], e[1]);
                    break;
                  case 10:
                    a.vertexAttrib3f(this.index, e[0], e[1], e[2]);
                    break;
                  case 11:
                    a.vertexAttrib4f(this.index, e[0], e[1], e[2], e[3]);
                    break;
                  case 12:
                    a.vertexAttrib2f(this.index + 0, d[0], d[1]);
                    a.vertexAttrib2f(this.index + 1, d[2], d[3]);
                    break;
                  case 16:
                    a.vertexAttrib3f(this.index + 0, d[0], d[1], d[2]);
                    a.vertexAttrib3f(this.index + 1, d[3], d[4], d[5]);
                    a.vertexAttrib3f(this.index + 2, d[6], d[7], d[8]);
                    break;
                  case 20:
                    a.vertexAttrib4f(this.index + 0, d[0], d[1], d[2], d[3]),
                      a.vertexAttrib4f(this.index + 1, d[4], d[5], d[6], d[7]),
                      a.vertexAttrib4f(
                        this.index + 2,
                        d[8],
                        d[9],
                        d[10],
                        d[11]
                      ),
                      a.vertexAttrib4f(
                        this.index + 3,
                        d[12],
                        d[13],
                        d[14],
                        d[15]
                      );
                }
              else
                switch (this.type) {
                  case 1:
                  case 5:
                  case 9:
                    a.vertexAttrib2f(this.index, 0, 0);
                    break;
                  case 3:
                  case 7:
                  case 11:
                    a.vertexAttrib4f(this.index, 0, 0, 0, 0);
                    break;
                  case 0:
                  case 4:
                  case 8:
                    a.vertexAttrib1f(this.index, 0);
                    break;
                  case 2:
                  case 6:
                  case 10:
                    a.vertexAttrib3f(this.index, 0, 0, 0);
                    break;
                  case 12:
                    a.vertexAttrib2f(this.index + 0, 0, 0);
                    a.vertexAttrib2f(this.index + 1, 0, 0);
                    break;
                  case 16:
                    a.vertexAttrib3f(this.index + 0, 0, 0, 0);
                    a.vertexAttrib3f(this.index + 1, 0, 0, 0);
                    a.vertexAttrib3f(this.index + 2, 0, 0, 0);
                    break;
                  case 20:
                    a.vertexAttrib4f(this.index + 0, 0, 0, 0, 0),
                      a.vertexAttrib4f(this.index + 1, 0, 0, 0, 0),
                      a.vertexAttrib4f(this.index + 2, 0, 0, 0, 0),
                      a.vertexAttrib4f(this.index + 3, 0, 0, 0, 0);
                }
            }
          }
        },
        __updateGLFromBuffer: function (a, b, c, d, e) {
          if (!(0 > this.index))
            if (((a = a.gl), this.__isUniform)) {
              if (d >= this.__length)
                switch (this.type) {
                  case 1:
                  case 9:
                    a.uniform2i(this.index, b[c] | 0, b[c + 1] | 0);
                    break;
                  case 3:
                  case 11:
                    a.uniform4i(
                      this.index,
                      b[c] | 0,
                      b[c + 1] | 0,
                      b[c + 2] | 0,
                      b[c + 3] | 0
                    );
                    break;
                  case 4:
                    a.uniform1f(this.index, b[c]);
                    break;
                  case 5:
                    a.uniform2f(this.index, b[c], b[c + 1]);
                    break;
                  case 6:
                    a.uniform3f(this.index, b[c], b[c + 1], b[c + 2]);
                    break;
                  case 7:
                    a.uniform4f(this.index, b[c], b[c + 1], b[c + 2], b[c + 3]);
                    break;
                  case 0:
                  case 8:
                    a.uniform1i(this.index, b[c] | 0);
                    break;
                  case 2:
                  case 10:
                    a.uniform3i(
                      this.index,
                      b[c] | 0,
                      b[c + 1] | 0,
                      b[c + 2] | 0
                    );
                    break;
                  case 12:
                    this.__uniformMatrix[0] = b[c];
                    this.__uniformMatrix[1] = b[c + 1];
                    this.__uniformMatrix[2] = b[c + 2];
                    this.__uniformMatrix[3] = b[c + 3];
                    Sc.uniformMatrix2fv(
                      a,
                      this.index,
                      !1,
                      this.__uniformMatrix
                    );
                    break;
                  case 16:
                    this.__uniformMatrix[0] = b[c];
                    this.__uniformMatrix[1] = b[c + 1];
                    this.__uniformMatrix[2] = b[c + 2];
                    this.__uniformMatrix[3] = b[c + 3];
                    this.__uniformMatrix[4] = b[c + 4];
                    this.__uniformMatrix[5] = b[c + 5];
                    this.__uniformMatrix[6] = b[c + 6];
                    this.__uniformMatrix[7] = b[c + 7];
                    this.__uniformMatrix[8] = b[c + 8];
                    Sc.uniformMatrix3fv(
                      a,
                      this.index,
                      !1,
                      this.__uniformMatrix
                    );
                    break;
                  case 20:
                    (this.__uniformMatrix[0] = b[c]),
                      (this.__uniformMatrix[1] = b[c + 1]),
                      (this.__uniformMatrix[2] = b[c + 2]),
                      (this.__uniformMatrix[3] = b[c + 3]),
                      (this.__uniformMatrix[4] = b[c + 4]),
                      (this.__uniformMatrix[5] = b[c + 5]),
                      (this.__uniformMatrix[6] = b[c + 6]),
                      (this.__uniformMatrix[7] = b[c + 7]),
                      (this.__uniformMatrix[8] = b[c + 8]),
                      (this.__uniformMatrix[9] = b[c + 9]),
                      (this.__uniformMatrix[10] = b[c + 10]),
                      (this.__uniformMatrix[11] = b[c + 11]),
                      (this.__uniformMatrix[12] = b[c + 12]),
                      (this.__uniformMatrix[13] = b[c + 13]),
                      (this.__uniformMatrix[14] = b[c + 14]),
                      (this.__uniformMatrix[15] = b[c + 15]),
                      Sc.uniformMatrix4fv(
                        a,
                        this.index,
                        !1,
                        this.__uniformMatrix
                      );
                }
            } else if (this.__internal || (0 != d && d != this.__length)) {
              b = a.FLOAT;
              this.__isBool ? (b = a.INT) : this.__isInt && (b = a.INT);
              f = 0;
              for (k = this.__arrayLength; f < k; )
                (g = f++), a.enableVertexAttribArray(this.index + g);
              if (0 < d)
                for (f = 0, k = this.__arrayLength; f < k; )
                  (g = f++),
                    a.vertexAttribPointer(
                      this.index + g,
                      this.__length,
                      b,
                      !1,
                      4 * this.__length,
                      4 * (c + e * this.__length + g * this.__arrayLength)
                    );
            } else {
              for (var f = 0, k = this.__arrayLength; f < k; ) {
                var g = f++;
                a.disableVertexAttribArray(this.index + g);
              }
              if (0 < d)
                switch (this.type) {
                  case 1:
                  case 5:
                  case 9:
                    a.vertexAttrib2f(this.index, b[c], b[c + 1]);
                    break;
                  case 3:
                  case 7:
                  case 11:
                    a.vertexAttrib4f(
                      this.index,
                      b[c],
                      b[c + 1],
                      b[c + 2],
                      b[c + 3]
                    );
                    break;
                  case 0:
                  case 4:
                  case 8:
                    a.vertexAttrib1f(this.index, b[c]);
                    break;
                  case 2:
                  case 6:
                  case 10:
                    a.vertexAttrib3f(this.index, b[c], b[c + 1], b[c + 2]);
                    break;
                  case 12:
                    a.vertexAttrib2f(this.index + 0, b[c], b[c + 1]);
                    a.vertexAttrib2f(this.index + 1, b[c + 2], b[c + 2 + 1]);
                    break;
                  case 16:
                    a.vertexAttrib3f(this.index + 0, b[c], b[c + 1], b[c + 2]);
                    a.vertexAttrib3f(
                      this.index + 1,
                      b[c + 3],
                      b[c + 3 + 1],
                      b[c + 3 + 2]
                    );
                    a.vertexAttrib3f(
                      this.index + 2,
                      b[c + 6],
                      b[c + 6 + 1],
                      b[c + 6 + 2]
                    );
                    break;
                  case 20:
                    a.vertexAttrib4f(
                      this.index + 0,
                      b[c],
                      b[c + 1],
                      b[c + 2],
                      b[c + 3]
                    ),
                      a.vertexAttrib4f(
                        this.index + 1,
                        b[c + 4],
                        b[c + 4 + 1],
                        b[c + 4 + 2],
                        b[c + 4 + 3]
                      ),
                      a.vertexAttrib4f(
                        this.index + 2,
                        b[c + 8],
                        b[c + 8 + 1],
                        b[c + 8 + 2],
                        b[c + 8 + 3]
                      ),
                      a.vertexAttrib4f(
                        this.index + 3,
                        b[c + 12],
                        b[c + 12 + 1],
                        b[c + 12 + 2],
                        b[c + 12 + 3]
                      );
                }
              else
                switch (this.type) {
                  case 1:
                  case 5:
                  case 9:
                    a.vertexAttrib2f(this.index, 0, 0);
                    break;
                  case 3:
                  case 7:
                  case 11:
                    a.vertexAttrib4f(this.index, 0, 0, 0, 0);
                    break;
                  case 0:
                  case 4:
                  case 8:
                    a.vertexAttrib1f(this.index, 0);
                    break;
                  case 2:
                  case 6:
                  case 10:
                    a.vertexAttrib3f(this.index, 0, 0, 0);
                    break;
                  case 12:
                    a.vertexAttrib2f(this.index + 0, 0, 0);
                    a.vertexAttrib2f(this.index + 1, 0, 0);
                    break;
                  case 16:
                    a.vertexAttrib3f(this.index + 0, 0, 0, 0);
                    a.vertexAttrib3f(this.index + 1, 0, 0, 0);
                    a.vertexAttrib3f(this.index + 2, 0, 0, 0);
                    break;
                  case 20:
                    a.vertexAttrib4f(this.index + 0, 0, 0, 0, 0),
                      a.vertexAttrib4f(this.index + 1, 0, 0, 0, 0),
                      a.vertexAttrib4f(this.index + 2, 0, 0, 0, 0),
                      a.vertexAttrib4f(this.index + 3, 0, 0, 0, 0);
                }
            }
        },
        set_name: function (a) {
          this.__internal = K.startsWith(a, "openfl_");
          return (this.name = a);
        },
        __class__: ng,
        __properties__: { set_name: "set_name" },
      };
      var wg = function () {
        z.call(this);
        this.__drawableType = 3;
      };
      h["openfl.display.Shape"] = wg;
      wg.__name__ = "openfl.display.Shape";
      wg.__super__ = z;
      wg.prototype = q(z.prototype, {
        get_graphics: function () {
          null == this.__graphics && (this.__graphics = new Yd(this));
          return this.__graphics;
        },
        __class__: wg,
        __properties__: q(z.prototype.__properties__, {
          get_graphics: "get_graphics",
        }),
      });
      var wi = function (a, b, c, d) {
        hb.call(this);
        this.__drawableType = 6;
        this.enabled = !0;
        this.trackAsMenu = !1;
        this.useHandCursor = !0;
        this.__upState = null != a ? a : new z();
        this.__overState = b;
        this.__downState = c;
        this.set_hitTestState(null != d ? d : new z());
        this.addEventListener("mouseDown", n(this, this.__this_onMouseDown));
        this.addEventListener("mouseOut", n(this, this.__this_onMouseOut));
        this.addEventListener("mouseOver", n(this, this.__this_onMouseOver));
        this.addEventListener("mouseUp", n(this, this.__this_onMouseUp));
        this.__tabEnabled = !0;
        this.set___currentState(this.__upState);
        null != wi.__constructor &&
          ((a = wi.__constructor), (wi.__constructor = null), a(this));
      };
      h["openfl.display.SimpleButton"] = wi;
      wi.__name__ = "openfl.display.SimpleButton";
      wi.__super__ = hb;
      wi.prototype = q(hb.prototype, {
        __getBounds: function (a, b) {
          hb.prototype.__getBounds.call(this, a, b);
          var c = xa.__pool.get(),
            d = this.__currentState.__transform;
          c.a = d.a * b.a + d.b * b.c;
          c.b = d.a * b.b + d.b * b.d;
          c.c = d.c * b.a + d.d * b.c;
          c.d = d.c * b.b + d.d * b.d;
          c.tx = d.tx * b.a + d.ty * b.c + b.tx;
          c.ty = d.tx * b.b + d.ty * b.d + b.ty;
          this.__currentState.__getBounds(a, c);
          xa.__pool.release(c);
        },
        __getRenderBounds: function (a, b) {
          if (null != this.__scrollRect)
            hb.prototype.__getRenderBounds.call(this, a, b);
          else {
            hb.prototype.__getBounds.call(this, a, b);
            var c = xa.__pool.get(),
              d = this.__currentState.__transform;
            c.a = d.a * b.a + d.b * b.c;
            c.b = d.a * b.b + d.b * b.d;
            c.c = d.c * b.a + d.d * b.c;
            c.d = d.c * b.b + d.d * b.d;
            c.tx = d.tx * b.a + d.ty * b.c + b.tx;
            c.ty = d.tx * b.b + d.ty * b.d + b.ty;
            this.__currentState.__getRenderBounds(a, c);
            xa.__pool.release(c);
          }
        },
        __getCursor: function () {
          return this.useHandCursor && !this.__ignoreEvent && this.enabled
            ? "button"
            : null;
        },
        __hitTest: function (a, b, c, d, e, f) {
          var k = !1;
          null != this.get_hitTestState()
            ? this.get_hitTestState().__hitTest(a, b, c, d, e, f) &&
              (null != d &&
                (0 == d.length ? (d[0] = f) : (d[d.length - 1] = f)),
              (k = !e || this.mouseEnabled))
            : null != this.__currentState &&
              (!f.get_visible() ||
              this.__isMask ||
              (e && !this.mouseEnabled) ||
              (null != this.get_mask() && !this.get_mask().__hitTestMask(a, b))
                ? (k = !1)
                : this.__currentState.__hitTest(a, b, c, d, e, f) && (k = e));
          if (null != d)
            for (; 1 < d.length && d[d.length - 1] == d[d.length - 2]; )
              d.pop();
          return k;
        },
        __hitTestMask: function (a, b) {
          var c = !1;
          this.__currentState.__hitTestMask(a, b) && (c = !0);
          return c;
        },
        __setStageReference: function (a) {
          hb.prototype.__setStageReference.call(this, a);
          null != this.__currentState &&
            this.__currentState.__setStageReference(a);
          null != this.get_hitTestState() &&
            this.get_hitTestState() != this.__currentState &&
            this.get_hitTestState().__setStageReference(a);
        },
        __setTransformDirty: function () {
          hb.prototype.__setTransformDirty.call(this);
          null != this.__currentState &&
            this.__currentState.__setTransformDirty();
          null != this.get_hitTestState() &&
            this.get_hitTestState() != this.__currentState &&
            this.get_hitTestState().__setTransformDirty();
        },
        __update: function (a, b) {
          hb.prototype.__update.call(this, a, b);
          b &&
            (null != this.__currentState && this.__currentState.__update(a, !0),
            null != this.get_hitTestState() &&
              this.get_hitTestState() != this.__currentState &&
              this.get_hitTestState().__update(a, !0));
        },
        __updateTransforms: function (a) {
          hb.prototype.__updateTransforms.call(this, a);
          null != this.__currentState &&
            this.__currentState.__updateTransforms();
          null != this.get_hitTestState() &&
            this.get_hitTestState() != this.__currentState &&
            this.get_hitTestState().__updateTransforms();
        },
        get_downState: function () {
          return this.__downState;
        },
        get_hitTestState: function () {
          return this.__hitTestState;
        },
        set_hitTestState: function (a) {
          null != this.__hitTestState &&
            this.__hitTestState != a &&
            this.__hitTestState != this.get_downState() &&
            this.__hitTestState != this.get_upState() &&
            this.__hitTestState != this.get_overState() &&
            (this.__hitTestState.__renderParent = null);
          null != a &&
            ((a.__renderParent = this),
            a.__renderDirty ||
              ((a.__renderDirty = !0), a.__setParentRenderDirty()));
          return (this.__hitTestState = a);
        },
        get_overState: function () {
          return this.__overState;
        },
        get_upState: function () {
          return this.__upState;
        },
        set___currentState: function (a) {
          null != this.__currentState &&
            this.__currentState != this.get_hitTestState() &&
            (this.__currentState.__renderParent = null);
          null != a && null != a.parent && a.parent.removeChild(a);
          z.__supportDOM &&
            null == this.__previousStates &&
            (this.__previousStates = ja.toObjectVector(null));
          if (a != this.__currentState) {
            if (z.__supportDOM) {
              null != this.__currentState &&
                (this.__currentState.__setStageReference(null),
                this.__previousStates.push(this.__currentState));
              var b = this.__previousStates.indexOf(a, 0);
              if (-1 < b) {
                var c = this.__previousStates;
                c.__tempIndex = b;
                b = 0;
                for (var d = []; b < d.length; ) {
                  var e = d[b++];
                  c.insertAt(c.__tempIndex, e);
                  c.__tempIndex++;
                }
                c.splice(c.__tempIndex, 1);
              }
            }
            null != a &&
              ((a.__renderParent = this),
              a.__renderDirty ||
                ((a.__renderDirty = !0), a.__setParentRenderDirty()));
            this.__renderDirty ||
              ((this.__renderDirty = !0), this.__setParentRenderDirty());
          }
          return (this.__currentState = a);
        },
        __this_onMouseDown: function (a) {
          this.enabled && this.set___currentState(this.get_downState());
        },
        __this_onMouseOut: function (a) {
          this.__ignoreEvent = !1;
          this.get_upState() != this.__currentState &&
            this.set___currentState(this.get_upState());
        },
        __this_onMouseOver: function (a) {
          a.buttonDown && (this.__ignoreEvent = !0);
          this.get_overState() != this.__currentState &&
            null != this.get_overState() &&
            !this.__ignoreEvent &&
            this.enabled &&
            this.set___currentState(this.get_overState());
        },
        __this_onMouseUp: function (a) {
          this.__ignoreEvent = !1;
          this.enabled && null != this.get_overState()
            ? this.set___currentState(this.get_overState())
            : this.set___currentState(this.get_upState());
        },
        __class__: wi,
        __properties__: q(hb.prototype.__properties__, {
          set___currentState: "set___currentState",
          get_upState: "get_upState",
          get_overState: "get_overState",
          set_hitTestState: "set_hitTestState",
          get_hitTestState: "get_hitTestState",
          get_downState: "get_downState",
        }),
      });
      var xi = function (a, b) {
        D.call(this);
        this.__drawableType = 5;
        this.set_name(null);
        this.__color = -1;
        this.__colorSplit = [255, 255, 255];
        this.__colorString = "#FFFFFF";
        this.__contentsScaleFactor = 1;
        this.__deltaTime = this.__currentTabOrderIndex = 0;
        this.__displayState = 2;
        this.__logicalHeight =
          this.__logicalWidth =
          this.__lastClickTime =
          this.__mouseY =
          this.__mouseX =
            0;
        this.__displayMatrix = new xa();
        this.__displayRect = new ha();
        this.__renderDirty = !0;
        this.stage3Ds = ja.toObjectVector(null);
        this.stage3Ds.push(new Eh(this));
        this.stage3Ds.push(new Eh(this));
        this.stage3Ds.push(new Eh(this));
        this.stage3Ds.push(new Eh(this));
        this.stage = this;
        this.align = 6;
        this.allowsFullScreenInteractive = this.allowsFullScreen = !0;
        this.__quality = 1;
        this.__scaleMode = 2;
        this.showDefaultContextMenu = !0;
        this.softKeyboardRect = new ha();
        this.stageFocusRect = !0;
        this.__macKeyboard =
          (/AppleWebKit/.test(navigator.userAgent) &&
            /Mobile\/\w+/.test(navigator.userAgent)) ||
          /Mac/.test(navigator.platform);
        this.__clearBeforeRender = !0;
        this.__forceRender = !1;
        this.__stack = [];
        this.__rollOutStack = [];
        this.__mouseOutStack = [];
        this.__touchData = new kc();
        null == sa.get_current().__loaderInfo &&
          ((sa.get_current().__loaderInfo = Tf.create(null)),
          (sa.get_current().__loaderInfo.content = sa.get_current()));
        this.__uncaughtErrorEvents =
          sa.get_current().__loaderInfo.uncaughtErrorEvents;
        this.application = a.application;
        this.window = a;
        this.set_color(b);
        this.__contentsScaleFactor = a.__scale;
        this.__wasFullscreen = a.__fullscreen;
        this.__resize();
        null == sa.get_current().stage && this.stage.addChild(sa.get_current());
      };
      h["openfl.display.Stage"] = xi;
      xi.__name__ = "openfl.display.Stage";
      xi.__interfaces__ = [bd];
      xi.__super__ = D;
      xi.prototype = q(D.prototype, {
        __broadcastEvent: function (a) {
          if (
            Object.prototype.hasOwnProperty.call(z.__broadcastEvents.h, a.type)
          )
            for (var b = z.__broadcastEvents.h[a.type], c = 0; c < b.length; ) {
              var d = b[c];
              ++c;
              if (d.stage == this || null == d.stage)
                if (this.__uncaughtErrorEvents.__enabled)
                  try {
                    d.__dispatch(a);
                  } catch (e) {
                    (d = N.caught(e).unwrap()), this.__handleError(d);
                  }
                else d.__dispatch(a);
            }
        },
        __createRenderer: function () {
          var a = (this.window.__width * this.window.__scale) | 0,
            b = (this.window.__height * this.window.__scale) | 0;
          switch (this.window.context.type) {
            case "canvas":
              this.__renderer = new ug(this.window.context.canvas2D);
              break;
            case "dom":
              this.__renderer = new Fj(this.window.context.dom);
              break;
            case "opengl":
            case "opengles":
            case "webgl":
              (this.context3D = new xb(this)),
                this.context3D.configureBackBuffer(
                  this.stageWidth,
                  this.stageHeight,
                  0,
                  !0,
                  !0,
                  !0
                ),
                this.context3D.present(),
                (this.__renderer = new mb(this.context3D));
          }
          if (null != this.__renderer) {
            var c = this.get_quality();
            this.__renderer.__allowSmoothing = 2 != c;
            this.__renderer.__pixelRatio = this.window.__scale;
            this.__renderer.__worldTransform = this.__displayMatrix;
            this.__renderer.__stage = this;
            this.__renderer.__resize(a, b);
          }
        },
        __dispatchEvent: function (a) {
          if (this.__uncaughtErrorEvents.__enabled)
            try {
              var b = D.prototype.__dispatchEvent.call(this, a);
            } catch (c) {
              (a = N.caught(c).unwrap()), this.__handleError(a), (b = !1);
            }
          else b = D.prototype.__dispatchEvent.call(this, a);
          return b;
        },
        __dispatchPendingMouseEvent: function () {
          this.__pendingMouseEvent &&
            (this.__onMouse(
              "mouseMove",
              this.__pendingMouseX,
              this.__pendingMouseY,
              0
            ),
            (this.__pendingMouseEvent = !1));
        },
        __dispatchStack: function (a, b) {
          if (this.__uncaughtErrorEvents.__enabled)
            try {
              var c = b.length;
              if (0 == c) {
                a.eventPhase = 2;
                var d = a.target;
                d.__dispatch(a);
              } else {
                a.eventPhase = 1;
                a.target = b[b.length - 1];
                for (var e = 0, f = c - 1; e < f; ) {
                  var k = e++;
                  b[k].__dispatch(a);
                  if (a.__isCanceled) return;
                }
                a.eventPhase = 2;
                d = a.target;
                d.__dispatch(a);
                if (!a.__isCanceled && a.bubbles)
                  for (a.eventPhase = 3, k = c - 2; 0 <= k; ) {
                    b[k].__dispatch(a);
                    if (a.__isCanceled) break;
                    --k;
                  }
              }
            } catch (r) {
              (a = N.caught(r).unwrap()), this.__handleError(a);
            }
          else if (((c = b.length), 0 == c))
            (a.eventPhase = 2), (d = a.target), d.__dispatch(a);
          else {
            a.eventPhase = 1;
            a.target = b[b.length - 1];
            e = 0;
            for (f = c - 1; e < f; )
              if (((k = e++), b[k].__dispatch(a), a.__isCanceled)) return;
            a.eventPhase = 2;
            d = a.target;
            d.__dispatch(a);
            if (!a.__isCanceled && a.bubbles)
              for (a.eventPhase = 3, k = c - 2; 0 <= k; ) {
                b[k].__dispatch(a);
                if (a.__isCanceled) break;
                --k;
              }
          }
        },
        __dispatchTarget: function (a, b) {
          if (this.__uncaughtErrorEvents.__enabled)
            try {
              return a.__dispatchEvent(b);
            } catch (c) {
              return (a = N.caught(c).unwrap()), this.__handleError(a), !1;
            }
          else return a.__dispatchEvent(b);
        },
        __drag: function (a) {
          var b = this.__dragObject.parent;
          if (null != b) {
            b = b.__getWorldTransform();
            var c = b.a * b.d - b.b * b.c;
            if (0 == c) (a.x = -b.tx), (a.y = -b.ty);
            else {
              var d = (1 / c) * (b.c * (b.ty - a.y) + b.d * (a.x - b.tx));
              a.y = (1 / c) * (b.a * (a.y - b.ty) + b.b * (b.tx - a.x));
              a.x = d;
            }
          }
          b = a.x + this.__dragOffsetX;
          a = a.y + this.__dragOffsetY;
          null != this.__dragBounds &&
            (b < this.__dragBounds.x
              ? (b = this.__dragBounds.x)
              : b > this.__dragBounds.get_right() &&
                (b = this.__dragBounds.get_right()),
            a < this.__dragBounds.y
              ? (a = this.__dragBounds.y)
              : a > this.__dragBounds.get_bottom() &&
                (a = this.__dragBounds.get_bottom()));
          this.__dragObject.set_x(b);
          this.__dragObject.set_y(a);
        },
        __getInteractive: function (a) {
          null != a && a.push(this);
          return !0;
        },
        __globalToLocal: function (a, b) {
          a != b && b.copyFrom(a);
          return b;
        },
        __handleError: function (a) {
          var b = new em("uncaughtError", !0, !0, a);
          try {
            sa.get_current().__loaderInfo.uncaughtErrorEvents.dispatchEvent(b);
          } catch (d) {}
          if (!b.__preventDefault) {
            b = ch.toString(ch.exceptionStack());
            console.log(b);
            b = M.string(a);
            console.log(b);
            try {
              if (
                null != a &&
                Object.prototype.hasOwnProperty.call(a, "stack") &&
                null != a.stack &&
                "" != a.stack
              )
                console.log(a.stack), (a.stack = a.stack);
              else {
                var c = ch.toString(ch.callStack());
                console.log(c);
              }
            } catch (d) {}
            throw a;
          }
        },
        __onKey: function (a, b, c) {
          this.__dispatchPendingMouseEvent();
          Gb.__altKey = Eb.get_altKey(c);
          Gb.__commandKey = Eb.get_metaKey(c);
          Gb.__controlKey = Eb.get_ctrlKey(c) && !Eb.get_metaKey(c);
          Gb.__ctrlKey = Eb.get_ctrlKey(c);
          Gb.__shiftKey = Eb.get_shiftKey(c);
          var d = [];
          null == this.__focus
            ? this.__getInteractive(d)
            : this.__focus.__getInteractive(d);
          if (0 < d.length) {
            switch (b) {
              case 1073741908:
              case 1073741909:
              case 1073741910:
              case 1073741911:
              case 1073741912:
              case 1073741913:
              case 1073741914:
              case 1073741915:
              case 1073741916:
              case 1073741917:
              case 1073741918:
              case 1073741919:
              case 1073741920:
              case 1073741921:
              case 1073741922:
              case 1073741923:
              case 1073742044:
                var e = 3;
                break;
              case 1073742048:
              case 1073742049:
              case 1073742050:
              case 1073742051:
                e = 1;
                break;
              case 1073742052:
              case 1073742053:
              case 1073742054:
              case 1073742055:
                e = 2;
                break;
              default:
                e = 0;
            }
            switch (b) {
              case 8:
                b = 8;
                break;
              case 9:
                b = 9;
                break;
              case 13:
                b = 13;
                break;
              case 27:
                b = 27;
                break;
              case 32:
                b = 32;
                break;
              case 33:
                b = 49;
                break;
              case 34:
                b = 222;
                break;
              case 35:
                b = 51;
                break;
              case 36:
                b = 52;
                break;
              case 37:
                b = 53;
                break;
              case 38:
                b = 55;
                break;
              case 39:
                b = 222;
                break;
              case 40:
                b = 57;
                break;
              case 41:
                b = 48;
                break;
              case 42:
                b = 56;
                break;
              case 44:
                b = 188;
                break;
              case 45:
                b = 189;
                break;
              case 46:
                b = 190;
                break;
              case 47:
                b = 191;
                break;
              case 48:
                b = 48;
                break;
              case 49:
                b = 49;
                break;
              case 50:
                b = 50;
                break;
              case 51:
                b = 51;
                break;
              case 52:
                b = 52;
                break;
              case 53:
                b = 53;
                break;
              case 54:
                b = 54;
                break;
              case 55:
                b = 55;
                break;
              case 56:
                b = 56;
                break;
              case 57:
                b = 57;
                break;
              case 58:
                b = 186;
                break;
              case 59:
                b = 186;
                break;
              case 60:
                b = 60;
                break;
              case 61:
                b = 187;
                break;
              case 62:
                b = 190;
                break;
              case 63:
                b = 191;
                break;
              case 64:
                b = 50;
                break;
              case 91:
                b = 219;
                break;
              case 92:
                b = 220;
                break;
              case 93:
                b = 221;
                break;
              case 94:
                b = 54;
                break;
              case 95:
                b = 189;
                break;
              case 96:
                b = 192;
                break;
              case 97:
                b = 65;
                break;
              case 98:
                b = 66;
                break;
              case 99:
                b = 67;
                break;
              case 100:
                b = 68;
                break;
              case 101:
                b = 69;
                break;
              case 102:
                b = 70;
                break;
              case 103:
                b = 71;
                break;
              case 104:
                b = 72;
                break;
              case 105:
                b = 73;
                break;
              case 106:
                b = 74;
                break;
              case 107:
                b = 75;
                break;
              case 108:
                b = 76;
                break;
              case 109:
                b = 77;
                break;
              case 110:
                b = 78;
                break;
              case 111:
                b = 79;
                break;
              case 112:
                b = 80;
                break;
              case 113:
                b = 81;
                break;
              case 114:
                b = 82;
                break;
              case 115:
                b = 83;
                break;
              case 116:
                b = 84;
                break;
              case 117:
                b = 85;
                break;
              case 118:
                b = 86;
                break;
              case 119:
                b = 87;
                break;
              case 120:
                b = 88;
                break;
              case 121:
                b = 89;
                break;
              case 122:
                b = 90;
                break;
              case 127:
                b = 46;
                break;
              case 1073741881:
                b = 20;
                break;
              case 1073741882:
                b = 112;
                break;
              case 1073741883:
                b = 113;
                break;
              case 1073741884:
                b = 114;
                break;
              case 1073741885:
                b = 115;
                break;
              case 1073741886:
                b = 116;
                break;
              case 1073741887:
                b = 117;
                break;
              case 1073741888:
                b = 118;
                break;
              case 1073741889:
                b = 119;
                break;
              case 1073741890:
                b = 120;
                break;
              case 1073741891:
                b = 121;
                break;
              case 1073741892:
                b = 122;
                break;
              case 1073741893:
                b = 123;
                break;
              case 1073741894:
                b = 301;
                break;
              case 1073741895:
                b = 145;
                break;
              case 1073741896:
                b = 19;
                break;
              case 1073741897:
                b = 45;
                break;
              case 1073741898:
                b = 36;
                break;
              case 1073741899:
                b = 33;
                break;
              case 1073741901:
                b = 35;
                break;
              case 1073741902:
                b = 34;
                break;
              case 1073741903:
                b = 39;
                break;
              case 1073741904:
                b = 37;
                break;
              case 1073741905:
                b = 40;
                break;
              case 1073741906:
                b = 38;
                break;
              case 1073741907:
                b = 144;
                break;
              case 1073741908:
                b = 111;
                break;
              case 1073741909:
                b = 106;
                break;
              case 1073741910:
                b = 109;
                break;
              case 1073741911:
                b = 107;
                break;
              case 1073741912:
                b = 13;
                break;
              case 1073741913:
                b = 97;
                break;
              case 1073741914:
                b = 98;
                break;
              case 1073741915:
                b = 99;
                break;
              case 1073741916:
                b = 100;
                break;
              case 1073741917:
                b = 101;
                break;
              case 1073741918:
                b = 102;
                break;
              case 1073741919:
                b = 103;
                break;
              case 1073741920:
                b = 104;
                break;
              case 1073741921:
                b = 105;
                break;
              case 1073741922:
                b = 96;
                break;
              case 1073741923:
                b = 110;
                break;
              case 1073741925:
                b = 302;
                break;
              case 1073741928:
                b = 124;
                break;
              case 1073741929:
                b = 125;
                break;
              case 1073741930:
                b = 126;
                break;
              case 1073741982:
                b = 13;
                break;
              case 1073742044:
                b = 110;
                break;
              case 1073742048:
                b = 17;
                break;
              case 1073742049:
                b = 16;
                break;
              case 1073742050:
                b = 18;
                break;
              case 1073742051:
                b = 15;
                break;
              case 1073742052:
                b = 17;
                break;
              case 1073742053:
                b = 16;
                break;
              case 1073742054:
                b = 18;
                break;
              case 1073742055:
                b = 15;
            }
            var f = Ho.__getCharCode(b, Eb.get_shiftKey(c));
            if (
              "keyUp" == a &&
              (32 == b || 13 == b) &&
              this.__focus instanceof t
            ) {
              var k = za.__cast(this.__focus, t);
              if (k.get_buttonMode() && 1 == k.focusRect) {
                var g = gb.__pool.get(),
                  l = gb.__pool.get();
                l.x = this.__mouseX;
                l.y = this.__mouseY;
                k = Gb.__create(
                  "click",
                  0,
                  this.__mouseX,
                  this.__mouseY,
                  k.__globalToLocal(l, g),
                  k
                );
                this.__dispatchStack(k, d);
                k.__updateAfterEventFlag && this.__renderAfterEvent();
                gb.__pool.release(l);
                gb.__pool.release(g);
              }
            }
            e = new Ng(
              a,
              !0,
              !0,
              f,
              b,
              e,
              this.__macKeyboard
                ? Eb.get_ctrlKey(c) || Eb.get_metaKey(c)
                : Eb.get_ctrlKey(c),
              Eb.get_altKey(c),
              Eb.get_shiftKey(c),
              Eb.get_ctrlKey(c),
              Eb.get_metaKey(c)
            );
            d.reverse();
            this.__dispatchStack(e, d);
            if (e.__preventDefault)
              "keyDown" == a
                ? this.window.onKeyDown.cancel()
                : this.window.onKeyUp.cancel();
            else if ("keyDown" == a && 9 == b) {
              d = [];
              this.__tabTest(d);
              f = -1;
              a = null;
              b = Eb.get_shiftKey(c) ? -1 : 1;
              if (1 < d.length) {
                Nc.sort(d, function (a, b) {
                  return a.get_tabIndex() - b.get_tabIndex();
                });
                if (-1 != d[d.length - 1].get_tabIndex())
                  for (l = 0; l < d.length; ) {
                    if (-1 < d[l].get_tabIndex()) {
                      0 < l && d.splice(0, l);
                      break;
                    }
                    ++l;
                  }
                if (null != this.get_focus()) {
                  l = this.get_focus();
                  for (g = d.indexOf(l); -1 == g && null != l; ) {
                    f = l.parent;
                    if (null != f && f.get_tabChildren()) {
                      l = f.getChildIndex(l);
                      if (-1 == l) {
                        l = f;
                        continue;
                      }
                      for (
                        l += b;
                        Eb.get_shiftKey(c) ? 0 <= l : l < f.get_numChildren();

                      ) {
                        k = f.getChildAt(l);
                        if (
                          k instanceof hb &&
                          ((g = za.__cast(k, hb)), (g = d.indexOf(g)), -1 != g)
                        ) {
                          b = 0;
                          break;
                        }
                        l += b;
                      }
                    } else
                      Eb.get_shiftKey(c) &&
                        ((g = d.indexOf(f)), -1 != g && (b = 0));
                    l = f;
                  }
                  f = 0 > g ? 0 : g + b;
                } else f = this.__currentTabOrderIndex;
              } else
                1 == d.length &&
                  ((a = d[0]), this.get_focus() == a && (a = null));
              g = 0 <= f && f < d.length;
              1 == d.length || (0 == d.length && null != this.get_focus())
                ? (f = 0)
                : 1 < d.length &&
                  (0 > f && (f += d.length),
                  (f %= d.length),
                  (a = d[f]),
                  a == this.get_focus() &&
                    ((f += b),
                    0 > f && (f += d.length),
                    (f %= d.length),
                    (a = d[f])));
              b = null;
              null != this.get_focus() &&
                ((b = new Fh(
                  "keyFocusChange",
                  !0,
                  !0,
                  a,
                  Eb.get_shiftKey(c),
                  0
                )),
                (d = []),
                this.get_focus().__getInteractive(d),
                d.reverse(),
                this.__dispatchStack(b, d),
                b.isDefaultPrevented() && this.window.onKeyDown.cancel());
              (null != b && b.isDefaultPrevented()) ||
                ((this.__currentTabOrderIndex = f),
                null != a && this.set_focus(a),
                g && this.window.onKeyDown.cancel());
            }
            e.__updateAfterEventFlag && this.__renderAfterEvent();
          }
        },
        __onLimeCreateWindow: function (a) {
          if (this.window == a) {
            var b = n(this, this.__onLimeWindowActivate);
            a.onActivate.add(function () {
              b(a);
            });
            var c = n(this, this.__onLimeWindowClose);
            a.onClose.add(
              function () {
                c(a);
              },
              !1,
              -9e3
            );
            var d = n(this, this.__onLimeWindowDeactivate);
            a.onDeactivate.add(function () {
              d(a);
            });
            var e = n(this, this.__onLimeWindowDropFile);
            var f = function (b) {
              e(a, b);
            };
            a.onDropFile.add(f);
            var k = n(this, this.__onLimeWindowEnter);
            a.onEnter.add(function () {
              k(a);
            });
            var g = n(this, this.__onLimeWindowExpose);
            a.onExpose.add(function () {
              g(a);
            });
            var l = n(this, this.__onLimeWindowFocusIn);
            a.onFocusIn.add(function () {
              l(a);
            });
            var h = n(this, this.__onLimeWindowFocusOut);
            a.onFocusOut.add(function () {
              h(a);
            });
            var p = n(this, this.__onLimeWindowFullscreen);
            a.onFullscreen.add(function () {
              p(a);
            });
            var m = n(this, this.__onLimeKeyDown);
            f = function (b, c) {
              m(a, b, c);
            };
            a.onKeyDown.add(f);
            var q = n(this, this.__onLimeKeyUp);
            f = function (b, c) {
              q(a, b, c);
            };
            a.onKeyUp.add(f);
            var z = n(this, this.__onLimeWindowLeave);
            a.onLeave.add(function () {
              z(a);
            });
            var t = n(this, this.__onLimeWindowMinimize);
            a.onMinimize.add(function () {
              t(a);
            });
            var w = n(this, this.__onLimeMouseDown);
            f = function (b, c, d) {
              w(a, b, c, d);
            };
            a.onMouseDown.add(f);
            var x = n(this, this.__onLimeMouseMove);
            f = function (b, c) {
              x(a, b, c);
            };
            a.onMouseMove.add(f);
            var D = n(this, this.__onLimeMouseMoveRelative);
            f = function (b, c) {
              D(a, b, c);
            };
            a.onMouseMoveRelative.add(f);
            var y = n(this, this.__onLimeMouseUp);
            f = function (b, c, d) {
              y(a, b, c, d);
            };
            a.onMouseUp.add(f);
            var A = n(this, this.__onLimeMouseWheel);
            f = function (b, c, d) {
              A(a, b, c, d);
            };
            a.onMouseWheel.add(f);
            var C = n(this, this.__onLimeWindowMove);
            f = function (b, c) {
              C(a, b, c);
            };
            a.onMove.add(f);
            a.onRender.add(n(this, this.__onLimeRender));
            a.onRenderContextLost.add(n(this, this.__onLimeRenderContextLost));
            a.onRenderContextRestored.add(
              n(this, this.__onLimeRenderContextRestored)
            );
            var E = n(this, this.__onLimeWindowResize);
            f = function (b, c) {
              E(a, b, c);
            };
            a.onResize.add(f);
            var F = n(this, this.__onLimeWindowRestore);
            a.onRestore.add(function () {
              F(a);
            });
            var B = n(this, this.__onLimeTextEdit);
            f = function (b, c, d) {
              B(a, b, c, d);
            };
            a.onTextEdit.add(f);
            var G = n(this, this.__onLimeTextInput);
            f = function (b) {
              G(a, b);
            };
            a.onTextInput.add(f);
            this.__onLimeWindowCreate(a);
          }
        },
        __onLimeGamepadAxisMove: function (a, b, c) {
          if (this.__uncaughtErrorEvents.__enabled)
            try {
              eb.__onGamepadAxisMove(a, b, c);
            } catch (d) {
              (a = N.caught(d).unwrap()), this.__handleError(a);
            }
          else eb.__onGamepadAxisMove(a, b, c);
        },
        __onLimeGamepadButtonDown: function (a, b) {
          if (this.__uncaughtErrorEvents.__enabled)
            try {
              eb.__onGamepadButtonDown(a, b);
            } catch (c) {
              (a = N.caught(c).unwrap()), this.__handleError(a);
            }
          else eb.__onGamepadButtonDown(a, b);
        },
        __onLimeGamepadButtonUp: function (a, b) {
          if (this.__uncaughtErrorEvents.__enabled)
            try {
              eb.__onGamepadButtonUp(a, b);
            } catch (c) {
              (a = N.caught(c).unwrap()), this.__handleError(a);
            }
          else eb.__onGamepadButtonUp(a, b);
        },
        __onLimeGamepadConnect: function (a) {
          if (this.__uncaughtErrorEvents.__enabled)
            try {
              eb.__onGamepadConnect(a);
            } catch (k) {
              var b = N.caught(k).unwrap();
              this.__handleError(b);
            }
          else eb.__onGamepadConnect(a);
          var c = n(this, this.__onLimeGamepadAxisMove);
          b = function (b, d) {
            c(a, b, d);
          };
          a.onAxisMove.add(b);
          var d = n(this, this.__onLimeGamepadButtonDown);
          b = function (b) {
            d(a, b);
          };
          a.onButtonDown.add(b);
          var e = n(this, this.__onLimeGamepadButtonUp);
          b = function (b) {
            e(a, b);
          };
          a.onButtonUp.add(b);
          var f = n(this, this.__onLimeGamepadDisconnect);
          a.onDisconnect.add(function () {
            f(a);
          });
        },
        __onLimeGamepadDisconnect: function (a) {
          if (this.__uncaughtErrorEvents.__enabled)
            try {
              eb.__onGamepadDisconnect(a);
            } catch (b) {
              (a = N.caught(b).unwrap()), this.__handleError(a);
            }
          else eb.__onGamepadDisconnect(a);
        },
        __onLimeKeyDown: function (a, b, c) {
          null != this.window &&
            this.window == a &&
            this.__onKey("keyDown", b, c);
        },
        __onLimeKeyUp: function (a, b, c) {
          null != this.window &&
            this.window == a &&
            this.__onKey("keyUp", b, c);
        },
        __onLimeModuleExit: function (a) {
          null != this.window &&
            ((a = new Ba("deactivate")), this.__broadcastEvent(a));
        },
        __onLimeMouseDown: function (a, b, c, d) {
          if (null != this.window && this.window == a) {
            this.__dispatchPendingMouseEvent();
            switch (d) {
              case 1:
                var e = "middleMouseDown";
                break;
              case 2:
                e = "rightMouseDown";
                break;
              default:
                e = "mouseDown";
            }
            this.__onMouse(e, (b * a.__scale) | 0, (c * a.__scale) | 0, d);
            this.showDefaultContextMenu || 2 != d || a.onMouseDown.cancel();
          }
        },
        __onLimeMouseMove: function (a, b, c) {
          null != this.window &&
            this.window == a &&
            ((this.__pendingMouseEvent = !0),
            (this.__pendingMouseX = (b * a.__scale) | 0),
            (this.__pendingMouseY = (c * a.__scale) | 0));
        },
        __onLimeMouseMoveRelative: function (a, b, c) {},
        __onLimeMouseUp: function (a, b, c, d) {
          if (null != this.window && this.window == a) {
            this.__dispatchPendingMouseEvent();
            switch (d) {
              case 1:
                var e = "middleMouseUp";
                break;
              case 2:
                e = "rightMouseUp";
                break;
              default:
                e = "mouseUp";
            }
            this.__onMouse(e, (b * a.__scale) | 0, (c * a.__scale) | 0, d);
            this.showDefaultContextMenu || 2 != d || a.onMouseUp.cancel();
          }
        },
        __onLimeMouseWheel: function (a, b, c, d) {
          null != this.window &&
            this.window == a &&
            (this.__dispatchPendingMouseEvent(),
            d == dh.PIXELS
              ? this.__onMouseWheel((b * a.__scale) | 0, (c * a.__scale) | 0, d)
              : this.__onMouseWheel(b | 0, c | 0, d));
        },
        __renderAfterEvent: function () {
          this.__render(this.window.context);
        },
        __render: function (a) {
          a = !1;
          var b =
            null != this.__renderer &&
            (this.__renderDirty || this.__forceRender);
          if (this.__invalidated && b) {
            this.__invalidated = !1;
            var c = new Ba("render");
            this.__broadcastEvent(c);
          }
          this.__update(!1, !0);
          if (null != this.__renderer) {
            if (null != this.context3D) {
              for (c = this.stage3Ds.iterator(); c.hasNext(); ) {
                var d = c.next();
                this.context3D.__renderStage3D(d);
              }
              this.context3D.__present && (b = !0);
            }
            b
              ? (null == this.context3D && this.__renderer.__clear(),
                this.__renderer.__render(this))
              : null == this.context3D && (a = !0);
            null != this.context3D &&
              (this.context3D.__present
                ? (this.__renderer.__cleared || this.__renderer.__clear(),
                  (this.context3D.__present = !1),
                  (this.context3D.__cleared = !1))
                : (a = !0));
            this.__renderer.__cleared = !1;
          }
          return a;
        },
        __onLimeRender: function (a) {
          this.__rendering ||
            ((this.__rendering = !0),
            this.__broadcastEvent(new Ba("enterFrame")),
            this.__broadcastEvent(new Ba("frameConstructed")),
            this.__broadcastEvent(new Ba("exitFrame")),
            (this.__renderable = !0),
            this.__enterFrame(this.__deltaTime),
            (this.__deltaTime = 0),
            this.__render(a) && this.window.onRender.cancel(),
            (this.__rendering = !1));
        },
        __onLimeRenderContextLost: function () {
          this.context3D = this.__renderer = null;
          for (var a = this.stage3Ds.iterator(); a.hasNext(); )
            a.next().__lostContext();
        },
        __onLimeRenderContextRestored: function (a) {
          this.__createRenderer();
          for (a = this.stage3Ds.iterator(); a.hasNext(); )
            a.next().__restoreContext();
        },
        __onLimeTextEdit: function (a, b, c, d) {},
        __onLimeTextInput: function (a, b) {
          if (null != this.window && this.window == a) {
            var c = [];
            null == this.__focus
              ? this.__getInteractive(c)
              : this.__focus.__getInteractive(c);
            b = new hg("textInput", !0, !0, b);
            0 < c.length
              ? (c.reverse(), this.__dispatchStack(b, c))
              : this.__dispatchEvent(b);
            b.isDefaultPrevented() && a.onTextInput.cancel();
          }
        },
        __onLimeTouchCancel: function (a) {
          var b = this.__primaryTouch == a;
          b && (this.__primaryTouch = null);
          this.__onTouch("touchEnd", a, b);
        },
        __onLimeTouchMove: function (a) {
          this.__onTouch("touchMove", a, this.__primaryTouch == a);
        },
        __onLimeTouchEnd: function (a) {
          var b = this.__primaryTouch == a;
          b && (this.__primaryTouch = null);
          this.__onTouch("touchEnd", a, b);
        },
        __onLimeTouchStart: function (a) {
          null == this.__primaryTouch && (this.__primaryTouch = a);
          this.__onTouch("touchBegin", a, this.__primaryTouch == a);
        },
        __onLimeUpdate: function (a) {
          this.__deltaTime = a;
          this.__dispatchPendingMouseEvent();
        },
        __onLimeWindowActivate: function (a) {},
        __onLimeWindowClose: function (a) {
          this.window == a && (this.window = null);
          this.__primaryTouch = null;
          a = new Ba("deactivate");
          this.__broadcastEvent(a);
        },
        __onLimeWindowCreate: function (a) {
          null != this.window &&
            this.window == a &&
            null != a.context &&
            this.__createRenderer();
        },
        __onLimeWindowDeactivate: function (a) {},
        __onLimeWindowDropFile: function (a, b) {},
        __onLimeWindowEnter: function (a) {},
        __onLimeWindowExpose: function (a) {
          null != this.window && this.window == a && (this.__renderDirty = !0);
        },
        __onLimeWindowFocusIn: function (a) {
          null != this.window &&
            this.window == a &&
            ((this.__renderDirty = !0),
            (a = new Ba("activate")),
            this.__broadcastEvent(a),
            this.set_focus(this.__cacheFocus));
        },
        __onLimeWindowFocusOut: function (a) {
          null != this.window &&
            this.window == a &&
            ((this.__primaryTouch = null),
            (a = new Ba("deactivate")),
            this.__broadcastEvent(a),
            (a = this.get_focus()),
            this.set_focus(null),
            (this.__cacheFocus = a),
            (Gb.__altKey = !1),
            (Gb.__commandKey = !1),
            (Gb.__ctrlKey = !1),
            (Gb.__shiftKey = !1));
        },
        __onLimeWindowFullscreen: function (a) {
          null != this.window &&
            this.window == a &&
            (this.__resize(),
            this.__wasFullscreen ||
              ((this.__wasFullscreen = !0),
              2 == this.__displayState && (this.__displayState = 1),
              this.__dispatchEvent(new Hg("fullScreen", !1, !1, !0, !0))));
        },
        __onLimeWindowLeave: function (a) {
          null == this.window ||
            this.window != a ||
            Gb.__buttonDown ||
            (this.__dispatchPendingMouseEvent(),
            (a = new Ba("mouseLeave")),
            this.__dispatchEvent(a));
        },
        __onLimeWindowMinimize: function (a) {},
        __onLimeWindowMove: function (a, b, c) {},
        __onLimeWindowResize: function (a, b, c) {
          null != this.window &&
            this.window == a &&
            (this.__resize(),
            this.__wasFullscreen &&
              !a.__fullscreen &&
              ((this.__wasFullscreen = !1),
              (this.__displayState = 2),
              this.__dispatchEvent(new Hg("fullScreen", !1, !1, !1, !0))));
        },
        __onLimeWindowRestore: function (a) {
          null != this.window &&
            this.window == a &&
            this.__wasFullscreen &&
            !a.__fullscreen &&
            ((this.__wasFullscreen = !1),
            (this.__displayState = 2),
            this.__dispatchEvent(new Hg("fullScreen", !1, !1, !1, !0)));
        },
        __onMouse: function (a, b, c, d) {
          if (!(2 < d)) {
            var e = gb.__pool.get();
            e.setTo(b, c);
            b = this.__displayMatrix;
            c = b.a * b.d - b.b * b.c;
            if (0 == c) (e.x = -b.tx), (e.y = -b.ty);
            else {
              var f = (1 / c) * (b.c * (b.ty - e.y) + b.d * (e.x - b.tx));
              e.y = (1 / c) * (b.a * (e.y - b.ty) + b.b * (b.tx - e.x));
              e.x = f;
            }
            this.__mouseX = e.x;
            this.__mouseY = e.y;
            b = [];
            this.__hitTest(this.__mouseX, this.__mouseY, !0, b, !0, this)
              ? (f = b[b.length - 1])
              : ((f = this), (b = [this]));
            null == f && (f = this);
            var k = null;
            switch (a) {
              case "middleMouseDown":
                this.__mouseDownMiddle = f;
                break;
              case "middleMouseUp":
                this.__mouseDownMiddle == f && (k = "middleClick");
                this.__mouseDownMiddle = null;
                break;
              case "mouseDown":
                null != this.get_focus()
                  ? this.get_focus() != f &&
                    ((c = new Fh("mouseFocusChange", !0, !0, f, !1, 0)),
                    this.get_focus().dispatchEvent(c),
                    c.isDefaultPrevented() ||
                      (f.__allowMouseFocus()
                        ? this.set_focus(f)
                        : this.set_focus(null)))
                  : f.__allowMouseFocus()
                  ? this.set_focus(f)
                  : this.set_focus(null);
                this.__mouseDownLeft = f;
                Gb.__buttonDown = !0;
                break;
              case "mouseUp":
                if (null != this.__mouseDownLeft) {
                  Gb.__buttonDown = !1;
                  if (this.__mouseDownLeft == f) k = "click";
                  else {
                    var g = Gb.__create(
                      "releaseOutside",
                      1,
                      this.__mouseX,
                      this.__mouseY,
                      new gb(this.__mouseX, this.__mouseY),
                      this
                    );
                    this.__mouseDownLeft.dispatchEvent(g);
                  }
                  this.__mouseDownLeft = null;
                }
                break;
              case "rightMouseDown":
                this.__mouseDownRight = f;
                break;
              case "rightMouseUp":
                this.__mouseDownRight == f && (k = "rightClick"),
                  (this.__mouseDownRight = null);
            }
            c = gb.__pool.get();
            g = Gb.__create(
              a,
              d,
              this.__mouseX,
              this.__mouseY,
              f.__globalToLocal(e, c),
              f
            );
            this.__dispatchStack(g, b);
            g.__updateAfterEventFlag && this.__renderAfterEvent();
            null != k &&
              ((g = Gb.__create(
                k,
                d,
                this.__mouseX,
                this.__mouseY,
                f.__globalToLocal(e, c),
                f
              )),
              this.__dispatchStack(g, b),
              g.__updateAfterEventFlag && this.__renderAfterEvent(),
              "mouseUp" == a &&
                f.doubleClickEnabled &&
                ((a = sa.getTimer()),
                500 > a - this.__lastClickTime && f == this.__lastClickTarget
                  ? ((g = Gb.__create(
                      "doubleClick",
                      d,
                      this.__mouseX,
                      this.__mouseY,
                      f.__globalToLocal(e, c),
                      f
                    )),
                    this.__dispatchStack(g, b),
                    g.__updateAfterEventFlag && this.__renderAfterEvent(),
                    (this.__lastClickTime = 0),
                    (this.__lastClickTarget = null))
                  : ((this.__lastClickTarget = f),
                    (this.__lastClickTime = a))));
            if ("auto" == Zc.__cursor && !Zc.__hidden) {
              g = null;
              if (null != this.__mouseDownLeft)
                g = this.__mouseDownLeft.__getCursor();
              else
                for (a = 0; a < b.length; )
                  if (
                    ((g = b[a]),
                    ++a,
                    (g = g.__getCursor()),
                    null != g && null != this.window)
                  ) {
                    this.window.set_cursor(dp.toLimeCursor(g));
                    break;
                  }
              null == g &&
                null != this.window &&
                this.window.set_cursor(Db.ARROW);
            }
            f != this.__mouseOverTarget &&
              null != this.__mouseOverTarget &&
              ((g = Gb.__create(
                "mouseOut",
                d,
                this.__mouseX,
                this.__mouseY,
                this.__mouseOverTarget.__globalToLocal(e, c),
                this.__mouseOverTarget
              )),
              this.__dispatchStack(g, this.__mouseOutStack),
              g.__updateAfterEventFlag && this.__renderAfterEvent());
            for (a = 0; a < this.__rollOutStack.length; )
              (k = this.__rollOutStack[a]),
                -1 == b.indexOf(k)
                  ? (X.remove(this.__rollOutStack, k),
                    (g = Gb.__create(
                      "rollOut",
                      d,
                      this.__mouseX,
                      this.__mouseY,
                      this.__mouseOverTarget.__globalToLocal(e, c),
                      k
                    )),
                    (g.bubbles = !1),
                    this.__dispatchTarget(k, g),
                    g.__updateAfterEventFlag && this.__renderAfterEvent())
                  : ++a;
            for (a = 0; a < b.length; )
              (k = b[a]),
                ++a,
                -1 == this.__rollOutStack.indexOf(k) &&
                  null != this.__mouseOverTarget &&
                  (k.hasEventListener("rollOver") &&
                    ((g = Gb.__create(
                      "rollOver",
                      d,
                      this.__mouseX,
                      this.__mouseY,
                      this.__mouseOverTarget.__globalToLocal(e, c),
                      k
                    )),
                    (g.bubbles = !1),
                    this.__dispatchTarget(k, g),
                    g.__updateAfterEventFlag && this.__renderAfterEvent()),
                  (k.hasEventListener("rollOut") ||
                    k.hasEventListener("rollOver")) &&
                    this.__rollOutStack.push(k));
            f != this.__mouseOverTarget &&
              (null != f &&
                ((g = Gb.__create(
                  "mouseOver",
                  d,
                  this.__mouseX,
                  this.__mouseY,
                  f.__globalToLocal(e, c),
                  f
                )),
                this.__dispatchStack(g, b),
                g.__updateAfterEventFlag && this.__renderAfterEvent()),
              (this.__mouseOverTarget = f),
              (this.__mouseOutStack = b));
            null != this.__dragObject &&
              (this.__drag(e),
              (d = null),
              this.__mouseOverTarget == this.__dragObject
                ? ((f = this.__dragObject.mouseEnabled),
                  (a = this.__dragObject.mouseChildren),
                  (this.__dragObject.mouseEnabled = !1),
                  (this.__dragObject.mouseChildren = !1),
                  (b = []),
                  this.__hitTest(
                    this.__mouseX,
                    this.__mouseY,
                    !0,
                    b,
                    !0,
                    this
                  ) && (d = b[b.length - 1]),
                  (this.__dragObject.mouseEnabled = f),
                  (this.__dragObject.mouseChildren = a))
                : this.__mouseOverTarget != this &&
                  (d = this.__mouseOverTarget),
              (this.__dragObject.dropTarget = d));
            gb.__pool.release(e);
            gb.__pool.release(c);
          }
        },
        __onMouseWheel: function (a, b, c) {
          var d = this.__mouseX,
            e = this.__mouseY;
          a = [];
          if (this.__hitTest(this.__mouseX, this.__mouseY, !0, a, !0, this))
            var f = a[a.length - 1];
          else (f = this), (a = [this]);
          null == f && (f = this);
          c = gb.__pool.get();
          c.setTo(d, e);
          d = this.__displayMatrix;
          e = d.a * d.d - d.b * d.c;
          if (0 == e) (c.x = -d.tx), (c.y = -d.ty);
          else {
            var k = (1 / e) * (d.c * (d.ty - c.y) + d.d * (c.x - d.tx));
            c.y = (1 / e) * (d.a * (c.y - d.ty) + d.b * (d.tx - c.x));
            c.x = k;
          }
          b |= 0;
          b = Gb.__create(
            "mouseWheel",
            0,
            this.__mouseX,
            this.__mouseY,
            f.__globalToLocal(c, c),
            f,
            b
          );
          b.cancelable = !0;
          this.__dispatchStack(b, a);
          b.isDefaultPrevented() && this.window.onMouseWheel.cancel();
          b.__updateAfterEventFlag && this.__renderAfterEvent();
          gb.__pool.release(c);
        },
        __onTouch: function (a, b, c) {
          var d = gb.__pool.get();
          d.setTo(
            Math.round(b.x * this.window.__width * this.window.__scale),
            Math.round(b.y * this.window.__height * this.window.__scale)
          );
          var e = this.__displayMatrix,
            f = e.a * e.d - e.b * e.c;
          if (0 == f) (d.x = -e.tx), (d.y = -e.ty);
          else {
            var k = (1 / f) * (e.c * (e.ty - d.y) + e.d * (d.x - e.tx));
            d.y = (1 / f) * (e.a * (d.y - e.ty) + e.b * (e.tx - d.x));
            d.x = k;
          }
          e = d.x;
          f = d.y;
          k = [];
          if (this.__hitTest(e, f, !1, k, !0, this)) var g = k[k.length - 1];
          else (g = this), (k = [this]);
          null == g && (g = this);
          var l = b.id;
          if (this.__touchData.h.hasOwnProperty(l))
            var h = this.__touchData.h[l];
          else
            (h = Gh.__pool.get()),
              h.reset(),
              (h.touch = b),
              (this.__touchData.h[l] = h);
          var p = null,
            m = !1;
          switch (a) {
            case "touchBegin":
              h.touchDownTarget = g;
              break;
            case "touchEnd":
              h.touchDownTarget == g && (p = "touchTap"),
                (h.touchDownTarget = null),
                (m = !0);
          }
          var n = gb.__pool.get();
          a = Qe.__create(a, null, e, f, g.__globalToLocal(d, n), g);
          a.touchPointID = l;
          a.isPrimaryTouchPoint = c;
          a.pressure = b.pressure;
          this.__dispatchStack(a, k);
          a.__updateAfterEventFlag && this.__renderAfterEvent();
          null != p &&
            ((a = Qe.__create(p, null, e, f, g.__globalToLocal(d, n), g)),
            (a.touchPointID = l),
            (a.isPrimaryTouchPoint = c),
            (a.pressure = b.pressure),
            this.__dispatchStack(a, k),
            a.__updateAfterEventFlag && this.__renderAfterEvent());
          p = h.touchOverTarget;
          g != p &&
            null != p &&
            ((a = Qe.__create(
              "touchOut",
              null,
              e,
              f,
              p.__globalToLocal(d, n),
              p
            )),
            (a.touchPointID = l),
            (a.isPrimaryTouchPoint = c),
            (a.pressure = b.pressure),
            this.__dispatchTarget(p, a),
            a.__updateAfterEventFlag && this.__renderAfterEvent());
          for (var q = h.rollOutStack, z, t = 0; t < q.length; )
            (z = q[t]),
              -1 == k.indexOf(z)
                ? (X.remove(q, z),
                  (a = Qe.__create(
                    "touchRollOut",
                    null,
                    e,
                    f,
                    p.__globalToLocal(d, n),
                    p
                  )),
                  (a.touchPointID = l),
                  (a.isPrimaryTouchPoint = c),
                  (a.bubbles = !1),
                  (a.pressure = b.pressure),
                  this.__dispatchTarget(z, a),
                  a.__updateAfterEventFlag && this.__renderAfterEvent())
                : ++t;
          for (t = 0; t < k.length; )
            (z = k[t]),
              ++t,
              -1 == q.indexOf(z) &&
                (z.hasEventListener("touchRollOver") &&
                  ((a = Qe.__create(
                    "touchRollOver",
                    null,
                    e,
                    f,
                    p.__globalToLocal(d, n),
                    z
                  )),
                  (a.touchPointID = l),
                  (a.isPrimaryTouchPoint = c),
                  (a.bubbles = !1),
                  (a.pressure = b.pressure),
                  this.__dispatchTarget(z, a),
                  a.__updateAfterEventFlag && this.__renderAfterEvent()),
                z.hasEventListener("touchRollOut") && q.push(z));
          g != p &&
            (null != g &&
              ((a = Qe.__create(
                "touchOver",
                null,
                e,
                f,
                g.__globalToLocal(d, n),
                g
              )),
              (a.touchPointID = l),
              (a.isPrimaryTouchPoint = c),
              (a.bubbles = !0),
              (a.pressure = b.pressure),
              this.__dispatchTarget(g, a),
              a.__updateAfterEventFlag && this.__renderAfterEvent()),
            (h.touchOverTarget = g));
          gb.__pool.release(d);
          gb.__pool.release(n);
          m && (this.__touchData.remove(l), h.reset(), Gh.__pool.release(h));
        },
        __registerLimeModule: function (a) {
          a.onCreateWindow.add(n(this, this.__onLimeCreateWindow));
          a.onUpdate.add(n(this, this.__onLimeUpdate));
          a.onExit.add(n(this, this.__onLimeModuleExit), !1, 0);
          for (a = Bc.devices.iterator(); a.hasNext(); ) {
            var b = a.next();
            this.__onLimeGamepadConnect(b);
          }
          Bc.onConnect.add(n(this, this.__onLimeGamepadConnect));
          oc.onStart.add(n(this, this.__onLimeTouchStart));
          oc.onMove.add(n(this, this.__onLimeTouchMove));
          oc.onEnd.add(n(this, this.__onLimeTouchEnd));
          oc.onCancel.add(n(this, this.__onLimeTouchCancel));
        },
        __resize: function () {
          var a = this.stageWidth,
            b = this.stageHeight,
            c = (this.window.__width * this.window.__scale) | 0,
            d = (this.window.__height * this.window.__scale) | 0;
          this.__displayMatrix.identity();
          if (
            null != this.get_fullScreenSourceRect() &&
            this.window.__fullscreen
          ) {
            this.stageWidth = this.get_fullScreenSourceRect().width | 0;
            this.stageHeight = this.get_fullScreenSourceRect().height | 0;
            var e = c / this.stageWidth,
              f = d / this.stageHeight;
            this.__displayMatrix.translate(
              -this.get_fullScreenSourceRect().x,
              -this.get_fullScreenSourceRect().y
            );
            this.__displayMatrix.scale(e, f);
            this.__displayRect.setTo(
              this.get_fullScreenSourceRect().get_left(),
              this.get_fullScreenSourceRect().get_right(),
              this.get_fullScreenSourceRect().get_top(),
              this.get_fullScreenSourceRect().get_bottom()
            );
          } else if (
            0 == this.__logicalWidth ||
            0 == this.__logicalHeight ||
            2 == this.get_scaleMode() ||
            0 == c ||
            0 == d
          )
            (this.stageWidth = Math.round(c / this.window.__scale)),
              (this.stageHeight = Math.round(d / this.window.__scale)),
              this.__displayMatrix.scale(
                this.window.__scale,
                this.window.__scale
              ),
              this.__displayRect.setTo(0, 0, this.stageWidth, this.stageHeight);
          else
            switch (
              ((this.stageWidth = this.__logicalWidth),
              (this.stageHeight = this.__logicalHeight),
              this.get_scaleMode())
            ) {
              case 0:
                e = c / this.stageWidth;
                f = d / this.stageHeight;
                this.__displayMatrix.scale(e, f);
                this.__displayRect.setTo(
                  0,
                  0,
                  this.stageWidth,
                  this.stageHeight
                );
                break;
              case 1:
                e = c / this.stageWidth;
                f = d / this.stageHeight;
                e = Math.max(e, f);
                f = this.stageWidth * e;
                var k = this.stageHeight * e;
                f = this.stageWidth - Math.round((f - c) / e);
                k = this.stageHeight - Math.round((k - d) / e);
                var g = Math.round((this.stageWidth - f) / 2),
                  l = Math.round((this.stageHeight - k) / 2);
                this.__displayMatrix.translate(-g, -l);
                this.__displayMatrix.scale(e, e);
                this.__displayRect.setTo(g, l, f, k);
                break;
              default:
                (e = c / this.stageWidth),
                  (f = d / this.stageHeight),
                  (e = Math.min(e, f)),
                  (f = this.stageWidth * e),
                  (k = this.stageHeight * e),
                  (f = this.stageWidth - Math.round((f - c) / e)),
                  (k = this.stageHeight - Math.round((k - d) / e)),
                  (g = Math.round((this.stageWidth - f) / 2)),
                  (l = Math.round((this.stageHeight - k) / 2)),
                  this.__displayMatrix.translate(-g, -l),
                  this.__displayMatrix.scale(e, e),
                  this.__displayRect.setTo(g, l, f, k);
            }
          null != this.context3D &&
            this.context3D.configureBackBuffer(
              this.stageWidth,
              this.stageHeight,
              0,
              !0,
              !0,
              !0
            );
          for (e = this.stage3Ds.iterator(); e.hasNext(); )
            e.next().__resize(c, d);
          null != this.__renderer && this.__renderer.__resize(c, d);
          this.__renderDirty = !0;
          if (this.stageWidth != a || this.stageHeight != b)
            this.__setTransformDirty(),
              (a = new Ba("resize")),
              this.__dispatchEvent(a);
        },
        __setLogicalSize: function (a, b) {
          this.__logicalWidth = a;
          this.__logicalHeight = b;
          this.__resize();
        },
        __unregisterLimeModule: function (a) {
          a.onCreateWindow.remove(n(this, this.__onLimeCreateWindow));
          a.onUpdate.remove(n(this, this.__onLimeUpdate));
          a.onExit.remove(n(this, this.__onLimeModuleExit));
          Bc.onConnect.remove(n(this, this.__onLimeGamepadConnect));
          oc.onStart.remove(n(this, this.__onLimeTouchStart));
          oc.onMove.remove(n(this, this.__onLimeTouchMove));
          oc.onEnd.remove(n(this, this.__onLimeTouchEnd));
          oc.onCancel.remove(n(this, this.__onLimeTouchCancel));
        },
        __update: function (a, b) {
          a
            ? this.__transformDirty &&
              (D.prototype.__update.call(this, !0, b),
              b && (this.__transformDirty = !1))
            : this.__transformDirty || this.__renderDirty
            ? (D.prototype.__update.call(this, !1, b),
              b && z.__supportDOM && (this.__wasDirty = !0))
            : !this.__renderDirty &&
              this.__wasDirty &&
              (D.prototype.__update.call(this, !1, b),
              b && (this.__wasDirty = !1));
        },
        set_color: function (a) {
          null == a
            ? ((this.__transparent = !0), (a = 0))
            : (this.__transparent = !1);
          this.__color != a &&
            ((this.__colorSplit[0] = ((a & 16711680) >>> 16) / 255),
            (this.__colorSplit[1] = ((a & 65280) >>> 8) / 255),
            (this.__colorSplit[2] = (a & 255) / 255),
            (this.__colorString = "#" + K.hex(a & 16777215, 6)),
            (this.__renderDirty = !0),
            (this.__color = -16777216 | (a & 16777215)));
          return a;
        },
        get_displayState: function () {
          return this.__displayState;
        },
        set_displayState: function (a) {
          null != this.window &&
            (2 == a
              ? this.window.__fullscreen && this.window.set_fullscreen(!1)
              : this.window.__fullscreen || this.window.set_fullscreen(!0));
          return (this.__displayState = a);
        },
        get_focus: function () {
          return this.__focus;
        },
        set_focus: function (a) {
          if (a != this.__focus) {
            var b = this.__focus;
            this.__cacheFocus = this.__focus = a;
            if (null != b) {
              var c = new Fh("focusOut", !0, !1, a, !1, 0),
                d = [];
              b.__getInteractive(d);
              d.reverse();
              this.__dispatchStack(c, d);
            }
            null != a &&
              ((c = new Fh("focusIn", !0, !1, b, !1, 0)),
              (d = []),
              a.__getInteractive(d),
              d.reverse(),
              this.__dispatchStack(c, d));
          }
          return a;
        },
        get_frameRate: function () {
          return null != this.window ? this.window.__backend.getFrameRate() : 0;
        },
        set_frameRate: function (a) {
          return null != this.window
            ? this.window.__backend.setFrameRate(a)
            : a;
        },
        get_fullScreenSourceRect: function () {
          return null == this.__fullScreenSourceRect
            ? null
            : this.__fullScreenSourceRect.clone();
        },
        set_height: function (a) {
          return this.get_height();
        },
        get_mouseX: function () {
          return this.__mouseX;
        },
        get_mouseY: function () {
          return this.__mouseY;
        },
        get_quality: function () {
          return this.__quality;
        },
        set_rotation: function (a) {
          return 0;
        },
        get_scaleMode: function () {
          return this.__scaleMode;
        },
        set_scaleMode: function (a) {
          a != this.__scaleMode && ((this.__scaleMode = a), this.__resize());
          return a;
        },
        set_scaleX: function (a) {
          return 0;
        },
        set_scaleY: function (a) {
          return 0;
        },
        get_tabEnabled: function () {
          return !1;
        },
        get_tabIndex: function () {
          return -1;
        },
        set_transform: function (a) {
          return this.get_transform();
        },
        set_width: function (a) {
          return this.get_width();
        },
        set_x: function (a) {
          return 0;
        },
        set_y: function (a) {
          return 0;
        },
        __class__: xi,
        __properties__: q(D.prototype.__properties__, {
          set_color: "set_color",
          set_scaleMode: "set_scaleMode",
          get_scaleMode: "get_scaleMode",
          get_quality: "get_quality",
          get_fullScreenSourceRect: "get_fullScreenSourceRect",
          set_frameRate: "set_frameRate",
          get_frameRate: "get_frameRate",
          set_focus: "set_focus",
          get_focus: "get_focus",
          set_displayState: "set_displayState",
          get_displayState: "get_displayState",
        }),
      });
      var Eh = function (a) {
        pa.call(this);
        this.__stage = a;
        this.__height = 0;
        this.__projectionTransform = new fm();
        this.__renderTransform = new fm();
        this.__y = this.__x = this.__width = 0;
        this.visible = !0;
        0 < a.stageWidth &&
          0 < a.stageHeight &&
          this.__resize(a.stageWidth, a.stageHeight);
      };
      h["openfl.display.Stage3D"] = Eh;
      Eh.__name__ = "openfl.display.Stage3D";
      Eh.__super__ = pa;
      Eh.prototype = q(pa.prototype, {
        __createContext: function () {
          var a = this.__stage,
            b = a.__renderer;
          if ("cairo" == b.__type || "canvas" == b.__type)
            this.__dispatchError();
          else if ("opengl" == b.__type)
            (this.context3D = new xb(a, a.context3D.__contextState, this)),
              this.__dispatchCreate();
          else if ("dom" == b.__type)
            if (null == a.context3D) {
              this.__canvas = window.document.createElement("canvas");
              this.__canvas.width = a.stageWidth;
              this.__canvas.height = a.stageHeight;
              var c = a.window.context.attributes,
                d =
                  Object.prototype.hasOwnProperty.call(c, "background") &&
                  null == c.background,
                e = Object.prototype.hasOwnProperty.call(c, "colorDepth")
                  ? c.colorDepth
                  : 32;
              c =
                Object.prototype.hasOwnProperty.call(c, "antialiasing") &&
                0 < c.antialiasing;
              this.__webgl = yo.getContextWebGL(this.__canvas, {
                alpha: d || 16 < e,
                antialias: c,
                depth: !0,
                premultipliedAlpha: !0,
                stencil: !0,
                preserveDrawingBuffer: !1,
              });
              null != this.__webgl &&
                (null == Ag.context &&
                  ((Ag.context = this.__webgl),
                  (Ag.type = "webgl"),
                  (Ag.version = 1)),
                (a.context3D = new xb(a)),
                a.context3D.configureBackBuffer(
                  a.window.__width,
                  a.window.__height,
                  0,
                  !0,
                  !0,
                  !0
                ),
                a.context3D.present(),
                b.element.appendChild(this.__canvas),
                (this.__style = this.__canvas.style),
                this.__style.setProperty("position", "absolute", null),
                this.__style.setProperty("top", "0", null),
                this.__style.setProperty("left", "0", null),
                this.__style.setProperty(
                  b.__transformOriginProperty,
                  "0 0 0",
                  null
                ),
                this.__style.setProperty("z-index", "-1", null));
              null != a.context3D &&
                (this.context3D = new xb(a, a.context3D.__contextState, this));
              this.__dispatchCreate();
            } else this.__dispatchError();
        },
        __dispatchError: function () {
          this.__contextRequested = !1;
          this.dispatchEvent(
            new Oe("error", !1, !1, "Context3D not available")
          );
        },
        __dispatchCreate: function () {
          this.__contextRequested &&
            ((this.__contextRequested = !1),
            this.dispatchEvent(new Ba("context3DCreate")));
        },
        __lostContext: function () {
          this.__contextLost = !0;
          null != this.context3D &&
            (this.context3D.__dispose(), (this.__contextRequested = !0));
        },
        __resize: function (a, b) {
          if (a != this.__width || b != this.__height)
            null != this.__canvas &&
              ((this.__canvas.width = a), (this.__canvas.height = b)),
              this.__projectionTransform.copyRawDataFrom(
                ja.toFloatVector(null, null, null, [
                  2 / (0 < a ? a : 1),
                  0,
                  0,
                  0,
                  0,
                  -2 / (0 < b ? b : 1),
                  0,
                  0,
                  0,
                  0,
                  -0.001,
                  0,
                  -1,
                  1,
                  0,
                  1,
                ])
              ),
              this.__renderTransform.identity(),
              this.__renderTransform.appendTranslation(this.__x, this.__y, 0),
              this.__renderTransform.append(this.__projectionTransform),
              (this.__width = a),
              (this.__height = b);
        },
        __restoreContext: function () {
          this.__contextLost = !1;
          this.__createContext();
        },
        get_x: function () {
          return this.__x;
        },
        get_y: function () {
          return this.__y;
        },
        __class__: Eh,
        __properties__: { get_y: "get_y", get_x: "get_x" },
      });
      var Vo = {
          fromString: function (a) {
            switch (a) {
              case "bottom":
                return 0;
              case "bottomLeft":
                return 1;
              case "bottomRight":
                return 2;
              case "left":
                return 3;
              case "right":
                return 4;
              case "top":
                return 5;
              case "topLeft":
                return 6;
              case "topRight":
                return 7;
              default:
                return null;
            }
          },
        },
        Gj = function (a, b, c, d, e, f, k, g) {
          null == g && (g = 0);
          null == k && (k = 0);
          null == f && (f = 0);
          null == e && (e = 1);
          null == d && (d = 1);
          null == c && (c = 0);
          null == b && (b = 0);
          null == a && (a = 0);
          this.__id = a;
          this.__matrix = new xa();
          0 != b && this.set_x(b);
          0 != c && this.set_y(c);
          1 != d && this.set_scaleX(d);
          1 != e && this.set_scaleY(e);
          0 != f && this.set_rotation(f);
          this.__dirty = !0;
          this.__length = 0;
          this.__originX = k;
          this.__originY = g;
          this.__alpha = 1;
          this.__blendMode = null;
          this.__visible = !0;
        };
      h["openfl.display.Tile"] = Gj;
      Gj.__name__ = "openfl.display.Tile";
      Gj.prototype = {
        getBounds: function (a) {
          var b = new ha();
          this.__findTileRect(b);
          var c = xa.__pool.get();
          if (null != a && a != this) {
            c.copyFrom(this.__getWorldTransform());
            var d = xa.__pool.get();
            d.copyFrom(a.__getWorldTransform());
            d.invert();
            c.concat(d);
            xa.__pool.release(d);
          } else c.identity();
          this.__getBounds(b, c);
          xa.__pool.release(c);
          return b;
        },
        __getBounds: function (a, b) {
          a.__transform(a, b);
        },
        __findTileRect: function (a) {
          if (null == this.get_tileset())
            if (null != this.parent) {
              var b = this.parent.__findTileset();
              null == b
                ? a.setTo(0, 0, 0, 0)
                : ((b = b.getRect(this.get_id())),
                  null == b ? a.setTo(0, 0, 0, 0) : a.copyFrom(b));
            } else a.setTo(0, 0, 0, 0);
          else a.copyFrom(this.get_tileset().getRect(this.get_id()));
          a.x = 0;
          a.y = 0;
        },
        __findTileset: function () {
          return null != this.get_tileset()
            ? this.get_tileset()
            : this.parent instanceof Hj
            ? this.parent.get_tileset()
            : null == this.parent
            ? null
            : this.parent.__findTileset();
        },
        __getWorldTransform: function () {
          var a = this.get_matrix().clone();
          null != this.parent && a.concat(this.parent.__getWorldTransform());
          return a;
        },
        __setRenderDirty: function () {
          this.__dirty ||
            ((this.__dirty = !0),
            null != this.parent && this.parent.__setRenderDirty());
        },
        get_alpha: function () {
          return this.__alpha;
        },
        set_alpha: function (a) {
          a != this.__alpha && ((this.__alpha = a), this.__setRenderDirty());
          return a;
        },
        get_colorTransform: function () {
          return this.__colorTransform;
        },
        get_height: function () {
          var a = ha.__pool.get();
          this.__findTileRect(a);
          this.__getBounds(a, this.get_matrix());
          var b = a.height;
          ha.__pool.release(a);
          return b;
        },
        set_height: function (a) {
          var b = ha.__pool.get();
          this.__findTileRect(b);
          0 != b.height && this.set_scaleY(a / b.height);
          ha.__pool.release(b);
          return a;
        },
        get_id: function () {
          return this.__id;
        },
        get_matrix: function () {
          return this.__matrix;
        },
        get_originX: function () {
          return this.__originX;
        },
        set_originX: function (a) {
          a != this.__originX &&
            ((this.__originX = a), this.__setRenderDirty());
          return a;
        },
        get_originY: function () {
          return this.__originY;
        },
        set_originY: function (a) {
          a != this.__originY &&
            ((this.__originY = a), this.__setRenderDirty());
          return a;
        },
        get_rotation: function () {
          if (null == this.__rotation)
            if (0 == this.__matrix.b && 0 == this.__matrix.c)
              (this.__rotationSine = this.__rotation = 0),
                (this.__rotationCosine = 1);
            else {
              var a =
                Math.atan2(this.__matrix.d, this.__matrix.c) - Math.PI / 2;
              this.__rotation = (180 / Math.PI) * a;
              this.__rotationSine = Math.sin(a);
              this.__rotationCosine = Math.cos(a);
            }
          return this.__rotation;
        },
        set_rotation: function (a) {
          if (a != this.__rotation) {
            this.__rotation = a;
            var b = (Math.PI / 180) * a;
            this.__rotationSine = Math.sin(b);
            this.__rotationCosine = Math.cos(b);
            b = this.get_scaleX();
            var c = this.get_scaleY();
            this.__matrix.a = this.__rotationCosine * b;
            this.__matrix.b = this.__rotationSine * b;
            this.__matrix.c = -this.__rotationSine * c;
            this.__matrix.d = this.__rotationCosine * c;
            this.__setRenderDirty();
          }
          return a;
        },
        get_scaleX: function () {
          null == this.__scaleX &&
            (0 == this.get_matrix().b
              ? (this.__scaleX = this.__matrix.a)
              : (this.__scaleX = Math.sqrt(
                  this.__matrix.a * this.__matrix.a +
                    this.__matrix.b * this.__matrix.b
                )));
          return this.__scaleX;
        },
        set_scaleX: function (a) {
          if (a != this.__scaleX) {
            this.__scaleX = a;
            if (0 == this.__matrix.b) this.__matrix.a = a;
            else {
              this.get_rotation();
              var b = this.__rotationSine * a;
              this.__matrix.a = this.__rotationCosine * a;
              this.__matrix.b = b;
            }
            this.__setRenderDirty();
          }
          return a;
        },
        get_scaleY: function () {
          null == this.__scaleY &&
            (this.__scaleY =
              0 == this.__matrix.c
                ? this.get_matrix().d
                : Math.sqrt(
                    this.__matrix.c * this.__matrix.c +
                      this.__matrix.d * this.__matrix.d
                  ));
          return this.__scaleY;
        },
        set_scaleY: function (a) {
          if (a != this.__scaleY) {
            this.__scaleY = a;
            if (0 == this.__matrix.c) this.__matrix.d = a;
            else {
              this.get_rotation();
              var b = this.__rotationCosine * a;
              this.__matrix.c = -this.__rotationSine * a;
              this.__matrix.d = b;
            }
            this.__setRenderDirty();
          }
          return a;
        },
        get_shader: function () {
          return this.__shader;
        },
        get_tileset: function () {
          return this.__tileset;
        },
        set_tileset: function (a) {
          a != this.__tileset &&
            ((this.__tileset = a), this.__setRenderDirty());
          return a;
        },
        get_visible: function () {
          return this.__visible;
        },
        get_width: function () {
          var a = ha.__pool.get();
          this.__findTileRect(a);
          this.__getBounds(a, this.get_matrix());
          var b = a.width;
          ha.__pool.release(a);
          return b;
        },
        set_width: function (a) {
          var b = ha.__pool.get();
          this.__findTileRect(b);
          0 != b.width && this.set_scaleX(a / b.width);
          ha.__pool.release(b);
          return a;
        },
        get_x: function () {
          return this.__matrix.tx;
        },
        set_x: function (a) {
          a != this.__matrix.tx &&
            ((this.__matrix.tx = a), this.__setRenderDirty());
          return a;
        },
        get_y: function () {
          return this.__matrix.ty;
        },
        set_y: function (a) {
          a != this.__matrix.ty &&
            ((this.__matrix.ty = a), this.__setRenderDirty());
          return a;
        },
        __class__: Gj,
        __properties__: {
          set_y: "set_y",
          get_y: "get_y",
          set_x: "set_x",
          get_x: "get_x",
          set_width: "set_width",
          get_width: "get_width",
          get_visible: "get_visible",
          set_tileset: "set_tileset",
          get_tileset: "get_tileset",
          get_shader: "get_shader",
          set_scaleY: "set_scaleY",
          get_scaleY: "get_scaleY",
          set_scaleX: "set_scaleX",
          get_scaleX: "get_scaleX",
          set_rotation: "set_rotation",
          get_rotation: "get_rotation",
          set_originY: "set_originY",
          get_originY: "get_originY",
          set_originX: "set_originX",
          get_originX: "get_originX",
          get_matrix: "get_matrix",
          get_id: "get_id",
          set_height: "set_height",
          get_height: "get_height",
          get_colorTransform: "get_colorTransform",
          set_alpha: "set_alpha",
          get_alpha: "get_alpha",
        },
      };
      var Ij = function (a, b, c, d, e, f, k) {
        null == k && (k = 0);
        null == f && (f = 0);
        null == e && (e = 0);
        null == d && (d = 1);
        null == c && (c = 1);
        null == b && (b = 0);
        null == a && (a = 0);
        Gj.call(this, -1, a, b, c, d, e, f, k);
        this.__tiles = [];
        this.__length = 0;
      };
      h["openfl.display.TileContainer"] = Ij;
      Ij.__name__ = "openfl.display.TileContainer";
      Ij.__interfaces__ = [fo];
      Ij.__super__ = Gj;
      Ij.prototype = q(Gj.prototype, {
        getBounds: function (a) {
          for (var b = new ha(), c, d = 0, e = this.__tiles; d < e.length; )
            (c = e[d]),
              ++d,
              (c = c.getBounds(a)),
              b.__expand(c.x, c.y, c.width, c.height);
          return b;
        },
        get_height: function () {
          for (
            var a = ha.__pool.get(), b, c = 0, d = this.__tiles;
            c < d.length;

          )
            (b = d[c]),
              ++c,
              (b = b.getBounds(this)),
              a.__expand(b.x, b.y, b.width, b.height);
          this.__getBounds(a, this.get_matrix());
          c = a.height;
          ha.__pool.release(a);
          return c;
        },
        set_height: function (a) {
          for (
            var b = ha.__pool.get(), c, d = 0, e = this.__tiles;
            d < e.length;

          )
            (c = e[d]),
              ++d,
              (c = c.getBounds(this)),
              b.__expand(c.x, c.y, c.width, c.height);
          0 != b.height && this.set_scaleY(a / b.height);
          ha.__pool.release(b);
          return a;
        },
        get_width: function () {
          for (
            var a = ha.__pool.get(), b, c = 0, d = this.__tiles;
            c < d.length;

          )
            (b = d[c]),
              ++c,
              (b = b.getBounds(this)),
              a.__expand(b.x, b.y, b.width, b.height);
          this.__getBounds(a, this.get_matrix());
          c = a.width;
          ha.__pool.release(a);
          return c;
        },
        set_width: function (a) {
          for (
            var b = ha.__pool.get(), c, d = 0, e = this.__tiles;
            d < e.length;

          )
            (c = e[d]),
              ++d,
              (c = c.getBounds(this)),
              b.__expand(c.x, c.y, c.width, c.height);
          0 != b.width && this.set_scaleX(a / b.width);
          ha.__pool.release(b);
          return a;
        },
        __class__: Ij,
      });
      var Hj = function (a, b, c, d) {
        null == d && (d = !0);
        z.call(this);
        this.__drawableType = 9;
        this.__tileset = c;
        this.smoothing = d;
        this.tileColorTransformEnabled =
          this.tileBlendModeEnabled =
          this.tileAlphaEnabled =
            !0;
        this.__group = new Ij();
        this.__group.set_tileset(c);
        this.__width = a;
        this.__height = b;
      };
      h["openfl.display.Tilemap"] = Hj;
      Hj.__name__ = "openfl.display.Tilemap";
      Hj.__interfaces__ = [fo];
      Hj.__super__ = z;
      Hj.prototype = q(z.prototype, {
        __enterFrame: function (a) {
          this.__group.__dirty &&
            !this.__renderDirty &&
            ((this.__renderDirty = !0), this.__setParentRenderDirty());
        },
        __getBounds: function (a, b) {
          var c = ha.__pool.get();
          c.setTo(0, 0, this.__width, this.__height);
          c.__transform(c, b);
          a.__expand(c.x, c.y, c.width, c.height);
          ha.__pool.release(c);
        },
        __hitTest: function (a, b, c, d, e, f) {
          if (
            !f.get_visible() ||
            this.__isMask ||
            (null != this.get_mask() && !this.get_mask().__hitTestMask(a, b))
          )
            return !1;
          this.__getRenderTransform();
          var k = this.__renderTransform,
            g = k.a * k.d - k.b * k.c;
          c = 0 == g ? -k.tx : (1 / g) * (k.c * (k.ty - b) + k.d * (a - k.tx));
          k = this.__renderTransform;
          g = k.a * k.d - k.b * k.c;
          a = 0 == g ? -k.ty : (1 / g) * (k.a * (b - k.ty) + k.b * (k.tx - a));
          return 0 < c && 0 < a && c <= this.__width && a <= this.__height
            ? (null == d || e || d.push(f), !0)
            : !1;
        },
        get_height: function () {
          return this.__height * Math.abs(this.get_scaleY());
        },
        set_height: function (a) {
          this.__height = a | 0;
          return this.__height * Math.abs(this.get_scaleY());
        },
        get_width: function () {
          return this.__width * Math.abs(this.__scaleX);
        },
        set_width: function (a) {
          this.__width = a | 0;
          return this.__width * Math.abs(this.__scaleX);
        },
        __class__: Hj,
      });
      var Io = function (a, b) {
        this.__bitmapData = a;
        this.rectData = ja.toFloatVector(null);
        this.__data = [];
        if (null != b)
          for (a = 0; a < b.length; ) {
            var c = b[a];
            ++a;
            this.addRect(c);
          }
      };
      h["openfl.display.Tileset"] = Io;
      Io.__name__ = "openfl.display.Tileset";
      Io.prototype = {
        addRect: function (a) {
          if (null == a) return -1;
          this.rectData.push(a.x);
          this.rectData.push(a.y);
          this.rectData.push(a.width);
          this.rectData.push(a.height);
          a = new gm(a);
          a.__update(this.__bitmapData);
          this.__data.push(a);
          return this.__data.length - 1;
        },
        getRect: function (a) {
          return a < this.__data.length && 0 <= a
            ? new ha(
                this.__data[a].x,
                this.__data[a].y,
                this.__data[a].width,
                this.__data[a].height
              )
            : null;
        },
        __class__: Io,
      };
      var gm = function (a) {
        null != a &&
          ((this.x = a.x | 0),
          (this.y = a.y | 0),
          (this.width = a.width | 0),
          (this.height = a.height | 0));
      };
      h["openfl.display._Tileset.TileData"] = gm;
      gm.__name__ = "openfl.display._Tileset.TileData";
      gm.prototype = {
        __update: function (a) {
          if (null != a) {
            var b = a.width;
            a = a.height;
            this.__uvX = this.x / b;
            this.__uvY = this.y / a;
            this.__uvWidth = (this.x + this.width) / b;
            this.__uvHeight = (this.y + this.height) / a;
          }
        },
        __class__: gm,
      };
      var Jo = function () {
        this.__totalFrames = this.__framesLoaded = 1;
        this.__currentLabels = [];
        this.__currentFrame = 1;
        this.__lastFrameUpdate = this.__lastFrameScriptEval = -1;
      };
      h["openfl.display.Timeline"] = Jo;
      Jo.__name__ = "openfl.display.Timeline";
      Jo.prototype = {
        enterFrame: function (a) {},
        __enterFrame: function (a) {
          if (this.__isPlaying) {
            a = this.__getNextFrame(a);
            if (this.__lastFrameScriptEval == a) return;
            if (null != this.__frameScripts) {
              if (a < this.__currentFrame) {
                if (!this.__evaluateFrameScripts(this.__totalFrames)) return;
                this.__currentFrame = 1;
              }
              if (!this.__evaluateFrameScripts(a)) return;
            } else this.__currentFrame = a;
          }
          this.__updateSymbol(this.__currentFrame);
        },
        __evaluateFrameScripts: function (a) {
          if (null == this.__frameScripts) return !0;
          var b = this.__currentFrame;
          for (a += 1; b < a; ) {
            var c = b++;
            if (
              c != this.__lastFrameScriptEval &&
              ((this.__currentFrame = this.__lastFrameScriptEval = c),
              (this.__frameScripts.h.hasOwnProperty(c) &&
                (this.__updateSymbol(c),
                (0, this.__frameScripts.h[c])(this.__scope),
                this.__currentFrame != c)) ||
                !this.__isPlaying)
            )
              return !1;
          }
          return !0;
        },
        __getNextFrame: function (a) {
          null != this.frameRate
            ? ((this.__timeElapsed += a),
              (a =
                this.__currentFrame +
                Math.floor(this.__timeElapsed / this.__frameTime)),
              1 > a && (a = 1),
              a > this.__totalFrames &&
                (a = Math.floor((a - 1) % this.__totalFrames) + 1),
              (this.__timeElapsed %= this.__frameTime))
            : ((a = this.__currentFrame + 1),
              a > this.__totalFrames && (a = 1));
          return a;
        },
        __updateFrameLabel: function () {
          this.__currentFrameLabel = this.__currentLabel = null;
          for (var a = 0, b = this.__currentLabels; a < b.length; ) {
            var c = b[a];
            ++a;
            if (c.frame < this.__currentFrame) this.__currentLabel = c.name;
            else if (c.frame == this.__currentFrame)
              this.__currentFrameLabel = this.__currentLabel = c.name;
            else break;
          }
        },
        __updateSymbol: function (a) {
          this.__currentFrame != this.__lastFrameUpdate &&
            (this.__updateFrameLabel(),
            this.enterFrame(a),
            (this.__lastFrameUpdate = this.__currentFrame));
        },
        __class__: Jo,
      };
      var Dj = function (a, b) {
        ti.call(this, a, b);
        this.stage = new xi(
          this,
          Object.prototype.hasOwnProperty.call(b.context, "background")
            ? b.context.background
            : 16777215
        );
        if (Object.prototype.hasOwnProperty.call(b, "parameters"))
          try {
            this.stage.get_loaderInfo().parameters = b.parameters;
          } catch (c) {}
        this.stage.__setLogicalSize(b.width, b.height);
        Object.prototype.hasOwnProperty.call(b, "resizable") &&
          !b.resizable &&
          this.stage.set_scaleMode(3);
        a.addModule(this.stage);
      };
      h["openfl.display.Window"] = Dj;
      Dj.__name__ = "openfl.display.Window";
      Dj.__super__ = ti;
      Dj.prototype = q(ti.prototype, {
        close: function () {
          ti.prototype.close.call(this);
          this.onClose.canceled ||
            null == this.stage ||
            (this.application.removeModule(this.stage), (this.stage = null));
        },
        __class__: Dj,
      });
      var Ej = function () {};
      h["openfl.display._internal.CanvasBitmap"] = Ej;
      Ej.__name__ = "openfl.display._internal.CanvasBitmap";
      Ej.renderDrawable = function (a, b) {
        b.__updateCacheBitmap(a, !1);
        null != a.__bitmapData &&
          null != a.__bitmapData.image &&
          (a.__imageVersion = a.__bitmapData.image.version);
        if (null == a.__cacheBitmap || a.__isCacheBitmapRender) {
          if (
            !(
              (null == a.opaqueBackground && null == a.__graphics) ||
              !a.__renderable ||
              ((w = b.__getAlpha(a.__worldAlpha)), 0 >= w)
            )
          ) {
            if (
              null != a.opaqueBackground &&
              !a.__isCacheBitmapRender &&
              0 < a.get_width() &&
              0 < a.get_height()
            ) {
              b.__setBlendMode(a.__worldBlendMode);
              b.__pushMaskObject(a);
              x = b.context;
              b.setTransform(a.__renderTransform, x);
              var c = a.opaqueBackground;
              x.fillStyle =
                "rgb(" +
                ((c >>> 16) & 255) +
                "," +
                ((c >>> 8) & 255) +
                "," +
                (c & 255) +
                ")";
              x.fillRect(0, 0, a.get_width(), a.get_height());
              b.__popMaskObject(a);
            }
            if (
              null != a.__graphics &&
              a.__renderable &&
              ((w = b.__getAlpha(a.__worldAlpha)), !(0 >= w))
            ) {
              var d = a.__graphics;
              if (null != d) {
                A.render(d, b);
                var e = d.__width,
                  f = d.__height;
                c = d.__canvas;
                if (null != c && d.__visible && 1 <= e && 1 <= f) {
                  var k = d.__worldTransform;
                  x = b.context;
                  D = a.__scrollRect;
                  var g = a.__worldScale9Grid;
                  if (null == D || (0 < D.width && 0 < D.height)) {
                    b.__setBlendMode(a.__worldBlendMode);
                    b.__pushMaskObject(a);
                    x.globalAlpha = w;
                    if (null != g && 0 == k.b && 0 == k.c) {
                      var l = b.__pixelRatio;
                      w = xa.__pool.get();
                      w.translate(k.tx, k.ty);
                      b.setTransform(w, x);
                      xa.__pool.release(w);
                      w = d.__bounds;
                      var h = d.__renderTransform.a / d.__bitmapScale,
                        p = d.__renderTransform.d / d.__bitmapScale,
                        m = h * k.a,
                        n = p * k.d;
                      k = Math.max(1, Math.round(g.x * h));
                      d = Math.round(g.y * p);
                      D = Math.max(
                        1,
                        Math.round((w.get_right() - g.get_right()) * h)
                      );
                      var q = Math.round((w.get_bottom() - g.get_bottom()) * p);
                      h = Math.round(g.width * h);
                      g = Math.round(g.height * p);
                      p = Math.round(k / l);
                      var z = Math.round(d / l),
                        t = Math.round(D / l);
                      l = Math.round(q / l);
                      m = w.width * m - p - t;
                      w = w.height * n - z - l;
                      b.applySmoothing(x, !1);
                      0 != h && 0 != g
                        ? (x.drawImage(c, 0, 0, k, d, 0, 0, p, z),
                          x.drawImage(c, k, 0, h, d, p, 0, m, z),
                          x.drawImage(c, k + h, 0, D, d, p + m, 0, t, z),
                          x.drawImage(c, 0, d, k, g, 0, z, p, w),
                          x.drawImage(c, k, d, h, g, p, z, m, w),
                          x.drawImage(c, k + h, d, D, g, p + m, z, t, w),
                          x.drawImage(c, 0, d + g, k, q, 0, z + w, p, l),
                          x.drawImage(c, k, d + g, h, q, p, z + w, m, l),
                          x.drawImage(
                            c,
                            k + h,
                            d + g,
                            D,
                            q,
                            p + m,
                            z + w,
                            t,
                            l
                          ))
                        : 0 == h && 0 != g
                        ? ((f = p + m + t),
                          x.drawImage(c, 0, 0, e, d, 0, 0, f, z),
                          x.drawImage(c, 0, d, e, g, 0, z, f, w),
                          x.drawImage(c, 0, d + g, e, q, 0, z + w, f, l))
                        : 0 == g &&
                          0 != h &&
                          ((e = z + w + l),
                          x.drawImage(c, 0, 0, k, f, 0, 0, p, e),
                          x.drawImage(c, k, 0, h, f, p, 0, m, e),
                          x.drawImage(c, k + h, 0, D, f, p + m, 0, t, e));
                    } else b.setTransform(k, x), x.drawImage(c, 0, 0, e, f);
                    b.__popMaskObject(a);
                  }
                }
              }
            }
          }
          a.__renderable &&
            ((w = b.__getAlpha(a.__worldAlpha)),
            0 < w &&
              null != a.__bitmapData &&
              a.__bitmapData.__isValid &&
              a.__bitmapData.readable &&
              ((x = b.context),
              b.__setBlendMode(a.__worldBlendMode),
              b.__pushMaskObject(a, !1),
              Ra.convertToCanvas(a.__bitmapData.image),
              (x.globalAlpha = w),
              (D = a.__scrollRect),
              b.setTransform(a.__renderTransform, x),
              (b.__allowSmoothing && a.smoothing) ||
                (x.imageSmoothingEnabled = !1),
              null == D
                ? x.drawImage(
                    a.__bitmapData.image.get_src(),
                    0,
                    0,
                    a.__bitmapData.image.width,
                    a.__bitmapData.image.height
                  )
                : x.drawImage(
                    a.__bitmapData.image.get_src(),
                    D.x,
                    D.y,
                    D.width,
                    D.height,
                    D.x,
                    D.y,
                    D.width,
                    D.height
                  ),
              (b.__allowSmoothing && a.smoothing) ||
                (x.imageSmoothingEnabled = !0),
              b.__popMaskObject(a, !1)));
        } else if (((c = a.__cacheBitmap), c.__renderable)) {
          var w = b.__getAlpha(c.__worldAlpha);
          if (
            0 < w &&
            null != c.__bitmapData &&
            c.__bitmapData.__isValid &&
            c.__bitmapData.readable
          ) {
            var x = b.context;
            b.__setBlendMode(c.__worldBlendMode);
            b.__pushMaskObject(c, !1);
            Ra.convertToCanvas(c.__bitmapData.image);
            x.globalAlpha = w;
            var D = c.__scrollRect;
            b.setTransform(c.__renderTransform, x);
            (b.__allowSmoothing && c.smoothing) ||
              (x.imageSmoothingEnabled = !1);
            null == D
              ? x.drawImage(
                  c.__bitmapData.image.get_src(),
                  0,
                  0,
                  c.__bitmapData.image.width,
                  c.__bitmapData.image.height
                )
              : x.drawImage(
                  c.__bitmapData.image.get_src(),
                  D.x,
                  D.y,
                  D.width,
                  D.height,
                  D.x,
                  D.y,
                  D.width,
                  D.height
                );
            (b.__allowSmoothing && c.smoothing) ||
              (x.imageSmoothingEnabled = !0);
            b.__popMaskObject(c, !1);
          }
        }
        b.__renderEvent(a);
      };
      Ej.renderDrawableMask = function (a, b) {
        b.context.rect(0, 0, a.get_width(), a.get_height());
      };
      var Sl = function () {};
      h["openfl.display._internal.CanvasBitmapData"] = Sl;
      Sl.__name__ = "openfl.display._internal.CanvasBitmapData";
      Sl.renderDrawable = function (a, b) {
        if (a.readable) {
          var c = a.image;
          c.type == Nd.DATA && Ra.convertToCanvas(c);
          var d = b.context;
          d.globalAlpha = 1;
          b.setTransform(a.__renderTransform, d);
          d.drawImage(c.get_src(), 0, 0, c.width, c.height);
        }
      };
      Sl.renderDrawableMask = function (a, b) {};
      var Ah = function () {};
      h["openfl.display._internal.CanvasDisplayObject"] = Ah;
      Ah.__name__ = "openfl.display._internal.CanvasDisplayObject";
      Ah.renderDrawable = function (a, b) {
        if (
          null == a.get_mask() ||
          (0 < a.get_mask().get_width() && 0 < a.get_mask().get_height())
        )
          if (
            (b.__updateCacheBitmap(a, !1),
            null != a.__cacheBitmap && !a.__isCacheBitmapRender)
          ) {
            var c = a.__cacheBitmap;
            if (c.__renderable) {
              var d = b.__getAlpha(c.__worldAlpha);
              if (
                0 < d &&
                null != c.__bitmapData &&
                c.__bitmapData.__isValid &&
                c.__bitmapData.readable
              ) {
                var e = b.context;
                b.__setBlendMode(c.__worldBlendMode);
                b.__pushMaskObject(c, !1);
                Ra.convertToCanvas(c.__bitmapData.image);
                e.globalAlpha = d;
                var f = c.__scrollRect;
                b.setTransform(c.__renderTransform, e);
                (b.__allowSmoothing && c.smoothing) ||
                  (e.imageSmoothingEnabled = !1);
                null == f
                  ? e.drawImage(
                      c.__bitmapData.image.get_src(),
                      0,
                      0,
                      c.__bitmapData.image.width,
                      c.__bitmapData.image.height
                    )
                  : e.drawImage(
                      c.__bitmapData.image.get_src(),
                      f.x,
                      f.y,
                      f.width,
                      f.height,
                      f.x,
                      f.y,
                      f.width,
                      f.height
                    );
                (b.__allowSmoothing && c.smoothing) ||
                  (e.imageSmoothingEnabled = !0);
                b.__popMaskObject(c, !1);
              }
            }
          } else if (
            !(
              (null == a.opaqueBackground && null == a.__graphics) ||
              !a.__renderable ||
              ((d = b.__getAlpha(a.__worldAlpha)),
              0 >= d ||
                (null != a.opaqueBackground &&
                  !a.__isCacheBitmapRender &&
                  0 < a.get_width() &&
                  0 < a.get_height() &&
                  (b.__setBlendMode(a.__worldBlendMode),
                  b.__pushMaskObject(a),
                  (e = b.context),
                  b.setTransform(a.__renderTransform, e),
                  (c = a.opaqueBackground),
                  (e.fillStyle =
                    "rgb(" +
                    ((c >>> 16) & 255) +
                    "," +
                    ((c >>> 8) & 255) +
                    "," +
                    (c & 255) +
                    ")"),
                  e.fillRect(0, 0, a.get_width(), a.get_height()),
                  b.__popMaskObject(a)),
                null == a.__graphics ||
                  !a.__renderable ||
                  ((d = b.__getAlpha(a.__worldAlpha)), 0 >= d)))
            )
          ) {
            var k = a.__graphics;
            if (null != k) {
              A.render(k, b);
              var g = k.__width,
                l = k.__height;
              c = k.__canvas;
              if (null != c && k.__visible && 1 <= g && 1 <= l) {
                var h = k.__worldTransform;
                e = b.context;
                f = a.__scrollRect;
                var p = a.__worldScale9Grid;
                if (null == f || (0 < f.width && 0 < f.height)) {
                  b.__setBlendMode(a.__worldBlendMode);
                  b.__pushMaskObject(a);
                  e.globalAlpha = d;
                  if (null != p && 0 == h.b && 0 == h.c) {
                    var m = b.__pixelRatio;
                    d = xa.__pool.get();
                    d.translate(h.tx, h.ty);
                    b.setTransform(d, e);
                    xa.__pool.release(d);
                    d = k.__bounds;
                    var n = k.__renderTransform.a / k.__bitmapScale,
                      q = k.__renderTransform.d / k.__bitmapScale,
                      z = n * h.a,
                      t = q * h.d;
                    h = Math.max(1, Math.round(p.x * n));
                    k = Math.round(p.y * q);
                    f = Math.max(
                      1,
                      Math.round((d.get_right() - p.get_right()) * n)
                    );
                    var w = Math.round((d.get_bottom() - p.get_bottom()) * q);
                    n = Math.round(p.width * n);
                    p = Math.round(p.height * q);
                    q = Math.round(h / m);
                    var x = Math.round(k / m),
                      D = Math.round(f / m);
                    m = Math.round(w / m);
                    z = d.width * z - q - D;
                    d = d.height * t - x - m;
                    b.applySmoothing(e, !1);
                    0 != n && 0 != p
                      ? (e.drawImage(c, 0, 0, h, k, 0, 0, q, x),
                        e.drawImage(c, h, 0, n, k, q, 0, z, x),
                        e.drawImage(c, h + n, 0, f, k, q + z, 0, D, x),
                        e.drawImage(c, 0, k, h, p, 0, x, q, d),
                        e.drawImage(c, h, k, n, p, q, x, z, d),
                        e.drawImage(c, h + n, k, f, p, q + z, x, D, d),
                        e.drawImage(c, 0, k + p, h, w, 0, x + d, q, m),
                        e.drawImage(c, h, k + p, n, w, q, x + d, z, m),
                        e.drawImage(c, h + n, k + p, f, w, q + z, x + d, D, m))
                      : 0 == n && 0 != p
                      ? ((l = q + z + D),
                        e.drawImage(c, 0, 0, g, k, 0, 0, l, x),
                        e.drawImage(c, 0, k, g, p, 0, x, l, d),
                        e.drawImage(c, 0, k + p, g, w, 0, x + d, l, m))
                      : 0 == p &&
                        0 != n &&
                        ((g = x + d + m),
                        e.drawImage(c, 0, 0, h, l, 0, 0, q, g),
                        e.drawImage(c, h, 0, n, l, q, 0, z, g),
                        e.drawImage(c, h + n, 0, f, l, q + z, 0, D, g));
                  } else b.setTransform(h, e), e.drawImage(c, 0, 0, g, l);
                  b.__popMaskObject(a);
                }
              }
            }
          }
        b.__renderEvent(a);
      };
      Ah.renderDrawableMask = function (a, b) {
        null != a.__graphics && A.renderMask(a.__graphics, b);
      };
      var Tl = function () {};
      h["openfl.display._internal.CanvasDisplayObjectContainer"] = Tl;
      Tl.__name__ = "openfl.display._internal.CanvasDisplayObjectContainer";
      Tl.renderDrawable = function (a, b) {
        for (var c = a.__removedChildren.iterator(); c.hasNext(); ) {
          var d = c.next();
          null == d.stage && d.__cleanup();
        }
        a.__removedChildren.set_length(0);
        if (
          !(
            !a.__renderable ||
            0 >= a.__worldAlpha ||
            (null != a.get_mask() &&
              (0 >= a.get_mask().get_width() || 0 >= a.get_mask().get_height()))
          ) &&
          (Ah.renderDrawable(a, b),
          null == a.__cacheBitmap || a.__isCacheBitmapRender)
        ) {
          b.__pushMaskObject(a);
          if (null != b.__stage) {
            c = 0;
            for (d = a.__children; c < d.length; ) {
              var e = d[c];
              ++c;
              b.__renderDrawable(e);
              e.__renderDirty = !1;
            }
            a.__renderDirty = !1;
          } else
            for (c = 0, d = a.__children; c < d.length; )
              (e = d[c]), ++c, b.__renderDrawable(e);
          b.__popMaskObject(a);
        }
      };
      Tl.renderDrawableMask = function (a, b) {
        for (var c = a.__removedChildren.iterator(); c.hasNext(); ) {
          var d = c.next();
          null == d.stage && d.__cleanup();
        }
        a.__removedChildren.set_length(0);
        null != a.__graphics && A.renderMask(a.__graphics, b);
        c = 0;
        for (a = a.__children; c < a.length; )
          (d = a[c]), ++c, b.__renderDrawableMask(d);
      };
      var Wd = function () {
        null == Wd.empty
          ? ((this.types = []),
            (this.b = []),
            (this.i = []),
            (this.f = []),
            (this.o = []),
            (this.ff = []),
            (this.ii = []),
            (this.copyOnWrite = !0))
          : this.clear();
      };
      h["openfl.display._internal.DrawCommandBuffer"] = Wd;
      Wd.__name__ = "openfl.display._internal.DrawCommandBuffer";
      Wd.prototype = {
        beginBitmapFill: function (a, b, c, d) {
          this.prepareWrite();
          this.types.push(ta.BEGIN_BITMAP_FILL);
          this.o.push(a);
          this.o.push(b);
          this.b.push(c);
          this.b.push(d);
        },
        beginFill: function (a, b) {
          this.prepareWrite();
          this.types.push(ta.BEGIN_FILL);
          this.i.push(a);
          this.f.push(b);
        },
        beginGradientFill: function (a, b, c, d, e, f, k, g) {
          this.prepareWrite();
          this.types.push(ta.BEGIN_GRADIENT_FILL);
          this.o.push(a);
          this.ii.push(b);
          this.ff.push(c);
          this.ii.push(d);
          this.o.push(e);
          this.o.push(f);
          this.o.push(k);
          this.f.push(g);
        },
        beginShaderFill: function (a) {
          this.prepareWrite();
          this.types.push(ta.BEGIN_SHADER_FILL);
          this.o.push(a);
        },
        clear: function () {
          this.types = Wd.empty.types;
          this.b = Wd.empty.b;
          this.i = Wd.empty.i;
          this.f = Wd.empty.f;
          this.o = Wd.empty.o;
          this.ff = Wd.empty.ff;
          this.ii = Wd.empty.ii;
          this.copyOnWrite = !0;
        },
        cubicCurveTo: function (a, b, c, d, e, f) {
          this.prepareWrite();
          this.types.push(ta.CUBIC_CURVE_TO);
          this.f.push(a);
          this.f.push(b);
          this.f.push(c);
          this.f.push(d);
          this.f.push(e);
          this.f.push(f);
        },
        curveTo: function (a, b, c, d) {
          this.prepareWrite();
          this.types.push(ta.CURVE_TO);
          this.f.push(a);
          this.f.push(b);
          this.f.push(c);
          this.f.push(d);
        },
        drawCircle: function (a, b, c) {
          this.prepareWrite();
          this.types.push(ta.DRAW_CIRCLE);
          this.f.push(a);
          this.f.push(b);
          this.f.push(c);
        },
        drawEllipse: function (a, b, c, d) {
          this.prepareWrite();
          this.types.push(ta.DRAW_ELLIPSE);
          this.f.push(a);
          this.f.push(b);
          this.f.push(c);
          this.f.push(d);
        },
        drawQuads: function (a, b, c) {
          this.prepareWrite();
          this.types.push(ta.DRAW_QUADS);
          this.o.push(a);
          this.o.push(b);
          this.o.push(c);
        },
        drawRect: function (a, b, c, d) {
          this.prepareWrite();
          this.types.push(ta.DRAW_RECT);
          this.f.push(a);
          this.f.push(b);
          this.f.push(c);
          this.f.push(d);
        },
        drawRoundRect: function (a, b, c, d, e, f) {
          this.prepareWrite();
          this.types.push(ta.DRAW_ROUND_RECT);
          this.f.push(a);
          this.f.push(b);
          this.f.push(c);
          this.f.push(d);
          this.f.push(e);
          this.o.push(f);
        },
        drawTriangles: function (a, b, c, d) {
          this.prepareWrite();
          this.types.push(ta.DRAW_TRIANGLES);
          this.o.push(a);
          this.o.push(b);
          this.o.push(c);
          this.o.push(d);
        },
        endFill: function () {
          this.prepareWrite();
          this.types.push(ta.END_FILL);
        },
        lineBitmapStyle: function (a, b, c, d) {
          this.prepareWrite();
          this.types.push(ta.LINE_BITMAP_STYLE);
          this.o.push(a);
          this.o.push(b);
          this.b.push(c);
          this.b.push(d);
        },
        lineGradientStyle: function (a, b, c, d, e, f, k, g) {
          this.prepareWrite();
          this.types.push(ta.LINE_GRADIENT_STYLE);
          this.o.push(a);
          this.ii.push(b);
          this.ff.push(c);
          this.ii.push(d);
          this.o.push(e);
          this.o.push(f);
          this.o.push(k);
          this.f.push(g);
        },
        lineStyle: function (a, b, c, d, e, f, k, g) {
          this.prepareWrite();
          this.types.push(ta.LINE_STYLE);
          this.o.push(a);
          this.i.push(b);
          this.f.push(c);
          this.b.push(d);
          this.o.push(e);
          this.o.push(f);
          this.o.push(k);
          this.f.push(g);
        },
        lineTo: function (a, b) {
          this.prepareWrite();
          this.types.push(ta.LINE_TO);
          this.f.push(a);
          this.f.push(b);
        },
        moveTo: function (a, b) {
          this.prepareWrite();
          this.types.push(ta.MOVE_TO);
          this.f.push(a);
          this.f.push(b);
        },
        prepareWrite: function () {
          this.copyOnWrite &&
            ((this.types = this.types.slice()),
            (this.b = this.b.slice()),
            (this.i = this.i.slice()),
            (this.f = this.f.slice()),
            (this.o = this.o.slice()),
            (this.ff = this.ff.slice()),
            (this.ii = this.ii.slice()),
            (this.copyOnWrite = !1));
        },
        overrideBlendMode: function (a) {
          this.prepareWrite();
          this.types.push(ta.OVERRIDE_BLEND_MODE);
          this.o.push(a);
        },
        windingEvenOdd: function () {
          this.prepareWrite();
          this.types.push(ta.WINDING_EVEN_ODD);
        },
        windingNonZero: function () {
          this.prepareWrite();
          this.types.push(ta.WINDING_NON_ZERO);
        },
        get_length: function () {
          return this.types.length;
        },
        __class__: Wd,
        __properties__: { get_length: "get_length" },
      };
      var A = function () {};
      h["openfl.display._internal.CanvasGraphics"] = A;
      A.__name__ = "openfl.display._internal.CanvasGraphics";
      A.closePath = function (a) {
        null == a && (a = !1);
        null != A.context.strokeStyle &&
          (a || A.context.closePath(),
          A.context.stroke(),
          a && A.context.closePath(),
          A.context.beginPath());
      };
      A.createBitmapFill = function (a, b, c) {
        Ra.convertToCanvas(a.image);
        A.setSmoothing(c);
        return A.context.createPattern(
          a.image.get_src(),
          b ? "repeat" : "no-repeat"
        );
      };
      A.createGradientPattern = function (a, b, c, d, e, f, k, g) {
        f = null;
        k = !1;
        null == e && ((e = xa.__pool.get()), e.identity(), (k = !0));
        switch (a) {
          case 0:
            f = A.context.createLinearGradient(-819.2, 0, 819.2, 0);
            A.pendingMatrix = e.clone();
            A.inversePendingMatrix = e.clone();
            A.inversePendingMatrix.invert();
            break;
          case 1:
            1 < g ? (g = 1) : -1 > g && (g = -1),
              (f = A.context.createRadialGradient(
                819.2 * g,
                0,
                0,
                0,
                0,
                819.2
              )),
              (A.pendingMatrix = e.clone()),
              (A.inversePendingMatrix = e.clone()),
              A.inversePendingMatrix.invert();
        }
        for (var l, h, p, m = 0, r = b.length; m < r; )
          (p = m++),
            (l = b[p]),
            (a = c[p]),
            (g = (l & 16711680) >>> 16),
            (h = (l & 65280) >>> 8),
            (l &= 255),
            (p = d[p] / 255),
            0 > p && (p = 0),
            1 < p && (p = 1),
            f.addColorStop(
              p,
              "rgba(" + g + ", " + h + ", " + l + ", " + a + ")"
            );
        k && xa.__pool.release(e);
        return f;
      };
      A.createTempPatternCanvas = function (a, b, c, d) {
        var e = window.document.createElement("canvas"),
          f = e.getContext("2d");
        e.width = c;
        e.height = d;
        a = a.image.get_src();
        f.fillStyle = f.createPattern(a, b ? "repeat" : "no-repeat");
        f.beginPath();
        f.moveTo(0, 0);
        f.lineTo(0, d);
        f.lineTo(c, d);
        f.lineTo(c, 0);
        f.lineTo(0, 0);
        f.closePath();
        A.hitTesting || f.fill(A.windingRule);
        return e;
      };
      A.drawRoundRect = function (a, b, c, d, e, f) {
        null == f && (f = e);
        e *= 0.5;
        f *= 0.5;
        e > c / 2 && (e = c / 2);
        f > d / 2 && (f = d / 2);
        c = a + c;
        d = b + d;
        var k = -e + 0.7071067811865476 * e,
          g = -e + 0.41421356237309503 * e,
          l = -f + 0.7071067811865476 * f,
          h = -f + 0.41421356237309503 * f;
        A.context.moveTo(c, d - f);
        A.context.quadraticCurveTo(c, d + h, c + k, d + l);
        A.context.quadraticCurveTo(c + g, d, c - e, d);
        A.context.lineTo(a + e, d);
        A.context.quadraticCurveTo(a - g, d, a - k, d + l);
        A.context.quadraticCurveTo(a, d + h, a, d - f);
        A.context.lineTo(a, b + f);
        A.context.quadraticCurveTo(a, b - h, a - k, b - l);
        A.context.quadraticCurveTo(a - g, b, a + e, b);
        A.context.lineTo(c - e, b);
        A.context.quadraticCurveTo(c + g, b, c + k, b - l);
        A.context.quadraticCurveTo(c, b - h, c, b + f);
        A.context.lineTo(c, d - f);
      };
      A.endFill = function () {
        A.context.beginPath();
        A.playCommands(A.fillCommands, !1);
        A.fillCommands.clear();
      };
      A.endStroke = function () {
        A.context.beginPath();
        A.playCommands(A.strokeCommands, !0);
        A.context.closePath();
        A.strokeCommands.clear();
      };
      A.hitTest = function (a, b, c) {
        A.bounds = a.__bounds;
        A.graphics = a;
        if (
          0 == a.__commands.get_length() ||
          null == A.bounds ||
          0 >= A.bounds.width ||
          0 >= A.bounds.height
        )
          return !1;
        A.hitTesting = !0;
        var d = a.__renderTransform,
          e = b * d.b + c * d.d + d.ty;
        b =
          b * d.a +
          c * d.c +
          d.tx -
          (A.bounds.x * d.a + A.bounds.y * d.c + d.tx);
        c = e - (A.bounds.x * d.b + A.bounds.y * d.d + d.ty);
        e = a.__canvas;
        var f = a.__context;
        a.__canvas = A.hitTestCanvas;
        a.__context = A.hitTestContext;
        A.context = a.__context;
        A.context.setTransform(d.a, d.b, d.c, d.d, d.tx, d.ty);
        A.fillCommands.clear();
        A.strokeCommands.clear();
        A.hasFill = !1;
        A.hasStroke = !1;
        A.bitmapFill = null;
        A.bitmapRepeat = !1;
        A.windingRule = "evenodd";
        d = new ig(a.__commands);
        for (var k = 0, g = a.__commands.types; k < g.length; ) {
          var l = g[k];
          ++k;
          switch (l._hx_index) {
            case 0:
            case 1:
            case 2:
            case 3:
              A.endFill();
              if (A.hasFill && A.context.isPointInPath(b, c, A.windingRule))
                return d.destroy(), (a.__canvas = e), (a.__context = f), !0;
              A.endStroke();
              if (A.hasStroke && A.context.isPointInStroke(b, c))
                return d.destroy(), (a.__canvas = e), (a.__context = f), !0;
              if (l == ta.BEGIN_BITMAP_FILL) {
                switch (d.prev._hx_index) {
                  case 0:
                    d.oPos += 2;
                    d.bPos += 2;
                    break;
                  case 1:
                    d.iPos += 1;
                    d.fPos += 1;
                    break;
                  case 2:
                    d.oPos += 4;
                    d.iiPos += 2;
                    d.ffPos += 1;
                    d.fPos += 1;
                    break;
                  case 3:
                    d.oPos += 1;
                    break;
                  case 4:
                    d.fPos += 6;
                    break;
                  case 5:
                    d.fPos += 4;
                    break;
                  case 6:
                    d.fPos += 3;
                    break;
                  case 7:
                    d.fPos += 4;
                    break;
                  case 8:
                    d.oPos += 3;
                    break;
                  case 9:
                    d.fPos += 4;
                    break;
                  case 10:
                    d.fPos += 5;
                    d.oPos += 1;
                    break;
                  case 12:
                    d.oPos += 4;
                    break;
                  case 14:
                    d.oPos += 2;
                    d.bPos += 2;
                    break;
                  case 15:
                    d.oPos += 4;
                    d.iiPos += 2;
                    d.ffPos += 1;
                    d.fPos += 1;
                    break;
                  case 16:
                    d.oPos += 4;
                    d.iPos += 1;
                    d.fPos += 2;
                    d.bPos += 1;
                    break;
                  case 17:
                    d.fPos += 2;
                    break;
                  case 18:
                    d.fPos += 2;
                    break;
                  case 19:
                    d.oPos += 1;
                    break;
                  case 20:
                    d.oPos += 1;
                }
                d.prev = ta.BEGIN_BITMAP_FILL;
                l = d;
                A.fillCommands.beginBitmapFill(
                  l.buffer.o[l.oPos],
                  l.buffer.o[l.oPos + 1],
                  l.buffer.b[l.bPos],
                  l.buffer.b[l.bPos + 1]
                );
                A.strokeCommands.beginBitmapFill(
                  l.buffer.o[l.oPos],
                  l.buffer.o[l.oPos + 1],
                  l.buffer.b[l.bPos],
                  l.buffer.b[l.bPos + 1]
                );
              } else if (l == ta.BEGIN_GRADIENT_FILL) {
                switch (d.prev._hx_index) {
                  case 0:
                    d.oPos += 2;
                    d.bPos += 2;
                    break;
                  case 1:
                    d.iPos += 1;
                    d.fPos += 1;
                    break;
                  case 2:
                    d.oPos += 4;
                    d.iiPos += 2;
                    d.ffPos += 1;
                    d.fPos += 1;
                    break;
                  case 3:
                    d.oPos += 1;
                    break;
                  case 4:
                    d.fPos += 6;
                    break;
                  case 5:
                    d.fPos += 4;
                    break;
                  case 6:
                    d.fPos += 3;
                    break;
                  case 7:
                    d.fPos += 4;
                    break;
                  case 8:
                    d.oPos += 3;
                    break;
                  case 9:
                    d.fPos += 4;
                    break;
                  case 10:
                    d.fPos += 5;
                    d.oPos += 1;
                    break;
                  case 12:
                    d.oPos += 4;
                    break;
                  case 14:
                    d.oPos += 2;
                    d.bPos += 2;
                    break;
                  case 15:
                    d.oPos += 4;
                    d.iiPos += 2;
                    d.ffPos += 1;
                    d.fPos += 1;
                    break;
                  case 16:
                    d.oPos += 4;
                    d.iPos += 1;
                    d.fPos += 2;
                    d.bPos += 1;
                    break;
                  case 17:
                    d.fPos += 2;
                    break;
                  case 18:
                    d.fPos += 2;
                    break;
                  case 19:
                    d.oPos += 1;
                    break;
                  case 20:
                    d.oPos += 1;
                }
                d.prev = ta.BEGIN_GRADIENT_FILL;
                l = d;
                A.fillCommands.beginGradientFill(
                  l.buffer.o[l.oPos],
                  l.buffer.ii[l.iiPos],
                  l.buffer.ff[l.ffPos],
                  l.buffer.ii[l.iiPos + 1],
                  l.buffer.o[l.oPos + 1],
                  l.buffer.o[l.oPos + 2],
                  l.buffer.o[l.oPos + 3],
                  l.buffer.f[l.fPos]
                );
                A.strokeCommands.beginGradientFill(
                  l.buffer.o[l.oPos],
                  l.buffer.ii[l.iiPos],
                  l.buffer.ff[l.ffPos],
                  l.buffer.ii[l.iiPos + 1],
                  l.buffer.o[l.oPos + 1],
                  l.buffer.o[l.oPos + 2],
                  l.buffer.o[l.oPos + 3],
                  l.buffer.f[l.fPos]
                );
              } else if (l == ta.BEGIN_SHADER_FILL) {
                switch (d.prev._hx_index) {
                  case 0:
                    d.oPos += 2;
                    d.bPos += 2;
                    break;
                  case 1:
                    d.iPos += 1;
                    d.fPos += 1;
                    break;
                  case 2:
                    d.oPos += 4;
                    d.iiPos += 2;
                    d.ffPos += 1;
                    d.fPos += 1;
                    break;
                  case 3:
                    d.oPos += 1;
                    break;
                  case 4:
                    d.fPos += 6;
                    break;
                  case 5:
                    d.fPos += 4;
                    break;
                  case 6:
                    d.fPos += 3;
                    break;
                  case 7:
                    d.fPos += 4;
                    break;
                  case 8:
                    d.oPos += 3;
                    break;
                  case 9:
                    d.fPos += 4;
                    break;
                  case 10:
                    d.fPos += 5;
                    d.oPos += 1;
                    break;
                  case 12:
                    d.oPos += 4;
                    break;
                  case 14:
                    d.oPos += 2;
                    d.bPos += 2;
                    break;
                  case 15:
                    d.oPos += 4;
                    d.iiPos += 2;
                    d.ffPos += 1;
                    d.fPos += 1;
                    break;
                  case 16:
                    d.oPos += 4;
                    d.iPos += 1;
                    d.fPos += 2;
                    d.bPos += 1;
                    break;
                  case 17:
                    d.fPos += 2;
                    break;
                  case 18:
                    d.fPos += 2;
                    break;
                  case 19:
                    d.oPos += 1;
                    break;
                  case 20:
                    d.oPos += 1;
                }
                d.prev = ta.BEGIN_SHADER_FILL;
                l = d;
                A.fillCommands.beginShaderFill(l.buffer.o[l.oPos]);
                A.strokeCommands.beginShaderFill(l.buffer.o[l.oPos]);
              } else {
                switch (d.prev._hx_index) {
                  case 0:
                    d.oPos += 2;
                    d.bPos += 2;
                    break;
                  case 1:
                    d.iPos += 1;
                    d.fPos += 1;
                    break;
                  case 2:
                    d.oPos += 4;
                    d.iiPos += 2;
                    d.ffPos += 1;
                    d.fPos += 1;
                    break;
                  case 3:
                    d.oPos += 1;
                    break;
                  case 4:
                    d.fPos += 6;
                    break;
                  case 5:
                    d.fPos += 4;
                    break;
                  case 6:
                    d.fPos += 3;
                    break;
                  case 7:
                    d.fPos += 4;
                    break;
                  case 8:
                    d.oPos += 3;
                    break;
                  case 9:
                    d.fPos += 4;
                    break;
                  case 10:
                    d.fPos += 5;
                    d.oPos += 1;
                    break;
                  case 12:
                    d.oPos += 4;
                    break;
                  case 14:
                    d.oPos += 2;
                    d.bPos += 2;
                    break;
                  case 15:
                    d.oPos += 4;
                    d.iiPos += 2;
                    d.ffPos += 1;
                    d.fPos += 1;
                    break;
                  case 16:
                    d.oPos += 4;
                    d.iPos += 1;
                    d.fPos += 2;
                    d.bPos += 1;
                    break;
                  case 17:
                    d.fPos += 2;
                    break;
                  case 18:
                    d.fPos += 2;
                    break;
                  case 19:
                    d.oPos += 1;
                    break;
                  case 20:
                    d.oPos += 1;
                }
                d.prev = ta.BEGIN_FILL;
                l = d;
                A.fillCommands.beginFill(l.buffer.i[l.iPos], 1);
                A.strokeCommands.beginFill(l.buffer.i[l.iPos], 1);
              }
              break;
            case 4:
              switch (d.prev._hx_index) {
                case 0:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 1:
                  d.iPos += 1;
                  d.fPos += 1;
                  break;
                case 2:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 3:
                  d.oPos += 1;
                  break;
                case 4:
                  d.fPos += 6;
                  break;
                case 5:
                  d.fPos += 4;
                  break;
                case 6:
                  d.fPos += 3;
                  break;
                case 7:
                  d.fPos += 4;
                  break;
                case 8:
                  d.oPos += 3;
                  break;
                case 9:
                  d.fPos += 4;
                  break;
                case 10:
                  d.fPos += 5;
                  d.oPos += 1;
                  break;
                case 12:
                  d.oPos += 4;
                  break;
                case 14:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 15:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 16:
                  d.oPos += 4;
                  d.iPos += 1;
                  d.fPos += 2;
                  d.bPos += 1;
                  break;
                case 17:
                  d.fPos += 2;
                  break;
                case 18:
                  d.fPos += 2;
                  break;
                case 19:
                  d.oPos += 1;
                  break;
                case 20:
                  d.oPos += 1;
              }
              d.prev = ta.CUBIC_CURVE_TO;
              l = d;
              A.fillCommands.cubicCurveTo(
                l.buffer.f[l.fPos],
                l.buffer.f[l.fPos + 1],
                l.buffer.f[l.fPos + 2],
                l.buffer.f[l.fPos + 3],
                l.buffer.f[l.fPos + 4],
                l.buffer.f[l.fPos + 5]
              );
              A.strokeCommands.cubicCurveTo(
                l.buffer.f[l.fPos],
                l.buffer.f[l.fPos + 1],
                l.buffer.f[l.fPos + 2],
                l.buffer.f[l.fPos + 3],
                l.buffer.f[l.fPos + 4],
                l.buffer.f[l.fPos + 5]
              );
              break;
            case 5:
              switch (d.prev._hx_index) {
                case 0:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 1:
                  d.iPos += 1;
                  d.fPos += 1;
                  break;
                case 2:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 3:
                  d.oPos += 1;
                  break;
                case 4:
                  d.fPos += 6;
                  break;
                case 5:
                  d.fPos += 4;
                  break;
                case 6:
                  d.fPos += 3;
                  break;
                case 7:
                  d.fPos += 4;
                  break;
                case 8:
                  d.oPos += 3;
                  break;
                case 9:
                  d.fPos += 4;
                  break;
                case 10:
                  d.fPos += 5;
                  d.oPos += 1;
                  break;
                case 12:
                  d.oPos += 4;
                  break;
                case 14:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 15:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 16:
                  d.oPos += 4;
                  d.iPos += 1;
                  d.fPos += 2;
                  d.bPos += 1;
                  break;
                case 17:
                  d.fPos += 2;
                  break;
                case 18:
                  d.fPos += 2;
                  break;
                case 19:
                  d.oPos += 1;
                  break;
                case 20:
                  d.oPos += 1;
              }
              d.prev = ta.CURVE_TO;
              l = d;
              A.fillCommands.curveTo(
                l.buffer.f[l.fPos],
                l.buffer.f[l.fPos + 1],
                l.buffer.f[l.fPos + 2],
                l.buffer.f[l.fPos + 3]
              );
              A.strokeCommands.curveTo(
                l.buffer.f[l.fPos],
                l.buffer.f[l.fPos + 1],
                l.buffer.f[l.fPos + 2],
                l.buffer.f[l.fPos + 3]
              );
              break;
            case 6:
              switch (d.prev._hx_index) {
                case 0:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 1:
                  d.iPos += 1;
                  d.fPos += 1;
                  break;
                case 2:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 3:
                  d.oPos += 1;
                  break;
                case 4:
                  d.fPos += 6;
                  break;
                case 5:
                  d.fPos += 4;
                  break;
                case 6:
                  d.fPos += 3;
                  break;
                case 7:
                  d.fPos += 4;
                  break;
                case 8:
                  d.oPos += 3;
                  break;
                case 9:
                  d.fPos += 4;
                  break;
                case 10:
                  d.fPos += 5;
                  d.oPos += 1;
                  break;
                case 12:
                  d.oPos += 4;
                  break;
                case 14:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 15:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 16:
                  d.oPos += 4;
                  d.iPos += 1;
                  d.fPos += 2;
                  d.bPos += 1;
                  break;
                case 17:
                  d.fPos += 2;
                  break;
                case 18:
                  d.fPos += 2;
                  break;
                case 19:
                  d.oPos += 1;
                  break;
                case 20:
                  d.oPos += 1;
              }
              d.prev = ta.DRAW_CIRCLE;
              l = d;
              A.fillCommands.drawCircle(
                l.buffer.f[l.fPos],
                l.buffer.f[l.fPos + 1],
                l.buffer.f[l.fPos + 2]
              );
              A.strokeCommands.drawCircle(
                l.buffer.f[l.fPos],
                l.buffer.f[l.fPos + 1],
                l.buffer.f[l.fPos + 2]
              );
              break;
            case 7:
              switch (d.prev._hx_index) {
                case 0:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 1:
                  d.iPos += 1;
                  d.fPos += 1;
                  break;
                case 2:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 3:
                  d.oPos += 1;
                  break;
                case 4:
                  d.fPos += 6;
                  break;
                case 5:
                  d.fPos += 4;
                  break;
                case 6:
                  d.fPos += 3;
                  break;
                case 7:
                  d.fPos += 4;
                  break;
                case 8:
                  d.oPos += 3;
                  break;
                case 9:
                  d.fPos += 4;
                  break;
                case 10:
                  d.fPos += 5;
                  d.oPos += 1;
                  break;
                case 12:
                  d.oPos += 4;
                  break;
                case 14:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 15:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 16:
                  d.oPos += 4;
                  d.iPos += 1;
                  d.fPos += 2;
                  d.bPos += 1;
                  break;
                case 17:
                  d.fPos += 2;
                  break;
                case 18:
                  d.fPos += 2;
                  break;
                case 19:
                  d.oPos += 1;
                  break;
                case 20:
                  d.oPos += 1;
              }
              d.prev = ta.DRAW_ELLIPSE;
              l = d;
              A.fillCommands.drawEllipse(
                l.buffer.f[l.fPos],
                l.buffer.f[l.fPos + 1],
                l.buffer.f[l.fPos + 2],
                l.buffer.f[l.fPos + 3]
              );
              A.strokeCommands.drawEllipse(
                l.buffer.f[l.fPos],
                l.buffer.f[l.fPos + 1],
                l.buffer.f[l.fPos + 2],
                l.buffer.f[l.fPos + 3]
              );
              break;
            case 9:
              switch (d.prev._hx_index) {
                case 0:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 1:
                  d.iPos += 1;
                  d.fPos += 1;
                  break;
                case 2:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 3:
                  d.oPos += 1;
                  break;
                case 4:
                  d.fPos += 6;
                  break;
                case 5:
                  d.fPos += 4;
                  break;
                case 6:
                  d.fPos += 3;
                  break;
                case 7:
                  d.fPos += 4;
                  break;
                case 8:
                  d.oPos += 3;
                  break;
                case 9:
                  d.fPos += 4;
                  break;
                case 10:
                  d.fPos += 5;
                  d.oPos += 1;
                  break;
                case 12:
                  d.oPos += 4;
                  break;
                case 14:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 15:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 16:
                  d.oPos += 4;
                  d.iPos += 1;
                  d.fPos += 2;
                  d.bPos += 1;
                  break;
                case 17:
                  d.fPos += 2;
                  break;
                case 18:
                  d.fPos += 2;
                  break;
                case 19:
                  d.oPos += 1;
                  break;
                case 20:
                  d.oPos += 1;
              }
              d.prev = ta.DRAW_RECT;
              l = d;
              A.fillCommands.drawRect(
                l.buffer.f[l.fPos],
                l.buffer.f[l.fPos + 1],
                l.buffer.f[l.fPos + 2],
                l.buffer.f[l.fPos + 3]
              );
              A.strokeCommands.drawRect(
                l.buffer.f[l.fPos],
                l.buffer.f[l.fPos + 1],
                l.buffer.f[l.fPos + 2],
                l.buffer.f[l.fPos + 3]
              );
              break;
            case 10:
              switch (d.prev._hx_index) {
                case 0:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 1:
                  d.iPos += 1;
                  d.fPos += 1;
                  break;
                case 2:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 3:
                  d.oPos += 1;
                  break;
                case 4:
                  d.fPos += 6;
                  break;
                case 5:
                  d.fPos += 4;
                  break;
                case 6:
                  d.fPos += 3;
                  break;
                case 7:
                  d.fPos += 4;
                  break;
                case 8:
                  d.oPos += 3;
                  break;
                case 9:
                  d.fPos += 4;
                  break;
                case 10:
                  d.fPos += 5;
                  d.oPos += 1;
                  break;
                case 12:
                  d.oPos += 4;
                  break;
                case 14:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 15:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 16:
                  d.oPos += 4;
                  d.iPos += 1;
                  d.fPos += 2;
                  d.bPos += 1;
                  break;
                case 17:
                  d.fPos += 2;
                  break;
                case 18:
                  d.fPos += 2;
                  break;
                case 19:
                  d.oPos += 1;
                  break;
                case 20:
                  d.oPos += 1;
              }
              d.prev = ta.DRAW_ROUND_RECT;
              l = d;
              A.fillCommands.drawRoundRect(
                l.buffer.f[l.fPos],
                l.buffer.f[l.fPos + 1],
                l.buffer.f[l.fPos + 2],
                l.buffer.f[l.fPos + 3],
                l.buffer.f[l.fPos + 4],
                l.buffer.o[l.oPos]
              );
              A.strokeCommands.drawRoundRect(
                l.buffer.f[l.fPos],
                l.buffer.f[l.fPos + 1],
                l.buffer.f[l.fPos + 2],
                l.buffer.f[l.fPos + 3],
                l.buffer.f[l.fPos + 4],
                l.buffer.o[l.oPos]
              );
              break;
            case 13:
              switch (d.prev._hx_index) {
                case 0:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 1:
                  d.iPos += 1;
                  d.fPos += 1;
                  break;
                case 2:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 3:
                  d.oPos += 1;
                  break;
                case 4:
                  d.fPos += 6;
                  break;
                case 5:
                  d.fPos += 4;
                  break;
                case 6:
                  d.fPos += 3;
                  break;
                case 7:
                  d.fPos += 4;
                  break;
                case 8:
                  d.oPos += 3;
                  break;
                case 9:
                  d.fPos += 4;
                  break;
                case 10:
                  d.fPos += 5;
                  d.oPos += 1;
                  break;
                case 12:
                  d.oPos += 4;
                  break;
                case 14:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 15:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 16:
                  d.oPos += 4;
                  d.iPos += 1;
                  d.fPos += 2;
                  d.bPos += 1;
                  break;
                case 17:
                  d.fPos += 2;
                  break;
                case 18:
                  d.fPos += 2;
                  break;
                case 19:
                  d.oPos += 1;
                  break;
                case 20:
                  d.oPos += 1;
              }
              d.prev = ta.END_FILL;
              A.endFill();
              if (A.hasFill && A.context.isPointInPath(b, c, A.windingRule))
                return d.destroy(), (a.__canvas = e), (a.__context = f), !0;
              A.endStroke();
              if (A.hasStroke && A.context.isPointInStroke(b, c))
                return d.destroy(), (a.__canvas = e), (a.__context = f), !0;
              A.hasFill = !1;
              A.bitmapFill = null;
              break;
            case 14:
              switch (d.prev._hx_index) {
                case 0:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 1:
                  d.iPos += 1;
                  d.fPos += 1;
                  break;
                case 2:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 3:
                  d.oPos += 1;
                  break;
                case 4:
                  d.fPos += 6;
                  break;
                case 5:
                  d.fPos += 4;
                  break;
                case 6:
                  d.fPos += 3;
                  break;
                case 7:
                  d.fPos += 4;
                  break;
                case 8:
                  d.oPos += 3;
                  break;
                case 9:
                  d.fPos += 4;
                  break;
                case 10:
                  d.fPos += 5;
                  d.oPos += 1;
                  break;
                case 12:
                  d.oPos += 4;
                  break;
                case 14:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 15:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 16:
                  d.oPos += 4;
                  d.iPos += 1;
                  d.fPos += 2;
                  d.bPos += 1;
                  break;
                case 17:
                  d.fPos += 2;
                  break;
                case 18:
                  d.fPos += 2;
                  break;
                case 19:
                  d.oPos += 1;
                  break;
                case 20:
                  d.oPos += 1;
              }
              d.prev = ta.LINE_BITMAP_STYLE;
              l = d;
              A.strokeCommands.lineBitmapStyle(
                l.buffer.o[l.oPos],
                l.buffer.o[l.oPos + 1],
                l.buffer.b[l.bPos],
                l.buffer.b[l.bPos + 1]
              );
              break;
            case 15:
              switch (d.prev._hx_index) {
                case 0:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 1:
                  d.iPos += 1;
                  d.fPos += 1;
                  break;
                case 2:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 3:
                  d.oPos += 1;
                  break;
                case 4:
                  d.fPos += 6;
                  break;
                case 5:
                  d.fPos += 4;
                  break;
                case 6:
                  d.fPos += 3;
                  break;
                case 7:
                  d.fPos += 4;
                  break;
                case 8:
                  d.oPos += 3;
                  break;
                case 9:
                  d.fPos += 4;
                  break;
                case 10:
                  d.fPos += 5;
                  d.oPos += 1;
                  break;
                case 12:
                  d.oPos += 4;
                  break;
                case 14:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 15:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 16:
                  d.oPos += 4;
                  d.iPos += 1;
                  d.fPos += 2;
                  d.bPos += 1;
                  break;
                case 17:
                  d.fPos += 2;
                  break;
                case 18:
                  d.fPos += 2;
                  break;
                case 19:
                  d.oPos += 1;
                  break;
                case 20:
                  d.oPos += 1;
              }
              d.prev = ta.LINE_GRADIENT_STYLE;
              l = d;
              A.strokeCommands.lineGradientStyle(
                l.buffer.o[l.oPos],
                l.buffer.ii[l.iiPos],
                l.buffer.ff[l.ffPos],
                l.buffer.ii[l.iiPos + 1],
                l.buffer.o[l.oPos + 1],
                l.buffer.o[l.oPos + 2],
                l.buffer.o[l.oPos + 3],
                l.buffer.f[l.fPos]
              );
              break;
            case 16:
              switch (d.prev._hx_index) {
                case 0:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 1:
                  d.iPos += 1;
                  d.fPos += 1;
                  break;
                case 2:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 3:
                  d.oPos += 1;
                  break;
                case 4:
                  d.fPos += 6;
                  break;
                case 5:
                  d.fPos += 4;
                  break;
                case 6:
                  d.fPos += 3;
                  break;
                case 7:
                  d.fPos += 4;
                  break;
                case 8:
                  d.oPos += 3;
                  break;
                case 9:
                  d.fPos += 4;
                  break;
                case 10:
                  d.fPos += 5;
                  d.oPos += 1;
                  break;
                case 12:
                  d.oPos += 4;
                  break;
                case 14:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 15:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 16:
                  d.oPos += 4;
                  d.iPos += 1;
                  d.fPos += 2;
                  d.bPos += 1;
                  break;
                case 17:
                  d.fPos += 2;
                  break;
                case 18:
                  d.fPos += 2;
                  break;
                case 19:
                  d.oPos += 1;
                  break;
                case 20:
                  d.oPos += 1;
              }
              d.prev = ta.LINE_STYLE;
              l = d;
              A.strokeCommands.lineStyle(
                l.buffer.o[l.oPos],
                l.buffer.i[l.iPos],
                1,
                l.buffer.b[l.bPos],
                l.buffer.o[l.oPos + 1],
                l.buffer.o[l.oPos + 2],
                l.buffer.o[l.oPos + 3],
                l.buffer.f[l.fPos + 1]
              );
              break;
            case 17:
              switch (d.prev._hx_index) {
                case 0:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 1:
                  d.iPos += 1;
                  d.fPos += 1;
                  break;
                case 2:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 3:
                  d.oPos += 1;
                  break;
                case 4:
                  d.fPos += 6;
                  break;
                case 5:
                  d.fPos += 4;
                  break;
                case 6:
                  d.fPos += 3;
                  break;
                case 7:
                  d.fPos += 4;
                  break;
                case 8:
                  d.oPos += 3;
                  break;
                case 9:
                  d.fPos += 4;
                  break;
                case 10:
                  d.fPos += 5;
                  d.oPos += 1;
                  break;
                case 12:
                  d.oPos += 4;
                  break;
                case 14:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 15:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 16:
                  d.oPos += 4;
                  d.iPos += 1;
                  d.fPos += 2;
                  d.bPos += 1;
                  break;
                case 17:
                  d.fPos += 2;
                  break;
                case 18:
                  d.fPos += 2;
                  break;
                case 19:
                  d.oPos += 1;
                  break;
                case 20:
                  d.oPos += 1;
              }
              d.prev = ta.LINE_TO;
              l = d;
              A.fillCommands.lineTo(l.buffer.f[l.fPos], l.buffer.f[l.fPos + 1]);
              A.strokeCommands.lineTo(
                l.buffer.f[l.fPos],
                l.buffer.f[l.fPos + 1]
              );
              break;
            case 18:
              switch (d.prev._hx_index) {
                case 0:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 1:
                  d.iPos += 1;
                  d.fPos += 1;
                  break;
                case 2:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 3:
                  d.oPos += 1;
                  break;
                case 4:
                  d.fPos += 6;
                  break;
                case 5:
                  d.fPos += 4;
                  break;
                case 6:
                  d.fPos += 3;
                  break;
                case 7:
                  d.fPos += 4;
                  break;
                case 8:
                  d.oPos += 3;
                  break;
                case 9:
                  d.fPos += 4;
                  break;
                case 10:
                  d.fPos += 5;
                  d.oPos += 1;
                  break;
                case 12:
                  d.oPos += 4;
                  break;
                case 14:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 15:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 16:
                  d.oPos += 4;
                  d.iPos += 1;
                  d.fPos += 2;
                  d.bPos += 1;
                  break;
                case 17:
                  d.fPos += 2;
                  break;
                case 18:
                  d.fPos += 2;
                  break;
                case 19:
                  d.oPos += 1;
                  break;
                case 20:
                  d.oPos += 1;
              }
              d.prev = ta.MOVE_TO;
              l = d;
              A.fillCommands.moveTo(l.buffer.f[l.fPos], l.buffer.f[l.fPos + 1]);
              A.strokeCommands.moveTo(
                l.buffer.f[l.fPos],
                l.buffer.f[l.fPos + 1]
              );
              break;
            case 21:
              A.windingRule = "evenodd";
              break;
            case 22:
              A.windingRule = "nonzero";
              break;
            default:
              switch (d.prev._hx_index) {
                case 0:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 1:
                  d.iPos += 1;
                  d.fPos += 1;
                  break;
                case 2:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 3:
                  d.oPos += 1;
                  break;
                case 4:
                  d.fPos += 6;
                  break;
                case 5:
                  d.fPos += 4;
                  break;
                case 6:
                  d.fPos += 3;
                  break;
                case 7:
                  d.fPos += 4;
                  break;
                case 8:
                  d.oPos += 3;
                  break;
                case 9:
                  d.fPos += 4;
                  break;
                case 10:
                  d.fPos += 5;
                  d.oPos += 1;
                  break;
                case 12:
                  d.oPos += 4;
                  break;
                case 14:
                  d.oPos += 2;
                  d.bPos += 2;
                  break;
                case 15:
                  d.oPos += 4;
                  d.iiPos += 2;
                  d.ffPos += 1;
                  d.fPos += 1;
                  break;
                case 16:
                  d.oPos += 4;
                  d.iPos += 1;
                  d.fPos += 2;
                  d.bPos += 1;
                  break;
                case 17:
                  d.fPos += 2;
                  break;
                case 18:
                  d.fPos += 2;
                  break;
                case 19:
                  d.oPos += 1;
                  break;
                case 20:
                  d.oPos += 1;
              }
              d.prev = l;
          }
        }
        k = !1;
        0 < A.fillCommands.get_length() && A.endFill();
        A.hasFill && A.context.isPointInPath(b, c, A.windingRule) && (k = !0);
        0 < A.strokeCommands.get_length() && A.endStroke();
        A.hasStroke && A.context.isPointInStroke(b, c) && (k = !0);
        d.destroy();
        a.__canvas = e;
        a.__context = f;
        return k;
      };
      A.normalizeUVT = function (a, b) {
        null == b && (b = !1);
        for (
          var c = -Infinity, d, e = a.get_length(), f = 1, k = e + 1;
          f < k;

        )
          (d = f++),
            (b && 0 == d % 3) || ((d = a.get(d - 1)), c < d && (c = d));
        if (!b) return { max: c, uvt: a };
        var g = ja.toFloatVector(null);
        f = 1;
        for (k = e + 1; f < k; )
          (d = f++), (b && 0 == d % 3) || g.push(a.get(d - 1));
        return { max: c, uvt: g };
      };
      A.playCommands = function (a, b) {
        null == b && (b = !1);
        A.bounds = A.graphics.__bounds;
        var c = A.bounds.x,
          d = A.bounds.y,
          e = 0,
          f = 0,
          k = !1,
          g = 0,
          l = 0,
          h = !1;
        A.windingRule = "evenodd";
        A.setSmoothing(!0);
        var p = !1,
          m = new ig(a),
          n,
          q,
          z,
          t = null,
          w = null,
          x = 0,
          D = a.types;
        a: for (; x < D.length; ) {
          var y = D[x];
          ++x;
          switch (y._hx_index) {
            case 0:
              switch (m.prev._hx_index) {
                case 0:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 1:
                  m.iPos += 1;
                  m.fPos += 1;
                  break;
                case 2:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 3:
                  m.oPos += 1;
                  break;
                case 4:
                  m.fPos += 6;
                  break;
                case 5:
                  m.fPos += 4;
                  break;
                case 6:
                  m.fPos += 3;
                  break;
                case 7:
                  m.fPos += 4;
                  break;
                case 8:
                  m.oPos += 3;
                  break;
                case 9:
                  m.fPos += 4;
                  break;
                case 10:
                  m.fPos += 5;
                  m.oPos += 1;
                  break;
                case 12:
                  m.oPos += 4;
                  break;
                case 14:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 15:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 16:
                  m.oPos += 4;
                  m.iPos += 1;
                  m.fPos += 2;
                  m.bPos += 1;
                  break;
                case 17:
                  m.fPos += 2;
                  break;
                case 18:
                  m.fPos += 2;
                  break;
                case 19:
                  m.oPos += 1;
                  break;
                case 20:
                  m.oPos += 1;
              }
              m.prev = ta.BEGIN_BITMAP_FILL;
              var C = m;
              A.bitmapFill = C.buffer.o[C.oPos];
              A.context.fillStyle = A.createBitmapFill(
                C.buffer.o[C.oPos],
                C.buffer.b[C.bPos],
                C.buffer.b[C.bPos + 1]
              );
              A.hasFill = !0;
              null != C.buffer.o[C.oPos + 1]
                ? ((A.pendingMatrix = C.buffer.o[C.oPos + 1]),
                  (A.inversePendingMatrix = C.buffer.o[C.oPos + 1].clone()),
                  A.inversePendingMatrix.invert())
                : ((A.pendingMatrix = null), (A.inversePendingMatrix = null));
              break;
            case 1:
              switch (m.prev._hx_index) {
                case 0:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 1:
                  m.iPos += 1;
                  m.fPos += 1;
                  break;
                case 2:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 3:
                  m.oPos += 1;
                  break;
                case 4:
                  m.fPos += 6;
                  break;
                case 5:
                  m.fPos += 4;
                  break;
                case 6:
                  m.fPos += 3;
                  break;
                case 7:
                  m.fPos += 4;
                  break;
                case 8:
                  m.oPos += 3;
                  break;
                case 9:
                  m.fPos += 4;
                  break;
                case 10:
                  m.fPos += 5;
                  m.oPos += 1;
                  break;
                case 12:
                  m.oPos += 4;
                  break;
                case 14:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 15:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 16:
                  m.oPos += 4;
                  m.iPos += 1;
                  m.fPos += 2;
                  m.bPos += 1;
                  break;
                case 17:
                  m.fPos += 2;
                  break;
                case 18:
                  m.fPos += 2;
                  break;
                case 19:
                  m.oPos += 1;
                  break;
                case 20:
                  m.oPos += 1;
              }
              m.prev = ta.BEGIN_FILL;
              var E = m;
              if (0.005 > E.buffer.f[E.fPos]) A.hasFill = !1;
              else {
                if (1 == E.buffer.f[E.fPos]) {
                  var F = K.hex(E.buffer.i[E.iPos] & 16777215, 6);
                  A.context.fillStyle = "#" + F;
                } else {
                  var B = (E.buffer.i[E.iPos] & 16711680) >>> 16;
                  var G = (E.buffer.i[E.iPos] & 65280) >>> 8;
                  var v = E.buffer.i[E.iPos] & 255;
                  A.context.fillStyle =
                    "rgba(" +
                    B +
                    ", " +
                    G +
                    ", " +
                    v +
                    ", " +
                    E.buffer.f[E.fPos] +
                    ")";
                }
                A.bitmapFill = null;
                A.setSmoothing(!0);
                A.hasFill = !0;
              }
              break;
            case 2:
              switch (m.prev._hx_index) {
                case 0:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 1:
                  m.iPos += 1;
                  m.fPos += 1;
                  break;
                case 2:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 3:
                  m.oPos += 1;
                  break;
                case 4:
                  m.fPos += 6;
                  break;
                case 5:
                  m.fPos += 4;
                  break;
                case 6:
                  m.fPos += 3;
                  break;
                case 7:
                  m.fPos += 4;
                  break;
                case 8:
                  m.oPos += 3;
                  break;
                case 9:
                  m.fPos += 4;
                  break;
                case 10:
                  m.fPos += 5;
                  m.oPos += 1;
                  break;
                case 12:
                  m.oPos += 4;
                  break;
                case 14:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 15:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 16:
                  m.oPos += 4;
                  m.iPos += 1;
                  m.fPos += 2;
                  m.bPos += 1;
                  break;
                case 17:
                  m.fPos += 2;
                  break;
                case 18:
                  m.fPos += 2;
                  break;
                case 19:
                  m.oPos += 1;
                  break;
                case 20:
                  m.oPos += 1;
              }
              m.prev = ta.BEGIN_GRADIENT_FILL;
              var I = m;
              A.context.fillStyle = A.createGradientPattern(
                I.buffer.o[I.oPos],
                I.buffer.ii[I.iiPos],
                I.buffer.ff[I.ffPos],
                I.buffer.ii[I.iiPos + 1],
                I.buffer.o[I.oPos + 1],
                I.buffer.o[I.oPos + 2],
                I.buffer.o[I.oPos + 3],
                I.buffer.f[I.fPos]
              );
              A.bitmapFill = null;
              A.setSmoothing(!0);
              A.hasFill = !0;
              break;
            case 3:
              switch (m.prev._hx_index) {
                case 0:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 1:
                  m.iPos += 1;
                  m.fPos += 1;
                  break;
                case 2:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 3:
                  m.oPos += 1;
                  break;
                case 4:
                  m.fPos += 6;
                  break;
                case 5:
                  m.fPos += 4;
                  break;
                case 6:
                  m.fPos += 3;
                  break;
                case 7:
                  m.fPos += 4;
                  break;
                case 8:
                  m.oPos += 3;
                  break;
                case 9:
                  m.fPos += 4;
                  break;
                case 10:
                  m.fPos += 5;
                  m.oPos += 1;
                  break;
                case 12:
                  m.oPos += 4;
                  break;
                case 14:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 15:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 16:
                  m.oPos += 4;
                  m.iPos += 1;
                  m.fPos += 2;
                  m.bPos += 1;
                  break;
                case 17:
                  m.fPos += 2;
                  break;
                case 18:
                  m.fPos += 2;
                  break;
                case 19:
                  m.oPos += 1;
                  break;
                case 20:
                  m.oPos += 1;
              }
              m.prev = ta.BEGIN_SHADER_FILL;
              var U = m,
                Z = U.buffer.o[U.oPos];
              0 < Z.inputCount &&
                ((A.bitmapFill = Z.inputs[0]),
                (A.context.fillStyle = A.createBitmapFill(
                  A.bitmapFill,
                  0 != Z.inputWrap[0],
                  5 != Z.inputFilter[0]
                )),
                (A.hasFill = !0),
                (A.pendingMatrix = null),
                (A.inversePendingMatrix = null));
              break;
            case 4:
              switch (m.prev._hx_index) {
                case 0:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 1:
                  m.iPos += 1;
                  m.fPos += 1;
                  break;
                case 2:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 3:
                  m.oPos += 1;
                  break;
                case 4:
                  m.fPos += 6;
                  break;
                case 5:
                  m.fPos += 4;
                  break;
                case 6:
                  m.fPos += 3;
                  break;
                case 7:
                  m.fPos += 4;
                  break;
                case 8:
                  m.oPos += 3;
                  break;
                case 9:
                  m.fPos += 4;
                  break;
                case 10:
                  m.fPos += 5;
                  m.oPos += 1;
                  break;
                case 12:
                  m.oPos += 4;
                  break;
                case 14:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 15:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 16:
                  m.oPos += 4;
                  m.iPos += 1;
                  m.fPos += 2;
                  m.bPos += 1;
                  break;
                case 17:
                  m.fPos += 2;
                  break;
                case 18:
                  m.fPos += 2;
                  break;
                case 19:
                  m.oPos += 1;
                  break;
                case 20:
                  m.oPos += 1;
              }
              m.prev = ta.CUBIC_CURVE_TO;
              var O = m;
              p = !0;
              A.context.bezierCurveTo(
                O.buffer.f[O.fPos] - c,
                O.buffer.f[O.fPos + 1] - d,
                O.buffer.f[O.fPos + 2] - c,
                O.buffer.f[O.fPos + 3] - d,
                O.buffer.f[O.fPos + 4] - c,
                O.buffer.f[O.fPos + 5] - d
              );
              break;
            case 5:
              switch (m.prev._hx_index) {
                case 0:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 1:
                  m.iPos += 1;
                  m.fPos += 1;
                  break;
                case 2:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 3:
                  m.oPos += 1;
                  break;
                case 4:
                  m.fPos += 6;
                  break;
                case 5:
                  m.fPos += 4;
                  break;
                case 6:
                  m.fPos += 3;
                  break;
                case 7:
                  m.fPos += 4;
                  break;
                case 8:
                  m.oPos += 3;
                  break;
                case 9:
                  m.fPos += 4;
                  break;
                case 10:
                  m.fPos += 5;
                  m.oPos += 1;
                  break;
                case 12:
                  m.oPos += 4;
                  break;
                case 14:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 15:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 16:
                  m.oPos += 4;
                  m.iPos += 1;
                  m.fPos += 2;
                  m.bPos += 1;
                  break;
                case 17:
                  m.fPos += 2;
                  break;
                case 18:
                  m.fPos += 2;
                  break;
                case 19:
                  m.oPos += 1;
                  break;
                case 20:
                  m.oPos += 1;
              }
              m.prev = ta.CURVE_TO;
              var M = m;
              p = !0;
              A.context.quadraticCurveTo(
                M.buffer.f[M.fPos] - c,
                M.buffer.f[M.fPos + 1] - d,
                M.buffer.f[M.fPos + 2] - c,
                M.buffer.f[M.fPos + 3] - d
              );
              break;
            case 6:
              switch (m.prev._hx_index) {
                case 0:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 1:
                  m.iPos += 1;
                  m.fPos += 1;
                  break;
                case 2:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 3:
                  m.oPos += 1;
                  break;
                case 4:
                  m.fPos += 6;
                  break;
                case 5:
                  m.fPos += 4;
                  break;
                case 6:
                  m.fPos += 3;
                  break;
                case 7:
                  m.fPos += 4;
                  break;
                case 8:
                  m.oPos += 3;
                  break;
                case 9:
                  m.fPos += 4;
                  break;
                case 10:
                  m.fPos += 5;
                  m.oPos += 1;
                  break;
                case 12:
                  m.oPos += 4;
                  break;
                case 14:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 15:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 16:
                  m.oPos += 4;
                  m.iPos += 1;
                  m.fPos += 2;
                  m.bPos += 1;
                  break;
                case 17:
                  m.fPos += 2;
                  break;
                case 18:
                  m.fPos += 2;
                  break;
                case 19:
                  m.oPos += 1;
                  break;
                case 20:
                  m.oPos += 1;
              }
              m.prev = ta.DRAW_CIRCLE;
              var N = m;
              p = !0;
              A.context.moveTo(
                N.buffer.f[N.fPos] - c + N.buffer.f[N.fPos + 2],
                N.buffer.f[N.fPos + 1] - d
              );
              A.context.arc(
                N.buffer.f[N.fPos] - c,
                N.buffer.f[N.fPos + 1] - d,
                N.buffer.f[N.fPos + 2],
                0,
                2 * Math.PI,
                !0
              );
              break;
            case 7:
              switch (m.prev._hx_index) {
                case 0:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 1:
                  m.iPos += 1;
                  m.fPos += 1;
                  break;
                case 2:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 3:
                  m.oPos += 1;
                  break;
                case 4:
                  m.fPos += 6;
                  break;
                case 5:
                  m.fPos += 4;
                  break;
                case 6:
                  m.fPos += 3;
                  break;
                case 7:
                  m.fPos += 4;
                  break;
                case 8:
                  m.oPos += 3;
                  break;
                case 9:
                  m.fPos += 4;
                  break;
                case 10:
                  m.fPos += 5;
                  m.oPos += 1;
                  break;
                case 12:
                  m.oPos += 4;
                  break;
                case 14:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 15:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 16:
                  m.oPos += 4;
                  m.iPos += 1;
                  m.fPos += 2;
                  m.bPos += 1;
                  break;
                case 17:
                  m.fPos += 2;
                  break;
                case 18:
                  m.fPos += 2;
                  break;
                case 19:
                  m.oPos += 1;
                  break;
                case 20:
                  m.oPos += 1;
              }
              m.prev = ta.DRAW_ELLIPSE;
              var Ha = m;
              p = !0;
              var P = Ha.buffer.f[Ha.fPos];
              var H = Ha.buffer.f[Ha.fPos + 1];
              var S = Ha.buffer.f[Ha.fPos + 2];
              var L = Ha.buffer.f[Ha.fPos + 3];
              P -= c;
              H -= d;
              var Rb = (S / 2) * 0.5522848;
              var T = (L / 2) * 0.5522848;
              var Q = P + S;
              var X = H + L;
              var Pb = P + S / 2;
              var V = H + L / 2;
              A.context.moveTo(P, V);
              A.context.bezierCurveTo(P, V - T, Pb - Rb, H, Pb, H);
              A.context.bezierCurveTo(Pb + Rb, H, Q, V - T, Q, V);
              A.context.bezierCurveTo(Q, V + T, Pb + Rb, X, Pb, X);
              A.context.bezierCurveTo(Pb - Rb, X, P, V + T, P, V);
              break;
            case 8:
              switch (m.prev._hx_index) {
                case 0:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 1:
                  m.iPos += 1;
                  m.fPos += 1;
                  break;
                case 2:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 3:
                  m.oPos += 1;
                  break;
                case 4:
                  m.fPos += 6;
                  break;
                case 5:
                  m.fPos += 4;
                  break;
                case 6:
                  m.fPos += 3;
                  break;
                case 7:
                  m.fPos += 4;
                  break;
                case 8:
                  m.oPos += 3;
                  break;
                case 9:
                  m.fPos += 4;
                  break;
                case 10:
                  m.fPos += 5;
                  m.oPos += 1;
                  break;
                case 12:
                  m.oPos += 4;
                  break;
                case 14:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 15:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 16:
                  m.oPos += 4;
                  m.iPos += 1;
                  m.fPos += 2;
                  m.bPos += 1;
                  break;
                case 17:
                  m.fPos += 2;
                  break;
                case 18:
                  m.fPos += 2;
                  break;
                case 19:
                  m.oPos += 1;
                  break;
                case 20:
                  m.oPos += 1;
              }
              m.prev = ta.DRAW_QUADS;
              var Y = m,
                W = Y.buffer.o[Y.oPos],
                da = Y.buffer.o[Y.oPos + 1],
                R = Y.buffer.o[Y.oPos + 2],
                ea = null != da,
                ca = !1,
                fa = !1,
                ia = ea ? da.get_length() : Math.floor(W.get_length() / 4);
              if (0 == ia) return;
              null != R &&
                (R.get_length() >= 6 * ia
                  ? (fa = ca = !0)
                  : R.get_length() >= 4 * ia
                  ? (ca = !0)
                  : R.get_length() >= 2 * ia && (fa = !0));
              var hb = ha.__pool.get(),
                ba = xa.__pool.get(),
                la = A.graphics.__renderTransform;
              A.context.save();
              for (var na = 0, oa = ia; na < oa; ) {
                var ka = na++;
                var mg = ea ? 4 * da.get(ka) : 4 * ka;
                if (
                  !(
                    0 > mg ||
                    (hb.setTo(
                      W.get(mg),
                      W.get(mg + 1),
                      W.get(mg + 2),
                      W.get(mg + 3)
                    ),
                    0 >= hb.width || 0 >= hb.height)
                  )
                ) {
                  if (ca && fa) {
                    var Rc = 6 * ka;
                    ba.setTo(
                      R.get(Rc),
                      R.get(Rc + 1),
                      R.get(Rc + 2),
                      R.get(Rc + 3),
                      R.get(Rc + 4),
                      R.get(Rc + 5)
                    );
                  } else
                    ca
                      ? ((Rc = 4 * ka),
                        ba.setTo(
                          R.get(Rc),
                          R.get(Rc + 1),
                          R.get(Rc + 2),
                          R.get(Rc + 3),
                          hb.x,
                          hb.y
                        ))
                      : fa
                      ? ((Rc = 2 * ka),
                        (ba.tx = R.get(Rc)),
                        (ba.ty = R.get(Rc + 1)))
                      : ((ba.tx = hb.x), (ba.ty = hb.y));
                  ba.tx += e - c;
                  ba.ty += f - d;
                  ba.concat(la);
                  A.context.setTransform(ba.a, ba.b, ba.c, ba.d, ba.tx, ba.ty);
                  null != A.bitmapFill
                    ? A.context.drawImage(
                        A.bitmapFill.image.get_src(),
                        hb.x,
                        hb.y,
                        hb.width,
                        hb.height,
                        0,
                        0,
                        hb.width,
                        hb.height
                      )
                    : A.context.fillRect(0, 0, hb.width, hb.height);
                }
              }
              ha.__pool.release(hb);
              xa.__pool.release(ba);
              A.context.restore();
              break;
            case 9:
              switch (m.prev._hx_index) {
                case 0:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 1:
                  m.iPos += 1;
                  m.fPos += 1;
                  break;
                case 2:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 3:
                  m.oPos += 1;
                  break;
                case 4:
                  m.fPos += 6;
                  break;
                case 5:
                  m.fPos += 4;
                  break;
                case 6:
                  m.fPos += 3;
                  break;
                case 7:
                  m.fPos += 4;
                  break;
                case 8:
                  m.oPos += 3;
                  break;
                case 9:
                  m.fPos += 4;
                  break;
                case 10:
                  m.fPos += 5;
                  m.oPos += 1;
                  break;
                case 12:
                  m.oPos += 4;
                  break;
                case 14:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 15:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 16:
                  m.oPos += 4;
                  m.iPos += 1;
                  m.fPos += 2;
                  m.bPos += 1;
                  break;
                case 17:
                  m.fPos += 2;
                  break;
                case 18:
                  m.fPos += 2;
                  break;
                case 19:
                  m.oPos += 1;
                  break;
                case 20:
                  m.oPos += 1;
              }
              m.prev = ta.DRAW_RECT;
              var aa = m;
              var qa = !1;
              if (null != A.bitmapFill && !A.hitTesting) {
                var pa = (z = q = n = 0);
                var Ga = !0;
                if (null != A.pendingMatrix)
                  if (0 != A.pendingMatrix.b || 0 != A.pendingMatrix.c) Ga = !1;
                  else {
                    null == t && (t = gb.__pool.get());
                    null == w && (w = gb.__pool.get());
                    t.setTo(aa.buffer.f[aa.fPos], aa.buffer.f[aa.fPos + 1]);
                    var ma = A.inversePendingMatrix,
                      sa = t.x,
                      Fa = t.y;
                    t.x = sa * ma.a + Fa * ma.c + ma.tx;
                    t.y = sa * ma.b + Fa * ma.d + ma.ty;
                    w.setTo(
                      aa.buffer.f[aa.fPos] + aa.buffer.f[aa.fPos + 2],
                      aa.buffer.f[aa.fPos + 1] + aa.buffer.f[aa.fPos + 3]
                    );
                    var pb = A.inversePendingMatrix,
                      va = w.x,
                      qf = w.y;
                    w.x = va * pb.a + qf * pb.c + pb.tx;
                    w.y = va * pb.b + qf * pb.d + pb.ty;
                    n = t.y;
                    pa = t.x;
                    z = w.y;
                    q = w.x;
                  }
                else
                  (n = aa.buffer.f[aa.fPos + 1]),
                    (pa = aa.buffer.f[aa.fPos]),
                    (z = aa.buffer.f[aa.fPos + 1] + aa.buffer.f[aa.fPos + 3]),
                    (q = aa.buffer.f[aa.fPos] + aa.buffer.f[aa.fPos + 2]);
                Ga &&
                  0 <= n &&
                  0 <= pa &&
                  q <= A.bitmapFill.width &&
                  z <= A.bitmapFill.height &&
                  ((qa = !0),
                  A.hitTesting ||
                    A.context.drawImage(
                      A.bitmapFill.image.get_src(),
                      pa,
                      n,
                      q - pa,
                      z - n,
                      aa.buffer.f[aa.fPos] - c,
                      aa.buffer.f[aa.fPos + 1] - d,
                      aa.buffer.f[aa.fPos + 2],
                      aa.buffer.f[aa.fPos + 3]
                    ));
              }
              qa ||
                ((p = !0),
                A.context.rect(
                  aa.buffer.f[aa.fPos] - c,
                  aa.buffer.f[aa.fPos + 1] - d,
                  aa.buffer.f[aa.fPos + 2],
                  aa.buffer.f[aa.fPos + 3]
                ));
              break;
            case 10:
              switch (m.prev._hx_index) {
                case 0:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 1:
                  m.iPos += 1;
                  m.fPos += 1;
                  break;
                case 2:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 3:
                  m.oPos += 1;
                  break;
                case 4:
                  m.fPos += 6;
                  break;
                case 5:
                  m.fPos += 4;
                  break;
                case 6:
                  m.fPos += 3;
                  break;
                case 7:
                  m.fPos += 4;
                  break;
                case 8:
                  m.oPos += 3;
                  break;
                case 9:
                  m.fPos += 4;
                  break;
                case 10:
                  m.fPos += 5;
                  m.oPos += 1;
                  break;
                case 12:
                  m.oPos += 4;
                  break;
                case 14:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 15:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 16:
                  m.oPos += 4;
                  m.iPos += 1;
                  m.fPos += 2;
                  m.bPos += 1;
                  break;
                case 17:
                  m.fPos += 2;
                  break;
                case 18:
                  m.fPos += 2;
                  break;
                case 19:
                  m.oPos += 1;
                  break;
                case 20:
                  m.oPos += 1;
              }
              m.prev = ta.DRAW_ROUND_RECT;
              var ra = m;
              p = !0;
              A.drawRoundRect(
                ra.buffer.f[ra.fPos] - c,
                ra.buffer.f[ra.fPos + 1] - d,
                ra.buffer.f[ra.fPos + 2],
                ra.buffer.f[ra.fPos + 3],
                ra.buffer.f[ra.fPos + 4],
                ra.buffer.o[ra.oPos]
              );
              break;
            case 12:
              switch (m.prev._hx_index) {
                case 0:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 1:
                  m.iPos += 1;
                  m.fPos += 1;
                  break;
                case 2:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 3:
                  m.oPos += 1;
                  break;
                case 4:
                  m.fPos += 6;
                  break;
                case 5:
                  m.fPos += 4;
                  break;
                case 6:
                  m.fPos += 3;
                  break;
                case 7:
                  m.fPos += 4;
                  break;
                case 8:
                  m.oPos += 3;
                  break;
                case 9:
                  m.fPos += 4;
                  break;
                case 10:
                  m.fPos += 5;
                  m.oPos += 1;
                  break;
                case 12:
                  m.oPos += 4;
                  break;
                case 14:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 15:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 16:
                  m.oPos += 4;
                  m.iPos += 1;
                  m.fPos += 2;
                  m.bPos += 1;
                  break;
                case 17:
                  m.fPos += 2;
                  break;
                case 18:
                  m.fPos += 2;
                  break;
                case 19:
                  m.oPos += 1;
                  break;
                case 20:
                  m.oPos += 1;
              }
              m.prev = ta.DRAW_TRIANGLES;
              var Ca = m,
                wa = Ca.buffer.o[Ca.oPos],
                Hc = Ca.buffer.o[Ca.oPos + 1],
                ua = Ca.buffer.o[Ca.oPos + 2],
                $a = null,
                ya = null == A.bitmapFill;
              if (ya && null != ua) break a;
              if (!ya) {
                if (null == ua) {
                  ua = ja.toFloatVector(null);
                  for (var za = 0, Aa = (wa.get_length() / 2) | 0; za < Aa; ) {
                    var Ba = za++;
                    ua.push(wa.get(2 * Ba) - c / A.bitmapFill.width);
                    ua.push(wa.get(2 * Ba + 1) - d / A.bitmapFill.height);
                  }
                }
                var Da = ua.get_length() != wa.get_length(),
                  Ia = A.normalizeUVT(ua, Da),
                  Fb = Ia.max;
                ua = Ia.uvt;
                $a =
                  1 < Fb
                    ? A.createTempPatternCanvas(
                        A.bitmapFill,
                        A.bitmapRepeat,
                        A.bounds.width | 0,
                        A.bounds.height | 0
                      )
                    : A.createTempPatternCanvas(
                        A.bitmapFill,
                        A.bitmapRepeat,
                        A.bitmapFill.width,
                        A.bitmapFill.height
                      );
              }
              for (
                var Ea = 0,
                  Ja = Hc.get_length(),
                  ib,
                  ph,
                  cc,
                  Na,
                  Ra,
                  Sa,
                  Ta,
                  Ua,
                  Va,
                  Ka,
                  Oa,
                  Ma,
                  Pa,
                  Qa,
                  Wa,
                  ab,
                  cb,
                  Xa,
                  Ya,
                  Za,
                  bb,
                  eb,
                  kb,
                  lb,
                  mb,
                  yc,
                  Oc,
                  ob;
                Ea < Ja;

              ) {
                ib = Ea;
                ph = Ea + 1;
                cc = Ea + 2;
                Na = 2 * Hc.get(ib);
                Ra = 2 * Hc.get(ib) + 1;
                Sa = 2 * Hc.get(ph);
                Ta = 2 * Hc.get(ph) + 1;
                Ua = 2 * Hc.get(cc);
                Va = 2 * Hc.get(cc) + 1;
                Ka = wa.get(Na) - c;
                Oa = wa.get(Ra) - d;
                Ma = wa.get(Sa) - c;
                Pa = wa.get(Ta) - d;
                Qa = wa.get(Ua) - c;
                Wa = wa.get(Va) - d;
                switch (Ca.buffer.o[Ca.oPos + 3]) {
                  case 0:
                    if (0 > (Ma - Ka) * (Wa - Oa) - (Pa - Oa) * (Qa - Ka)) {
                      Ea += 3;
                      continue;
                    }
                    break;
                  case 2:
                    if (!(0 > (Ma - Ka) * (Wa - Oa) - (Pa - Oa) * (Qa - Ka))) {
                      Ea += 3;
                      continue;
                    }
                }
                ya
                  ? (A.context.beginPath(),
                    A.context.moveTo(Ka, Oa),
                    A.context.lineTo(Ma, Pa),
                    A.context.lineTo(Qa, Wa),
                    A.context.closePath(),
                    A.hitTesting || A.context.fill(A.windingRule),
                    (Ea += 3))
                  : ((ab = ua.get(Na) * $a.width),
                    (Xa = ua.get(Sa) * $a.width),
                    (Za = ua.get(Ua) * $a.width),
                    (cb = ua.get(Ra) * $a.height),
                    (Ya = ua.get(Ta) * $a.height),
                    (bb = ua.get(Va) * $a.height),
                    (eb = ab * (bb - Ya) - Xa * bb + Za * Ya + (Xa - Za) * cb),
                    0 == eb
                      ? ((Ea += 3), A.context.restore())
                      : (A.context.save(),
                        A.context.beginPath(),
                        A.context.moveTo(Ka, Oa),
                        A.context.lineTo(Ma, Pa),
                        A.context.lineTo(Qa, Wa),
                        A.context.closePath(),
                        A.context.clip(),
                        (kb =
                          -(
                            cb * (Qa - Ma) -
                            Ya * Qa +
                            bb * Ma +
                            (Ya - bb) * Ka
                          ) / eb),
                        (lb =
                          (Ya * Wa +
                            cb * (Pa - Wa) -
                            bb * Pa +
                            (bb - Ya) * Oa) /
                          eb),
                        (mb =
                          (ab * (Qa - Ma) -
                            Xa * Qa +
                            Za * Ma +
                            (Xa - Za) * Ka) /
                          eb),
                        (yc =
                          -(
                            Xa * Wa +
                            ab * (Pa - Wa) -
                            Za * Pa +
                            (Za - Xa) * Oa
                          ) / eb),
                        (Oc =
                          (ab * (bb * Ma - Ya * Qa) +
                            cb * (Xa * Qa - Za * Ma) +
                            (Za * Ya - Xa * bb) * Ka) /
                          eb),
                        (ob =
                          (ab * (bb * Pa - Ya * Wa) +
                            cb * (Xa * Wa - Za * Pa) +
                            (Za * Ya - Xa * bb) * Oa) /
                          eb),
                        A.context.transform(kb, lb, mb, yc, Oc, ob),
                        A.context.drawImage($a, 0, 0, $a.width, $a.height),
                        A.context.restore(),
                        (Ea += 3)));
              }
              break;
            case 14:
              switch (m.prev._hx_index) {
                case 0:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 1:
                  m.iPos += 1;
                  m.fPos += 1;
                  break;
                case 2:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 3:
                  m.oPos += 1;
                  break;
                case 4:
                  m.fPos += 6;
                  break;
                case 5:
                  m.fPos += 4;
                  break;
                case 6:
                  m.fPos += 3;
                  break;
                case 7:
                  m.fPos += 4;
                  break;
                case 8:
                  m.oPos += 3;
                  break;
                case 9:
                  m.fPos += 4;
                  break;
                case 10:
                  m.fPos += 5;
                  m.oPos += 1;
                  break;
                case 12:
                  m.oPos += 4;
                  break;
                case 14:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 15:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 16:
                  m.oPos += 4;
                  m.iPos += 1;
                  m.fPos += 2;
                  m.bPos += 1;
                  break;
                case 17:
                  m.fPos += 2;
                  break;
                case 18:
                  m.fPos += 2;
                  break;
                case 19:
                  m.oPos += 1;
                  break;
                case 20:
                  m.oPos += 1;
              }
              m.prev = ta.LINE_BITMAP_STYLE;
              var jb = m;
              b && A.hasStroke && A.closePath(!0);
              A.context.moveTo(e - c, f - d);
              A.context.strokeStyle = A.createBitmapFill(
                jb.buffer.o[jb.oPos],
                jb.buffer.b[jb.bPos],
                jb.buffer.b[jb.bPos + 1]
              );
              A.hasStroke = !0;
              break;
            case 15:
              switch (m.prev._hx_index) {
                case 0:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 1:
                  m.iPos += 1;
                  m.fPos += 1;
                  break;
                case 2:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 3:
                  m.oPos += 1;
                  break;
                case 4:
                  m.fPos += 6;
                  break;
                case 5:
                  m.fPos += 4;
                  break;
                case 6:
                  m.fPos += 3;
                  break;
                case 7:
                  m.fPos += 4;
                  break;
                case 8:
                  m.oPos += 3;
                  break;
                case 9:
                  m.fPos += 4;
                  break;
                case 10:
                  m.fPos += 5;
                  m.oPos += 1;
                  break;
                case 12:
                  m.oPos += 4;
                  break;
                case 14:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 15:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 16:
                  m.oPos += 4;
                  m.iPos += 1;
                  m.fPos += 2;
                  m.bPos += 1;
                  break;
                case 17:
                  m.fPos += 2;
                  break;
                case 18:
                  m.fPos += 2;
                  break;
                case 19:
                  m.oPos += 1;
                  break;
                case 20:
                  m.oPos += 1;
              }
              m.prev = ta.LINE_GRADIENT_STYLE;
              var db = m;
              b && A.hasStroke && A.closePath(!0);
              A.context.moveTo(e - c, f - d);
              A.context.strokeStyle = A.createGradientPattern(
                db.buffer.o[db.oPos],
                db.buffer.ii[db.iiPos],
                db.buffer.ff[db.ffPos],
                db.buffer.ii[db.iiPos + 1],
                db.buffer.o[db.oPos + 1],
                db.buffer.o[db.oPos + 2],
                db.buffer.o[db.oPos + 3],
                db.buffer.f[db.fPos]
              );
              A.setSmoothing(!0);
              A.hasStroke = !0;
              break;
            case 16:
              switch (m.prev._hx_index) {
                case 0:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 1:
                  m.iPos += 1;
                  m.fPos += 1;
                  break;
                case 2:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 3:
                  m.oPos += 1;
                  break;
                case 4:
                  m.fPos += 6;
                  break;
                case 5:
                  m.fPos += 4;
                  break;
                case 6:
                  m.fPos += 3;
                  break;
                case 7:
                  m.fPos += 4;
                  break;
                case 8:
                  m.oPos += 3;
                  break;
                case 9:
                  m.fPos += 4;
                  break;
                case 10:
                  m.fPos += 5;
                  m.oPos += 1;
                  break;
                case 12:
                  m.oPos += 4;
                  break;
                case 14:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 15:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 16:
                  m.oPos += 4;
                  m.iPos += 1;
                  m.fPos += 2;
                  m.bPos += 1;
                  break;
                case 17:
                  m.fPos += 2;
                  break;
                case 18:
                  m.fPos += 2;
                  break;
                case 19:
                  m.oPos += 1;
                  break;
                case 20:
                  m.oPos += 1;
              }
              m.prev = ta.LINE_STYLE;
              var La = m;
              b && A.hasStroke && A.closePath(!0);
              A.context.moveTo(e - c, f - d);
              if (null == La.buffer.o[La.oPos]) A.hasStroke = !1;
              else {
                A.context.lineWidth =
                  0 < La.buffer.o[La.oPos] ? La.buffer.o[La.oPos] : 1;
                var qb =
                  null == La.buffer.o[La.oPos + 3]
                    ? "round"
                    : cp.toString(La.buffer.o[La.oPos + 3]).toLowerCase();
                A.context.lineJoin = qb;
                var rb =
                  null == La.buffer.o[La.oPos + 2]
                    ? "round"
                    : 0 == La.buffer.o[La.oPos + 2]
                    ? "butt"
                    : bp.toString(La.buffer.o[La.oPos + 2]).toLowerCase();
                A.context.lineCap = rb;
                A.context.miterLimit = La.buffer.f[La.fPos + 1];
                if (1 == La.buffer.f[La.fPos]) {
                  var sb = K.hex(La.buffer.i[La.iPos] & 16777215, 6);
                  A.context.strokeStyle = "#" + sb;
                } else
                  (B = (La.buffer.i[La.iPos] & 16711680) >>> 16),
                    (G = (La.buffer.i[La.iPos] & 65280) >>> 8),
                    (v = La.buffer.i[La.iPos] & 255),
                    (A.context.strokeStyle =
                      "rgba(" +
                      B +
                      ", " +
                      G +
                      ", " +
                      v +
                      ", " +
                      La.buffer.f[La.fPos] +
                      ")");
                A.setSmoothing(!0);
                A.hasStroke = !0;
              }
              break;
            case 17:
              switch (m.prev._hx_index) {
                case 0:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 1:
                  m.iPos += 1;
                  m.fPos += 1;
                  break;
                case 2:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 3:
                  m.oPos += 1;
                  break;
                case 4:
                  m.fPos += 6;
                  break;
                case 5:
                  m.fPos += 4;
                  break;
                case 6:
                  m.fPos += 3;
                  break;
                case 7:
                  m.fPos += 4;
                  break;
                case 8:
                  m.oPos += 3;
                  break;
                case 9:
                  m.fPos += 4;
                  break;
                case 10:
                  m.fPos += 5;
                  m.oPos += 1;
                  break;
                case 12:
                  m.oPos += 4;
                  break;
                case 14:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 15:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 16:
                  m.oPos += 4;
                  m.iPos += 1;
                  m.fPos += 2;
                  m.bPos += 1;
                  break;
                case 17:
                  m.fPos += 2;
                  break;
                case 18:
                  m.fPos += 2;
                  break;
                case 19:
                  m.oPos += 1;
                  break;
                case 20:
                  m.oPos += 1;
              }
              m.prev = ta.LINE_TO;
              var nb = m;
              p = !0;
              A.context.lineTo(
                nb.buffer.f[nb.fPos] - c,
                nb.buffer.f[nb.fPos + 1] - d
              );
              e = nb.buffer.f[nb.fPos];
              f = nb.buffer.f[nb.fPos + 1];
              e == g && f == l && (k = !0);
              break;
            case 18:
              switch (m.prev._hx_index) {
                case 0:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 1:
                  m.iPos += 1;
                  m.fPos += 1;
                  break;
                case 2:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 3:
                  m.oPos += 1;
                  break;
                case 4:
                  m.fPos += 6;
                  break;
                case 5:
                  m.fPos += 4;
                  break;
                case 6:
                  m.fPos += 3;
                  break;
                case 7:
                  m.fPos += 4;
                  break;
                case 8:
                  m.oPos += 3;
                  break;
                case 9:
                  m.fPos += 4;
                  break;
                case 10:
                  m.fPos += 5;
                  m.oPos += 1;
                  break;
                case 12:
                  m.oPos += 4;
                  break;
                case 14:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 15:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 16:
                  m.oPos += 4;
                  m.iPos += 1;
                  m.fPos += 2;
                  m.bPos += 1;
                  break;
                case 17:
                  m.fPos += 2;
                  break;
                case 18:
                  m.fPos += 2;
                  break;
                case 19:
                  m.oPos += 1;
                  break;
                case 20:
                  m.oPos += 1;
              }
              m.prev = ta.MOVE_TO;
              var fb = m;
              A.context.moveTo(
                fb.buffer.f[fb.fPos] - c,
                fb.buffer.f[fb.fPos + 1] - d
              );
              e = fb.buffer.f[fb.fPos];
              f = fb.buffer.f[fb.fPos + 1];
              h &&
                fb.buffer.f[fb.fPos] != g &&
                fb.buffer.f[fb.fPos + 1] != l &&
                (k = !0);
              g = fb.buffer.f[fb.fPos];
              l = fb.buffer.f[fb.fPos + 1];
              h = !0;
              break;
            case 21:
              A.windingRule = "evenodd";
              break;
            case 22:
              A.windingRule = "nonzero";
              break;
            default:
              switch (m.prev._hx_index) {
                case 0:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 1:
                  m.iPos += 1;
                  m.fPos += 1;
                  break;
                case 2:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 3:
                  m.oPos += 1;
                  break;
                case 4:
                  m.fPos += 6;
                  break;
                case 5:
                  m.fPos += 4;
                  break;
                case 6:
                  m.fPos += 3;
                  break;
                case 7:
                  m.fPos += 4;
                  break;
                case 8:
                  m.oPos += 3;
                  break;
                case 9:
                  m.fPos += 4;
                  break;
                case 10:
                  m.fPos += 5;
                  m.oPos += 1;
                  break;
                case 12:
                  m.oPos += 4;
                  break;
                case 14:
                  m.oPos += 2;
                  m.bPos += 2;
                  break;
                case 15:
                  m.oPos += 4;
                  m.iiPos += 2;
                  m.ffPos += 1;
                  m.fPos += 1;
                  break;
                case 16:
                  m.oPos += 4;
                  m.iPos += 1;
                  m.fPos += 2;
                  m.bPos += 1;
                  break;
                case 17:
                  m.fPos += 2;
                  break;
                case 18:
                  m.fPos += 2;
                  break;
                case 19:
                  m.oPos += 1;
                  break;
                case 20:
                  m.oPos += 1;
              }
              m.prev = y;
          }
        }
        null != t && gb.__pool.release(t);
        null != w && gb.__pool.release(w);
        m.destroy();
        if (p) {
          if (b && A.hasStroke) {
            if (A.hasFill) {
              if (e != g || f != l) A.context.lineTo(g - c, l - d), (k = !0);
              k && A.closePath(!0);
            } else k && e == g && f == l && A.closePath(!0);
            A.hitTesting || A.context.stroke();
          }
          b ||
            (!A.hasFill && null == A.bitmapFill) ||
            (A.context.translate(-A.bounds.x, -A.bounds.y),
            null != A.pendingMatrix
              ? (A.context.transform(
                  A.pendingMatrix.a,
                  A.pendingMatrix.b,
                  A.pendingMatrix.c,
                  A.pendingMatrix.d,
                  A.pendingMatrix.tx,
                  A.pendingMatrix.ty
                ),
                A.hitTesting || A.context.fill(A.windingRule),
                A.context.transform(
                  A.inversePendingMatrix.a,
                  A.inversePendingMatrix.b,
                  A.inversePendingMatrix.c,
                  A.inversePendingMatrix.d,
                  A.inversePendingMatrix.tx,
                  A.inversePendingMatrix.ty
                ))
              : A.hitTesting || A.context.fill(A.windingRule),
            A.context.translate(A.bounds.x, A.bounds.y),
            A.context.closePath());
        }
      };
      A.render = function (a, b) {
        a.__update(b.__worldTransform, b.__pixelRatio);
        if (a.__softwareDirty) {
          A.hitTesting = !1;
          A.graphics = a;
          A.allowSmoothing = b.__allowSmoothing;
          A.worldAlpha = b.__getAlpha(a.__owner.__worldAlpha);
          A.bounds = a.__bounds;
          var c = a.__width,
            d = a.__height;
          if (
            !a.__visible ||
            0 == a.__commands.get_length() ||
            null == A.bounds ||
            1 > c ||
            1 > d
          )
            (a.__canvas = null), (a.__context = null), (a.__bitmap = null);
          else {
            null == a.__canvas &&
              ((a.__canvas = window.document.createElement("canvas")),
              (a.__context = a.__canvas.getContext("2d")));
            A.context = a.__context;
            var e = a.__renderTransform,
              f = a.__canvas,
              k = b.__pixelRatio,
              g = (c * k) | 0,
              l = (d * k) | 0;
            b.__setBlendModeContext(A.context, 10);
            b.__isDOM
              ? (f.width == g && f.height == l
                  ? A.context.clearRect(0, 0, g, l)
                  : ((f.width = g),
                    (f.height = l),
                    (f.style.width = c + "px"),
                    (f.style.height = d + "px")),
                (c = a.__renderTransform),
                A.context.setTransform(
                  c.a * k,
                  c.b * k,
                  c.c * k,
                  c.d * k,
                  c.tx * k,
                  c.ty * k
                ))
              : (f.width == g && f.height == l
                  ? (A.context.closePath(),
                    A.context.setTransform(1, 0, 0, 1, 0, 0),
                    A.context.clearRect(0, 0, g, l))
                  : ((f.width = c), (f.height = d)),
                A.context.setTransform(e.a, e.b, e.c, e.d, e.tx, e.ty));
            A.fillCommands.clear();
            A.strokeCommands.clear();
            A.hasFill = !1;
            A.hasStroke = !1;
            A.bitmapFill = null;
            k = A.bitmapRepeat = !1;
            d = c = 0;
            A.windingRule = "evenodd";
            e = new ig(a.__commands);
            f = 0;
            for (g = a.__commands.types; f < g.length; )
              switch (((l = g[f]), ++f, l._hx_index)) {
                case 0:
                case 1:
                case 2:
                case 3:
                  A.endFill();
                  A.endStroke();
                  if (l == ta.BEGIN_BITMAP_FILL) {
                    switch (e.prev._hx_index) {
                      case 0:
                        e.oPos += 2;
                        e.bPos += 2;
                        break;
                      case 1:
                        e.iPos += 1;
                        e.fPos += 1;
                        break;
                      case 2:
                        e.oPos += 4;
                        e.iiPos += 2;
                        e.ffPos += 1;
                        e.fPos += 1;
                        break;
                      case 3:
                        e.oPos += 1;
                        break;
                      case 4:
                        e.fPos += 6;
                        break;
                      case 5:
                        e.fPos += 4;
                        break;
                      case 6:
                        e.fPos += 3;
                        break;
                      case 7:
                        e.fPos += 4;
                        break;
                      case 8:
                        e.oPos += 3;
                        break;
                      case 9:
                        e.fPos += 4;
                        break;
                      case 10:
                        e.fPos += 5;
                        e.oPos += 1;
                        break;
                      case 12:
                        e.oPos += 4;
                        break;
                      case 14:
                        e.oPos += 2;
                        e.bPos += 2;
                        break;
                      case 15:
                        e.oPos += 4;
                        e.iiPos += 2;
                        e.ffPos += 1;
                        e.fPos += 1;
                        break;
                      case 16:
                        e.oPos += 4;
                        e.iPos += 1;
                        e.fPos += 2;
                        e.bPos += 1;
                        break;
                      case 17:
                        e.fPos += 2;
                        break;
                      case 18:
                        e.fPos += 2;
                        break;
                      case 19:
                        e.oPos += 1;
                        break;
                      case 20:
                        e.oPos += 1;
                    }
                    e.prev = ta.BEGIN_BITMAP_FILL;
                    l = e;
                    A.fillCommands.beginBitmapFill(
                      l.buffer.o[l.oPos],
                      l.buffer.o[l.oPos + 1],
                      l.buffer.b[l.bPos],
                      l.buffer.b[l.bPos + 1]
                    );
                    A.strokeCommands.beginBitmapFill(
                      l.buffer.o[l.oPos],
                      l.buffer.o[l.oPos + 1],
                      l.buffer.b[l.bPos],
                      l.buffer.b[l.bPos + 1]
                    );
                  } else if (l == ta.BEGIN_GRADIENT_FILL) {
                    switch (e.prev._hx_index) {
                      case 0:
                        e.oPos += 2;
                        e.bPos += 2;
                        break;
                      case 1:
                        e.iPos += 1;
                        e.fPos += 1;
                        break;
                      case 2:
                        e.oPos += 4;
                        e.iiPos += 2;
                        e.ffPos += 1;
                        e.fPos += 1;
                        break;
                      case 3:
                        e.oPos += 1;
                        break;
                      case 4:
                        e.fPos += 6;
                        break;
                      case 5:
                        e.fPos += 4;
                        break;
                      case 6:
                        e.fPos += 3;
                        break;
                      case 7:
                        e.fPos += 4;
                        break;
                      case 8:
                        e.oPos += 3;
                        break;
                      case 9:
                        e.fPos += 4;
                        break;
                      case 10:
                        e.fPos += 5;
                        e.oPos += 1;
                        break;
                      case 12:
                        e.oPos += 4;
                        break;
                      case 14:
                        e.oPos += 2;
                        e.bPos += 2;
                        break;
                      case 15:
                        e.oPos += 4;
                        e.iiPos += 2;
                        e.ffPos += 1;
                        e.fPos += 1;
                        break;
                      case 16:
                        e.oPos += 4;
                        e.iPos += 1;
                        e.fPos += 2;
                        e.bPos += 1;
                        break;
                      case 17:
                        e.fPos += 2;
                        break;
                      case 18:
                        e.fPos += 2;
                        break;
                      case 19:
                        e.oPos += 1;
                        break;
                      case 20:
                        e.oPos += 1;
                    }
                    e.prev = ta.BEGIN_GRADIENT_FILL;
                    l = e;
                    A.fillCommands.beginGradientFill(
                      l.buffer.o[l.oPos],
                      l.buffer.ii[l.iiPos],
                      l.buffer.ff[l.ffPos],
                      l.buffer.ii[l.iiPos + 1],
                      l.buffer.o[l.oPos + 1],
                      l.buffer.o[l.oPos + 2],
                      l.buffer.o[l.oPos + 3],
                      l.buffer.f[l.fPos]
                    );
                    A.strokeCommands.beginGradientFill(
                      l.buffer.o[l.oPos],
                      l.buffer.ii[l.iiPos],
                      l.buffer.ff[l.ffPos],
                      l.buffer.ii[l.iiPos + 1],
                      l.buffer.o[l.oPos + 1],
                      l.buffer.o[l.oPos + 2],
                      l.buffer.o[l.oPos + 3],
                      l.buffer.f[l.fPos]
                    );
                  } else if (l == ta.BEGIN_SHADER_FILL) {
                    switch (e.prev._hx_index) {
                      case 0:
                        e.oPos += 2;
                        e.bPos += 2;
                        break;
                      case 1:
                        e.iPos += 1;
                        e.fPos += 1;
                        break;
                      case 2:
                        e.oPos += 4;
                        e.iiPos += 2;
                        e.ffPos += 1;
                        e.fPos += 1;
                        break;
                      case 3:
                        e.oPos += 1;
                        break;
                      case 4:
                        e.fPos += 6;
                        break;
                      case 5:
                        e.fPos += 4;
                        break;
                      case 6:
                        e.fPos += 3;
                        break;
                      case 7:
                        e.fPos += 4;
                        break;
                      case 8:
                        e.oPos += 3;
                        break;
                      case 9:
                        e.fPos += 4;
                        break;
                      case 10:
                        e.fPos += 5;
                        e.oPos += 1;
                        break;
                      case 12:
                        e.oPos += 4;
                        break;
                      case 14:
                        e.oPos += 2;
                        e.bPos += 2;
                        break;
                      case 15:
                        e.oPos += 4;
                        e.iiPos += 2;
                        e.ffPos += 1;
                        e.fPos += 1;
                        break;
                      case 16:
                        e.oPos += 4;
                        e.iPos += 1;
                        e.fPos += 2;
                        e.bPos += 1;
                        break;
                      case 17:
                        e.fPos += 2;
                        break;
                      case 18:
                        e.fPos += 2;
                        break;
                      case 19:
                        e.oPos += 1;
                        break;
                      case 20:
                        e.oPos += 1;
                    }
                    e.prev = ta.BEGIN_SHADER_FILL;
                    l = e;
                    A.fillCommands.beginShaderFill(l.buffer.o[l.oPos]);
                    A.strokeCommands.beginShaderFill(l.buffer.o[l.oPos]);
                  } else {
                    switch (e.prev._hx_index) {
                      case 0:
                        e.oPos += 2;
                        e.bPos += 2;
                        break;
                      case 1:
                        e.iPos += 1;
                        e.fPos += 1;
                        break;
                      case 2:
                        e.oPos += 4;
                        e.iiPos += 2;
                        e.ffPos += 1;
                        e.fPos += 1;
                        break;
                      case 3:
                        e.oPos += 1;
                        break;
                      case 4:
                        e.fPos += 6;
                        break;
                      case 5:
                        e.fPos += 4;
                        break;
                      case 6:
                        e.fPos += 3;
                        break;
                      case 7:
                        e.fPos += 4;
                        break;
                      case 8:
                        e.oPos += 3;
                        break;
                      case 9:
                        e.fPos += 4;
                        break;
                      case 10:
                        e.fPos += 5;
                        e.oPos += 1;
                        break;
                      case 12:
                        e.oPos += 4;
                        break;
                      case 14:
                        e.oPos += 2;
                        e.bPos += 2;
                        break;
                      case 15:
                        e.oPos += 4;
                        e.iiPos += 2;
                        e.ffPos += 1;
                        e.fPos += 1;
                        break;
                      case 16:
                        e.oPos += 4;
                        e.iPos += 1;
                        e.fPos += 2;
                        e.bPos += 1;
                        break;
                      case 17:
                        e.fPos += 2;
                        break;
                      case 18:
                        e.fPos += 2;
                        break;
                      case 19:
                        e.oPos += 1;
                        break;
                      case 20:
                        e.oPos += 1;
                    }
                    e.prev = ta.BEGIN_FILL;
                    l = e;
                    A.fillCommands.beginFill(
                      l.buffer.i[l.iPos],
                      l.buffer.f[l.fPos]
                    );
                    A.strokeCommands.beginFill(
                      l.buffer.i[l.iPos],
                      l.buffer.f[l.fPos]
                    );
                  }
                  break;
                case 4:
                  switch (e.prev._hx_index) {
                    case 0:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 1:
                      e.iPos += 1;
                      e.fPos += 1;
                      break;
                    case 2:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 3:
                      e.oPos += 1;
                      break;
                    case 4:
                      e.fPos += 6;
                      break;
                    case 5:
                      e.fPos += 4;
                      break;
                    case 6:
                      e.fPos += 3;
                      break;
                    case 7:
                      e.fPos += 4;
                      break;
                    case 8:
                      e.oPos += 3;
                      break;
                    case 9:
                      e.fPos += 4;
                      break;
                    case 10:
                      e.fPos += 5;
                      e.oPos += 1;
                      break;
                    case 12:
                      e.oPos += 4;
                      break;
                    case 14:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 15:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 16:
                      e.oPos += 4;
                      e.iPos += 1;
                      e.fPos += 2;
                      e.bPos += 1;
                      break;
                    case 17:
                      e.fPos += 2;
                      break;
                    case 18:
                      e.fPos += 2;
                      break;
                    case 19:
                      e.oPos += 1;
                      break;
                    case 20:
                      e.oPos += 1;
                  }
                  e.prev = ta.CUBIC_CURVE_TO;
                  l = e;
                  A.fillCommands.cubicCurveTo(
                    l.buffer.f[l.fPos],
                    l.buffer.f[l.fPos + 1],
                    l.buffer.f[l.fPos + 2],
                    l.buffer.f[l.fPos + 3],
                    l.buffer.f[l.fPos + 4],
                    l.buffer.f[l.fPos + 5]
                  );
                  k
                    ? A.strokeCommands.cubicCurveTo(
                        l.buffer.f[l.fPos],
                        l.buffer.f[l.fPos + 1],
                        l.buffer.f[l.fPos + 2],
                        l.buffer.f[l.fPos + 3],
                        l.buffer.f[l.fPos + 4],
                        l.buffer.f[l.fPos + 5]
                      )
                    : ((c = l.buffer.f[l.fPos + 4]),
                      (d = l.buffer.f[l.fPos + 5]));
                  break;
                case 5:
                  switch (e.prev._hx_index) {
                    case 0:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 1:
                      e.iPos += 1;
                      e.fPos += 1;
                      break;
                    case 2:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 3:
                      e.oPos += 1;
                      break;
                    case 4:
                      e.fPos += 6;
                      break;
                    case 5:
                      e.fPos += 4;
                      break;
                    case 6:
                      e.fPos += 3;
                      break;
                    case 7:
                      e.fPos += 4;
                      break;
                    case 8:
                      e.oPos += 3;
                      break;
                    case 9:
                      e.fPos += 4;
                      break;
                    case 10:
                      e.fPos += 5;
                      e.oPos += 1;
                      break;
                    case 12:
                      e.oPos += 4;
                      break;
                    case 14:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 15:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 16:
                      e.oPos += 4;
                      e.iPos += 1;
                      e.fPos += 2;
                      e.bPos += 1;
                      break;
                    case 17:
                      e.fPos += 2;
                      break;
                    case 18:
                      e.fPos += 2;
                      break;
                    case 19:
                      e.oPos += 1;
                      break;
                    case 20:
                      e.oPos += 1;
                  }
                  e.prev = ta.CURVE_TO;
                  l = e;
                  A.fillCommands.curveTo(
                    l.buffer.f[l.fPos],
                    l.buffer.f[l.fPos + 1],
                    l.buffer.f[l.fPos + 2],
                    l.buffer.f[l.fPos + 3]
                  );
                  k
                    ? A.strokeCommands.curveTo(
                        l.buffer.f[l.fPos],
                        l.buffer.f[l.fPos + 1],
                        l.buffer.f[l.fPos + 2],
                        l.buffer.f[l.fPos + 3]
                      )
                    : ((c = l.buffer.f[l.fPos + 2]),
                      (d = l.buffer.f[l.fPos + 3]));
                  break;
                case 6:
                  switch (e.prev._hx_index) {
                    case 0:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 1:
                      e.iPos += 1;
                      e.fPos += 1;
                      break;
                    case 2:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 3:
                      e.oPos += 1;
                      break;
                    case 4:
                      e.fPos += 6;
                      break;
                    case 5:
                      e.fPos += 4;
                      break;
                    case 6:
                      e.fPos += 3;
                      break;
                    case 7:
                      e.fPos += 4;
                      break;
                    case 8:
                      e.oPos += 3;
                      break;
                    case 9:
                      e.fPos += 4;
                      break;
                    case 10:
                      e.fPos += 5;
                      e.oPos += 1;
                      break;
                    case 12:
                      e.oPos += 4;
                      break;
                    case 14:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 15:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 16:
                      e.oPos += 4;
                      e.iPos += 1;
                      e.fPos += 2;
                      e.bPos += 1;
                      break;
                    case 17:
                      e.fPos += 2;
                      break;
                    case 18:
                      e.fPos += 2;
                      break;
                    case 19:
                      e.oPos += 1;
                      break;
                    case 20:
                      e.oPos += 1;
                  }
                  e.prev = ta.DRAW_CIRCLE;
                  l = e;
                  A.fillCommands.drawCircle(
                    l.buffer.f[l.fPos],
                    l.buffer.f[l.fPos + 1],
                    l.buffer.f[l.fPos + 2]
                  );
                  k &&
                    A.strokeCommands.drawCircle(
                      l.buffer.f[l.fPos],
                      l.buffer.f[l.fPos + 1],
                      l.buffer.f[l.fPos + 2]
                    );
                  break;
                case 7:
                  switch (e.prev._hx_index) {
                    case 0:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 1:
                      e.iPos += 1;
                      e.fPos += 1;
                      break;
                    case 2:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 3:
                      e.oPos += 1;
                      break;
                    case 4:
                      e.fPos += 6;
                      break;
                    case 5:
                      e.fPos += 4;
                      break;
                    case 6:
                      e.fPos += 3;
                      break;
                    case 7:
                      e.fPos += 4;
                      break;
                    case 8:
                      e.oPos += 3;
                      break;
                    case 9:
                      e.fPos += 4;
                      break;
                    case 10:
                      e.fPos += 5;
                      e.oPos += 1;
                      break;
                    case 12:
                      e.oPos += 4;
                      break;
                    case 14:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 15:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 16:
                      e.oPos += 4;
                      e.iPos += 1;
                      e.fPos += 2;
                      e.bPos += 1;
                      break;
                    case 17:
                      e.fPos += 2;
                      break;
                    case 18:
                      e.fPos += 2;
                      break;
                    case 19:
                      e.oPos += 1;
                      break;
                    case 20:
                      e.oPos += 1;
                  }
                  e.prev = ta.DRAW_ELLIPSE;
                  l = e;
                  A.fillCommands.drawEllipse(
                    l.buffer.f[l.fPos],
                    l.buffer.f[l.fPos + 1],
                    l.buffer.f[l.fPos + 2],
                    l.buffer.f[l.fPos + 3]
                  );
                  k &&
                    A.strokeCommands.drawEllipse(
                      l.buffer.f[l.fPos],
                      l.buffer.f[l.fPos + 1],
                      l.buffer.f[l.fPos + 2],
                      l.buffer.f[l.fPos + 3]
                    );
                  break;
                case 8:
                  switch (e.prev._hx_index) {
                    case 0:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 1:
                      e.iPos += 1;
                      e.fPos += 1;
                      break;
                    case 2:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 3:
                      e.oPos += 1;
                      break;
                    case 4:
                      e.fPos += 6;
                      break;
                    case 5:
                      e.fPos += 4;
                      break;
                    case 6:
                      e.fPos += 3;
                      break;
                    case 7:
                      e.fPos += 4;
                      break;
                    case 8:
                      e.oPos += 3;
                      break;
                    case 9:
                      e.fPos += 4;
                      break;
                    case 10:
                      e.fPos += 5;
                      e.oPos += 1;
                      break;
                    case 12:
                      e.oPos += 4;
                      break;
                    case 14:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 15:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 16:
                      e.oPos += 4;
                      e.iPos += 1;
                      e.fPos += 2;
                      e.bPos += 1;
                      break;
                    case 17:
                      e.fPos += 2;
                      break;
                    case 18:
                      e.fPos += 2;
                      break;
                    case 19:
                      e.oPos += 1;
                      break;
                    case 20:
                      e.oPos += 1;
                  }
                  e.prev = ta.DRAW_QUADS;
                  l = e;
                  A.fillCommands.drawQuads(
                    l.buffer.o[l.oPos],
                    l.buffer.o[l.oPos + 1],
                    l.buffer.o[l.oPos + 2]
                  );
                  break;
                case 9:
                  switch (e.prev._hx_index) {
                    case 0:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 1:
                      e.iPos += 1;
                      e.fPos += 1;
                      break;
                    case 2:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 3:
                      e.oPos += 1;
                      break;
                    case 4:
                      e.fPos += 6;
                      break;
                    case 5:
                      e.fPos += 4;
                      break;
                    case 6:
                      e.fPos += 3;
                      break;
                    case 7:
                      e.fPos += 4;
                      break;
                    case 8:
                      e.oPos += 3;
                      break;
                    case 9:
                      e.fPos += 4;
                      break;
                    case 10:
                      e.fPos += 5;
                      e.oPos += 1;
                      break;
                    case 12:
                      e.oPos += 4;
                      break;
                    case 14:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 15:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 16:
                      e.oPos += 4;
                      e.iPos += 1;
                      e.fPos += 2;
                      e.bPos += 1;
                      break;
                    case 17:
                      e.fPos += 2;
                      break;
                    case 18:
                      e.fPos += 2;
                      break;
                    case 19:
                      e.oPos += 1;
                      break;
                    case 20:
                      e.oPos += 1;
                  }
                  e.prev = ta.DRAW_RECT;
                  l = e;
                  A.fillCommands.drawRect(
                    l.buffer.f[l.fPos],
                    l.buffer.f[l.fPos + 1],
                    l.buffer.f[l.fPos + 2],
                    l.buffer.f[l.fPos + 3]
                  );
                  k &&
                    A.strokeCommands.drawRect(
                      l.buffer.f[l.fPos],
                      l.buffer.f[l.fPos + 1],
                      l.buffer.f[l.fPos + 2],
                      l.buffer.f[l.fPos + 3]
                    );
                  break;
                case 10:
                  switch (e.prev._hx_index) {
                    case 0:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 1:
                      e.iPos += 1;
                      e.fPos += 1;
                      break;
                    case 2:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 3:
                      e.oPos += 1;
                      break;
                    case 4:
                      e.fPos += 6;
                      break;
                    case 5:
                      e.fPos += 4;
                      break;
                    case 6:
                      e.fPos += 3;
                      break;
                    case 7:
                      e.fPos += 4;
                      break;
                    case 8:
                      e.oPos += 3;
                      break;
                    case 9:
                      e.fPos += 4;
                      break;
                    case 10:
                      e.fPos += 5;
                      e.oPos += 1;
                      break;
                    case 12:
                      e.oPos += 4;
                      break;
                    case 14:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 15:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 16:
                      e.oPos += 4;
                      e.iPos += 1;
                      e.fPos += 2;
                      e.bPos += 1;
                      break;
                    case 17:
                      e.fPos += 2;
                      break;
                    case 18:
                      e.fPos += 2;
                      break;
                    case 19:
                      e.oPos += 1;
                      break;
                    case 20:
                      e.oPos += 1;
                  }
                  e.prev = ta.DRAW_ROUND_RECT;
                  l = e;
                  A.fillCommands.drawRoundRect(
                    l.buffer.f[l.fPos],
                    l.buffer.f[l.fPos + 1],
                    l.buffer.f[l.fPos + 2],
                    l.buffer.f[l.fPos + 3],
                    l.buffer.f[l.fPos + 4],
                    l.buffer.o[l.oPos]
                  );
                  k &&
                    A.strokeCommands.drawRoundRect(
                      l.buffer.f[l.fPos],
                      l.buffer.f[l.fPos + 1],
                      l.buffer.f[l.fPos + 2],
                      l.buffer.f[l.fPos + 3],
                      l.buffer.f[l.fPos + 4],
                      l.buffer.o[l.oPos]
                    );
                  break;
                case 12:
                  switch (e.prev._hx_index) {
                    case 0:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 1:
                      e.iPos += 1;
                      e.fPos += 1;
                      break;
                    case 2:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 3:
                      e.oPos += 1;
                      break;
                    case 4:
                      e.fPos += 6;
                      break;
                    case 5:
                      e.fPos += 4;
                      break;
                    case 6:
                      e.fPos += 3;
                      break;
                    case 7:
                      e.fPos += 4;
                      break;
                    case 8:
                      e.oPos += 3;
                      break;
                    case 9:
                      e.fPos += 4;
                      break;
                    case 10:
                      e.fPos += 5;
                      e.oPos += 1;
                      break;
                    case 12:
                      e.oPos += 4;
                      break;
                    case 14:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 15:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 16:
                      e.oPos += 4;
                      e.iPos += 1;
                      e.fPos += 2;
                      e.bPos += 1;
                      break;
                    case 17:
                      e.fPos += 2;
                      break;
                    case 18:
                      e.fPos += 2;
                      break;
                    case 19:
                      e.oPos += 1;
                      break;
                    case 20:
                      e.oPos += 1;
                  }
                  e.prev = ta.DRAW_TRIANGLES;
                  l = e;
                  A.fillCommands.drawTriangles(
                    l.buffer.o[l.oPos],
                    l.buffer.o[l.oPos + 1],
                    l.buffer.o[l.oPos + 2],
                    l.buffer.o[l.oPos + 3]
                  );
                  break;
                case 13:
                  switch (e.prev._hx_index) {
                    case 0:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 1:
                      e.iPos += 1;
                      e.fPos += 1;
                      break;
                    case 2:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 3:
                      e.oPos += 1;
                      break;
                    case 4:
                      e.fPos += 6;
                      break;
                    case 5:
                      e.fPos += 4;
                      break;
                    case 6:
                      e.fPos += 3;
                      break;
                    case 7:
                      e.fPos += 4;
                      break;
                    case 8:
                      e.oPos += 3;
                      break;
                    case 9:
                      e.fPos += 4;
                      break;
                    case 10:
                      e.fPos += 5;
                      e.oPos += 1;
                      break;
                    case 12:
                      e.oPos += 4;
                      break;
                    case 14:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 15:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 16:
                      e.oPos += 4;
                      e.iPos += 1;
                      e.fPos += 2;
                      e.bPos += 1;
                      break;
                    case 17:
                      e.fPos += 2;
                      break;
                    case 18:
                      e.fPos += 2;
                      break;
                    case 19:
                      e.oPos += 1;
                      break;
                    case 20:
                      e.oPos += 1;
                  }
                  e.prev = ta.END_FILL;
                  A.endFill();
                  A.endStroke();
                  k = A.hasFill = !1;
                  A.bitmapFill = null;
                  d = c = 0;
                  break;
                case 14:
                  switch (e.prev._hx_index) {
                    case 0:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 1:
                      e.iPos += 1;
                      e.fPos += 1;
                      break;
                    case 2:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 3:
                      e.oPos += 1;
                      break;
                    case 4:
                      e.fPos += 6;
                      break;
                    case 5:
                      e.fPos += 4;
                      break;
                    case 6:
                      e.fPos += 3;
                      break;
                    case 7:
                      e.fPos += 4;
                      break;
                    case 8:
                      e.oPos += 3;
                      break;
                    case 9:
                      e.fPos += 4;
                      break;
                    case 10:
                      e.fPos += 5;
                      e.oPos += 1;
                      break;
                    case 12:
                      e.oPos += 4;
                      break;
                    case 14:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 15:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 16:
                      e.oPos += 4;
                      e.iPos += 1;
                      e.fPos += 2;
                      e.bPos += 1;
                      break;
                    case 17:
                      e.fPos += 2;
                      break;
                    case 18:
                      e.fPos += 2;
                      break;
                    case 19:
                      e.oPos += 1;
                      break;
                    case 20:
                      e.oPos += 1;
                  }
                  e.prev = ta.LINE_BITMAP_STYLE;
                  l = e;
                  k ||
                    (0 == c && 0 == d) ||
                    (A.strokeCommands.moveTo(c, d), (d = c = 0));
                  k = !0;
                  A.strokeCommands.lineBitmapStyle(
                    l.buffer.o[l.oPos],
                    l.buffer.o[l.oPos + 1],
                    l.buffer.b[l.bPos],
                    l.buffer.b[l.bPos + 1]
                  );
                  break;
                case 15:
                  switch (e.prev._hx_index) {
                    case 0:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 1:
                      e.iPos += 1;
                      e.fPos += 1;
                      break;
                    case 2:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 3:
                      e.oPos += 1;
                      break;
                    case 4:
                      e.fPos += 6;
                      break;
                    case 5:
                      e.fPos += 4;
                      break;
                    case 6:
                      e.fPos += 3;
                      break;
                    case 7:
                      e.fPos += 4;
                      break;
                    case 8:
                      e.oPos += 3;
                      break;
                    case 9:
                      e.fPos += 4;
                      break;
                    case 10:
                      e.fPos += 5;
                      e.oPos += 1;
                      break;
                    case 12:
                      e.oPos += 4;
                      break;
                    case 14:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 15:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 16:
                      e.oPos += 4;
                      e.iPos += 1;
                      e.fPos += 2;
                      e.bPos += 1;
                      break;
                    case 17:
                      e.fPos += 2;
                      break;
                    case 18:
                      e.fPos += 2;
                      break;
                    case 19:
                      e.oPos += 1;
                      break;
                    case 20:
                      e.oPos += 1;
                  }
                  e.prev = ta.LINE_GRADIENT_STYLE;
                  l = e;
                  k ||
                    (0 == c && 0 == d) ||
                    (A.strokeCommands.moveTo(c, d), (d = c = 0));
                  k = !0;
                  A.strokeCommands.lineGradientStyle(
                    l.buffer.o[l.oPos],
                    l.buffer.ii[l.iiPos],
                    l.buffer.ff[l.ffPos],
                    l.buffer.ii[l.iiPos + 1],
                    l.buffer.o[l.oPos + 1],
                    l.buffer.o[l.oPos + 2],
                    l.buffer.o[l.oPos + 3],
                    l.buffer.f[l.fPos]
                  );
                  break;
                case 16:
                  switch (e.prev._hx_index) {
                    case 0:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 1:
                      e.iPos += 1;
                      e.fPos += 1;
                      break;
                    case 2:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 3:
                      e.oPos += 1;
                      break;
                    case 4:
                      e.fPos += 6;
                      break;
                    case 5:
                      e.fPos += 4;
                      break;
                    case 6:
                      e.fPos += 3;
                      break;
                    case 7:
                      e.fPos += 4;
                      break;
                    case 8:
                      e.oPos += 3;
                      break;
                    case 9:
                      e.fPos += 4;
                      break;
                    case 10:
                      e.fPos += 5;
                      e.oPos += 1;
                      break;
                    case 12:
                      e.oPos += 4;
                      break;
                    case 14:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 15:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 16:
                      e.oPos += 4;
                      e.iPos += 1;
                      e.fPos += 2;
                      e.bPos += 1;
                      break;
                    case 17:
                      e.fPos += 2;
                      break;
                    case 18:
                      e.fPos += 2;
                      break;
                    case 19:
                      e.oPos += 1;
                      break;
                    case 20:
                      e.oPos += 1;
                  }
                  e.prev = ta.LINE_STYLE;
                  l = e;
                  k ||
                    null == l.buffer.o[l.oPos] ||
                    (0 == c && 0 == d) ||
                    (A.strokeCommands.moveTo(c, d), (d = c = 0));
                  k = null != l.buffer.o[l.oPos];
                  A.strokeCommands.lineStyle(
                    l.buffer.o[l.oPos],
                    l.buffer.i[l.iPos],
                    l.buffer.f[l.fPos],
                    l.buffer.b[l.bPos],
                    l.buffer.o[l.oPos + 1],
                    l.buffer.o[l.oPos + 2],
                    l.buffer.o[l.oPos + 3],
                    l.buffer.f[l.fPos + 1]
                  );
                  break;
                case 17:
                  switch (e.prev._hx_index) {
                    case 0:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 1:
                      e.iPos += 1;
                      e.fPos += 1;
                      break;
                    case 2:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 3:
                      e.oPos += 1;
                      break;
                    case 4:
                      e.fPos += 6;
                      break;
                    case 5:
                      e.fPos += 4;
                      break;
                    case 6:
                      e.fPos += 3;
                      break;
                    case 7:
                      e.fPos += 4;
                      break;
                    case 8:
                      e.oPos += 3;
                      break;
                    case 9:
                      e.fPos += 4;
                      break;
                    case 10:
                      e.fPos += 5;
                      e.oPos += 1;
                      break;
                    case 12:
                      e.oPos += 4;
                      break;
                    case 14:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 15:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 16:
                      e.oPos += 4;
                      e.iPos += 1;
                      e.fPos += 2;
                      e.bPos += 1;
                      break;
                    case 17:
                      e.fPos += 2;
                      break;
                    case 18:
                      e.fPos += 2;
                      break;
                    case 19:
                      e.oPos += 1;
                      break;
                    case 20:
                      e.oPos += 1;
                  }
                  e.prev = ta.LINE_TO;
                  l = e;
                  A.fillCommands.lineTo(
                    l.buffer.f[l.fPos],
                    l.buffer.f[l.fPos + 1]
                  );
                  k
                    ? A.strokeCommands.lineTo(
                        l.buffer.f[l.fPos],
                        l.buffer.f[l.fPos + 1]
                      )
                    : ((c = l.buffer.f[l.fPos]), (d = l.buffer.f[l.fPos + 1]));
                  break;
                case 18:
                  switch (e.prev._hx_index) {
                    case 0:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 1:
                      e.iPos += 1;
                      e.fPos += 1;
                      break;
                    case 2:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 3:
                      e.oPos += 1;
                      break;
                    case 4:
                      e.fPos += 6;
                      break;
                    case 5:
                      e.fPos += 4;
                      break;
                    case 6:
                      e.fPos += 3;
                      break;
                    case 7:
                      e.fPos += 4;
                      break;
                    case 8:
                      e.oPos += 3;
                      break;
                    case 9:
                      e.fPos += 4;
                      break;
                    case 10:
                      e.fPos += 5;
                      e.oPos += 1;
                      break;
                    case 12:
                      e.oPos += 4;
                      break;
                    case 14:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 15:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 16:
                      e.oPos += 4;
                      e.iPos += 1;
                      e.fPos += 2;
                      e.bPos += 1;
                      break;
                    case 17:
                      e.fPos += 2;
                      break;
                    case 18:
                      e.fPos += 2;
                      break;
                    case 19:
                      e.oPos += 1;
                      break;
                    case 20:
                      e.oPos += 1;
                  }
                  e.prev = ta.MOVE_TO;
                  l = e;
                  A.fillCommands.moveTo(
                    l.buffer.f[l.fPos],
                    l.buffer.f[l.fPos + 1]
                  );
                  k
                    ? A.strokeCommands.moveTo(
                        l.buffer.f[l.fPos],
                        l.buffer.f[l.fPos + 1]
                      )
                    : ((c = l.buffer.f[l.fPos]), (d = l.buffer.f[l.fPos + 1]));
                  break;
                case 19:
                  switch (e.prev._hx_index) {
                    case 0:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 1:
                      e.iPos += 1;
                      e.fPos += 1;
                      break;
                    case 2:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 3:
                      e.oPos += 1;
                      break;
                    case 4:
                      e.fPos += 6;
                      break;
                    case 5:
                      e.fPos += 4;
                      break;
                    case 6:
                      e.fPos += 3;
                      break;
                    case 7:
                      e.fPos += 4;
                      break;
                    case 8:
                      e.oPos += 3;
                      break;
                    case 9:
                      e.fPos += 4;
                      break;
                    case 10:
                      e.fPos += 5;
                      e.oPos += 1;
                      break;
                    case 12:
                      e.oPos += 4;
                      break;
                    case 14:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 15:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 16:
                      e.oPos += 4;
                      e.iPos += 1;
                      e.fPos += 2;
                      e.bPos += 1;
                      break;
                    case 17:
                      e.fPos += 2;
                      break;
                    case 18:
                      e.fPos += 2;
                      break;
                    case 19:
                      e.oPos += 1;
                      break;
                    case 20:
                      e.oPos += 1;
                  }
                  e.prev = ta.OVERRIDE_BLEND_MODE;
                  l = e;
                  b.__setBlendModeContext(A.context, l.buffer.o[l.oPos]);
                  break;
                case 21:
                  switch (e.prev._hx_index) {
                    case 0:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 1:
                      e.iPos += 1;
                      e.fPos += 1;
                      break;
                    case 2:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 3:
                      e.oPos += 1;
                      break;
                    case 4:
                      e.fPos += 6;
                      break;
                    case 5:
                      e.fPos += 4;
                      break;
                    case 6:
                      e.fPos += 3;
                      break;
                    case 7:
                      e.fPos += 4;
                      break;
                    case 8:
                      e.oPos += 3;
                      break;
                    case 9:
                      e.fPos += 4;
                      break;
                    case 10:
                      e.fPos += 5;
                      e.oPos += 1;
                      break;
                    case 12:
                      e.oPos += 4;
                      break;
                    case 14:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 15:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 16:
                      e.oPos += 4;
                      e.iPos += 1;
                      e.fPos += 2;
                      e.bPos += 1;
                      break;
                    case 17:
                      e.fPos += 2;
                      break;
                    case 18:
                      e.fPos += 2;
                      break;
                    case 19:
                      e.oPos += 1;
                      break;
                    case 20:
                      e.oPos += 1;
                  }
                  e.prev = ta.WINDING_EVEN_ODD;
                  A.fillCommands.windingEvenOdd();
                  A.windingRule = "evenodd";
                  break;
                case 22:
                  switch (e.prev._hx_index) {
                    case 0:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 1:
                      e.iPos += 1;
                      e.fPos += 1;
                      break;
                    case 2:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 3:
                      e.oPos += 1;
                      break;
                    case 4:
                      e.fPos += 6;
                      break;
                    case 5:
                      e.fPos += 4;
                      break;
                    case 6:
                      e.fPos += 3;
                      break;
                    case 7:
                      e.fPos += 4;
                      break;
                    case 8:
                      e.oPos += 3;
                      break;
                    case 9:
                      e.fPos += 4;
                      break;
                    case 10:
                      e.fPos += 5;
                      e.oPos += 1;
                      break;
                    case 12:
                      e.oPos += 4;
                      break;
                    case 14:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 15:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 16:
                      e.oPos += 4;
                      e.iPos += 1;
                      e.fPos += 2;
                      e.bPos += 1;
                      break;
                    case 17:
                      e.fPos += 2;
                      break;
                    case 18:
                      e.fPos += 2;
                      break;
                    case 19:
                      e.oPos += 1;
                      break;
                    case 20:
                      e.oPos += 1;
                  }
                  e.prev = ta.WINDING_NON_ZERO;
                  A.fillCommands.windingNonZero();
                  A.windingRule = "nonzero";
                  break;
                default:
                  switch (e.prev._hx_index) {
                    case 0:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 1:
                      e.iPos += 1;
                      e.fPos += 1;
                      break;
                    case 2:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 3:
                      e.oPos += 1;
                      break;
                    case 4:
                      e.fPos += 6;
                      break;
                    case 5:
                      e.fPos += 4;
                      break;
                    case 6:
                      e.fPos += 3;
                      break;
                    case 7:
                      e.fPos += 4;
                      break;
                    case 8:
                      e.oPos += 3;
                      break;
                    case 9:
                      e.fPos += 4;
                      break;
                    case 10:
                      e.fPos += 5;
                      e.oPos += 1;
                      break;
                    case 12:
                      e.oPos += 4;
                      break;
                    case 14:
                      e.oPos += 2;
                      e.bPos += 2;
                      break;
                    case 15:
                      e.oPos += 4;
                      e.iiPos += 2;
                      e.ffPos += 1;
                      e.fPos += 1;
                      break;
                    case 16:
                      e.oPos += 4;
                      e.iPos += 1;
                      e.fPos += 2;
                      e.bPos += 1;
                      break;
                    case 17:
                      e.fPos += 2;
                      break;
                    case 18:
                      e.fPos += 2;
                      break;
                    case 19:
                      e.oPos += 1;
                      break;
                    case 20:
                      e.oPos += 1;
                  }
                  e.prev = l;
              }
            0 < A.fillCommands.get_length() && A.endFill();
            0 < A.strokeCommands.get_length() && A.endStroke();
            e.destroy();
            a.__bitmap = S.fromCanvas(a.__canvas);
          }
          a.__softwareDirty = !1;
          a.set___dirty(!1);
        }
      };
      A.renderMask = function (a, b) {
        if (0 != a.__commands.get_length()) {
          A.context = b.context;
          b = new ig(a.__commands);
          var c = 0;
          for (a = a.__commands.types; c < a.length; ) {
            var d = a[c];
            ++c;
            switch (d._hx_index) {
              case 4:
                switch (b.prev._hx_index) {
                  case 0:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 1:
                    b.iPos += 1;
                    b.fPos += 1;
                    break;
                  case 2:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 3:
                    b.oPos += 1;
                    break;
                  case 4:
                    b.fPos += 6;
                    break;
                  case 5:
                    b.fPos += 4;
                    break;
                  case 6:
                    b.fPos += 3;
                    break;
                  case 7:
                    b.fPos += 4;
                    break;
                  case 8:
                    b.oPos += 3;
                    break;
                  case 9:
                    b.fPos += 4;
                    break;
                  case 10:
                    b.fPos += 5;
                    b.oPos += 1;
                    break;
                  case 12:
                    b.oPos += 4;
                    break;
                  case 14:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 15:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 16:
                    b.oPos += 4;
                    b.iPos += 1;
                    b.fPos += 2;
                    b.bPos += 1;
                    break;
                  case 17:
                    b.fPos += 2;
                    break;
                  case 18:
                    b.fPos += 2;
                    break;
                  case 19:
                    b.oPos += 1;
                    break;
                  case 20:
                    b.oPos += 1;
                }
                b.prev = ta.CUBIC_CURVE_TO;
                d = b;
                A.context.bezierCurveTo(
                  d.buffer.f[d.fPos] - 0,
                  d.buffer.f[d.fPos + 1] - 0,
                  d.buffer.f[d.fPos + 2] - 0,
                  d.buffer.f[d.fPos + 3] - 0,
                  d.buffer.f[d.fPos + 4] - 0,
                  d.buffer.f[d.fPos + 5] - 0
                );
                break;
              case 5:
                switch (b.prev._hx_index) {
                  case 0:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 1:
                    b.iPos += 1;
                    b.fPos += 1;
                    break;
                  case 2:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 3:
                    b.oPos += 1;
                    break;
                  case 4:
                    b.fPos += 6;
                    break;
                  case 5:
                    b.fPos += 4;
                    break;
                  case 6:
                    b.fPos += 3;
                    break;
                  case 7:
                    b.fPos += 4;
                    break;
                  case 8:
                    b.oPos += 3;
                    break;
                  case 9:
                    b.fPos += 4;
                    break;
                  case 10:
                    b.fPos += 5;
                    b.oPos += 1;
                    break;
                  case 12:
                    b.oPos += 4;
                    break;
                  case 14:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 15:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 16:
                    b.oPos += 4;
                    b.iPos += 1;
                    b.fPos += 2;
                    b.bPos += 1;
                    break;
                  case 17:
                    b.fPos += 2;
                    break;
                  case 18:
                    b.fPos += 2;
                    break;
                  case 19:
                    b.oPos += 1;
                    break;
                  case 20:
                    b.oPos += 1;
                }
                b.prev = ta.CURVE_TO;
                d = b;
                A.context.quadraticCurveTo(
                  d.buffer.f[d.fPos] - 0,
                  d.buffer.f[d.fPos + 1] - 0,
                  d.buffer.f[d.fPos + 2] - 0,
                  d.buffer.f[d.fPos + 3] - 0
                );
                break;
              case 6:
                switch (b.prev._hx_index) {
                  case 0:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 1:
                    b.iPos += 1;
                    b.fPos += 1;
                    break;
                  case 2:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 3:
                    b.oPos += 1;
                    break;
                  case 4:
                    b.fPos += 6;
                    break;
                  case 5:
                    b.fPos += 4;
                    break;
                  case 6:
                    b.fPos += 3;
                    break;
                  case 7:
                    b.fPos += 4;
                    break;
                  case 8:
                    b.oPos += 3;
                    break;
                  case 9:
                    b.fPos += 4;
                    break;
                  case 10:
                    b.fPos += 5;
                    b.oPos += 1;
                    break;
                  case 12:
                    b.oPos += 4;
                    break;
                  case 14:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 15:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 16:
                    b.oPos += 4;
                    b.iPos += 1;
                    b.fPos += 2;
                    b.bPos += 1;
                    break;
                  case 17:
                    b.fPos += 2;
                    break;
                  case 18:
                    b.fPos += 2;
                    break;
                  case 19:
                    b.oPos += 1;
                    break;
                  case 20:
                    b.oPos += 1;
                }
                b.prev = ta.DRAW_CIRCLE;
                d = b;
                A.context.arc(
                  d.buffer.f[d.fPos] - 0,
                  d.buffer.f[d.fPos + 1] - 0,
                  d.buffer.f[d.fPos + 2],
                  0,
                  2 * Math.PI,
                  !0
                );
                break;
              case 7:
                switch (b.prev._hx_index) {
                  case 0:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 1:
                    b.iPos += 1;
                    b.fPos += 1;
                    break;
                  case 2:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 3:
                    b.oPos += 1;
                    break;
                  case 4:
                    b.fPos += 6;
                    break;
                  case 5:
                    b.fPos += 4;
                    break;
                  case 6:
                    b.fPos += 3;
                    break;
                  case 7:
                    b.fPos += 4;
                    break;
                  case 8:
                    b.oPos += 3;
                    break;
                  case 9:
                    b.fPos += 4;
                    break;
                  case 10:
                    b.fPos += 5;
                    b.oPos += 1;
                    break;
                  case 12:
                    b.oPos += 4;
                    break;
                  case 14:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 15:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 16:
                    b.oPos += 4;
                    b.iPos += 1;
                    b.fPos += 2;
                    b.bPos += 1;
                    break;
                  case 17:
                    b.fPos += 2;
                    break;
                  case 18:
                    b.fPos += 2;
                    break;
                  case 19:
                    b.oPos += 1;
                    break;
                  case 20:
                    b.oPos += 1;
                }
                b.prev = ta.DRAW_ELLIPSE;
                var e = b;
                d = e.buffer.f[e.fPos];
                var f = e.buffer.f[e.fPos + 1];
                var k = e.buffer.f[e.fPos + 2];
                var g = e.buffer.f[e.fPos + 3];
                d -= 0;
                f -= 0;
                e = (k / 2) * 0.5522848;
                var l = (g / 2) * 0.5522848;
                var h = d + k;
                var p = f + g;
                k = d + k / 2;
                g = f + g / 2;
                A.context.moveTo(d, g);
                A.context.bezierCurveTo(d, g - l, k - e, f, k, f);
                A.context.bezierCurveTo(k + e, f, h, g - l, h, g);
                A.context.bezierCurveTo(h, g + l, k + e, p, k, p);
                A.context.bezierCurveTo(k - e, p, d, g + l, d, g);
                break;
              case 9:
                switch (b.prev._hx_index) {
                  case 0:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 1:
                    b.iPos += 1;
                    b.fPos += 1;
                    break;
                  case 2:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 3:
                    b.oPos += 1;
                    break;
                  case 4:
                    b.fPos += 6;
                    break;
                  case 5:
                    b.fPos += 4;
                    break;
                  case 6:
                    b.fPos += 3;
                    break;
                  case 7:
                    b.fPos += 4;
                    break;
                  case 8:
                    b.oPos += 3;
                    break;
                  case 9:
                    b.fPos += 4;
                    break;
                  case 10:
                    b.fPos += 5;
                    b.oPos += 1;
                    break;
                  case 12:
                    b.oPos += 4;
                    break;
                  case 14:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 15:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 16:
                    b.oPos += 4;
                    b.iPos += 1;
                    b.fPos += 2;
                    b.bPos += 1;
                    break;
                  case 17:
                    b.fPos += 2;
                    break;
                  case 18:
                    b.fPos += 2;
                    break;
                  case 19:
                    b.oPos += 1;
                    break;
                  case 20:
                    b.oPos += 1;
                }
                b.prev = ta.DRAW_RECT;
                d = b;
                A.context.beginPath();
                A.context.rect(
                  d.buffer.f[d.fPos] - 0,
                  d.buffer.f[d.fPos + 1] - 0,
                  d.buffer.f[d.fPos + 2],
                  d.buffer.f[d.fPos + 3]
                );
                A.context.closePath();
                break;
              case 10:
                switch (b.prev._hx_index) {
                  case 0:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 1:
                    b.iPos += 1;
                    b.fPos += 1;
                    break;
                  case 2:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 3:
                    b.oPos += 1;
                    break;
                  case 4:
                    b.fPos += 6;
                    break;
                  case 5:
                    b.fPos += 4;
                    break;
                  case 6:
                    b.fPos += 3;
                    break;
                  case 7:
                    b.fPos += 4;
                    break;
                  case 8:
                    b.oPos += 3;
                    break;
                  case 9:
                    b.fPos += 4;
                    break;
                  case 10:
                    b.fPos += 5;
                    b.oPos += 1;
                    break;
                  case 12:
                    b.oPos += 4;
                    break;
                  case 14:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 15:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 16:
                    b.oPos += 4;
                    b.iPos += 1;
                    b.fPos += 2;
                    b.bPos += 1;
                    break;
                  case 17:
                    b.fPos += 2;
                    break;
                  case 18:
                    b.fPos += 2;
                    break;
                  case 19:
                    b.oPos += 1;
                    break;
                  case 20:
                    b.oPos += 1;
                }
                b.prev = ta.DRAW_ROUND_RECT;
                d = b;
                A.drawRoundRect(
                  d.buffer.f[d.fPos] - 0,
                  d.buffer.f[d.fPos + 1] - 0,
                  d.buffer.f[d.fPos + 2],
                  d.buffer.f[d.fPos + 3],
                  d.buffer.f[d.fPos + 4],
                  d.buffer.o[d.oPos]
                );
                break;
              case 17:
                switch (b.prev._hx_index) {
                  case 0:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 1:
                    b.iPos += 1;
                    b.fPos += 1;
                    break;
                  case 2:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 3:
                    b.oPos += 1;
                    break;
                  case 4:
                    b.fPos += 6;
                    break;
                  case 5:
                    b.fPos += 4;
                    break;
                  case 6:
                    b.fPos += 3;
                    break;
                  case 7:
                    b.fPos += 4;
                    break;
                  case 8:
                    b.oPos += 3;
                    break;
                  case 9:
                    b.fPos += 4;
                    break;
                  case 10:
                    b.fPos += 5;
                    b.oPos += 1;
                    break;
                  case 12:
                    b.oPos += 4;
                    break;
                  case 14:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 15:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 16:
                    b.oPos += 4;
                    b.iPos += 1;
                    b.fPos += 2;
                    b.bPos += 1;
                    break;
                  case 17:
                    b.fPos += 2;
                    break;
                  case 18:
                    b.fPos += 2;
                    break;
                  case 19:
                    b.oPos += 1;
                    break;
                  case 20:
                    b.oPos += 1;
                }
                b.prev = ta.LINE_TO;
                d = b;
                A.context.lineTo(
                  d.buffer.f[d.fPos] - 0,
                  d.buffer.f[d.fPos + 1] - 0
                );
                break;
              case 18:
                switch (b.prev._hx_index) {
                  case 0:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 1:
                    b.iPos += 1;
                    b.fPos += 1;
                    break;
                  case 2:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 3:
                    b.oPos += 1;
                    break;
                  case 4:
                    b.fPos += 6;
                    break;
                  case 5:
                    b.fPos += 4;
                    break;
                  case 6:
                    b.fPos += 3;
                    break;
                  case 7:
                    b.fPos += 4;
                    break;
                  case 8:
                    b.oPos += 3;
                    break;
                  case 9:
                    b.fPos += 4;
                    break;
                  case 10:
                    b.fPos += 5;
                    b.oPos += 1;
                    break;
                  case 12:
                    b.oPos += 4;
                    break;
                  case 14:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 15:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 16:
                    b.oPos += 4;
                    b.iPos += 1;
                    b.fPos += 2;
                    b.bPos += 1;
                    break;
                  case 17:
                    b.fPos += 2;
                    break;
                  case 18:
                    b.fPos += 2;
                    break;
                  case 19:
                    b.oPos += 1;
                    break;
                  case 20:
                    b.oPos += 1;
                }
                b.prev = ta.MOVE_TO;
                d = b;
                A.context.moveTo(
                  d.buffer.f[d.fPos] - 0,
                  d.buffer.f[d.fPos + 1] - 0
                );
                break;
              default:
                switch (b.prev._hx_index) {
                  case 0:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 1:
                    b.iPos += 1;
                    b.fPos += 1;
                    break;
                  case 2:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 3:
                    b.oPos += 1;
                    break;
                  case 4:
                    b.fPos += 6;
                    break;
                  case 5:
                    b.fPos += 4;
                    break;
                  case 6:
                    b.fPos += 3;
                    break;
                  case 7:
                    b.fPos += 4;
                    break;
                  case 8:
                    b.oPos += 3;
                    break;
                  case 9:
                    b.fPos += 4;
                    break;
                  case 10:
                    b.fPos += 5;
                    b.oPos += 1;
                    break;
                  case 12:
                    b.oPos += 4;
                    break;
                  case 14:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 15:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 16:
                    b.oPos += 4;
                    b.iPos += 1;
                    b.fPos += 2;
                    b.bPos += 1;
                    break;
                  case 17:
                    b.fPos += 2;
                    break;
                  case 18:
                    b.fPos += 2;
                    break;
                  case 19:
                    b.oPos += 1;
                    break;
                  case 20:
                    b.oPos += 1;
                }
                b.prev = d;
            }
          }
          b.destroy();
        }
      };
      A.setSmoothing = function (a) {
        A.allowSmoothing || (a = !1);
        A.context.imageSmoothingEnabled != a &&
          (A.context.imageSmoothingEnabled = a);
      };
      var Ul = function () {};
      h["openfl.display._internal.CanvasSimpleButton"] = Ul;
      Ul.__name__ = "openfl.display._internal.CanvasSimpleButton";
      Ul.renderDrawable = function (a, b) {
        !a.__renderable ||
          0 >= a.__worldAlpha ||
          null == a.__currentState ||
          (b.__pushMaskObject(a),
          b.__renderDrawable(a.__currentState),
          b.__popMaskObject(a),
          b.__renderEvent(a));
      };
      Ul.renderDrawableMask = function (a, b) {
        b.__renderDrawableMask(a.__currentState);
      };
      var fa = function () {};
      h["openfl.display._internal.CanvasTextField"] = fa;
      fa.__name__ = "openfl.display._internal.CanvasTextField";
      fa.renderDrawable = function (a, b) {
        b.__isDOM &&
          !a.__renderedOnCanvasWhileOnDOM &&
          ((a.__renderedOnCanvasWhileOnDOM = !0),
          1 == a.get_type() && a.replaceText(0, a.__text.length, a.__text),
          a.__isHTML &&
            a.__updateText(
              Ma.parse(
                a.__text,
                a.get_multiline(),
                a.__styleSheet,
                a.__textFormat,
                a.__textEngine.textFormatRanges
              )
            ),
          (a.__dirty = !0),
          (a.__layoutDirty = !0),
          a.__renderDirty ||
            ((a.__renderDirty = !0), a.__setParentRenderDirty()));
        if (
          null == a.get_mask() ||
          (0 < a.get_mask().get_width() && 0 < a.get_mask().get_height())
        )
          if (
            (b.__updateCacheBitmap(a, a.__dirty),
            null == a.__cacheBitmap || a.__isCacheBitmapRender)
          ) {
            var c = a.__textEngine,
              d = !(c.background || c.border),
              e = d ? c.textBounds : c.bounds,
              f = a.__graphics,
              k = 0;
            if (a.__dirty) {
              a.__updateLayout();
              null == f.__bounds && (f.__bounds = new ha());
              if (0 == a.get_text().length) {
                var g = c.bounds.width - 4,
                  l = a.get_defaultTextFormat().align;
                k = 3 == l ? 0 : 4 == l ? g : g / 2;
                switch (l) {
                  case 0:
                    k += a.get_defaultTextFormat().leftMargin / 2;
                    k -= a.get_defaultTextFormat().rightMargin / 2;
                    k += a.get_defaultTextFormat().indent / 2;
                    k += a.get_defaultTextFormat().blockIndent / 2;
                    break;
                  case 2:
                    k += a.get_defaultTextFormat().leftMargin;
                    k += a.get_defaultTextFormat().indent;
                    k += a.get_defaultTextFormat().blockIndent;
                    break;
                  case 3:
                    k += a.get_defaultTextFormat().leftMargin;
                    k += a.get_defaultTextFormat().indent;
                    k += a.get_defaultTextFormat().blockIndent;
                    break;
                  case 4:
                    k -= a.get_defaultTextFormat().rightMargin;
                }
                d && ((e.y = c.bounds.y), (e.x = k));
              }
              f.__bounds.copyFrom(e);
            }
            l = b.__pixelRatio;
            f.__update(b.__worldTransform, l);
            if (a.__dirty || f.__softwareDirty) {
              g = Math.round(f.__width * l);
              var h = Math.round(f.__height * l);
              if (
                !(
                  (null != c.text && "" != c.text) ||
                  c.background ||
                  c.border ||
                  c.__hasFocus ||
                  (1 == c.type && c.selectable)
                ) ||
                ((0 >= c.width || 0 >= c.height) && 2 != c.autoSize)
              )
                (a.__graphics.__canvas = null),
                  (a.__graphics.__context = null),
                  (a.__graphics.__bitmap = null),
                  (a.__graphics.__softwareDirty = !1),
                  a.__graphics.set___dirty(!1),
                  (a.__dirty = !1);
              else {
                null == a.__graphics.__canvas &&
                  ((a.__graphics.__canvas =
                    window.document.createElement("canvas")),
                  (a.__graphics.__context =
                    a.__graphics.__canvas.getContext("2d")));
                fa.context = f.__context;
                f.__canvas.width = g;
                f.__canvas.height = h;
                b.__isDOM &&
                  ((f.__canvas.style.width = Math.round(g / l) + "px"),
                  (f.__canvas.style.height = Math.round(h / l) + "px"));
                var p = xa.__pool.get();
                p.scale(l, l);
                p.concat(f.__renderTransform);
                fa.context.setTransform(p.a, p.b, p.c, p.d, p.tx, p.ty);
                xa.__pool.release(p);
                null == fa.clearRect &&
                  (fa.clearRect =
                    "undefined" !== typeof navigator &&
                    "undefined" !== typeof navigator.isCocoonJS);
                fa.clearRect &&
                  fa.context.clearRect(
                    0,
                    0,
                    f.__canvas.width,
                    f.__canvas.height
                  );
                if ((null != c.text && "" != c.text) || c.__hasFocus) {
                  g = c.text;
                  f.__context.imageSmoothingEnabled =
                    !b.__allowSmoothing ||
                    (0 == c.antiAliasType && 400 == c.sharpness)
                      ? !1
                      : !0;
                  if (c.border || c.background) {
                    fa.context.rect(0.5, 0.5, e.width - 1, e.height - 1);
                    if (c.background) {
                      var m = K.hex(c.backgroundColor & 16777215, 6);
                      fa.context.fillStyle = "#" + m;
                      fa.context.fill();
                    }
                    c.border &&
                      ((fa.context.lineWidth = 1),
                      (m = K.hex(c.borderColor & 16777215, 6)),
                      (fa.context.strokeStyle = "#" + m),
                      fa.context.stroke());
                  }
                  fa.context.textBaseline = "alphabetic";
                  fa.context.textAlign = "start";
                  h = -a.get_scrollH();
                  var n = (d = 0);
                  for (m = a.get_scrollV() - 1; n < m; ) {
                    var q = n++;
                    d -= c.lineHeights.get(q);
                  }
                  var z;
                  for (k = c.layoutGroups.iterator(); k.hasNext(); ) {
                    var t = k.next();
                    if (!(t.lineIndex < a.get_scrollV() - 1)) {
                      if (t.lineIndex > c.get_bottomScrollV() - 1) break;
                      p = "#" + K.hex(t.format.color & 16777215, 6);
                      fa.context.font = Vb.getFont(t.format);
                      fa.context.fillStyle = p;
                      fa.context.fillText(
                        g.substring(t.startIndex, t.endIndex),
                        t.offsetX + h - e.x,
                        t.offsetY + t.ascent + d - e.y
                      );
                      if (-1 < a.__caretIndex && c.selectable)
                        if (a.__selectionIndex == a.__caretIndex) {
                          if (
                            a.__showCursor &&
                            t.startIndex <= a.__caretIndex &&
                            t.endIndex >= a.__caretIndex
                          ) {
                            n = z = 0;
                            for (m = a.__caretIndex - t.startIndex; n < m; ) {
                              q = n++;
                              if (t.positions.length <= q) break;
                              z += t.positions[q];
                            }
                            n = 0;
                            m = a.get_scrollV();
                            for (q = t.lineIndex + 1; m < q; ) {
                              var w = m++;
                              n += c.lineHeights.get(w - 1);
                            }
                            fa.context.beginPath();
                            m = K.hex(t.format.color & 16777215, 6);
                            fa.context.strokeStyle = "#" + m;
                            fa.context.moveTo(
                              t.offsetX + z - a.get_scrollH() - e.x,
                              n + 2 - e.y
                            );
                            fa.context.lineWidth = 1;
                            fa.context.lineTo(
                              t.offsetX + z - a.get_scrollH() - e.x,
                              n +
                                Vb.getFormatHeight(a.get_defaultTextFormat()) -
                                1 -
                                e.y
                            );
                            fa.context.stroke();
                            fa.context.closePath();
                          }
                        } else if (
                          (t.startIndex <= a.__caretIndex &&
                            t.endIndex >= a.__caretIndex) ||
                          (t.startIndex <= a.__selectionIndex &&
                            t.endIndex >= a.__selectionIndex) ||
                          (t.startIndex > a.__caretIndex &&
                            t.endIndex < a.__selectionIndex) ||
                          (t.startIndex > a.__selectionIndex &&
                            t.endIndex < a.__caretIndex)
                        )
                          (z =
                            Math.min(a.__selectionIndex, a.__caretIndex) | 0),
                            (n =
                              Math.max(a.__selectionIndex, a.__caretIndex) | 0),
                            t.startIndex > z && (z = t.startIndex),
                            t.endIndex < n && (n = t.endIndex),
                            (q = a.getCharBoundaries(z)),
                            n >= t.endIndex
                              ? ((m = a.getCharBoundaries(t.endIndex - 1)),
                                null != m && (m.x += m.width + 2))
                              : (m = a.getCharBoundaries(n)),
                            null != q &&
                              null != m &&
                              ((fa.context.fillStyle = "#000000"),
                              fa.context.fillRect(
                                q.x + h - e.x,
                                q.y + d,
                                m.x - q.x,
                                t.height
                              ),
                              (fa.context.fillStyle = "#FFFFFF"),
                              fa.context.fillText(
                                g.substring(z, n),
                                h + q.x - e.x,
                                t.offsetY + t.ascent + d
                              ));
                      t.format.underline &&
                        (fa.context.beginPath(),
                        (fa.context.strokeStyle = p),
                        (fa.context.lineWidth = 1),
                        (p = t.offsetX + h - e.x),
                        (z =
                          Math.ceil(t.offsetY + d + t.ascent - e.y) +
                          Math.floor(0.185 * t.ascent) +
                          0.5),
                        fa.context.moveTo(p, z),
                        fa.context.lineTo(p + t.width, z),
                        fa.context.stroke(),
                        fa.context.closePath());
                    }
                  }
                } else {
                  if (c.border || c.background)
                    c.border
                      ? fa.context.rect(0.5, 0.5, e.width - 1, e.height - 1)
                      : fa.context.rect(0, 0, e.width, e.height),
                      c.background &&
                        ((m = K.hex(c.backgroundColor & 16777215, 6)),
                        (fa.context.fillStyle = "#" + m),
                        fa.context.fill()),
                      c.border &&
                        ((fa.context.lineWidth = 1),
                        (fa.context.lineCap = "square"),
                        (m = K.hex(c.borderColor & 16777215, 6)),
                        (fa.context.strokeStyle = "#" + m),
                        fa.context.stroke());
                  if (-1 < a.__caretIndex && c.selectable && a.__showCursor) {
                    h = -a.get_scrollH() + (d ? 0 : k);
                    n = d = 0;
                    for (m = a.get_scrollV() - 1; n < m; )
                      (q = n++), (d += c.lineHeights.get(q));
                    fa.context.beginPath();
                    m = K.hex(a.get_defaultTextFormat().color & 16777215, 6);
                    fa.context.strokeStyle = "#" + m;
                    fa.context.moveTo(h + 2.5, d + 2.5);
                    fa.context.lineWidth = 1;
                    fa.context.lineTo(
                      h + 2.5,
                      d + Vb.getFormatHeight(a.get_defaultTextFormat()) - 1
                    );
                    fa.context.stroke();
                    fa.context.closePath();
                  }
                }
                f.__bitmap = S.fromCanvas(a.__graphics.__canvas);
                f.__bitmapScale = l;
                f.__visible = !0;
                a.__dirty = !1;
                f.__softwareDirty = !1;
                f.set___dirty(!1);
              }
            }
            d = !1;
            0 == a.__textEngine.antiAliasType &&
              1 == a.__textEngine.gridFitType &&
              (d = b.context.imageSmoothingEnabled) &&
              (b.context.imageSmoothingEnabled = !1);
            if (
              (null != a.opaqueBackground || null != a.__graphics) &&
              a.__renderable &&
              ((e = b.__getAlpha(a.__worldAlpha)),
              !(0 >= e) &&
                (null != a.opaqueBackground &&
                  !a.__isCacheBitmapRender &&
                  0 < a.get_width() &&
                  0 < a.get_height() &&
                  (b.__setBlendMode(a.__worldBlendMode),
                  b.__pushMaskObject(a),
                  (c = b.context),
                  b.setTransform(a.__renderTransform, c),
                  (p = a.opaqueBackground),
                  (c.fillStyle =
                    "rgb(" +
                    ((p >>> 16) & 255) +
                    "," +
                    ((p >>> 8) & 255) +
                    "," +
                    (p & 255) +
                    ")"),
                  c.fillRect(0, 0, a.get_width(), a.get_height()),
                  b.__popMaskObject(a)),
                null != a.__graphics &&
                  a.__renderable &&
                  ((e = b.__getAlpha(a.__worldAlpha)),
                  !(0 >= e) &&
                    ((f = a.__graphics),
                    null != f &&
                      (A.render(f, b),
                      (g = f.__width),
                      (h = f.__height),
                      (k = f.__canvas),
                      null != k &&
                        f.__visible &&
                        1 <= g &&
                        1 <= h &&
                        ((t = f.__worldTransform),
                        (c = b.context),
                        (l = a.__scrollRect),
                        (w = a.__worldScale9Grid),
                        null == l || (0 < l.width && 0 < l.height)))))))
            ) {
              b.__setBlendMode(a.__worldBlendMode);
              b.__pushMaskObject(a);
              c.globalAlpha = e;
              if (null != w && 0 == t.b && 0 == t.c) {
                l = b.__pixelRatio;
                p = xa.__pool.get();
                p.translate(t.tx, t.ty);
                b.setTransform(p, c);
                xa.__pool.release(p);
                e = f.__bounds;
                n = f.__renderTransform.a / f.__bitmapScale;
                var x = f.__renderTransform.d / f.__bitmapScale;
                m = n * t.a;
                q = x * t.d;
                f = Math.max(1, Math.round(w.x * n));
                t = Math.round(w.y * x);
                p = Math.max(
                  1,
                  Math.round((e.get_right() - w.get_right()) * n)
                );
                z = Math.round((e.get_bottom() - w.get_bottom()) * x);
                n = Math.round(w.width * n);
                w = Math.round(w.height * x);
                x = Math.round(f / l);
                var D = Math.round(t / l),
                  y = Math.round(p / l);
                l = Math.round(z / l);
                m = e.width * m - x - y;
                e = e.height * q - D - l;
                b.applySmoothing(c, !1);
                0 != n && 0 != w
                  ? (c.drawImage(k, 0, 0, f, t, 0, 0, x, D),
                    c.drawImage(k, f, 0, n, t, x, 0, m, D),
                    c.drawImage(k, f + n, 0, p, t, x + m, 0, y, D),
                    c.drawImage(k, 0, t, f, w, 0, D, x, e),
                    c.drawImage(k, f, t, n, w, x, D, m, e),
                    c.drawImage(k, f + n, t, p, w, x + m, D, y, e),
                    c.drawImage(k, 0, t + w, f, z, 0, D + e, x, l),
                    c.drawImage(k, f, t + w, n, z, x, D + e, m, l),
                    c.drawImage(k, f + n, t + w, p, z, x + m, D + e, y, l))
                  : 0 == n && 0 != w
                  ? ((f = x + m + y),
                    c.drawImage(k, 0, 0, g, t, 0, 0, f, D),
                    c.drawImage(k, 0, t, g, w, 0, D, f, e),
                    c.drawImage(k, 0, t + w, g, z, 0, D + e, f, l))
                  : 0 == w &&
                    0 != n &&
                    ((e = D + e + l),
                    c.drawImage(k, 0, 0, f, h, 0, 0, x, e),
                    c.drawImage(k, f, 0, n, h, x, 0, m, e),
                    c.drawImage(k, f + n, 0, p, h, x + m, 0, y, e));
              } else b.setTransform(t, c), c.drawImage(k, 0, 0, g, h);
              b.__popMaskObject(a);
            }
            d && (b.context.imageSmoothingEnabled = !0);
          } else
            (a = a.__cacheBitmap),
              a.__renderable &&
                ((e = b.__getAlpha(a.__worldAlpha)),
                0 < e &&
                  null != a.__bitmapData &&
                  a.__bitmapData.__isValid &&
                  a.__bitmapData.readable &&
                  ((c = b.context),
                  b.__setBlendMode(a.__worldBlendMode),
                  b.__pushMaskObject(a, !1),
                  Ra.convertToCanvas(a.__bitmapData.image),
                  (c.globalAlpha = e),
                  (l = a.__scrollRect),
                  b.setTransform(a.__renderTransform, c),
                  (b.__allowSmoothing && a.smoothing) ||
                    (c.imageSmoothingEnabled = !1),
                  null == l
                    ? c.drawImage(
                        a.__bitmapData.image.get_src(),
                        0,
                        0,
                        a.__bitmapData.image.width,
                        a.__bitmapData.image.height
                      )
                    : c.drawImage(
                        a.__bitmapData.image.get_src(),
                        l.x,
                        l.y,
                        l.width,
                        l.height,
                        l.x,
                        l.y,
                        l.width,
                        l.height
                      ),
                  (b.__allowSmoothing && a.smoothing) ||
                    (c.imageSmoothingEnabled = !0),
                  b.__popMaskObject(a, !1)));
      };
      fa.renderDrawableMask = function (a, b) {
        Ah.renderDrawableMask(a, b);
      };
      var Cg = function () {};
      h["openfl.display._internal.CanvasTilemap"] = Cg;
      Cg.__name__ = "openfl.display._internal.CanvasTilemap";
      Cg.renderTileContainer = function (a, b, c, d, e, f, k, g, l, h, p, m) {
        var r = b.context,
          n = b.__roundPixels,
          q = xa.__pool.get(),
          u = a.__tiles,
          t,
          z = null,
          w = 0;
        for (a = a.__length; w < a; ) {
          var J = w++;
          var x = u[J];
          q.setTo(1, 0, 0, 1, -x.get_originX(), -x.get_originY());
          q.concat(x.get_matrix());
          q.concat(c);
          n && ((q.tx = Math.round(q.tx)), (q.ty = Math.round(q.ty)));
          var D = null != x.get_tileset() ? x.get_tileset() : d;
          J = x.get_alpha() * k;
          if ((t = x.get_visible()) && !(0 >= J))
            if (
              (f || (J = 1),
              g && (z = null != x.__blendMode ? x.__blendMode : l),
              0 < x.__length)
            )
              Cg.renderTileContainer(x, b, q, D, e, f, J, g, z, h, p, m);
            else if (null != D) {
              t = x.get_id();
              if (-1 == t) {
                if (
                  ((x = x.__rect), null == x || 0 >= x.width || 0 >= x.height)
                )
                  continue;
              } else {
                x = D.__data[t];
                if (null == x) continue;
                m.setTo(x.x, x.y, x.width, x.height);
                x = m;
              }
              D = D.__bitmapData;
              null != D &&
                null != D.image &&
                (D != h &&
                  (null == D.image.buffer.__srcImage &&
                    Ra.convertToCanvas(D.image),
                  (p = D.image.get_src()),
                  (h = D)),
                (r.globalAlpha = J),
                g && b.__setBlendMode(z),
                b.setTransform(q, r),
                r.drawImage(
                  p,
                  x.x,
                  x.y,
                  x.width,
                  x.height,
                  0,
                  0,
                  x.width,
                  x.height
                ));
            }
        }
        xa.__pool.release(q);
      };
      Cg.renderDrawable = function (a, b) {
        b.__updateCacheBitmap(a, !1);
        if (null == a.__cacheBitmap || a.__isCacheBitmapRender) {
          if (
            !(
              (null == a.opaqueBackground && null == a.__graphics) ||
              !a.__renderable ||
              ((w = b.__getAlpha(a.__worldAlpha)), 0 >= w)
            )
          ) {
            if (
              null != a.opaqueBackground &&
              !a.__isCacheBitmapRender &&
              0 < a.get_width() &&
              0 < a.get_height()
            ) {
              b.__setBlendMode(a.__worldBlendMode);
              b.__pushMaskObject(a);
              x = b.context;
              b.setTransform(a.__renderTransform, x);
              var c = a.opaqueBackground;
              x.fillStyle =
                "rgb(" +
                ((c >>> 16) & 255) +
                "," +
                ((c >>> 8) & 255) +
                "," +
                (c & 255) +
                ")";
              x.fillRect(0, 0, a.get_width(), a.get_height());
              b.__popMaskObject(a);
            }
            if (
              null != a.__graphics &&
              a.__renderable &&
              ((w = b.__getAlpha(a.__worldAlpha)), !(0 >= w))
            ) {
              var d = a.__graphics;
              if (null != d) {
                A.render(d, b);
                var e = d.__width,
                  f = d.__height;
                c = d.__canvas;
                if (null != c && d.__visible && 1 <= e && 1 <= f) {
                  var k = d.__worldTransform;
                  x = b.context;
                  D = a.__scrollRect;
                  var g = a.__worldScale9Grid;
                  if (null == D || (0 < D.width && 0 < D.height)) {
                    b.__setBlendMode(a.__worldBlendMode);
                    b.__pushMaskObject(a);
                    x.globalAlpha = w;
                    if (null != g && 0 == k.b && 0 == k.c) {
                      var l = b.__pixelRatio;
                      w = xa.__pool.get();
                      w.translate(k.tx, k.ty);
                      b.setTransform(w, x);
                      xa.__pool.release(w);
                      w = d.__bounds;
                      var h = d.__renderTransform.a / d.__bitmapScale,
                        p = d.__renderTransform.d / d.__bitmapScale,
                        m = h * k.a,
                        n = p * k.d;
                      k = Math.max(1, Math.round(g.x * h));
                      d = Math.round(g.y * p);
                      D = Math.max(
                        1,
                        Math.round((w.get_right() - g.get_right()) * h)
                      );
                      var q = Math.round((w.get_bottom() - g.get_bottom()) * p);
                      h = Math.round(g.width * h);
                      g = Math.round(g.height * p);
                      p = Math.round(k / l);
                      var t = Math.round(d / l),
                        z = Math.round(D / l);
                      l = Math.round(q / l);
                      m = w.width * m - p - z;
                      w = w.height * n - t - l;
                      b.applySmoothing(x, !1);
                      0 != h && 0 != g
                        ? (x.drawImage(c, 0, 0, k, d, 0, 0, p, t),
                          x.drawImage(c, k, 0, h, d, p, 0, m, t),
                          x.drawImage(c, k + h, 0, D, d, p + m, 0, z, t),
                          x.drawImage(c, 0, d, k, g, 0, t, p, w),
                          x.drawImage(c, k, d, h, g, p, t, m, w),
                          x.drawImage(c, k + h, d, D, g, p + m, t, z, w),
                          x.drawImage(c, 0, d + g, k, q, 0, t + w, p, l),
                          x.drawImage(c, k, d + g, h, q, p, t + w, m, l),
                          x.drawImage(
                            c,
                            k + h,
                            d + g,
                            D,
                            q,
                            p + m,
                            t + w,
                            z,
                            l
                          ))
                        : 0 == h && 0 != g
                        ? ((f = p + m + z),
                          x.drawImage(c, 0, 0, e, d, 0, 0, f, t),
                          x.drawImage(c, 0, d, e, g, 0, t, f, w),
                          x.drawImage(c, 0, d + g, e, q, 0, t + w, f, l))
                        : 0 == g &&
                          0 != h &&
                          ((e = t + w + l),
                          x.drawImage(c, 0, 0, k, f, 0, 0, p, e),
                          x.drawImage(c, k, 0, h, f, p, 0, m, e),
                          x.drawImage(c, k + h, 0, D, f, p + m, 0, z, e));
                    } else b.setTransform(k, x), x.drawImage(c, 0, 0, e, f);
                    b.__popMaskObject(a);
                  }
                }
              }
            }
          }
          a.__renderable &&
            0 != a.__group.__tiles.length &&
            ((w = b.__getAlpha(a.__worldAlpha)),
            0 >= w ||
              ((x = b.context),
              b.__setBlendMode(a.__worldBlendMode),
              b.__pushMaskObject(a),
              (c = ha.__pool.get()),
              c.setTo(0, 0, a.__width, a.__height),
              b.__pushMaskRect(c, a.__renderTransform),
              (b.__allowSmoothing && a.smoothing) ||
                (x.imageSmoothingEnabled = !1),
              Cg.renderTileContainer(
                a.__group,
                b,
                a.__renderTransform,
                a.__tileset,
                b.__allowSmoothing && a.smoothing,
                a.tileAlphaEnabled,
                w,
                a.tileBlendModeEnabled,
                a.__worldBlendMode,
                null,
                null,
                c
              ),
              (b.__allowSmoothing && a.smoothing) ||
                (x.imageSmoothingEnabled = !0),
              b.__popMaskRect(),
              b.__popMaskObject(a),
              ha.__pool.release(c)));
        } else if (((c = a.__cacheBitmap), c.__renderable)) {
          var w = b.__getAlpha(c.__worldAlpha);
          if (
            0 < w &&
            null != c.__bitmapData &&
            c.__bitmapData.__isValid &&
            c.__bitmapData.readable
          ) {
            var x = b.context;
            b.__setBlendMode(c.__worldBlendMode);
            b.__pushMaskObject(c, !1);
            Ra.convertToCanvas(c.__bitmapData.image);
            x.globalAlpha = w;
            var D = c.__scrollRect;
            b.setTransform(c.__renderTransform, x);
            (b.__allowSmoothing && c.smoothing) ||
              (x.imageSmoothingEnabled = !1);
            null == D
              ? x.drawImage(
                  c.__bitmapData.image.get_src(),
                  0,
                  0,
                  c.__bitmapData.image.width,
                  c.__bitmapData.image.height
                )
              : x.drawImage(
                  c.__bitmapData.image.get_src(),
                  D.x,
                  D.y,
                  D.width,
                  D.height,
                  D.x,
                  D.y,
                  D.width,
                  D.height
                );
            (b.__allowSmoothing && c.smoothing) ||
              (x.imageSmoothingEnabled = !0);
            b.__popMaskObject(c, !1);
          }
        }
        b.__renderEvent(a);
      };
      Cg.renderDrawableMask = function (a, b) {};
      var Bh = function () {};
      h["openfl.display._internal.CanvasVideo"] = Bh;
      Bh.__name__ = "openfl.display._internal.CanvasVideo";
      Bh.render = function (a, b) {
        if (a.__renderable && null != a.__stream) {
          var c = b.__getAlpha(a.__worldAlpha);
          if (!(0 >= c)) {
            var d = b.context;
            if (null != a.__stream.__video) {
              b.__setBlendMode(a.__worldBlendMode);
              b.__pushMaskObject(a);
              d.globalAlpha = c;
              c = a.__scrollRect;
              var e = a.smoothing;
              b.setTransform(a.__worldTransform, d);
              e || (d.imageSmoothingEnabled = !1);
              null == c
                ? d.drawImage(
                    a.__stream.__video,
                    0,
                    0,
                    a.get_width(),
                    a.get_height()
                  )
                : d.drawImage(
                    a.__stream.__video,
                    c.x,
                    c.y,
                    c.width,
                    c.height,
                    c.x,
                    c.y,
                    c.width,
                    c.height
                  );
              e || (d.imageSmoothingEnabled = !0);
              b.__popMaskObject(a);
            }
          }
        }
      };
      Bh.renderDrawable = function (a, b) {
        Bh.render(a, b);
        b.__renderEvent(a);
      };
      Bh.renderDrawableMask = function (a, b) {};
      var Me = function () {};
      h["openfl.display._internal.Context3DBitmap"] = Me;
      Me.__name__ = "openfl.display._internal.Context3DBitmap";
      Me.render = function (a, b) {
        if (
          a.__renderable &&
          !(0 >= a.__worldAlpha) &&
          null != a.__bitmapData &&
          a.__bitmapData.__isValid
        ) {
          var c = b.__context3D;
          b.__setBlendMode(a.__worldBlendMode);
          b.__pushMaskObject(a);
          var d = b.__initDisplayShader(a.__worldShader);
          b.setShader(d);
          b.applyBitmapData(
            a.__bitmapData,
            b.__allowSmoothing && (a.smoothing || b.__upscaled)
          );
          b.applyMatrix(b.__getMatrix(a.__renderTransform, a.pixelSnapping));
          b.applyAlpha(a.__worldAlpha);
          b.applyColorTransform(a.__worldColorTransform);
          b.updateShader();
          var e = a.__bitmapData.getVertexBuffer(c);
          null != d.__position &&
            c.setVertexBufferAt(d.__position.index, e, 0, 3);
          null != d.__textureCoord &&
            c.setVertexBufferAt(d.__textureCoord.index, e, 3, 2);
          d = a.__bitmapData.getIndexBuffer(c);
          c.drawTriangles(d);
          b.__clearShader();
          b.__popMaskObject(a);
        }
      };
      Me.renderDrawable = function (a, b) {
        b.__updateCacheBitmap(a, !1);
        null != a.__bitmapData &&
          null != a.__bitmapData.image &&
          (a.__imageVersion = a.__bitmapData.image.version);
        if (null == a.__cacheBitmap || a.__isCacheBitmapRender) {
          if (
            !(
              (null == a.opaqueBackground && null == a.__graphics) ||
              !a.__renderable ||
              0 >= a.__worldAlpha
            )
          ) {
            if (
              null != a.opaqueBackground &&
              !a.__isCacheBitmapRender &&
              0 < a.get_width() &&
              0 < a.get_height()
            ) {
              b.__setBlendMode(a.__worldBlendMode);
              b.__pushMaskObject(a);
              var c = b.__context3D,
                d = ha.__pool.get();
              d.setTo(0, 0, a.get_width(), a.get_height());
              b.__pushMaskRect(d, a.__renderTransform);
              var e = a.opaqueBackground;
              c.clear(
                ((e >>> 16) & 255) / 255,
                ((e >>> 8) & 255) / 255,
                (e & 255) / 255,
                1,
                0,
                0,
                1
              );
              b.__popMaskRect();
              b.__popMaskObject(a);
              ha.__pool.release(d);
            }
            null != a.__graphics && jg.render(a, b);
          }
          Me.render(a, b);
        } else Me.render(a.__cacheBitmap, b);
        b.__renderEvent(a);
      };
      Me.renderDrawableMask = function (a, b) {
        Me.renderMask(a, b);
      };
      Me.renderMask = function (a, b) {
        if (null != a.__bitmapData && a.__bitmapData.__isValid) {
          var c = b.__context3D,
            d = b.__maskShader;
          b.setShader(d);
          b.applyBitmapData(Ch.opaqueBitmapData, !0);
          b.applyMatrix(b.__getMatrix(a.__renderTransform, a.pixelSnapping));
          b.updateShader();
          var e = a.__bitmapData.getVertexBuffer(c);
          null != d.__position &&
            c.setVertexBufferAt(d.__position.index, e, 0, 3);
          null != d.__textureCoord &&
            c.setVertexBufferAt(d.__textureCoord.index, e, 3, 2);
          a = a.__bitmapData.getIndexBuffer(c);
          c.drawTriangles(a);
          b.__clearShader();
        }
      };
      var am = function () {};
      h["openfl.display._internal.Context3DBitmapData"] = am;
      am.__name__ = "openfl.display._internal.Context3DBitmapData";
      am.renderDrawable = function (a, b) {
        var c = b.__context3D;
        b.__setBlendMode(10);
        var d = b.__defaultDisplayShader;
        b.setShader(d);
        b.applyBitmapData(a, b.__upscaled);
        b.applyMatrix(b.__getMatrix(a.__worldTransform, 1));
        b.applyAlpha(a.__worldAlpha);
        b.applyColorTransform(a.__worldColorTransform);
        b.updateShader();
        var e = a.getVertexBuffer(c);
        null != d.__position &&
          c.setVertexBufferAt(d.__position.index, e, 0, 3);
        null != d.__textureCoord &&
          c.setVertexBufferAt(d.__textureCoord.index, e, 3, 2);
        a = a.getIndexBuffer(c);
        c.drawTriangles(a);
        b.__clearShader();
      };
      am.renderDrawableMask = function (a, b) {
        var c = b.__context3D,
          d = b.__maskShader;
        b.setShader(d);
        b.applyBitmapData(a, b.__upscaled);
        b.applyMatrix(b.__getMatrix(a.__worldTransform, 1));
        b.updateShader();
        var e = a.getVertexBuffer(c);
        null != d.__position &&
          c.setVertexBufferAt(d.__position.index, e, 0, 3);
        null != d.__textureCoord &&
          c.setVertexBufferAt(d.__textureCoord.index, e, 3, 2);
        a = a.getIndexBuffer(c);
        c.drawTriangles(a);
        b.__clearShader();
      };
      var Jj = function (a, b, c, d) {
        this.context3D = a;
        this.elementType = b;
        this.dataPerVertex = d;
        this.vertexCount = this.indexCount = 0;
        this.resize(c);
      };
      h["openfl.display._internal.Context3DBuffer"] = Jj;
      Jj.__name__ = "openfl.display._internal.Context3DBuffer";
      Jj.prototype = {
        flushVertexBufferData: function () {
          this.vertexBufferData.length > this.vertexCount &&
            ((this.vertexCount = this.vertexBufferData.length),
            (this.vertexBuffer = this.context3D.createVertexBuffer(
              this.vertexCount,
              this.dataPerVertex,
              0
            )));
          this.vertexBuffer.uploadFromTypedArray(
            bj.toArrayBufferView(this.vertexBufferData)
          );
        },
        resize: function (a, b) {
          null == b && (b = -1);
          this.elementCount = a;
          -1 == b && (b = this.dataPerVertex);
          b != this.dataPerVertex &&
            ((this.vertexBuffer = null),
            (this.vertexCount = 0),
            (this.dataPerVertex = b));
          var c = 0;
          switch (this.elementType._hx_index) {
            case 0:
              c = 4 * a;
              break;
            case 1:
              c = 3 * a;
              break;
            case 2:
              c = 3 * a;
          }
          b *= c;
          if (null == this.vertexBufferData) {
            var d = (c = null),
              e = null,
              f = null,
              k = null;
            this.vertexBufferData = b =
              null != b
                ? new Float32Array(b)
                : null != c
                ? new Float32Array(c)
                : null != d
                ? new Float32Array(d.__array)
                : null != e
                ? new Float32Array(e)
                : null != f
                ? null == k
                  ? new Float32Array(f, 0)
                  : new Float32Array(f, 0, k)
                : null;
          } else
            b > this.vertexBufferData.length &&
              ((a = this.vertexBufferData),
              (k = f = e = d = c = null),
              (this.vertexBufferData = b =
                null != b
                  ? new Float32Array(b)
                  : null != c
                  ? new Float32Array(c)
                  : null != d
                  ? new Float32Array(d.__array)
                  : null != e
                  ? new Float32Array(e)
                  : null != f
                  ? null == k
                    ? new Float32Array(f, 0)
                    : new Float32Array(f, 0, k)
                  : null),
              this.vertexBufferData.set(a));
        },
        __class__: Jj,
      };
      var hm = (w["openfl.display._internal.Context3DElementType"] = {
        __ename__: "openfl.display._internal.Context3DElementType",
        __constructs__: null,
        QUADS: {
          _hx_name: "QUADS",
          _hx_index: 0,
          __enum__: "openfl.display._internal.Context3DElementType",
          toString: p,
        },
        TRIANGLES: {
          _hx_name: "TRIANGLES",
          _hx_index: 1,
          __enum__: "openfl.display._internal.Context3DElementType",
          toString: p,
        },
        TRIANGLE_INDICES: {
          _hx_name: "TRIANGLE_INDICES",
          _hx_index: 2,
          __enum__: "openfl.display._internal.Context3DElementType",
          toString: p,
        },
      });
      hm.__constructs__ = [hm.QUADS, hm.TRIANGLES, hm.TRIANGLE_INDICES];
      var Dh = function () {};
      h["openfl.display._internal.Context3DDisplayObject"] = Dh;
      Dh.__name__ = "openfl.display._internal.Context3DDisplayObject";
      Dh.renderDrawable = function (a, b) {
        b.__updateCacheBitmap(a, !1);
        if (null != a.__cacheBitmap && !a.__isCacheBitmapRender)
          Me.render(a.__cacheBitmap, b);
        else if (
          !(
            (null == a.opaqueBackground && null == a.__graphics) ||
            !a.__renderable ||
            0 >= a.__worldAlpha
          )
        ) {
          if (
            null != a.opaqueBackground &&
            !a.__isCacheBitmapRender &&
            0 < a.get_width() &&
            0 < a.get_height()
          ) {
            b.__setBlendMode(a.__worldBlendMode);
            b.__pushMaskObject(a);
            var c = b.__context3D,
              d = ha.__pool.get();
            d.setTo(0, 0, a.get_width(), a.get_height());
            b.__pushMaskRect(d, a.__renderTransform);
            var e = a.opaqueBackground;
            c.clear(
              ((e >>> 16) & 255) / 255,
              ((e >>> 8) & 255) / 255,
              (e & 255) / 255,
              1,
              0,
              0,
              1
            );
            b.__popMaskRect();
            b.__popMaskObject(a);
            ha.__pool.release(d);
          }
          null != a.__graphics && jg.render(a, b);
        }
        b.__renderEvent(a);
      };
      Dh.renderDrawableMask = function (a, b) {
        null != a.__graphics && jg.renderMask(a, b);
      };
      var bm = function () {};
      h["openfl.display._internal.Context3DDisplayObjectContainer"] = bm;
      bm.__name__ = "openfl.display._internal.Context3DDisplayObjectContainer";
      bm.renderDrawable = function (a, b) {
        for (var c = a.__removedChildren.iterator(); c.hasNext(); ) {
          var d = c.next();
          null == d.stage && d.__cleanup();
        }
        a.__removedChildren.set_length(0);
        if (
          a.__renderable &&
          !(0 >= a.__worldAlpha) &&
          (Dh.renderDrawable(a, b),
          null == a.__cacheBitmap || a.__isCacheBitmapRender)
        ) {
          if (0 < a.__children.length)
            if ((b.__pushMaskObject(a), null != b.__stage)) {
              c = 0;
              for (d = a.__children; c < d.length; ) {
                var e = d[c];
                ++c;
                b.__renderDrawable(e);
                e.__renderDirty = !1;
              }
              a.__renderDirty = !1;
            } else
              for (c = 0, d = a.__children; c < d.length; )
                (e = d[c]), ++c, b.__renderDrawable(e);
          0 < a.__children.length && b.__popMaskObject(a);
        }
      };
      bm.renderDrawableMask = function (a, b) {
        for (var c = a.__removedChildren.iterator(); c.hasNext(); ) {
          var d = c.next();
          null == d.stage && d.__cleanup();
        }
        a.__removedChildren.set_length(0);
        null != a.__graphics && jg.renderMask(a, b);
        c = 0;
        for (a = a.__children; c < a.length; )
          (d = a[c]), ++c, b.__renderDrawableMask(d);
      };
      var bc = function () {};
      h["openfl.display._internal.Context3DGraphics"] = bc;
      bc.__name__ = "openfl.display._internal.Context3DGraphics";
      bc.buildBuffer = function (a, b) {
        var c,
          d = (c = 0),
          e = 0,
          f = new ig(a.__commands);
        b = b.__context3D;
        for (
          var k = ha.__pool.get(),
            g = xa.__pool.get(),
            l = null,
            h = 0,
            p = a.__commands.types;
          h < p.length;

        ) {
          var m = p[h];
          ++h;
          switch (m._hx_index) {
            case 0:
              switch (f.prev._hx_index) {
                case 0:
                  f.oPos += 2;
                  f.bPos += 2;
                  break;
                case 1:
                  f.iPos += 1;
                  f.fPos += 1;
                  break;
                case 2:
                  f.oPos += 4;
                  f.iiPos += 2;
                  f.ffPos += 1;
                  f.fPos += 1;
                  break;
                case 3:
                  f.oPos += 1;
                  break;
                case 4:
                  f.fPos += 6;
                  break;
                case 5:
                  f.fPos += 4;
                  break;
                case 6:
                  f.fPos += 3;
                  break;
                case 7:
                  f.fPos += 4;
                  break;
                case 8:
                  f.oPos += 3;
                  break;
                case 9:
                  f.fPos += 4;
                  break;
                case 10:
                  f.fPos += 5;
                  f.oPos += 1;
                  break;
                case 12:
                  f.oPos += 4;
                  break;
                case 14:
                  f.oPos += 2;
                  f.bPos += 2;
                  break;
                case 15:
                  f.oPos += 4;
                  f.iiPos += 2;
                  f.ffPos += 1;
                  f.fPos += 1;
                  break;
                case 16:
                  f.oPos += 4;
                  f.iPos += 1;
                  f.fPos += 2;
                  f.bPos += 1;
                  break;
                case 17:
                  f.fPos += 2;
                  break;
                case 18:
                  f.fPos += 2;
                  break;
                case 19:
                  f.oPos += 1;
                  break;
                case 20:
                  f.oPos += 1;
              }
              f.prev = ta.BEGIN_BITMAP_FILL;
              l = f;
              l = l.buffer.o[l.oPos];
              break;
            case 1:
              l = null;
              switch (f.prev._hx_index) {
                case 0:
                  f.oPos += 2;
                  f.bPos += 2;
                  break;
                case 1:
                  f.iPos += 1;
                  f.fPos += 1;
                  break;
                case 2:
                  f.oPos += 4;
                  f.iiPos += 2;
                  f.ffPos += 1;
                  f.fPos += 1;
                  break;
                case 3:
                  f.oPos += 1;
                  break;
                case 4:
                  f.fPos += 6;
                  break;
                case 5:
                  f.fPos += 4;
                  break;
                case 6:
                  f.fPos += 3;
                  break;
                case 7:
                  f.fPos += 4;
                  break;
                case 8:
                  f.oPos += 3;
                  break;
                case 9:
                  f.fPos += 4;
                  break;
                case 10:
                  f.fPos += 5;
                  f.oPos += 1;
                  break;
                case 12:
                  f.oPos += 4;
                  break;
                case 14:
                  f.oPos += 2;
                  f.bPos += 2;
                  break;
                case 15:
                  f.oPos += 4;
                  f.iiPos += 2;
                  f.ffPos += 1;
                  f.fPos += 1;
                  break;
                case 16:
                  f.oPos += 4;
                  f.iPos += 1;
                  f.fPos += 2;
                  f.bPos += 1;
                  break;
                case 17:
                  f.fPos += 2;
                  break;
                case 18:
                  f.fPos += 2;
                  break;
                case 19:
                  f.oPos += 1;
                  break;
                case 20:
                  f.oPos += 1;
              }
              f.prev = m;
              break;
            case 3:
              switch (f.prev._hx_index) {
                case 0:
                  f.oPos += 2;
                  f.bPos += 2;
                  break;
                case 1:
                  f.iPos += 1;
                  f.fPos += 1;
                  break;
                case 2:
                  f.oPos += 4;
                  f.iiPos += 2;
                  f.ffPos += 1;
                  f.fPos += 1;
                  break;
                case 3:
                  f.oPos += 1;
                  break;
                case 4:
                  f.fPos += 6;
                  break;
                case 5:
                  f.fPos += 4;
                  break;
                case 6:
                  f.fPos += 3;
                  break;
                case 7:
                  f.fPos += 4;
                  break;
                case 8:
                  f.oPos += 3;
                  break;
                case 9:
                  f.fPos += 4;
                  break;
                case 10:
                  f.fPos += 5;
                  f.oPos += 1;
                  break;
                case 12:
                  f.oPos += 4;
                  break;
                case 14:
                  f.oPos += 2;
                  f.bPos += 2;
                  break;
                case 15:
                  f.oPos += 4;
                  f.iiPos += 2;
                  f.ffPos += 1;
                  f.fPos += 1;
                  break;
                case 16:
                  f.oPos += 4;
                  f.iPos += 1;
                  f.fPos += 2;
                  f.bPos += 1;
                  break;
                case 17:
                  f.fPos += 2;
                  break;
                case 18:
                  f.fPos += 2;
                  break;
                case 19:
                  f.oPos += 1;
                  break;
                case 20:
                  f.oPos += 1;
              }
              f.prev = ta.BEGIN_SHADER_FILL;
              l = f;
              m = l.buffer.o[l.oPos];
              l = null;
              if (null != m)
                for (var n = 0, q = m.inputCount; n < q; ) {
                  var t = n++;
                  if ("bitmap" == m.inputRefs[t].name) {
                    l = m.inputs[t];
                    break;
                  }
                }
              break;
            case 8:
              if (null != l) {
                switch (f.prev._hx_index) {
                  case 0:
                    f.oPos += 2;
                    f.bPos += 2;
                    break;
                  case 1:
                    f.iPos += 1;
                    f.fPos += 1;
                    break;
                  case 2:
                    f.oPos += 4;
                    f.iiPos += 2;
                    f.ffPos += 1;
                    f.fPos += 1;
                    break;
                  case 3:
                    f.oPos += 1;
                    break;
                  case 4:
                    f.fPos += 6;
                    break;
                  case 5:
                    f.fPos += 4;
                    break;
                  case 6:
                    f.fPos += 3;
                    break;
                  case 7:
                    f.fPos += 4;
                    break;
                  case 8:
                    f.oPos += 3;
                    break;
                  case 9:
                    f.fPos += 4;
                    break;
                  case 10:
                    f.fPos += 5;
                    f.oPos += 1;
                    break;
                  case 12:
                    f.oPos += 4;
                    break;
                  case 14:
                    f.oPos += 2;
                    f.bPos += 2;
                    break;
                  case 15:
                    f.oPos += 4;
                    f.iiPos += 2;
                    f.ffPos += 1;
                    f.fPos += 1;
                    break;
                  case 16:
                    f.oPos += 4;
                    f.iPos += 1;
                    f.fPos += 2;
                    f.bPos += 1;
                    break;
                  case 17:
                    f.fPos += 2;
                    break;
                  case 18:
                    f.fPos += 2;
                    break;
                  case 19:
                    f.oPos += 1;
                    break;
                  case 20:
                    f.oPos += 1;
                }
                f.prev = ta.DRAW_QUADS;
                q = f;
                m = q.buffer.o[q.oPos];
                n = q.buffer.o[q.oPos + 1];
                q = q.buffer.o[q.oPos + 2];
                t = null != n;
                var z = !1,
                  w = !1,
                  x = t ? n.get_length() : Math.floor(m.get_length() / 4);
                if (0 == x) return;
                null != q &&
                  (q.get_length() >= 6 * x
                    ? (w = z = !0)
                    : q.get_length() >= 4 * x
                    ? (z = !0)
                    : q.get_length() >= 2 * x && (w = !0));
                null == a.__quadBuffer
                  ? (a.__quadBuffer = new Jj(b, hm.QUADS, x, 4))
                  : a.__quadBuffer.resize(c + x, 4);
                for (
                  var D,
                    y,
                    A,
                    C,
                    E,
                    F,
                    B,
                    G,
                    v,
                    K,
                    I,
                    U,
                    O,
                    Z,
                    M = a.__quadBuffer.vertexBufferData,
                    N = l.width,
                    Ha = l.height,
                    P = 0,
                    H = x;
                  P < H;

                )
                  (C = P++),
                    (D = 16 * (c + C)),
                    (y = t ? 4 * n.get(C) : 4 * C),
                    0 > y ||
                      (k.setTo(
                        m.get(y),
                        m.get(y + 1),
                        m.get(y + 2),
                        m.get(y + 3)
                      ),
                      (y = k.width),
                      (A = k.height),
                      0 >= y ||
                        0 >= A ||
                        (z && w
                          ? ((C *= 6),
                            g.setTo(
                              q.get(C),
                              q.get(C + 1),
                              q.get(C + 2),
                              q.get(C + 3),
                              q.get(C + 4),
                              q.get(C + 5)
                            ))
                          : z
                          ? ((C *= 4),
                            g.setTo(
                              q.get(C),
                              q.get(C + 1),
                              q.get(C + 2),
                              q.get(C + 3),
                              k.x,
                              k.y
                            ))
                          : w
                          ? ((C *= 2), (g.tx = q.get(C)), (g.ty = q.get(C + 1)))
                          : ((g.tx = k.x), (g.ty = k.y)),
                        (C = k.x / N),
                        (E = k.y / Ha),
                        (F = k.get_right() / N),
                        (B = k.get_bottom() / Ha),
                        (G = 0 * g.a + 0 * g.c + g.tx),
                        (v = 0 * g.b + 0 * g.d + g.ty),
                        (K = y * g.a + 0 * g.c + g.tx),
                        (I = y * g.b + 0 * g.d + g.ty),
                        (U = 0 * g.a + A * g.c + g.tx),
                        (O = 0 * g.b + A * g.d + g.ty),
                        (Z = y * g.a + A * g.c + g.tx),
                        (y = y * g.b + A * g.d + g.ty),
                        (M[D] = G),
                        (M[D + 1] = v),
                        (M[D + 2] = C),
                        (M[D + 3] = E),
                        (M[D + 4] = K),
                        (M[D + 4 + 1] = I),
                        (M[D + 4 + 2] = F),
                        (M[D + 4 + 3] = E),
                        (M[D + 8] = U),
                        (M[D + 8 + 1] = O),
                        (M[D + 8 + 2] = C),
                        (M[D + 8 + 3] = B),
                        (M[D + 12] = Z),
                        (M[D + 12 + 1] = y),
                        (M[D + 12 + 2] = F),
                        (M[D + 12 + 3] = B)));
                c += x;
              }
              break;
            case 12:
              switch (f.prev._hx_index) {
                case 0:
                  f.oPos += 2;
                  f.bPos += 2;
                  break;
                case 1:
                  f.iPos += 1;
                  f.fPos += 1;
                  break;
                case 2:
                  f.oPos += 4;
                  f.iiPos += 2;
                  f.ffPos += 1;
                  f.fPos += 1;
                  break;
                case 3:
                  f.oPos += 1;
                  break;
                case 4:
                  f.fPos += 6;
                  break;
                case 5:
                  f.fPos += 4;
                  break;
                case 6:
                  f.fPos += 3;
                  break;
                case 7:
                  f.fPos += 4;
                  break;
                case 8:
                  f.oPos += 3;
                  break;
                case 9:
                  f.fPos += 4;
                  break;
                case 10:
                  f.fPos += 5;
                  f.oPos += 1;
                  break;
                case 12:
                  f.oPos += 4;
                  break;
                case 14:
                  f.oPos += 2;
                  f.bPos += 2;
                  break;
                case 15:
                  f.oPos += 4;
                  f.iiPos += 2;
                  f.ffPos += 1;
                  f.fPos += 1;
                  break;
                case 16:
                  f.oPos += 4;
                  f.iPos += 1;
                  f.fPos += 2;
                  f.bPos += 1;
                  break;
                case 17:
                  f.fPos += 2;
                  break;
                case 18:
                  f.fPos += 2;
                  break;
                case 19:
                  f.oPos += 1;
                  break;
                case 20:
                  f.oPos += 1;
              }
              f.prev = ta.DRAW_TRIANGLES;
              q = f;
              m = q.buffer.o[q.oPos];
              n = q.buffer.o[q.oPos + 1];
              q = q.buffer.o[q.oPos + 2];
              t = null != n;
              x = Math.floor(m.get_length() / 2);
              z = t ? n.get_length() : x;
              D = (x = (w = null != q) && q.get_length() >= 3 * x) ? 4 : 2;
              M = x ? 3 : 2;
              N = D + 2;
              Ha = x ? e : d;
              bc.resizeVertexBuffer(a, x, Ha + z * N);
              P = x ? a.__vertexBufferDataUVT : a.__vertexBufferData;
              A = 0;
              for (C = z; A < C; )
                (E = A++),
                  (H = Ha + E * N),
                  (y = t ? 2 * n.get(E) : 2 * E),
                  (E = t ? n.get(E) * M : E * M),
                  x
                    ? ((F = q.get(E + 2)),
                      (P[H] = m.get(y) / F),
                      (P[H + 1] = m.get(y + 1) / F),
                      (P[H + 2] = 0),
                      (P[H + 3] = 1 / F))
                    : ((P[H] = m.get(y)), (P[H + 1] = m.get(y + 1))),
                  (P[H + D] = w ? q.get(E) : 0),
                  (P[H + D + 1] = w ? q.get(E + 1) : 0);
              x ? (e += z * N) : (d += z * N);
              break;
            case 13:
              l = null;
              break;
            default:
              switch (f.prev._hx_index) {
                case 0:
                  f.oPos += 2;
                  f.bPos += 2;
                  break;
                case 1:
                  f.iPos += 1;
                  f.fPos += 1;
                  break;
                case 2:
                  f.oPos += 4;
                  f.iiPos += 2;
                  f.ffPos += 1;
                  f.fPos += 1;
                  break;
                case 3:
                  f.oPos += 1;
                  break;
                case 4:
                  f.fPos += 6;
                  break;
                case 5:
                  f.fPos += 4;
                  break;
                case 6:
                  f.fPos += 3;
                  break;
                case 7:
                  f.fPos += 4;
                  break;
                case 8:
                  f.oPos += 3;
                  break;
                case 9:
                  f.fPos += 4;
                  break;
                case 10:
                  f.fPos += 5;
                  f.oPos += 1;
                  break;
                case 12:
                  f.oPos += 4;
                  break;
                case 14:
                  f.oPos += 2;
                  f.bPos += 2;
                  break;
                case 15:
                  f.oPos += 4;
                  f.iiPos += 2;
                  f.ffPos += 1;
                  f.fPos += 1;
                  break;
                case 16:
                  f.oPos += 4;
                  f.iPos += 1;
                  f.fPos += 2;
                  f.bPos += 1;
                  break;
                case 17:
                  f.fPos += 2;
                  break;
                case 18:
                  f.fPos += 2;
                  break;
                case 19:
                  f.oPos += 1;
                  break;
                case 20:
                  f.oPos += 1;
              }
              f.prev = m;
          }
        }
        0 < c && a.__quadBuffer.flushVertexBufferData();
        if (0 < d) {
          c = a.__vertexBuffer;
          if (null == c || d > a.__vertexBufferCount)
            (c = b.createVertexBuffer(d, 4, 0)),
              (a.__vertexBuffer = c),
              (a.__vertexBufferCount = d);
          c.uploadFromTypedArray(bj.toArrayBufferView(a.__vertexBufferData));
        }
        if (0 < e) {
          c = a.__vertexBufferUVT;
          if (null == c || e > a.__vertexBufferCountUVT)
            (c = b.createVertexBuffer(e, 6, 0)),
              (a.__vertexBufferUVT = c),
              (a.__vertexBufferCountUVT = e);
          c.uploadFromTypedArray(bj.toArrayBufferView(a.__vertexBufferDataUVT));
        }
        ha.__pool.release(k);
        xa.__pool.release(g);
      };
      bc.isCompatible = function (a) {
        if (null != a.__owner.__worldScale9Grid) return !1;
        var b = new ig(a.__commands),
          c = !1,
          d = !1,
          e = !1,
          f = 0;
        for (a = a.__commands.types; f < a.length; ) {
          var k = a[f];
          ++f;
          switch (k._hx_index) {
            case 0:
              d = !0;
              e = c = !1;
              switch (b.prev._hx_index) {
                case 0:
                  b.oPos += 2;
                  b.bPos += 2;
                  break;
                case 1:
                  b.iPos += 1;
                  b.fPos += 1;
                  break;
                case 2:
                  b.oPos += 4;
                  b.iiPos += 2;
                  b.ffPos += 1;
                  b.fPos += 1;
                  break;
                case 3:
                  b.oPos += 1;
                  break;
                case 4:
                  b.fPos += 6;
                  break;
                case 5:
                  b.fPos += 4;
                  break;
                case 6:
                  b.fPos += 3;
                  break;
                case 7:
                  b.fPos += 4;
                  break;
                case 8:
                  b.oPos += 3;
                  break;
                case 9:
                  b.fPos += 4;
                  break;
                case 10:
                  b.fPos += 5;
                  b.oPos += 1;
                  break;
                case 12:
                  b.oPos += 4;
                  break;
                case 14:
                  b.oPos += 2;
                  b.bPos += 2;
                  break;
                case 15:
                  b.oPos += 4;
                  b.iiPos += 2;
                  b.ffPos += 1;
                  b.fPos += 1;
                  break;
                case 16:
                  b.oPos += 4;
                  b.iPos += 1;
                  b.fPos += 2;
                  b.bPos += 1;
                  break;
                case 17:
                  b.fPos += 2;
                  break;
                case 18:
                  b.fPos += 2;
                  break;
                case 19:
                  b.oPos += 1;
                  break;
                case 20:
                  b.oPos += 1;
              }
              b.prev = k;
              break;
            case 1:
              d = !1;
              c = !0;
              e = !1;
              switch (b.prev._hx_index) {
                case 0:
                  b.oPos += 2;
                  b.bPos += 2;
                  break;
                case 1:
                  b.iPos += 1;
                  b.fPos += 1;
                  break;
                case 2:
                  b.oPos += 4;
                  b.iiPos += 2;
                  b.ffPos += 1;
                  b.fPos += 1;
                  break;
                case 3:
                  b.oPos += 1;
                  break;
                case 4:
                  b.fPos += 6;
                  break;
                case 5:
                  b.fPos += 4;
                  break;
                case 6:
                  b.fPos += 3;
                  break;
                case 7:
                  b.fPos += 4;
                  break;
                case 8:
                  b.oPos += 3;
                  break;
                case 9:
                  b.fPos += 4;
                  break;
                case 10:
                  b.fPos += 5;
                  b.oPos += 1;
                  break;
                case 12:
                  b.oPos += 4;
                  break;
                case 14:
                  b.oPos += 2;
                  b.bPos += 2;
                  break;
                case 15:
                  b.oPos += 4;
                  b.iiPos += 2;
                  b.ffPos += 1;
                  b.fPos += 1;
                  break;
                case 16:
                  b.oPos += 4;
                  b.iPos += 1;
                  b.fPos += 2;
                  b.bPos += 1;
                  break;
                case 17:
                  b.fPos += 2;
                  break;
                case 18:
                  b.fPos += 2;
                  break;
                case 19:
                  b.oPos += 1;
                  break;
                case 20:
                  b.oPos += 1;
              }
              b.prev = k;
              break;
            case 3:
              c = d = !1;
              e = !0;
              switch (b.prev._hx_index) {
                case 0:
                  b.oPos += 2;
                  b.bPos += 2;
                  break;
                case 1:
                  b.iPos += 1;
                  b.fPos += 1;
                  break;
                case 2:
                  b.oPos += 4;
                  b.iiPos += 2;
                  b.ffPos += 1;
                  b.fPos += 1;
                  break;
                case 3:
                  b.oPos += 1;
                  break;
                case 4:
                  b.fPos += 6;
                  break;
                case 5:
                  b.fPos += 4;
                  break;
                case 6:
                  b.fPos += 3;
                  break;
                case 7:
                  b.fPos += 4;
                  break;
                case 8:
                  b.oPos += 3;
                  break;
                case 9:
                  b.fPos += 4;
                  break;
                case 10:
                  b.fPos += 5;
                  b.oPos += 1;
                  break;
                case 12:
                  b.oPos += 4;
                  break;
                case 14:
                  b.oPos += 2;
                  b.bPos += 2;
                  break;
                case 15:
                  b.oPos += 4;
                  b.iiPos += 2;
                  b.ffPos += 1;
                  b.fPos += 1;
                  break;
                case 16:
                  b.oPos += 4;
                  b.iPos += 1;
                  b.fPos += 2;
                  b.bPos += 1;
                  break;
                case 17:
                  b.fPos += 2;
                  break;
                case 18:
                  b.fPos += 2;
                  break;
                case 19:
                  b.oPos += 1;
                  break;
                case 20:
                  b.oPos += 1;
              }
              b.prev = k;
              break;
            case 8:
              if (d || e) {
                switch (b.prev._hx_index) {
                  case 0:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 1:
                    b.iPos += 1;
                    b.fPos += 1;
                    break;
                  case 2:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 3:
                    b.oPos += 1;
                    break;
                  case 4:
                    b.fPos += 6;
                    break;
                  case 5:
                    b.fPos += 4;
                    break;
                  case 6:
                    b.fPos += 3;
                    break;
                  case 7:
                    b.fPos += 4;
                    break;
                  case 8:
                    b.oPos += 3;
                    break;
                  case 9:
                    b.fPos += 4;
                    break;
                  case 10:
                    b.fPos += 5;
                    b.oPos += 1;
                    break;
                  case 12:
                    b.oPos += 4;
                    break;
                  case 14:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 15:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 16:
                    b.oPos += 4;
                    b.iPos += 1;
                    b.fPos += 2;
                    b.bPos += 1;
                    break;
                  case 17:
                    b.fPos += 2;
                    break;
                  case 18:
                    b.fPos += 2;
                    break;
                  case 19:
                    b.oPos += 1;
                    break;
                  case 20:
                    b.oPos += 1;
                }
                b.prev = k;
              } else return b.destroy(), !1;
              break;
            case 9:
              if (c) {
                switch (b.prev._hx_index) {
                  case 0:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 1:
                    b.iPos += 1;
                    b.fPos += 1;
                    break;
                  case 2:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 3:
                    b.oPos += 1;
                    break;
                  case 4:
                    b.fPos += 6;
                    break;
                  case 5:
                    b.fPos += 4;
                    break;
                  case 6:
                    b.fPos += 3;
                    break;
                  case 7:
                    b.fPos += 4;
                    break;
                  case 8:
                    b.oPos += 3;
                    break;
                  case 9:
                    b.fPos += 4;
                    break;
                  case 10:
                    b.fPos += 5;
                    b.oPos += 1;
                    break;
                  case 12:
                    b.oPos += 4;
                    break;
                  case 14:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 15:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 16:
                    b.oPos += 4;
                    b.iPos += 1;
                    b.fPos += 2;
                    b.bPos += 1;
                    break;
                  case 17:
                    b.fPos += 2;
                    break;
                  case 18:
                    b.fPos += 2;
                    break;
                  case 19:
                    b.oPos += 1;
                    break;
                  case 20:
                    b.oPos += 1;
                }
                b.prev = k;
              } else return b.destroy(), !1;
              break;
            case 12:
              if (d || e) {
                switch (b.prev._hx_index) {
                  case 0:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 1:
                    b.iPos += 1;
                    b.fPos += 1;
                    break;
                  case 2:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 3:
                    b.oPos += 1;
                    break;
                  case 4:
                    b.fPos += 6;
                    break;
                  case 5:
                    b.fPos += 4;
                    break;
                  case 6:
                    b.fPos += 3;
                    break;
                  case 7:
                    b.fPos += 4;
                    break;
                  case 8:
                    b.oPos += 3;
                    break;
                  case 9:
                    b.fPos += 4;
                    break;
                  case 10:
                    b.fPos += 5;
                    b.oPos += 1;
                    break;
                  case 12:
                    b.oPos += 4;
                    break;
                  case 14:
                    b.oPos += 2;
                    b.bPos += 2;
                    break;
                  case 15:
                    b.oPos += 4;
                    b.iiPos += 2;
                    b.ffPos += 1;
                    b.fPos += 1;
                    break;
                  case 16:
                    b.oPos += 4;
                    b.iPos += 1;
                    b.fPos += 2;
                    b.bPos += 1;
                    break;
                  case 17:
                    b.fPos += 2;
                    break;
                  case 18:
                    b.fPos += 2;
                    break;
                  case 19:
                    b.oPos += 1;
                    break;
                  case 20:
                    b.oPos += 1;
                }
                b.prev = k;
              } else return b.destroy(), !1;
              break;
            case 13:
              e = c = d = !1;
              switch (b.prev._hx_index) {
                case 0:
                  b.oPos += 2;
                  b.bPos += 2;
                  break;
                case 1:
                  b.iPos += 1;
                  b.fPos += 1;
                  break;
                case 2:
                  b.oPos += 4;
                  b.iiPos += 2;
                  b.ffPos += 1;
                  b.fPos += 1;
                  break;
                case 3:
                  b.oPos += 1;
                  break;
                case 4:
                  b.fPos += 6;
                  break;
                case 5:
                  b.fPos += 4;
                  break;
                case 6:
                  b.fPos += 3;
                  break;
                case 7:
                  b.fPos += 4;
                  break;
                case 8:
                  b.oPos += 3;
                  break;
                case 9:
                  b.fPos += 4;
                  break;
                case 10:
                  b.fPos += 5;
                  b.oPos += 1;
                  break;
                case 12:
                  b.oPos += 4;
                  break;
                case 14:
                  b.oPos += 2;
                  b.bPos += 2;
                  break;
                case 15:
                  b.oPos += 4;
                  b.iiPos += 2;
                  b.ffPos += 1;
                  b.fPos += 1;
                  break;
                case 16:
                  b.oPos += 4;
                  b.iPos += 1;
                  b.fPos += 2;
                  b.bPos += 1;
                  break;
                case 17:
                  b.fPos += 2;
                  break;
                case 18:
                  b.fPos += 2;
                  break;
                case 19:
                  b.oPos += 1;
                  break;
                case 20:
                  b.oPos += 1;
              }
              b.prev = k;
              break;
            case 18:
              switch (b.prev._hx_index) {
                case 0:
                  b.oPos += 2;
                  b.bPos += 2;
                  break;
                case 1:
                  b.iPos += 1;
                  b.fPos += 1;
                  break;
                case 2:
                  b.oPos += 4;
                  b.iiPos += 2;
                  b.ffPos += 1;
                  b.fPos += 1;
                  break;
                case 3:
                  b.oPos += 1;
                  break;
                case 4:
                  b.fPos += 6;
                  break;
                case 5:
                  b.fPos += 4;
                  break;
                case 6:
                  b.fPos += 3;
                  break;
                case 7:
                  b.fPos += 4;
                  break;
                case 8:
                  b.oPos += 3;
                  break;
                case 9:
                  b.fPos += 4;
                  break;
                case 10:
                  b.fPos += 5;
                  b.oPos += 1;
                  break;
                case 12:
                  b.oPos += 4;
                  break;
                case 14:
                  b.oPos += 2;
                  b.bPos += 2;
                  break;
                case 15:
                  b.oPos += 4;
                  b.iiPos += 2;
                  b.ffPos += 1;
                  b.fPos += 1;
                  break;
                case 16:
                  b.oPos += 4;
                  b.iPos += 1;
                  b.fPos += 2;
                  b.bPos += 1;
                  break;
                case 17:
                  b.fPos += 2;
                  break;
                case 18:
                  b.fPos += 2;
                  break;
                case 19:
                  b.oPos += 1;
                  break;
                case 20:
                  b.oPos += 1;
              }
              b.prev = k;
              break;
            case 19:
              switch (b.prev._hx_index) {
                case 0:
                  b.oPos += 2;
                  b.bPos += 2;
                  break;
                case 1:
                  b.iPos += 1;
                  b.fPos += 1;
                  break;
                case 2:
                  b.oPos += 4;
                  b.iiPos += 2;
                  b.ffPos += 1;
                  b.fPos += 1;
                  break;
                case 3:
                  b.oPos += 1;
                  break;
                case 4:
                  b.fPos += 6;
                  break;
                case 5:
                  b.fPos += 4;
                  break;
                case 6:
                  b.fPos += 3;
                  break;
                case 7:
                  b.fPos += 4;
                  break;
                case 8:
                  b.oPos += 3;
                  break;
                case 9:
                  b.fPos += 4;
                  break;
                case 10:
                  b.fPos += 5;
                  b.oPos += 1;
                  break;
                case 12:
                  b.oPos += 4;
                  break;
                case 14:
                  b.oPos += 2;
                  b.bPos += 2;
                  break;
                case 15:
                  b.oPos += 4;
                  b.iiPos += 2;
                  b.ffPos += 1;
                  b.fPos += 1;
                  break;
                case 16:
                  b.oPos += 4;
                  b.iPos += 1;
                  b.fPos += 2;
                  b.bPos += 1;
                  break;
                case 17:
                  b.fPos += 2;
                  break;
                case 18:
                  b.fPos += 2;
                  break;
                case 19:
                  b.oPos += 1;
                  break;
                case 20:
                  b.oPos += 1;
              }
              b.prev = k;
              break;
            default:
              return b.destroy(), !1;
          }
        }
        b.destroy();
        return !0;
      };
      bc.render = function (a, b) {
        if (a.__visible && 0 != a.__commands.get_length())
          if ((null != a.__bitmap && !a.__dirty) || !bc.isCompatible(a)) {
            b.__softwareRenderer.__pixelRatio = b.__pixelRatio;
            var c = b.__softwareRenderer.__worldTransform;
            b.__softwareRenderer.__worldTransform =
              7 == a.__owner.__drawableType
                ? xa.__identity
                : b.__worldTransform;
            A.render(a, b.__softwareRenderer);
            b.__softwareRenderer.__worldTransform = c;
          } else {
            a.__bitmap = null;
            a.__update(b.__worldTransform, b.__pixelRatio);
            var d = a.__width,
              e = a.__height;
            if (null != a.__bounds && 1 <= d && 1 <= e) {
              (a.__hardwareDirty ||
                (null == a.__quadBuffer &&
                  null == a.__vertexBuffer &&
                  null == a.__vertexBufferUVT)) &&
                bc.buildBuffer(a, b);
              c = new ig(a.__commands);
              for (
                var f = b.__context3D,
                  k = xa.__pool.get(),
                  g = null,
                  l = null,
                  h = !1,
                  p = !1,
                  m = null,
                  n = 0,
                  q = 0,
                  t = 0,
                  z = 0,
                  w = 0,
                  x = a.__commands.types;
                w < x.length;

              )
                switch (((d = x[w]), ++w, d._hx_index)) {
                  case 0:
                    switch (c.prev._hx_index) {
                      case 0:
                        c.oPos += 2;
                        c.bPos += 2;
                        break;
                      case 1:
                        c.iPos += 1;
                        c.fPos += 1;
                        break;
                      case 2:
                        c.oPos += 4;
                        c.iiPos += 2;
                        c.ffPos += 1;
                        c.fPos += 1;
                        break;
                      case 3:
                        c.oPos += 1;
                        break;
                      case 4:
                        c.fPos += 6;
                        break;
                      case 5:
                        c.fPos += 4;
                        break;
                      case 6:
                        c.fPos += 3;
                        break;
                      case 7:
                        c.fPos += 4;
                        break;
                      case 8:
                        c.oPos += 3;
                        break;
                      case 9:
                        c.fPos += 4;
                        break;
                      case 10:
                        c.fPos += 5;
                        c.oPos += 1;
                        break;
                      case 12:
                        c.oPos += 4;
                        break;
                      case 14:
                        c.oPos += 2;
                        c.bPos += 2;
                        break;
                      case 15:
                        c.oPos += 4;
                        c.iiPos += 2;
                        c.ffPos += 1;
                        c.fPos += 1;
                        break;
                      case 16:
                        c.oPos += 4;
                        c.iPos += 1;
                        c.fPos += 2;
                        c.bPos += 1;
                        break;
                      case 17:
                        c.fPos += 2;
                        break;
                      case 18:
                        c.fPos += 2;
                        break;
                      case 19:
                        c.oPos += 1;
                        break;
                      case 20:
                        c.oPos += 1;
                    }
                    c.prev = ta.BEGIN_BITMAP_FILL;
                    p = c;
                    l = p.buffer.o[p.oPos];
                    h = p.buffer.b[p.bPos];
                    p = p.buffer.b[p.bPos + 1];
                    m = g = null;
                    break;
                  case 1:
                    switch (c.prev._hx_index) {
                      case 0:
                        c.oPos += 2;
                        c.bPos += 2;
                        break;
                      case 1:
                        c.iPos += 1;
                        c.fPos += 1;
                        break;
                      case 2:
                        c.oPos += 4;
                        c.iiPos += 2;
                        c.ffPos += 1;
                        c.fPos += 1;
                        break;
                      case 3:
                        c.oPos += 1;
                        break;
                      case 4:
                        c.fPos += 6;
                        break;
                      case 5:
                        c.fPos += 4;
                        break;
                      case 6:
                        c.fPos += 3;
                        break;
                      case 7:
                        c.fPos += 4;
                        break;
                      case 8:
                        c.oPos += 3;
                        break;
                      case 9:
                        c.fPos += 4;
                        break;
                      case 10:
                        c.fPos += 5;
                        c.oPos += 1;
                        break;
                      case 12:
                        c.oPos += 4;
                        break;
                      case 14:
                        c.oPos += 2;
                        c.bPos += 2;
                        break;
                      case 15:
                        c.oPos += 4;
                        c.iiPos += 2;
                        c.ffPos += 1;
                        c.fPos += 1;
                        break;
                      case 16:
                        c.oPos += 4;
                        c.iPos += 1;
                        c.fPos += 2;
                        c.bPos += 1;
                        break;
                      case 17:
                        c.fPos += 2;
                        break;
                      case 18:
                        c.fPos += 2;
                        break;
                      case 19:
                        c.oPos += 1;
                        break;
                      case 20:
                        c.oPos += 1;
                    }
                    c.prev = ta.BEGIN_FILL;
                    l = c;
                    m =
                      ((l.buffer.i[l.iPos] | 0) & 16777215) |
                      (((255 * l.buffer.f[l.fPos]) | 0) << 24);
                    l = g = null;
                    break;
                  case 3:
                    switch (c.prev._hx_index) {
                      case 0:
                        c.oPos += 2;
                        c.bPos += 2;
                        break;
                      case 1:
                        c.iPos += 1;
                        c.fPos += 1;
                        break;
                      case 2:
                        c.oPos += 4;
                        c.iiPos += 2;
                        c.ffPos += 1;
                        c.fPos += 1;
                        break;
                      case 3:
                        c.oPos += 1;
                        break;
                      case 4:
                        c.fPos += 6;
                        break;
                      case 5:
                        c.fPos += 4;
                        break;
                      case 6:
                        c.fPos += 3;
                        break;
                      case 7:
                        c.fPos += 4;
                        break;
                      case 8:
                        c.oPos += 3;
                        break;
                      case 9:
                        c.fPos += 4;
                        break;
                      case 10:
                        c.fPos += 5;
                        c.oPos += 1;
                        break;
                      case 12:
                        c.oPos += 4;
                        break;
                      case 14:
                        c.oPos += 2;
                        c.bPos += 2;
                        break;
                      case 15:
                        c.oPos += 4;
                        c.iiPos += 2;
                        c.ffPos += 1;
                        c.fPos += 1;
                        break;
                      case 16:
                        c.oPos += 4;
                        c.iPos += 1;
                        c.fPos += 2;
                        c.bPos += 1;
                        break;
                      case 17:
                        c.fPos += 2;
                        break;
                      case 18:
                        c.fPos += 2;
                        break;
                      case 19:
                        c.oPos += 1;
                        break;
                      case 20:
                        c.oPos += 1;
                    }
                    c.prev = ta.BEGIN_SHADER_FILL;
                    q = c;
                    g = q.buffer.o[q.oPos];
                    q = 0;
                    l =
                      null == g || null == g.shader || null == g.shader.__bitmap
                        ? null
                        : g.shader.__bitmap.input;
                    m = null;
                    break;
                  case 8:
                    if (null != l) {
                      switch (c.prev._hx_index) {
                        case 0:
                          c.oPos += 2;
                          c.bPos += 2;
                          break;
                        case 1:
                          c.iPos += 1;
                          c.fPos += 1;
                          break;
                        case 2:
                          c.oPos += 4;
                          c.iiPos += 2;
                          c.ffPos += 1;
                          c.fPos += 1;
                          break;
                        case 3:
                          c.oPos += 1;
                          break;
                        case 4:
                          c.fPos += 6;
                          break;
                        case 5:
                          c.fPos += 4;
                          break;
                        case 6:
                          c.fPos += 3;
                          break;
                        case 7:
                          c.fPos += 4;
                          break;
                        case 8:
                          c.oPos += 3;
                          break;
                        case 9:
                          c.fPos += 4;
                          break;
                        case 10:
                          c.fPos += 5;
                          c.oPos += 1;
                          break;
                        case 12:
                          c.oPos += 4;
                          break;
                        case 14:
                          c.oPos += 2;
                          c.bPos += 2;
                          break;
                        case 15:
                          c.oPos += 4;
                          c.iiPos += 2;
                          c.ffPos += 1;
                          c.fPos += 1;
                          break;
                        case 16:
                          c.oPos += 4;
                          c.iPos += 1;
                          c.fPos += 2;
                          c.bPos += 1;
                          break;
                        case 17:
                          c.fPos += 2;
                          break;
                        case 18:
                          c.fPos += 2;
                          break;
                        case 19:
                          c.oPos += 1;
                          break;
                        case 20:
                          c.oPos += 1;
                      }
                      c.prev = ta.DRAW_QUADS;
                      var D = c;
                      d = D.buffer.o[D.oPos];
                      D = D.buffer.o[D.oPos + 1];
                      d =
                        null != D
                          ? D.get_length()
                          : Math.floor(d.get_length() / 4);
                      var y = b.__getMatrix(a.__owner.__renderTransform, 1);
                      null == g || bc.maskRender
                        ? ((D = bc.maskRender
                            ? b.__maskShader
                            : b.__initGraphicsShader(null)),
                          b.setShader(D),
                          b.applyMatrix(y),
                          b.applyBitmapData(l, p, h),
                          b.applyAlpha(a.__owner.__worldAlpha),
                          b.applyColorTransform(
                            a.__owner.__worldColorTransform
                          ),
                          b.updateShader())
                        : ((D = b.__initShaderBuffer(g)),
                          b.__setShaderBuffer(g),
                          b.applyMatrix(y),
                          b.applyBitmapData(l, !1, h),
                          b.applyAlpha(a.__owner.__worldAlpha),
                          b.applyColorTransform(
                            a.__owner.__worldColorTransform
                          ));
                      for (y = n + d; n < y; ) {
                        d = Math.min(y - n, f.__quadIndexBufferElements) | 0;
                        if (0 >= d) break;
                        null == g || bc.maskRender || b.__updateShaderBuffer(q);
                        null != D.__position &&
                          f.setVertexBufferAt(
                            D.__position.index,
                            a.__quadBuffer.vertexBuffer,
                            16 * n,
                            2
                          );
                        null != D.__textureCoord &&
                          f.setVertexBufferAt(
                            D.__textureCoord.index,
                            a.__quadBuffer.vertexBuffer,
                            16 * n + 2,
                            2
                          );
                        f.drawTriangles(f.__quadIndexBuffer, 0, 2 * d);
                        q += 4 * d;
                        n += d;
                      }
                      b.__clearShader();
                    }
                    break;
                  case 9:
                    if (null != m) {
                      switch (c.prev._hx_index) {
                        case 0:
                          c.oPos += 2;
                          c.bPos += 2;
                          break;
                        case 1:
                          c.iPos += 1;
                          c.fPos += 1;
                          break;
                        case 2:
                          c.oPos += 4;
                          c.iiPos += 2;
                          c.ffPos += 1;
                          c.fPos += 1;
                          break;
                        case 3:
                          c.oPos += 1;
                          break;
                        case 4:
                          c.fPos += 6;
                          break;
                        case 5:
                          c.fPos += 4;
                          break;
                        case 6:
                          c.fPos += 3;
                          break;
                        case 7:
                          c.fPos += 4;
                          break;
                        case 8:
                          c.oPos += 3;
                          break;
                        case 9:
                          c.fPos += 4;
                          break;
                        case 10:
                          c.fPos += 5;
                          c.oPos += 1;
                          break;
                        case 12:
                          c.oPos += 4;
                          break;
                        case 14:
                          c.oPos += 2;
                          c.bPos += 2;
                          break;
                        case 15:
                          c.oPos += 4;
                          c.iiPos += 2;
                          c.ffPos += 1;
                          c.fPos += 1;
                          break;
                        case 16:
                          c.oPos += 4;
                          c.iPos += 1;
                          c.fPos += 2;
                          c.bPos += 1;
                          break;
                        case 17:
                          c.fPos += 2;
                          break;
                        case 18:
                          c.fPos += 2;
                          break;
                        case 19:
                          c.oPos += 1;
                          break;
                        case 20:
                          c.oPos += 1;
                      }
                      c.prev = ta.DRAW_RECT;
                      var C = c;
                      D = C.buffer.f[C.fPos];
                      y = C.buffer.f[C.fPos + 1];
                      d = C.buffer.f[C.fPos + 2];
                      e = C.buffer.f[C.fPos + 3];
                      C = m;
                      bc.tempColorTransform.redOffset = (C >>> 16) & 255;
                      bc.tempColorTransform.greenOffset = (C >>> 8) & 255;
                      bc.tempColorTransform.blueOffset = C & 255;
                      bc.tempColorTransform.__combine(
                        a.__owner.__worldColorTransform
                      );
                      k.identity();
                      k.scale(d, e);
                      k.tx = D;
                      k.ty = y;
                      k.concat(a.__owner.__renderTransform);
                      d = bc.maskRender
                        ? b.__maskShader
                        : b.__initGraphicsShader(null);
                      b.setShader(d);
                      b.applyMatrix(b.__getMatrix(k, 1));
                      b.applyBitmapData(bc.blankBitmapData, !0, h);
                      b.applyAlpha(
                        (((C >>> 24) & 255) / 255) * a.__owner.__worldAlpha
                      );
                      b.applyColorTransform(bc.tempColorTransform);
                      b.updateShader();
                      D = bc.blankBitmapData.getVertexBuffer(f);
                      null != d.__position &&
                        f.setVertexBufferAt(d.__position.index, D, 0, 3);
                      null != d.__textureCoord &&
                        f.setVertexBufferAt(d.__textureCoord.index, D, 3, 2);
                      d = bc.blankBitmapData.getIndexBuffer(f);
                      f.drawTriangles(d);
                      q += 4;
                      b.__clearShader();
                    }
                    break;
                  case 12:
                    switch (c.prev._hx_index) {
                      case 0:
                        c.oPos += 2;
                        c.bPos += 2;
                        break;
                      case 1:
                        c.iPos += 1;
                        c.fPos += 1;
                        break;
                      case 2:
                        c.oPos += 4;
                        c.iiPos += 2;
                        c.ffPos += 1;
                        c.fPos += 1;
                        break;
                      case 3:
                        c.oPos += 1;
                        break;
                      case 4:
                        c.fPos += 6;
                        break;
                      case 5:
                        c.fPos += 4;
                        break;
                      case 6:
                        c.fPos += 3;
                        break;
                      case 7:
                        c.fPos += 4;
                        break;
                      case 8:
                        c.oPos += 3;
                        break;
                      case 9:
                        c.fPos += 4;
                        break;
                      case 10:
                        c.fPos += 5;
                        c.oPos += 1;
                        break;
                      case 12:
                        c.oPos += 4;
                        break;
                      case 14:
                        c.oPos += 2;
                        c.bPos += 2;
                        break;
                      case 15:
                        c.oPos += 4;
                        c.iiPos += 2;
                        c.ffPos += 1;
                        c.fPos += 1;
                        break;
                      case 16:
                        c.oPos += 4;
                        c.iPos += 1;
                        c.fPos += 2;
                        c.bPos += 1;
                        break;
                      case 17:
                        c.fPos += 2;
                        break;
                      case 18:
                        c.fPos += 2;
                        break;
                      case 19:
                        c.oPos += 1;
                        break;
                      case 20:
                        c.oPos += 1;
                    }
                    c.prev = ta.DRAW_TRIANGLES;
                    e = c;
                    D = e.buffer.o[e.oPos + 1];
                    y = e.buffer.o[e.oPos + 2];
                    d = e.buffer.o[e.oPos + 3];
                    C = null != D;
                    e = Math.floor(e.buffer.o[e.oPos].get_length() / 2);
                    D = C ? D.get_length() : e;
                    C = (y = null != y && y.get_length() >= 3 * e) ? 4 : 2;
                    e = C + 2;
                    var E = y ? a.__vertexBufferUVT : a.__vertexBuffer,
                      F = y ? z : t,
                      B = b.__getMatrix(a.__owner.__renderTransform, 1);
                    if (null == g || bc.maskRender) {
                      var G = bc.maskRender
                        ? b.__maskShader
                        : b.__initGraphicsShader(null);
                      b.setShader(G);
                      b.applyMatrix(B);
                      b.applyBitmapData(l, p, h);
                      b.applyAlpha(a.__owner.__worldAlpha);
                      b.applyColorTransform(a.__owner.__worldColorTransform);
                      b.updateShader();
                    } else
                      (G = b.__initShaderBuffer(g)),
                        b.__setShaderBuffer(g),
                        b.applyMatrix(B),
                        b.applyBitmapData(l, !1, h),
                        b.applyAlpha(1),
                        b.applyColorTransform(null),
                        b.__updateShaderBuffer(q);
                    null != G.__position &&
                      f.setVertexBufferAt(G.__position.index, E, F, y ? 4 : 2);
                    null != G.__textureCoord &&
                      f.setVertexBufferAt(G.__textureCoord.index, E, F + C, 2);
                    switch (d) {
                      case 0:
                        f.setCulling(0);
                        break;
                      case 1:
                        f.setCulling(3);
                        break;
                      case 2:
                        f.setCulling(1);
                    }
                    f.__drawTriangles(0, D);
                    q += D;
                    y ? (z += e * D) : (t += e * D);
                    switch (d) {
                      case 1:
                      case 2:
                        f.setCulling(0);
                    }
                    b.__clearShader();
                    break;
                  case 13:
                    g = m = l = null;
                    switch (c.prev._hx_index) {
                      case 0:
                        c.oPos += 2;
                        c.bPos += 2;
                        break;
                      case 1:
                        c.iPos += 1;
                        c.fPos += 1;
                        break;
                      case 2:
                        c.oPos += 4;
                        c.iiPos += 2;
                        c.ffPos += 1;
                        c.fPos += 1;
                        break;
                      case 3:
                        c.oPos += 1;
                        break;
                      case 4:
                        c.fPos += 6;
                        break;
                      case 5:
                        c.fPos += 4;
                        break;
                      case 6:
                        c.fPos += 3;
                        break;
                      case 7:
                        c.fPos += 4;
                        break;
                      case 8:
                        c.oPos += 3;
                        break;
                      case 9:
                        c.fPos += 4;
                        break;
                      case 10:
                        c.fPos += 5;
                        c.oPos += 1;
                        break;
                      case 12:
                        c.oPos += 4;
                        break;
                      case 14:
                        c.oPos += 2;
                        c.bPos += 2;
                        break;
                      case 15:
                        c.oPos += 4;
                        c.iiPos += 2;
                        c.ffPos += 1;
                        c.fPos += 1;
                        break;
                      case 16:
                        c.oPos += 4;
                        c.iPos += 1;
                        c.fPos += 2;
                        c.bPos += 1;
                        break;
                      case 17:
                        c.fPos += 2;
                        break;
                      case 18:
                        c.fPos += 2;
                        break;
                      case 19:
                        c.oPos += 1;
                        break;
                      case 20:
                        c.oPos += 1;
                    }
                    c.prev = d;
                    f.setCulling(3);
                    break;
                  case 18:
                    switch (c.prev._hx_index) {
                      case 0:
                        c.oPos += 2;
                        c.bPos += 2;
                        break;
                      case 1:
                        c.iPos += 1;
                        c.fPos += 1;
                        break;
                      case 2:
                        c.oPos += 4;
                        c.iiPos += 2;
                        c.ffPos += 1;
                        c.fPos += 1;
                        break;
                      case 3:
                        c.oPos += 1;
                        break;
                      case 4:
                        c.fPos += 6;
                        break;
                      case 5:
                        c.fPos += 4;
                        break;
                      case 6:
                        c.fPos += 3;
                        break;
                      case 7:
                        c.fPos += 4;
                        break;
                      case 8:
                        c.oPos += 3;
                        break;
                      case 9:
                        c.fPos += 4;
                        break;
                      case 10:
                        c.fPos += 5;
                        c.oPos += 1;
                        break;
                      case 12:
                        c.oPos += 4;
                        break;
                      case 14:
                        c.oPos += 2;
                        c.bPos += 2;
                        break;
                      case 15:
                        c.oPos += 4;
                        c.iiPos += 2;
                        c.ffPos += 1;
                        c.fPos += 1;
                        break;
                      case 16:
                        c.oPos += 4;
                        c.iPos += 1;
                        c.fPos += 2;
                        c.bPos += 1;
                        break;
                      case 17:
                        c.fPos += 2;
                        break;
                      case 18:
                        c.fPos += 2;
                        break;
                      case 19:
                        c.oPos += 1;
                        break;
                      case 20:
                        c.oPos += 1;
                    }
                    c.prev = ta.MOVE_TO;
                    break;
                  case 19:
                    switch (c.prev._hx_index) {
                      case 0:
                        c.oPos += 2;
                        c.bPos += 2;
                        break;
                      case 1:
                        c.iPos += 1;
                        c.fPos += 1;
                        break;
                      case 2:
                        c.oPos += 4;
                        c.iiPos += 2;
                        c.ffPos += 1;
                        c.fPos += 1;
                        break;
                      case 3:
                        c.oPos += 1;
                        break;
                      case 4:
                        c.fPos += 6;
                        break;
                      case 5:
                        c.fPos += 4;
                        break;
                      case 6:
                        c.fPos += 3;
                        break;
                      case 7:
                        c.fPos += 4;
                        break;
                      case 8:
                        c.oPos += 3;
                        break;
                      case 9:
                        c.fPos += 4;
                        break;
                      case 10:
                        c.fPos += 5;
                        c.oPos += 1;
                        break;
                      case 12:
                        c.oPos += 4;
                        break;
                      case 14:
                        c.oPos += 2;
                        c.bPos += 2;
                        break;
                      case 15:
                        c.oPos += 4;
                        c.iiPos += 2;
                        c.ffPos += 1;
                        c.fPos += 1;
                        break;
                      case 16:
                        c.oPos += 4;
                        c.iPos += 1;
                        c.fPos += 2;
                        c.bPos += 1;
                        break;
                      case 17:
                        c.fPos += 2;
                        break;
                      case 18:
                        c.fPos += 2;
                        break;
                      case 19:
                        c.oPos += 1;
                        break;
                      case 20:
                        c.oPos += 1;
                    }
                    c.prev = ta.OVERRIDE_BLEND_MODE;
                    d = c;
                    b.__setBlendMode(d.buffer.o[d.oPos]);
                    break;
                  default:
                    switch (c.prev._hx_index) {
                      case 0:
                        c.oPos += 2;
                        c.bPos += 2;
                        break;
                      case 1:
                        c.iPos += 1;
                        c.fPos += 1;
                        break;
                      case 2:
                        c.oPos += 4;
                        c.iiPos += 2;
                        c.ffPos += 1;
                        c.fPos += 1;
                        break;
                      case 3:
                        c.oPos += 1;
                        break;
                      case 4:
                        c.fPos += 6;
                        break;
                      case 5:
                        c.fPos += 4;
                        break;
                      case 6:
                        c.fPos += 3;
                        break;
                      case 7:
                        c.fPos += 4;
                        break;
                      case 8:
                        c.oPos += 3;
                        break;
                      case 9:
                        c.fPos += 4;
                        break;
                      case 10:
                        c.fPos += 5;
                        c.oPos += 1;
                        break;
                      case 12:
                        c.oPos += 4;
                        break;
                      case 14:
                        c.oPos += 2;
                        c.bPos += 2;
                        break;
                      case 15:
                        c.oPos += 4;
                        c.iiPos += 2;
                        c.ffPos += 1;
                        c.fPos += 1;
                        break;
                      case 16:
                        c.oPos += 4;
                        c.iPos += 1;
                        c.fPos += 2;
                        c.bPos += 1;
                        break;
                      case 17:
                        c.fPos += 2;
                        break;
                      case 18:
                        c.fPos += 2;
                        break;
                      case 19:
                        c.oPos += 1;
                        break;
                      case 20:
                        c.oPos += 1;
                    }
                    c.prev = d;
                }
              xa.__pool.release(k);
            }
            a.__hardwareDirty = !1;
            a.set___dirty(!1);
          }
      };
      bc.renderMask = function (a, b) {
        bc.maskRender = !0;
        bc.render(a, b);
        bc.maskRender = !1;
      };
      bc.resizeVertexBuffer = function (a, b, c) {
        var d = b ? a.__vertexBufferDataUVT : a.__vertexBufferData,
          e = null;
        if (null == d) {
          var f = (e = null),
            k = null,
            g = null,
            l = null;
          e = c =
            null != c
              ? new Float32Array(c)
              : null != e
              ? new Float32Array(e)
              : null != f
              ? new Float32Array(f.__array)
              : null != k
              ? new Float32Array(k)
              : null != g
              ? null == l
                ? new Float32Array(g, 0)
                : new Float32Array(g, 0, l)
              : null;
        } else
          c > d.length &&
            ((l = g = k = f = e = null),
            (e = c =
              null != c
                ? new Float32Array(c)
                : null != e
                ? new Float32Array(e)
                : null != f
                ? new Float32Array(f.__array)
                : null != k
                ? new Float32Array(k)
                : null != g
                ? null == l
                  ? new Float32Array(g, 0)
                  : new Float32Array(g, 0, l)
                : null),
            e.set(d));
        null != e &&
          (b ? (a.__vertexBufferDataUVT = e) : (a.__vertexBufferData = e));
      };
      var Ch = function () {
        null == this.__glFragmentSource &&
          (this.__glFragmentSource =
            "varying vec2 openfl_TextureCoordv;\n\n\t\tuniform sampler2D openfl_Texture;\n\n\t\tvoid main(void) {\n\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\n\t\t\tif (color.a == 0.0) {\n\n\t\t\t\tdiscard;\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = color;\n\n\t\t\t}\n\n\t\t}");
        null == this.__glVertexSource &&
          (this.__glVertexSource =
            "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t}");
        Zd.call(this);
        this.__isGenerated = !0;
        this.__initGL();
      };
      h["openfl.display._internal.Context3DMaskShader"] = Ch;
      Ch.__name__ = "openfl.display._internal.Context3DMaskShader";
      Ch.__super__ = Zd;
      Ch.prototype = q(Zd.prototype, { __class__: Ch });
      var jg = function () {};
      h["openfl.display._internal.Context3DShape"] = jg;
      jg.__name__ = "openfl.display._internal.Context3DShape";
      jg.render = function (a, b) {
        if (a.__renderable && !(0 >= a.__worldAlpha)) {
          var c = a.__graphics;
          if (null != c) {
            b.__setBlendMode(a.__worldBlendMode);
            b.__pushMaskObject(a);
            bc.render(c, b);
            if (null != c.__bitmap && c.__visible) {
              var d = b.__context3D,
                e = b.__initDisplayShader(a.__worldShader);
              b.setShader(e);
              b.applyBitmapData(c.__bitmap, !0);
              var f = xa.__pool.get();
              f.scale(1 / c.__bitmapScale, 1 / c.__bitmapScale);
              f.concat(c.__worldTransform);
              b.applyMatrix(b.__getMatrix(f, 1));
              xa.__pool.release(f);
              b.applyAlpha(a.__worldAlpha);
              b.applyColorTransform(a.__worldColorTransform);
              b.updateShader();
              f = c.__bitmap.getVertexBuffer(d);
              null != e.__position &&
                d.setVertexBufferAt(e.__position.index, f, 0, 3);
              null != e.__textureCoord &&
                d.setVertexBufferAt(e.__textureCoord.index, f, 3, 2);
              c = c.__bitmap.getIndexBuffer(d);
              d.drawTriangles(c);
              b.__clearShader();
            }
            b.__popMaskObject(a);
          }
        }
      };
      jg.renderMask = function (a, b) {
        var c = a.__graphics;
        if (null != c && (bc.renderMask(c, b), null != c.__bitmap)) {
          a = b.__context3D;
          var d = b.__maskShader;
          b.setShader(d);
          b.applyBitmapData(c.__bitmap, !0);
          b.applyMatrix(b.__getMatrix(c.__worldTransform, 1));
          b.updateShader();
          var e = c.__bitmap.getVertexBuffer(a);
          null != d.__position &&
            a.setVertexBufferAt(d.__position.index, e, 0, 3);
          null != d.__textureCoord &&
            a.setVertexBufferAt(d.__textureCoord.index, e, 3, 2);
          c = c.__bitmap.getIndexBuffer(a);
          a.drawTriangles(c);
          b.__clearShader();
        }
      };
      var cm = function () {};
      h["openfl.display._internal.Context3DSimpleButton"] = cm;
      cm.__name__ = "openfl.display._internal.Context3DSimpleButton";
      cm.renderDrawable = function (a, b) {
        !a.__renderable ||
          0 >= a.__worldAlpha ||
          null == a.__currentState ||
          (b.__pushMaskObject(a),
          b.__renderDrawable(a.__currentState),
          b.__popMaskObject(a),
          b.__renderEvent(a));
      };
      cm.renderDrawableMask = function (a, b) {
        null != a.__currentState && b.__renderDrawableMask(a.__currentState);
      };
      var Eg = function () {};
      h["openfl.display._internal.Context3DTextField"] = Eg;
      Eg.__name__ = "openfl.display._internal.Context3DTextField";
      Eg.render = function (a, b) {
        b.__softwareRenderer.__pixelRatio = b.__pixelRatio;
        var c = b.__softwareRenderer;
        b = a.__textEngine;
        var d = !(b.background || b.border),
          e = d ? b.textBounds : b.bounds,
          f = a.__graphics,
          g = 0;
        if (a.__dirty) {
          a.__updateLayout();
          null == f.__bounds && (f.__bounds = new ha());
          if (0 == a.get_text().length) {
            g = b.bounds.width - 4;
            var h = a.get_defaultTextFormat().align;
            g = 3 == h ? 0 : 4 == h ? g : g / 2;
            switch (h) {
              case 0:
                g += a.get_defaultTextFormat().leftMargin / 2;
                g -= a.get_defaultTextFormat().rightMargin / 2;
                g += a.get_defaultTextFormat().indent / 2;
                g += a.get_defaultTextFormat().blockIndent / 2;
                break;
              case 2:
                g += a.get_defaultTextFormat().leftMargin;
                g += a.get_defaultTextFormat().indent;
                g += a.get_defaultTextFormat().blockIndent;
                break;
              case 3:
                g += a.get_defaultTextFormat().leftMargin;
                g += a.get_defaultTextFormat().indent;
                g += a.get_defaultTextFormat().blockIndent;
                break;
              case 4:
                g -= a.get_defaultTextFormat().rightMargin;
            }
            d && ((e.y = b.bounds.y), (e.x = g));
          }
          f.__bounds.copyFrom(e);
        }
        h = c.__pixelRatio;
        f.__update(c.__worldTransform, h);
        if (a.__dirty || f.__softwareDirty) {
          var l = Math.round(f.__width * h),
            p = Math.round(f.__height * h);
          if (
            !(
              (null != b.text && "" != b.text) ||
              b.background ||
              b.border ||
              b.__hasFocus ||
              (1 == b.type && b.selectable)
            ) ||
            ((0 >= b.width || 0 >= b.height) && 2 != b.autoSize)
          )
            (a.__graphics.__canvas = null),
              (a.__graphics.__context = null),
              (a.__graphics.__bitmap = null),
              (a.__graphics.__softwareDirty = !1),
              a.__graphics.set___dirty(!1),
              (a.__dirty = !1);
          else {
            null == a.__graphics.__canvas &&
              ((a.__graphics.__canvas =
                window.document.createElement("canvas")),
              (a.__graphics.__context =
                a.__graphics.__canvas.getContext("2d")));
            fa.context = f.__context;
            f.__canvas.width = l;
            f.__canvas.height = p;
            c.__isDOM &&
              ((f.__canvas.style.width = Math.round(l / h) + "px"),
              (f.__canvas.style.height = Math.round(p / h) + "px"));
            l = xa.__pool.get();
            l.scale(h, h);
            l.concat(f.__renderTransform);
            fa.context.setTransform(l.a, l.b, l.c, l.d, l.tx, l.ty);
            xa.__pool.release(l);
            null == fa.clearRect &&
              (fa.clearRect =
                "undefined" !== typeof navigator &&
                "undefined" !== typeof navigator.isCocoonJS);
            fa.clearRect &&
              fa.context.clearRect(0, 0, f.__canvas.width, f.__canvas.height);
            if ((null != b.text && "" != b.text) || b.__hasFocus) {
              d = b.text;
              f.__context.imageSmoothingEnabled =
                !c.__allowSmoothing ||
                (0 == b.antiAliasType && 400 == b.sharpness)
                  ? !1
                  : !0;
              if (b.border || b.background) {
                fa.context.rect(0.5, 0.5, e.width - 1, e.height - 1);
                if (b.background) {
                  var n = K.hex(b.backgroundColor & 16777215, 6);
                  fa.context.fillStyle = "#" + n;
                  fa.context.fill();
                }
                b.border &&
                  ((fa.context.lineWidth = 1),
                  (n = K.hex(b.borderColor & 16777215, 6)),
                  (fa.context.strokeStyle = "#" + n),
                  fa.context.stroke());
              }
              fa.context.textBaseline = "alphabetic";
              fa.context.textAlign = "start";
              c = -a.get_scrollH();
              var m = (g = 0);
              for (n = a.get_scrollV() - 1; m < n; ) {
                var q = m++;
                g -= b.lineHeights.get(q);
              }
              var t;
              for (l = b.layoutGroups.iterator(); l.hasNext(); )
                if (((p = l.next()), !(p.lineIndex < a.get_scrollV() - 1))) {
                  if (p.lineIndex > b.get_bottomScrollV() - 1) break;
                  var z = "#" + K.hex(p.format.color & 16777215, 6);
                  fa.context.font = Vb.getFont(p.format);
                  fa.context.fillStyle = z;
                  fa.context.fillText(
                    d.substring(p.startIndex, p.endIndex),
                    p.offsetX + c - e.x,
                    p.offsetY + p.ascent + g - e.y
                  );
                  if (-1 < a.__caretIndex && b.selectable)
                    if (a.__selectionIndex == a.__caretIndex) {
                      if (
                        a.__showCursor &&
                        p.startIndex <= a.__caretIndex &&
                        p.endIndex >= a.__caretIndex
                      ) {
                        m = t = 0;
                        for (n = a.__caretIndex - p.startIndex; m < n; ) {
                          q = m++;
                          if (p.positions.length <= q) break;
                          t += p.positions[q];
                        }
                        m = 0;
                        n = a.get_scrollV();
                        for (q = p.lineIndex + 1; n < q; ) {
                          var w = n++;
                          m += b.lineHeights.get(w - 1);
                        }
                        fa.context.beginPath();
                        n = K.hex(p.format.color & 16777215, 6);
                        fa.context.strokeStyle = "#" + n;
                        fa.context.moveTo(
                          p.offsetX + t - a.get_scrollH() - e.x,
                          m + 2 - e.y
                        );
                        fa.context.lineWidth = 1;
                        fa.context.lineTo(
                          p.offsetX + t - a.get_scrollH() - e.x,
                          m +
                            Vb.getFormatHeight(a.get_defaultTextFormat()) -
                            1 -
                            e.y
                        );
                        fa.context.stroke();
                        fa.context.closePath();
                      }
                    } else if (
                      (p.startIndex <= a.__caretIndex &&
                        p.endIndex >= a.__caretIndex) ||
                      (p.startIndex <= a.__selectionIndex &&
                        p.endIndex >= a.__selectionIndex) ||
                      (p.startIndex > a.__caretIndex &&
                        p.endIndex < a.__selectionIndex) ||
                      (p.startIndex > a.__selectionIndex &&
                        p.endIndex < a.__caretIndex)
                    )
                      (t = Math.min(a.__selectionIndex, a.__caretIndex) | 0),
                        (m = Math.max(a.__selectionIndex, a.__caretIndex) | 0),
                        p.startIndex > t && (t = p.startIndex),
                        p.endIndex < m && (m = p.endIndex),
                        (q = a.getCharBoundaries(t)),
                        m >= p.endIndex
                          ? ((n = a.getCharBoundaries(p.endIndex - 1)),
                            null != n && (n.x += n.width + 2))
                          : (n = a.getCharBoundaries(m)),
                        null != q &&
                          null != n &&
                          ((fa.context.fillStyle = "#000000"),
                          fa.context.fillRect(
                            q.x + c - e.x,
                            q.y + g,
                            n.x - q.x,
                            p.height
                          ),
                          (fa.context.fillStyle = "#FFFFFF"),
                          fa.context.fillText(
                            d.substring(t, m),
                            c + q.x - e.x,
                            p.offsetY + p.ascent + g
                          ));
                  p.format.underline &&
                    (fa.context.beginPath(),
                    (fa.context.strokeStyle = z),
                    (fa.context.lineWidth = 1),
                    (z = p.offsetX + c - e.x),
                    (t =
                      Math.ceil(p.offsetY + g + p.ascent - e.y) +
                      Math.floor(0.185 * p.ascent) +
                      0.5),
                    fa.context.moveTo(z, t),
                    fa.context.lineTo(z + p.width, t),
                    fa.context.stroke(),
                    fa.context.closePath());
                }
            } else {
              if (b.border || b.background)
                b.border
                  ? fa.context.rect(0.5, 0.5, e.width - 1, e.height - 1)
                  : fa.context.rect(0, 0, e.width, e.height),
                  b.background &&
                    ((n = K.hex(b.backgroundColor & 16777215, 6)),
                    (fa.context.fillStyle = "#" + n),
                    fa.context.fill()),
                  b.border &&
                    ((fa.context.lineWidth = 1),
                    (fa.context.lineCap = "square"),
                    (n = K.hex(b.borderColor & 16777215, 6)),
                    (fa.context.strokeStyle = "#" + n),
                    fa.context.stroke());
              if (-1 < a.__caretIndex && b.selectable && a.__showCursor) {
                c = -a.get_scrollH() + (d ? 0 : g);
                m = g = 0;
                for (n = a.get_scrollV() - 1; m < n; )
                  (q = m++), (g += b.lineHeights.get(q));
                fa.context.beginPath();
                n = K.hex(a.get_defaultTextFormat().color & 16777215, 6);
                fa.context.strokeStyle = "#" + n;
                fa.context.moveTo(c + 2.5, g + 2.5);
                fa.context.lineWidth = 1;
                fa.context.lineTo(
                  c + 2.5,
                  g + Vb.getFormatHeight(a.get_defaultTextFormat()) - 1
                );
                fa.context.stroke();
                fa.context.closePath();
              }
            }
            f.__bitmap = S.fromCanvas(a.__graphics.__canvas);
            f.__bitmapScale = h;
            f.__visible = !0;
            a.__dirty = !1;
            f.__softwareDirty = !1;
            f.set___dirty(!1);
          }
        }
        a.__graphics.__hardwareDirty = !1;
      };
      Eg.renderDrawable = function (a, b) {
        b.__updateCacheBitmap(a, !1);
        if (null == a.__cacheBitmap || a.__isCacheBitmapRender) {
          if (
            (Eg.render(a, b),
            !(
              (null == a.opaqueBackground && null == a.__graphics) ||
              !a.__renderable ||
              0 >= a.__worldAlpha
            ))
          ) {
            if (
              null != a.opaqueBackground &&
              !a.__isCacheBitmapRender &&
              0 < a.get_width() &&
              0 < a.get_height()
            ) {
              b.__setBlendMode(a.__worldBlendMode);
              b.__pushMaskObject(a);
              var c = b.__context3D,
                d = ha.__pool.get();
              d.setTo(0, 0, a.get_width(), a.get_height());
              b.__pushMaskRect(d, a.__renderTransform);
              var e = a.opaqueBackground;
              c.clear(
                ((e >>> 16) & 255) / 255,
                ((e >>> 8) & 255) / 255,
                (e & 255) / 255,
                1,
                0,
                0,
                1
              );
              b.__popMaskRect();
              b.__popMaskObject(a);
              ha.__pool.release(d);
            }
            null != a.__graphics && jg.render(a, b);
          }
        } else Me.render(a.__cacheBitmap, b);
        b.__renderEvent(a);
      };
      Eg.renderDrawableMask = function (a, b) {
        Eg.renderMask(a, b);
        Dh.renderDrawableMask(a, b);
      };
      Eg.renderMask = function (a, b) {
        var c = b.__softwareRenderer;
        b = a.__textEngine;
        var d = !(b.background || b.border),
          e = d ? b.textBounds : b.bounds,
          f = a.__graphics,
          g = 0;
        if (a.__dirty) {
          a.__updateLayout();
          null == f.__bounds && (f.__bounds = new ha());
          if (0 == a.get_text().length) {
            g = b.bounds.width - 4;
            var h = a.get_defaultTextFormat().align;
            g = 3 == h ? 0 : 4 == h ? g : g / 2;
            switch (h) {
              case 0:
                g += a.get_defaultTextFormat().leftMargin / 2;
                g -= a.get_defaultTextFormat().rightMargin / 2;
                g += a.get_defaultTextFormat().indent / 2;
                g += a.get_defaultTextFormat().blockIndent / 2;
                break;
              case 2:
                g += a.get_defaultTextFormat().leftMargin;
                g += a.get_defaultTextFormat().indent;
                g += a.get_defaultTextFormat().blockIndent;
                break;
              case 3:
                g += a.get_defaultTextFormat().leftMargin;
                g += a.get_defaultTextFormat().indent;
                g += a.get_defaultTextFormat().blockIndent;
                break;
              case 4:
                g -= a.get_defaultTextFormat().rightMargin;
            }
            d && ((e.y = b.bounds.y), (e.x = g));
          }
          f.__bounds.copyFrom(e);
        }
        h = c.__pixelRatio;
        f.__update(c.__worldTransform, h);
        if (a.__dirty || f.__softwareDirty) {
          var l = Math.round(f.__width * h),
            p = Math.round(f.__height * h);
          if (
            !(
              (null != b.text && "" != b.text) ||
              b.background ||
              b.border ||
              b.__hasFocus ||
              (1 == b.type && b.selectable)
            ) ||
            ((0 >= b.width || 0 >= b.height) && 2 != b.autoSize)
          )
            (a.__graphics.__canvas = null),
              (a.__graphics.__context = null),
              (a.__graphics.__bitmap = null),
              (a.__graphics.__softwareDirty = !1),
              a.__graphics.set___dirty(!1),
              (a.__dirty = !1);
          else {
            null == a.__graphics.__canvas &&
              ((a.__graphics.__canvas =
                window.document.createElement("canvas")),
              (a.__graphics.__context =
                a.__graphics.__canvas.getContext("2d")));
            fa.context = f.__context;
            f.__canvas.width = l;
            f.__canvas.height = p;
            c.__isDOM &&
              ((f.__canvas.style.width = Math.round(l / h) + "px"),
              (f.__canvas.style.height = Math.round(p / h) + "px"));
            l = xa.__pool.get();
            l.scale(h, h);
            l.concat(f.__renderTransform);
            fa.context.setTransform(l.a, l.b, l.c, l.d, l.tx, l.ty);
            xa.__pool.release(l);
            null == fa.clearRect &&
              (fa.clearRect =
                "undefined" !== typeof navigator &&
                "undefined" !== typeof navigator.isCocoonJS);
            fa.clearRect &&
              fa.context.clearRect(0, 0, f.__canvas.width, f.__canvas.height);
            if ((null != b.text && "" != b.text) || b.__hasFocus) {
              d = b.text;
              f.__context.imageSmoothingEnabled =
                !c.__allowSmoothing ||
                (0 == b.antiAliasType && 400 == b.sharpness)
                  ? !1
                  : !0;
              if (b.border || b.background) {
                fa.context.rect(0.5, 0.5, e.width - 1, e.height - 1);
                if (b.background) {
                  var n = K.hex(b.backgroundColor & 16777215, 6);
                  fa.context.fillStyle = "#" + n;
                  fa.context.fill();
                }
                b.border &&
                  ((fa.context.lineWidth = 1),
                  (n = K.hex(b.borderColor & 16777215, 6)),
                  (fa.context.strokeStyle = "#" + n),
                  fa.context.stroke());
              }
              fa.context.textBaseline = "alphabetic";
              fa.context.textAlign = "start";
              c = -a.get_scrollH();
              var m = (g = 0);
              for (n = a.get_scrollV() - 1; m < n; ) {
                var q = m++;
                g -= b.lineHeights.get(q);
              }
              var t;
              for (l = b.layoutGroups.iterator(); l.hasNext(); )
                if (((p = l.next()), !(p.lineIndex < a.get_scrollV() - 1))) {
                  if (p.lineIndex > b.get_bottomScrollV() - 1) break;
                  var z = "#" + K.hex(p.format.color & 16777215, 6);
                  fa.context.font = Vb.getFont(p.format);
                  fa.context.fillStyle = z;
                  fa.context.fillText(
                    d.substring(p.startIndex, p.endIndex),
                    p.offsetX + c - e.x,
                    p.offsetY + p.ascent + g - e.y
                  );
                  if (-1 < a.__caretIndex && b.selectable)
                    if (a.__selectionIndex == a.__caretIndex) {
                      if (
                        a.__showCursor &&
                        p.startIndex <= a.__caretIndex &&
                        p.endIndex >= a.__caretIndex
                      ) {
                        m = t = 0;
                        for (n = a.__caretIndex - p.startIndex; m < n; ) {
                          q = m++;
                          if (p.positions.length <= q) break;
                          t += p.positions[q];
                        }
                        m = 0;
                        n = a.get_scrollV();
                        for (q = p.lineIndex + 1; n < q; ) {
                          var w = n++;
                          m += b.lineHeights.get(w - 1);
                        }
                        fa.context.beginPath();
                        n = K.hex(p.format.color & 16777215, 6);
                        fa.context.strokeStyle = "#" + n;
                        fa.context.moveTo(
                          p.offsetX + t - a.get_scrollH() - e.x,
                          m + 2 - e.y
                        );
                        fa.context.lineWidth = 1;
                        fa.context.lineTo(
                          p.offsetX + t - a.get_scrollH() - e.x,
                          m +
                            Vb.getFormatHeight(a.get_defaultTextFormat()) -
                            1 -
                            e.y
                        );
                        fa.context.stroke();
                        fa.context.closePath();
                      }
                    } else if (
                      (p.startIndex <= a.__caretIndex &&
                        p.endIndex >= a.__caretIndex) ||
                      (p.startIndex <= a.__selectionIndex &&
                        p.endIndex >= a.__selectionIndex) ||
                      (p.startIndex > a.__caretIndex &&
                        p.endIndex < a.__selectionIndex) ||
                      (p.startIndex > a.__selectionIndex &&
                        p.endIndex < a.__caretIndex)
                    )
                      (t = Math.min(a.__selectionIndex, a.__caretIndex) | 0),
                        (m = Math.max(a.__selectionIndex, a.__caretIndex) | 0),
                        p.startIndex > t && (t = p.startIndex),
                        p.endIndex < m && (m = p.endIndex),
                        (q = a.getCharBoundaries(t)),
                        m >= p.endIndex
                          ? ((n = a.getCharBoundaries(p.endIndex - 1)),
                            null != n && (n.x += n.width + 2))
                          : (n = a.getCharBoundaries(m)),
                        null != q &&
                          null != n &&
                          ((fa.context.fillStyle = "#000000"),
                          fa.context.fillRect(
                            q.x + c - e.x,
                            q.y + g,
                            n.x - q.x,
                            p.height
                          ),
                          (fa.context.fillStyle = "#FFFFFF"),
                          fa.context.fillText(
                            d.substring(t, m),
                            c + q.x - e.x,
                            p.offsetY + p.ascent + g
                          ));
                  p.format.underline &&
                    (fa.context.beginPath(),
                    (fa.context.strokeStyle = z),
                    (fa.context.lineWidth = 1),
                    (z = p.offsetX + c - e.x),
                    (t =
                      Math.ceil(p.offsetY + g + p.ascent - e.y) +
                      Math.floor(0.185 * p.ascent) +
                      0.5),
                    fa.context.moveTo(z, t),
                    fa.context.lineTo(z + p.width, t),
                    fa.context.stroke(),
                    fa.context.closePath());
                }
            } else {
              if (b.border || b.background)
                b.border
                  ? fa.context.rect(0.5, 0.5, e.width - 1, e.height - 1)
                  : fa.context.rect(0, 0, e.width, e.height),
                  b.background &&
                    ((n = K.hex(b.backgroundColor & 16777215, 6)),
                    (fa.context.fillStyle = "#" + n),
                    fa.context.fill()),
                  b.border &&
                    ((fa.context.lineWidth = 1),
                    (fa.context.lineCap = "square"),
                    (n = K.hex(b.borderColor & 16777215, 6)),
                    (fa.context.strokeStyle = "#" + n),
                    fa.context.stroke());
              if (-1 < a.__caretIndex && b.selectable && a.__showCursor) {
                c = -a.get_scrollH() + (d ? 0 : g);
                m = g = 0;
                for (n = a.get_scrollV() - 1; m < n; )
                  (q = m++), (g += b.lineHeights.get(q));
                fa.context.beginPath();
                n = K.hex(a.get_defaultTextFormat().color & 16777215, 6);
                fa.context.strokeStyle = "#" + n;
                fa.context.moveTo(c + 2.5, g + 2.5);
                fa.context.lineWidth = 1;
                fa.context.lineTo(
                  c + 2.5,
                  g + Vb.getFormatHeight(a.get_defaultTextFormat()) - 1
                );
                fa.context.stroke();
                fa.context.closePath();
              }
            }
            f.__bitmap = S.fromCanvas(a.__graphics.__canvas);
            f.__bitmapScale = h;
            f.__visible = !0;
            a.__dirty = !1;
            f.__softwareDirty = !1;
            f.set___dirty(!1);
          }
        }
        a.__graphics.__hardwareDirty = !1;
      };
      var R = function () {};
      h["openfl.display._internal.Context3DTilemap"] = R;
      R.__name__ = "openfl.display._internal.Context3DTilemap";
      R.buildBuffer = function (a, b) {
        if (
          !a.__renderable ||
          0 == a.__group.__tiles.length ||
          0 >= a.__worldAlpha
        )
          a.__group.__dirty = !1;
        else {
          R.numTiles = 0;
          R.vertexBufferData =
            null != a.__buffer ? a.__buffer.vertexBufferData : null;
          R.vertexDataPosition = 0;
          var c = ha.__pool.get(),
            d = xa.__pool.get(),
            e = xa.__pool.get();
          R.dataPerVertex = 4;
          a.tileAlphaEnabled && R.dataPerVertex++;
          a.tileColorTransformEnabled && (R.dataPerVertex += 8);
          R.buildBufferTileContainer(
            a,
            a.__group,
            b,
            e,
            a.__tileset,
            a.tileAlphaEnabled,
            a.__worldAlpha,
            a.tileColorTransformEnabled,
            a.__worldColorTransform,
            null,
            c,
            d
          );
          a.__buffer.flushVertexBufferData();
          ha.__pool.release(c);
          xa.__pool.release(d);
          xa.__pool.release(e);
        }
      };
      R.buildBufferTileContainer = function (
        a,
        b,
        c,
        d,
        e,
        f,
        g,
        h,
        l,
        p,
        n,
        m,
        q
      ) {
        null == q && (q = !0);
        var k = xa.__pool.get(),
          r = c.__roundPixels,
          t = b.__tiles,
          u = null;
        u = function (a) {
          a = a.__tiles;
          for (var b = 0, c = 0; c < a.length; ) {
            var d = a[c];
            ++c;
            0 < d.__length ? (b += u(d)) : ++b;
          }
          return b;
        };
        q && R.resizeBuffer(a, R.numTiles + u(b));
        q = null;
        for (
          var z, w, x, D, J, y, A, C, E, F, G = f ? 5 : 4, B = 0;
          B < t.length;

        ) {
          var v = t[B];
          ++B;
          k.setTo(1, 0, 0, 1, -v.get_originX(), -v.get_originY());
          k.concat(v.get_matrix());
          k.concat(d);
          r && ((k.tx = Math.round(k.tx)), (k.ty = Math.round(k.ty)));
          var K = null != v.get_tileset() ? v.get_tileset() : e;
          var I = v.get_alpha() * g;
          var U = v.get_visible();
          v.__dirty = !1;
          if (U && !(0 >= I))
            if (
              (h &&
                (null != v.get_colorTransform()
                  ? null == l
                    ? (q = v.get_colorTransform())
                    : (null == R.cacheColorTransform &&
                        (R.cacheColorTransform = new Qb()),
                      (q = R.cacheColorTransform),
                      (q.redMultiplier =
                        l.redMultiplier * v.get_colorTransform().redMultiplier),
                      (q.greenMultiplier =
                        l.greenMultiplier *
                        v.get_colorTransform().greenMultiplier),
                      (q.blueMultiplier =
                        l.blueMultiplier *
                        v.get_colorTransform().blueMultiplier),
                      (q.alphaMultiplier =
                        l.alphaMultiplier *
                        v.get_colorTransform().alphaMultiplier),
                      (q.redOffset =
                        l.redOffset + v.get_colorTransform().redOffset),
                      (q.greenOffset =
                        l.greenOffset + v.get_colorTransform().greenOffset),
                      (q.blueOffset =
                        l.blueOffset + v.get_colorTransform().blueOffset),
                      (q.alphaOffset =
                        l.alphaOffset + v.get_colorTransform().alphaOffset))
                  : (q = l)),
              f || (I = 1),
              0 < v.__length)
            )
              R.buildBufferTileContainer(
                a,
                v,
                c,
                k,
                K,
                f,
                I,
                h,
                q,
                p,
                n,
                m,
                !1
              );
            else if (
              null != K &&
              ((U = v.get_id()), (z = K.__bitmapData), null != z)
            ) {
              if (-1 == U) {
                w = v.__rect;
                if (null == w || 0 >= w.width || 0 >= w.height) continue;
                v = w.x / z.width;
                K = w.y / z.height;
                U = w.get_right() / z.width;
                D = w.get_bottom() / z.height;
              } else {
                z = K.__data[U];
                if (null == z) continue;
                n.setTo(z.x, z.y, z.width, z.height);
                w = n;
                v = z.__uvX;
                K = z.__uvY;
                U = z.__uvWidth;
                D = z.__uvHeight;
              }
              z = w.width;
              x = w.height;
              w = 0 * k.a + 0 * k.c + k.tx;
              J = 0 * k.b + 0 * k.d + k.ty;
              y = z * k.a + 0 * k.c + k.tx;
              A = z * k.b + 0 * k.d + k.ty;
              C = 0 * k.a + x * k.c + k.tx;
              E = 0 * k.b + x * k.d + k.ty;
              F = z * k.a + x * k.c + k.tx;
              x = z * k.b + x * k.d + k.ty;
              z = R.vertexDataPosition;
              R.vertexBufferData[z] = w;
              R.vertexBufferData[z + 1] = J;
              R.vertexBufferData[z + 2] = v;
              R.vertexBufferData[z + 3] = K;
              R.vertexBufferData[z + R.dataPerVertex] = y;
              R.vertexBufferData[z + R.dataPerVertex + 1] = A;
              R.vertexBufferData[z + R.dataPerVertex + 2] = U;
              R.vertexBufferData[z + R.dataPerVertex + 3] = K;
              R.vertexBufferData[z + 2 * R.dataPerVertex] = C;
              R.vertexBufferData[z + 2 * R.dataPerVertex + 1] = E;
              R.vertexBufferData[z + 2 * R.dataPerVertex + 2] = v;
              R.vertexBufferData[z + 2 * R.dataPerVertex + 3] = D;
              R.vertexBufferData[z + 3 * R.dataPerVertex] = F;
              R.vertexBufferData[z + 3 * R.dataPerVertex + 1] = x;
              R.vertexBufferData[z + 3 * R.dataPerVertex + 2] = U;
              R.vertexBufferData[z + 3 * R.dataPerVertex + 3] = D;
              f &&
                ((R.vertexBufferData[z + 0 * R.dataPerVertex + 4] = I),
                (R.vertexBufferData[z + R.dataPerVertex + 4] = I),
                (R.vertexBufferData[z + 2 * R.dataPerVertex + 4] = I),
                (R.vertexBufferData[z + 3 * R.dataPerVertex + 4] = I));
              if (h)
                if (null != q)
                  for (I = 0; 4 > I; )
                    (v = I++),
                      (R.vertexBufferData[z + R.dataPerVertex * v + G] =
                        q.redMultiplier),
                      (R.vertexBufferData[z + R.dataPerVertex * v + G + 1] =
                        q.greenMultiplier),
                      (R.vertexBufferData[z + R.dataPerVertex * v + G + 2] =
                        q.blueMultiplier),
                      (R.vertexBufferData[z + R.dataPerVertex * v + G + 3] =
                        q.alphaMultiplier),
                      (R.vertexBufferData[z + R.dataPerVertex * v + G + 4] =
                        q.redOffset),
                      (R.vertexBufferData[z + R.dataPerVertex * v + G + 5] =
                        q.greenOffset),
                      (R.vertexBufferData[z + R.dataPerVertex * v + G + 6] =
                        q.blueOffset),
                      (R.vertexBufferData[z + R.dataPerVertex * v + G + 7] =
                        q.alphaOffset);
                else
                  for (I = 0; 4 > I; )
                    (v = I++),
                      (R.vertexBufferData[z + R.dataPerVertex * v + G] = 1),
                      (R.vertexBufferData[z + R.dataPerVertex * v + G + 1] = 1),
                      (R.vertexBufferData[z + R.dataPerVertex * v + G + 2] = 1),
                      (R.vertexBufferData[z + R.dataPerVertex * v + G + 3] = 1),
                      (R.vertexBufferData[z + R.dataPerVertex * v + G + 4] = 0),
                      (R.vertexBufferData[z + R.dataPerVertex * v + G + 5] = 0),
                      (R.vertexBufferData[z + R.dataPerVertex * v + G + 6] = 0),
                      (R.vertexBufferData[z + R.dataPerVertex * v + G + 7] = 0);
              R.vertexDataPosition += 4 * R.dataPerVertex;
            }
        }
        b.__dirty = !1;
        xa.__pool.release(k);
      };
      R.flush = function (a, b, c) {
        null == R.currentShader && (R.currentShader = b.__defaultDisplayShader);
        if (
          R.bufferPosition > R.lastFlushedPosition &&
          null != R.currentBitmapData &&
          null != R.currentShader
        ) {
          var d = b.__initDisplayShader(R.currentShader);
          b.setShader(d);
          b.applyBitmapData(R.currentBitmapData, a.smoothing);
          b.applyMatrix(b.__getMatrix(a.__renderTransform, 1));
          a.tileAlphaEnabled ? b.useAlphaArray() : b.applyAlpha(a.__worldAlpha);
          a.tileBlendModeEnabled && b.__setBlendMode(c);
          a.tileColorTransformEnabled
            ? (b.applyHasColorTransform(!0), b.useColorTransformArray())
            : b.applyColorTransform(a.__worldColorTransform);
          b.updateShader();
          c = a.__buffer.vertexBuffer;
          for (
            var e = R.lastFlushedPosition * R.dataPerVertex * 4, f;
            R.lastFlushedPosition < R.bufferPosition;

          ) {
            f =
              Math.min(
                R.bufferPosition - R.lastFlushedPosition,
                R.context.__quadIndexBufferElements
              ) | 0;
            if (0 >= f) break;
            null != d.__position &&
              R.context.setVertexBufferAt(d.__position.index, c, e, 2);
            null != d.__textureCoord &&
              R.context.setVertexBufferAt(d.__textureCoord.index, c, e + 2, 2);
            a.tileAlphaEnabled &&
              null != d.__alpha &&
              R.context.setVertexBufferAt(d.__alpha.index, c, e + 4, 1);
            if (a.tileColorTransformEnabled) {
              var g = a.tileAlphaEnabled ? 5 : 4;
              null != d.__colorMultiplier &&
                R.context.setVertexBufferAt(
                  d.__colorMultiplier.index,
                  c,
                  e + g,
                  4
                );
              null != d.__colorOffset &&
                R.context.setVertexBufferAt(
                  d.__colorOffset.index,
                  c,
                  e + g + 4,
                  4
                );
            }
            R.context.drawTriangles(R.context.__quadIndexBuffer, 0, 2 * f);
            R.lastFlushedPosition += f;
          }
          b.__clearShader();
        }
        R.lastUsedBitmapData = R.currentBitmapData;
        R.lastUsedShader = R.currentShader;
      };
      R.render = function (a, b) {
        if (
          a.__renderable &&
          !(0 >= a.__worldAlpha) &&
          ((R.context = b.__context3D), R.buildBuffer(a, b), 0 != R.numTiles)
        ) {
          R.bufferPosition = 0;
          R.lastFlushedPosition = 0;
          R.lastUsedBitmapData = null;
          R.lastUsedShader = null;
          R.currentBitmapData = null;
          R.currentShader = null;
          R.currentBlendMode = a.__worldBlendMode;
          a.tileBlendModeEnabled || b.__setBlendMode(R.currentBlendMode);
          b.__pushMaskObject(a);
          var c = ha.__pool.get();
          c.setTo(0, 0, a.__width, a.__height);
          b.__pushMaskRect(c, a.__renderTransform);
          R.renderTileContainer(
            a,
            b,
            a.__group,
            a.__worldShader,
            a.__tileset,
            a.__worldAlpha,
            a.tileBlendModeEnabled,
            R.currentBlendMode,
            null
          );
          R.flush(a, b, R.currentBlendMode);
          b.__popMaskRect();
          b.__popMaskObject(a);
          ha.__pool.release(c);
        }
      };
      R.renderDrawable = function (a, b) {
        b.__updateCacheBitmap(a, !1);
        if (null == a.__cacheBitmap || a.__isCacheBitmapRender) {
          if (
            !(
              (null == a.opaqueBackground && null == a.__graphics) ||
              !a.__renderable ||
              0 >= a.__worldAlpha
            )
          ) {
            if (
              null != a.opaqueBackground &&
              !a.__isCacheBitmapRender &&
              0 < a.get_width() &&
              0 < a.get_height()
            ) {
              b.__setBlendMode(a.__worldBlendMode);
              b.__pushMaskObject(a);
              var c = b.__context3D,
                d = ha.__pool.get();
              d.setTo(0, 0, a.get_width(), a.get_height());
              b.__pushMaskRect(d, a.__renderTransform);
              var e = a.opaqueBackground;
              c.clear(
                ((e >>> 16) & 255) / 255,
                ((e >>> 8) & 255) / 255,
                (e & 255) / 255,
                1,
                0,
                0,
                1
              );
              b.__popMaskRect();
              b.__popMaskObject(a);
              ha.__pool.release(d);
            }
            null != a.__graphics && jg.render(a, b);
          }
          R.render(a, b);
        } else Me.render(a.__cacheBitmap, b);
        b.__renderEvent(a);
      };
      R.renderDrawableMask = function (a, b) {
        if (null != a.opaqueBackground || null != a.__graphics)
          null != a.opaqueBackground &&
            !a.__isCacheBitmapRender &&
            0 < a.get_width() &&
            a.get_height(),
            null != a.__graphics && jg.renderMask(a, b);
        R.renderMask(a, b);
      };
      R.renderTileContainer = function (a, b, c, d, e, f, g, h, l) {
        c = c.__tiles;
        for (var k, p, m, n, r = null, q, z = 0; z < c.length; )
          if (
            ((k = c[z]),
            ++z,
            (p = null != k.get_tileset() ? k.get_tileset() : e),
            (m = k.get_alpha() * f),
            (n = k.get_visible()) && !(0 >= m))
          )
            if (
              ((n = null != k.get_shader() ? k.get_shader() : d),
              g && (r = null != k.__blendMode ? k.__blendMode : h),
              0 < k.__length)
            )
              R.renderTileContainer(a, b, k, n, p, m, g, r, l);
            else if (
              null != p &&
              ((q = k.get_id()), (m = p.__bitmapData), null != m)
            ) {
              if (-1 == q) {
                if (
                  ((k = k.__rect), null == k || 0 >= k.width || 0 >= k.height)
                )
                  continue;
              } else if (((k = p.__data[q]), null == k)) continue;
              (n != R.currentShader ||
                (m != R.currentBitmapData && null != R.currentBitmapData) ||
                R.currentBlendMode != r) &&
                R.flush(a, b, R.currentBlendMode);
              R.currentBitmapData = m;
              R.currentShader = n;
              R.currentBlendMode = r;
              R.bufferPosition++;
            }
      };
      R.renderMask = function (a, b) {};
      R.resizeBuffer = function (a, b) {
        R.numTiles = b;
        null == a.__buffer
          ? (a.__buffer = new Jj(
              R.context,
              hm.QUADS,
              R.numTiles,
              R.dataPerVertex
            ))
          : a.__buffer.resize(R.numTiles, R.dataPerVertex);
        R.vertexBufferData = a.__buffer.vertexBufferData;
      };
      var Ne = function () {};
      h["openfl.display._internal.Context3DVideo"] = Ne;
      Ne.__name__ = "openfl.display._internal.Context3DVideo";
      Ne.render = function (a, b) {
        if (
          a.__renderable &&
          !(0 >= a.__worldAlpha) &&
          null != a.__stream &&
          null != a.__stream.__video
        ) {
          var c = b.__context3D,
            d = c.gl;
          if (null != a.__getTexture(c)) {
            b.__setBlendMode(a.__worldBlendMode);
            b.__pushMaskObject(a);
            var e = b.__initDisplayShader(a.__worldShader);
            b.setShader(e);
            b.applyBitmapData(null, !0, !1);
            b.applyMatrix(b.__getMatrix(a.__renderTransform, 1));
            b.applyAlpha(a.__worldAlpha);
            b.applyColorTransform(a.__worldColorTransform);
            null != e.__textureSize &&
              ((Ne.__textureSizeValue[0] =
                null != a.__stream ? a.__stream.__video.videoWidth : 0),
              (Ne.__textureSizeValue[1] =
                null != a.__stream ? a.__stream.__video.videoHeight : 0),
              (e.__textureSize.value = Ne.__textureSizeValue));
            b.updateShader();
            c.setTextureAt(0, a.__getTexture(c));
            c.__flushGLTextures();
            d.uniform1i(e.__texture.index, 0);
            a.smoothing
              ? (d.texParameteri(d.TEXTURE_2D, d.TEXTURE_MAG_FILTER, d.LINEAR),
                d.texParameteri(d.TEXTURE_2D, d.TEXTURE_MIN_FILTER, d.LINEAR))
              : (d.texParameteri(d.TEXTURE_2D, d.TEXTURE_MAG_FILTER, d.NEAREST),
                d.texParameteri(d.TEXTURE_2D, d.TEXTURE_MIN_FILTER, d.NEAREST));
            d = a.__getVertexBuffer(c);
            null != e.__position &&
              c.setVertexBufferAt(e.__position.index, d, 0, 3);
            null != e.__textureCoord &&
              c.setVertexBufferAt(e.__textureCoord.index, d, 3, 2);
            e = a.__getIndexBuffer(c);
            c.drawTriangles(e);
            b.__clearShader();
            b.__popMaskObject(a);
          }
        }
      };
      Ne.renderDrawable = function (a, b) {
        Ne.render(a, b);
        b.__renderEvent(a);
      };
      Ne.renderDrawableMask = function (a, b) {
        Ne.renderMask(a, b);
      };
      Ne.renderMask = function (a, b) {
        if (null != a.__stream && null != a.__stream.__video) {
          var c = b.__context3D,
            d = b.__maskShader;
          b.setShader(d);
          b.applyBitmapData(Ch.opaqueBitmapData, !0);
          b.applyMatrix(b.__getMatrix(a.__renderTransform, 1));
          b.updateShader();
          var e = a.__getVertexBuffer(c);
          null != d.__position &&
            c.setVertexBufferAt(d.__position.index, e, 0, 3);
          null != d.__textureCoord &&
            c.setVertexBufferAt(d.__textureCoord.index, e, 3, 2);
          a = a.__getIndexBuffer(c);
          c.drawTriangles(a);
          b.__clearShader();
        }
      };
      var dc = function () {};
      h["openfl.display._internal.DOMBitmap"] = dc;
      dc.__name__ = "openfl.display._internal.DOMBitmap";
      dc.clear = function (a, b) {
        Ud.clear(a, b);
        null != a.__image &&
          (b.element.removeChild(a.__image),
          (a.__image = null),
          (a.__style = null));
        null != a.__canvas &&
          (b.element.removeChild(a.__canvas),
          (a.__canvas = null),
          (a.__style = null));
      };
      dc.renderCanvas = function (a, b) {
        null != a.__image &&
          (b.element.removeChild(a.__image), (a.__image = null));
        null == a.__canvas &&
          ((a.__canvas = window.document.createElement("canvas")),
          (a.__context = a.__canvas.getContext("2d")),
          (a.__imageVersion = -1),
          (b.__allowSmoothing && a.smoothing) ||
            (a.__context.imageSmoothingEnabled = !1),
          b.__initializeElement(a, a.__canvas));
        a.__imageVersion != a.__bitmapData.image.version &&
          (Ra.convertToCanvas(a.__bitmapData.image),
          (a.__canvas.width = a.__bitmapData.width + 1),
          (a.__canvas.width = a.__bitmapData.width),
          (a.__canvas.height = a.__bitmapData.height),
          a.__context.drawImage(a.__bitmapData.image.buffer.__srcCanvas, 0, 0),
          (a.__imageVersion = a.__bitmapData.image.version));
        b.__updateClip(a);
        b.__applyStyle(a, !0, !0, !0);
      };
      dc.renderDrawable = function (a, b) {
        b.__updateCacheBitmap(a, !1);
        if (null == a.__cacheBitmap || a.__isCacheBitmapRender) {
          null != a.opaqueBackground &&
            !a.__isCacheBitmapRender &&
            0 < a.get_width() &&
            a.get_height();
          var c = a.__graphics;
          if (
            null != a.stage &&
            a.__worldVisible &&
            a.__renderable &&
            null != c
          ) {
            A.render(c, b.__canvasRenderer);
            if (
              c.__softwareDirty ||
              a.__worldAlphaChanged ||
              a.__canvas != c.__canvas
            )
              null != c.__canvas
                ? a.__canvas != c.__canvas &&
                  (null != a.__canvas && b.element.removeChild(a.__canvas),
                  (a.__canvas = c.__canvas),
                  (a.__context = c.__context),
                  b.__initializeElement(a, a.__canvas))
                : ih.clear(a, b);
            if (null != a.__canvas) {
              b.__pushMaskObject(a);
              var d = a.__renderTransform;
              a.__renderTransform = c.__worldTransform;
              c.__transformDirty &&
                ((c.__transformDirty = !1), (a.__renderTransformChanged = !0));
              b.__updateClip(a);
              b.__applyStyle(a, !0, !0, !0);
              a.__renderTransform = d;
              b.__popMaskObject(a);
            }
          } else ih.clear(a, b);
          null != a.stage &&
          a.__worldVisible &&
          a.__renderable &&
          null != a.__bitmapData &&
          a.__bitmapData.__isValid &&
          a.__bitmapData.readable
            ? (b.__pushMaskObject(a),
              null != a.__bitmapData.image.buffer.__srcImage
                ? ((d = a.__bitmapData.image.buffer.__srcImage.src),
                  K.startsWith(d, "data:") || K.startsWith(d, "blob:")
                    ? dc.renderCanvas(a, b)
                    : dc.renderImage(a, b))
                : dc.renderCanvas(a, b),
              b.__popMaskObject(a))
            : dc.clear(a, b);
        } else
          b.__renderDrawableClear(a),
            (a.__cacheBitmap.stage = a.stage),
            (c = a.__cacheBitmap),
            null != c.stage &&
            c.__worldVisible &&
            c.__renderable &&
            null != c.__bitmapData &&
            c.__bitmapData.__isValid &&
            c.__bitmapData.readable
              ? (b.__pushMaskObject(c),
                null != c.__bitmapData.image.buffer.__srcImage
                  ? ((d = c.__bitmapData.image.buffer.__srcImage.src),
                    K.startsWith(d, "data:") || K.startsWith(d, "blob:")
                      ? dc.renderCanvas(c, b)
                      : dc.renderImage(c, b))
                  : dc.renderCanvas(c, b),
                b.__popMaskObject(c))
              : dc.clear(c, b);
        b.__renderEvent(a);
      };
      dc.renderDrawableClear = function (a, b) {
        dc.clear(a, b);
      };
      dc.renderImage = function (a, b) {
        null != a.__canvas &&
          (b.element.removeChild(a.__canvas), (a.__canvas = null));
        null == a.__image &&
          ((a.__image = window.document.createElement("img")),
          (a.__image.crossOrigin = "Anonymous"),
          (a.__image.src = a.__bitmapData.image.buffer.__srcImage.src),
          b.__initializeElement(a, a.__image));
        b.__updateClip(a);
        b.__applyStyle(a, !0, !0, !0);
      };
      var Ud = function () {};
      h["openfl.display._internal.DOMDisplayObject"] = Ud;
      Ud.__name__ = "openfl.display._internal.DOMDisplayObject";
      Ud.clear = function (a, b) {
        null != a.__cacheBitmap && dc.clear(a.__cacheBitmap, b);
        ih.clear(a, b);
      };
      Ud.renderDrawable = function (a, b) {
        b.__updateCacheBitmap(a, !1);
        if (null == a.__cacheBitmap || a.__isCacheBitmapRender) {
          null != a.opaqueBackground &&
            !a.__isCacheBitmapRender &&
            0 < a.get_width() &&
            a.get_height();
          var c = a.__graphics;
          if (
            null != a.stage &&
            a.__worldVisible &&
            a.__renderable &&
            null != c
          ) {
            A.render(c, b.__canvasRenderer);
            if (
              c.__softwareDirty ||
              a.__worldAlphaChanged ||
              a.__canvas != c.__canvas
            )
              null != c.__canvas
                ? a.__canvas != c.__canvas &&
                  (null != a.__canvas && b.element.removeChild(a.__canvas),
                  (a.__canvas = c.__canvas),
                  (a.__context = c.__context),
                  b.__initializeElement(a, a.__canvas))
                : ih.clear(a, b);
            if (null != a.__canvas) {
              b.__pushMaskObject(a);
              var d = a.__renderTransform;
              a.__renderTransform = c.__worldTransform;
              c.__transformDirty &&
                ((c.__transformDirty = !1), (a.__renderTransformChanged = !0));
              b.__updateClip(a);
              b.__applyStyle(a, !0, !0, !0);
              a.__renderTransform = d;
              b.__popMaskObject(a);
            }
          } else ih.clear(a, b);
        } else
          b.__renderDrawableClear(a),
            (a.__cacheBitmap.stage = a.stage),
            (c = a.__cacheBitmap),
            null != c.stage &&
            c.__worldVisible &&
            c.__renderable &&
            null != c.__bitmapData &&
            c.__bitmapData.__isValid &&
            c.__bitmapData.readable
              ? (b.__pushMaskObject(c),
                null != c.__bitmapData.image.buffer.__srcImage
                  ? ((d = c.__bitmapData.image.buffer.__srcImage.src),
                    K.startsWith(d, "data:") || K.startsWith(d, "blob:")
                      ? dc.renderCanvas(c, b)
                      : dc.renderImage(c, b))
                  : dc.renderCanvas(c, b),
                b.__popMaskObject(c))
              : dc.clear(c, b);
        b.__renderEvent(a);
      };
      Ud.renderDrawableClear = function (a, b) {
        Ud.clear(a, b);
      };
      var Wl = function () {};
      h["openfl.display._internal.DOMDisplayObjectContainer"] = Wl;
      Wl.__name__ = "openfl.display._internal.DOMDisplayObjectContainer";
      Wl.renderDrawable = function (a, b) {
        for (var c = a.__removedChildren.iterator(); c.hasNext(); ) {
          var d = c.next();
          null == d.stage && b.__renderDrawable(d);
        }
        for (c = a.__removedChildren.iterator(); c.hasNext(); )
          (d = c.next()), null == d.stage && d.__cleanup();
        a.__removedChildren.set_length(0);
        Ud.renderDrawable(a, b);
        if (null == a.__cacheBitmap || a.__isCacheBitmapRender) {
          b.__pushMaskObject(a);
          if (null != b.__stage) {
            c = 0;
            for (d = a.__children; c < d.length; )
              (e = d[c]), ++c, b.__renderDrawable(e), (e.__renderDirty = !1);
            a.__renderDirty = !1;
          } else
            for (c = 0, d = a.__children; c < d.length; )
              (e = d[c]), ++c, b.__renderDrawable(e);
          b.__popMaskObject(a);
        } else {
          c = 0;
          for (d = a.__children; c < d.length; ) {
            var e = d[c];
            ++c;
            b.__renderDrawableClear(e);
          }
          ih.clear(a, b);
          a.__cacheBitmap.stage = a.stage;
        }
      };
      Wl.renderDrawableClear = function (a, b) {
        for (var c = a.__removedChildren.iterator(); c.hasNext(); ) {
          var d = c.next();
          null == d.stage && b.__renderDrawableClear(d);
        }
        for (c = a.__removedChildren.iterator(); c.hasNext(); )
          (d = c.next()), null == d.stage && d.__cleanup();
        a.__removedChildren.set_length(0);
        c = 0;
        for (d = a.__children; c < d.length; ) {
          var e = d[c];
          ++c;
          b.__renderDrawableClear(e);
        }
        Ud.clear(a, b);
      };
      var ih = function () {};
      h["openfl.display._internal.DOMShape"] = ih;
      ih.__name__ = "openfl.display._internal.DOMShape";
      ih.clear = function (a, b) {
        null != a.__canvas &&
          (b.element.removeChild(a.__canvas),
          (a.__canvas = null),
          (a.__style = null));
      };
      var Xl = function () {};
      h["openfl.display._internal.DOMSimpleButton"] = Xl;
      Xl.__name__ = "openfl.display._internal.DOMSimpleButton";
      Xl.renderDrawable = function (a, b) {
        b.__pushMaskObject(a);
        for (var c = a.__previousStates.iterator(); c.hasNext(); ) {
          var d = c.next();
          b.__renderDrawable(d);
        }
        a.__previousStates.set_length(0);
        null != a.__currentState &&
          (a.__currentState.stage != a.stage &&
            a.__currentState.__setStageReference(a.stage),
          b.__renderDrawable(a.__currentState));
        b.__popMaskObject(a);
        b.__renderEvent(a);
      };
      Xl.renderDrawableClear = function (a, b) {
        Ud.renderDrawableClear(a, b);
      };
      var gh = function () {};
      h["openfl.display._internal.DOMTextField"] = gh;
      gh.__name__ = "openfl.display._internal.DOMTextField";
      gh.clear = function (a, b) {
        Ud.clear(a, b);
        null != a.__div &&
          (b.element.removeChild(a.__div),
          (a.__div = null),
          (a.__style = null));
      };
      gh.renderDrawable = function (a, b) {
        a.__domRender = !0;
        b.__updateCacheBitmap(a, a.__forceCachedBitmapUpdate);
        a.__forceCachedBitmapUpdate = !1;
        a.__domRender = !1;
        if (null == a.__cacheBitmap || a.__isCacheBitmapRender) {
          a.__renderedOnCanvasWhileOnDOM &&
            ((a.__renderedOnCanvasWhileOnDOM = !1),
            a.__isHTML &&
              null != a.__htmlText &&
              (a.__updateText(a.__htmlText),
              (a.__dirty = !0),
              (a.__layoutDirty = !0),
              a.__renderDirty ||
                ((a.__renderDirty = !0), a.__setParentRenderDirty())));
          var c = a.__textEngine;
          if (null != a.stage && a.__worldVisible && a.__renderable) {
            if (a.__dirty || a.__renderTransformChanged || null == a.__div)
              if ("" != c.text || c.background || c.border || 1 == c.type) {
                a.__updateLayout();
                null == a.__div &&
                  ((a.__div = window.document.createElement("div")),
                  b.__initializeElement(a, a.__div),
                  a.__style.setProperty("outline", "none", null),
                  a.__div.addEventListener(
                    "input",
                    function (b) {
                      b.preventDefault();
                      a.get_htmlText() != a.__div.innerHTML &&
                        (a.set_htmlText(a.__div.innerHTML),
                        (a.__dirty = !1),
                        a.dispatchEvent(
                          new hg("textInput", !1, !1, a.get_htmlText())
                        ));
                    },
                    !0
                  ));
                c.wordWrap
                  ? a.__style.setProperty("word-wrap", "break-word", null)
                  : a.__style.setProperty("white-space", "nowrap", null);
                a.__style.setProperty("overflow", "hidden", null);
                c.selectable
                  ? (a.__style.setProperty("cursor", "text", null),
                    a.__style.setProperty("-webkit-user-select", "text", null),
                    a.__style.setProperty("-moz-user-select", "text", null),
                    a.__style.setProperty("-ms-user-select", "text", null),
                    a.__style.setProperty("-o-user-select", "text", null))
                  : a.__style.setProperty("cursor", "inherit", null);
                a.__div.contentEditable = 1 == c.type;
                var d = a.__style;
                c.background
                  ? d.setProperty(
                      "background-color",
                      "#" + K.hex(c.backgroundColor & 16777215, 6),
                      null
                    )
                  : d.removeProperty("background-color");
                var e = c.width,
                  f = c.height,
                  g = "";
                a.__isHTML &&
                  a.__updateText(
                    Ma.parse(
                      a.__text,
                      a.get_multiline(),
                      a.__styleSheet,
                      a.__textFormat,
                      a.__textEngine.textFormatRanges
                    )
                  );
                for (
                  var h = -a.get_scrollH(), l = c.layoutGroups.iterator();
                  l.hasNext();

                ) {
                  var p = l.next();
                  if (!(p.lineIndex < a.get_scrollV() - 1)) {
                    if (p.lineIndex > c.get_bottomScrollV() - 1) break;
                    g += '<div style="';
                    null != p.format.font &&
                      (g += "font: " + Vb.getFont(p.format) + "; ");
                    null != p.format.color &&
                      (g +=
                        "color: #" +
                        K.hex(p.format.color & 16777215, 6) +
                        "; ");
                    1 == p.format.underline &&
                      (g += "text-decoration: underline; ");
                    if (null != p.format.align)
                      switch (p.format.align) {
                        case 0:
                          g += "text-align: center; ";
                          break;
                        case 2:
                          g += "text-align: justify; ";
                          break;
                        case 4:
                          g += "text-align: right; ";
                          break;
                        default:
                          g += "text-align: left; ";
                      }
                    null != p.format.leftMargin &&
                      (g +=
                        "padding-left: " + 1 * p.format.leftMargin + "px; ");
                    null != p.format.rightMargin &&
                      (g +=
                        "padding-right: " + 1 * p.format.rightMargin + "px; ");
                    null != p.format.indent &&
                      (g += "text-indent: " + 1 * p.format.indent + "px; ");
                    g +=
                      "left: " +
                      (p.offsetX + h) +
                      "px; top: " +
                      (p.offsetY + 0 + 3) +
                      'px; vertical-align: top; position: absolute;">';
                    if (null != p.format.url && "" != p.format.url) {
                      var n = "text-decoration: underline; ";
                      null != p.format.color &&
                        (n +=
                          "color: #" +
                          K.hex(p.format.color & 16777215, 6) +
                          "; ");
                      g +=
                        "<a style='" +
                        n +
                        "' href='" +
                        p.format.url +
                        "' target='" +
                        p.format.target +
                        "'>";
                    }
                    g = a.__isHTML
                      ? g +
                        K.replace(
                          c.text.substring(p.startIndex, p.endIndex),
                          " ",
                          "&nbsp;"
                        )
                      : g +
                        K.replace(
                          K.htmlEscape(
                            c.text.substring(p.startIndex, p.endIndex)
                          ),
                          " ",
                          "&nbsp;"
                        );
                    null != p.format.url && "" != p.format.url && (g += "</a>");
                    g += "</div>";
                  }
                }
                c.border
                  ? (d.setProperty(
                      "border",
                      "solid 1px #" + K.hex(c.borderColor & 16777215, 6),
                      null
                    ),
                    a.__renderTransform.translate(-1, -1),
                    (a.__renderTransformChanged = !0),
                    (a.__transformDirty = !0))
                  : "" != d.border &&
                    (d.removeProperty("border"),
                    (a.__renderTransformChanged = !0));
                d.setProperty("width", e + "px", null);
                d.setProperty("height", f + "px", null);
                a.__div.innerHTML = g;
                a.__dirty = !1;
              } else
                null != a.__div &&
                  (b.element.removeChild(a.__div), (a.__div = null));
            null != a.__div &&
              ((c = b.__roundPixels),
              (b.__roundPixels = !0),
              b.__updateClip(a),
              b.__applyStyle(a, !0, !0, !0),
              (b.__roundPixels = c));
          } else gh.clear(a, b);
        } else
          b.__renderDrawableClear(a),
            (a.__cacheBitmap.stage = a.stage),
            (c = a.__cacheBitmap),
            null != c.stage &&
            c.__worldVisible &&
            c.__renderable &&
            null != c.__bitmapData &&
            c.__bitmapData.__isValid &&
            c.__bitmapData.readable
              ? (b.__pushMaskObject(c),
                null != c.__bitmapData.image.buffer.__srcImage
                  ? ((d = c.__bitmapData.image.buffer.__srcImage.src),
                    K.startsWith(d, "data:") || K.startsWith(d, "blob:")
                      ? dc.renderCanvas(c, b)
                      : dc.renderImage(c, b))
                  : dc.renderCanvas(c, b),
                b.__popMaskObject(c))
              : dc.clear(c, b);
        b.__renderEvent(a);
      };
      gh.renderDrawableClear = function (a, b) {
        gh.clear(a, b);
      };
      var hh = function () {};
      h["openfl.display._internal.DOMTilemap"] = hh;
      hh.__name__ = "openfl.display._internal.DOMTilemap";
      hh.clear = function (a, b) {
        Ud.clear(a, b);
        null != a.__canvas &&
          (b.element.removeChild(a.__canvas),
          (a.__canvas = null),
          (a.__style = null));
      };
      hh.renderDrawable = function (a, b) {
        b.__updateCacheBitmap(a, !1);
        if (null == a.__cacheBitmap || a.__isCacheBitmapRender)
          if (
            null != a.stage &&
            a.__worldVisible &&
            a.__renderable &&
            0 < a.__group.__tiles.length
          ) {
            null == a.__canvas &&
              ((a.__canvas = window.document.createElement("canvas")),
              (a.__context = a.__canvas.getContext("2d")),
              b.__initializeElement(a, a.__canvas));
            a.__canvas.width = a.__width;
            a.__canvas.height = a.__height;
            b.__canvasRenderer.context = a.__context;
            var c = a.__renderTransform;
            a.__renderTransform = xa.__identity;
            var d = b.__canvasRenderer;
            if (
              (null != a.opaqueBackground || null != a.__graphics) &&
              a.__renderable
            ) {
              var e = d.__getAlpha(a.__worldAlpha);
              if (!(0 >= e)) {
                if (
                  null != a.opaqueBackground &&
                  !a.__isCacheBitmapRender &&
                  0 < a.get_width() &&
                  0 < a.get_height()
                ) {
                  d.__setBlendMode(a.__worldBlendMode);
                  d.__pushMaskObject(a);
                  var f = d.context;
                  d.setTransform(a.__renderTransform, f);
                  var g = a.opaqueBackground;
                  f.fillStyle =
                    "rgb(" +
                    ((g >>> 16) & 255) +
                    "," +
                    ((g >>> 8) & 255) +
                    "," +
                    (g & 255) +
                    ")";
                  f.fillRect(0, 0, a.get_width(), a.get_height());
                  d.__popMaskObject(a);
                }
                if (
                  null != a.__graphics &&
                  a.__renderable &&
                  ((e = d.__getAlpha(a.__worldAlpha)), !(0 >= e))
                ) {
                  var h = a.__graphics;
                  if (null != h) {
                    A.render(h, d);
                    var l = h.__width,
                      p = h.__height;
                    g = h.__canvas;
                    if (null != g && h.__visible && 1 <= l && 1 <= p) {
                      var n = h.__worldTransform;
                      f = d.context;
                      var m = a.__scrollRect,
                        q = a.__worldScale9Grid;
                      if (null == m || (0 < m.width && 0 < m.height)) {
                        d.__setBlendMode(a.__worldBlendMode);
                        d.__pushMaskObject(a);
                        f.globalAlpha = e;
                        if (null != q && 0 == n.b && 0 == n.c) {
                          var z = d.__pixelRatio;
                          e = xa.__pool.get();
                          e.translate(n.tx, n.ty);
                          d.setTransform(e, f);
                          xa.__pool.release(e);
                          e = h.__bounds;
                          var t = h.__renderTransform.a / h.__bitmapScale,
                            w = h.__renderTransform.d / h.__bitmapScale,
                            x = t * n.a,
                            D = w * n.d;
                          n = Math.max(1, Math.round(q.x * t));
                          h = Math.round(q.y * w);
                          m = Math.max(
                            1,
                            Math.round((e.get_right() - q.get_right()) * t)
                          );
                          var y = Math.round(
                            (e.get_bottom() - q.get_bottom()) * w
                          );
                          t = Math.round(q.width * t);
                          q = Math.round(q.height * w);
                          w = Math.round(n / z);
                          var C = Math.round(h / z),
                            E = Math.round(m / z);
                          z = Math.round(y / z);
                          x = e.width * x - w - E;
                          e = e.height * D - C - z;
                          d.applySmoothing(f, !1);
                          0 != t && 0 != q
                            ? (f.drawImage(g, 0, 0, n, h, 0, 0, w, C),
                              f.drawImage(g, n, 0, t, h, w, 0, x, C),
                              f.drawImage(g, n + t, 0, m, h, w + x, 0, E, C),
                              f.drawImage(g, 0, h, n, q, 0, C, w, e),
                              f.drawImage(g, n, h, t, q, w, C, x, e),
                              f.drawImage(g, n + t, h, m, q, w + x, C, E, e),
                              f.drawImage(g, 0, h + q, n, y, 0, C + e, w, z),
                              f.drawImage(g, n, h + q, t, y, w, C + e, x, z),
                              f.drawImage(
                                g,
                                n + t,
                                h + q,
                                m,
                                y,
                                w + x,
                                C + e,
                                E,
                                z
                              ))
                            : 0 == t && 0 != q
                            ? ((p = w + x + E),
                              f.drawImage(g, 0, 0, l, h, 0, 0, p, C),
                              f.drawImage(g, 0, h, l, q, 0, C, p, e),
                              f.drawImage(g, 0, h + q, l, y, 0, C + e, p, z))
                            : 0 == q &&
                              0 != t &&
                              ((l = C + e + z),
                              f.drawImage(g, 0, 0, n, p, 0, 0, w, l),
                              f.drawImage(g, n, 0, t, p, w, 0, x, l),
                              f.drawImage(g, n + t, 0, m, p, w + x, 0, E, l));
                        } else d.setTransform(n, f), f.drawImage(g, 0, 0, l, p);
                        d.__popMaskObject(a);
                      }
                    }
                  }
                }
              }
            }
            d = b.__canvasRenderer;
            a.__renderable &&
              0 != a.__group.__tiles.length &&
              ((e = d.__getAlpha(a.__worldAlpha)),
              0 >= e ||
                ((f = d.context),
                d.__setBlendMode(a.__worldBlendMode),
                d.__pushMaskObject(a),
                (g = ha.__pool.get()),
                g.setTo(0, 0, a.__width, a.__height),
                d.__pushMaskRect(g, a.__renderTransform),
                (d.__allowSmoothing && a.smoothing) ||
                  (f.imageSmoothingEnabled = !1),
                Cg.renderTileContainer(
                  a.__group,
                  d,
                  a.__renderTransform,
                  a.__tileset,
                  d.__allowSmoothing && a.smoothing,
                  a.tileAlphaEnabled,
                  e,
                  a.tileBlendModeEnabled,
                  a.__worldBlendMode,
                  null,
                  null,
                  g
                ),
                (d.__allowSmoothing && a.smoothing) ||
                  (f.imageSmoothingEnabled = !0),
                d.__popMaskRect(),
                d.__popMaskObject(a),
                ha.__pool.release(g)));
            a.__renderTransform = c;
            b.__canvasRenderer.context = null;
            b.__updateClip(a);
            b.__applyStyle(a, !0, !1, !0);
          } else hh.clear(a, b);
        else
          b.__renderDrawableClear(a),
            (a.__cacheBitmap.stage = a.stage),
            (c = a.__cacheBitmap),
            null != c.stage &&
            c.__worldVisible &&
            c.__renderable &&
            null != c.__bitmapData &&
            c.__bitmapData.__isValid &&
            c.__bitmapData.readable
              ? (b.__pushMaskObject(c),
                null != c.__bitmapData.image.buffer.__srcImage
                  ? ((d = c.__bitmapData.image.buffer.__srcImage.src),
                    K.startsWith(d, "data:") || K.startsWith(d, "blob:")
                      ? dc.renderCanvas(c, b)
                      : dc.renderImage(c, b))
                  : dc.renderCanvas(c, b),
                b.__popMaskObject(c))
              : dc.clear(c, b);
        b.__renderEvent(a);
      };
      hh.renderDrawableClear = function (a, b) {
        hh.clear(a, b);
      };
      var Dg = function () {};
      h["openfl.display._internal.DOMVideo"] = Dg;
      Dg.__name__ = "openfl.display._internal.DOMVideo";
      Dg.clear = function (a, b) {
        Ud.clear(a, b);
        a.__active &&
          (b.element.removeChild(a.__stream.__video), (a.__active = !1));
      };
      Dg.render = function (a, b) {
        null != a.stage &&
        null != a.__stream &&
        a.__worldVisible &&
        a.__renderable
          ? (a.__active ||
              (b.__initializeElement(a, a.__stream.__video),
              (a.__active = !0),
              (a.__dirty = !0)),
            a.__dirty &&
              ((a.__stream.__video.width = a.__width | 0),
              (a.__stream.__video.height = a.__height | 0),
              (a.__dirty = !1)),
            b.__updateClip(a),
            b.__applyStyle(a, !0, !0, !0))
          : Dg.clear(a, b);
      };
      Dg.renderDrawable = function (a, b) {
        Dg.render(a, b);
        b.__renderEvent(a);
      };
      Dg.renderDrawableClear = function (a, b) {
        Ud.renderDrawableClear(a, b);
      };
      var ig = function (a) {
        this.buffer = a;
        this.bPos =
          this.iPos =
          this.fPos =
          this.oPos =
          this.ffPos =
          this.iiPos =
          this.tsPos =
            0;
        this.prev = ta.UNKNOWN;
      };
      h["openfl.display._internal.DrawCommandReader"] = ig;
      ig.__name__ = "openfl.display._internal.DrawCommandReader";
      ig.prototype = {
        destroy: function () {
          this.buffer = null;
          this.reset();
        },
        reset: function () {
          this.bPos =
            this.iPos =
            this.fPos =
            this.oPos =
            this.ffPos =
            this.iiPos =
            this.tsPos =
              0;
        },
        __class__: ig,
      };
      var ta = (w["openfl.display._internal.DrawCommandType"] = {
        __ename__: "openfl.display._internal.DrawCommandType",
        __constructs__: null,
        BEGIN_BITMAP_FILL: {
          _hx_name: "BEGIN_BITMAP_FILL",
          _hx_index: 0,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        BEGIN_FILL: {
          _hx_name: "BEGIN_FILL",
          _hx_index: 1,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        BEGIN_GRADIENT_FILL: {
          _hx_name: "BEGIN_GRADIENT_FILL",
          _hx_index: 2,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        BEGIN_SHADER_FILL: {
          _hx_name: "BEGIN_SHADER_FILL",
          _hx_index: 3,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        CUBIC_CURVE_TO: {
          _hx_name: "CUBIC_CURVE_TO",
          _hx_index: 4,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        CURVE_TO: {
          _hx_name: "CURVE_TO",
          _hx_index: 5,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        DRAW_CIRCLE: {
          _hx_name: "DRAW_CIRCLE",
          _hx_index: 6,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        DRAW_ELLIPSE: {
          _hx_name: "DRAW_ELLIPSE",
          _hx_index: 7,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        DRAW_QUADS: {
          _hx_name: "DRAW_QUADS",
          _hx_index: 8,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        DRAW_RECT: {
          _hx_name: "DRAW_RECT",
          _hx_index: 9,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        DRAW_ROUND_RECT: {
          _hx_name: "DRAW_ROUND_RECT",
          _hx_index: 10,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        DRAW_TILES: {
          _hx_name: "DRAW_TILES",
          _hx_index: 11,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        DRAW_TRIANGLES: {
          _hx_name: "DRAW_TRIANGLES",
          _hx_index: 12,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        END_FILL: {
          _hx_name: "END_FILL",
          _hx_index: 13,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        LINE_BITMAP_STYLE: {
          _hx_name: "LINE_BITMAP_STYLE",
          _hx_index: 14,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        LINE_GRADIENT_STYLE: {
          _hx_name: "LINE_GRADIENT_STYLE",
          _hx_index: 15,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        LINE_STYLE: {
          _hx_name: "LINE_STYLE",
          _hx_index: 16,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        LINE_TO: {
          _hx_name: "LINE_TO",
          _hx_index: 17,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        MOVE_TO: {
          _hx_name: "MOVE_TO",
          _hx_index: 18,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        OVERRIDE_BLEND_MODE: {
          _hx_name: "OVERRIDE_BLEND_MODE",
          _hx_index: 19,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        OVERRIDE_MATRIX: {
          _hx_name: "OVERRIDE_MATRIX",
          _hx_index: 20,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        WINDING_EVEN_ODD: {
          _hx_name: "WINDING_EVEN_ODD",
          _hx_index: 21,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        WINDING_NON_ZERO: {
          _hx_name: "WINDING_NON_ZERO",
          _hx_index: 22,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
        UNKNOWN: {
          _hx_name: "UNKNOWN",
          _hx_index: 23,
          __enum__: "openfl.display._internal.DrawCommandType",
          toString: p,
        },
      });
      ta.__constructs__ = [
        ta.BEGIN_BITMAP_FILL,
        ta.BEGIN_FILL,
        ta.BEGIN_GRADIENT_FILL,
        ta.BEGIN_SHADER_FILL,
        ta.CUBIC_CURVE_TO,
        ta.CURVE_TO,
        ta.DRAW_CIRCLE,
        ta.DRAW_ELLIPSE,
        ta.DRAW_QUADS,
        ta.DRAW_RECT,
        ta.DRAW_ROUND_RECT,
        ta.DRAW_TILES,
        ta.DRAW_TRIANGLES,
        ta.END_FILL,
        ta.LINE_BITMAP_STYLE,
        ta.LINE_GRADIENT_STYLE,
        ta.LINE_STYLE,
        ta.LINE_TO,
        ta.MOVE_TO,
        ta.OVERRIDE_BLEND_MODE,
        ta.OVERRIDE_MATRIX,
        ta.WINDING_EVEN_ODD,
        ta.WINDING_NON_ZERO,
        ta.UNKNOWN,
      ];
      var Hh = function (a, b, c, d, e, f, g) {
        null == g && (g = !1);
        null == f && (f = !1);
        null == e && (e = !1);
        null == d && (d = 0);
        null == c && (c = 2);
        null == b && (b = 5);
        null == a && (a = 0);
        this.wrap = a;
        this.filter = b;
        this.mipfilter = c;
        this.lodBias = d;
        this.ignoreSampler = e;
        this.centroid = f;
        this.textureAlpha = g;
      };
      h["openfl.display._internal.SamplerState"] = Hh;
      Hh.__name__ = "openfl.display._internal.SamplerState";
      Hh.prototype = {
        clone: function () {
          var a = new Hh(
            this.wrap,
            this.filter,
            this.mipfilter,
            this.lodBias,
            this.ignoreSampler,
            this.centroid,
            this.textureAlpha
          );
          a.mipmapGenerated = this.mipmapGenerated;
          return a;
        },
        copyFrom: function (a) {
          null == a ||
            a.ignoreSampler ||
            ((this.wrap = a.wrap),
            (this.filter = a.filter),
            (this.mipfilter = a.mipfilter),
            (this.lodBias = a.lodBias),
            (this.centroid = a.centroid),
            (this.textureAlpha = a.textureAlpha));
        },
        equals: function (a) {
          return null == a
            ? !1
            : this.wrap == a.wrap &&
              this.filter == a.filter &&
              this.mipfilter == a.mipfilter &&
              this.lodBias == a.lodBias
            ? this.textureAlpha == a.textureAlpha
            : !1;
        },
        __class__: Hh,
      };
      var Zl = function () {
        this.inputRefs = [];
        this.inputFilter = [];
        this.inputMipFilter = [];
        this.inputs = [];
        this.inputWrap = [];
        this.overrideIntNames = [];
        this.overrideIntValues = [];
        this.overrideFloatNames = [];
        this.overrideFloatValues = [];
        this.overrideBoolNames = [];
        this.overrideBoolValues = [];
        this.paramLengths = [];
        this.paramPositions = [];
        this.paramRefs_Bool = [];
        this.paramRefs_Float = [];
        this.paramRefs_Int = [];
        this.paramTypes = [];
      };
      h["openfl.display._internal.ShaderBuffer"] = Zl;
      Zl.__name__ = "openfl.display._internal.ShaderBuffer";
      Zl.prototype = {
        addBoolOverride: function (a, b) {
          this.overrideBoolNames[this.overrideBoolCount] = a;
          this.overrideBoolValues[this.overrideBoolCount] = b;
          this.overrideBoolCount++;
        },
        addFloatOverride: function (a, b) {
          this.overrideFloatNames[this.overrideFloatCount] = a;
          this.overrideFloatValues[this.overrideFloatCount] = b;
          this.overrideFloatCount++;
        },
        clearOverride: function () {
          this.overrideBoolCount =
            this.overrideFloatCount =
            this.overrideIntCount =
              0;
        },
        update: function (a) {
          this.paramIntCount =
            this.paramFloatCount =
            this.paramDataLength =
            this.paramCount =
            this.paramBoolCount =
            this.overrideBoolCount =
            this.overrideFloatCount =
            this.overrideIntCount =
            this.inputCount =
              0;
          this.shader = null;
          if (null != a) {
            a.__init();
            this.inputCount = a.__inputBitmapData.length;
            for (var b, c = 0, d = this.inputCount; c < d; ) {
              var e = c++;
              b = a.__inputBitmapData[e];
              this.inputs[e] = b.input;
              this.inputFilter[e] = b.filter;
              this.inputMipFilter[e] = b.mipFilter;
              this.inputRefs[e] = b;
              this.inputWrap[e] = b.wrap;
            }
            b = a.__paramBool.length;
            var f = a.__paramFloat.length,
              g = a.__paramInt.length;
            this.paramCount = b + f + g;
            this.paramBoolCount = b;
            this.paramFloatCount = f;
            this.paramIntCount = g;
            var h = 0;
            c = 0;
            for (d = b; c < d; ) {
              e = c++;
              var l = a.__paramBool[e];
              this.paramPositions[h] = this.paramDataLength;
              var p = null != l.value ? l.value.length : 0;
              this.paramLengths[h] = p;
              this.paramDataLength += p;
              this.paramTypes[h] = 0;
              this.paramRefs_Bool[e] = l;
              ++h;
            }
            c = 0;
            for (d = f; c < d; )
              (e = c++),
                (l = a.__paramFloat[e]),
                (this.paramPositions[h] = this.paramDataLength),
                (p = null != l.value ? l.value.length : 0),
                (this.paramLengths[h] = p),
                (this.paramDataLength += p),
                (this.paramTypes[h] = 1),
                (this.paramRefs_Float[e] = l),
                ++h;
            c = 0;
            for (d = g; c < d; )
              (e = c++),
                (l = a.__paramInt[e]),
                (this.paramPositions[h] = this.paramDataLength),
                (p = null != l.value ? l.value.length : 0),
                (this.paramLengths[h] = p),
                (this.paramDataLength += p),
                (this.paramTypes[h] = 2),
                (this.paramRefs_Int[e] = l),
                ++h;
            if (0 < this.paramDataLength)
              if (null == this.paramData) {
                c = this.paramDataLength;
                var n = (l = h = g = d = null);
                this.paramData = c =
                  null != c
                    ? new Float32Array(c)
                    : null != d
                    ? new Float32Array(d)
                    : null != g
                    ? new Float32Array(g.__array)
                    : null != h
                    ? new Float32Array(h)
                    : null != l
                    ? null == n
                      ? new Float32Array(l, 0)
                      : new Float32Array(l, 0, n)
                    : null;
              } else
                this.paramDataLength > this.paramData.length &&
                  ((c = this.paramDataLength),
                  (n = l = h = g = d = null),
                  (c =
                    null != c
                      ? new Float32Array(c)
                      : null != d
                      ? new Float32Array(d)
                      : null != g
                      ? new Float32Array(g.__array)
                      : null != h
                      ? new Float32Array(h)
                      : null != l
                      ? null == n
                        ? new Float32Array(l, 0)
                        : new Float32Array(l, 0, n)
                      : null),
                  c.set(this.paramData),
                  (this.paramData = c));
            c = n = l = h = g = 0;
            for (d = this.paramCount; c < d; )
              if (((e = c++), (p = this.paramLengths[e]), e < b)) {
                e = this.paramRefs_Bool[g];
                ++g;
                for (var m = 0; m < p; ) {
                  var q = m++;
                  this.paramData[n] = e.value[q] ? 1 : 0;
                  ++n;
                }
              } else if (e < b + f)
                for (e = this.paramRefs_Float[h], ++h, m = 0; m < p; )
                  (q = m++), (this.paramData[n] = e.value[q]), ++n;
              else
                for (e = this.paramRefs_Int[l], ++l, m = 0; m < p; )
                  (q = m++), (this.paramData[n] = e.value[q]), ++n;
            this.shader = a;
          }
        },
        __class__: Zl,
      };
      var xb = function (a, b, c) {
        this.driverInfo = "OpenGL (Direct blitting)";
        this.backBufferHeight = this.backBufferWidth = 0;
        pa.call(this);
        this.__stage = a;
        this.__contextState = b;
        this.__stage3D = c;
        this.__context = a.window.context;
        this.gl = this.__context.webgl;
        null == this.__contextState && (this.__contextState = new Kj());
        this.__state = new Kj();
        var d;
        this.__vertexConstants = a = new Float32Array(512);
        this.__fragmentConstants = a = new Float32Array(512);
        var e = null;
        a = [1, 1, 1, 1];
        var f = (d = c = b = null);
        this.__positionScale = a =
          null != e
            ? new Float32Array(e)
            : null != a
            ? new Float32Array(a)
            : null != b
            ? new Float32Array(b.__array)
            : null != c
            ? new Float32Array(c)
            : null != d
            ? null == f
              ? new Float32Array(d, 0)
              : new Float32Array(d, 0, f)
            : null;
        this.__programs = new Q();
        -1 == xb.__glMaxViewportDims &&
          (xb.__glMaxViewportDims = this.gl.getParameter(
            this.gl.MAX_VIEWPORT_DIMS
          ));
        this.maxBackBufferHeight = this.maxBackBufferWidth =
          xb.__glMaxViewportDims;
        -1 == xb.__glMaxTextureMaxAnisotropy &&
          ((a = this.gl.getExtension("EXT_texture_filter_anisotropic")),
          (null != a &&
            Object.prototype.hasOwnProperty.call(
              a,
              "MAX_TEXTURE_MAX_ANISOTROPY_EXT"
            )) ||
            (a = this.gl.getExtension("MOZ_EXT_texture_filter_anisotropic")),
          (null != a &&
            Object.prototype.hasOwnProperty.call(
              a,
              "MAX_TEXTURE_MAX_ANISOTROPY_EXT"
            )) ||
            (a = this.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic")),
          null != a
            ? ((xb.__glTextureMaxAnisotropy = a.TEXTURE_MAX_ANISOTROPY_EXT),
              (xb.__glMaxTextureMaxAnisotropy = this.gl.getParameter(
                a.MAX_TEXTURE_MAX_ANISOTROPY_EXT
              )))
            : ((xb.__glTextureMaxAnisotropy = 0),
              (xb.__glMaxTextureMaxAnisotropy = 0)));
        -1 == xb.__glDepthStencil &&
          (xb.__glDepthStencil = this.gl.DEPTH_STENCIL);
        -1 == xb.__glMemoryTotalAvailable &&
          ((a = this.gl.getExtension("NVX_gpu_memory_info")),
          null != a &&
            ((xb.__glMemoryTotalAvailable =
              a.GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX),
            (xb.__glMemoryCurrentAvailable =
              a.GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX)));
        null == xb.__driverInfo &&
          ((a = this.gl.getParameter(this.gl.VENDOR)),
          (b = this.gl.getParameter(this.gl.VERSION)),
          (c = this.gl.getParameter(this.gl.RENDERER)),
          (d = this.gl.getParameter(this.gl.SHADING_LANGUAGE_VERSION)),
          (xb.__driverInfo =
            "OpenGL Vendor=" +
            a +
            " Version=" +
            b +
            " Renderer=" +
            c +
            " GLSL=" +
            d));
        this.driverInfo = xb.__driverInfo;
        this.__quadIndexBufferElements = 16383;
        e = this.__quadIndexBufferCount = 6 * this.__quadIndexBufferElements;
        f = d = c = b = a = null;
        a =
          null != e
            ? new Uint16Array(e)
            : null != a
            ? new Uint16Array(a)
            : null != b
            ? new Uint16Array(b.__array)
            : null != c
            ? new Uint16Array(c)
            : null != d
            ? null == f
              ? new Uint16Array(d, 0)
              : new Uint16Array(d, 0, f)
            : null;
        d = c = b = 0;
        for (f = this.__quadIndexBufferElements; d < f; )
          d++,
            (a[b] = c),
            (a[b + 1] = c + 1),
            (a[b + 2] = c + 2),
            (a[b + 3] = c + 2),
            (a[b + 4] = c + 1),
            (a[b + 5] = c + 3),
            (b += 6),
            (c += 4);
        this.__quadIndexBuffer = this.createIndexBuffer(
          this.__quadIndexBufferCount
        );
        this.__quadIndexBuffer.uploadFromTypedArray(a);
      };
      h["openfl.display3D.Context3D"] = xb;
      xb.__name__ = "openfl.display3D.Context3D";
      xb.__super__ = pa;
      xb.prototype = q(pa.prototype, {
        clear: function (a, b, c, d, e, f, g) {
          null == g && (g = 7);
          null == f && (f = 0);
          null == e && (e = 1);
          null == d && (d = 1);
          null == c && (c = 0);
          null == b && (b = 0);
          null == a && (a = 0);
          this.__flushGLFramebuffer();
          this.__flushGLViewport();
          var k = 0;
          if (0 != (g & 1)) {
            null == this.__state.renderToTexture &&
              (this.__stage.context3D != this ||
                this.__stage.__renderer.__cleared ||
                (this.__stage.__renderer.__cleared = !0),
              (this.__cleared = !0));
            k |= this.gl.COLOR_BUFFER_BIT;
            if (
              1 != this.__contextState.colorMaskRed ||
              1 != this.__contextState.colorMaskGreen ||
              1 != this.__contextState.colorMaskBlue ||
              1 != this.__contextState.colorMaskAlpha
            )
              this.gl.colorMask(!0, !0, !0, !0),
                (this.__contextState.colorMaskRed = !0),
                (this.__contextState.colorMaskGreen = !0),
                (this.__contextState.colorMaskBlue = !0),
                (this.__contextState.colorMaskAlpha = !0);
            this.gl.clearColor(a, b, c, d);
          }
          0 != (g & 2) &&
            ((k |= this.gl.DEPTH_BUFFER_BIT),
            1 != this.__contextState.depthMask &&
              (this.gl.depthMask(!0), (this.__contextState.depthMask = !0)),
            this.gl.clearDepth(e));
          0 != (g & 4) &&
            ((k |= this.gl.STENCIL_BUFFER_BIT),
            255 != this.__contextState.stencilWriteMask &&
              (this.gl.stencilMask(255),
              (this.__contextState.stencilWriteMask = 255)),
            this.gl.clearStencil(f),
            (this.__contextState.stencilWriteMask = 255));
          0 != k && (this.__setGLScissorTest(!1), this.gl.clear(k));
        },
        configureBackBuffer: function (a, b, c, d, e, f) {
          null == f && (f = !1);
          null == e && (e = !1);
          null == d && (d = !0);
          e &&
            ((a = (a * this.__stage.window.__scale) | 0),
            (b = (b * this.__stage.window.__scale) | 0));
          if (null == this.__stage3D)
            (this.backBufferWidth = a),
              (this.backBufferHeight = b),
              (this.__backBufferAntiAlias = c),
              (this.__state.backBufferEnableDepthAndStencil = d),
              (this.__backBufferWantsBestResolution = e),
              (this.__backBufferWantsBestResolutionOnBrowserZoom = f);
          else {
            if (
              null == this.__backBufferTexture ||
              this.backBufferWidth != a ||
              this.backBufferHeight != b
            ) {
              null != this.__backBufferTexture &&
                this.__backBufferTexture.dispose();
              null != this.__frontBufferTexture &&
                this.__frontBufferTexture.dispose();
              this.__backBufferTexture = this.createRectangleTexture(
                a,
                b,
                1,
                !0
              );
              this.__frontBufferTexture = this.createRectangleTexture(
                a,
                b,
                1,
                !0
              );
              null == this.__stage3D.__vertexBuffer &&
                (this.__stage3D.__vertexBuffer = this.createVertexBuffer(4, 5));
              var g = e ? a : (a * this.__stage.window.__scale) | 0,
                h = e ? b : (b * this.__stage.window.__scale) | 0;
              g = ja.toFloatVector(null, null, null, [
                g,
                h,
                0,
                1,
                1,
                0,
                h,
                0,
                0,
                1,
                g,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
              ]);
              this.__stage3D.__vertexBuffer.uploadFromVector(g, 0, 20);
              null == this.__stage3D.__indexBuffer &&
                ((this.__stage3D.__indexBuffer = this.createIndexBuffer(6)),
                (g = ja.toIntVector(null, null, null, [0, 1, 2, 2, 1, 3])),
                this.__stage3D.__indexBuffer.uploadFromVector(g, 0, 6));
            }
            this.backBufferWidth = a;
            this.backBufferHeight = b;
            this.__backBufferAntiAlias = c;
            this.__state.backBufferEnableDepthAndStencil = d;
            this.__backBufferWantsBestResolution = e;
            this.__backBufferWantsBestResolutionOnBrowserZoom = f;
            this.__state.__primaryGLFramebuffer =
              this.__backBufferTexture.__getGLFramebuffer(d, c, 0);
            this.__frontBufferTexture.__getGLFramebuffer(d, c, 0);
          }
        },
        createIndexBuffer: function (a, b) {
          null == b && (b = 1);
          return new ho(this, a, b);
        },
        createProgram: function (a) {
          null == a && (a = 0);
          return new io(this, a);
        },
        createRectangleTexture: function (a, b, c, d) {
          return new Lj(this, a, b, ep.toString(c), d);
        },
        createVertexBuffer: function (a, b, c) {
          null == c && (c = 1);
          return new jo(this, a, b, So.toString(c));
        },
        drawTriangles: function (a, b, c) {
          null == c && (c = -1);
          null == b && (b = 0);
          null == this.__state.renderToTexture &&
            (this.__stage.context3D != this || this.__stage.__renderer.__cleared
              ? this.__cleared || this.clear(0, 0, 0, 0, 1, 0, 1)
              : this.__stage.__renderer.__clear());
          this.__flushGL();
          null != this.__state.program && this.__state.program.__flush();
          c = -1 == c ? a.__numIndices : 3 * c;
          this.__bindGLElementArrayBuffer(a.__id);
          this.gl.drawElements(
            this.gl.TRIANGLES,
            c,
            this.gl.UNSIGNED_SHORT,
            2 * b
          );
        },
        present: function () {
          this.setRenderToBackBuffer();
          if (null != this.__stage3D && null != this.__backBufferTexture) {
            this.__cleared || this.clear(0, 0, 0, 0, 1, 0, 1);
            var a = this.__backBufferTexture;
            this.__backBufferTexture = this.__frontBufferTexture;
            this.__frontBufferTexture = a;
            this.__state.__primaryGLFramebuffer =
              this.__backBufferTexture.__getGLFramebuffer(
                this.__state.backBufferEnableDepthAndStencil,
                this.__backBufferAntiAlias,
                0
              );
            this.__cleared = !1;
          }
          this.__present = !0;
        },
        setBlendFactors: function (a, b) {
          this.setBlendFactorsSeparate(a, b, a, b);
        },
        setBlendFactorsSeparate: function (a, b, c, d) {
          this.__state.blendSourceRGBFactor = a;
          this.__state.blendDestinationRGBFactor = b;
          this.__state.blendSourceAlphaFactor = c;
          this.__state.blendDestinationAlphaFactor = d;
          this.__setGLBlendEquation(this.gl.FUNC_ADD);
        },
        setColorMask: function (a, b, c, d) {
          this.__state.colorMaskRed = a;
          this.__state.colorMaskGreen = b;
          this.__state.colorMaskBlue = c;
          this.__state.colorMaskAlpha = d;
        },
        setCulling: function (a) {
          this.__state.culling = a;
        },
        setDepthTest: function (a, b) {
          this.__state.depthMask = a;
          this.__state.depthCompareMode = b;
        },
        setProgram: function (a) {
          this.__state.program = a;
          this.__state.shader = null;
          if (null != a)
            for (var b = 0, c = a.__samplerStates.length; b < c; ) {
              var d = b++;
              null == this.__state.samplerStates[d]
                ? (this.__state.samplerStates[d] = a.__samplerStates[d].clone())
                : this.__state.samplerStates[d].copyFrom(a.__samplerStates[d]);
            }
        },
        setProgramConstantsFromMatrix: function (a, b, c, d) {
          null == d && (d = !1);
          if (
            null != this.__state.program &&
            1 == this.__state.program.__format
          )
            this.__flushGLProgram(),
              (a = new Float32Array(16)),
              (a[0] = c.rawData.get(0)),
              (a[1] = c.rawData.get(1)),
              (a[2] = c.rawData.get(2)),
              (a[3] = c.rawData.get(3)),
              (a[4] = c.rawData.get(4)),
              (a[5] = c.rawData.get(5)),
              (a[6] = c.rawData.get(6)),
              (a[7] = c.rawData.get(7)),
              (a[8] = c.rawData.get(8)),
              (a[9] = c.rawData.get(9)),
              (a[10] = c.rawData.get(10)),
              (a[11] = c.rawData.get(11)),
              (a[12] = c.rawData.get(12)),
              (a[13] = c.rawData.get(13)),
              (a[14] = c.rawData.get(14)),
              (a[15] = c.rawData.get(15)),
              Sc.uniformMatrix4fv(this.gl, b, d, a);
          else {
            var e = (a = 1 == a)
              ? this.__vertexConstants
              : this.__fragmentConstants;
            c = c.rawData;
            var f = 4 * b;
            d
              ? ((e[f++] = c.get(0)),
                (e[f++] = c.get(4)),
                (e[f++] = c.get(8)),
                (e[f++] = c.get(12)),
                (e[f++] = c.get(1)),
                (e[f++] = c.get(5)),
                (e[f++] = c.get(9)),
                (e[f++] = c.get(13)),
                (e[f++] = c.get(2)),
                (e[f++] = c.get(6)),
                (e[f++] = c.get(10)),
                (e[f++] = c.get(14)),
                (e[f++] = c.get(3)),
                (e[f++] = c.get(7)),
                (e[f++] = c.get(11)))
              : ((e[f++] = c.get(0)),
                (e[f++] = c.get(1)),
                (e[f++] = c.get(2)),
                (e[f++] = c.get(3)),
                (e[f++] = c.get(4)),
                (e[f++] = c.get(5)),
                (e[f++] = c.get(6)),
                (e[f++] = c.get(7)),
                (e[f++] = c.get(8)),
                (e[f++] = c.get(9)),
                (e[f++] = c.get(10)),
                (e[f++] = c.get(11)),
                (e[f++] = c.get(12)),
                (e[f++] = c.get(13)),
                (e[f++] = c.get(14)));
            e[f++] = c.get(15);
            null != this.__state.program &&
              this.__state.program.__markDirty(a, b, 4);
          }
        },
        setRenderToBackBuffer: function () {
          this.__state.renderToTexture = null;
        },
        setRenderToTexture: function (a, b, c, d) {
          null == d && (d = 0);
          null == c && (c = 0);
          null == b && (b = !1);
          this.__state.renderToTexture = a;
          this.__state.renderToTextureDepthStencil = b;
          this.__state.renderToTextureAntiAlias = c;
          this.__state.renderToTextureSurfaceSelector = d;
        },
        setSamplerStateAt: function (a, b, c, d) {
          null == this.__state.samplerStates[a] &&
            (this.__state.samplerStates[a] = new Hh());
          a = this.__state.samplerStates[a];
          a.wrap = b;
          a.filter = c;
          a.mipfilter = d;
        },
        setScissorRectangle: function (a) {
          null != a
            ? ((this.__state.scissorEnabled = !0),
              this.__state.scissorRectangle.copyFrom(a))
            : (this.__state.scissorEnabled = !1);
        },
        setStencilActions: function (a, b, c, d, e) {
          null == e && (e = 5);
          null == d && (d = 5);
          null == c && (c = 5);
          null == b && (b = 0);
          null == a && (a = 2);
          this.__state.stencilTriangleFace = a;
          this.__state.stencilCompareMode = b;
          this.__state.stencilPass = c;
          this.__state.stencilDepthFail = d;
          this.__state.stencilFail = e;
        },
        setStencilReferenceValue: function (a, b, c) {
          null == c && (c = 255);
          null == b && (b = 255);
          this.__state.stencilReferenceValue = a;
          this.__state.stencilReadMask = b;
          this.__state.stencilWriteMask = c;
        },
        setTextureAt: function (a, b) {
          this.__state.textures[a] = b;
        },
        setVertexBufferAt: function (a, b, c, d) {
          null == d && (d = 4);
          null == c && (c = 0);
          if (!(0 > a))
            if (null == b)
              this.gl.disableVertexAttribArray(a),
                this.__bindGLArrayBuffer(null);
            else
              switch (
                (this.__bindGLArrayBuffer(b.__id),
                this.gl.enableVertexAttribArray(a),
                (c *= 4),
                d)
              ) {
                case 0:
                  this.gl.vertexAttribPointer(
                    a,
                    4,
                    this.gl.UNSIGNED_BYTE,
                    !0,
                    b.__stride,
                    c
                  );
                  break;
                case 1:
                  this.gl.vertexAttribPointer(
                    a,
                    1,
                    this.gl.FLOAT,
                    !1,
                    b.__stride,
                    c
                  );
                  break;
                case 2:
                  this.gl.vertexAttribPointer(
                    a,
                    2,
                    this.gl.FLOAT,
                    !1,
                    b.__stride,
                    c
                  );
                  break;
                case 3:
                  this.gl.vertexAttribPointer(
                    a,
                    3,
                    this.gl.FLOAT,
                    !1,
                    b.__stride,
                    c
                  );
                  break;
                case 4:
                  this.gl.vertexAttribPointer(
                    a,
                    4,
                    this.gl.FLOAT,
                    !1,
                    b.__stride,
                    c
                  );
                  break;
                default:
                  throw new sd();
              }
        },
        __bindGLArrayBuffer: function (a) {
          this.__contextState.__currentGLArrayBuffer != a &&
            (this.gl.bindBuffer(this.gl.ARRAY_BUFFER, a),
            (this.__contextState.__currentGLArrayBuffer = a));
        },
        __bindGLElementArrayBuffer: function (a) {
          this.__contextState.__currentGLElementArrayBuffer != a &&
            (this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, a),
            (this.__contextState.__currentGLElementArrayBuffer = a));
        },
        __bindGLFramebuffer: function (a) {
          this.__contextState.__currentGLFramebuffer != a &&
            (this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, a),
            (this.__contextState.__currentGLFramebuffer = a));
        },
        __bindGLTexture2D: function (a) {
          this.gl.bindTexture(this.gl.TEXTURE_2D, a);
          this.__contextState.__currentGLTexture2D = a;
        },
        __bindGLTextureCubeMap: function (a) {
          this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP, a);
          this.__contextState.__currentGLTextureCubeMap = a;
        },
        __dispose: function () {
          this.driverInfo += " (Disposed)";
          null != this.__stage3D &&
            ((this.__stage3D.__indexBuffer = null),
            (this.__stage3D.__vertexBuffer = null),
            (this.__stage3D = this.__stage3D.context3D = null));
          this.__positionScale =
            this.__frontBufferTexture =
            this.__fragmentConstants =
            this.__renderStage3DProgram =
            this.__context =
            this.__backBufferTexture =
              null;
          this.__present = !1;
          this.__vertexConstants = this.__stage = this.__quadIndexBuffer = null;
        },
        __drawTriangles: function (a, b) {
          null == a && (a = 0);
          null == this.__state.renderToTexture &&
            (this.__stage.context3D != this || this.__stage.__renderer.__cleared
              ? this.__cleared || this.clear(0, 0, 0, 0, 1, 0, 1)
              : this.__stage.__renderer.__clear());
          this.__flushGL();
          null != this.__state.program && this.__state.program.__flush();
          this.gl.drawArrays(this.gl.TRIANGLES, a, b);
        },
        __flushGL: function () {
          this.__flushGLProgram();
          this.__flushGLFramebuffer();
          this.__flushGLViewport();
          this.__flushGLBlend();
          if (
            this.__contextState.colorMaskRed != this.__state.colorMaskRed ||
            this.__contextState.colorMaskGreen != this.__state.colorMaskGreen ||
            this.__contextState.colorMaskBlue != this.__state.colorMaskBlue ||
            this.__contextState.colorMaskAlpha != this.__state.colorMaskAlpha
          )
            this.gl.colorMask(
              this.__state.colorMaskRed,
              this.__state.colorMaskGreen,
              this.__state.colorMaskBlue,
              this.__state.colorMaskAlpha
            ),
              (this.__contextState.colorMaskRed = this.__state.colorMaskRed),
              (this.__contextState.colorMaskGreen =
                this.__state.colorMaskGreen),
              (this.__contextState.colorMaskBlue = this.__state.colorMaskBlue),
              (this.__contextState.colorMaskAlpha =
                this.__state.colorMaskAlpha);
          this.__flushGLCulling();
          this.__flushGLDepth();
          this.__flushGLScissor();
          this.__flushGLStencil();
          this.__flushGLTextures();
        },
        __flushGLBlend: function () {
          if (
            this.__contextState.blendDestinationRGBFactor !=
              this.__state.blendDestinationRGBFactor ||
            this.__contextState.blendSourceRGBFactor !=
              this.__state.blendSourceRGBFactor ||
            this.__contextState.blendDestinationAlphaFactor !=
              this.__state.blendDestinationAlphaFactor ||
            this.__contextState.blendSourceAlphaFactor !=
              this.__state.blendSourceAlphaFactor
          )
            this.__setGLBlend(!0),
              this.__state.blendDestinationRGBFactor ==
                this.__state.blendDestinationAlphaFactor &&
              this.__state.blendSourceRGBFactor ==
                this.__state.blendSourceAlphaFactor
                ? this.gl.blendFunc(
                    this.__getGLBlend(this.__state.blendSourceRGBFactor),
                    this.__getGLBlend(this.__state.blendDestinationRGBFactor)
                  )
                : this.gl.blendFuncSeparate(
                    this.__getGLBlend(this.__state.blendSourceRGBFactor),
                    this.__getGLBlend(this.__state.blendDestinationRGBFactor),
                    this.__getGLBlend(this.__state.blendSourceAlphaFactor),
                    this.__getGLBlend(this.__state.blendDestinationAlphaFactor)
                  ),
              (this.__contextState.blendDestinationRGBFactor =
                this.__state.blendDestinationRGBFactor),
              (this.__contextState.blendSourceRGBFactor =
                this.__state.blendSourceRGBFactor),
              (this.__contextState.blendDestinationAlphaFactor =
                this.__state.blendDestinationAlphaFactor),
              (this.__contextState.blendSourceAlphaFactor =
                this.__state.blendSourceAlphaFactor);
        },
        __flushGLCulling: function () {
          if (this.__contextState.culling != this.__state.culling) {
            if (3 == this.__state.culling) this.__setGLCullFace(!1);
            else
              switch ((this.__setGLCullFace(!0), this.__state.culling)) {
                case 0:
                  this.gl.cullFace(this.gl.BACK);
                  break;
                case 1:
                  this.gl.cullFace(this.gl.FRONT);
                  break;
                case 2:
                  this.gl.cullFace(this.gl.FRONT_AND_BACK);
                  break;
                case 3:
                  break;
                default:
                  throw new sd();
              }
            this.__contextState.culling = this.__state.culling;
          }
        },
        __flushGLDepth: function () {
          var a =
            this.__state.depthMask &&
            (null != this.__state.renderToTexture
              ? this.__state.renderToTextureDepthStencil
              : this.__state.backBufferEnableDepthAndStencil);
          this.__contextState.depthMask != a &&
            (this.gl.depthMask(a), (this.__contextState.depthMask = a));
          if (
            this.__contextState.depthCompareMode !=
            this.__state.depthCompareMode
          ) {
            switch (this.__state.depthCompareMode) {
              case 0:
                this.gl.depthFunc(this.gl.ALWAYS);
                break;
              case 1:
                this.gl.depthFunc(this.gl.EQUAL);
                break;
              case 2:
                this.gl.depthFunc(this.gl.GREATER);
                break;
              case 3:
                this.gl.depthFunc(this.gl.GEQUAL);
                break;
              case 4:
                this.gl.depthFunc(this.gl.LESS);
                break;
              case 5:
                this.gl.depthFunc(this.gl.LEQUAL);
                break;
              case 6:
                this.gl.depthFunc(this.gl.NEVER);
                break;
              case 7:
                this.gl.depthFunc(this.gl.NOTEQUAL);
                break;
              default:
                throw new sd();
            }
            this.__contextState.depthCompareMode =
              this.__state.depthCompareMode;
          }
        },
        __flushGLFramebuffer: function () {
          if (null != this.__state.renderToTexture) {
            if (
              this.__contextState.renderToTexture !=
                this.__state.renderToTexture ||
              this.__contextState.renderToTextureSurfaceSelector !=
                this.__state.renderToTextureSurfaceSelector
            ) {
              var a = this.__state.renderToTexture.__getGLFramebuffer(
                this.__state.renderToTextureDepthStencil,
                this.__state.renderToTextureAntiAlias,
                this.__state.renderToTextureSurfaceSelector
              );
              this.__bindGLFramebuffer(a);
              this.__contextState.renderToTexture =
                this.__state.renderToTexture;
              this.__contextState.renderToTextureAntiAlias =
                this.__state.renderToTextureAntiAlias;
              this.__contextState.renderToTextureDepthStencil =
                this.__state.renderToTextureDepthStencil;
              this.__contextState.renderToTextureSurfaceSelector =
                this.__state.renderToTextureSurfaceSelector;
            }
            this.__setGLDepthTest(this.__state.renderToTextureDepthStencil);
            this.__setGLStencilTest(this.__state.renderToTextureDepthStencil);
            this.__setGLFrontFace(!0);
          } else {
            if (
              null == this.__stage &&
              0 == this.backBufferWidth &&
              0 == this.backBufferHeight
            )
              throw new Cb("Context3D backbuffer has not been configured");
            if (
              null != this.__contextState.renderToTexture ||
              this.__contextState.__currentGLFramebuffer !=
                this.__state.__primaryGLFramebuffer ||
              this.__contextState.backBufferEnableDepthAndStencil !=
                this.__state.backBufferEnableDepthAndStencil
            )
              this.__bindGLFramebuffer(this.__state.__primaryGLFramebuffer),
                (this.__contextState.renderToTexture = null),
                (this.__contextState.backBufferEnableDepthAndStencil =
                  this.__state.backBufferEnableDepthAndStencil);
            this.__setGLDepthTest(this.__state.backBufferEnableDepthAndStencil);
            this.__setGLStencilTest(
              this.__state.backBufferEnableDepthAndStencil
            );
            this.__setGLFrontFace(this.__stage.context3D != this);
          }
        },
        __flushGLProgram: function () {
          var a = this.__state.shader,
            b = this.__state.program;
          this.__contextState.shader != a &&
            (null != this.__contextState.shader &&
              this.__contextState.shader.__disable(),
            null != a && a.__enable(),
            (this.__contextState.shader = a));
          this.__contextState.program != b &&
            (null != this.__contextState.program &&
              this.__contextState.program.__disable(),
            null != b && b.__enable(),
            (this.__contextState.program = b));
          null != b &&
            0 == b.__format &&
            ((this.__positionScale[1] =
              this.__stage.context3D == this &&
              null == this.__state.renderToTexture
                ? 1
                : -1),
            b.__setPositionScale(this.__positionScale));
        },
        __flushGLScissor: function () {
          if (this.__state.scissorEnabled) {
            this.__setGLScissorTest(!0);
            this.__contextState.scissorEnabled = !0;
            var a = this.__state.scissorRectangle.x | 0,
              b = this.__state.scissorRectangle.y | 0,
              c = this.__state.scissorRectangle.width | 0,
              d = this.__state.scissorRectangle.height | 0;
            this.__backBufferWantsBestResolution &&
              ((a =
                (this.__state.scissorRectangle.x *
                  this.__stage.window.__scale) |
                0),
              (b =
                (this.__state.scissorRectangle.y *
                  this.__stage.window.__scale) |
                0),
              (c =
                (this.__state.scissorRectangle.width *
                  this.__stage.window.__scale) |
                0),
              (d =
                (this.__state.scissorRectangle.height *
                  this.__stage.window.__scale) |
                0));
            null == this.__state.renderToTexture &&
              null == this.__stage3D &&
              (b =
                ((this.__stage.window.__height * this.__stage.window.__scale) |
                  0) -
                d -
                b);
            if (
              this.__contextState.scissorRectangle.x != a ||
              this.__contextState.scissorRectangle.y != b ||
              this.__contextState.scissorRectangle.width != c ||
              this.__contextState.scissorRectangle.height != d
            )
              this.gl.scissor(a, b, c, d),
                this.__contextState.scissorRectangle.setTo(a, b, c, d);
          } else
            this.__contextState.scissorEnabled != this.__state.scissorEnabled &&
              (this.__setGLScissorTest(!1),
              (this.__contextState.scissorEnabled = !1));
        },
        __flushGLStencil: function () {
          if (
            this.__contextState.stencilTriangleFace !=
              this.__state.stencilTriangleFace ||
            this.__contextState.stencilPass != this.__state.stencilPass ||
            this.__contextState.stencilDepthFail !=
              this.__state.stencilDepthFail ||
            this.__contextState.stencilFail != this.__state.stencilFail
          )
            this.gl.stencilOpSeparate(
              this.__getGLTriangleFace(this.__state.stencilTriangleFace),
              this.__getGLStencilAction(this.__state.stencilFail),
              this.__getGLStencilAction(this.__state.stencilDepthFail),
              this.__getGLStencilAction(this.__state.stencilPass)
            ),
              (this.__contextState.stencilTriangleFace =
                this.__state.stencilTriangleFace),
              (this.__contextState.stencilPass = this.__state.stencilPass),
              (this.__contextState.stencilDepthFail =
                this.__state.stencilDepthFail),
              (this.__contextState.stencilFail = this.__state.stencilFail);
          this.__contextState.stencilWriteMask !=
            this.__state.stencilWriteMask &&
            (this.gl.stencilMask(this.__state.stencilWriteMask),
            (this.__contextState.stencilWriteMask =
              this.__state.stencilWriteMask));
          if (
            this.__contextState.stencilCompareMode !=
              this.__state.stencilCompareMode ||
            this.__contextState.stencilReferenceValue !=
              this.__state.stencilReferenceValue ||
            this.__contextState.stencilReadMask != this.__state.stencilReadMask
          )
            this.gl.stencilFunc(
              this.__getGLCompareMode(this.__state.stencilCompareMode),
              this.__state.stencilReferenceValue,
              this.__state.stencilReadMask
            ),
              (this.__contextState.stencilCompareMode =
                this.__state.stencilCompareMode),
              (this.__contextState.stencilReferenceValue =
                this.__state.stencilReferenceValue),
              (this.__contextState.stencilReadMask =
                this.__state.stencilReadMask);
        },
        __flushGLTextures: function () {
          for (
            var a = 0, b, c, d = 0, e = this.__state.textures.length;
            d < e;

          ) {
            var f = d++;
            b = this.__state.textures[f];
            c = this.__state.samplerStates[f];
            null == c &&
              ((this.__state.samplerStates[f] = new Hh()),
              (c = this.__state.samplerStates[f]));
            this.gl.activeTexture(this.gl.TEXTURE0 + a);
            null != b
              ? (b.__textureTarget == this.gl.TEXTURE_2D
                  ? this.__bindGLTexture2D(b.__getTexture())
                  : this.__bindGLTextureCubeMap(b.__getTexture()),
                (this.__contextState.textures[f] = b),
                b.__setSamplerState(c))
              : this.__bindGLTexture2D(null);
            null != this.__state.program &&
              0 == this.__state.program.__format &&
              c.textureAlpha &&
              (this.gl.activeTexture(this.gl.TEXTURE0 + a + 4),
              null != b && null != b.__alphaTexture
                ? (b.__alphaTexture.__textureTarget == this.gl.TEXTURE_2D
                    ? this.__bindGLTexture2D(b.__alphaTexture.__getTexture())
                    : this.__bindGLTextureCubeMap(
                        b.__alphaTexture.__getTexture()
                      ),
                  b.__alphaTexture.__setSamplerState(c),
                  this.gl.uniform1i(
                    this.__state.program.__agalAlphaSamplerEnabled[a].location,
                    1
                  ))
                : (this.__bindGLTexture2D(null),
                  null != this.__state.program.__agalAlphaSamplerEnabled[a] &&
                    this.gl.uniform1i(
                      this.__state.program.__agalAlphaSamplerEnabled[a]
                        .location,
                      0
                    )));
            ++a;
          }
        },
        __flushGLViewport: function () {
          if (null == this.__state.renderToTexture)
            if (this.__stage.context3D == this) {
              var a = this.backBufferWidth,
                b = this.backBufferHeight;
              null != this.__stage3D ||
                this.__backBufferWantsBestResolution ||
                ((a = (this.backBufferWidth * this.__stage.window.__scale) | 0),
                (b =
                  (this.backBufferHeight * this.__stage.window.__scale) | 0));
              var c = null == this.__stage3D ? 0 : this.__stage3D.get_x() | 0,
                d =
                  (this.__stage.window.__height * this.__stage.window.__scale -
                    b -
                    (null == this.__stage3D ? 0 : this.__stage3D.get_y())) |
                  0;
              this.gl.viewport(c, d, a, b);
            } else
              this.gl.viewport(
                0,
                0,
                this.backBufferWidth,
                this.backBufferHeight
              );
          else
            (b = a = 0),
              this.__state.renderToTexture instanceof im
                ? ((b = this.__state.renderToTexture),
                  (a = b.__width),
                  (b = b.__height))
                : this.__state.renderToTexture instanceof Lj
                ? ((b = this.__state.renderToTexture),
                  (a = b.__width),
                  (b = b.__height))
                : this.__state.renderToTexture instanceof jm &&
                  ((b = this.__state.renderToTexture), (b = a = b.__size)),
              this.gl.viewport(0, 0, a, b);
        },
        __getGLBlend: function (a) {
          switch (a) {
            case 0:
              return this.gl.DST_ALPHA;
            case 1:
              return this.gl.DST_COLOR;
            case 2:
              return this.gl.ONE;
            case 3:
              return this.gl.ONE_MINUS_DST_ALPHA;
            case 4:
              return this.gl.ONE_MINUS_DST_COLOR;
            case 5:
              return this.gl.ONE_MINUS_SRC_ALPHA;
            case 6:
              return this.gl.ONE_MINUS_SRC_COLOR;
            case 7:
              return this.gl.SRC_ALPHA;
            case 8:
              return this.gl.SRC_COLOR;
            case 9:
              return this.gl.ZERO;
            default:
              throw new sd();
          }
        },
        __getGLCompareMode: function (a) {
          switch (a) {
            case 0:
              return this.gl.ALWAYS;
            case 1:
              return this.gl.EQUAL;
            case 2:
              return this.gl.GREATER;
            case 3:
              return this.gl.GEQUAL;
            case 4:
              return this.gl.LESS;
            case 5:
              return this.gl.LEQUAL;
            case 6:
              return this.gl.NEVER;
            case 7:
              return this.gl.NOTEQUAL;
            default:
              return this.gl.EQUAL;
          }
        },
        __getGLStencilAction: function (a) {
          switch (a) {
            case 0:
              return this.gl.DECR;
            case 1:
              return this.gl.DECR_WRAP;
            case 2:
              return this.gl.INCR;
            case 3:
              return this.gl.INCR_WRAP;
            case 4:
              return this.gl.INVERT;
            case 5:
              return this.gl.KEEP;
            case 6:
              return this.gl.REPLACE;
            case 7:
              return this.gl.ZERO;
            default:
              return this.gl.KEEP;
          }
        },
        __getGLTriangleFace: function (a) {
          switch (a) {
            case 0:
              return this.gl.BACK;
            case 1:
              return this.gl.FRONT;
            case 2:
              return this.gl.FRONT_AND_BACK;
            case 3:
              return this.gl.NONE;
            default:
              return this.gl.FRONT_AND_BACK;
          }
        },
        __renderStage3D: function (a) {
          var b = a.context3D;
          if (
            null != b &&
            b != this &&
            null != b.__frontBufferTexture &&
            a.visible &&
            0 < this.backBufferHeight &&
            0 < this.backBufferWidth
          ) {
            if (null == this.__renderStage3DProgram) {
              var c = new ua();
              c.assemble(To.toString(1), "m44 op, va0, vc0\nmov v0, va1");
              var d = new ua();
              d.assemble(
                To.toString(0),
                "tex ft1, v0, fs0 <2d,nearest,nomip>\nmov oc, ft1"
              );
              this.__renderStage3DProgram = this.createProgram();
              this.__renderStage3DProgram.upload(c.agalcode, d.agalcode);
            }
            this.setProgram(this.__renderStage3DProgram);
            this.setBlendFactors(2, 9);
            this.setColorMask(!0, !0, !0, !0);
            this.setCulling(3);
            this.setDepthTest(!1, 0);
            this.setStencilActions();
            this.setStencilReferenceValue(0, 0, 0);
            this.setScissorRectangle(null);
            this.setTextureAt(0, b.__frontBufferTexture);
            this.setVertexBufferAt(0, a.__vertexBuffer, 0, 3);
            this.setVertexBufferAt(1, a.__vertexBuffer, 3, 2);
            this.setProgramConstantsFromMatrix(1, 0, a.__renderTransform, !0);
            this.drawTriangles(a.__indexBuffer);
            this.__present = !0;
          }
        },
        __setGLBlend: function (a) {
          this.__contextState.__enableGLBlend != a &&
            (a ? this.gl.enable(this.gl.BLEND) : this.gl.disable(this.gl.BLEND),
            (this.__contextState.__enableGLBlend = a));
        },
        __setGLBlendEquation: function (a) {
          this.__contextState.__glBlendEquation != a &&
            (this.gl.blendEquation(a),
            (this.__contextState.__glBlendEquation = a));
        },
        __setGLCullFace: function (a) {
          this.__contextState.__enableGLCullFace != a &&
            (a
              ? this.gl.enable(this.gl.CULL_FACE)
              : this.gl.disable(this.gl.CULL_FACE),
            (this.__contextState.__enableGLCullFace = a));
        },
        __setGLDepthTest: function (a) {
          this.__contextState.__enableGLDepthTest != a &&
            (a
              ? this.gl.enable(this.gl.DEPTH_TEST)
              : this.gl.disable(this.gl.DEPTH_TEST),
            (this.__contextState.__enableGLDepthTest = a));
        },
        __setGLFrontFace: function (a) {
          this.__contextState.__frontFaceGLCCW != a &&
            (this.gl.frontFace(a ? this.gl.CCW : this.gl.CW),
            (this.__contextState.__frontFaceGLCCW = a));
        },
        __setGLScissorTest: function (a) {
          this.__contextState.__enableGLScissorTest != a &&
            (a
              ? this.gl.enable(this.gl.SCISSOR_TEST)
              : this.gl.disable(this.gl.SCISSOR_TEST),
            (this.__contextState.__enableGLScissorTest = a));
        },
        __setGLStencilTest: function (a) {
          this.__contextState.__enableGLStencilTest != a &&
            (a
              ? this.gl.enable(this.gl.STENCIL_TEST)
              : this.gl.disable(this.gl.STENCIL_TEST),
            (this.__contextState.__enableGLStencilTest = a));
        },
        __class__: xb,
      });
      var So = {
          fromString: function (a) {
            switch (a) {
              case "dynamicDraw":
                return 0;
              case "staticDraw":
                return 1;
              default:
                return null;
            }
          },
          toString: function (a) {
            switch (a) {
              case 0:
                return "dynamicDraw";
              case 1:
                return "staticDraw";
              default:
                return null;
            }
          },
        },
        To = {
          toString: function (a) {
            switch (a) {
              case 0:
                return "fragment";
              case 1:
                return "vertex";
              default:
                return null;
            }
          },
        },
        ep = {
          toString: function (a) {
            switch (a) {
              case 0:
                return "bgrPacked565";
              case 1:
                return "bgra";
              case 2:
                return "bgraPacked4444";
              case 3:
                return "compressed";
              case 4:
                return "compressedAlpha";
              case 5:
                return "rgbaHalfFloat";
              default:
                return null;
            }
          },
        },
        ho = function (a, b, c) {
          this.__context = a;
          this.__numIndices = b;
          a = this.__context.gl;
          this.__id = a.createBuffer();
          this.__usage = 0 == c ? a.DYNAMIC_DRAW : a.STATIC_DRAW;
        };
      h["openfl.display3D.IndexBuffer3D"] = ho;
      ho.__name__ = "openfl.display3D.IndexBuffer3D";
      ho.prototype = {
        uploadFromTypedArray: function (a, b) {
          null != a &&
            ((b = this.__context.gl),
            this.__context.__bindGLElementArrayBuffer(this.__id),
            Sc.bufferData(b, b.ELEMENT_ARRAY_BUFFER, a, this.__usage));
        },
        uploadFromVector: function (a, b, c) {
          if (null != a) {
            var d = b + c,
              e = this.__tempUInt16Array;
            if (
              null == this.__tempUInt16Array ||
              this.__tempUInt16Array.length < c
            )
              (this.__tempUInt16Array = null != c ? new Uint16Array(c) : null),
                null != e && this.__tempUInt16Array.set(e);
            for (c = b; c < d; )
              (e = c++), (this.__tempUInt16Array[e - b] = a.get(e));
            this.uploadFromTypedArray(this.__tempUInt16Array);
          }
        },
        __class__: ho,
      };
      var io = function (a, b) {
        this.__context = a;
        this.__format = b;
        0 == this.__format
          ? ((this.__agalSamplerUsageMask = 0),
            (this.__agalUniforms = new kb()),
            (this.__agalSamplerUniforms = new kb()),
            (this.__agalAlphaSamplerUniforms = new kb()),
            (this.__agalAlphaSamplerEnabled = []))
          : ((this.__glslAttribNames = []),
            (this.__glslAttribTypes = []),
            (this.__glslSamplerNames = []),
            (this.__glslUniformLocations = []),
            (this.__glslUniformNames = []),
            (this.__glslUniformTypes = []));
        this.__samplerStates = [];
      };
      h["openfl.display3D.Program3D"] = io;
      io.__name__ = "openfl.display3D.Program3D";
      io.prototype = {
        upload: function (a, b) {
          if (0 == this.__format) {
            var c = [];
            a = Cd.convertToGLSL(a, null);
            b = Cd.convertToGLSL(b, c);
            5 == Ka.level &&
              (Ka.info(a, {
                fileName: "openfl/display3D/Program3D.hx",
                lineNumber: 399,
                className: "openfl.display3D.Program3D",
                methodName: "upload",
              }),
              Ka.info(b, {
                fileName: "openfl/display3D/Program3D.hx",
                lineNumber: 400,
                className: "openfl.display3D.Program3D",
                methodName: "upload",
              }));
            this.__deleteShaders();
            this.__uploadFromGLSL(a, b);
            this.__buildAGALUniformList();
            b = 0;
            for (a = c.length; b < a; ) {
              var d = b++;
              this.__samplerStates[d] = c[d];
            }
          }
        },
        __buildAGALUniformList: function () {
          if (1 != this.__format) {
            var a = this.__context.gl;
            this.__agalUniforms.clear();
            this.__agalSamplerUniforms.clear();
            this.__agalAlphaSamplerUniforms.clear();
            this.__agalAlphaSamplerEnabled = [];
            this.__agalSamplerUsageMask = 0;
            var b = a.getProgramParameter(this.__glProgram, a.ACTIVE_UNIFORMS);
            for (var c = new kb(), d = new kb(), e = 0; e < b; ) {
              var f = e++,
                g = a.getActiveUniform(this.__glProgram, f),
                h = g.name,
                l = g.size,
                p = g.type;
              g = new km(this.__context);
              g.name = h;
              g.size = l;
              g.type = p;
              g.location = a.getUniformLocation(this.__glProgram, g.name);
              h = g.name.indexOf("[");
              0 <= h && (g.name = g.name.substring(0, h));
              switch (g.type) {
                case 35674:
                  g.regCount = 2;
                  break;
                case 35675:
                  g.regCount = 3;
                  break;
                case 35676:
                  g.regCount = 4;
                  break;
                default:
                  g.regCount = 1;
              }
              g.regCount *= g.size;
              this.__agalUniforms.add(g);
              if ("vcPositionScale" == g.name) this.__agalPositionScale = g;
              else if (K.startsWith(g.name, "vc"))
                (g.regIndex = M.parseInt(g.name.substring(2))),
                  (g.regData = this.__context.__vertexConstants),
                  c.add(g);
              else if (K.startsWith(g.name, "fc"))
                (g.regIndex = M.parseInt(g.name.substring(2))),
                  (g.regData = this.__context.__fragmentConstants),
                  d.add(g);
              else if (
                K.startsWith(g.name, "sampler") &&
                -1 == g.name.indexOf("alpha")
              )
                for (
                  g.regIndex = M.parseInt(g.name.substring(7)),
                    this.__agalSamplerUniforms.add(g),
                    h = 0,
                    l = g.regCount;
                  h < l;

                )
                  (p = h++),
                    (this.__agalSamplerUsageMask |= 1 << (g.regIndex + p));
              else
                K.startsWith(g.name, "sampler") && K.endsWith(g.name, "_alpha")
                  ? ((h = g.name.indexOf("_") - 7),
                    (g.regIndex = M.parseInt(g.name.substring(7, 7 + h)) + 4),
                    this.__agalAlphaSamplerUniforms.add(g))
                  : K.startsWith(g.name, "sampler") &&
                    K.endsWith(g.name, "_alphaEnabled") &&
                    ((g.regIndex = M.parseInt(g.name.substring(7))),
                    (this.__agalAlphaSamplerEnabled[g.regIndex] = g));
              5 == Ka.level &&
                Ka.verbose(
                  "" +
                    f +
                    " name:" +
                    g.name +
                    " type:" +
                    g.type +
                    " size:" +
                    g.size +
                    " location:" +
                    M.string(g.location),
                  {
                    fileName: "openfl/display3D/Program3D.hx",
                    lineNumber: 577,
                    className: "openfl.display3D.Program3D",
                    methodName: "__buildAGALUniformList",
                  }
                );
            }
            this.__agalVertexUniformMap = new Mj(Rm.array(c));
            this.__agalFragmentUniformMap = new Mj(Rm.array(d));
          }
        },
        __deleteShaders: function () {
          var a = this.__context.gl;
          null != this.__glProgram && (this.__glProgram = null);
          null != this.__glVertexShader &&
            (a.deleteShader(this.__glVertexShader),
            (this.__glVertexShader = null));
          null != this.__glFragmentShader &&
            (a.deleteShader(this.__glFragmentShader),
            (this.__glFragmentShader = null));
        },
        __disable: function () {},
        __enable: function () {
          var a = this.__context.gl;
          a.useProgram(this.__glProgram);
          if (0 == this.__format) {
            this.__agalVertexUniformMap.markAllDirty();
            this.__agalFragmentUniformMap.markAllDirty();
            for (var b = this.__agalSamplerUniforms.h; null != b; ) {
              var c = b.item;
              b = b.next;
              if (1 == c.regCount) a.uniform1i(c.location, c.regIndex);
              else throw new sd("!!! TODO: uniform location on webgl");
            }
            for (b = this.__agalAlphaSamplerUniforms.h; null != b; )
              if (((c = b.item), (b = b.next), 1 == c.regCount))
                a.uniform1i(c.location, c.regIndex);
              else throw new sd("!!! TODO: uniform location on webgl");
          }
        },
        __flush: function () {
          0 == this.__format &&
            (this.__agalVertexUniformMap.flush(),
            this.__agalFragmentUniformMap.flush());
        },
        __markDirty: function (a, b, c) {
          1 != this.__format &&
            (a
              ? this.__agalVertexUniformMap.markDirty(b, c)
              : this.__agalFragmentUniformMap.markDirty(b, c));
        },
        __setPositionScale: function (a) {
          1 != this.__format &&
            null != this.__agalPositionScale &&
            this.__context.gl.uniform4fv(this.__agalPositionScale.location, a);
        },
        __uploadFromGLSL: function (a, b) {
          var c = this.__context.gl;
          this.__glVertexSource = a;
          this.__glFragmentSource = b;
          this.__glVertexShader = c.createShader(c.VERTEX_SHADER);
          c.shaderSource(this.__glVertexShader, a);
          c.compileShader(this.__glVertexShader);
          if (
            0 == c.getShaderParameter(this.__glVertexShader, c.COMPILE_STATUS)
          ) {
            var d =
              "Error compiling vertex shader\n" +
              c.getShaderInfoLog(this.__glVertexShader);
            Ka.error(d + ("\n" + a), {
              fileName: "openfl/display3D/Program3D.hx",
              lineNumber: 869,
              className: "openfl.display3D.Program3D",
              methodName: "__uploadFromGLSL",
            });
          }
          this.__glFragmentShader = c.createShader(c.FRAGMENT_SHADER);
          c.shaderSource(this.__glFragmentShader, b);
          c.compileShader(this.__glFragmentShader);
          0 ==
            c.getShaderParameter(this.__glFragmentShader, c.COMPILE_STATUS) &&
            ((d =
              "Error compiling fragment shader\n" +
              c.getShaderInfoLog(this.__glFragmentShader)),
            Ka.error(d + ("\n" + b), {
              fileName: "openfl/display3D/Program3D.hx",
              lineNumber: 881,
              className: "openfl.display3D.Program3D",
              methodName: "__uploadFromGLSL",
            }));
          this.__glProgram = c.createProgram();
          if (0 == this.__format)
            for (b = 0; 16 > b; ) {
              var e = b++;
              d = "va" + e;
              -1 != a.indexOf(" " + d) &&
                c.bindAttribLocation(this.__glProgram, e, d);
            }
          else
            for (b = 0, a = this.__glslAttribNames; b < a.length; )
              if (
                ((d = a[b]),
                ++b,
                -1 < d.indexOf("Position") && K.startsWith(d, "openfl_"))
              ) {
                c.bindAttribLocation(this.__glProgram, 0, d);
                break;
              }
          c.attachShader(this.__glProgram, this.__glVertexShader);
          c.attachShader(this.__glProgram, this.__glFragmentShader);
          c.linkProgram(this.__glProgram);
          0 == c.getProgramParameter(this.__glProgram, c.LINK_STATUS) &&
            ((d =
              "Unable to initialize the shader program\n" +
              c.getProgramInfoLog(this.__glProgram)),
            Ka.error(d, {
              fileName: "openfl/display3D/Program3D.hx",
              lineNumber: 922,
              className: "openfl.display3D.Program3D",
              methodName: "__uploadFromGLSL",
            }));
        },
        __class__: io,
      };
      var km = function (a) {
        this.context = a;
        this.isDirty = !0;
        this.regDataPointer = new co(null, 0);
      };
      h["openfl.display3D.Uniform"] = km;
      km.__name__ = "openfl.display3D.Uniform";
      km.prototype = {
        flush: function () {
          var a = this.context.gl,
            b = 4 * this.regIndex;
          switch (this.type) {
            case 35664:
              ap.uniform2fv(
                a,
                this.location,
                this.regData.subarray(b, b + 2 * this.regCount)
              );
              break;
            case 35665:
              var c = this.location;
              b = this.regData.subarray(b, b + 3 * this.regCount);
              var d = null;
              null != d ? a.uniform3fv(c, b, d, null) : a.uniform3fv(c, b);
              break;
            case 35666:
              c = this.location;
              b = this.regData.subarray(b, b + 4 * this.regCount);
              d = null;
              null != d ? a.uniform4fv(c, b, d, null) : a.uniform4fv(c, b);
              break;
            case 35674:
              Sc.uniformMatrix2fv(
                a,
                this.location,
                !1,
                this.regData.subarray(b, b + 4 * this.size)
              );
              break;
            case 35675:
              Sc.uniformMatrix3fv(
                a,
                this.location,
                !1,
                this.regData.subarray(b, b + 9 * this.size)
              );
              break;
            case 35676:
              Sc.uniformMatrix4fv(
                a,
                this.location,
                !1,
                this.regData.subarray(b, b + 16 * this.size)
              );
              break;
            default:
              (c = this.location),
                (b = this.regData.subarray(b, b + 4 * this.regCount)),
                (d = null),
                null != d ? a.uniform4fv(c, b, d, null) : a.uniform4fv(c, b);
          }
        },
        __class__: km,
      };
      var Mj = function (a) {
        this.__uniforms = a;
        this.__uniforms.sort(function (a, b) {
          return qa.compare(a.regIndex, b.regIndex);
        });
        var b = 0;
        a = 0;
        for (var c = this.__uniforms; a < c.length; ) {
          var d = c[a];
          ++a;
          d.regIndex + d.regCount > b && (b = d.regIndex + d.regCount);
        }
        this.__registerLookup = ja.toObjectVector(null, b);
        a = 0;
        for (c = this.__uniforms; a < c.length; ) {
          d = c[a];
          ++a;
          b = 0;
          for (var e = d.regCount; b < e; ) {
            var f = b++;
            this.__registerLookup.set(d.regIndex + f, d);
          }
        }
        this.__anyDirty = this.__allDirty = !0;
      };
      h["openfl.display3D.UniformMap"] = Mj;
      Mj.__name__ = "openfl.display3D.UniformMap";
      Mj.prototype = {
        flush: function () {
          if (this.__anyDirty) {
            for (var a = 0, b = this.__uniforms; a < b.length; ) {
              var c = b[a];
              ++a;
              if (this.__allDirty || c.isDirty) c.flush(), (c.isDirty = !1);
            }
            this.__anyDirty = this.__allDirty = !1;
          }
        },
        markAllDirty: function () {
          this.__anyDirty = this.__allDirty = !0;
        },
        markDirty: function (a, b) {
          if (!this.__allDirty)
            for (
              b = a + b,
                b > this.__registerLookup.get_length() &&
                  (b = this.__registerLookup.get_length());
              a < b;

            ) {
              var c = this.__registerLookup.get(a);
              null != c
                ? ((this.__anyDirty = c.isDirty = !0),
                  (a = c.regIndex + c.regCount))
                : ++a;
            }
        },
        __class__: Mj,
      };
      var jo = function (a, b, c, d) {
        this.__context = a;
        this.__numVertices = b;
        this.__vertexSize = c;
        a = this.__context.gl;
        this.__id = a.createBuffer();
        this.__stride = 4 * this.__vertexSize;
        this.__usage = 0 == So.fromString(d) ? a.DYNAMIC_DRAW : a.STATIC_DRAW;
      };
      h["openfl.display3D.VertexBuffer3D"] = jo;
      jo.__name__ = "openfl.display3D.VertexBuffer3D";
      jo.prototype = {
        uploadFromTypedArray: function (a, b) {
          null != a &&
            ((b = this.__context.gl),
            this.__context.__bindGLArrayBuffer(this.__id),
            Sc.bufferData(b, b.ARRAY_BUFFER, a, this.__usage));
        },
        uploadFromVector: function (a, b, c) {
          if (null != a) {
            b *= this.__vertexSize;
            var d = c * this.__vertexSize;
            c = b + d;
            var e = this.__tempFloat32Array;
            if (
              null == this.__tempFloat32Array ||
              this.__tempFloat32Array.length < d
            )
              (this.__tempFloat32Array =
                null != d ? new Float32Array(d) : null),
                null != e && this.__tempFloat32Array.set(e);
            for (d = b; d < c; )
              (e = d++), (this.__tempFloat32Array[e - b] = a.get(e));
            this.uploadFromTypedArray(
              bj.toArrayBufferView(this.__tempFloat32Array)
            );
          }
        },
        __class__: jo,
      };
      var Cd = function () {};
      h["openfl.display3D._internal.AGALConverter"] = Cd;
      Cd.__name__ = "openfl.display3D._internal.AGALConverter";
      Cd.prefixFromType = function (a, b) {
        switch (a) {
          case 0:
            return "va";
          case 1:
            return b == kg.VERTEX ? "vc" : "fc";
          case 2:
            return b == kg.VERTEX ? "vt" : "ft";
          case 3:
            return "output_";
          case 4:
            return "v";
          case 5:
            return "sampler";
          default:
            throw new sd("Invalid data!");
        }
      };
      Cd.readUInt64 = function (a) {
        var b = a.readInt();
        a = a.readInt();
        return new sb(a, b);
      };
      Cd.convertToGLSL = function (a, b) {
        a.position = 0;
        a.__endian = 1;
        var c = a.readByte() & 255;
        if (176 == c) return a.readUTF();
        if (160 != c) throw new sd("Magic value must be 0xA0, may not be AGAL");
        var d = a.readInt();
        if (1 != d) throw new sd("Version must be 1");
        if (161 != (a.readByte() & 255))
          throw new sd("Shader type ID must be 0xA1");
        c = 0 == (a.readByte() & 255) ? kg.VERTEX : kg.FRAGMENT;
        for (var e = new lm(), f = ""; ; ) {
          d = a.position;
          if (!rc.gt(dg.get_length(a), d)) break;
          var g = a.readInt();
          d = a.readUnsignedInt();
          var h = Cd.readUInt64(a),
            l = Cd.readUInt64(a);
          d = yi.parse(d, c);
          h = Ih.parse(h, c, d.mask);
          var p = Ih.parse(l, c, d.mask);
          f += "\t";
          switch (g) {
            case 0:
              f += M.string(d.toGLSL() + " = " + h.toGLSL() + "; // mov");
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              break;
            case 1:
              f += M.string(
                d.toGLSL() +
                  " = " +
                  h.toGLSL() +
                  " + " +
                  p.toGLSL() +
                  "; // add"
              );
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              e.addSR(p, va.VECTOR_4);
              break;
            case 2:
              f += M.string(
                d.toGLSL() +
                  " = " +
                  h.toGLSL() +
                  " - " +
                  p.toGLSL() +
                  "; // sub"
              );
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              e.addSR(p, va.VECTOR_4);
              break;
            case 3:
              f += M.string(
                d.toGLSL() +
                  " = " +
                  h.toGLSL() +
                  " * " +
                  p.toGLSL() +
                  "; // mul"
              );
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              e.addSR(p, va.VECTOR_4);
              break;
            case 4:
              f += M.string(
                d.toGLSL() +
                  " = " +
                  h.toGLSL() +
                  " / " +
                  p.toGLSL() +
                  "; // div"
              );
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              e.addSR(p, va.VECTOR_4);
              break;
            case 5:
              f =
                -1 < h.toGLSL().indexOf(".")
                  ? f +
                    M.string(d.toGLSL() + " = 1.0 / " + h.toGLSL() + "; // rcp")
                  : f +
                    M.string(
                      d.toGLSL() + " = vec4(1) / " + h.toGLSL() + "; // rcp"
                    );
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              break;
            case 6:
              f += M.string(
                d.toGLSL() +
                  " = min(" +
                  h.toGLSL() +
                  ", " +
                  p.toGLSL() +
                  "); // min"
              );
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              e.addSR(p, va.VECTOR_4);
              break;
            case 7:
              f += M.string(
                d.toGLSL() +
                  " = max(" +
                  h.toGLSL() +
                  ", " +
                  p.toGLSL() +
                  "); // max"
              );
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              e.addSR(p, va.VECTOR_4);
              break;
            case 8:
              f += M.string(
                d.toGLSL() + " = fract(" + h.toGLSL() + "); // frc"
              );
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              break;
            case 9:
              f += M.string(
                d.toGLSL() + " = sqrt(" + h.toGLSL() + "); // sqrt"
              );
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              break;
            case 10:
              f += M.string(
                d.toGLSL() + " = inversesqrt(" + h.toGLSL() + "); // rsq"
              );
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              break;
            case 11:
              f += M.string(
                d.toGLSL() +
                  " = pow(" +
                  h.toGLSL() +
                  ", " +
                  p.toGLSL() +
                  "); // pow"
              );
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              e.addSR(p, va.VECTOR_4);
              break;
            case 12:
              f += M.string(d.toGLSL() + " = log2(" + h.toGLSL() + "); // log");
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              break;
            case 13:
              f += M.string(d.toGLSL() + " = exp2(" + h.toGLSL() + "); // exp");
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              break;
            case 14:
              f += M.string(
                d.toGLSL() + " = normalize(" + h.toGLSL() + "); // normalize"
              );
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              break;
            case 15:
              f += M.string(d.toGLSL() + " = sin(" + h.toGLSL() + "); // sin");
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              break;
            case 16:
              f += M.string(d.toGLSL() + " = cos(" + h.toGLSL() + "); // cos");
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              break;
            case 17:
              h.sourceMask = p.sourceMask = 7;
              f += M.string(
                d.toGLSL() +
                  " = cross(vec3(" +
                  h.toGLSL() +
                  "), vec3(" +
                  p.toGLSL() +
                  ")); // crs"
              );
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              e.addSR(p, va.VECTOR_4);
              break;
            case 18:
              h.sourceMask = p.sourceMask = 7;
              f += M.string(
                d.toGLSL() +
                  " = vec4(dot(vec3(" +
                  h.toGLSL() +
                  "), vec3(" +
                  p.toGLSL() +
                  ")))" +
                  d.getWriteMask() +
                  "; // dp3"
              );
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              e.addSR(p, va.VECTOR_4);
              break;
            case 19:
              h.sourceMask = p.sourceMask = 15;
              f += M.string(
                d.toGLSL() +
                  " = vec4(dot(vec4(" +
                  h.toGLSL() +
                  "), vec4(" +
                  p.toGLSL() +
                  ")))" +
                  d.getWriteMask() +
                  "; // dp4"
              );
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              e.addSR(p, va.VECTOR_4);
              break;
            case 20:
              f += M.string(d.toGLSL() + " = abs(" + h.toGLSL() + "); // abs");
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              break;
            case 21:
              f += M.string(d.toGLSL() + " = -" + h.toGLSL() + "; // neg");
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              break;
            case 22:
              f += M.string(
                d.toGLSL() +
                  " = clamp(" +
                  h.toGLSL() +
                  ", 0.0, 1.0); // saturate"
              );
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              break;
            case 23:
              g = e.getRegisterUsage(p);
              g != va.VECTOR_4 && g != va.VECTOR_4_ARRAY
                ? ((f += M.string(
                    d.toGLSL() +
                      " = " +
                      h.toGLSL() +
                      " * mat3(" +
                      p.toGLSL(!1) +
                      "); // m33"
                  )),
                  e.addDR(d, va.VECTOR_4),
                  e.addSR(h, va.VECTOR_4),
                  e.addSR(p, va.MATRIX_4_4))
                : ((h.sourceMask = p.sourceMask = 7),
                  (f += M.string(
                    d.toGLSL() +
                      " = vec3(dot(" +
                      h.toGLSL(!0) +
                      "," +
                      p.toGLSL(!0, 0) +
                      "), dot(" +
                      h.toGLSL(!0) +
                      "," +
                      p.toGLSL(!0, 1) +
                      "),dot(" +
                      h.toGLSL(!0) +
                      "," +
                      p.toGLSL(!0, 2) +
                      ")); // m33"
                  )),
                  e.addDR(d, va.VECTOR_4),
                  e.addSR(h, va.VECTOR_4),
                  e.addSR(p, va.VECTOR_4, 0),
                  e.addSR(p, va.VECTOR_4, 1),
                  e.addSR(p, va.VECTOR_4, 2));
              break;
            case 24:
              g = e.getRegisterUsage(p);
              g != va.VECTOR_4 && g != va.VECTOR_4_ARRAY
                ? ((f += M.string(
                    d.toGLSL() +
                      " = " +
                      h.toGLSL() +
                      " * " +
                      p.toGLSL(!1) +
                      "; // m44"
                  )),
                  e.addDR(d, va.VECTOR_4),
                  e.addSR(h, va.VECTOR_4),
                  e.addSR(p, va.MATRIX_4_4))
                : ((h.sourceMask = p.sourceMask = 15),
                  (f += M.string(
                    d.toGLSL() +
                      " = vec4(dot(" +
                      h.toGLSL(!0) +
                      "," +
                      p.toGLSL(!0, 0) +
                      "), dot(" +
                      h.toGLSL(!0) +
                      "," +
                      p.toGLSL(!0, 1) +
                      "), dot(" +
                      h.toGLSL(!0) +
                      "," +
                      p.toGLSL(!0, 2) +
                      "), dot(" +
                      h.toGLSL(!0) +
                      "," +
                      p.toGLSL(!0, 3) +
                      ")); // m44"
                  )),
                  e.addDR(d, va.VECTOR_4),
                  e.addSR(h, va.VECTOR_4),
                  e.addSR(p, va.VECTOR_4, 0),
                  e.addSR(p, va.VECTOR_4, 1),
                  e.addSR(p, va.VECTOR_4, 2),
                  e.addSR(p, va.VECTOR_4, 3));
              break;
            case 25:
              d.mask &= 7;
              g = e.getRegisterUsage(p);
              g != va.VECTOR_4 && g != va.VECTOR_4_ARRAY
                ? ((f += M.string(
                    d.toGLSL() +
                      " = " +
                      h.toGLSL() +
                      " * " +
                      p.toGLSL(!1) +
                      "; // m34"
                  )),
                  e.addDR(d, va.VECTOR_4),
                  e.addSR(h, va.VECTOR_4),
                  e.addSR(p, va.MATRIX_4_4))
                : ((h.sourceMask = p.sourceMask = 15),
                  (f += M.string(
                    d.toGLSL() +
                      " = vec3(dot(" +
                      h.toGLSL(!0) +
                      "," +
                      p.toGLSL(!0, 0) +
                      "), dot(" +
                      h.toGLSL(!0) +
                      "," +
                      p.toGLSL(!0, 1) +
                      "),dot(" +
                      h.toGLSL(!0) +
                      "," +
                      p.toGLSL(!0, 2) +
                      ")); // m34"
                  )),
                  e.addDR(d, va.VECTOR_4),
                  e.addSR(h, va.VECTOR_4),
                  e.addSR(p, va.VECTOR_4, 0),
                  e.addSR(p, va.VECTOR_4, 1),
                  e.addSR(p, va.VECTOR_4, 2));
              break;
            case 39:
              h.sourceMask = 15;
              f += M.string(
                "if (any(lessThan(" + h.toGLSL() + ", vec4(0)))) discard;"
              );
              e.addSR(h, va.VECTOR_4);
              break;
            case 40:
              p = zi.parse(l, c);
              switch (p.d) {
                case 0:
                  2 == p.t
                    ? ((h.sourceMask = 3),
                      e.addSaR(p, va.SAMPLER_2D_ALPHA),
                      (f += M.string(
                        "if (" + p.toGLSL() + "_alphaEnabled) {\n"
                      )),
                      (f += M.string(
                        "\t\t" +
                          d.toGLSL() +
                          " = vec4(texture2D(" +
                          p.toGLSL() +
                          ", " +
                          h.toGLSL() +
                          ").xyz, texture2D(" +
                          p.toGLSL() +
                          "_alpha, " +
                          h.toGLSL() +
                          ").x); // tex + alpha\n"
                      )),
                      (f += "\t} else {\n"),
                      (f += M.string(
                        "\t\t" +
                          d.toGLSL() +
                          " = texture2D(" +
                          p.toGLSL() +
                          ", " +
                          h.toGLSL() +
                          "); // tex\n"
                      )),
                      (f += "\t}"))
                    : ((h.sourceMask = 3),
                      e.addSaR(p, va.SAMPLER_2D),
                      (f += M.string(
                        d.toGLSL() +
                          " = texture2D(" +
                          p.toGLSL() +
                          ", " +
                          h.toGLSL() +
                          "); // tex"
                      )));
                  break;
                case 1:
                  2 == p.t
                    ? ((h.sourceMask = 7),
                      e.addSaR(p, va.SAMPLER_CUBE_ALPHA),
                      (f += M.string(
                        "if (" + p.toGLSL() + "_alphaEnabled) {\n"
                      )),
                      (f += M.string(
                        "\t\t" +
                          d.toGLSL() +
                          " = vec4(textureCube(" +
                          p.toGLSL() +
                          ", " +
                          h.toGLSL() +
                          ").xyz, textureCube(" +
                          p.toGLSL() +
                          "_alpha, " +
                          h.toGLSL() +
                          ").x); // tex + alpha\n"
                      )),
                      (f += "\t} else {\n"),
                      (f += M.string(
                        "\t\t" +
                          d.toGLSL() +
                          " = textureCube(" +
                          p.toGLSL() +
                          ", " +
                          h.toGLSL() +
                          "); // tex"
                      )),
                      (f += "\t}"))
                    : ((h.sourceMask = 7),
                      (f += M.string(
                        d.toGLSL() +
                          " = textureCube(" +
                          p.toGLSL() +
                          ", " +
                          h.toGLSL() +
                          "); // tex"
                      )),
                      e.addSaR(p, va.SAMPLER_CUBE));
              }
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              null != b && (b[p.n] = p.toSamplerState());
              break;
            case 41:
              h.sourceMask = p.sourceMask = 15;
              f += M.string(
                d.toGLSL() +
                  " = vec4(greaterThanEqual(" +
                  h.toGLSL() +
                  ", " +
                  p.toGLSL() +
                  "))" +
                  d.getWriteMask() +
                  "; // ste"
              );
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              e.addSR(p, va.VECTOR_4);
              break;
            case 42:
              h.sourceMask = p.sourceMask = 15;
              f += M.string(
                d.toGLSL() +
                  " = vec4(lessThan(" +
                  h.toGLSL() +
                  ", " +
                  p.toGLSL() +
                  "))" +
                  d.getWriteMask() +
                  "; // slt"
              );
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              e.addSR(p, va.VECTOR_4);
              break;
            case 44:
              h.sourceMask = p.sourceMask = 15;
              f += M.string(
                d.toGLSL() +
                  " = vec4(equal(" +
                  h.toGLSL() +
                  ", " +
                  p.toGLSL() +
                  "))" +
                  d.getWriteMask() +
                  "; // seq"
              );
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              e.addSR(p, va.VECTOR_4);
              break;
            case 45:
              h.sourceMask = p.sourceMask = 15;
              f += M.string(
                d.toGLSL() +
                  " = vec4(notEqual(" +
                  h.toGLSL() +
                  ", " +
                  p.toGLSL() +
                  "))" +
                  d.getWriteMask() +
                  "; // sne"
              );
              e.addDR(d, va.VECTOR_4);
              e.addSR(h, va.VECTOR_4);
              e.addSR(p, va.VECTOR_4);
              break;
            default:
              throw new sd("Opcode " + g);
          }
          f += "\n";
        }
        null == Cd.limitedProfile &&
          ((d = Ag.context.getParameter(7938)),
          (Cd.limitedProfile =
            -1 < d.indexOf("OpenGL ES") || -1 < d.indexOf("WebGL")));
        a =
          "" +
          M.string(
            "// AGAL " + (c == kg.VERTEX ? "vertex" : "fragment") + " shader\n"
          );
        a = Cd.limitedProfile
          ? a +
            "#version 100\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n"
          : a + "#version 120\n";
        a += M.string(e.toGLSL(!1));
        c == kg.VERTEX && (a += "uniform vec4 vcPositionScale;\n");
        a = a + "void main() {\n" + M.string(e.toGLSL(!0));
        a += M.string(f);
        c == kg.VERTEX && (a += "\tgl_Position *= vcPositionScale;\n");
        return a + "}\n";
      };
      var yi = function () {};
      h["openfl.display3D._internal._AGALConverter.DestRegister"] = yi;
      yi.__name__ = "openfl.display3D._internal._AGALConverter.DestRegister";
      yi.parse = function (a, b) {
        var c = new yi();
        c.programType = b;
        c.type = (a >>> 24) & 15;
        c.mask = (a >>> 16) & 15;
        c.n = a & 65535;
        return c;
      };
      yi.prototype = {
        getWriteMask: function () {
          var a = ".";
          0 != (this.mask & 1) && (a += "x");
          0 != (this.mask & 2) && (a += "y");
          0 != (this.mask & 4) && (a += "z");
          0 != (this.mask & 8) && (a += "w");
          return a;
        },
        toGLSL: function (a) {
          null == a && (a = !0);
          var b =
            3 == this.type
              ? this.programType == kg.VERTEX
                ? "gl_Position"
                : "gl_FragColor"
              : Cd.prefixFromType(this.type, this.programType) + this.n;
          a && 15 != this.mask && (b += this.getWriteMask());
          return b;
        },
        __class__: yi,
      };
      var kg = (w["openfl.display3D._internal._AGALConverter.ProgramType"] = {
        __ename__: "openfl.display3D._internal._AGALConverter.ProgramType",
        __constructs__: null,
        VERTEX: {
          _hx_name: "VERTEX",
          _hx_index: 0,
          __enum__: "openfl.display3D._internal._AGALConverter.ProgramType",
          toString: p,
        },
        FRAGMENT: {
          _hx_name: "FRAGMENT",
          _hx_index: 1,
          __enum__: "openfl.display3D._internal._AGALConverter.ProgramType",
          toString: p,
        },
      });
      kg.__constructs__ = [kg.VERTEX, kg.FRAGMENT];
      var lm = function () {
        this.mEntries = [];
      };
      h["openfl.display3D._internal.RegisterMap"] = lm;
      lm.__name__ = "openfl.display3D._internal.RegisterMap";
      lm.prototype = {
        add: function (a, b, c, d) {
          for (var e = 0, f = this.mEntries; e < f.length; ) {
            var g = f[e];
            ++e;
            if (g.type == a && g.name == b && g.number == c) {
              if (g.usage != d)
                throw new sd(
                  "Cannot use register in multiple ways yet (mat4/vec4)"
                );
              return;
            }
          }
          g = new ko();
          g.type = a;
          g.name = b;
          g.number = c;
          g.usage = d;
          this.mEntries.push(g);
        },
        addDR: function (a, b) {
          this.add(a.type, a.toGLSL(!1), a.n, b);
        },
        addSaR: function (a, b) {
          this.add(a.type, a.toGLSL(), a.n, b);
        },
        addSR: function (a, b, c) {
          null == c && (c = 0);
          0 != a.d
            ? (this.add(
                a.itype,
                Cd.prefixFromType(a.itype, a.programType) + a.n,
                a.n,
                va.VECTOR_4
              ),
              this.add(
                a.type,
                Cd.prefixFromType(a.type, a.programType) + a.o,
                a.o,
                va.VECTOR_4_ARRAY
              ))
            : this.add(a.type, a.toGLSL(!1, c), a.n + c, b);
        },
        getRegisterUsage: function (a) {
          return 0 != a.d
            ? va.VECTOR_4_ARRAY
            : this.getUsage(a.type, a.toGLSL(!1), a.n);
        },
        getUsage: function (a, b, c) {
          for (var d = 0, e = this.mEntries; d < e.length; ) {
            var f = e[d];
            ++d;
            if (f.type == a && f.name == b && f.number == c) return f.usage;
          }
          return va.UNUSED;
        },
        toGLSL: function (a) {
          this.mEntries.sort(function (a, b) {
            return a.number - b.number;
          });
          this.mEntries.sort(function (a, b) {
            return za.__cast(a.type, Lo) - za.__cast(b.type, Lo);
          });
          for (var b = "", c = 0, d = this.mEntries.length; c < d; ) {
            var e = c++;
            e = this.mEntries[e];
            if (!((a && 2 != e.type) || (!a && 2 == e.type)) && 3 != e.type) {
              switch (e.type) {
                case 0:
                  b += "attribute ";
                  break;
                case 1:
                  b += "uniform ";
                  break;
                case 2:
                  b += "\t";
                  break;
                case 3:
                  break;
                case 4:
                  b += "varying ";
                  break;
                case 5:
                  b += "uniform ";
                  break;
                default:
                  throw new sd();
              }
              switch (e.usage._hx_index) {
                case 0:
                  Ka.info("Missing switch patten: RegisterUsage.UNUSED", {
                    fileName: "openfl/display3D/_internal/AGALConverter.hx",
                    lineNumber: 751,
                    className: "openfl.display3D._internal.RegisterMap",
                    methodName: "toGLSL",
                  });
                  break;
                case 1:
                  b += "vec4 ";
                  break;
                case 2:
                  b += "mat4 ";
                  break;
                case 3:
                  b += "sampler2D ";
                  break;
                case 5:
                  b += "samplerCube ";
                  break;
                case 7:
                  b += "vec4 ";
              }
              e.usage == va.SAMPLER_2D_ALPHA
                ? ((b += "sampler2D "),
                  (b += M.string(e.name)),
                  (b += ";\n"),
                  (b += "uniform "),
                  (b += "sampler2D "),
                  (b += M.string(e.name + "_alpha")),
                  (b += ";\n"),
                  (b += "uniform "),
                  (b += "bool "),
                  (b += M.string(e.name + "_alphaEnabled")))
                : e.usage == va.SAMPLER_CUBE_ALPHA
                ? ((b += "samplerCube "),
                  (b += M.string(e.name)),
                  (b += ";\n"),
                  (b += "uniform "),
                  (b += "samplerCube "),
                  (b += M.string(e.name + "_alpha")),
                  (b += ";\n"),
                  (b += "uniform "),
                  (b += "bool "),
                  (b += M.string(e.name + "_alphaEnabled")))
                : (b =
                    e.usage == va.VECTOR_4_ARRAY
                      ? b + M.string(e.name + "[128]")
                      : b + M.string(e.name));
              b += ";\n";
            }
          }
          return b;
        },
        __class__: lm,
      };
      var ko = function () {};
      h["openfl.display3D._internal._AGALConverter.RegisterMapEntry"] = ko;
      ko.__name__ =
        "openfl.display3D._internal._AGALConverter.RegisterMapEntry";
      ko.prototype = { __class__: ko };
      var va = (w["openfl.display3D._internal._AGALConverter.RegisterUsage"] = {
        __ename__: "openfl.display3D._internal._AGALConverter.RegisterUsage",
        __constructs__: null,
        UNUSED: {
          _hx_name: "UNUSED",
          _hx_index: 0,
          __enum__: "openfl.display3D._internal._AGALConverter.RegisterUsage",
          toString: p,
        },
        VECTOR_4: {
          _hx_name: "VECTOR_4",
          _hx_index: 1,
          __enum__: "openfl.display3D._internal._AGALConverter.RegisterUsage",
          toString: p,
        },
        MATRIX_4_4: {
          _hx_name: "MATRIX_4_4",
          _hx_index: 2,
          __enum__: "openfl.display3D._internal._AGALConverter.RegisterUsage",
          toString: p,
        },
        SAMPLER_2D: {
          _hx_name: "SAMPLER_2D",
          _hx_index: 3,
          __enum__: "openfl.display3D._internal._AGALConverter.RegisterUsage",
          toString: p,
        },
        SAMPLER_2D_ALPHA: {
          _hx_name: "SAMPLER_2D_ALPHA",
          _hx_index: 4,
          __enum__: "openfl.display3D._internal._AGALConverter.RegisterUsage",
          toString: p,
        },
        SAMPLER_CUBE: {
          _hx_name: "SAMPLER_CUBE",
          _hx_index: 5,
          __enum__: "openfl.display3D._internal._AGALConverter.RegisterUsage",
          toString: p,
        },
        SAMPLER_CUBE_ALPHA: {
          _hx_name: "SAMPLER_CUBE_ALPHA",
          _hx_index: 6,
          __enum__: "openfl.display3D._internal._AGALConverter.RegisterUsage",
          toString: p,
        },
        VECTOR_4_ARRAY: {
          _hx_name: "VECTOR_4_ARRAY",
          _hx_index: 7,
          __enum__: "openfl.display3D._internal._AGALConverter.RegisterUsage",
          toString: p,
        },
      });
      va.__constructs__ = [
        va.UNUSED,
        va.VECTOR_4,
        va.MATRIX_4_4,
        va.SAMPLER_2D,
        va.SAMPLER_2D_ALPHA,
        va.SAMPLER_CUBE,
        va.SAMPLER_CUBE_ALPHA,
        va.VECTOR_4_ARRAY,
      ];
      var zi = function () {};
      h["openfl.display3D._internal._AGALConverter.SamplerRegister"] = zi;
      zi.__name__ = "openfl.display3D._internal._AGALConverter.SamplerRegister";
      zi.parse = function (a, b) {
        var c = new zi();
        c.programType = b;
        b = 60;
        b =
          0 == b
            ? new sb(a.high, a.low)
            : 32 > b
            ? new sb(a.high >> b, (a.high << (32 - b)) | (a.low >>> b))
            : new sb(a.high >> 31, a.high >> (b - 32));
        b = b.low & 15;
        c.f = b;
        b = 56;
        b =
          0 == b
            ? new sb(a.high, a.low)
            : 32 > b
            ? new sb(a.high >> b, (a.high << (32 - b)) | (a.low >>> b))
            : new sb(a.high >> 31, a.high >> (b - 32));
        b = b.low & 15;
        c.m = b;
        b = 52;
        b =
          0 == b
            ? new sb(a.high, a.low)
            : 32 > b
            ? new sb(a.high >> b, (a.high << (32 - b)) | (a.low >>> b))
            : new sb(a.high >> 31, a.high >> (b - 32));
        b = b.low & 15;
        c.w = b;
        b = 48;
        b =
          0 == b
            ? new sb(a.high, a.low)
            : 32 > b
            ? new sb(a.high >> b, (a.high << (32 - b)) | (a.low >>> b))
            : new sb(a.high >> 31, a.high >> (b - 32));
        b = b.low & 15;
        c.s = b;
        b = 44;
        b =
          0 == b
            ? new sb(a.high, a.low)
            : 32 > b
            ? new sb(a.high >> b, (a.high << (32 - b)) | (a.low >>> b))
            : new sb(a.high >> 31, a.high >> (b - 32));
        b = b.low & 15;
        c.d = b;
        b = 40;
        b =
          0 == b
            ? new sb(a.high, a.low)
            : 32 > b
            ? new sb(a.high >> b, (a.high << (32 - b)) | (a.low >>> b))
            : new sb(a.high >> 31, a.high >> (b - 32));
        b = b.low & 15;
        c.t = b;
        b = 32;
        b =
          0 == b
            ? new sb(a.high, a.low)
            : 32 > b
            ? new sb(a.high >> b, (a.high << (32 - b)) | (a.low >>> b))
            : new sb(a.high >> 31, a.high >> (b - 32));
        b = b.low & 15;
        c.type = b;
        b = 16;
        b =
          0 == b
            ? new sb(a.high, a.low)
            : 32 > b
            ? new sb(a.high >> b, (a.high << (32 - b)) | (a.low >>> b))
            : new sb(a.high >> 31, a.high >> (b - 32));
        b = b.low & 255;
        c.b = b;
        b = a.low & 65535;
        c.n = b;
        return c;
      };
      zi.prototype = {
        toGLSL: function () {
          return Cd.prefixFromType(this.type, this.programType) + this.n;
        },
        toSamplerState: function () {
          switch (this.f) {
            case 0:
              var a = 5;
              break;
            case 1:
              a = 4;
              break;
            default:
              throw new sd();
          }
          switch (this.m) {
            case 0:
              var b = 2;
              break;
            case 1:
              b = 1;
              break;
            case 2:
              b = 0;
              break;
            default:
              throw new sd();
          }
          switch (this.w) {
            case 0:
              var c = 0;
              break;
            case 1:
              c = 2;
              break;
            default:
              throw new sd();
          }
          return new Hh(
            c,
            a,
            b,
            ((this.b << 24) >> 24) / 8,
            4 == (this.s & 4),
            1 == (this.s & 1),
            2 == this.t
          );
        },
        __class__: zi,
      };
      var Ih = function () {};
      h["openfl.display3D._internal._AGALConverter.SourceRegister"] = Ih;
      Ih.__name__ = "openfl.display3D._internal._AGALConverter.SourceRegister";
      Ih.parse = function (a, b, c) {
        var d = new Ih();
        d.programType = b;
        b = 63;
        b =
          0 == b
            ? new sb(a.high, a.low)
            : 32 > b
            ? new sb(a.high >> b, (a.high << (32 - b)) | (a.low >>> b))
            : new sb(a.high >> 31, a.high >> (b - 32));
        b = b.low & 1;
        d.d = b;
        b = 48;
        b =
          0 == b
            ? new sb(a.high, a.low)
            : 32 > b
            ? new sb(a.high >> b, (a.high << (32 - b)) | (a.low >>> b))
            : new sb(a.high >> 31, a.high >> (b - 32));
        b = b.low & 3;
        d.q = b;
        b = 40;
        b =
          0 == b
            ? new sb(a.high, a.low)
            : 32 > b
            ? new sb(a.high >> b, (a.high << (32 - b)) | (a.low >>> b))
            : new sb(a.high >> 31, a.high >> (b - 32));
        b = b.low & 15;
        d.itype = b;
        b = 32;
        b =
          0 == b
            ? new sb(a.high, a.low)
            : 32 > b
            ? new sb(a.high >> b, (a.high << (32 - b)) | (a.low >>> b))
            : new sb(a.high >> 31, a.high >> (b - 32));
        b = b.low & 15;
        d.type = b;
        b = 24;
        b =
          0 == b
            ? new sb(a.high, a.low)
            : 32 > b
            ? new sb(a.high >> b, (a.high << (32 - b)) | (a.low >>> b))
            : new sb(a.high >> 31, a.high >> (b - 32));
        b = b.low & 255;
        d.s = b;
        b = 16;
        b =
          0 == b
            ? new sb(a.high, a.low)
            : 32 > b
            ? new sb(a.high >> b, (a.high << (32 - b)) | (a.low >>> b))
            : new sb(a.high >> 31, a.high >> (b - 32));
        b = b.low & 255;
        d.o = b;
        b = a.low & 65535;
        d.n = b;
        d.sourceMask = c;
        return d;
      };
      Ih.prototype = {
        toGLSL: function (a, b) {
          null == b && (b = 0);
          null == a && (a = !0);
          if (3 == this.type)
            return this.programType == kg.VERTEX
              ? "gl_Position"
              : "gl_FragColor";
          var c = 228 == this.s && 15 == this.sourceMask,
            d = "";
          if (5 != this.type && !c) {
            if (0 != (this.sourceMask & 1))
              switch (this.s & 3) {
                case 0:
                  d += "x";
                  break;
                case 1:
                  d += "y";
                  break;
                case 2:
                  d += "z";
                  break;
                case 3:
                  d += "w";
              }
            if (0 != (this.sourceMask & 2))
              switch ((this.s >> 2) & 3) {
                case 0:
                  d += "x";
                  break;
                case 1:
                  d += "y";
                  break;
                case 2:
                  d += "z";
                  break;
                case 3:
                  d += "w";
              }
            if (0 != (this.sourceMask & 4))
              switch ((this.s >> 4) & 3) {
                case 0:
                  d += "x";
                  break;
                case 1:
                  d += "y";
                  break;
                case 2:
                  d += "z";
                  break;
                case 3:
                  d += "w";
              }
            if (0 != (this.sourceMask & 8))
              switch ((this.s >> 6) & 3) {
                case 0:
                  d += "x";
                  break;
                case 1:
                  d += "y";
                  break;
                case 2:
                  d += "z";
                  break;
                case 3:
                  d += "w";
              }
          }
          c = Cd.prefixFromType(this.type, this.programType);
          if (0 == this.d) c += this.n + b;
          else {
            c += this.o;
            var e = "";
            switch (this.q) {
              case 0:
                e = "x";
                break;
              case 1:
                e = "y";
                break;
              case 2:
                e = "z";
                break;
              case 3:
                e = "w";
            }
            e =
              Cd.prefixFromType(this.itype, this.programType) +
              this.n +
              "." +
              e;
            c += "[ int(" + e + ") +" + b + "]";
          }
          a && "" != d && (c += "." + d);
          return c;
        },
        __class__: Ih,
      };
      var Kj = function () {
        this.backBufferEnableDepthAndStencil = !1;
        this.blendDestinationAlphaFactor = 9;
        this.blendSourceAlphaFactor = 2;
        this.blendDestinationRGBFactor = 9;
        this.blendSourceRGBFactor = 2;
        this.colorMaskAlpha =
          this.colorMaskBlue =
          this.colorMaskGreen =
          this.colorMaskRed =
            !0;
        this.culling = 3;
        this.depthCompareMode = 4;
        this.depthMask = !0;
        this.samplerStates = [];
        this.scissorRectangle = new ha();
        this.stencilCompareMode = 0;
        this.stencilPass = this.stencilFail = this.stencilDepthFail = 5;
        this.stencilReadMask = 255;
        this.stencilReferenceValue = 0;
        this.stencilTriangleFace = 2;
        this.stencilWriteMask = 255;
        this.textures = [];
        this.__frontFaceGLCCW = !0;
        this.__glBlendEquation = 32774;
      };
      h["openfl.display3D._internal.Context3DState"] = Kj;
      Kj.__name__ = "openfl.display3D._internal.Context3DState";
      Kj.prototype = { __class__: Kj };
      var Kb = function (a) {
        pa.call(this);
        this.__context = a;
        var b = this.__context.gl;
        this.__textureID = b.createTexture();
        this.__textureContext = this.__context.__context;
        if (null == Kb.__supportsBGRA) {
          Kb.__textureInternalFormat = b.RGBA;
          Kb.__supportsBGRA = !1;
          Kb.__textureFormat = b.RGBA;
          Kb.__compressedFormats = new kc();
          Kb.__compressedFormatsAlpha = new kc();
          a = b.getExtension("WEBGL_compressed_texture_s3tc");
          var c = b.getExtension("WEBGL_compressed_texture_etc1");
          b = b.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
          if (null != a) {
            var d = a.COMPRESSED_RGBA_S3TC_DXT1_EXT;
            Kb.__compressedFormats.h[0] = d;
            d = a.COMPRESSED_RGBA_S3TC_DXT5_EXT;
            Kb.__compressedFormatsAlpha.h[0] = d;
          }
          null != c &&
            ((d = c.COMPRESSED_RGB_ETC1_WEBGL),
            (Kb.__compressedFormats.h[2] = d),
            (d = c.COMPRESSED_RGB_ETC1_WEBGL),
            (Kb.__compressedFormatsAlpha.h[2] = d));
          null != b &&
            ((d = b.COMPRESSED_RGB_PVRTC_4BPPV1_IMG),
            (Kb.__compressedFormats.h[1] = d),
            (d = b.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG),
            (Kb.__compressedFormatsAlpha.h[1] = d));
        }
        this.__internalFormat = Kb.__textureInternalFormat;
        this.__format = Kb.__textureFormat;
      };
      h["openfl.display3D.textures.TextureBase"] = Kb;
      Kb.__name__ = "openfl.display3D.textures.TextureBase";
      Kb.__super__ = pa;
      Kb.prototype = q(pa.prototype, {
        dispose: function () {
          var a = this.__context.gl;
          null != this.__alphaTexture &&
            (this.__alphaTexture.dispose(), (this.__alphaTexture = null));
          null != this.__textureID &&
            (a.deleteTexture(this.__textureID), (this.__textureID = null));
          null != this.__glFramebuffer &&
            (a.deleteFramebuffer(this.__glFramebuffer),
            (this.__glFramebuffer = null));
          null != this.__glDepthRenderbuffer &&
            (a.deleteRenderbuffer(this.__glDepthRenderbuffer),
            (this.__glDepthRenderbuffer = null));
          null != this.__glStencilRenderbuffer &&
            (a.deleteRenderbuffer(this.__glStencilRenderbuffer),
            (this.__glStencilRenderbuffer = null));
        },
        __getGLFramebuffer: function (a, b, c) {
          b = this.__context.gl;
          null == this.__glFramebuffer &&
            ((this.__glFramebuffer = b.createFramebuffer()),
            this.__context.__bindGLFramebuffer(this.__glFramebuffer),
            b.framebufferTexture2D(
              b.FRAMEBUFFER,
              b.COLOR_ATTACHMENT0,
              b.TEXTURE_2D,
              this.__textureID,
              0
            ),
            this.__context.__enableErrorChecking &&
              ((c = b.checkFramebufferStatus(b.FRAMEBUFFER)),
              c != b.FRAMEBUFFER_COMPLETE &&
                Ka.warn(
                  "Error: Context3D.setRenderToTexture status:" +
                    c +
                    " width:" +
                    this.__width +
                    " height:" +
                    this.__height,
                  {
                    fileName: "openfl/display3D/textures/TextureBase.hx",
                    lineNumber: 201,
                    className: "openfl.display3D.textures.TextureBase",
                    methodName: "__getGLFramebuffer",
                  }
                )));
          a &&
            null == this.__glDepthRenderbuffer &&
            (this.__context.__bindGLFramebuffer(this.__glFramebuffer),
            0 != xb.__glDepthStencil
              ? ((this.__glStencilRenderbuffer = this.__glDepthRenderbuffer =
                  b.createRenderbuffer()),
                b.bindRenderbuffer(b.RENDERBUFFER, this.__glDepthRenderbuffer),
                b.renderbufferStorage(
                  b.RENDERBUFFER,
                  xb.__glDepthStencil,
                  this.__width,
                  this.__height
                ),
                b.framebufferRenderbuffer(
                  b.FRAMEBUFFER,
                  b.DEPTH_STENCIL_ATTACHMENT,
                  b.RENDERBUFFER,
                  this.__glDepthRenderbuffer
                ))
              : ((this.__glDepthRenderbuffer = b.createRenderbuffer()),
                (this.__glStencilRenderbuffer = b.createRenderbuffer()),
                b.bindRenderbuffer(b.RENDERBUFFER, this.__glDepthRenderbuffer),
                b.renderbufferStorage(
                  b.RENDERBUFFER,
                  b.DEPTH_COMPONENT16,
                  this.__width,
                  this.__height
                ),
                b.bindRenderbuffer(
                  b.RENDERBUFFER,
                  this.__glStencilRenderbuffer
                ),
                b.renderbufferStorage(
                  b.RENDERBUFFER,
                  b.STENCIL_INDEX8,
                  this.__width,
                  this.__height
                ),
                b.framebufferRenderbuffer(
                  b.FRAMEBUFFER,
                  b.DEPTH_ATTACHMENT,
                  b.RENDERBUFFER,
                  this.__glDepthRenderbuffer
                ),
                b.framebufferRenderbuffer(
                  b.FRAMEBUFFER,
                  b.STENCIL_ATTACHMENT,
                  b.RENDERBUFFER,
                  this.__glStencilRenderbuffer
                )),
            this.__context.__enableErrorChecking &&
              ((c = b.checkFramebufferStatus(b.FRAMEBUFFER)),
              c != b.FRAMEBUFFER_COMPLETE &&
                Ka.warn(
                  "Error: Context3D.setRenderToTexture status:" +
                    c +
                    " width:" +
                    this.__width +
                    " height:" +
                    this.__height,
                  {
                    fileName: "openfl/display3D/textures/TextureBase.hx",
                    lineNumber: 239,
                    className: "openfl.display3D.textures.TextureBase",
                    methodName: "__getGLFramebuffer",
                  }
                )),
            b.bindRenderbuffer(b.RENDERBUFFER, null));
          return this.__glFramebuffer;
        },
        __getTexture: function () {
          return this.__textureID;
        },
        __setSamplerState: function (a) {
          if (!a.equals(this.__samplerState)) {
            var b = this.__context.gl;
            this.__textureTarget == this.__context.gl.TEXTURE_CUBE_MAP
              ? this.__context.__bindGLTextureCubeMap(this.__textureID)
              : this.__context.__bindGLTexture2D(this.__textureID);
            var c;
            switch (a.wrap) {
              case 0:
                var d = (c = b.CLAMP_TO_EDGE);
                break;
              case 1:
                c = b.CLAMP_TO_EDGE;
                d = b.REPEAT;
                break;
              case 2:
                d = c = b.REPEAT;
                break;
              case 3:
                c = b.REPEAT;
                d = b.CLAMP_TO_EDGE;
                break;
              default:
                throw new Cb("wrap bad enum");
            }
            var e = 5 == a.filter ? b.NEAREST : b.LINEAR;
            switch (a.mipfilter) {
              case 0:
                var f =
                  5 == a.filter
                    ? b.NEAREST_MIPMAP_LINEAR
                    : b.LINEAR_MIPMAP_LINEAR;
                break;
              case 1:
                f =
                  5 == a.filter
                    ? b.NEAREST_MIPMAP_NEAREST
                    : b.LINEAR_MIPMAP_NEAREST;
                break;
              case 2:
                f = 5 == a.filter ? b.NEAREST : b.LINEAR;
                break;
              default:
                throw new Cb("mipfiter bad enum");
            }
            b.texParameteri(this.__textureTarget, b.TEXTURE_MIN_FILTER, f);
            b.texParameteri(this.__textureTarget, b.TEXTURE_MAG_FILTER, e);
            b.texParameteri(this.__textureTarget, b.TEXTURE_WRAP_S, c);
            b.texParameteri(this.__textureTarget, b.TEXTURE_WRAP_T, d);
            null == this.__samplerState && (this.__samplerState = a.clone());
            this.__samplerState.copyFrom(a);
            return !0;
          }
          return !1;
        },
        __uploadFromImage: function (a) {
          var b = this.__context.gl,
            c;
          if (this.__textureTarget == b.TEXTURE_2D) {
            if (1 == a.buffer.bitsPerPixel) var d = (c = b.ALPHA);
            else (c = Kb.__textureInternalFormat), (d = Kb.__textureFormat);
            this.__context.__bindGLTexture2D(this.__textureID);
            a.type == Nd.DATA || a.get_premultiplied()
              ? !a.get_premultiplied() &&
                a.get_transparent() &&
                b.pixelStorei(b.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1)
              : b.pixelStorei(b.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);
            a.type == Nd.DATA
              ? Sc.texImage2D(
                  b,
                  b.TEXTURE_2D,
                  0,
                  c,
                  a.buffer.width,
                  a.buffer.height,
                  0,
                  d,
                  b.UNSIGNED_BYTE,
                  a.get_data()
                )
              : Sc.texImage2D(
                  b,
                  b.TEXTURE_2D,
                  0,
                  c,
                  d,
                  b.UNSIGNED_BYTE,
                  a.get_src()
                );
            this.__context.__bindGLTexture2D(null);
          }
        },
        __class__: Kb,
      });
      var jm = function (a, b, c, d, e) {
        Kb.call(this, a);
        this.__width = this.__height = this.__size = b;
        this.__optimizeForRenderToTexture = d;
        this.__streamingLevels = e;
        this.__textureTarget = this.__context.gl.TEXTURE_CUBE_MAP;
        this.__uploadedSides = 0;
      };
      h["openfl.display3D.textures.CubeTexture"] = jm;
      jm.__name__ = "openfl.display3D.textures.CubeTexture";
      jm.__super__ = Kb;
      jm.prototype = q(Kb.prototype, {
        __getGLFramebuffer: function (a, b, c) {
          var d = this.__context.gl;
          null == this.__glFramebuffer &&
            ((this.__glFramebuffer = d.createFramebuffer()),
            (this.__framebufferSurface = -1));
          if (
            this.__framebufferSurface != c &&
            ((this.__framebufferSurface = c),
            this.__context.__bindGLFramebuffer(this.__glFramebuffer),
            d.framebufferTexture2D(
              d.FRAMEBUFFER,
              d.COLOR_ATTACHMENT0,
              d.TEXTURE_CUBE_MAP_POSITIVE_X + c,
              this.__textureID,
              0
            ),
            this.__context.__enableErrorChecking)
          ) {
            var e = d.checkFramebufferStatus(d.FRAMEBUFFER);
            e != d.FRAMEBUFFER_COMPLETE &&
              Ka.error(
                "Error: Context3D.setRenderToTexture status:" +
                  e +
                  " width:" +
                  this.__width +
                  " height:" +
                  this.__height,
                {
                  fileName: "openfl/display3D/textures/CubeTexture.hx",
                  lineNumber: 279,
                  className: "openfl.display3D.textures.CubeTexture",
                  methodName: "__getGLFramebuffer",
                }
              );
          }
          return Kb.prototype.__getGLFramebuffer.call(this, a, b, c);
        },
        __setSamplerState: function (a) {
          if (Kb.prototype.__setSamplerState.call(this, a)) {
            var b = this.__context.gl;
            2 == a.mipfilter ||
              this.__samplerState.mipmapGenerated ||
              (b.generateMipmap(b.TEXTURE_CUBE_MAP),
              (this.__samplerState.mipmapGenerated = !0));
            if (0 != xb.__glMaxTextureMaxAnisotropy) {
              switch (a.filter) {
                case 0:
                  a = 16;
                  break;
                case 1:
                  a = 2;
                  break;
                case 2:
                  a = 4;
                  break;
                case 3:
                  a = 8;
                  break;
                default:
                  a = 1;
              }
              a > xb.__glMaxTextureMaxAnisotropy &&
                (a = xb.__glMaxTextureMaxAnisotropy);
              b.texParameterf(
                b.TEXTURE_CUBE_MAP,
                xb.__glTextureMaxAnisotropy,
                a
              );
            }
            return !0;
          }
          return !1;
        },
        __class__: jm,
      });
      var Lj = function (a, b, c, d, e) {
        Kb.call(this, a);
        this.__width = b;
        this.__height = c;
        this.__optimizeForRenderToTexture = e;
        this.__textureTarget = this.__context.gl.TEXTURE_2D;
        this.uploadFromTypedArray(null);
        e && this.__getGLFramebuffer(!0, 0, 0);
      };
      h["openfl.display3D.textures.RectangleTexture"] = Lj;
      Lj.__name__ = "openfl.display3D.textures.RectangleTexture";
      Lj.__super__ = Kb;
      Lj.prototype = q(Kb.prototype, {
        uploadFromTypedArray: function (a) {
          var b = this.__context.gl;
          this.__context.__bindGLTexture2D(this.__textureID);
          Sc.texImage2D(
            b,
            this.__textureTarget,
            0,
            this.__internalFormat,
            this.__width,
            this.__height,
            0,
            this.__format,
            b.UNSIGNED_BYTE,
            a
          );
          this.__context.__bindGLTexture2D(null);
        },
        __setSamplerState: function (a) {
          if (Kb.prototype.__setSamplerState.call(this, a)) {
            var b = this.__context.gl;
            if (0 != xb.__glMaxTextureMaxAnisotropy) {
              switch (a.filter) {
                case 0:
                  a = 16;
                  break;
                case 1:
                  a = 2;
                  break;
                case 2:
                  a = 4;
                  break;
                case 3:
                  a = 8;
                  break;
                default:
                  a = 1;
              }
              a > xb.__glMaxTextureMaxAnisotropy &&
                (a = xb.__glMaxTextureMaxAnisotropy);
              b.texParameterf(b.TEXTURE_2D, xb.__glTextureMaxAnisotropy, a);
            }
            return !0;
          }
          return !1;
        },
        __class__: Lj,
      });
      var im = function (a, b, c, d, e, f) {
        Kb.call(this, a);
        this.__width = b;
        this.__height = c;
        this.__optimizeForRenderToTexture = e;
        this.__streamingLevels = f;
        a = this.__context.gl;
        this.__textureTarget = a.TEXTURE_2D;
        this.__context.__bindGLTexture2D(this.__textureID);
        Sc.texImage2D(
          a,
          this.__textureTarget,
          0,
          this.__internalFormat,
          this.__width,
          this.__height,
          0,
          this.__format,
          a.UNSIGNED_BYTE,
          null
        );
        this.__context.__bindGLTexture2D(null);
        e && this.__getGLFramebuffer(!0, 0, 0);
      };
      h["openfl.display3D.textures.Texture"] = im;
      im.__name__ = "openfl.display3D.textures.Texture";
      im.__super__ = Kb;
      im.prototype = q(Kb.prototype, {
        __setSamplerState: function (a) {
          if (Kb.prototype.__setSamplerState.call(this, a)) {
            var b = this.__context.gl;
            2 == a.mipfilter ||
              this.__samplerState.mipmapGenerated ||
              (b.generateMipmap(b.TEXTURE_2D),
              (this.__samplerState.mipmapGenerated = !0));
            if (0 != xb.__glMaxTextureMaxAnisotropy) {
              switch (a.filter) {
                case 0:
                  a = 16;
                  break;
                case 1:
                  a = 2;
                  break;
                case 2:
                  a = 4;
                  break;
                case 3:
                  a = 8;
                  break;
                default:
                  a = 1;
              }
              a > xb.__glMaxTextureMaxAnisotropy &&
                (a = xb.__glMaxTextureMaxAnisotropy);
              b.texParameterf(b.TEXTURE_2D, xb.__glTextureMaxAnisotropy, a);
            }
            return !0;
          }
          return !1;
        },
        __class__: im,
      });
      var lo = function (a) {
        Kb.call(this, a);
        this.__textureTarget = this.__context.gl.TEXTURE_2D;
      };
      h["openfl.display3D.textures.VideoTexture"] = lo;
      lo.__name__ = "openfl.display3D.textures.VideoTexture";
      lo.__super__ = Kb;
      lo.prototype = q(Kb.prototype, {
        dispose: function () {
          null != this.__netStream &&
            null != this.__netStream.__video &&
            this.__netStream.__video.removeEventListener(
              "timeupdate",
              n(this, this.__onTimeUpdate)
            );
          Kb.prototype.dispose.call(this);
        },
        __onTimeUpdate: function (a) {
          null != this.__netStream &&
            this.__netStream.__video.currentTime != this.__cacheTime &&
            2 <= this.__netStream.__video.readyState &&
            this.__textureReady();
        },
        __getTexture: function () {
          if (
            this.__netStream.__video.currentTime != this.__cacheTime &&
            2 <= this.__netStream.__video.readyState
          ) {
            var a = this.__context.gl;
            this.__context.__bindGLTexture2D(this.__textureID);
            Sc.texImage2D(
              a,
              a.TEXTURE_2D,
              0,
              a.RGBA,
              a.RGBA,
              a.UNSIGNED_BYTE,
              this.__netStream.__video
            );
            this.__cacheTime = this.__netStream.__video.currentTime;
          }
          return this.__textureID;
        },
        __textureReady: function () {
          this.videoWidth = this.__netStream.__video.videoWidth;
          this.videoHeight = this.__netStream.__video.videoHeight;
          var a = new Ba("textureReady");
          this.dispatchEvent(a);
        },
        __class__: lo,
      });
      var Cb = function (a, b) {
        null == b && (b = 0);
        null == a && (a = "");
        N.call(this, a);
        this.errorID = b;
        this.name = "Error";
        this.__skipStack++;
      };
      h["openfl.errors.Error"] = Cb;
      Cb.__name__ = "openfl.errors.Error";
      Cb.__super__ = N;
      Cb.prototype = q(N.prototype, {
        toString: function () {
          return null != this.get_message() ? this.get_message() : "Error";
        },
        __class__: Cb,
      });
      var oh = function (a) {
        null == a && (a = "");
        Cb.call(this, a);
        this.name = "ArgumentError";
        this.__skipStack++;
      };
      h["openfl.errors.ArgumentError"] = oh;
      oh.__name__ = "openfl.errors.ArgumentError";
      oh.__super__ = Cb;
      oh.prototype = q(Cb.prototype, { __class__: oh });
      var Ai = function (a) {
        null == a && (a = "");
        Cb.call(this, a);
        this.name = "IOError";
        this.__skipStack++;
      };
      h["openfl.errors.IOError"] = Ai;
      Ai.__name__ = "openfl.errors.IOError";
      Ai.__super__ = Cb;
      Ai.prototype = q(Cb.prototype, { __class__: Ai });
      var tj = function (a, b) {
        Ai.call(this, "End of file was encountered");
        this.name = "EOFError";
        this.errorID = 2030;
        this.__skipStack++;
      };
      h["openfl.errors.EOFError"] = tj;
      tj.__name__ = "openfl.errors.EOFError";
      tj.__super__ = Ai;
      tj.prototype = q(Ai.prototype, { __class__: tj });
      var sd = function (a) {
        null == a && (a = "");
        Cb.call(this, a, 0);
        this.name = "IllegalOperationError";
        this.__skipStack++;
      };
      h["openfl.errors.IllegalOperationError"] = sd;
      sd.__name__ = "openfl.errors.IllegalOperationError";
      sd.__super__ = Cb;
      sd.prototype = q(Cb.prototype, { __class__: sd });
      var Li = function (a) {
        null == a && (a = "");
        Cb.call(this, a, 0);
        this.name = "RangeError";
        this.__skipStack++;
      };
      h["openfl.errors.RangeError"] = Li;
      Li.__name__ = "openfl.errors.RangeError";
      Li.__super__ = Cb;
      Li.prototype = q(Cb.prototype, { __class__: Li });
      var Ki = function (a) {
        null == a && (a = "");
        Cb.call(this, a, 0);
        this.name = "TypeError";
        this.__skipStack++;
      };
      h["openfl.errors.TypeError"] = Ki;
      Ki.__name__ = "openfl.errors.TypeError";
      Ki.__super__ = Cb;
      Ki.prototype = q(Cb.prototype, { __class__: Ki });
      var Ba = function (a, b, c) {
        null == c && (c = !1);
        null == b && (b = !1);
        this.type = a;
        this.bubbles = b;
        this.cancelable = c;
        this.eventPhase = 2;
      };
      h["openfl.events.Event"] = Ba;
      Ba.__name__ = "openfl.events.Event";
      Ba.prototype = {
        isDefaultPrevented: function () {
          return this.__preventDefault;
        },
        preventDefault: function () {
          this.cancelable && (this.__preventDefault = !0);
        },
        stopImmediatePropagation: function () {
          this.__isCanceledNow = this.__isCanceled = !0;
        },
        stopPropagation: function () {
          this.__isCanceled = !0;
        },
        __class__: Ba,
      };
      var mm = function (a, b, c, d, e, f, g) {
        null == g && (g = 0);
        null == f && (f = 0);
        null == e && (e = 0);
        null == d && (d = 0);
        null == c && (c = !1);
        null == b && (b = !1);
        Ba.call(this, a, b, c);
        this.timestamp = d;
        this.accelerationX = e;
        this.accelerationY = f;
        this.accelerationZ = g;
      };
      h["openfl.events.AccelerometerEvent"] = mm;
      mm.__name__ = "openfl.events.AccelerometerEvent";
      mm.__super__ = Ba;
      mm.prototype = q(Ba.prototype, { __class__: mm });
      var Bi = function (a, b, c, d) {
        null == d && (d = !1);
        null == c && (c = !1);
        null == b && (b = !1);
        Ba.call(this, a, b, c);
        this.activating = d;
      };
      h["openfl.events.ActivityEvent"] = Bi;
      Bi.__name__ = "openfl.events.ActivityEvent";
      Bi.__super__ = Ba;
      Bi.prototype = q(Ba.prototype, { __class__: Bi });
      var hg = function (a, b, c, d) {
        null == d && (d = "");
        null == c && (c = !1);
        null == b && (b = !1);
        Ba.call(this, a, b, c);
        this.text = d;
      };
      h["openfl.events.TextEvent"] = hg;
      hg.__name__ = "openfl.events.TextEvent";
      hg.__super__ = Ba;
      hg.prototype = q(Ba.prototype, { __class__: hg });
      var Oe = function (a, b, c, d, e) {
        null == e && (e = 0);
        null == d && (d = "");
        null == c && (c = !1);
        null == b && (b = !1);
        hg.call(this, a, b, c, d);
        this.errorID = e;
      };
      h["openfl.events.ErrorEvent"] = Oe;
      Oe.__name__ = "openfl.events.ErrorEvent";
      Oe.__super__ = hg;
      Oe.prototype = q(hg.prototype, { __class__: Oe });
      var Ji = function (a) {
        this.active = !1;
        this.reset(a);
      };
      h["openfl.events._EventDispatcher.DispatchIterator"] = Ji;
      Ji.__name__ = "openfl.events._EventDispatcher.DispatchIterator";
      Ji.prototype = {
        copy: function () {
          this.isCopy || ((this.list = this.list.slice()), (this.isCopy = !0));
        },
        hasNext: function () {
          return this.index < this.list.length;
        },
        next: function () {
          return this.list[this.index++];
        },
        remove: function (a, b) {
          if (this.active)
            if (this.isCopy) {
              b = this.index;
              for (var c = this.list.length; b < c; ) {
                var d = b++;
                if (this.list[d] == a) {
                  this.list.splice(d, 1);
                  break;
                }
              }
            } else b < this.index && this.index--;
        },
        reset: function (a) {
          this.list = a;
          this.isCopy = !1;
          this.index = 0;
        },
        start: function () {
          this.active = !0;
        },
        stop: function () {
          this.active = !1;
        },
        __class__: Ji,
      };
      var nh = function (a, b, c, d) {
        d && nh.supportsWeakReference
          ? (this.weakRefCallback = new WeakRef(a))
          : (this.callback = a);
        this.useCapture = b;
        this.priority = c;
        this.useWeakReference = d;
      };
      h["openfl.events._EventDispatcher.Listener"] = nh;
      nh.__name__ = "openfl.events._EventDispatcher.Listener";
      nh.prototype = {
        match: function (a, b) {
          var c = this.callback;
          return null != this.weakRefCallback &&
            ((c = this.weakRefCallback.deref()), null == c)
            ? !1
            : qa.compareMethods(c, a)
            ? this.useCapture == b
            : !1;
        },
        __class__: nh,
      };
      var Fh = function (a, b, c, d, e, f) {
        null == f && (f = 0);
        null == e && (e = !1);
        null == c && (c = !1);
        null == b && (b = !1);
        Ba.call(this, a, b, c);
        this.keyCode = f;
        this.shiftKey = e;
        this.relatedObject = d;
      };
      h["openfl.events.FocusEvent"] = Fh;
      Fh.__name__ = "openfl.events.FocusEvent";
      Fh.__super__ = Ba;
      Fh.prototype = q(Ba.prototype, { __class__: Fh });
      var Hg = function (a, b, c, d, e) {
        null == e && (e = !1);
        null == d && (d = !1);
        null == c && (c = !1);
        null == b && (b = !1);
        Bi.call(this, a, b, c);
        this.fullScreen = d;
        this.interactive = e;
      };
      h["openfl.events.FullScreenEvent"] = Hg;
      Hg.__name__ = "openfl.events.FullScreenEvent";
      Hg.__super__ = Bi;
      Hg.prototype = q(Bi.prototype, { __class__: Hg });
      var ci = function (a, b, c, d) {
        null == c && (c = !1);
        null == b && (b = !0);
        Ba.call(this, a, b, c);
        this.device = d;
      };
      h["openfl.events.GameInputEvent"] = ci;
      ci.__name__ = "openfl.events.GameInputEvent";
      ci.__super__ = Ba;
      ci.prototype = q(Ba.prototype, { __class__: ci });
      var Nj = function (a, b, c, d, e) {
        null == e && (e = !1);
        null == d && (d = 0);
        null == c && (c = !1);
        null == b && (b = !1);
        this.responseHeaders = [];
        this.status = d;
        this.redirected = e;
        Ba.call(this, a, b, c);
      };
      h["openfl.events.HTTPStatusEvent"] = Nj;
      Nj.__name__ = "openfl.events.HTTPStatusEvent";
      Nj.__super__ = Ba;
      Nj.prototype = q(Ba.prototype, { __class__: Nj });
      var aj = function (a, b, c, d, e) {
        null == e && (e = 0);
        null == d && (d = "");
        null == c && (c = !1);
        null == b && (b = !0);
        Oe.call(this, a, b, c, d, e);
      };
      h["openfl.events.IOErrorEvent"] = aj;
      aj.__name__ = "openfl.events.IOErrorEvent";
      aj.__super__ = Oe;
      aj.prototype = q(Oe.prototype, { __class__: aj });
      var Ng = function (a, b, c, d, e, f, g, h, l, p, n) {
        null == n && (n = !1);
        null == p && (p = !1);
        null == l && (l = !1);
        null == h && (h = !1);
        null == g && (g = !1);
        null == e && (e = 0);
        null == d && (d = 0);
        null == c && (c = !1);
        null == b && (b = !1);
        Ba.call(this, a, b, c);
        this.charCode = d;
        this.keyCode = e;
        this.keyLocation = null != f ? f : 0;
        this.ctrlKey = g;
        this.altKey = h;
        this.shiftKey = l;
        this.controlKey = p;
        this.commandKey = n;
        this.__updateAfterEventFlag = !1;
      };
      h["openfl.events.KeyboardEvent"] = Ng;
      Ng.__name__ = "openfl.events.KeyboardEvent";
      Ng.__super__ = Ba;
      Ng.prototype = q(Ba.prototype, { __class__: Ng });
      var Gb = function (a, b, c, d, e, f, g, h, l, p, n, m, q, z) {
        null == z && (z = 0);
        null == q && (q = !1);
        null == m && (m = !1);
        null == n && (n = 0);
        null == p && (p = !1);
        null == l && (l = !1);
        null == h && (h = !1);
        null == g && (g = !1);
        null == e && (e = 0);
        null == d && (d = 0);
        null == c && (c = !1);
        null == b && (b = !0);
        Ba.call(this, a, b, c);
        this.shiftKey = l;
        this.altKey = h;
        this.ctrlKey = g;
        this.bubbles = b;
        this.relatedObject = f;
        this.delta = n;
        this.localX = d;
        this.localY = e;
        this.buttonDown = p;
        this.commandKey = m;
        this.controlKey = q;
        this.clickCount = z;
        this.isRelatedObjectInaccessible = !1;
        this.stageY = this.stageX = NaN;
        this.__updateAfterEventFlag = !1;
      };
      h["openfl.events.MouseEvent"] = Gb;
      Gb.__name__ = "openfl.events.MouseEvent";
      Gb.__create = function (a, b, c, d, e, f, g) {
        null == g && (g = 0);
        a = new Gb(
          a,
          !0,
          !1,
          e.x,
          e.y,
          null,
          Gb.__ctrlKey,
          Gb.__altKey,
          Gb.__shiftKey,
          Gb.__buttonDown,
          g,
          Gb.__commandKey,
          Gb.__controlKey
        );
        a.stageX = c;
        a.stageY = d;
        a.target = f;
        return a;
      };
      Gb.__super__ = Ba;
      Gb.prototype = q(Ba.prototype, { __class__: Gb });
      var Oj = function (a, b, c, d) {
        null == c && (c = !1);
        null == b && (b = !1);
        this.info = d;
        Ba.call(this, a, b, c);
      };
      h["openfl.events.NetStatusEvent"] = Oj;
      Oj.__name__ = "openfl.events.NetStatusEvent";
      Oj.__super__ = Ba;
      Oj.prototype = q(Ba.prototype, { __class__: Oj });
      var vi = function (a, b, c, d, e) {
        null == e && (e = 0);
        null == d && (d = 0);
        null == c && (c = !1);
        null == b && (b = !1);
        Ba.call(this, a, b, c);
        this.bytesLoaded = d;
        this.bytesTotal = e;
      };
      h["openfl.events.ProgressEvent"] = vi;
      vi.__name__ = "openfl.events.ProgressEvent";
      vi.__super__ = Ba;
      vi.prototype = q(Ba.prototype, { __class__: vi });
      var Xj = function (a, b, c, d, e, f) {
        null == f && (f = !0);
        null == c && (c = !1);
        null == b && (b = !1);
        Ba.call(this, a, b, c);
        this.objectMatrix = d;
        this.objectColorTransform = e;
        this.allowSmoothing = f;
      };
      h["openfl.events.RenderEvent"] = Xj;
      Xj.__name__ = "openfl.events.RenderEvent";
      Xj.__super__ = Ba;
      Xj.prototype = q(Ba.prototype, { __class__: Xj });
      var nm = function (a, b, c) {
        null == c && (c = !1);
        null == b && (b = !1);
        Ba.call(this, a, b, c);
        this.data = new rd(0);
        this.data.__endian = 1;
        this.position = 0;
      };
      h["openfl.events.SampleDataEvent"] = nm;
      nm.__name__ = "openfl.events.SampleDataEvent";
      nm.__super__ = Ba;
      nm.prototype = q(Ba.prototype, {
        getBufferSize: function () {
          var a =
            (rc.toFloat(dg.get_length(this.data)) / rc.toFloat(4) / 2) | 0;
          if (0 < a) {
            if (0 != a && 0 == (a & (a - 1)) && 2048 <= a && 8192 >= a)
              return (this.tempBuffer = new Float32Array(2 * a)), a;
            throw new Cb(
              "To be consistent with flash the listener function registered to SampleDataEvent has to provide 2048, 4096 or 8192 samples if targeting HTML5."
            );
          }
          return 0;
        },
        getSamples: function (a) {
          this.data.position = 0;
          this.tempBuffer = $o.fromBytes(dg.toBytes(this.data));
          this.leftChannel = a.outputBuffer.getChannelData(0);
          this.rightChannel = a.outputBuffer.getChannelData(1);
          for (
            var b = (a = 0),
              c = (rc.toFloat(dg.get_length(this.data)) / rc.toFloat(2)) | 0;
            b < c;

          ) {
            var d = b++;
            this.leftChannel[d] = this.tempBuffer[a++];
            this.rightChannel[d] = this.tempBuffer[a++];
          }
        },
        __class__: nm,
      });
      var om = function (a, b, c, d, e) {
        null == e && (e = 0);
        null == d && (d = "");
        null == c && (c = !1);
        null == b && (b = !1);
        Oe.call(this, a, b, c, d, e);
      };
      h["openfl.events.SecurityErrorEvent"] = om;
      om.__name__ = "openfl.events.SecurityErrorEvent";
      om.__super__ = Oe;
      om.prototype = q(Oe.prototype, { __class__: om });
      var Qe = function (
        a,
        b,
        c,
        d,
        e,
        f,
        g,
        h,
        l,
        p,
        n,
        m,
        q,
        z,
        t,
        w,
        x,
        D,
        y,
        A
      ) {
        null == w && (w = !1);
        null == t && (t = !1);
        null == z && (z = !1);
        null == q && (q = !1);
        null == m && (m = !1);
        null == p && (p = 0);
        null == l && (l = 0);
        null == h && (h = 0);
        null == g && (g = 0);
        null == f && (f = 0);
        null == e && (e = !1);
        null == d && (d = 0);
        null == c && (c = !1);
        null == b && (b = !0);
        Ba.call(this, a, b, c);
        this.touchPointID = d;
        this.isPrimaryTouchPoint = e;
        this.localX = f;
        this.localY = g;
        this.sizeX = h;
        this.sizeY = l;
        this.pressure = p;
        this.relatedObject = n;
        this.ctrlKey = m;
        this.altKey = q;
        this.shiftKey = z;
        this.commandKey = t;
        this.controlKey = w;
        this.stageY = this.stageX = NaN;
        this.__updateAfterEventFlag = !1;
      };
      h["openfl.events.TouchEvent"] = Qe;
      Qe.__name__ = "openfl.events.TouchEvent";
      Qe.__create = function (a, b, c, d, e, f) {
        a = new Qe(a, !0, !1, 0, !0, e.x, e.y, 1, 1, 1);
        a.stageX = c;
        a.stageY = d;
        a.target = f;
        return a;
      };
      Qe.__super__ = Ba;
      Qe.prototype = q(Ba.prototype, { __class__: Qe });
      var em = function (a, b, c, d) {
        null == c && (c = !0);
        null == b && (b = !0);
        Oe.call(this, a, b, c);
        this.error = d;
      };
      h["openfl.events.UncaughtErrorEvent"] = em;
      em.__name__ = "openfl.events.UncaughtErrorEvent";
      em.__super__ = Oe;
      em.prototype = q(Oe.prototype, { __class__: em });
      var $l = function () {
        pa.call(this);
      };
      h["openfl.events.UncaughtErrorEvents"] = $l;
      $l.__name__ = "openfl.events.UncaughtErrorEvents";
      $l.__super__ = pa;
      $l.prototype = q(pa.prototype, {
        addEventListener: function (a, b, c, d, e) {
          null == e && (e = !1);
          null == d && (d = 0);
          null == c && (c = !1);
          pa.prototype.addEventListener.call(this, a, b, c, d, e);
          Object.prototype.hasOwnProperty.call(
            this.__eventMap.h,
            "uncaughtError"
          ) && (this.__enabled = !0);
        },
        removeEventListener: function (a, b, c) {
          null == c && (c = !1);
          pa.prototype.removeEventListener.call(this, a, b, c);
          Object.prototype.hasOwnProperty.call(
            this.__eventMap.h,
            "uncaughtError"
          ) || (this.__enabled = !1);
        },
        __class__: $l,
      });
      var Fg = function () {
        this.__leftExtension = this.__bottomExtension = 0;
        this.__needSecondBitmapData = !0;
        this.__numShaderPasses = 0;
        this.__preserveObject = !1;
        this.__rightExtension = 0;
        this.__shaderBlendMode = 10;
        this.__topExtension = 0;
        this.__smooth = !0;
      };
      h["openfl.filters.BitmapFilter"] = Fg;
      Fg.__name__ = "openfl.filters.BitmapFilter";
      Fg.prototype = {
        clone: function () {
          return new Fg();
        },
        __applyFilter: function (a, b, c, d) {
          return b;
        },
        __initShader: function (a, b, c) {
          return null;
        },
        __class__: Fg,
      };
      var vc = function (a) {
        null == this.__glFragmentSource &&
          (this.__glFragmentSource =
            "varying vec2 openfl_TextureCoordv;\n\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\tgl_FragColor = texture2D (openfl_Texture, openfl_TextureCoordv);\n\n\t\t}");
        null == this.__glVertexSource &&
          (this.__glVertexSource =
            "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t}");
        Zd.call(this, a);
        this.__isGenerated = !0;
        this.__initGL();
      };
      h["openfl.filters.BitmapFilterShader"] = vc;
      vc.__name__ = "openfl.filters.BitmapFilterShader";
      vc.__super__ = Zd;
      vc.prototype = q(Zd.prototype, { __class__: vc });
      var pm = function () {
        null == this.__glFragmentSource &&
          (this.__glFragmentSource =
            "uniform sampler2D openfl_Texture;\n\n\t\tvarying vec2 vBlurCoords[7];\n\n\t\tvoid main(void) {\n\n\t\t\tvec4 sum = vec4(0.0);\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[0]) * 0.00443;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[1]) * 0.05399;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[2]) * 0.24197;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[3]) * 0.39894;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[4]) * 0.24197;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[5]) * 0.05399;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[6]) * 0.00443;\n\n\t\t\tgl_FragColor = sum;\n\n\t\t}");
        null == this.__glVertexSource &&
          (this.__glVertexSource =
            "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tuniform mat4 openfl_Matrix;\n\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vBlurCoords[7];\n\t\tuniform vec2 uTextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t\tvec2 r = uRadius / uTextureSize;\n\t\t\tvBlurCoords[0] = openfl_TextureCoord - r;\n\t\t\tvBlurCoords[1] = openfl_TextureCoord - r * 0.75;\n\t\t\tvBlurCoords[2] = openfl_TextureCoord - r * 0.5;\n\t\t\tvBlurCoords[3] = openfl_TextureCoord;\n\t\t\tvBlurCoords[4] = openfl_TextureCoord + r * 0.5;\n\t\t\tvBlurCoords[5] = openfl_TextureCoord + r * 0.75;\n\t\t\tvBlurCoords[6] = openfl_TextureCoord + r;\n\n\t\t}");
        vc.call(this);
        this.uRadius.value = [0, 0];
        this.__isGenerated = !0;
        this.__initGL();
      };
      h["openfl.filters._BlurFilter.BlurShader"] = pm;
      pm.__name__ = "openfl.filters._BlurFilter.BlurShader";
      pm.__super__ = vc;
      pm.prototype = q(vc.prototype, {
        __update: function () {
          this.uTextureSize.value = [
            this.__texture.input.width,
            this.__texture.input.height,
          ];
          vc.prototype.__update.call(this);
        },
        __class__: pm,
      });
      var uf = function (a, b, c) {
        null == c && (c = 1);
        null == b && (b = 4);
        null == a && (a = 4);
        Fg.call(this);
        this.set_blurX(a);
        this.set_blurY(b);
        this.set_quality(c);
        this.__needSecondBitmapData = !0;
        this.__preserveObject = !1;
        this.__renderDirty = !0;
      };
      h["openfl.filters.BlurFilter"] = uf;
      uf.__name__ = "openfl.filters.BlurFilter";
      uf.__super__ = Fg;
      uf.prototype = q(Fg.prototype, {
        clone: function () {
          return new uf(this.__blurX, this.__blurY, this.__quality);
        },
        __applyFilter: function (a, b, c, d) {
          new Date().getTime();
          c = jc.gaussianBlur(
            a.image,
            b.image,
            c.__toLimeRectangle(),
            d.__toLimeVector2(),
            this.__blurX,
            this.__blurY,
            this.__quality
          );
          new Date().getTime();
          return c == a.image ? a : b;
        },
        __initShader: function (a, b, c) {
          b < this.__horizontalPasses
            ? ((a = Math.pow(0.5, b >> 1)),
              (uf.__blurShader.uRadius.value[0] = this.get_blurX() * a),
              (uf.__blurShader.uRadius.value[1] = 0))
            : ((a = Math.pow(0.5, (b - this.__horizontalPasses) >> 1)),
              (uf.__blurShader.uRadius.value[0] = 0),
              (uf.__blurShader.uRadius.value[1] = this.get_blurY() * a));
          return uf.__blurShader;
        },
        get_blurX: function () {
          return this.__blurX;
        },
        set_blurX: function (a) {
          a != this.__blurX &&
            ((this.__blurX = a),
            (this.__renderDirty = !0),
            (this.__rightExtension = this.__leftExtension =
              0 < a ? Math.ceil(a) : 0));
          return a;
        },
        get_blurY: function () {
          return this.__blurY;
        },
        set_blurY: function (a) {
          a != this.__blurY &&
            ((this.__blurY = a),
            (this.__renderDirty = !0),
            (this.__bottomExtension = this.__topExtension =
              0 < a ? Math.ceil(a) : 0));
          return a;
        },
        set_quality: function (a) {
          this.__horizontalPasses =
            0 >= this.__blurX ? 0 : Math.round((a / 4) * this.__blurX) + 1;
          this.__verticalPasses =
            0 >= this.__blurY ? 0 : Math.round((a / 4) * this.__blurY) + 1;
          this.__numShaderPasses =
            this.__horizontalPasses + this.__verticalPasses;
          a != this.__quality && (this.__renderDirty = !0);
          return (this.__quality = a);
        },
        __class__: uf,
        __properties__: {
          set_quality: "set_quality",
          set_blurY: "set_blurY",
          get_blurY: "get_blurY",
          set_blurX: "set_blurX",
          get_blurX: "get_blurX",
        },
      });
      var qm = function () {
        null == this.__glFragmentSource &&
          (this.__glFragmentSource =
            "\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec4 uColor;\n\t\tuniform float uStrength;\n\t\tvarying vec2 vTexCoord;\n\t\tvarying vec2 vBlurCoords[6];\n\n\t\tvoid main(void)\n\t\t{\n            vec4 texel = texture2D(openfl_Texture, vTexCoord);\n\n            vec3 contributions = vec3(0.00443, 0.05399, 0.24197);\n            vec3 top = vec3(\n                texture2D(openfl_Texture, vBlurCoords[0]).a,\n                texture2D(openfl_Texture, vBlurCoords[1]).a,\n                texture2D(openfl_Texture, vBlurCoords[2]).a\n            );\n            vec3 bottom = vec3(\n                texture2D(openfl_Texture, vBlurCoords[3]).a,\n                texture2D(openfl_Texture, vBlurCoords[4]).a,\n                texture2D(openfl_Texture, vBlurCoords[5]).a\n            );\n\n            float a = texel.a * 0.39894;\n\t\t\ta += dot(top, contributions.xyz);\n            a += dot(bottom, contributions.zyx);\n\n\t\t\tgl_FragColor = uColor * clamp(a * uStrength, 0.0, 1.0);\n\t\t}\n\t");
        null == this.__glVertexSource &&
          (this.__glVertexSource =
            "\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vTexCoord;\n\t\tvarying vec2 vBlurCoords[6];\n\n\t\tvoid main(void) {\n\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\tvTexCoord = openfl_TextureCoord;\n\n\t\t\tvec3 offset = vec3(0.5, 0.75, 1.0);\n\t\t\tvec2 r = uRadius / openfl_TextureSize;\n\t\t\tvBlurCoords[0] = openfl_TextureCoord - r * offset.z;\n\t\t\tvBlurCoords[1] = openfl_TextureCoord - r * offset.y;\n\t\t\tvBlurCoords[2] = openfl_TextureCoord - r * offset.x;\n\t\t\tvBlurCoords[3] = openfl_TextureCoord + r * offset.x;\n\t\t\tvBlurCoords[4] = openfl_TextureCoord + r * offset.y;\n\t\t\tvBlurCoords[5] = openfl_TextureCoord + r * offset.z;\n\t\t}\n\t");
        vc.call(this);
        this.uRadius.value = [0, 0];
        this.uColor.value = [0, 0, 0, 0];
        this.uStrength.value = [1];
        this.__isGenerated = !0;
        this.__initGL();
      };
      h["openfl.filters._GlowFilter.BlurAlphaShader"] = qm;
      qm.__name__ = "openfl.filters._GlowFilter.BlurAlphaShader";
      qm.__super__ = vc;
      qm.prototype = q(vc.prototype, { __class__: qm });
      var rm = function () {
        null == this.__glFragmentSource &&
          (this.__glFragmentSource =
            "\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform sampler2D sourceBitmap;\n\t\tvarying vec4 textureCoords;\n\n\t\tvoid main(void) {\n\t\t\tvec4 src = texture2D(sourceBitmap, textureCoords.xy);\n\t\t\tvec4 glow = texture2D(openfl_Texture, textureCoords.zw);\n\n\t\t\tgl_FragColor = glow * (1.0 - src.a);\n\t\t}\n\t");
        null == this.__glVertexSource &&
          (this.__glVertexSource =
            "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform vec2 offset;\n\t\tvarying vec4 textureCoords;\n\n\t\tvoid main(void) {\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\ttextureCoords = vec4(openfl_TextureCoord, openfl_TextureCoord - offset / openfl_TextureSize);\n\t\t}\n\t");
        vc.call(this);
        this.offset.value = [0, 0];
        this.__isGenerated = !0;
        this.__initGL();
      };
      h["openfl.filters._GlowFilter.CombineKnockoutShader"] = rm;
      rm.__name__ = "openfl.filters._GlowFilter.CombineKnockoutShader";
      rm.__super__ = vc;
      rm.prototype = q(vc.prototype, { __class__: rm });
      var sm = function () {
        null == this.__glFragmentSource &&
          (this.__glFragmentSource =
            "\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform sampler2D sourceBitmap;\n\t\tvarying vec4 textureCoords;\n\n\t\tvoid main(void) {\n\t\t\tvec4 src = texture2D(sourceBitmap, textureCoords.xy);\n\t\t\tvec4 glow = texture2D(openfl_Texture, textureCoords.zw);\n\n\t\t\tgl_FragColor = src + glow * (1.0 - src.a);\n\t\t}\n\t");
        null == this.__glVertexSource &&
          (this.__glVertexSource =
            "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform vec2 offset;\n\t\tvarying vec4 textureCoords;\n\n\t\tvoid main(void) {\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\ttextureCoords = vec4(openfl_TextureCoord, openfl_TextureCoord - offset / openfl_TextureSize);\n\t\t}\n\t");
        vc.call(this);
        this.offset.value = [0, 0];
        this.__isGenerated = !0;
        this.__initGL();
      };
      h["openfl.filters._GlowFilter.CombineShader"] = sm;
      sm.__name__ = "openfl.filters._GlowFilter.CombineShader";
      sm.__super__ = vc;
      sm.prototype = q(vc.prototype, { __class__: sm });
      var tm = function () {
        null == this.__glFragmentSource &&
          (this.__glFragmentSource =
            "\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform sampler2D sourceBitmap;\n\t\tvarying vec4 textureCoords;\n\n\t\tvoid main(void) {\n\t\t\tvec4 src = texture2D(sourceBitmap, textureCoords.xy);\n\t\t\tvec4 glow = texture2D(openfl_Texture, textureCoords.zw);\n\n\t\t\tgl_FragColor = glow * src.a;\n\t\t}\n\t");
        null == this.__glVertexSource &&
          (this.__glVertexSource =
            "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform vec2 offset;\n\t\tvarying vec4 textureCoords;\n\n\t\tvoid main(void) {\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\ttextureCoords = vec4(openfl_TextureCoord, openfl_TextureCoord - offset / openfl_TextureSize);\n\t\t}\n\t");
        vc.call(this);
        this.offset.value = [0, 0];
        this.__isGenerated = !0;
        this.__initGL();
      };
      h["openfl.filters._GlowFilter.InnerCombineKnockoutShader"] = tm;
      tm.__name__ = "openfl.filters._GlowFilter.InnerCombineKnockoutShader";
      tm.__super__ = vc;
      tm.prototype = q(vc.prototype, { __class__: tm });
      var um = function () {
        null == this.__glFragmentSource &&
          (this.__glFragmentSource =
            "\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform sampler2D sourceBitmap;\n\t\tvarying vec4 textureCoords;\n\n\t\tvoid main(void) {\n\t\t\tvec4 src = texture2D(sourceBitmap, textureCoords.xy);\n\t\t\tvec4 glow = texture2D(openfl_Texture, textureCoords.zw);\n\n\t\t\tgl_FragColor = vec4((src.rgb * (1.0 - glow.a)) + (glow.rgb * src.a), src.a);\n\t\t}\n\t");
        null == this.__glVertexSource &&
          (this.__glVertexSource =
            "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform vec2 offset;\n\t\tvarying vec4 textureCoords;\n\n\t\tvoid main(void) {\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\ttextureCoords = vec4(openfl_TextureCoord, openfl_TextureCoord - offset / openfl_TextureSize);\n\t\t}\n\t");
        vc.call(this);
        this.offset.value = [0, 0];
        this.__isGenerated = !0;
        this.__initGL();
      };
      h["openfl.filters._GlowFilter.InnerCombineShader"] = um;
      um.__name__ = "openfl.filters._GlowFilter.InnerCombineShader";
      um.__super__ = vc;
      um.prototype = q(vc.prototype, { __class__: um });
      var vm = function () {
        null == this.__glFragmentSource &&
          (this.__glFragmentSource =
            "\n\t\tuniform sampler2D openfl_Texture;\n\t\tvarying vec2 vTexCoord;\n\n\t\tvoid main(void) {\n\t\t\tvec4 texel = texture2D(openfl_Texture, vTexCoord);\n\t\t\tgl_FragColor = vec4(texel.rgb, 1.0 - texel.a);\n\t\t}\n\t");
        null == this.__glVertexSource &&
          (this.__glVertexSource =
            "\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\tuniform mat4 openfl_Matrix;\n\t\tvarying vec2 vTexCoord;\n\n\t\tvoid main(void) {\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\tvTexCoord = openfl_TextureCoord;\n\t\t}\n\t");
        vc.call(this);
        this.__isGenerated = !0;
        this.__initGL();
      };
      h["openfl.filters._GlowFilter.InvertAlphaShader"] = vm;
      vm.__name__ = "openfl.filters._GlowFilter.InvertAlphaShader";
      vm.__super__ = vc;
      vm.prototype = q(vc.prototype, { __class__: vm });
      var Xd = function (a, b, c, d, e, f, g, h) {
        null == h && (h = !1);
        null == g && (g = !1);
        null == f && (f = 1);
        null == e && (e = 2);
        null == d && (d = 6);
        null == c && (c = 6);
        null == b && (b = 1);
        null == a && (a = 16711680);
        Fg.call(this);
        this.__color = a;
        this.__alpha = b;
        this.__blurX = c;
        this.__blurY = d;
        this.__strength = e;
        this.__inner = g;
        this.__knockout = h;
        this.__quality = f;
        this.__updateSize();
        this.__renderDirty =
          this.__preserveObject =
          this.__needSecondBitmapData =
            !0;
      };
      h["openfl.filters.GlowFilter"] = Xd;
      Xd.__name__ = "openfl.filters.GlowFilter";
      Xd.__super__ = Fg;
      Xd.prototype = q(Fg.prototype, {
        clone: function () {
          return new Xd(
            this.__color,
            this.__alpha,
            this.__blurX,
            this.__blurY,
            this.__strength,
            this.__quality,
            this.__inner,
            this.__knockout
          );
        },
        __applyFilter: function (a, b, c, d) {
          var e = (this.__color >> 16) & 255,
            f = (this.__color >> 8) & 255,
            g = this.__color & 255;
          c = jc.gaussianBlur(
            a.image,
            b.image,
            c.__toLimeRectangle(),
            d.__toLimeVector2(),
            this.__blurX,
            this.__blurY,
            this.__quality,
            this.__strength
          );
          c.colorTransform(
            c.get_rect(),
            new Qb(0, 0, 0, this.__alpha, e, f, g, 0).__toLimeColorMatrix()
          );
          return c == a.image ? a : b;
        },
        __initShader: function (a, b, c) {
          if (this.__inner && 0 == b) return Xd.__invertAlphaShader;
          a = b - (this.__inner ? 1 : 0);
          b = this.__horizontalPasses + this.__verticalPasses;
          if (a < b) {
            var d = Xd.__blurAlphaShader;
            a < this.__horizontalPasses
              ? ((c = 0.5 * Math.pow(0.5, a >> 1)),
                (d.uRadius.value[0] = this.get_blurX() * c),
                (d.uRadius.value[1] = 0))
              : ((c = 0.5 * Math.pow(0.5, (a - this.__horizontalPasses) >> 1)),
                (d.uRadius.value[0] = 0),
                (d.uRadius.value[1] = this.get_blurY() * c));
            d.uColor.value[0] = ((this.get_color() >> 16) & 255) / 255;
            d.uColor.value[1] = ((this.get_color() >> 8) & 255) / 255;
            d.uColor.value[2] = (this.get_color() & 255) / 255;
            d.uColor.value[3] = this.get_alpha();
            d.uStrength.value[0] = a == b - 1 ? this.__strength : 1;
            return d;
          }
          if (this.__inner) {
            if (this.__knockout)
              return (
                (d = Xd.__innerCombineKnockoutShader),
                (d.sourceBitmap.input = c),
                (d.offset.value[0] = 0),
                (d.offset.value[1] = 0),
                d
              );
            d = Xd.__innerCombineShader;
          } else {
            if (this.__knockout)
              return (
                (d = Xd.__combineKnockoutShader),
                (d.sourceBitmap.input = c),
                (d.offset.value[0] = 0),
                (d.offset.value[1] = 0),
                d
              );
            d = Xd.__combineShader;
          }
          d.sourceBitmap.input = c;
          d.offset.value[0] = 0;
          d.offset.value[1] = 0;
          return d;
        },
        __updateSize: function () {
          this.__rightExtension = this.__leftExtension =
            0 < this.__blurX ? Math.ceil(1.5 * this.__blurX) : 0;
          this.__bottomExtension = this.__topExtension =
            0 < this.__blurY ? Math.ceil(1.5 * this.__blurY) : 0;
          this.__calculateNumShaderPasses();
        },
        __calculateNumShaderPasses: function () {
          this.__horizontalPasses =
            0 >= this.__blurX
              ? 0
              : Math.round((this.__quality / 4) * this.__blurX) + 1;
          this.__verticalPasses =
            0 >= this.__blurY
              ? 0
              : Math.round((this.__quality / 4) * this.__blurY) + 1;
          this.__numShaderPasses =
            this.__horizontalPasses +
            this.__verticalPasses +
            (this.__inner ? 2 : 1);
        },
        get_alpha: function () {
          return this.__alpha;
        },
        get_blurX: function () {
          return this.__blurX;
        },
        get_blurY: function () {
          return this.__blurY;
        },
        get_color: function () {
          return this.__color;
        },
        __class__: Xd,
        __properties__: {
          get_color: "get_color",
          get_blurY: "get_blurY",
          get_blurX: "get_blurX",
          get_alpha: "get_alpha",
        },
      });
      var fm = function (a) {
        null != a && 16 == a.get_length()
          ? (this.rawData = a.concat(null))
          : (this.rawData = ja.toFloatVector(
              null,
              null,
              null,
              [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]
            ));
      };
      h["openfl.geom.Matrix3D"] = fm;
      fm.__name__ = "openfl.geom.Matrix3D";
      fm.prototype = {
        append: function (a) {
          var b = this.rawData.get(0),
            c = this.rawData.get(4),
            d = this.rawData.get(8),
            e = this.rawData.get(12),
            f = this.rawData.get(1),
            g = this.rawData.get(5),
            h = this.rawData.get(9),
            l = this.rawData.get(13),
            p = this.rawData.get(2),
            n = this.rawData.get(6),
            m = this.rawData.get(10),
            q = this.rawData.get(14),
            z = this.rawData.get(3),
            t = this.rawData.get(7),
            w = this.rawData.get(11),
            x = this.rawData.get(15),
            D = a.rawData.get(0),
            y = a.rawData.get(4),
            A = a.rawData.get(8),
            C = a.rawData.get(12),
            E = a.rawData.get(1),
            G = a.rawData.get(5),
            v = a.rawData.get(9),
            F = a.rawData.get(13),
            B = a.rawData.get(2),
            K = a.rawData.get(6),
            I = a.rawData.get(10),
            U = a.rawData.get(14),
            M = a.rawData.get(3),
            O = a.rawData.get(7),
            Z = a.rawData.get(11);
          a = a.rawData.get(15);
          this.rawData.set(0, b * D + f * y + p * A + z * C);
          this.rawData.set(1, b * E + f * G + p * v + z * F);
          this.rawData.set(2, b * B + f * K + p * I + z * U);
          this.rawData.set(3, b * M + f * O + p * Z + z * a);
          this.rawData.set(4, c * D + g * y + n * A + t * C);
          this.rawData.set(5, c * E + g * G + n * v + t * F);
          this.rawData.set(6, c * B + g * K + n * I + t * U);
          this.rawData.set(7, c * M + g * O + n * Z + t * a);
          this.rawData.set(8, d * D + h * y + m * A + w * C);
          this.rawData.set(9, d * E + h * G + m * v + w * F);
          this.rawData.set(10, d * B + h * K + m * I + w * U);
          this.rawData.set(11, d * M + h * O + m * Z + w * a);
          this.rawData.set(12, e * D + l * y + q * A + x * C);
          this.rawData.set(13, e * E + l * G + q * v + x * F);
          this.rawData.set(14, e * B + l * K + q * I + x * U);
          this.rawData.set(15, e * M + l * O + q * Z + x * a);
        },
        appendTranslation: function (a, b, c) {
          var d = this.rawData;
          d.set(12, d.get(12) + a);
          d = this.rawData;
          d.set(13, d.get(13) + b);
          d = this.rawData;
          d.set(14, d.get(14) + c);
        },
        copyRawDataFrom: function (a, b, c) {
          null == c && (c = !1);
          null == b && (b = 0);
          c && this.transpose();
          for (var d = 0, e = a.get_length() - b; d < e; ) {
            var f = d++;
            this.rawData.set(f, a.get(f + b));
          }
          c && this.transpose();
        },
        identity: function () {
          this.rawData = ja.toFloatVector(
            null,
            null,
            null,
            [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]
          );
        },
        transpose: function () {
          var a = this.rawData.copy();
          this.rawData.set(1, a.get(4));
          this.rawData.set(2, a.get(8));
          this.rawData.set(3, a.get(12));
          this.rawData.set(4, a.get(1));
          this.rawData.set(6, a.get(9));
          this.rawData.set(7, a.get(13));
          this.rawData.set(8, a.get(2));
          this.rawData.set(9, a.get(6));
          this.rawData.set(11, a.get(14));
          this.rawData.set(12, a.get(3));
          this.rawData.set(13, a.get(7));
          this.rawData.set(14, a.get(11));
        },
        __class__: fm,
      };
      var Yj = function (a) {
        this.__colorTransform = new Qb();
        this.concatenatedColorTransform = new Qb();
        this.pixelBounds = new ha();
        this.__displayObject = a;
        this.__hasMatrix = !0;
      };
      h["openfl.geom.Transform"] = Yj;
      Yj.__name__ = "openfl.geom.Transform";
      Yj.prototype = {
        get_colorTransform: function () {
          return this.__colorTransform.__clone();
        },
        set_colorTransform: function (a) {
          this.__colorTransform.__equals(a, !1) ||
            (this.__colorTransform.__copyFrom(a),
            null != a && this.__displayObject.set_alpha(a.alphaMultiplier),
            (a = this.__displayObject),
            a.__renderDirty ||
              ((a.__renderDirty = !0), a.__setParentRenderDirty()));
          return this.__colorTransform;
        },
        get_matrix: function () {
          return this.__hasMatrix
            ? this.__displayObject.__transform.clone()
            : null;
        },
        set_matrix: function (a) {
          if (null == a) return (this.__hasMatrix = !1), null;
          this.__hasMatrix = !0;
          this.__hasMatrix3D = !1;
          null != this.__displayObject &&
            this.__setTransform(a.a, a.b, a.c, a.d, a.tx, a.ty);
          return a;
        },
        __setTransform: function (a, b, c, d, e, f) {
          if (null != this.__displayObject) {
            var g = this.__displayObject.__transform;
            if (
              g.a != a ||
              g.b != b ||
              g.c != c ||
              g.d != d ||
              g.tx != e ||
              g.ty != f
            ) {
              var h = 0 == b ? a : Math.sqrt(a * a + b * b);
              var l = 0 == c ? d : Math.sqrt(c * c + d * d);
              this.__displayObject.__scaleX = h;
              this.__displayObject.__scaleY = l;
              h = (180 / Math.PI) * Math.atan2(d, c) - 90;
              h != this.__displayObject.__rotation &&
                ((this.__displayObject.__rotation = h),
                (h *= Math.PI / 180),
                (this.__displayObject.__rotationSine = Math.sin(h)),
                (this.__displayObject.__rotationCosine = Math.cos(h)));
              g.a = a;
              g.b = b;
              g.c = c;
              g.d = d;
              g.tx = e;
              g.ty = f;
              this.__displayObject.__setTransformDirty();
            }
          }
        },
        __class__: Yj,
        __properties__: {
          set_matrix: "set_matrix",
          get_matrix: "get_matrix",
          set_colorTransform: "set_colorTransform",
          get_colorTransform: "get_colorTransform",
        },
      };
      var mn = function () {};
      h["openfl.media.ID3Info"] = mn;
      mn.__name__ = "openfl.media.ID3Info";
      mn.prototype = { __class__: mn };
      var Hk = function (a, b, c) {
        this.__firstRun = !0;
        pa.call(this, this);
        this.__sound = a;
        this.rightPeak = this.leftPeak = 1;
        this.__soundTransform = null != c ? c : new tg();
        this.__initAudioSource(b);
        de.__registerSoundChannel(this);
      };
      h["openfl.media.SoundChannel"] = Hk;
      Hk.__name__ = "openfl.media.SoundChannel";
      Hk.__super__ = pa;
      Hk.prototype = q(pa.prototype, {
        stop: function () {
          de.__unregisterSoundChannel(this);
          this.__isValid &&
            (null != this.__processor &&
              (this.__processor.disconnect(),
              (this.__processor = this.__processor.onaudioprocess = null)),
            this.__audioSource.stop(),
            this.__dispose());
        },
        __dispose: function () {
          this.__isValid &&
            (this.__audioSource.onComplete.remove(
              n(this, this.audioSource_onComplete)
            ),
            this.__audioSource.dispose(),
            (this.__audioSource = null),
            (this.__isValid = !1));
        },
        __startSampleData: function () {
          var a = this,
            b = this.__sound.__webAudioContext;
          if (null != b) {
            this.__sampleDataEvent = new nm("sampleData");
            this.__sound.dispatchEvent(this.__sampleDataEvent);
            var c = this.__sampleDataEvent.getBufferSize();
            0 == c
              ? sa.setTimeout(function () {
                  a.stop();
                  a.dispatchEvent(new Ba("soundComplete"));
                }, 1)
              : ((this.__processor = b.createScriptProcessor(c, 0, 2)),
                this.__processor.connect(b.destination),
                (this.__processor.onaudioprocess = n(this, this.onSample)),
                b.resume());
          }
        },
        __updateTransform: function () {
          this.set_soundTransform(this.get_soundTransform());
        },
        __initAudioSource: function (a) {
          this.__audioSource = a;
          null != this.__audioSource &&
            (this.__audioSource.onComplete.add(
              n(this, this.audioSource_onComplete)
            ),
            (this.__isValid = !0),
            this.__audioSource.play());
        },
        get_position: function () {
          return this.__isValid
            ? this.__audioSource.get_currentTime() + this.__audioSource.offset
            : 0;
        },
        set_position: function (a) {
          if (!this.__isValid) return 0;
          this.__audioSource.set_currentTime(
            (a | 0) - this.__audioSource.offset
          );
          return a;
        },
        get_soundTransform: function () {
          return this.__soundTransform.clone();
        },
        set_soundTransform: function (a) {
          if (null != a) {
            this.__soundTransform.pan = a.pan;
            this.__soundTransform.volume = a.volume;
            var b = de.__soundTransform.pan + this.__soundTransform.pan;
            -1 > b && (b = -1);
            1 < b && (b = 1);
            var c = de.__soundTransform.volume * this.__soundTransform.volume;
            this.__isValid &&
              (this.__audioSource.set_gain(c),
              (c = this.__audioSource.get_position()),
              (c.x = b),
              (c.z = -1 * Math.sqrt(1 - Math.pow(b, 2))),
              this.__audioSource.set_position(c));
          }
          return a;
        },
        audioSource_onComplete: function () {
          de.__unregisterSoundChannel(this);
          this.__dispose();
          this.dispatchEvent(new Ba("soundComplete"));
        },
        onSample: function (a) {
          if (this.__firstRun) {
            var b = !0;
            this.__firstRun = !1;
          } else
            dg.set_length(this.__sampleDataEvent.data, 0),
              this.__sound.dispatchEvent(this.__sampleDataEvent),
              (b = rc.gt(dg.get_length(this.__sampleDataEvent.data), 0));
          b
            ? this.__sampleDataEvent.getSamples(a)
            : (this.stop(), this.dispatchEvent(new Ba("soundComplete")));
        },
        __class__: Hk,
        __properties__: {
          set_soundTransform: "set_soundTransform",
          get_soundTransform: "get_soundTransform",
          set_position: "set_position",
          get_position: "get_position",
        },
      });
      var Uo = function () {};
      h["openfl.media.SoundLoaderContext"] = Uo;
      Uo.__name__ = "openfl.media.SoundLoaderContext";
      var tg = function (a, b) {
        null == b && (b = 0);
        null == a && (a = 1);
        this.volume = a;
        this.pan = b;
        this.rightToRight =
          this.rightToLeft =
          this.leftToRight =
          this.leftToLeft =
            0;
      };
      h["openfl.media.SoundTransform"] = tg;
      tg.__name__ = "openfl.media.SoundTransform";
      tg.prototype = {
        clone: function () {
          return new tg(this.volume, this.pan);
        },
        __class__: tg,
      };
      var de = function () {};
      h["openfl.media.SoundMixer"] = de;
      de.__name__ = "openfl.media.SoundMixer";
      de.__registerSoundChannel = function (a) {
        de.__soundChannels.push(a);
      };
      de.__unregisterSoundChannel = function (a) {
        X.remove(de.__soundChannels, a);
      };
      var kk = function (a, b) {
        null == b && (b = 240);
        null == a && (a = 320);
        z.call(this);
        this.__drawableType = 8;
        this.__width = a;
        this.__height = b;
        this.__textureTime = -1;
        this.smoothing = !1;
        this.deblocking = 0;
      };
      h["openfl.media.Video"] = kk;
      kk.__name__ = "openfl.media.Video";
      kk.__super__ = z;
      kk.prototype = q(z.prototype, {
        attachNetStream: function (a) {
          this.__stream = a;
          null == this.__stream ||
            null == this.__stream.__video ||
            this.__stream.__closed ||
            this.__stream.__video.play();
        },
        __enterFrame: function (a) {
          this.__renderable &&
            null != this.__stream &&
            !this.__renderDirty &&
            ((this.__renderDirty = !0), this.__setParentRenderDirty());
        },
        __getBounds: function (a, b) {
          var c = ha.__pool.get();
          c.setTo(0, 0, this.__width, this.__height);
          c.__transform(c, b);
          a.__expand(c.x, c.y, c.width, c.height);
          ha.__pool.release(c);
        },
        __getIndexBuffer: function (a) {
          if (
            null == this.__indexBuffer ||
            this.__indexBufferContext != a.__context
          )
            (this.__indexBufferData = new Uint16Array(6)),
              (this.__indexBufferData[0] = 0),
              (this.__indexBufferData[1] = 1),
              (this.__indexBufferData[2] = 2),
              (this.__indexBufferData[3] = 2),
              (this.__indexBufferData[4] = 1),
              (this.__indexBufferData[5] = 3),
              (this.__indexBufferContext = a.__context),
              (this.__indexBuffer = a.createIndexBuffer(6)),
              this.__indexBuffer.uploadFromTypedArray(this.__indexBufferData);
          return this.__indexBuffer;
        },
        __getTexture: function (a) {
          if (null == this.__stream || null == this.__stream.__video)
            return null;
          var b = a.__context.webgl,
            c = b.RGBA,
            d = b.RGBA;
          this.__stream.__closed ||
            this.__stream.__video.currentTime == this.__textureTime ||
            (null == this.__texture &&
              (this.__texture = a.createRectangleTexture(
                this.__stream.__video.videoWidth,
                this.__stream.__video.videoHeight,
                1,
                !1
              )),
            a.__bindGLTexture2D(this.__texture.__textureID),
            Sc.texImage2D(
              b,
              b.TEXTURE_2D,
              0,
              c,
              d,
              b.UNSIGNED_BYTE,
              this.__stream.__video
            ),
            (this.__textureTime = this.__stream.__video.currentTime));
          return this.__texture;
        },
        __getVertexBuffer: function (a) {
          if (
            null == this.__vertexBuffer ||
            this.__vertexBufferContext != a.__context ||
            this.__currentWidth != this.get_width() ||
            this.__currentHeight != this.get_height()
          )
            (this.__currentWidth = this.get_width()),
              (this.__currentHeight = this.get_height()),
              (this.__vertexBufferData = new Float32Array(20)),
              (this.__vertexBufferData[0] = this.get_width()),
              (this.__vertexBufferData[1] = this.get_height()),
              (this.__vertexBufferData[3] = 1),
              (this.__vertexBufferData[4] = 1),
              (this.__vertexBufferData[6] = this.get_height()),
              (this.__vertexBufferData[9] = 1),
              (this.__vertexBufferData[10] = this.get_width()),
              (this.__vertexBufferData[13] = 1),
              (this.__vertexBufferContext = a.__context),
              (this.__vertexBuffer = a.createVertexBuffer(3, 5)),
              this.__vertexBuffer.uploadFromTypedArray(
                bj.toArrayBufferView(this.__vertexBufferData)
              );
          return this.__vertexBuffer;
        },
        __hitTest: function (a, b, c, d, e, f) {
          if (
            !f.get_visible() ||
            this.__isMask ||
            (null != this.get_mask() && !this.get_mask().__hitTestMask(a, b))
          )
            return !1;
          this.__getRenderTransform();
          var g = this.__renderTransform,
            h = g.a * g.d - g.b * g.c;
          c = 0 == h ? -g.tx : (1 / h) * (g.c * (g.ty - b) + g.d * (a - g.tx));
          g = this.__renderTransform;
          h = g.a * g.d - g.b * g.c;
          a = 0 == h ? -g.ty : (1 / h) * (g.a * (b - g.ty) + g.b * (g.tx - a));
          return 0 < c && 0 < a && c <= this.__width && a <= this.__height
            ? (null == d || e || d.push(f), !0)
            : !1;
        },
        __hitTestMask: function (a, b) {
          var c = gb.__pool.get();
          c.setTo(a, b);
          this.__globalToLocal(c, c);
          a = 0 < c.x && 0 < c.y && c.x <= this.__width && c.y <= this.__height;
          gb.__pool.release(c);
          return a;
        },
        get_height: function () {
          return this.__height * this.get_scaleY();
        },
        set_height: function (a) {
          if (1 != this.get_scaleY() || a != this.__height)
            this.__setTransformDirty(), (this.__dirty = !0);
          this.set_scaleY(1);
          return (this.__height = a);
        },
        get_width: function () {
          return this.__width * this.__scaleX;
        },
        set_width: function (a) {
          if (1 != this.__scaleX || this.__width != a)
            this.__setTransformDirty(), (this.__dirty = !0);
          this.set_scaleX(1);
          return (this.__width = a);
        },
        __class__: kk,
      });
      var Uh = function (a, b, c) {
        this.description = a;
        this.extension = b;
        this.macType = c;
      };
      h["openfl.net.FileFilter"] = Uh;
      Uh.__name__ = "openfl.net.FileFilter";
      Uh.prototype = { __class__: Uh };
      var oe = function () {
        pa.call(this);
        this.__inputControl = window.document.createElement("input");
        this.__inputControl.setAttribute("type", "file");
        this.__inputControl.onclick = function (a) {
          a.cancelBubble = !0;
          a.stopPropagation();
        };
      };
      h["openfl.net.FileReference"] = oe;
      oe.__name__ = "openfl.net.FileReference";
      oe.__super__ = pa;
      oe.prototype = q(pa.prototype, {
        browse: function (a) {
          var b = this,
            c = (this.__path = this.__data = null);
          if (null != a) {
            c = [];
            for (var d = 0; d < a.length; ) {
              var e = a[d];
              ++d;
              c.push(K.replace(K.replace(e.extension, "*.", "."), ";", ","));
            }
            c = c.join(",");
          }
          null != c
            ? this.__inputControl.setAttribute("accept", c)
            : this.__inputControl.removeAttribute("accept");
          this.__inputControl.onchange = function () {
            if (0 == b.__inputControl.files.length)
              b.dispatchEvent(new Ba("cancel"));
            else {
              var a = b.__inputControl.files[0],
                c = new Date(a.lastModified);
              b.modificationDate = c;
              b.creationDate = b.get_modificationDate();
              b.size = a.size;
              c = Hd.extension(a.name);
              b.type = "." + c;
              b.name = Hd.withoutDirectory(a.name);
              b.__path = a.name;
              b.dispatchEvent(new Ba("select"));
            }
          };
          this.__inputControl.click();
          return !0;
        },
        save: function (a, b) {
          this.__path = this.__data = null;
          null != a &&
            (a instanceof rd
              ? (this.__data = a)
              : ((this.__data = new rd(0)),
                this.__data.writeUTFBytes(M.string(a))),
            (a = new ao()),
            a.onCancel.add(n(this, this.saveFileDialog_onCancel)),
            a.onSave.add(n(this, this.saveFileDialog_onSave)),
            a.save(this.__data, null != b ? Hd.extension(b) : null, b));
        },
        saveFileDialog_onCancel: function () {
          this.dispatchEvent(new Ba("cancel"));
        },
        saveFileDialog_onSave: function (a) {
          var b = this;
          yg.delay(function () {
            b.dispatchEvent(new Ba("complete"));
          }, 1);
        },
        get_modificationDate: function () {
          return this.modificationDate;
        },
        __class__: oe,
        __properties__: { get_modificationDate: "get_modificationDate" },
      });
      var lk = function () {
        pa.call(this);
      };
      h["openfl.net.NetConnection"] = lk;
      lk.__name__ = "openfl.net.NetConnection";
      lk.__super__ = pa;
      lk.prototype = q(pa.prototype, {
        connect: function (a, b, c, d, e, f) {
          if (null != a)
            throw N.thrown('Error: Can only connect in "HTTP streaming" mode');
          this.dispatchEvent(
            new Oj("netStatus", !1, !0, {
              code: "NetConnection.Connect.Success",
            })
          );
        },
        __class__: lk,
      });
      var mk = function (a, b) {
        pa.call(this);
        this.__connection = a;
        this.__soundTransform = new tg();
        this.__video = window.document.createElement("video");
        this.__video.setAttribute("playsinline", "");
        this.__video.setAttribute("webkit-playsinline", "");
        this.__video.setAttribute("crossorigin", "anonymous");
        this.__video.addEventListener("error", n(this, this.video_onError), !1);
        this.__video.addEventListener(
          "waiting",
          n(this, this.video_onWaiting),
          !1
        );
        this.__video.addEventListener("ended", n(this, this.video_onEnd), !1);
        this.__video.addEventListener("pause", n(this, this.video_onPause), !1);
        this.__video.addEventListener(
          "seeking",
          n(this, this.video_onSeeking),
          !1
        );
        this.__video.addEventListener(
          "playing",
          n(this, this.video_onPlaying),
          !1
        );
        this.__video.addEventListener(
          "timeupdate",
          n(this, this.video_onTimeUpdate),
          !1
        );
        this.__video.addEventListener(
          "loadstart",
          n(this, this.video_onLoadStart),
          !1
        );
        this.__video.addEventListener(
          "stalled",
          n(this, this.video_onStalled),
          !1
        );
        this.__video.addEventListener(
          "durationchanged",
          n(this, this.video_onDurationChanged),
          !1
        );
        this.__video.addEventListener(
          "canplay",
          n(this, this.video_onCanPlay),
          !1
        );
        this.__video.addEventListener(
          "canplaythrough",
          n(this, this.video_onCanPlayThrough),
          !1
        );
        this.__video.addEventListener(
          "loadedmetadata",
          n(this, this.video_onLoadMetaData),
          !1
        );
      };
      h["openfl.net.NetStream"] = mk;
      mk.__name__ = "openfl.net.NetStream";
      mk.__super__ = pa;
      mk.prototype = q(pa.prototype, {
        close: function () {
          null != this.__video &&
            ((this.__closed = !0),
            this.__video.pause(),
            (this.__video.src = ""),
            (this.time = 0));
        },
        dispose: function () {
          this.close();
          this.__video = null;
        },
        play: function (a, b, c, d, e, f) {
          null != this.__video &&
            ((this.__video.volume =
              de.__soundTransform.volume * this.__soundTransform.volume),
            "string" == typeof a
              ? (this.__video.src = a)
              : (this.__video.srcObject = a),
            this.__video.play());
        },
        __dispatchStatus: function (a) {
          a = new Oj("netStatus", !1, !1, { code: a });
          this.__connection.dispatchEvent(a);
          this.dispatchEvent(a);
        },
        __playStatus: function (a) {
          if (null != this.__video && null != this.client)
            try {
              var b = this.client.onPlayStatus;
              b({
                code: a,
                duration: this.__video.duration,
                position: this.__video.currentTime,
                speed: this.__video.playbackRate,
                start: this.__video.startTime,
              });
            } catch (c) {}
        },
        video_onCanPlay: function (a) {
          this.__playStatus("NetStream.Play.canplay");
        },
        video_onCanPlayThrough: function (a) {
          this.__playStatus("NetStream.Play.canplaythrough");
        },
        video_onDurationChanged: function (a) {
          this.__playStatus("NetStream.Play.durationchanged");
        },
        video_onEnd: function (a) {
          this.__dispatchStatus("NetStream.Play.Stop");
          this.__dispatchStatus("NetStream.Play.Complete");
          this.__playStatus("NetStream.Play.Complete");
        },
        video_onError: function (a) {
          this.__dispatchStatus("NetStream.Play.Stop");
          this.__playStatus("NetStream.Play.error");
        },
        video_onLoadMetaData: function (a) {
          if (null != this.__video && null != this.client)
            try {
              var b = this.client.onMetaData;
              b({
                width: this.__video.videoWidth,
                height: this.__video.videoHeight,
                duration: this.__video.duration,
              });
            } catch (c) {}
        },
        video_onLoadStart: function (a) {
          this.__playStatus("NetStream.Play.loadstart");
        },
        video_onPause: function (a) {
          this.__playStatus("NetStream.Play.pause");
        },
        video_onPlaying: function (a) {
          this.__dispatchStatus("NetStream.Play.Start");
          this.__playStatus("NetStream.Play.playing");
        },
        video_onSeeking: function (a) {
          this.__playStatus("NetStream.Play.seeking");
          this.__dispatchStatus("NetStream.Seek.Complete");
        },
        video_onStalled: function (a) {
          this.__playStatus("NetStream.Play.stalled");
        },
        video_onTimeUpdate: function (a) {
          null != this.__video &&
            ((this.time = this.__video.currentTime),
            this.__playStatus("NetStream.Play.timeupdate"));
        },
        video_onWaiting: function (a) {
          this.__playStatus("NetStream.Play.waiting");
        },
        __class__: mk,
      });
      var mo = function (a) {
        pa.call(this);
        this.bytesTotal = this.bytesLoaded = 0;
        this.dataFormat = 1;
        null != a && this.load(a);
      };
      h["openfl.net.URLLoader"] = mo;
      mo.__name__ = "openfl.net.URLLoader";
      mo.__super__ = pa;
      mo.prototype = q(pa.prototype, {
        load: function (a) {
          var b = this,
            c = new Ba("open");
          this.dispatchEvent(c);
          0 == this.dataFormat
            ? ((c = new Nl()),
              this.__prepareRequest(c, a),
              c
                .load()
                .onProgress(n(this, this.httpRequest_onProgress))
                .onError(n(this, this.httpRequest_onError))
                .onComplete(function (a) {
                  b.__dispatchResponseStatus();
                  b.__dispatchStatus();
                  b.data = a;
                  a = new Ba("complete");
                  b.dispatchEvent(a);
                }))
            : ((c = new si()),
              this.__prepareRequest(c, a),
              c
                .load()
                .onProgress(n(this, this.httpRequest_onProgress))
                .onError(n(this, this.httpRequest_onError))
                .onComplete(function (a) {
                  b.__dispatchResponseStatus();
                  b.__dispatchStatus();
                  b.data = a;
                  a = new Ba("complete");
                  b.dispatchEvent(a);
                }));
        },
        __dispatchResponseStatus: function () {
          var a = new Nj(
            "httpResponseStatus",
            !1,
            !1,
            this.__httpRequest.responseStatus
          );
          a.responseURL = this.__httpRequest.uri;
          var b = [];
          if (
            this.__httpRequest.enableResponseHeaders &&
            null != this.__httpRequest.responseHeaders
          )
            for (
              var c = 0, d = this.__httpRequest.responseHeaders;
              c < d.length;

            ) {
              var e = d[c];
              ++c;
              b.push(new no(e.name, e.value));
            }
          a.responseHeaders = b;
          this.dispatchEvent(a);
        },
        __dispatchStatus: function () {
          var a = new Nj(
            "httpStatus",
            !1,
            !1,
            this.__httpRequest.responseStatus
          );
          this.dispatchEvent(a);
        },
        __prepareRequest: function (a, b) {
          this.__httpRequest = a;
          this.__httpRequest.uri = b.url;
          this.__httpRequest.method = b.method;
          if (null != b.data)
            if (zb.typeof(b.data) == Lc.TObject) {
              var c = qa.fields(b.data);
              for (a = 0; a < c.length; ) {
                var d = c[a];
                ++a;
                this.__httpRequest.formData.h[d] = qa.field(b.data, d);
              }
            } else
              this.__httpRequest.data =
                b.data instanceof Nb ? b.data : Nb.ofString(M.string(b.data));
          this.__httpRequest.contentType = b.contentType;
          if (null != b.requestHeaders)
            for (a = 0, c = b.requestHeaders; a < c.length; )
              (d = c[a]),
                ++a,
                this.__httpRequest.headers.push(new Gl(d.name, d.value));
          this.__httpRequest.followRedirects = b.followRedirects;
          this.__httpRequest.timeout = b.idleTimeout | 0;
          this.__httpRequest.manageCookies = b.manageCookies;
          this.__httpRequest.userAgent = b.userAgent;
          this.__httpRequest.enableResponseHeaders = !0;
        },
        httpRequest_onError: function (a) {
          this.__dispatchResponseStatus();
          this.__dispatchStatus();
          this.__httpRequest instanceof fh
            ? (this.data = this.__httpRequest.responseData)
            : this.__httpRequest instanceof si &&
              (this.data = this.__httpRequest.responseData);
          var b = 403 == a ? new om("securityError") : new aj("ioError");
          b.text = M.string(a);
          this.dispatchEvent(b);
        },
        httpRequest_onProgress: function (a, b) {
          var c = new vi("progress");
          c.bytesLoaded = a;
          c.bytesTotal = b;
          this.dispatchEvent(c);
        },
        __class__: mo,
      });
      var Oi = function (a) {
        null != a && (this.url = a);
        this.contentType = null;
        this.followRedirects = jh.followRedirects;
        this.idleTimeout = 0 < jh.idleTimeout ? jh.idleTimeout : 3e4;
        this.manageCookies = jh.manageCookies;
        this.method = "GET";
        this.requestHeaders = [];
        this.userAgent = jh.userAgent;
      };
      h["openfl.net.URLRequest"] = Oi;
      Oi.__name__ = "openfl.net.URLRequest";
      Oi.prototype = { __class__: Oi };
      var jh = function () {};
      h["openfl.net.URLRequestDefaults"] = jh;
      jh.__name__ = "openfl.net.URLRequestDefaults";
      var no = function (a, b) {
        null == b && (b = "");
        null == a && (a = "");
        this.name = a;
        this.value = b;
      };
      h["openfl.net.URLRequestHeader"] = no;
      no.__name__ = "openfl.net.URLRequestHeader";
      no.prototype = { __class__: no };
      var ac = function () {
        pa.call(this);
        ac.initialize();
        this.__interval = 0;
        this.__muted = !1;
        this.setRequestedUpdateInterval(ac.defaultInterval);
      };
      h["openfl.sensors.Accelerometer"] = ac;
      ac.__name__ = "openfl.sensors.Accelerometer";
      ac.__properties__ = { get_isSupported: "get_isSupported" };
      ac.initialize = function () {
        if (!ac.initialized) {
          var a = xe.getSensors(po.ACCELEROMETER);
          0 < a.length &&
            (a[0].onUpdate.add(ac.accelerometer_onUpdate), (ac.supported = !0));
          ac.initialized = !0;
        }
      };
      ac.accelerometer_onUpdate = function (a, b, c) {
        ac.currentX = a;
        ac.currentY = b;
        ac.currentZ = c;
      };
      ac.get_isSupported = function () {
        ac.initialize();
        return ac.supported;
      };
      ac.__super__ = pa;
      ac.prototype = q(pa.prototype, {
        addEventListener: function (a, b, c, d, e) {
          null == e && (e = !1);
          null == d && (d = 0);
          null == c && (c = !1);
          pa.prototype.addEventListener.call(this, a, b, c, d, e);
          this.update();
        },
        setRequestedUpdateInterval: function (a) {
          this.__interval = a;
          if (0 > this.__interval) throw new oh();
          0 == this.__interval && (this.__interval = ac.defaultInterval);
          null != this.__timer && (this.__timer.stop(), (this.__timer = null));
          ac.supported &&
            !this.get_muted() &&
            ((this.__timer = new yg(this.__interval)),
            (this.__timer.run = n(this, this.update)));
        },
        update: function () {
          var a = new mm("update");
          a.timestamp = new Date().getTime() / 1e3;
          a.accelerationX = ac.currentX;
          a.accelerationY = ac.currentY;
          a.accelerationZ = ac.currentZ;
          this.dispatchEvent(a);
        },
        get_muted: function () {
          return this.__muted;
        },
        __class__: ac,
        __properties__: { get_muted: "get_muted" },
      });
      var ui = function (a) {
        this.parentDomain = null != a ? a : ui.currentDomain;
      };
      h["openfl.system.ApplicationDomain"] = ui;
      ui.__name__ = "openfl.system.ApplicationDomain";
      ui.prototype = { __class__: ui };
      var eo = function () {};
      h["openfl.system.System"] = eo;
      eo.__name__ = "openfl.system.System";
      eo.__properties__ = { get_totalMemory: "get_totalMemory" };
      eo.get_totalMemory = function () {
        return window.performance && window.performance.memory
          ? window.performance.memory.usedJSHeapSize
          : 0;
      };
      var oo = function () {
        pa.call(this);
        this.clear();
      };
      h["openfl.text.StyleSheet"] = oo;
      oo.__name__ = "openfl.text.StyleSheet";
      oo.__super__ = pa;
      oo.prototype = q(pa.prototype, {
        clear: function () {
          this.__styleNamesDirty = !1;
          this.__styleNames = null;
          this.__styles = new Q();
        },
        __applyStyle: function (a, b) {
          a = a.toLowerCase();
          Object.prototype.hasOwnProperty.call(this.__styles.h, a) &&
            this.__applyStyleObject(this.__styles.h[a], b);
        },
        __applyStyleObject: function (a, b) {
          if (null != a) {
            var c = new ya("[0-9A-Fa-f]+", ""),
              d = new ya("[0-9]+", "");
            var e = a;
            null != e && Object.prototype.hasOwnProperty.call(e, "color")
              ? ((e = af.__get(a, "color")),
                (e = c.match(null == e ? null : M.string(e))))
              : (e = !1);
            e && (b.color = M.parseInt("0x" + c.matched(0)));
            e = a;
            null != e &&
              Object.prototype.hasOwnProperty.call(e, "fontFamily") &&
              ((e = af.__get(a, "fontFamily")),
              (b.font = this.__parseFont(null == e ? null : M.string(e))));
            e = a;
            null != e && Object.prototype.hasOwnProperty.call(e, "fontSize")
              ? ((e = af.__get(a, "fontSize")),
                (e = d.match(null == e ? null : M.string(e))))
              : (e = !1);
            e && (b.size = M.parseInt(d.matched(0)));
            e = a;
            if (
              null != e &&
              Object.prototype.hasOwnProperty.call(e, "fontStyle")
            )
              switch (af.__get(a, "fontStyle")) {
                case "italic":
                  b.italic = !0;
                  break;
                case "normal":
                  b.italic = !1;
              }
            e = a;
            if (
              null != e &&
              Object.prototype.hasOwnProperty.call(e, "fontWeight")
            )
              switch (af.__get(a, "fontWeight")) {
                case "bold":
                  b.bold = !0;
                  break;
                case "normal":
                  b.bold = !1;
              }
            e = a;
            null != e && Object.prototype.hasOwnProperty.call(e, "leading")
              ? ((e = af.__get(a, "leading")),
                (e = d.match(null == e ? null : M.string(e))))
              : (e = !1);
            e && (b.leading = M.parseInt(d.matched(0)));
            e = a;
            null != e &&
            Object.prototype.hasOwnProperty.call(e, "letterSpacing")
              ? ((e = af.__get(a, "letterSpacing")),
                (e = d.match(null == e ? null : M.string(e))))
              : (e = !1);
            e && (b.letterSpacing = parseFloat(d.matched(0)));
            e = a;
            null != e && Object.prototype.hasOwnProperty.call(e, "marginLeft")
              ? ((e = af.__get(a, "marginLeft")),
                (e = d.match(null == e ? null : M.string(e))))
              : (e = !1);
            e && (b.leftMargin = M.parseInt(d.matched(0)));
            e = a;
            null != e && Object.prototype.hasOwnProperty.call(e, "marginRight")
              ? ((e = af.__get(a, "marginRight")),
                (e = d.match(null == e ? null : M.string(e))))
              : (e = !1);
            e && (b.rightMargin = M.parseInt(d.matched(0)));
            e = a;
            if (
              null != e &&
              Object.prototype.hasOwnProperty.call(e, "textAlign")
            )
              switch (af.__get(a, "textAlign")) {
                case "center":
                  b.align = 0;
                  break;
                case "justify":
                  b.align = 2;
                  break;
                case "left":
                  b.align = 3;
                  break;
                case "right":
                  b.align = 4;
              }
            e = a;
            if (
              null != e &&
              Object.prototype.hasOwnProperty.call(e, "textDecoration")
            )
              switch (af.__get(a, "textDecoration")) {
                case "none":
                  b.underline = !1;
                  break;
                case "underline":
                  b.underline = !0;
              }
            e = a;
            null != e && Object.prototype.hasOwnProperty.call(e, "textIndent")
              ? ((e = af.__get(a, "textIndent")),
                (e = d.match(null == e ? null : M.string(e))))
              : (e = !1);
            e && (b.blockIndent = M.parseInt(d.matched(0)));
          }
        },
        __parseFont: function (a) {
          if (null == a) return null;
          -1 < a.indexOf(",") && (a = X.substr(a, 0, a.indexOf(",")));
          switch (a) {
            case "mono":
              return "_typewriter";
            case "sans-serif":
              return "_sans";
            case "serif":
              return "_serif";
            default:
              return a;
          }
        },
        __class__: oo,
      });
      var id = function (a, b, c, d, e, f, g, h, l, p, n, m, q) {
        this.font = a;
        this.size = b;
        this.color = c;
        this.bold = d;
        this.italic = e;
        this.underline = f;
        this.url = g;
        this.target = h;
        this.align = l;
        this.leftMargin = p;
        this.rightMargin = n;
        this.indent = m;
        this.leading = q;
      };
      h["openfl.text.TextFormat"] = id;
      id.__name__ = "openfl.text.TextFormat";
      id.prototype = {
        clone: function () {
          var a = new id(
            this.font,
            this.size,
            this.color,
            this.bold,
            this.italic,
            this.underline,
            this.url,
            this.target
          );
          a.align = this.align;
          a.leftMargin = this.leftMargin;
          a.rightMargin = this.rightMargin;
          a.indent = this.indent;
          a.leading = this.leading;
          a.blockIndent = this.blockIndent;
          a.bullet = this.bullet;
          a.kerning = this.kerning;
          a.letterSpacing = this.letterSpacing;
          a.tabStops = this.tabStops;
          a.__ascent = this.__ascent;
          a.__descent = this.__descent;
          a.__cacheKey = this.__toCacheKey();
          return a;
        },
        __merge: function (a) {
          null != a.font && (this.font = a.font);
          null != a.size && (this.size = a.size);
          null != a.color && (this.color = a.color);
          null != a.bold && (this.bold = a.bold);
          null != a.italic && (this.italic = a.italic);
          null != a.underline && (this.underline = a.underline);
          null != a.url && (this.url = a.url);
          null != a.target && (this.target = a.target);
          null != a.align && (this.align = a.align);
          null != a.leftMargin && (this.leftMargin = a.leftMargin);
          null != a.rightMargin && (this.rightMargin = a.rightMargin);
          null != a.indent && (this.indent = a.indent);
          null != a.leading && (this.leading = a.leading);
          null != a.blockIndent && (this.blockIndent = a.blockIndent);
          null != a.bullet && (this.bullet = a.bullet);
          null != a.kerning && (this.kerning = a.kerning);
          null != a.letterSpacing && (this.letterSpacing = a.letterSpacing);
          null != a.tabStops && (this.tabStops = a.tabStops);
          null != a.__ascent && (this.__ascent = a.__ascent);
          null != a.__descent && (this.__descent = a.__descent);
          this.__toCacheKey();
        },
        __toCacheKey: function () {
          return (this.__cacheKey =
            "" +
            this.font +
            this.size +
            M.string(this.bold) +
            M.string(this.italic));
        },
        __class__: id,
      };
      var fp = {
          fromString: function (a) {
            switch (a) {
              case "center":
                return 0;
              case "end":
                return 1;
              case "justify":
                return 2;
              case "left":
                return 3;
              case "right":
                return 4;
              case "start":
                return 5;
              default:
                return null;
            }
          },
        },
        Pj = function (a, b) {
          this.__collisions = [];
          this.__wordMap = new kc();
          this.set(a, b);
        };
      h["openfl.text._internal.CacheMeasurement"] = Pj;
      Pj.__name__ = "openfl.text._internal.CacheMeasurement";
      Pj.prototype = {
        set: function (a, b) {
          this.__addCollision(a, b);
        },
        get: function (a) {
          return 1 < this.__collisions.length
            ? this.__wordMap.h[this.__collisions.indexOf(a)]
            : this.__wordMap.h[0];
        },
        __addCollision: function (a, b) {
          if (!this.exists(a)) {
            var c = this.__wordMap;
            a = this.__collisions.push(a) - 1;
            c.h[a] = b;
          }
        },
        exists: function (a) {
          return 0 == this.__collisions.length
            ? !1
            : -1 < this.__collisions.indexOf(a);
        },
        __class__: Pj,
      };
      var Ma = function () {};
      h["openfl.text._internal.HTMLParser"] = Ma;
      Ma.__name__ = "openfl.text._internal.HTMLParser";
      Ma.parse = function (a, b, c, d, e) {
        a = b
          ? a.replace(Ma.__regexBreakTag.r, "\n")
          : a.replace(Ma.__regexBreakTag.r, "");
        a = a.replace(Ma.__regexEntities[5].r, " ");
        a = Ma.__regexCharEntity.map(a, function (a) {
          var b = a.matched(1),
            c = a.matched(2);
          return null != b && ((b = M.parseInt(b)), null != b)
            ? String.fromCodePoint(b)
            : null != c && ((c = M.parseInt("0" + c)), null != c)
            ? String.fromCodePoint(c)
            : a.matched(0);
        });
        var f = a.split("<");
        if (1 == f.length) {
          a = K.htmlUnescape(a.replace(Ma.__regexHTMLTag.r, ""));
          if (1 < e.get_length()) {
            var g = e.get_length() - 1,
              h = [];
            e.__tempIndex = 1;
            for (var l = 0; l < h.length; ) {
              var p = h[l++];
              e.insertAt(e.__tempIndex, p);
              e.__tempIndex++;
            }
            e.splice(e.__tempIndex, g);
          }
          b = e.get(0);
          b.format = d;
          b.start = 0;
          b.end = a.length;
        } else {
          g = e.get_length();
          h = [];
          for (l = e.__tempIndex = 0; l < h.length; )
            (p = h[l++]), e.insertAt(e.__tempIndex, p), e.__tempIndex++;
          e.splice(e.__tempIndex, g);
          a = "";
          g = [d.clone()];
          l = [];
          p = !1;
          for (h = 0; h < f.length; ) {
            var n = f[h];
            ++h;
            if ("" != n) {
              var m = "/" == X.substr(n, 0, 1),
                q = n.indexOf(">"),
                z = q + 1,
                t = n.indexOf(" ");
              t = n.substring(m ? 1 : 0, -1 < t && t < q ? t : q).toLowerCase();
              if (m)
                0 != l.length &&
                  t == l[l.length - 1] &&
                  (l.pop(),
                  g.pop(),
                  (m = g[g.length - 1].clone()),
                  ("p" == t || "li" == t) &&
                    0 < e.get_length() &&
                    (b && (a += "\n"), (p = !0)),
                  z < n.length &&
                    ((p = K.htmlUnescape(X.substr(n, z, null))),
                    e.push(new Vd(m, a.length, a.length + p.length)),
                    (a += p),
                    (p = !1)));
              else if (((m = g[g.length - 1].clone()), -1 < q)) {
                null != c &&
                  (c.__applyStyle(t, m),
                  Ma.__regexClass.match(n) &&
                    (c.__applyStyle(
                      "." + Ma.__getAttributeMatch(Ma.__regexClass),
                      m
                    ),
                    c.__applyStyle(
                      t + "." + Ma.__getAttributeMatch(Ma.__regexClass),
                      m
                    )));
                switch (t) {
                  case "a":
                    null != c && c.__applyStyle("a:link", m);
                    Ma.__regexHref.match(n) &&
                      (m.url = Ma.__getAttributeMatch(Ma.__regexHref));
                    break;
                  case "b":
                    m.bold = !0;
                    break;
                  case "em":
                  case "i":
                    m.italic = !0;
                    break;
                  case "font":
                    Ma.__regexFace.match(n) &&
                      (m.font = Ma.__getAttributeMatch(Ma.__regexFace));
                    Ma.__regexColor.match(n) &&
                      (m.color = M.parseInt(
                        "0x" + Ma.__getAttributeMatch(Ma.__regexColor)
                      ));
                    if (Ma.__regexSize.match(n)) {
                      q = Ma.__getAttributeMatch(Ma.__regexSize);
                      var w = X.cca(q, 0);
                      m.size =
                        43 == w || 45 == w
                          ? (2 <= g.length ? g[g.length - 2] : d).size +
                            M.parseInt(q)
                          : M.parseInt(q);
                    }
                    break;
                  case "li":
                    0 < e.get_length() && !p && (a += "\n");
                    q = m.clone();
                    q.underline = !1;
                    e.push(new Vd(q, a.length, a.length + 2));
                    a += "\u2022 ";
                    break;
                  case "p":
                    0 < e.get_length() && !p && (a += "\n");
                    Ma.__regexAlign.match(n) &&
                      ((q = Ma.__getAttributeMatch(
                        Ma.__regexAlign
                      ).toLowerCase()),
                      (m.align = fp.fromString(q)));
                    break;
                  case "textformat":
                    Ma.__regexBlockIndent.match(n) &&
                      (m.blockIndent = M.parseInt(
                        Ma.__getAttributeMatch(Ma.__regexBlockIndent)
                      ));
                    Ma.__regexIndent.match(n) &&
                      (m.indent = M.parseInt(
                        Ma.__getAttributeMatch(Ma.__regexIndent)
                      ));
                    Ma.__regexLeading.match(n) &&
                      (m.leading = M.parseInt(
                        Ma.__getAttributeMatch(Ma.__regexLeading)
                      ));
                    Ma.__regexLeftMargin.match(n) &&
                      (m.leftMargin = M.parseInt(
                        Ma.__getAttributeMatch(Ma.__regexLeftMargin)
                      ));
                    Ma.__regexRightMargin.match(n) &&
                      (m.rightMargin = M.parseInt(
                        Ma.__getAttributeMatch(Ma.__regexRightMargin)
                      ));
                    if (Ma.__regexTabStops.match(n)) {
                      q = Ma.__getAttributeMatch(Ma.__regexTabStops).split(" ");
                      w = [];
                      for (var x = 0; x < q.length; ) {
                        var D = q[x];
                        ++x;
                        w.push(M.parseInt(D));
                      }
                      m.tabStops = w;
                    }
                    break;
                  case "u":
                    m.underline = !0;
                }
                g.push(m);
                l.push(t);
                z < n.length &&
                  ((p = K.htmlUnescape(n.substring(z))),
                  e.push(new Vd(m, a.length, a.length + p.length)),
                  (a += p),
                  (p = !1));
              } else
                (p = K.htmlUnescape(n)),
                  e.push(new Vd(m, a.length, a.length + p.length)),
                  (a += p),
                  (p = !1);
            }
          }
          0 == e.get_length() && e.push(new Vd(g[0], 0, 0));
        }
        return a;
      };
      Ma.__getAttributeMatch = function (a) {
        return null != a.matched(2) ? a.matched(2) : a.matched(3);
      };
      var Ci = function () {
        this.__shortWordMap = new Q();
        this.__longWordMap = new Q();
      };
      h["openfl.text._internal.ShapeCache"] = Ci;
      Ci.__name__ = "openfl.text._internal.ShapeCache";
      Ci.hashFunction = function (a) {
        for (var b = 0, c, d = 0, e = a.length; d < e; )
          (c = d++), (c = X.cca(a, c)), (b = (b << 5) - b + c), (b |= 0);
        return b;
      };
      Ci.prototype = {
        cache: function (a, b, c) {
          a = a.format.__cacheKey;
          return 15 < c.length
            ? this.__cacheLongWord(c, a, b)
            : this.__cacheShortWord(c, a, b);
        },
        __cacheShortWord: function (a, b, c) {
          if (Object.prototype.hasOwnProperty.call(this.__shortWordMap.h, b)) {
            var d = this.__shortWordMap.h[b];
            if (Object.prototype.hasOwnProperty.call(d.h, a)) return d.h[a];
            var e = c();
            d.h[a] = e;
          } else
            (d = new Q()),
              (e = c()),
              (d.h[a] = e),
              (this.__shortWordMap.h[b] = d);
          return c();
        },
        __cacheLongWord: function (a, b, c) {
          var d = Ci.hashFunction(a);
          if (Object.prototype.hasOwnProperty.call(this.__longWordMap.h, b)) {
            var e = this.__longWordMap.h[b];
            if (e.h.hasOwnProperty(d)) {
              var f = e.h[d];
              if (f.exists(a)) return f.get(a);
              f.set(a, c());
            } else (f = new Pj(a, c())), (e.h[d] = f);
          } else
            (e = new kc()),
              (f = new Pj(a, c())),
              (f.hash = d),
              (e.h[d] = f),
              (this.__longWordMap.h[b] = e);
          return c();
        },
        __class__: Ci,
      };
      var Vb = function (a) {
        this.__shapeCache = new Ci();
        this.textField = a;
        this.height = this.width = 100;
        this.set_text("");
        this.bounds = new ha(0, 0, 0, 0);
        this.textBounds = new ha(0, 0, 0, 0);
        this.type = 0;
        this.autoSize = 2;
        this.embedFonts = !1;
        this.selectable = !0;
        this.borderColor = 0;
        this.border = !1;
        this.backgroundColor = 16777215;
        this.background = !1;
        this.gridFitType = 1;
        this.maxChars = 0;
        this.multiline = !1;
        this.numLines = 1;
        this.scrollH = this.sharpness = 0;
        this.set_scrollV(1);
        this.wordWrap = !1;
        this.lineAscents = ja.toFloatVector(null);
        this.lineBreaks = ja.toIntVector(null);
        this.lineDescents = ja.toFloatVector(null);
        this.lineLeadings = ja.toFloatVector(null);
        this.lineHeights = ja.toFloatVector(null);
        this.lineWidths = ja.toFloatVector(null);
        this.layoutGroups = ja.toObjectVector(null);
        this.textFormatRanges = ja.toObjectVector(null);
        null == Vb.__context &&
          (Vb.__context = window.document
            .createElement("canvas")
            .getContext("2d"));
      };
      h["openfl.text._internal.TextEngine"] = Vb;
      Vb.__name__ = "openfl.text._internal.TextEngine";
      Vb.findFont = function (a) {
        return Sb.__fontByName.h[a];
      };
      Vb.findFontVariant = function (a) {
        var b = a.font,
          c = a.bold;
        a = a.italic;
        null == b && (b = "_serif");
        var d = K.replace(K.replace(b, " Normal", ""), " Regular", "");
        return c &&
          a &&
          Object.prototype.hasOwnProperty.call(
            Sb.__fontByName.h,
            d + " Bold Italic"
          )
          ? Vb.findFont(d + " Bold Italic")
          : c &&
            Object.prototype.hasOwnProperty.call(Sb.__fontByName.h, d + " Bold")
          ? Vb.findFont(d + " Bold")
          : a &&
            Object.prototype.hasOwnProperty.call(
              Sb.__fontByName.h,
              d + " Italic"
            )
          ? Vb.findFont(d + " Italic")
          : Vb.findFont(b);
      };
      Vb.getFormatHeight = function (a) {
        var b = Vb.getFont(a);
        Vb.__context.font = b;
        b = Vb.getFontInstance(a);
        if (null != a.__ascent) {
          var c = a.size * a.__ascent;
          b = a.size * a.__descent;
        } else
          null != b && 0 != b.unitsPerEM
            ? ((c = (b.ascender / b.unitsPerEM) * a.size),
              (b = Math.abs((b.descender / b.unitsPerEM) * a.size)))
            : ((c = a.size), (b = 0.185 * a.size));
        return c + b + a.leading;
      };
      Vb.getFont = function (a) {
        var b = a.font,
          c = a.bold,
          d = a.italic;
        null == b && (b = "_serif");
        var e = K.replace(K.replace(b, " Normal", ""), " Regular", "");
        c &&
        d &&
        Object.prototype.hasOwnProperty.call(
          Sb.__fontByName.h,
          e + " Bold Italic"
        )
          ? ((b = e + " Bold Italic"), (d = c = !1))
          : c &&
            Object.prototype.hasOwnProperty.call(Sb.__fontByName.h, e + " Bold")
          ? ((b = e + " Bold"), (c = !1))
          : d &&
            Object.prototype.hasOwnProperty.call(
              Sb.__fontByName.h,
              e + " Italic"
            )
          ? ((b = e + " Italic"), (d = !1))
          : (c &&
              (-1 < b.indexOf(" Bold ") || K.endsWith(b, " Bold")) &&
              (c = !1),
            d &&
              (-1 < b.indexOf(" Italic ") || K.endsWith(b, " Italic")) &&
              (d = !1));
        c = (d ? "italic " : "normal ") + "normal " + (c ? "bold " : "normal ");
        c += a.size + "px";
        c += "/" + (a.size + 3) + "px ";
        switch (b) {
          case "_sans":
            a = "sans-serif";
            break;
          case "_serif":
            a = "serif";
            break;
          case "_typewriter":
            a = "monospace";
            break;
          default:
            a = "'" + b.replace(/^[\s'"]+(.*)[\s'"]+$/, "$1") + "'";
        }
        return (c += "" + a);
      };
      Vb.getFontInstance = function (a) {
        return Vb.findFontVariant(a);
      };
      Vb.prototype = {
        getBounds: function () {
          var a = this.border ? 1 : 0;
          this.bounds.width = this.width + a;
          this.bounds.height = this.height + a;
          a = this.width;
          for (
            var b = this.height,
              c = this.layoutGroups.get_length() - 1,
              d = 0,
              e = this.layoutGroups.get_length();
            d < e;

          ) {
            var f = d++,
              g = this.layoutGroups.get(f);
            if (f != c || g.startIndex != g.endIndex || 1 == this.type)
              g.offsetX < a && (a = g.offsetX),
                g.offsetY < b && (b = g.offsetY);
          }
          a >= this.width && (a = 2);
          b >= this.height && (b = 2);
          this.textBounds.setTo(
            Math.max(a - 2, 0),
            Math.max(b - 2, 0),
            Math.min(this.textWidth + 4, this.bounds.width + 4),
            Math.min(1.185 * this.textHeight + 4, this.bounds.height + 4)
          );
        },
        getLineBreaks: function () {
          this.lineBreaks.set_length(0);
          for (var a = -1, b; a < this.text.length; )
            if (
              ((b = this.text.indexOf("\n", a + 1)),
              (a = this.text.indexOf("\r", a + 1)),
              (a = -1 == a ? b : -1 == b ? a : a < b ? a : b),
              -1 < a)
            )
              this.lineBreaks.push(a);
            else break;
        },
        getLineMeasurements: function () {
          this.lineAscents.set_length(0);
          this.lineDescents.set_length(0);
          this.lineLeadings.set_length(0);
          this.lineHeights.set_length(0);
          this.lineWidths.set_length(0);
          var a = 0,
            b = 0,
            c = null,
            d = 0,
            e = 0;
          this.textHeight = this.textWidth = 0;
          this.numLines = 1;
          this.maxScrollH = 0;
          for (
            var f = this.layoutGroups.get_length() - 1,
              g = 0,
              h = this.layoutGroups.get_length();
            g < h;

          ) {
            var l = g++;
            var p = this.layoutGroups.get(l);
            if (l != f || p.startIndex != p.endIndex || 1 == this.type) {
              for (; p.lineIndex > this.numLines - 1; )
                this.lineAscents.push(a),
                  this.lineDescents.push(b),
                  this.lineLeadings.push(null != c ? c : 0),
                  this.lineHeights.push(d),
                  this.lineWidths.push(e),
                  (b = a = 0),
                  (c = null),
                  (e = d = 0),
                  this.numLines++;
              a = Math.max(a, p.ascent);
              b = Math.max(b, p.descent);
              c = null == c ? p.leading : Math.max(c, p.leading) | 0;
              d = Math.max(d, p.height);
              e = p.offsetX - 2 + p.width;
              e > this.textWidth && (this.textWidth = e);
              l = Math.ceil(p.offsetY - 2 + p.ascent + p.descent);
              l > this.textHeight && (this.textHeight = l);
            }
          }
          0 == this.textHeight &&
            null != this.textField &&
            1 == this.type &&
            ((a = this.textField.__textFormat),
            (b = Vb.getFontInstance(a)),
            null != a.__ascent
              ? ((f = a.size * a.__ascent), (g = a.size * a.__descent))
              : null != b && 0 != b.unitsPerEM
              ? ((f = (b.ascender / b.unitsPerEM) * a.size),
                (g = Math.abs((b.descender / b.unitsPerEM) * a.size)))
              : ((f = a.size), (g = 0.185 * a.size)),
            (c = a.leading),
            (a = f),
            (b = g),
            (this.textHeight = l = Math.ceil(f + g)));
          this.lineAscents.push(a);
          this.lineDescents.push(b);
          this.lineLeadings.push(null != c ? c : 0);
          this.lineHeights.push(d);
          this.lineWidths.push(e);
          1 == this.numLines && 0 < c && (this.textHeight += c);
          if (2 != this.autoSize)
            switch (this.autoSize) {
              case 0:
              case 1:
              case 3:
                this.wordWrap || (this.width = this.textWidth + 4),
                  (this.height = this.textHeight + 4),
                  (this.bottomScrollV = this.numLines);
            }
          this.maxScrollH =
            this.textWidth > this.width - 4
              ? (this.textWidth - this.width + 4) | 0
              : 0;
          this.scrollH > this.maxScrollH && (this.scrollH = this.maxScrollH);
        },
        getLayoutGroups: function () {
          var a = this;
          this.layoutGroups.set_length(0);
          if (null != this.text && "" != this.text) {
            var b = -1,
              c = null,
              d = null,
              e = Kc.__defaultTextFormat.clone(),
              f = 0,
              g = 0,
              h = 0,
              l = 0,
              p = 3,
              n = 0,
              m = 0,
              q = 0,
              z = 0,
              t = !0,
              w = null,
              x = null,
              D = 0,
              y = 0,
              A = 0,
              C = -2,
              E = -1,
              G = this.text.indexOf(" "),
              v = 0,
              F =
                v < this.lineBreaks.get_length() ? this.lineBreaks.get(v) : -1,
              B = 0,
              K = 0,
              I = 0,
              U = 0,
              M = function (b, d, f) {
                var g = function () {
                  var c = [];
                  if (null == a.__useIntAdvances) {
                    var e = new ya("Trident/7.0", "");
                    a.__useIntAdvances = e.match(H.navigator.userAgent);
                  }
                  if (a.__useIntAdvances) {
                    var g = 0;
                    e = d;
                    for (var k = f; e < k; ) {
                      var l = e++;
                      l = a.measureText(b.substring(d, l + 1));
                      c.push(l - g);
                      g = l;
                    }
                  } else
                    for (e = d, k = f; e < k; )
                      (l = e++),
                        l < b.length - 1
                          ? ((g = a.measureText(b.charAt(l + 1))),
                            (g = a.measureText(X.substr(b, l, 2)) - g))
                          : (g = Vb.__context.measureText(b.charAt(l)).width),
                        c.push(g);
                  return c;
                };
                return 2 == e.align
                  ? g()
                  : a.__shapeCache.cache(c, g, b.substring(d, f));
              },
              O = function (a) {
                for (var b = 0, c = 0; c < a.length; ) {
                  var d = a[c];
                  ++c;
                  b += d;
                }
                return b;
              },
              Z = function () {
                return 2 + q + n + (t ? m : 0);
              },
              N = function () {
                return a.width - 2 - z - Z();
              },
              Ha = function (b, d) {
                null == w || w.startIndex != w.endIndex
                  ? ((w = new wm(c.format, b, d)), a.layoutGroups.push(w))
                  : ((w.format = c.format),
                    (w.startIndex = b),
                    (w.endIndex = d));
              },
              P = function () {
                null != e.__ascent
                  ? ((g = e.size * e.__ascent), (l = e.size * e.__descent))
                  : null != d && 0 != d.unitsPerEM
                  ? ((g = (d.ascender / d.unitsPerEM) * e.size),
                    (l = Math.abs((d.descender / d.unitsPerEM) * e.size)))
                  : ((g = e.size), (l = 0.185 * e.size));
                f = e.leading;
                y = Math.ceil(g + l + f);
                y > A && (A = y);
                g > h && (h = g);
              },
              S = function () {
                t = !0;
                p = null != e.align ? e.align : 3;
                n = null != e.blockIndent ? e.blockIndent : 0;
                m = null != e.indent ? e.indent : 0;
                q = null != e.leftMargin ? e.leftMargin : 0;
                z = null != e.rightMargin ? e.rightMargin : 0;
              },
              L = function () {
                if (b < a.textFormatRanges.get_length() - 1) {
                  b += 1;
                  c = a.textFormatRanges.get(b);
                  e.__merge(c.format);
                  var f = Vb.getFont(e);
                  Vb.__context.font = f;
                  d = Vb.getFontInstance(e);
                  return !0;
                }
                return !1;
              },
              Rb = function (d, e) {
                if (d >= e) (x = []), (D = 0);
                else if (e <= c.end) (x = M(a.text, d, e)), (D = O(x));
                else {
                  var f = d;
                  d = c.end;
                  var g = 0;
                  x = [];
                  for (D = 0; ; )
                    if (
                      (f != d && ((f = M(a.text, f, d)), (x = x.concat(f))),
                      d != e)
                    ) {
                      if (!L()) {
                        Ka.warn(
                          "You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",
                          {
                            fileName: "openfl/text/_internal/TextEngine.hx",
                            lineNumber: 1117,
                            className: "openfl.text._internal.TextEngine",
                            methodName: "getLayoutGroups",
                          }
                        );
                        break;
                      }
                      f = d;
                      d = e < c.end ? e : c.end;
                      ++g;
                    } else {
                      D = O(x);
                      break;
                    }
                  b -= g + 1;
                  L();
                }
              },
              T = function (b) {
                if (b <= c.end) {
                  x = M(a.text, I, b);
                  D = O(x);
                  Ha(I, b);
                  w.positions = x;
                  var d = B,
                    e = Z();
                  w.offsetX = d + e;
                  w.ascent = g;
                  w.descent = l;
                  w.leading = f;
                  w.lineIndex = U;
                  w.offsetY = K + 2;
                  w.width = D;
                  w.height = y;
                  B += D;
                  b == c.end && ((w = null), L(), P());
                } else
                  for (;;) {
                    var k = b < c.end ? b : c.end;
                    I != k &&
                      ((x = M(a.text, I, k)),
                      (D = O(x)),
                      Ha(I, k),
                      (w.positions = x),
                      (d = B),
                      (e = Z()),
                      (w.offsetX = d + e),
                      (w.ascent = g),
                      (w.descent = l),
                      (w.leading = f),
                      (w.lineIndex = U),
                      (w.offsetY = K + 2),
                      (w.width = D),
                      (w.height = y),
                      (B += D),
                      (I = k));
                    k == c.end && (w = null);
                    if (k == b) break;
                    if (!L()) {
                      Ka.warn(
                        "You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",
                        {
                          fileName: "openfl/text/_internal/TextEngine.hx",
                          lineNumber: 1205,
                          className: "openfl.text._internal.TextEngine",
                          methodName: "getLayoutGroups",
                        }
                      );
                      break;
                    }
                    P();
                  }
                I = b;
              },
              V = function () {
                P();
                for (var b = a.layoutGroups.get_length(); -1 < --b; ) {
                  var c = a.layoutGroups.get(b);
                  if (c.lineIndex < U) break;
                  c.lineIndex > U || ((c.ascent = h), (c.height = A));
                }
                K += A;
                A = h = 0;
                U += 1;
                B = 0;
                t = !1;
              },
              Pb = function (b) {
                if (4 <= a.width && a.wordWrap) {
                  var c = x;
                  var d = O(c);
                  for (var e = c.length - 1; 0 <= e; ) {
                    var f = X.cca(a.text, I + e);
                    if (32 != f && 9 != f) break;
                    d -= c[e];
                    --e;
                  }
                  for (; 0 < c.length && B + d > N(); ) {
                    for (f = e = d = 0; B + f < N(); ) {
                      var g = c[e];
                      0 == g ? (++e, ++d) : ((f += g), ++e);
                    }
                    if (e == d) e = d + 1;
                    else
                      for (; 1 < e && B + f > N(); )
                        --e,
                          0 < e - d
                            ? (Rb(I, I + e - d), (f = D))
                            : ((e = 1), (d = 0), Rb(I, I + 1), (f = 0));
                    c = I + e - d;
                    T(c);
                    V();
                    Rb(c, b);
                    c = x;
                    d = D;
                  }
                }
                T(b);
              };
            L();
            S();
            P();
            for (var Q, Y = this.text.length + 1; I < Y; )
              if (-1 < F && (-1 == G || F < G))
                I <= F
                  ? (Rb(I, F), Pb(F), (w = null))
                  : null != w &&
                    w.startIndex != w.endIndex &&
                    (w.endIndex == G &&
                      (w.width -= w.positions[w.positions.length - 1]),
                    (w = null)),
                  V(),
                  c.end == F && (L(), P()),
                  (I = F + 1),
                  (E = F),
                  ++v,
                  (F =
                    v < this.lineBreaks.get_length()
                      ? this.lineBreaks.get(v)
                      : -1),
                  S();
              else if (-1 < G)
                for (
                  null != w && w.startIndex != w.endIndex && (w = null), Q = !1;
                  I < this.text.length;

                ) {
                  var R = -1;
                  -1 == G ? (R = F) : ((R = G + 1), -1 < F && F < R && (R = F));
                  -1 == R && (R = this.text.length);
                  Rb(I, R);
                  if (2 == p) {
                    if (0 < x.length && I == C) {
                      I += 1;
                      var W = x.shift();
                      D -= W;
                      B += W;
                    }
                    0 < x.length &&
                      R == G + 1 &&
                      (--R, (W = x.pop()), (D -= W));
                  }
                  this.wordWrap &&
                    B + D > N() &&
                    ((Q = !0),
                    0 < x.length &&
                      R == G + 1 &&
                      B + D - x[x.length - 1] <= N() &&
                      (Q = !1));
                  if (Q) {
                    2 != p &&
                      (null != w || 0 < this.layoutGroups.get_length()) &&
                      ((Q = w),
                      null == Q &&
                        (Q = this.layoutGroups.get(
                          this.layoutGroups.get_length() - 1
                        )),
                      (Q.width -= Q.positions[Q.positions.length - 1]),
                      Q.endIndex--);
                    Q = this.layoutGroups.get_length() - 1;
                    for (W = 0; 0 <= Q; ) {
                      w = this.layoutGroups.get(Q);
                      if (0 < Q && w.startIndex > C) ++W;
                      else break;
                      --Q;
                    }
                    I == C + 1 && V();
                    B = 0;
                    if (0 < W) {
                      Q = this.layoutGroups.get(
                        this.layoutGroups.get_length() - W
                      ).offsetX;
                      W = this.layoutGroups.get_length() - W;
                      for (var aa = this.layoutGroups.get_length(); W < aa; ) {
                        var ba = W++;
                        w = this.layoutGroups.get(ba);
                        w.offsetX -= Q;
                        w.offsetY = K + 2;
                        w.lineIndex = U;
                        B += w.width;
                      }
                    }
                    Pb(R);
                    Q = !1;
                  } else
                    null != w && I == G && C != G - 1
                      ? (2 != p &&
                          ((w.endIndex = G),
                          (w.positions = w.positions.concat(x)),
                          (w.width += D)),
                        (B += D),
                        (I = R))
                      : null == w || 2 == p
                      ? (Pb(R), R == this.text.length && V())
                      : ((W = R < c.end ? R : c.end),
                        W < R && ((x = M(this.text, I, W)), (D = O(x))),
                        (w.endIndex = W),
                        (w.positions = w.positions.concat(x)),
                        (w.width += D),
                        (B += D),
                        W == c.end &&
                          ((w = null), L(), P(), (I = W), W != R && T(R)),
                        F == R && ++R,
                        (I = R),
                        R == this.text.length &&
                          (V(),
                          -1 != F &&
                            ((E = F),
                            ++v,
                            (F =
                              v < this.lineBreaks.get_length()
                                ? this.lineBreaks.get(v)
                                : -1))));
                  R = this.text.indexOf(" ", I);
                  F == C &&
                    ((w.endIndex = F),
                    0 > F - w.startIndex - w.positions.length &&
                      w.positions.push(0),
                    (I = F + 1));
                  C = G;
                  G = R;
                  if (
                    (-1 < F && F <= I && (G > F || -1 == G)) ||
                    I > this.text.length
                  )
                    break;
                }
              else
                I < this.text.length &&
                  (Rb(I, this.text.length), Pb(this.text.length), V()),
                  (I += 1);
            E == I - 2 &&
              -1 < E &&
              (Ha(I - 1, I - 1),
              (w.positions = []),
              (w.ascent = g),
              (w.descent = l),
              (w.leading = f),
              (w.lineIndex = U),
              (w.offsetX = Z()),
              (w.offsetY = K + 2),
              (w.width = 0),
              (w.height = y));
          }
        },
        measureText: function (a) {
          return Vb.__context.measureText(a).width;
        },
        restrictText: function (a) {
          if (null == a) return a;
          null != this.__restrictRegexp &&
            (a = this.__restrictRegexp.split(a).join(""));
          return a;
        },
        setTextAlignment: function () {
          for (
            var a = -1,
              b = 0,
              c,
              d,
              e = !1,
              f = 0,
              g = this.layoutGroups.get_length();
            f < g;

          ) {
            var h = f++;
            c = this.layoutGroups.get(h);
            if (c.lineIndex != a)
              switch (
                ((a = c.lineIndex),
                (b = this.width - 4 - c.format.rightMargin),
                c.format.align)
              ) {
                case 0:
                  b =
                    this.lineWidths.get(a) < b
                      ? Math.round((b - this.lineWidths.get(a)) / 2)
                      : 0;
                  break;
                case 2:
                  if (this.lineWidths.get(a) < b) {
                    d = 1;
                    for (
                      var l = h + 1, p = this.layoutGroups.get_length();
                      l < p;

                    ) {
                      var n = l++;
                      if (this.layoutGroups.get(n).lineIndex == a)
                        (0 != n &&
                          32 !=
                            X.cca(
                              this.text,
                              this.layoutGroups.get(n).startIndex - 1
                            )) ||
                          ++d;
                      else break;
                    }
                    if (
                      1 < d &&
                      ((c = this.layoutGroups.get(h + d - 1)),
                      (l = X.cca(this.text, c.endIndex)),
                      c.endIndex < this.text.length && 10 != l && 13 != l)
                    )
                      for (
                        b = (b - this.lineWidths.get(a)) / (d - 1),
                          e = !0,
                          l = 1;
                        (this.layoutGroups.get(h + l).offsetX += b * l),
                          ++l < d;

                      );
                  }
                  b = 0;
                  break;
                case 4:
                  b =
                    this.lineWidths.get(a) < b
                      ? Math.round(b - this.lineWidths.get(a))
                      : 0;
                  break;
                default:
                  b = 0;
              }
            0 < b && (c.offsetX += b);
          }
          e && this.getLineMeasurements();
        },
        update: function () {
          null == this.text || 0 == this.textFormatRanges.get_length()
            ? (this.lineAscents.set_length(0),
              this.lineBreaks.set_length(0),
              this.lineDescents.set_length(0),
              this.lineLeadings.set_length(0),
              this.lineHeights.set_length(0),
              this.lineWidths.set_length(0),
              this.layoutGroups.set_length(0),
              (this.textHeight = this.textWidth = 0),
              (this.numLines = 1),
              (this.maxScrollH = 0),
              (this.bottomScrollV = this.maxScrollV = 1))
            : (this.getLineBreaks(),
              this.getLayoutGroups(),
              this.getLineMeasurements(),
              this.setTextAlignment());
          this.getBounds();
        },
        get_bottomScrollV: function () {
          if (1 == this.numLines || null == this.lineHeights) return 1;
          for (
            var a = this.lineHeights.get_length(),
              b =
                this.lineLeadings.get_length() == a
                  ? -this.lineLeadings.get(a - 1)
                  : 0,
              c = (0 < this.get_scrollV() ? this.get_scrollV() : 1) - 1,
              d = this.lineHeights.get_length();
            c < d;

          ) {
            var e = c++,
              f = this.lineHeights.get(e);
            b += f;
            if (b > this.height - 4) {
              a = e + (0 <= b - this.height ? 0 : 1);
              break;
            }
          }
          return a < this.get_scrollV() ? this.get_scrollV() : a;
        },
        get_maxScrollV: function () {
          if (1 == this.numLines || null == this.lineHeights) return 1;
          for (var a = this.numLines - 1, b = 0; 0 <= a; ) {
            b += this.lineHeights.get(a);
            if (b > this.height - 4) {
              a += 0 > b - this.height ? 1 : 2;
              break;
            }
            --a;
          }
          return 1 > a ? 1 : a;
        },
        get_scrollV: function () {
          if (1 == this.numLines || null == this.lineHeights) return 1;
          var a = this.get_maxScrollV();
          return this.scrollV > a ? a : this.scrollV;
        },
        set_scrollV: function (a) {
          1 > a
            ? (a = 1)
            : a > this.get_maxScrollV() && (a = this.get_maxScrollV());
          return (this.scrollV = a);
        },
        set_text: function (a) {
          return (this.text = a);
        },
        __class__: Vb,
        __properties__: {
          set_text: "set_text",
          set_scrollV: "set_scrollV",
          get_scrollV: "get_scrollV",
          get_maxScrollV: "get_maxScrollV",
          get_bottomScrollV: "get_bottomScrollV",
        },
      };
      var Vd = function (a, b, c) {
        this.format = a;
        this.start = b;
        this.end = c;
      };
      h["openfl.text._internal.TextFormatRange"] = Vd;
      Vd.__name__ = "openfl.text._internal.TextFormatRange";
      Vd.prototype = { __class__: Vd };
      var wm = function (a, b, c) {
        this.format = a;
        this.startIndex = b;
        this.endIndex = c;
      };
      h["openfl.text._internal.TextLayoutGroup"] = wm;
      wm.__name__ = "openfl.text._internal.TextLayoutGroup";
      wm.prototype = { __class__: wm };
      var Je = function (a, b, c, d, e) {
        null == e && (e = 0);
        pa.call(this);
        this.device = a;
        this.id = b;
        this.minValue = c;
        this.maxValue = d;
        this.value = e;
      };
      h["openfl.ui.GameInputControl"] = Je;
      Je.__name__ = "openfl.ui.GameInputControl";
      Je.__super__ = pa;
      Je.prototype = q(pa.prototype, { __class__: Je });
      var An = function (a, b) {
        this.__controls = [];
        this.__button = new kc();
        this.__axis = new kc();
        this.id = a;
        this.name = b;
        a = new Je(this, "AXIS_0", -1, 1);
        this.__axis.h[0] = a;
        this.__controls.push(a);
        a = new Je(this, "AXIS_1", -1, 1);
        this.__axis.h[1] = a;
        this.__controls.push(a);
        a = new Je(this, "AXIS_2", -1, 1);
        this.__axis.h[2] = a;
        this.__controls.push(a);
        a = new Je(this, "AXIS_3", -1, 1);
        this.__axis.h[3] = a;
        this.__controls.push(a);
        a = new Je(this, "AXIS_4", -1, 1);
        this.__axis.h[4] = a;
        this.__controls.push(a);
        a = new Je(this, "AXIS_5", -1, 1);
        this.__axis.h[5] = a;
        this.__controls.push(a);
        for (b = 0; 15 > b; ) {
          var c = b++;
          a = new Je(this, "BUTTON_" + c, 0, 1);
          this.__button.h[c] = a;
          this.__controls.push(a);
        }
      };
      h["openfl.ui.GameInputDevice"] = An;
      An.__name__ = "openfl.ui.GameInputDevice";
      An.prototype = {
        getControlAt: function (a) {
          return 0 <= a && a < this.__controls.length
            ? this.__controls[a]
            : null;
        },
        get_numControls: function () {
          return this.__controls.length;
        },
        __class__: An,
        __properties__: { get_numControls: "get_numControls" },
      };
      var Ho = function () {};
      h["openfl.ui.Keyboard"] = Ho;
      Ho.__name__ = "openfl.ui.Keyboard";
      Ho.__getCharCode = function (a, b) {
        null == b && (b = !1);
        if (b) {
          switch (a) {
            case 48:
              return 41;
            case 49:
              return 33;
            case 50:
              return 64;
            case 51:
              return 35;
            case 52:
              return 36;
            case 53:
              return 37;
            case 54:
              return 94;
            case 55:
              return 38;
            case 56:
              return 42;
            case 57:
              return 40;
            case 186:
              return 58;
            case 187:
              return 43;
            case 188:
              return 60;
            case 189:
              return 95;
            case 190:
              return 62;
            case 191:
              return 63;
            case 192:
              return 126;
            case 219:
              return 123;
            case 220:
              return 124;
            case 221:
              return 125;
            case 222:
              return 34;
          }
          if (65 <= a && 90 >= a) return a - 65 + 65;
        } else {
          switch (a) {
            case 8:
              return 8;
            case 9:
              return 9;
            case 13:
              return 13;
            case 27:
              return 27;
            case 32:
              return 32;
            case 186:
              return 59;
            case 187:
              return 61;
            case 188:
              return 44;
            case 189:
              return 45;
            case 190:
              return 46;
            case 191:
              return 47;
            case 192:
              return 96;
            case 219:
              return 91;
            case 220:
              return 92;
            case 221:
              return 93;
            case 222:
              return 39;
          }
          if (48 <= a && 57 >= a) return a - 48 + 48;
          if (65 <= a && 90 >= a) return a - 65 + 97;
        }
        if (96 <= a && 105 >= a) return a - 96 + 48;
        switch (a) {
          case 8:
            return 8;
          case 13:
            return 13;
          case 46:
            return 127;
          case 106:
            return 42;
          case 107:
            return 43;
          case 108:
            return 44;
          case 110:
            return 45;
          case 111:
            return 46;
        }
        return 0;
      };
      var Zc = function () {};
      h["openfl.ui.Mouse"] = Zc;
      Zc.__name__ = "openfl.ui.Mouse";
      Zc.__properties__ = { set_cursor: "set_cursor" };
      Zc.hide = function () {
        Zc.__hidden = !0;
        for (var a = 0, b = B.current.__windows; a < b.length; ) {
          var c = b[a];
          ++a;
          c.set_cursor(null);
        }
      };
      Zc.show = function () {
        Zc.__hidden = !1;
        var a = Zc.__cursor;
        Zc.__cursor = null;
        Zc.set_cursor(a);
      };
      Zc.set_cursor = function (a) {
        null == a && (a = "auto");
        var b = null;
        switch (a) {
          case "arrow":
            b = Db.ARROW;
            break;
          case "button":
            b = Db.POINTER;
            break;
          case "crosshair":
            b = Db.CROSSHAIR;
            break;
          case "custom":
            b = Db.CUSTOM;
            break;
          case "hand":
            b = Db.MOVE;
            break;
          case "ibeam":
            b = Db.TEXT;
            break;
          case "resize_nesw":
            b = Db.RESIZE_NESW;
            break;
          case "resize_ns":
            b = Db.RESIZE_NS;
            break;
          case "resize_nwse":
            b = Db.RESIZE_NWSE;
            break;
          case "resize_we":
            b = Db.RESIZE_WE;
            break;
          case "wait":
            b = Db.WAIT;
            break;
          case "waitarrow":
            b = Db.WAIT_ARROW;
        }
        if (null != b && !Zc.__hidden)
          for (var c = 0, d = B.current.__windows; c < d.length; ) {
            var e = d[c];
            ++c;
            e.set_cursor(b);
          }
        return (Zc.__cursor = a);
      };
      var dp = {
          toLimeCursor: function (a) {
            switch (a) {
              case "arrow":
                return Db.ARROW;
              case "auto":
                return Db.DEFAULT;
              case "button":
                return Db.POINTER;
              case "crosshair":
                return Db.CROSSHAIR;
              case "custom":
                return Db.CUSTOM;
              case "hand":
                return Db.MOVE;
              case "ibeam":
                return Db.TEXT;
              case "resize_nesw":
                return Db.RESIZE_NESW;
              case "resize_ns":
                return Db.RESIZE_NS;
              case "resize_nwse":
                return Db.RESIZE_NWSE;
              case "resize_we":
                return Db.RESIZE_WE;
              case "wait":
                return Db.WAIT;
              case "waitarrow":
                return Db.WAIT_ARROW;
              default:
                return Db.DEFAULT;
            }
          },
        },
        fi = function () {};
      h["openfl.ui.Multitouch"] = fi;
      fi.__name__ = "openfl.ui.Multitouch";
      var ua = function (a) {
        null == a && (a = !1);
        this.debugEnabled = a;
        ua.initialized || ua.init();
      };
      h["openfl.utils.AGALMiniAssembler"] = ua;
      ua.__name__ = "openfl.utils.AGALMiniAssembler";
      ua.init = function () {
        ua.initialized = !0;
        var a = ua.OPMAP,
          b = new vb("mov", 2, 0, 0);
        a.h.mov = b;
        a = ua.OPMAP;
        b = new vb("add", 3, 1, 0);
        a.h.add = b;
        a = ua.OPMAP;
        b = new vb("sub", 3, 2, 0);
        a.h.sub = b;
        a = ua.OPMAP;
        b = new vb("mul", 3, 3, 0);
        a.h.mul = b;
        a = ua.OPMAP;
        b = new vb("div", 3, 4, 0);
        a.h.div = b;
        a = ua.OPMAP;
        b = new vb("rcp", 2, 5, 0);
        a.h.rcp = b;
        a = ua.OPMAP;
        b = new vb("min", 3, 6, 0);
        a.h.min = b;
        a = ua.OPMAP;
        b = new vb("max", 3, 7, 0);
        a.h.max = b;
        a = ua.OPMAP;
        b = new vb("frc", 2, 8, 0);
        a.h.frc = b;
        a = ua.OPMAP;
        b = new vb("sqt", 2, 9, 0);
        a.h.sqt = b;
        a = ua.OPMAP;
        b = new vb("rsq", 2, 10, 0);
        a.h.rsq = b;
        a = ua.OPMAP;
        b = new vb("pow", 3, 11, 0);
        a.h.pow = b;
        a = ua.OPMAP;
        b = new vb("log", 2, 12, 0);
        a.h.log = b;
        a = ua.OPMAP;
        b = new vb("exp", 2, 13, 0);
        a.h.exp = b;
        a = ua.OPMAP;
        b = new vb("nrm", 2, 14, 0);
        a.h.nrm = b;
        a = ua.OPMAP;
        b = new vb("sin", 2, 15, 0);
        a.h.sin = b;
        a = ua.OPMAP;
        b = new vb("cos", 2, 16, 0);
        a.h.cos = b;
        a = ua.OPMAP;
        b = new vb("crs", 3, 17, 0);
        a.h.crs = b;
        a = ua.OPMAP;
        b = new vb("dp3", 3, 18, 0);
        a.h.dp3 = b;
        a = ua.OPMAP;
        b = new vb("dp4", 3, 19, 0);
        a.h.dp4 = b;
        a = ua.OPMAP;
        b = new vb("abs", 2, 20, 0);
        a.h.abs = b;
        a = ua.OPMAP;
        b = new vb("neg", 2, 21, 0);
        a.h.neg = b;
        a = ua.OPMAP;
        b = new vb("sat", 2, 22, 0);
        a.h.sat = b;
        a = ua.OPMAP;
        b = new vb("m33", 3, 23, 16);
        a.h.m33 = b;
        a = ua.OPMAP;
        b = new vb("m44", 3, 24, 16);
        a.h.m44 = b;
        a = ua.OPMAP;
        b = new vb("m34", 3, 25, 16);
        a.h.m34 = b;
        a = ua.OPMAP;
        b = new vb("ddx", 2, 26, 288);
        a.h.ddx = b;
        a = ua.OPMAP;
        b = new vb("ddy", 2, 27, 288);
        a.h.ddy = b;
        a = ua.OPMAP;
        b = new vb("ife", 2, 28, 897);
        a.h.ife = b;
        a = ua.OPMAP;
        b = new vb("ine", 2, 29, 897);
        a.h.ine = b;
        a = ua.OPMAP;
        b = new vb("ifg", 2, 30, 897);
        a.h.ifg = b;
        a = ua.OPMAP;
        b = new vb("ifl", 2, 31, 897);
        a.h.ifl = b;
        a = ua.OPMAP;
        b = new vb("els", 0, 32, 1921);
        a.h.els = b;
        a = ua.OPMAP;
        b = new vb("eif", 0, 33, 1409);
        a.h.eif = b;
        a = ua.OPMAP;
        b = new vb("kil", 1, 39, 160);
        a.h.kil = b;
        a = ua.OPMAP;
        b = new vb("tex", 3, 40, 40);
        a.h.tex = b;
        a = ua.OPMAP;
        b = new vb("sge", 3, 41, 0);
        a.h.sge = b;
        a = ua.OPMAP;
        b = new vb("slt", 3, 42, 0);
        a.h.slt = b;
        a = ua.OPMAP;
        b = new vb("sgn", 2, 43, 0);
        a.h.sgn = b;
        a = ua.OPMAP;
        b = new vb("seq", 3, 44, 0);
        a.h.seq = b;
        a = ua.OPMAP;
        b = new vb("sne", 3, 45, 0);
        a.h.sne = b;
        a = ua.SAMPLEMAP;
        b = new ec("rgba", 8, 0);
        a.h.rgba = b;
        a = ua.SAMPLEMAP;
        b = new ec("compressed", 8, 1);
        a.h.compressed = b;
        a = ua.SAMPLEMAP;
        b = new ec("compressedalpha", 8, 2);
        a.h.compressedalpha = b;
        a = ua.SAMPLEMAP;
        b = new ec("dxt1", 8, 1);
        a.h.dxt1 = b;
        a = ua.SAMPLEMAP;
        b = new ec("dxt5", 8, 2);
        a.h.dxt5 = b;
        a = ua.SAMPLEMAP;
        b = new ec("video", 8, 3);
        a.h.video = b;
        a = ua.SAMPLEMAP;
        b = new ec("2d", 12, 0);
        a.h["2d"] = b;
        a = ua.SAMPLEMAP;
        b = new ec("3d", 12, 2);
        a.h["3d"] = b;
        a = ua.SAMPLEMAP;
        b = new ec("cube", 12, 1);
        a.h.cube = b;
        a = ua.SAMPLEMAP;
        b = new ec("mipnearest", 24, 1);
        a.h.mipnearest = b;
        a = ua.SAMPLEMAP;
        b = new ec("miplinear", 24, 2);
        a.h.miplinear = b;
        a = ua.SAMPLEMAP;
        b = new ec("mipnone", 24, 0);
        a.h.mipnone = b;
        a = ua.SAMPLEMAP;
        b = new ec("nomip", 24, 0);
        a.h.nomip = b;
        a = ua.SAMPLEMAP;
        b = new ec("nearest", 28, 0);
        a.h.nearest = b;
        a = ua.SAMPLEMAP;
        b = new ec("linear", 28, 1);
        a.h.linear = b;
        a = ua.SAMPLEMAP;
        b = new ec("anisotropic2x", 28, 2);
        a.h.anisotropic2x = b;
        a = ua.SAMPLEMAP;
        b = new ec("anisotropic4x", 28, 3);
        a.h.anisotropic4x = b;
        a = ua.SAMPLEMAP;
        b = new ec("anisotropic8x", 28, 4);
        a.h.anisotropic8x = b;
        a = ua.SAMPLEMAP;
        b = new ec("anisotropic16x", 28, 5);
        a.h.anisotropic16x = b;
        a = ua.SAMPLEMAP;
        b = new ec("centroid", 16, 1);
        a.h.centroid = b;
        a = ua.SAMPLEMAP;
        b = new ec("single", 16, 2);
        a.h.single = b;
        a = ua.SAMPLEMAP;
        b = new ec("ignoresampler", 16, 4);
        a.h.ignoresampler = b;
        a = ua.SAMPLEMAP;
        b = new ec("repeat", 20, 1);
        a.h.repeat = b;
        a = ua.SAMPLEMAP;
        b = new ec("wrap", 20, 1);
        a.h.wrap = b;
        a = ua.SAMPLEMAP;
        b = new ec("clamp", 20, 0);
        a.h.clamp = b;
        a = ua.SAMPLEMAP;
        b = new ec("clamp_u_repeat_v", 20, 2);
        a.h.clamp_u_repeat_v = b;
        a = ua.SAMPLEMAP;
        b = new ec("repeat_u_clamp_v", 20, 3);
        a.h.repeat_u_clamp_v = b;
      };
      ua.prototype = {
        assemble: function (a, b, c, d) {
          null == d && (d = !1);
          null == c && (c = 1);
          var e = sa.getTimer();
          this.agalcode = new rd(0);
          this.error = "";
          var f = !1;
          "fragment" == a
            ? (f = !0)
            : "vertex" != a &&
              (this.error =
                'ERROR: mode needs to be "fragment" or "vertex" but is "' +
                a +
                '".');
          this.agalcode.__endian = 1;
          this.agalcode.writeByte(160);
          this.agalcode.writeUnsignedInt(c);
          this.agalcode.writeByte(161);
          this.agalcode.writeByte(f ? 1 : 0);
          this.initregmap(c, d);
          a = K.replace(b, "\r", "\n").split("\n");
          b = 0;
          d = a.length;
          for (
            var g = new ya("<.*>", "g"),
              h = new ya("([\\w\\.\\-\\+]+)", "gi"),
              l = new ya("^\\w{3}", "ig"),
              p = new ya(
                "vc\\[([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw](\\+\\d{1,3})?)?\\](\\.[xyzw]{1,4})?|([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw]{1,4})?",
                "gi"
              ),
              n = new ya("\\[.*\\]", "ig"),
              m = new ya("^\\b[A-Za-z]{1,3}", "ig"),
              q = new ya("\\d+", ""),
              z = new ya("(\\.[xyzw]{1,4})", ""),
              t = new ya("[A-Za-z]{1,3}", "ig"),
              w = new ya("(\\.[xyzw]{1,1})", ""),
              x = new ya("\\+\\d{1,3}", "ig"),
              D = 0;
            D < d && "" == this.error;

          ) {
            var y = K.trim(a[D]),
              A = y.indexOf("//");
            -1 != A && (y = X.substr(y, 0, A));
            var C = g.match(y) ? g.matchedPos().pos : -1;
            A = null;
            -1 != C &&
              ((A = this.match(X.substr(y, C, null), h)),
              (y = X.substr(y, 0, C)));
            var E = null;
            l.match(y) && ((C = l.matched(0)), (E = ua.OPMAP.h[C]));
            if (null == E)
              3 <= y.length &&
                Ka.warn("warning: bad line " + D + ": " + a[D], {
                  fileName: "openfl/utils/AGALMiniAssembler.hx",
                  lineNumber: 262,
                  className: "openfl.utils.AGALMiniAssembler",
                  methodName: "assemble",
                });
            else if (
              (this.debugEnabled &&
                Ka.info(E, {
                  fileName: "openfl/utils/AGALMiniAssembler.hx",
                  lineNumber: 272,
                  className: "openfl.utils.AGALMiniAssembler",
                  methodName: "assemble",
                }),
              null == E)
            )
              3 <= y.length &&
                Ka.warn("warning: bad line " + D + ": " + a[D], {
                  fileName: "openfl/utils/AGALMiniAssembler.hx",
                  lineNumber: 279,
                  className: "openfl.utils.AGALMiniAssembler",
                  methodName: "assemble",
                });
            else {
              y = X.substr(y, y.indexOf(E.name) + E.name.length, null);
              if (0 != (E.flags & 256) && 2 > c) {
                this.error = "error: opcode requires version 2.";
                break;
              }
              if (0 != (E.flags & 64) && f) {
                this.error =
                  "error: opcode is only allowed in vertex programs.";
                break;
              }
              if (0 != (E.flags & 32) && !f) {
                this.error =
                  "error: opcode is only allowed in fragment programs.";
                break;
              }
              this.verbose &&
                Ka.info("emit opcode=" + M.string(E), {
                  fileName: "openfl/utils/AGALMiniAssembler.hx",
                  lineNumber: 308,
                  className: "openfl.utils.AGALMiniAssembler",
                  methodName: "assemble",
                });
              this.agalcode.writeUnsignedInt(E.emitCode);
              ++b;
              if (4096 < b) {
                this.error = "error: too many opcodes. maximum is 4096.";
                break;
              }
              var F = this.match(y, p);
              if (F.length != E.numRegister) {
                this.error =
                  "error: wrong number of operands. found " +
                  F.length +
                  " but expected " +
                  E.numRegister +
                  ".";
                break;
              }
              var G = !1,
                v = 160;
              y = 0;
              for (C = F.length; y < C; ) {
                var B = y++,
                  I = !1,
                  U = this.match(F[B], n);
                0 < U.length &&
                  ((F[B] = K.replace(F[B], U[0], "0")),
                  this.verbose &&
                    Ka.info("IS REL", {
                      fileName: "openfl/utils/AGALMiniAssembler.hx",
                      lineNumber: 344,
                      className: "openfl.utils.AGALMiniAssembler",
                      methodName: "assemble",
                    }),
                  (I = !0));
                var O = this.match(F[B], m);
                if (0 == O.length) {
                  this.error =
                    "error: could not parse operand " + B + " (" + F[B] + ").";
                  G = !0;
                  break;
                }
                var Z = ua.REGMAP.h[O[0]];
                this.debugEnabled &&
                  Ka.info(Z, {
                    fileName: "openfl/utils/AGALMiniAssembler.hx",
                    lineNumber: 363,
                    className: "openfl.utils.AGALMiniAssembler",
                    methodName: "assemble",
                  });
                if (null == Z) {
                  this.error =
                    "error: could not find register name for operand " +
                    B +
                    " (" +
                    F[B] +
                    ").";
                  G = !0;
                  break;
                }
                if (f) {
                  if (0 == (Z.flags & 32)) {
                    this.error =
                      "error: register operand " +
                      B +
                      " (" +
                      F[B] +
                      ") only allowed in vertex programs.";
                    G = !0;
                    break;
                  }
                  if (I) {
                    this.error =
                      "error: register operand " +
                      B +
                      " (" +
                      F[B] +
                      ") relative adressing not allowed in fragment programs.";
                    G = !0;
                    break;
                  }
                } else if (0 == (Z.flags & 64)) {
                  this.error =
                    "error: register operand " +
                    B +
                    " (" +
                    F[B] +
                    ") only allowed in fragment programs.";
                  G = !0;
                  break;
                }
                F[B] = X.substr(
                  F[B],
                  F[B].indexOf(Z.name) + Z.name.length,
                  null
                );
                var N = I ? this.match(U[0], q) : this.match(F[B], q);
                O = 0;
                0 < N.length && (O = M.parseInt(N[0]));
                if (rc.gt(O, Z.range)) {
                  y = Z.range + 1;
                  this.error =
                    "error: register operand " +
                    B +
                    " (" +
                    F[B] +
                    ") index exceeds limit of " +
                    (null == y ? "null" : M.string(rc.toFloat(y))) +
                    ".";
                  G = !0;
                  break;
                }
                var Ha = this.match(F[B], z),
                  P = 0 == B && 0 == (E.flags & 128),
                  H = 2 == B && 0 != (E.flags & 8),
                  Q = 0,
                  R = 0,
                  L = 0;
                if (P && I) {
                  this.error = "error: relative can not be destination";
                  G = !0;
                  break;
                }
                if (0 < Ha.length) {
                  for (var S = (N = 0), Rb = Ha[0].length, V = 1; V < Rb; )
                    (S = X.cca(Ha[0], V) - 120),
                      rc.gt(S, 2) && (S = 3),
                      (N = P ? N | (1 << S) : N | (S << ((V - 1) << 1))),
                      ++V;
                  if (!P) for (; 4 >= V; ) (N |= S << ((V - 1) << 1)), ++V;
                } else N = P ? 15 : 228;
                if (I) {
                  Ha = this.match(U[0], t);
                  Q = ua.REGMAP.h[Ha[0]];
                  if (null == Q) {
                    this.error = "error: bad index register";
                    G = !0;
                    break;
                  }
                  Q = Q.emitCode;
                  S = this.match(U[0], w);
                  if (0 == S.length) {
                    this.error = "error: bad index register select";
                    G = !0;
                    break;
                  }
                  R = X.cca(S[0], 1) - 120;
                  rc.gt(R, 2) && (R = 3);
                  U = this.match(U[0], x);
                  0 < U.length && (L = M.parseInt(U[0]));
                  if (0 > L || 255 < L) {
                    this.error =
                      "error: index offset " + L + " out of bounds. [0..255]";
                    G = !0;
                    break;
                  }
                  this.verbose &&
                    Ka.info(
                      "RELATIVE: type=" +
                        Q +
                        "==" +
                        Ha[0] +
                        " sel=" +
                        (null == R ? "null" : M.string(rc.toFloat(R))) +
                        "==" +
                        S[0] +
                        " idx=" +
                        (null == O ? "null" : M.string(rc.toFloat(O))) +
                        " offset=" +
                        L,
                      {
                        fileName: "openfl/utils/AGALMiniAssembler.hx",
                        lineNumber: 518,
                        className: "openfl.utils.AGALMiniAssembler",
                        methodName: "assemble",
                      }
                    );
                }
                this.verbose &&
                  Ka.info(
                    "  emit argcode=" +
                      M.string(Z) +
                      "[" +
                      (null == O ? "null" : M.string(rc.toFloat(O))) +
                      "][" +
                      N +
                      "]",
                    {
                      fileName: "openfl/utils/AGALMiniAssembler.hx",
                      lineNumber: 525,
                      className: "openfl.utils.AGALMiniAssembler",
                      methodName: "assemble",
                    }
                  );
                if (P)
                  this.agalcode.writeShort(O),
                    this.agalcode.writeByte(N),
                    this.agalcode.writeByte(Z.emitCode),
                    (v -= 32);
                else {
                  if (H) {
                    this.verbose &&
                      Ka.info("  emit sampler", {
                        fileName: "openfl/utils/AGALMiniAssembler.hx",
                        lineNumber: 541,
                        className: "openfl.utils.AGALMiniAssembler",
                        methodName: "assemble",
                      });
                    B = 5;
                    U = I = 0;
                    for (Z = null == A ? 0 : A.length; U < Z; )
                      (N = U++),
                        this.verbose &&
                          Ka.info("    opt: " + A[N], {
                            fileName: "openfl/utils/AGALMiniAssembler.hx",
                            lineNumber: 552,
                            className: "openfl.utils.AGALMiniAssembler",
                            methodName: "assemble",
                          }),
                        (P = ua.SAMPLEMAP.h[A[N]]),
                        null == P
                          ? ((I = parseFloat(A[N])),
                            this.verbose &&
                              Ka.info("    bias: " + I, {
                                fileName: "openfl/utils/AGALMiniAssembler.hx",
                                lineNumber: 565,
                                className: "openfl.utils.AGALMiniAssembler",
                                methodName: "assemble",
                              }))
                          : (16 != P.flag && (B &= ~(15 << P.flag)),
                            (B |= P.mask << P.flag));
                    this.agalcode.writeShort(O);
                    this.agalcode.writeByte((8 * I) | 0);
                    this.agalcode.writeByte(0);
                    this.agalcode.writeUnsignedInt(B);
                    this.verbose &&
                      Ka.info("    bits: " + (B - 5), {
                        fileName: "openfl/utils/AGALMiniAssembler.hx",
                        lineNumber: 586,
                        className: "openfl.utils.AGALMiniAssembler",
                        methodName: "assemble",
                      });
                  } else
                    0 == B && (this.agalcode.writeUnsignedInt(0), (v -= 32)),
                      this.agalcode.writeShort(O),
                      this.agalcode.writeByte(L),
                      this.agalcode.writeByte(N),
                      this.agalcode.writeByte(Z.emitCode),
                      this.agalcode.writeByte(Q),
                      this.agalcode.writeShort(I ? R | 32768 : 0);
                  v -= 64;
                }
              }
              for (y = 0; y < v; ) this.agalcode.writeByte(0), (y += 8);
              if (G) break;
            }
            ++D;
          }
          "" != this.error &&
            ((this.error += "\n  at line " + D + " " + a[D]),
            dg.set_length(this.agalcode, 0),
            Ka.info(this.error, {
              fileName: "openfl/utils/AGALMiniAssembler.hx",
              lineNumber: 631,
              className: "openfl.utils.AGALMiniAssembler",
              methodName: "assemble",
            }));
          if (this.debugEnabled) {
            c = "generated bytecode:";
            f = dg.get_length(this.agalcode);
            y = 0;
            for (C = f; y < C; )
              (f = y++),
                0 == f % 16 && (c += "\n"),
                0 == f % 4 && (c += " "),
                (f = K.hex(this.agalcode.b[f], 2)),
                2 > f.length && (f = "0" + f),
                (c += f);
            Ka.info(c, {
              fileName: "openfl/utils/AGALMiniAssembler.hx",
              lineNumber: 662,
              className: "openfl.utils.AGALMiniAssembler",
              methodName: "assemble",
            });
          }
          this.verbose &&
            Ka.info(
              "AGALMiniAssembler.assemble time: " +
                (sa.getTimer() - e) / 1e3 +
                "s",
              {
                fileName: "openfl/utils/AGALMiniAssembler.hx",
                lineNumber: 667,
                className: "openfl.utils.AGALMiniAssembler",
                methodName: "assemble",
              }
            );
          return this.agalcode;
        },
        initregmap: function (a, b) {
          var c = ua.REGMAP,
            d = new we(
              "va",
              "vertex attribute",
              0,
              b ? 1024 : 1 == a || 2 == a ? 7 : 15,
              66
            );
          c.h.va = d;
          c = ua.REGMAP;
          d = new we(
            "vc",
            "vertex constant",
            1,
            b ? 1024 : 1 == a ? 127 : 249,
            66
          );
          c.h.vc = d;
          c = ua.REGMAP;
          d = new we(
            "vt",
            "vertex temporary",
            2,
            b ? 1024 : 1 == a ? 7 : 25,
            67
          );
          c.h.vt = d;
          c = ua.REGMAP;
          d = new we("vo", "vertex output", 3, b ? 1024 : 0, 65);
          c.h.vo = d;
          c = ua.REGMAP;
          d = new we("vi", "varying", 4, b ? 1024 : 1 == a ? 7 : 9, 99);
          c.h.vi = d;
          c = ua.REGMAP;
          d = new we(
            "fc",
            "fragment constant",
            1,
            b ? 1024 : 1 == a ? 27 : 2 == a ? 63 : 199,
            34
          );
          c.h.fc = d;
          c = ua.REGMAP;
          d = new we(
            "ft",
            "fragment temporary",
            2,
            b ? 1024 : 1 == a ? 7 : 25,
            35
          );
          c.h.ft = d;
          c = ua.REGMAP;
          d = new we("fs", "texture sampler", 5, b ? 1024 : 7, 34);
          c.h.fs = d;
          c = ua.REGMAP;
          d = new we("fo", "fragment output", 3, b ? 1024 : 1 == a ? 0 : 3, 33);
          c.h.fo = d;
          c = ua.REGMAP;
          d = new we(
            "fd",
            "fragment depth output",
            6,
            b ? 1024 : 1 == a ? -1 : 0,
            33
          );
          c.h.fd = d;
          c = ua.REGMAP;
          d = new we("iid", "instance id", 7, b ? 1024 : 0, 66);
          c.h.iid = d;
          d = ua.REGMAP.h.vo;
          ua.REGMAP.h.op = d;
          d = ua.REGMAP.h.vi;
          ua.REGMAP.h.i = d;
          d = ua.REGMAP.h.vi;
          ua.REGMAP.h.v = d;
          d = ua.REGMAP.h.fo;
          ua.REGMAP.h.oc = d;
          d = ua.REGMAP.h.fd;
          ua.REGMAP.h.od = d;
          d = ua.REGMAP.h.vi;
          ua.REGMAP.h.fi = d;
        },
        match: function (a, b) {
          for (var c = [], d = 0; b.matchSub(a, d); )
            (d = b.matched(0)), c.push(d), (d = b.matchedPos().pos + d.length);
          return c;
        },
        __class__: ua,
      };
      var vb = function (a, b, c, d) {
        this.name = a;
        this.numRegister = b;
        this.emitCode = c;
        this.flags = d;
      };
      h["openfl.utils._AGALMiniAssembler.OpCode"] = vb;
      vb.__name__ = "openfl.utils._AGALMiniAssembler.OpCode";
      vb.prototype = { __class__: vb };
      var we = function (a, b, c, d, e) {
        this.name = a;
        this.longName = b;
        this.emitCode = c;
        this.range = d;
        this.flags = e;
      };
      h["openfl.utils._AGALMiniAssembler.Register"] = we;
      we.__name__ = "openfl.utils._AGALMiniAssembler.Register";
      we.prototype = {
        toString: function () {
          return (
            '[Register name="' +
            this.name +
            '", longName="' +
            this.longName +
            '", emitCode=' +
            (null == this.emitCode
              ? "null"
              : M.string(rc.toFloat(this.emitCode))) +
            ", range=" +
            (null == this.range ? "null" : M.string(rc.toFloat(this.range))) +
            ", flags=" +
            (null == this.flags ? "null" : M.string(rc.toFloat(this.flags))) +
            "]"
          );
        },
        __class__: we,
      };
      var ec = function (a, b, c) {
        this.name = a;
        this.flag = b;
        this.mask = c;
      };
      h["openfl.utils._AGALMiniAssembler.Sampler"] = ec;
      ec.__name__ = "openfl.utils._AGALMiniAssembler.Sampler";
      ec.prototype = { __class__: ec };
      var xm = function () {};
      h["openfl.utils.IAssetCache"] = xm;
      xm.__name__ = "openfl.utils.IAssetCache";
      xm.__isInterface__ = !0;
      xm.prototype = {
        __class__: xm,
        __properties__: { get_enabled: "get_enabled" },
      };
      var ym = function () {
        this.__enabled = !0;
        this.bitmapData = new Q();
        this.font = new Q();
        this.sound = new Q();
      };
      h["openfl.utils.AssetCache"] = ym;
      ym.__name__ = "openfl.utils.AssetCache";
      ym.__interfaces__ = [xm];
      ym.prototype = {
        getBitmapData: function (a) {
          return this.bitmapData.h[a];
        },
        getFont: function (a) {
          return this.font.h[a];
        },
        getSound: function (a) {
          return this.sound.h[a];
        },
        hasBitmapData: function (a) {
          return Object.prototype.hasOwnProperty.call(this.bitmapData.h, a);
        },
        hasFont: function (a) {
          return Object.prototype.hasOwnProperty.call(this.font.h, a);
        },
        hasSound: function (a) {
          return Object.prototype.hasOwnProperty.call(this.sound.h, a);
        },
        removeBitmapData: function (a) {
          var b = ra.cache.image;
          Object.prototype.hasOwnProperty.call(b.h, a) && delete b.h[a];
          b = this.bitmapData;
          return Object.prototype.hasOwnProperty.call(b.h, a)
            ? (delete b.h[a], !0)
            : !1;
        },
        setBitmapData: function (a, b) {
          this.bitmapData.h[a] = b;
        },
        setFont: function (a, b) {
          this.font.h[a] = b;
        },
        setSound: function (a, b) {
          this.sound.h[a] = b;
        },
        get_enabled: function () {
          return this.__enabled;
        },
        __class__: ym,
        __properties__: { get_enabled: "get_enabled" },
      };
      var Uf = function () {
        Wb.call(this);
      };
      h["openfl.utils.AssetLibrary"] = Uf;
      Uf.__name__ = "openfl.utils.AssetLibrary";
      Uf.fromBundle = function (a) {
        a = Wb.fromBundle(a);
        if (null != a) {
          if (a instanceof Uf) return a;
          var b = new Uf();
          b.__proxy = a;
          return b;
        }
        return null;
      };
      Uf.fromManifest = function (a) {
        a = Wb.fromManifest(a);
        if (null != a) {
          if (a instanceof Uf) return a;
          var b = new Uf();
          b.__proxy = a;
          return b;
        }
        return null;
      };
      Uf.__super__ = Wb;
      Uf.prototype = q(Wb.prototype, {
        bind: function (a, b) {
          return !1;
        },
        exists: function (a, b) {
          return null != this.__proxy
            ? this.__proxy.exists(a, b)
            : Wb.prototype.exists.call(this, a, b);
        },
        getAsset: function (a, b) {
          return null != this.__proxy
            ? this.__proxy.getAsset(a, b)
            : Wb.prototype.getAsset.call(this, a, b);
        },
        getAudioBuffer: function (a) {
          return null != this.__proxy
            ? this.__proxy.getAudioBuffer(a)
            : Wb.prototype.getAudioBuffer.call(this, a);
        },
        getBytes: function (a) {
          return null != this.__proxy
            ? this.__proxy.getBytes(a)
            : Wb.prototype.getBytes.call(this, a);
        },
        getFont: function (a) {
          return null != this.__proxy
            ? this.__proxy.getFont(a)
            : Wb.prototype.getFont.call(this, a);
        },
        getImage: function (a) {
          return null != this.__proxy
            ? this.__proxy.getImage(a)
            : Wb.prototype.getImage.call(this, a);
        },
        getPath: function (a) {
          return null != this.__proxy
            ? this.__proxy.getPath(a)
            : Wb.prototype.getPath.call(this, a);
        },
        getText: function (a) {
          return null != this.__proxy
            ? this.__proxy.getText(a)
            : Wb.prototype.getText.call(this, a);
        },
        isLocal: function (a, b) {
          return null != this.__proxy
            ? this.__proxy.isLocal(a, b)
            : Wb.prototype.isLocal.call(this, a, b);
        },
        loadAsset: function (a, b) {
          return null != this.__proxy
            ? this.__proxy.loadAsset(a, b)
            : Wb.prototype.loadAsset.call(this, a, b);
        },
        load: function () {
          return null != this.__proxy
            ? this.__proxy.load()
            : Wb.prototype.load.call(this);
        },
        loadAudioBuffer: function (a) {
          return null != this.__proxy
            ? this.__proxy.loadAudioBuffer(a)
            : Wb.prototype.loadAudioBuffer.call(this, a);
        },
        loadBytes: function (a) {
          return null != this.__proxy
            ? this.__proxy.loadBytes(a)
            : Wb.prototype.loadBytes.call(this, a);
        },
        loadFont: function (a) {
          return null != this.__proxy
            ? this.__proxy.loadFont(a)
            : Wb.prototype.loadFont.call(this, a);
        },
        loadImage: function (a) {
          return null != this.__proxy
            ? this.__proxy.loadImage(a)
            : Wb.prototype.loadImage.call(this, a);
        },
        loadText: function (a) {
          return null != this.__proxy
            ? this.__proxy.loadText(a)
            : Wb.prototype.loadText.call(this, a);
        },
        unload: function () {
          null != this.__proxy
            ? this.__proxy.unload()
            : Wb.prototype.unload.call(this);
        },
        __class__: Uf,
      });
      var aa = function () {};
      h["openfl.utils.Assets"] = aa;
      aa.__name__ = "openfl.utils.Assets";
      aa.addEventListener = function (a, b, c, d, e) {
        null == e && (e = !1);
        null == d && (d = 0);
        null == c && (c = !1);
        ra.onChange.has(aa.LimeAssets_onChange) ||
          ra.onChange.add(aa.LimeAssets_onChange);
        aa.dispatcher.addEventListener(a, b, c, d, e);
      };
      aa.dispatchEvent = function (a) {
        return aa.dispatcher.dispatchEvent(a);
      };
      aa.exists = function (a, b) {
        return ra.exists(a, b);
      };
      aa.getBitmapData = function (a, b) {
        null == b && (b = !0);
        if (b && aa.cache.get_enabled() && aa.cache.hasBitmapData(a)) {
          var c = aa.cache.getBitmapData(a);
          if (aa.isValidBitmapData(c)) return c;
        }
        c = ra.getImage(a, !1);
        return null != c
          ? ((c = S.fromImage(c)),
            b && aa.cache.get_enabled() && aa.cache.setBitmapData(a, c),
            c)
          : null;
      };
      aa.getFont = function (a, b) {
        null == b && (b = !0);
        if (b && aa.cache.get_enabled() && aa.cache.hasFont(a))
          return aa.cache.getFont(a);
        var c = ra.getFont(a, !1);
        if (null != c) {
          var d = new Sb();
          d.__fromLimeFont(c);
          b && aa.cache.get_enabled() && aa.cache.setFont(a, d);
          return d;
        }
        return new Sb();
      };
      aa.getLibrary = function (a) {
        return ra.getLibrary(a);
      };
      aa.getSound = function (a, b) {
        null == b && (b = !0);
        if (b && aa.cache.get_enabled() && aa.cache.hasSound(a)) {
          var c = aa.cache.getSound(a);
          if (aa.isValidSound(c)) return c;
        }
        c = ra.getAudioBuffer(a, !1);
        return null != c
          ? ((c = De.fromAudioBuffer(c)),
            b && aa.cache.get_enabled() && aa.cache.setSound(a, c),
            c)
          : null;
      };
      aa.getText = function (a) {
        return ra.getText(a);
      };
      aa.hasLibrary = function (a) {
        return ra.hasLibrary(a);
      };
      aa.isValidBitmapData = function (a) {
        return null != a && null != a.image;
      };
      aa.isValidSound = function (a) {
        return !0;
      };
      aa.loadLibrary = function (a) {
        return ra.loadLibrary(a).then(function (b) {
          var c = null;
          null != b &&
            (b instanceof Uf
              ? (c = b)
              : ((c = ra.libraries),
                Object.prototype.hasOwnProperty.call(c.h, a) && delete c.h[a],
                (c = new Uf()),
                (c.__proxy = b),
                ra.registerLibrary(a, c)));
          return Ua.withValue(c);
        });
      };
      aa.loadSound = function (a, b) {
        null == b && (b = !0);
        null == b && (b = !0);
        var c = new Gd();
        ra.loadAudioBuffer(a, b)
          .onComplete(function (d) {
            null != d
              ? ((d = De.fromAudioBuffer(d)),
                b && aa.cache.get_enabled() && aa.cache.setSound(a, d),
                c.complete(d))
              : c.error('[Assets] Could not load Sound "' + a + '"');
          })
          .onError(n(c, c.error))
          .onProgress(n(c, c.progress));
        return c.future;
      };
      aa.LimeAssets_onChange = function () {
        aa.dispatchEvent(new Ba("change"));
      };
      var dg = {
          __properties__: {
            set_length: "set_length",
            get_length: "get_length",
          },
          fromBytes: function (a) {
            return null == a ? null : a instanceof rd ? a : rd.fromBytes(a);
          },
          toBytes: function (a) {
            return a;
          },
          get_length: function (a) {
            return null == a ? 0 : a.length;
          },
          set_length: function (a, b) {
            0 <= b && (a.__resize(b), b < a.position && (a.position = b));
            return (a.length = b);
          },
        },
        af = {
          __get: function (a, b) {
            if (null == a || null == b) return null;
            if (Object.prototype.hasOwnProperty.call(a, b))
              return qa.field(a, b);
            if (a instanceof D) {
              var c = a.getChildByName(b);
              if (null != c) return c;
            }
            return qa.getProperty(a, b);
          },
          __eq: function (a, b) {
            return a == b;
          },
        },
        zm = function () {};
      h["haxe.lang.Iterator"] = zm;
      zm.__name__ = "haxe.lang.Iterator";
      zm.__isInterface__ = !0;
      zm.prototype = { __class__: zm };
      var Am = function () {};
      h["haxe.lang.Iterable"] = Am;
      Am.__name__ = "haxe.lang.Iterable";
      Am.__isInterface__ = !0;
      Am.prototype = { __class__: Am };
      var td = function () {};
      h["openfl.utils._internal.Lib"] = td;
      td.__name__ = "openfl.utils._internal.Lib";
      var Gh = function () {
        this.rollOutStack = [];
      };
      h["openfl.utils._internal.TouchData"] = Gh;
      Gh.__name__ = "openfl.utils._internal.TouchData";
      Gh.prototype = {
        reset: function () {
          this.touchOverTarget = this.touchDownTarget = this.touch = null;
          this.rollOutStack.splice(0, this.rollOutStack.length);
        },
        __class__: Gh,
      };
      var Pe = function () {
        this.holdTime = this.holdValue = 0;
        this.nextAccept = 5;
        this.boyfriend = null;
        this.curSelected = 0;
        this.curOption = null;
        La.call(this);
        null == this.title && (this.title = "Options");
        null == this.rpcTitle && (this.rpcTitle = "Options Menu");
        var a = new F(),
          b = G.returnGraphic("menuDesat", null);
        a = a.loadGraphic(b);
        a.set_color(-1412611);
        a.set_x((g.width - a.get_width()) / 2);
        a.set_y((g.height - a.get_height()) / 2);
        a.set_antialiasing(y.globalAntialiasing);
        this.add(a);
        this.grpOptions = new ma();
        this.add(this.grpOptions);
        this.grpTexts = new ma();
        this.add(this.grpTexts);
        this.checkboxGroup = new ma();
        this.add(this.checkboxGroup);
        this.descBox = new F().makeGraphic(1, 1, -16777216);
        this.descBox.set_alpha(0.6);
        this.add(this.descBox);
        a = new ib(75, 40, this.title, !0);
        a.set_scaleX(0.6);
        a.set_scaleY(0.6);
        a.set_alpha(0.4);
        this.add(a);
        this.descText = new W(50, 600, 1180, "", 32);
        this.descText.setFormat(
          "assets/fonts/vcr.ttf",
          32,
          -1,
          "center",
          Ya.OUTLINE,
          -16777216
        );
        a = this.descText.scrollFactor;
        a.set_x(0);
        a.set_y(0);
        this.descText.set_borderSize(2.4);
        this.add(this.descText);
        a = 0;
        for (b = this.optionsArray.length; a < b; ) {
          var c = a++,
            d = new ib(290, 260, this.optionsArray[c].name, !1);
          d.isMenuItem = !0;
          d.targetY = c;
          this.grpOptions.add(d);
          if ("bool" == this.optionsArray[c].get_type()) {
            var e = new bk(
              d.x - 105,
              d.y,
              1 == this.optionsArray[c].getValue()
            );
            e.sprTracker = d;
            e.ID = c;
            this.checkboxGroup.add(e);
          } else
            d.set_x(d.x - 80),
              d.startPosition.set_x(d.startPosition.x - 80),
              (e = new Rc(
                "" + M.string(this.optionsArray[c].getValue()),
                d.get_width() + 80
              )),
              (e.sprTracker = d),
              (e.copyAlpha = !0),
              (e.ID = c),
              this.grpTexts.add(e),
              this.optionsArray[c].setChild(e);
          this.optionsArray[c].showBoyfriend &&
            null == this.boyfriend &&
            this.reloadBoyfriend();
          this.updateTextFrom(this.optionsArray[c]);
        }
        this.changeSelection();
        this.reloadCheckboxes();
      };
      h["options.BaseOptionsMenu"] = Pe;
      Pe.__name__ = "options.BaseOptionsMenu";
      Pe.__super__ = La;
      Pe.prototype = q(La.prototype, {
        addOption: function (a) {
          if (null == this.optionsArray || 1 > this.optionsArray.length)
            this.optionsArray = [];
          this.optionsArray.push(a);
        },
        update: function (a) {
          ia.player1.controls._ui_upP.check() && this.changeSelection(-1);
          ia.player1.controls._ui_downP.check() && this.changeSelection(1);
          ia.player1.controls._back.check() &&
            (this.close(), g.sound.play(G.sound("cancelMenu")));
          if (0 >= this.nextAccept) {
            var b = !0;
            "bool" != this.curOption.get_type() && (b = !1);
            if (b)
              ia.player1.controls._accept.check() &&
                (g.sound.play(G.sound("scrollMenu")),
                this.curOption.setValue(
                  1 == this.curOption.getValue() ? !1 : !0
                ),
                this.curOption.change(),
                this.reloadCheckboxes());
            else if (
              ia.player1.controls._ui_left.check() ||
              ia.player1.controls._ui_right.check()
            ) {
              b =
                ia.player1.controls._ui_leftP.check() ||
                ia.player1.controls._ui_rightP.check();
              if (0.5 < this.holdTime || b)
                if (b) {
                  b = null;
                  "string" != this.curOption.get_type() &&
                    (b = ia.player1.controls._ui_left.check()
                      ? -this.curOption.changeValue
                      : this.curOption.changeValue);
                  switch (this.curOption.get_type()) {
                    case "float":
                    case "int":
                    case "percent":
                      this.holdValue = this.curOption.getValue() + b;
                      this.holdValue < this.curOption.minValue
                        ? (this.holdValue = this.curOption.minValue)
                        : this.holdValue > this.curOption.maxValue &&
                          (this.holdValue = this.curOption.maxValue);
                      switch (this.curOption.get_type()) {
                        case "int":
                          this.holdValue = Math.round(this.holdValue);
                          this.curOption.setValue(this.holdValue);
                          break;
                        case "float":
                        case "percent":
                          (this.holdValue = hc.roundDecimal(
                            this.holdValue,
                            this.curOption.decimals
                          )),
                            this.curOption.setValue(this.holdValue);
                      }
                      break;
                    case "string":
                      (b = this.curOption.curOption),
                        ia.player1.controls._ui_leftP.check() ? --b : ++b,
                        0 > b
                          ? (b = this.curOption.options.length - 1)
                          : b >= this.curOption.options.length && (b = 0),
                        (this.curOption.curOption = b),
                        this.curOption.setValue(this.curOption.options[b]);
                  }
                  this.updateTextFrom(this.curOption);
                  this.curOption.change();
                  g.sound.play(G.sound("scrollMenu"));
                } else if ("string" != this.curOption.get_type()) {
                  this.holdValue +=
                    this.curOption.scrollSpeed *
                    a *
                    (ia.player1.controls._ui_left.check() ? -1 : 1);
                  this.holdValue < this.curOption.minValue
                    ? (this.holdValue = this.curOption.minValue)
                    : this.holdValue > this.curOption.maxValue &&
                      (this.holdValue = this.curOption.maxValue);
                  switch (this.curOption.get_type()) {
                    case "int":
                      this.curOption.setValue(Math.round(this.holdValue));
                      break;
                    case "float":
                    case "percent":
                      this.curOption.setValue(
                        hc.roundDecimal(this.holdValue, this.curOption.decimals)
                      );
                  }
                  this.updateTextFrom(this.curOption);
                  this.curOption.change();
                }
              "string" != this.curOption.get_type() && (this.holdTime += a);
            } else
              (ia.player1.controls._ui_leftR.check() ||
                ia.player1.controls._ui_rightR.check()) &&
                this.clearHold();
            if (ia.player1.controls._reset.check()) {
              b = 0;
              for (var c = this.optionsArray.length; b < c; ) {
                var d = b++;
                d = this.optionsArray[d];
                d.setValue(d.defaultValue);
                "bool" != d.get_type() &&
                  ("string" == d.get_type() &&
                    (d.curOption = d.options.indexOf(d.getValue())),
                  this.updateTextFrom(d));
                d.change();
              }
              g.sound.play(G.sound("cancelMenu"));
              this.reloadCheckboxes();
            }
          }
          null != this.boyfriend &&
            this.boyfriend.animation._curAnim.finished &&
            this.boyfriend.dance();
          0 < this.nextAccept && --this.nextAccept;
          La.prototype.update.call(this, a);
        },
        updateTextFrom: function (a) {
          var b = a.displayFormat,
            c = a.getValue();
          "percent" == a.get_type() && (c *= 100);
          var d = a.defaultValue;
          a.set_text(K.replace(K.replace(b, "%v", c), "%d", d));
        },
        clearHold: function () {
          0.5 < this.holdTime && g.sound.play(G.sound("scrollMenu"));
          this.holdTime = 0;
        },
        changeSelection: function (a) {
          null == a && (a = 0);
          this.curSelected += a;
          0 > this.curSelected &&
            (this.curSelected = this.optionsArray.length - 1);
          this.curSelected >= this.optionsArray.length &&
            (this.curSelected = 0);
          this.descText.set_text(
            this.optionsArray[this.curSelected].description
          );
          a = this.descText;
          var b = 16;
          null == b && (b = 17);
          (1 != b && 17 != b) || a.set_x((g.width - a.get_width()) / 2);
          (16 != b && 17 != b) || a.set_y((g.height - a.get_height()) / 2);
          a = this.descText;
          a.set_y(a.y + 270);
          b = a = 0;
          for (var c = this.grpOptions.members; b < c.length; ) {
            var d = c[b];
            ++b;
            d.targetY = a - this.curSelected;
            ++a;
            d.set_alpha(0.6);
            0 == d.targetY && d.set_alpha(1);
          }
          for (a = new Mg(this.grpTexts.members, null); a.hasNext(); )
            (b = a.next()),
              b.set_alpha(0.6),
              b.ID == this.curSelected && b.set_alpha(1);
          this.descBox.setPosition(this.descText.x - 10, this.descText.y - 10);
          this.descBox.setGraphicSize(
            (this.descText.get_width() + 20) | 0,
            (this.descText.get_height() + 25) | 0
          );
          this.descBox.updateHitbox();
          null != this.boyfriend &&
            this.boyfriend.set_visible(
              this.optionsArray[this.curSelected].showBoyfriend
            );
          this.curOption = this.optionsArray[this.curSelected];
          g.sound.play(G.sound("scrollMenu"));
        },
        reloadBoyfriend: function () {
          var a = !1;
          null != this.boyfriend &&
            ((a = this.boyfriend.visible),
            this.boyfriend.kill(),
            this.remove(this.boyfriend),
            this.boyfriend.destroy());
          this.boyfriend = new yc(840, 170, "bf", !0);
          this.boyfriend.setGraphicSize(
            (0.75 * this.boyfriend.get_width()) | 0
          );
          this.boyfriend.updateHitbox();
          this.boyfriend.dance();
          this.insert(1, this.boyfriend);
          this.boyfriend.set_visible(a);
        },
        reloadCheckboxes: function () {
          for (
            var a = new Mg(this.checkboxGroup.members, null);
            a.hasNext();

          ) {
            var b = a.next();
            b.set_daValue(1 == this.optionsArray[b.ID].getValue());
          }
        },
        __class__: Pe,
      });
      var yb = function () {
        this.bindingTime = 0;
        this.leaving = !1;
        this.nextAccept = 5;
        this.rebindingKey = !1;
        this.grpInputsAlt = [];
        this.grpInputs = [];
        this.optionShit = [
          ["NOTES"],
          ["Left", "note_left"],
          ["Down", "note_down"],
          ["Up", "note_up"],
          ["Right", "note_right"],
          [""],
          ["UI"],
          ["Left", "ui_left"],
          ["Down", "ui_down"],
          ["Up", "ui_up"],
          ["Right", "ui_right"],
          [""],
          ["Reset", "reset"],
          ["Accept", "accept"],
          ["Back", "back"],
          ["Pause", "pause"],
          [""],
          ["VOLUME"],
          ["Mute", "volume_mute"],
          ["Up", "volume_up"],
          ["Down", "volume_down"],
          [""],
          ["DEBUG"],
          ["Key 1", "debug_1"],
          ["Key 2", "debug_2"],
        ];
        this.bindLength = 0;
        La.call(this);
        var a = new F(),
          b = G.returnGraphic("menuDesat", null);
        a = a.loadGraphic(b);
        a.set_color(-1412611);
        a.set_x((g.width - a.get_width()) / 2);
        a.set_y((g.height - a.get_height()) / 2);
        a.set_antialiasing(y.globalAntialiasing);
        this.add(a);
        this.grpOptions = new ma();
        this.add(this.grpOptions);
        this.optionShit.push([""]);
        this.optionShit.push([yb.defaultKey]);
        a = 0;
        for (b = this.optionShit.length; a < b; ) {
          var c = a++,
            d = !1,
            e = this.optionShit[c][0] == yb.defaultKey;
          this.unselectableCheck(c, !0) && (d = !0);
          e = new ib(200, 300, this.optionShit[c][0], !d || e);
          e.isMenuItem = !0;
          if (d) {
            var f = 1;
            null == f && (f = 17);
            (1 != f && 17 != f) || e.set_x((g.width - e.get_width()) / 2);
            (16 != f && 17 != f) || e.set_y((g.height - e.get_height()) / 2);
            e.set_y(e.y - 55);
            e.startPosition.set_y(e.startPosition.y - 55);
          }
          e.changeX = !1;
          e.distancePerItem.set_y(60);
          e.targetY = c - yb.curSelected;
          e.snapToPosition();
          this.grpOptions.add(e);
          d ||
            (this.addBindTexts(e, c),
            this.bindLength++,
            0 > yb.curSelected && (yb.curSelected = c));
        }
        this.changeSelection();
      };
      h["options.ControlsSubState"] = yb;
      yb.__name__ = "options.ControlsSubState";
      yb.__super__ = La;
      yb.prototype = q(La.prototype, {
        update: function (a) {
          if (this.rebindingKey) {
            var b = g.keys.firstJustPressed();
            if (-1 < b) {
              var c = y.keyBinds.h[this.optionShit[yb.curSelected][1]];
              c[yb.curAlt ? 1 : 0] = b;
              b = yb.curAlt ? 0 : 1;
              c[b] == c[1 - b] && (c[b] = -1);
              y.keyBinds.h[this.optionShit[yb.curSelected][1]] = c;
              this.reloadKeys();
              g.sound.play(G.sound("confirmMenu"));
              this.rebindingKey = !1;
            }
            this.bindingTime += a;
            5 < this.bindingTime &&
              (yb.curAlt
                ? this.grpInputsAlt[yb.curSelected].set_alpha(1)
                : this.grpInputs[yb.curSelected].set_alpha(1),
              g.sound.play(G.sound("scrollMenu")),
              (this.rebindingKey = !1),
              (this.bindingTime = 0));
          } else
            ia.player1.controls._ui_upP.check() && this.changeSelection(-1),
              ia.player1.controls._ui_downP.check() && this.changeSelection(1),
              (ia.player1.controls._ui_leftP.check() ||
                ia.player1.controls._ui_rightP.check()) &&
                this.changeAlt(),
              ia.player1.controls._back.check() &&
                (y.reloadControls(),
                this.close(),
                g.sound.play(G.sound("cancelMenu"))),
              ia.player1.controls._accept.check() &&
                0 >= this.nextAccept &&
                (this.optionShit[yb.curSelected][0] == yb.defaultKey
                  ? ((y.keyBinds = Q.createCopy(y.defaultKeys.h)),
                    this.reloadKeys(),
                    this.changeSelection(),
                    g.sound.play(G.sound("confirmMenu")))
                  : this.unselectableCheck(yb.curSelected) ||
                    ((this.bindingTime = 0),
                    (this.rebindingKey = !0),
                    yb.curAlt
                      ? this.grpInputsAlt[this.getInputTextNum()].set_alpha(0)
                      : this.grpInputs[this.getInputTextNum()].set_alpha(0),
                    g.sound.play(G.sound("scrollMenu"))));
          0 < this.nextAccept && --this.nextAccept;
          La.prototype.update.call(this, a);
        },
        getInputTextNum: function () {
          for (var a = 0, b = 0, c = yb.curSelected; b < c; ) {
            var d = b++;
            1 < this.optionShit[d].length && ++a;
          }
          return a;
        },
        changeSelection: function (a) {
          for (
            null == a && (a = 0);
            (yb.curSelected += a),
              0 > yb.curSelected &&
                (yb.curSelected = this.optionShit.length - 1),
              yb.curSelected >= this.optionShit.length && (yb.curSelected = 0),
              this.unselectableCheck(yb.curSelected);

          );
          for (var b = (a = 0), c = this.grpInputs.length; b < c; ) {
            var d = b++;
            this.grpInputs[d].set_alpha(0.6);
          }
          b = 0;
          for (c = this.grpInputsAlt.length; b < c; )
            (d = b++), this.grpInputsAlt[d].set_alpha(0.6);
          b = 0;
          for (c = this.grpOptions.members; b < c.length; ) {
            var e = c[b];
            ++b;
            e.targetY = a - yb.curSelected;
            if (
              !this.unselectableCheck(a++) &&
              (e.set_alpha(0.6), 0 == e.targetY)
            )
              if ((e.set_alpha(1), yb.curAlt))
                for (var f = 0, k = this.grpInputsAlt.length; f < k; ) {
                  if (((d = f++), this.grpInputsAlt[d].sprTracker == e)) {
                    this.grpInputsAlt[d].set_alpha(1);
                    break;
                  }
                }
              else
                for (d = 0, f = this.grpInputs.length; d < f; )
                  if (((k = d++), this.grpInputs[k].sprTracker == e)) {
                    this.grpInputs[k].set_alpha(1);
                    break;
                  }
          }
          g.sound.play(G.sound("scrollMenu"));
        },
        changeAlt: function () {
          yb.curAlt = !yb.curAlt;
          for (var a = 0, b = this.grpInputs.length; a < b; ) {
            var c = a++;
            if (
              this.grpInputs[c].sprTracker ==
              this.grpOptions.members[yb.curSelected]
            ) {
              this.grpInputs[c].set_alpha(0.6);
              yb.curAlt || this.grpInputs[c].set_alpha(1);
              break;
            }
          }
          a = 0;
          for (b = this.grpInputsAlt.length; a < b; )
            if (
              ((c = a++),
              this.grpInputsAlt[c].sprTracker ==
                this.grpOptions.members[yb.curSelected])
            ) {
              this.grpInputsAlt[c].set_alpha(0.6);
              yb.curAlt && this.grpInputsAlt[c].set_alpha(1);
              break;
            }
          g.sound.play(G.sound("scrollMenu"));
        },
        unselectableCheck: function (a, b) {
          null == b && (b = !1);
          return this.optionShit[a][0] == yb.defaultKey
            ? b
            : 2 > this.optionShit[a].length
            ? this.optionShit[a][0] != yb.defaultKey
            : !1;
        },
        addBindTexts: function (a, b) {
          b = y.keyBinds.h[this.optionShit[b][1]];
          var c = new Rc(Qm.getKeyName(b[0]), 400, -55);
          c.setPosition(a.x + 400, a.y - 55);
          c.sprTracker = a;
          this.grpInputs.push(c);
          this.add(c);
          b = new Rc(Qm.getKeyName(b[1]), 650, -55);
          b.setPosition(a.x + 650, a.y - 55);
          b.sprTracker = a;
          this.grpInputsAlt.push(b);
          this.add(b);
        },
        reloadKeys: function () {
          for (; 0 < this.grpInputs.length; ) {
            var a = this.grpInputs[0];
            a.kill();
            X.remove(this.grpInputs, a);
            a.destroy();
          }
          for (; 0 < this.grpInputsAlt.length; )
            (a = this.grpInputsAlt[0]),
              a.kill(),
              X.remove(this.grpInputsAlt, a),
              a.destroy();
          wb.trace(
            "Reloaded keys: " +
              (null == y.keyBinds ? "null" : Q.stringify(y.keyBinds.h)),
            {
              fileName: "source/options/ControlsSubState.hx",
              lineNumber: 304,
              className: "options.ControlsSubState",
              methodName: "reloadKeys",
            }
          );
          for (var b = 0, c = this.grpOptions.length; b < c; ) {
            var d = b++;
            this.unselectableCheck(d, !0) ||
              this.addBindTexts(this.grpOptions.members[d], d);
          }
          var e = 0;
          b = 0;
          for (c = this.grpInputs.length; b < c; )
            (d = b++), this.grpInputs[d].set_alpha(0.6);
          b = 0;
          for (c = this.grpInputsAlt.length; b < c; )
            (d = b++), this.grpInputsAlt[d].set_alpha(0.6);
          b = 0;
          for (c = this.grpOptions.members; b < c.length; )
            if (
              ((a = c[b]),
              ++b,
              (a.targetY = e - yb.curSelected),
              !this.unselectableCheck(e++) &&
                (a.set_alpha(0.6), 0 == a.targetY))
            )
              if ((a.set_alpha(1), yb.curAlt))
                for (var f = 0, g = this.grpInputsAlt.length; f < g; )
                  (d = f++),
                    this.grpInputsAlt[d].sprTracker == a &&
                      this.grpInputsAlt[d].set_alpha(1);
              else
                for (d = 0, f = this.grpInputs.length; d < f; )
                  (g = d++),
                    this.grpInputs[g].sprTracker == a &&
                      this.grpInputs[g].set_alpha(1);
        },
        __class__: yb,
      });
      var Bm = function () {
        this.title = "Gameplay Settings";
        this.rpcTitle = "Gameplay Settings Menu";
        var a = new qc(
          "Controller Mode",
          "Check this if you want to play with\na controller instead of using your Keyboard.",
          "controllerMode",
          "bool",
          !1
        );
        this.addOption(a);
        a = new qc(
          "Downscroll",
          "If checked, notes go Down instead of Up, simple enough.",
          "downScroll",
          "bool",
          !1
        );
        this.addOption(a);
        a = new qc(
          "Middlescroll",
          "If checked, your notes get centered.",
          "middleScroll",
          "bool",
          !1
        );
        this.addOption(a);
        a = new qc(
          "Opponent Notes",
          "If unchecked, opponent notes get hidden.",
          "opponentStrums",
          "bool",
          !0
        );
        this.addOption(a);
        a = new qc(
          "Ghost Tapping",
          "If checked, you won't get misses from pressing keys\nwhile there are no notes able to be hit.",
          "ghostTapping",
          "bool",
          !0
        );
        this.addOption(a);
        a = new qc(
          "Disable Reset Button",
          "If checked, pressing Reset won't do anything.",
          "noReset",
          "bool",
          !1
        );
        this.addOption(a);
        a = new qc(
          "Hitsound Volume",
          'Funny notes does "Tick!" when you hit them."',
          "hitsoundVolume",
          "percent",
          0
        );
        this.addOption(a);
        a.scrollSpeed = 1.6;
        a.minValue = 0;
        a.maxValue = 1;
        a.changeValue = 0.1;
        a.decimals = 1;
        a.onChange = n(this, this.onChangeHitsoundVolume);
        a = new qc(
          "Rating Offset",
          'Changes how late/early you have to hit for a "Sick!"\nHigher values mean you have to hit later.',
          "ratingOffset",
          "int",
          0
        );
        a.displayFormat = "%vms";
        a.scrollSpeed = 20;
        a.minValue = -30;
        a.maxValue = 30;
        this.addOption(a);
        a = new qc(
          "Sick! Hit Window",
          'Changes the amount of time you have\nfor hitting a "Sick!" in milliseconds.',
          "sickWindow",
          "int",
          45
        );
        a.displayFormat = "%vms";
        a.scrollSpeed = 15;
        a.minValue = 15;
        a.maxValue = 45;
        this.addOption(a);
        a = new qc(
          "Good Hit Window",
          'Changes the amount of time you have\nfor hitting a "Good" in milliseconds.',
          "goodWindow",
          "int",
          90
        );
        a.displayFormat = "%vms";
        a.scrollSpeed = 30;
        a.minValue = 15;
        a.maxValue = 90;
        this.addOption(a);
        a = new qc(
          "Bad Hit Window",
          'Changes the amount of time you have\nfor hitting a "Bad" in milliseconds.',
          "badWindow",
          "int",
          135
        );
        a.displayFormat = "%vms";
        a.scrollSpeed = 60;
        a.minValue = 15;
        a.maxValue = 135;
        this.addOption(a);
        a = new qc(
          "Safe Frames",
          "Changes how many frames you have for\nhitting a note earlier or late.",
          "safeFrames",
          "float",
          10
        );
        a.scrollSpeed = 5;
        a.minValue = 2;
        a.maxValue = 10;
        a.changeValue = 0.1;
        this.addOption(a);
        Pe.call(this);
      };
      h["options.GameplaySettingsSubState"] = Bm;
      Bm.__name__ = "options.GameplaySettingsSubState";
      Bm.__super__ = Pe;
      Bm.prototype = q(Pe.prototype, {
        onChangeHitsoundVolume: function () {
          g.sound.play(G.sound("hitsound"), y.hitsoundVolume);
        },
        __class__: Bm,
      });
      var Cm = function () {
        this.title = "Graphics";
        this.rpcTitle = "Graphics Settings Menu";
        var a = new qc(
          "Low Quality",
          "If checked, disables some background details,\ndecreases loading times and improves performance.",
          "lowQuality",
          "bool",
          !1
        );
        this.addOption(a);
        a = new qc(
          "Anti-Aliasing",
          "If unchecked, disables anti-aliasing, increases performance\nat the cost of sharper visuals.",
          "globalAntialiasing",
          "bool",
          !0
        );
        a.showBoyfriend = !0;
        a.onChange = n(this, this.onChangeAntiAliasing);
        this.addOption(a);
        a = new qc(
          "Shaders",
          "If unchecked, disables shaders.\nIt's used for some visual effects, and also CPU intensive for weaker PCs.",
          "shaders",
          "bool",
          !0
        );
        this.addOption(a);
        Pe.call(this);
      };
      h["options.GraphicsSettingsSubState"] = Cm;
      Cm.__name__ = "options.GraphicsSettingsSubState";
      Cm.__super__ = Pe;
      Cm.prototype = q(Pe.prototype, {
        onChangeAntiAliasing: function () {
          for (var a = 0, b = this.members; a < b.length; ) {
            var c = b[a];
            ++a;
            null != c &&
              c instanceof F &&
              !(c instanceof W) &&
              c.set_antialiasing(y.globalAntialiasing);
          }
        },
        onChangeFramerate: function () {
          y.framerate > g.drawFramerate
            ? (g.set_updateFramerate(y.framerate),
              g.set_drawFramerate(y.framerate))
            : (g.set_drawFramerate(y.framerate),
              g.set_updateFramerate(y.framerate));
        },
        __class__: Cm,
      });
      var Dm = function (a, b) {
        this.lastBeatHit = -1;
        var c = new ba(0, 0);
        this.startComboOffset = c;
        this.startMousePos = c = new ba(0, 0);
        this.holdingObjectType = null;
        this.onComboMenu = !0;
        this.holdTime = 0;
        this.delayMax = 500;
        this.barPercent = this.delayMin = 0;
        I.call(this, a, b);
      };
      h["options.NoteOffsetState"] = Dm;
      Dm.__name__ = "options.NoteOffsetState";
      Dm.__super__ = I;
      Dm.prototype = q(I.prototype, {
        create: function () {
          this.camGame = new Ob();
          this.camHUD = new Ob();
          this.camOther = new Ob();
          this.camHUD.bgColor &= 16777215;
          this.camHUD.bgColor |= 0;
          this.camOther.bgColor &= 16777215;
          this.camOther.bgColor |= 0;
          g.cameras.reset(this.camGame);
          g.cameras.add(this.camHUD, !1);
          g.cameras.add(this.camOther, !1);
          g.cameras.setDefaultDrawTarget(this.camGame, !0);
          od.nextCamera = this.camOther;
          var a = g.camera.scroll,
            b = 120,
            c = 130;
          null == c && (c = 0);
          null == b && (b = 0);
          a.set_x(b);
          a.set_y(c);
          this.persistentUpdate = !0;
          g.sound.pause();
          a = new cc("stageback", -600, -200, 0.9, 0.9);
          this.add(a);
          a = new cc("stagefront", -650, 600, 0.9, 0.9);
          a.setGraphicSize((1.1 * a.get_width()) | 0);
          a.updateHitbox();
          this.add(a);
          y.lowQuality ||
            ((a = new cc("stage_light", -125, -100, 0.9, 0.9)),
            a.setGraphicSize((1.1 * a.get_width()) | 0),
            a.updateHitbox(),
            this.add(a),
            (a = new cc("stage_light", 1225, -100, 0.9, 0.9)),
            a.setGraphicSize((1.1 * a.get_width()) | 0),
            a.updateHitbox(),
            a.set_flipX(!0),
            this.add(a),
            (a = new cc("stagecurtains", -500, -300, 1.3, 1.3)),
            a.setGraphicSize((0.9 * a.get_width()) | 0),
            a.updateHitbox(),
            this.add(a));
          a = this.gf = new yc(400, 130, "gf");
          a.set_x(a.x + this.gf.positionArray[0]);
          a = this.gf;
          a.set_y(a.y + this.gf.positionArray[1]);
          a = this.gf.scrollFactor;
          c = b = 0.95;
          null == c && (c = 0);
          null == b && (b = 0);
          a.set_x(b);
          a.set_y(c);
          a = this.boyfriend = new yc(770, 100, "bf", !0);
          a.set_x(a.x + this.boyfriend.positionArray[0]);
          a = this.boyfriend;
          a.set_y(a.y + this.boyfriend.positionArray[1]);
          this.add(this.gf);
          this.add(this.boyfriend);
          a = this.coolText = new W(0, 0, 0, "", 32);
          a.set_x((g.width - a.get_width()) / 2);
          a.set_y((g.height - a.get_height()) / 2);
          this.coolText.set_x(0.35 * g.width);
          a = new F();
          var d = G.returnGraphic("sick", null);
          this.rating = a.loadGraphic(d);
          this.rating.set_cameras([this.camHUD]);
          this.rating.setGraphicSize((0.7 * this.rating.get_width()) | 0);
          this.rating.updateHitbox();
          this.rating.set_antialiasing(y.globalAntialiasing);
          this.add(this.rating);
          this.comboNums = new wa();
          this.comboNums.set_cameras([this.camHUD]);
          this.add(this.comboNums);
          a = [];
          a.push(g.random.int(0, 9));
          a.push(g.random.int(0, 9));
          a.push(g.random.int(0, 9));
          for (c = b = 0; c < a.length; ) {
            d = a[c];
            ++c;
            var e = new F(43 * b);
            d = G.returnGraphic("num" + d, null);
            d = e.loadGraphic(d);
            d.set_cameras([this.camHUD]);
            d.setGraphicSize((0.5 * d.get_width()) | 0);
            d.updateHitbox();
            d.set_antialiasing(y.globalAntialiasing);
            this.comboNums.add(d);
            ++b;
          }
          this.dumbTexts = new ma();
          this.dumbTexts.set_cameras([this.camHUD]);
          this.add(this.dumbTexts);
          this.createTexts();
          this.repositionCombo();
          this.beatText = new ib(0, 0, "Beat Hit!", !0);
          this.beatText.set_scaleX(0.6);
          this.beatText.set_scaleY(0.6);
          a = this.beatText;
          a.set_x(a.x + 260);
          this.beatText.set_alpha(0);
          this.beatText.acceleration.set_y(250);
          this.beatText.set_visible(!1);
          this.add(this.beatText);
          this.timeTxt = new W(0, 600, g.width, "", 32);
          this.timeTxt.setFormat(
            "assets/fonts/vcr.ttf",
            32,
            -1,
            "center",
            Ya.OUTLINE,
            -16777216
          );
          a = this.timeTxt.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.timeTxt.set_borderSize(2);
          this.timeTxt.set_visible(!1);
          this.timeTxt.set_cameras([this.camHUD]);
          this.barPercent = y.noteOffset;
          this.updateNoteDelay();
          a = new F(0, this.timeTxt.y + 8);
          d = G.returnGraphic("timeBar", null);
          this.timeBarBG = a.loadGraphic(d);
          this.timeBarBG.setGraphicSize((1.2 * this.timeBarBG.get_width()) | 0);
          this.timeBarBG.updateHitbox();
          this.timeBarBG.set_cameras([this.camHUD]);
          a = this.timeBarBG;
          b = 1;
          null == b && (b = 17);
          (1 != b && 17 != b) || a.set_x((g.width - a.get_width()) / 2);
          (16 != b && 17 != b) || a.set_y((g.height - a.get_height()) / 2);
          this.timeBarBG.set_visible(!1);
          this.timeBar = new Xf(
            0,
            this.timeBarBG.y + 4,
            jd.LEFT_TO_RIGHT,
            (this.timeBarBG.get_width() - 8) | 0,
            (this.timeBarBG.get_height() - 8) | 0,
            this,
            "barPercent",
            this.delayMin,
            this.delayMax
          );
          a = this.timeBar.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          a = this.timeBar;
          b = 1;
          null == b && (b = 17);
          (1 != b && 17 != b) || a.set_x((g.width - a.get_width()) / 2);
          (16 != b && 17 != b) || a.set_y((g.height - a.get_height()) / 2);
          this.timeBar.createFilledBar(-16777216, -1);
          this.timeBar.set_numDivisions(800);
          this.timeBar.set_visible(!1);
          this.timeBar.set_cameras([this.camHUD]);
          this.add(this.timeBarBG);
          this.add(this.timeBar);
          this.add(this.timeTxt);
          b = new F().makeGraphic(g.width, 40, -16777216);
          a = b.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          b.set_alpha(0.6);
          b.set_cameras([this.camHUD]);
          this.add(b);
          this.changeModeText = new W(0, 4, g.width, "", 32);
          this.changeModeText.setFormat(
            "assets/fonts/vcr.ttf",
            32,
            -1,
            "center"
          );
          a = this.changeModeText.scrollFactor;
          a.set_x(0);
          a.set_y(0);
          this.changeModeText.set_cameras([this.camHUD]);
          this.add(this.changeModeText);
          this.updateMode();
          P.changeBPM(128);
          a = g.sound;
          b = G.returnSound("music", "offsetSong", null);
          a.playMusic(b, 1, !0);
          I.prototype.create.call(this);
        },
        update: function (a) {
          var b = 1,
            c = g.keys.pressed;
          c.keyManager.checkStatusUnsafe(16, c.status) && (b = 10);
          if (this.onComboMenu) {
            c = g.keys.justPressed;
            var d = c.keyManager.checkStatusUnsafe(37, c.status);
            c = g.keys.justPressed;
            var e = c.keyManager.checkStatusUnsafe(39, c.status);
            c = g.keys.justPressed;
            var f = c.keyManager.checkStatusUnsafe(38, c.status);
            c = g.keys.justPressed;
            var k = c.keyManager.checkStatusUnsafe(40, c.status);
            c = g.keys.justPressed;
            var h = c.keyManager.checkStatusUnsafe(65, c.status);
            c = g.keys.justPressed;
            var l = c.keyManager.checkStatusUnsafe(68, c.status);
            c = g.keys.justPressed;
            var p = c.keyManager.checkStatusUnsafe(87, c.status);
            c = g.keys.justPressed;
            c = [
              d,
              e,
              f,
              k,
              h,
              l,
              p,
              c.keyManager.checkStatusUnsafe(83, c.status),
            ];
            if (-1 != c.indexOf(!0)) {
              d = 0;
              for (e = c.length; d < e; )
                if (((f = d++), c[f]))
                  switch (f) {
                    case 0:
                      y.comboOffset[0] -= b;
                      break;
                    case 1:
                      y.comboOffset[0] += b;
                      break;
                    case 2:
                      y.comboOffset[1] += b;
                      break;
                    case 3:
                      y.comboOffset[1] -= b;
                      break;
                    case 4:
                      y.comboOffset[2] -= b;
                      break;
                    case 5:
                      y.comboOffset[2] += b;
                      break;
                    case 6:
                      y.comboOffset[3] += b;
                      break;
                    case 7:
                      y.comboOffset[3] -= b;
                  }
              this.repositionCombo();
            }
            2 == g.mouse._leftButton.current &&
              ((this.holdingObjectType = null),
              g.mouse.getScreenPosition(this.camHUD, this.startMousePos),
              0 <= this.startMousePos.x - this.comboNums.x &&
              this.startMousePos.x - this.comboNums.x <=
                this.comboNums.get_width() &&
              0 <= this.startMousePos.y - this.comboNums.y &&
              this.startMousePos.y - this.comboNums.y <=
                this.comboNums.get_height()
                ? ((this.holdingObjectType = !0),
                  this.startComboOffset.set_x(y.comboOffset[2]),
                  this.startComboOffset.set_y(y.comboOffset[3]))
                : 0 <= this.startMousePos.x - this.rating.x &&
                  this.startMousePos.x - this.rating.x <=
                    this.rating.get_width() &&
                  0 <= this.startMousePos.y - this.rating.y &&
                  this.startMousePos.y - this.rating.y <=
                    this.rating.get_height() &&
                  ((this.holdingObjectType = !1),
                  this.startComboOffset.set_x(y.comboOffset[0]),
                  this.startComboOffset.set_y(y.comboOffset[1])));
            -1 == g.mouse._leftButton.current &&
              (this.holdingObjectType = null);
            null != this.holdingObjectType &&
              ((c = g.mouse), c._prevX != c.x || c._prevY != c.y) &&
              ((c = g.mouse.getScreenPosition(this.camHUD)),
              (b = this.holdingObjectType ? 2 : 0),
              (y.comboOffset[b] = Math.round(
                c.x - this.startMousePos.x + this.startComboOffset.x
              )),
              (y.comboOffset[b + 1] = -Math.round(
                c.y - this.startMousePos.y - this.startComboOffset.y
              )),
              this.repositionCombo());
            if (ia.player1.controls._reset.check()) {
              d = 0;
              for (e = y.comboOffset.length; d < e; )
                (f = d++), (y.comboOffset[f] = 0);
              this.repositionCombo();
            }
          } else {
            ia.player1.controls._ui_leftP.check()
              ? ((this.barPercent = Math.max(
                  this.delayMin,
                  Math.min(y.noteOffset - 1, this.delayMax)
                )),
                this.updateNoteDelay())
              : ia.player1.controls._ui_rightP.check() &&
                ((this.barPercent = Math.max(
                  this.delayMin,
                  Math.min(y.noteOffset + 1, this.delayMax)
                )),
                this.updateNoteDelay());
            b = 1;
            if (
              ia.player1.controls._ui_left.check() ||
              ia.player1.controls._ui_right.check()
            )
              (this.holdTime += a),
                ia.player1.controls._ui_left.check() && (b = -1);
            if (
              ia.player1.controls._ui_leftR.check() ||
              ia.player1.controls._ui_rightR.check()
            )
              this.holdTime = 0;
            0.5 < this.holdTime &&
              ((this.barPercent += 100 * a * b),
              (this.barPercent = Math.max(
                this.delayMin,
                Math.min(this.barPercent, this.delayMax)
              )),
              this.updateNoteDelay());
            ia.player1.controls._reset.check() &&
              ((this.barPercent = this.holdTime = 0), this.updateNoteDelay());
          }
          ia.player1.controls._accept.check() &&
            ((this.onComboMenu = !this.onComboMenu), this.updateMode());
          ia.player1.controls._back.check() &&
            (null != this.zoomTween && this.zoomTween.cancel(),
            null != this.beatTween && this.beatTween.cancel(),
            (this.persistentUpdate = !1),
            (od.nextCamera = this.camOther),
            I.switchState(new me()),
            (b = g.sound),
            (c = G.returnSound("music", "freakyMenu", null)),
            b.playMusic(c, 1, !0),
            g.mouse.set_visible(!1));
          P.songPosition = g.sound.music._time;
          I.prototype.update.call(this, a);
        },
        beatHit: function () {
          var a = this;
          I.prototype.beatHit.call(this);
          this.lastBeatHit != this.curBeat &&
            (0 == this.curBeat % 2 && (this.boyfriend.dance(), this.gf.dance()),
            2 == this.curBeat % 4 &&
              (g.camera.set_zoom(1.15),
              null != this.zoomTween && this.zoomTween.cancel(),
              (this.zoomTween = la.tween(g.camera, { zoom: 1 }, 1, {
                ease: Aa.circOut,
                onComplete: function (b) {
                  a.zoomTween = null;
                },
              })),
              this.beatText.set_alpha(1),
              this.beatText.set_y(320),
              this.beatText.velocity.set_y(-150),
              null != this.beatTween && this.beatTween.cancel(),
              (this.beatTween = la.tween(this.beatText, { alpha: 0 }, 1, {
                ease: Aa.sineIn,
                onComplete: function (b) {
                  a.beatTween = null;
                },
              }))),
            (this.lastBeatHit = this.curBeat));
        },
        repositionCombo: function () {
          var a = this.rating;
          a.set_x((g.width - a.get_width()) / 2);
          a.set_y((g.height - a.get_height()) / 2);
          this.rating.set_x(this.coolText.x - 40 + y.comboOffset[0]);
          a = this.rating;
          a.set_y(a.y - (60 + y.comboOffset[1]));
          a = this.comboNums;
          a.set_x((g.width - a.get_width()) / 2);
          a.set_y((g.height - a.get_height()) / 2);
          this.comboNums.set_x(this.coolText.x - 90 + y.comboOffset[2]);
          a = this.comboNums;
          a.set_y(a.y + (80 - y.comboOffset[3]));
          this.reloadTexts();
        },
        createTexts: function () {
          var a = new W(10, 48, 0, "", 24);
          a.setFormat(
            "assets/fonts/vcr.ttf",
            24,
            -1,
            "left",
            Ya.OUTLINE,
            -16777216
          );
          var b = a.scrollFactor;
          b.set_x(0);
          b.set_y(0);
          a.set_borderSize(2);
          this.dumbTexts.add(a);
          a.set_cameras([this.camHUD]);
          a = new W(10, 78, 0, "", 24);
          a.setFormat(
            "assets/fonts/vcr.ttf",
            24,
            -1,
            "left",
            Ya.OUTLINE,
            -16777216
          );
          b = a.scrollFactor;
          b.set_x(0);
          b.set_y(0);
          a.set_borderSize(2);
          this.dumbTexts.add(a);
          a.set_cameras([this.camHUD]);
          a = new W(10, 108, 0, "", 24);
          a.setFormat(
            "assets/fonts/vcr.ttf",
            24,
            -1,
            "left",
            Ya.OUTLINE,
            -16777216
          );
          b = a.scrollFactor;
          b.set_x(0);
          b.set_y(0);
          a.set_borderSize(2);
          this.dumbTexts.add(a);
          a.set_cameras([this.camHUD]);
          a.set_y(a.y + 24);
          a = new W(10, 138, 0, "", 24);
          a.setFormat(
            "assets/fonts/vcr.ttf",
            24,
            -1,
            "left",
            Ya.OUTLINE,
            -16777216
          );
          b = a.scrollFactor;
          b.set_x(0);
          b.set_y(0);
          a.set_borderSize(2);
          this.dumbTexts.add(a);
          a.set_cameras([this.camHUD]);
          a.set_y(a.y + 24);
        },
        reloadTexts: function () {
          for (var a = 0, b = this.dumbTexts.length; a < b; ) {
            var c = a++;
            switch (c) {
              case 0:
                this.dumbTexts.members[c].set_text("Rating Offset:");
                break;
              case 1:
                this.dumbTexts.members[c].set_text(
                  "[" + y.comboOffset[0] + ", " + y.comboOffset[1] + "]"
                );
                break;
              case 2:
                this.dumbTexts.members[c].set_text("Numbers Offset:");
                break;
              case 3:
                this.dumbTexts.members[c].set_text(
                  "[" + y.comboOffset[2] + ", " + y.comboOffset[3] + "]"
                );
            }
          }
        },
        updateNoteDelay: function () {
          y.noteOffset = Math.round(this.barPercent);
          this.timeTxt.set_text(
            "Current offset: " + Math.floor(this.barPercent) + " ms"
          );
        },
        updateMode: function () {
          this.rating.set_visible(this.onComboMenu);
          this.comboNums.set_visible(this.onComboMenu);
          this.dumbTexts.set_visible(this.onComboMenu);
          this.timeBarBG.set_visible(!this.onComboMenu);
          this.timeBar.set_visible(!this.onComboMenu);
          this.timeTxt.set_visible(!this.onComboMenu);
          this.beatText.set_visible(!this.onComboMenu);
          this.onComboMenu
            ? this.changeModeText.set_text(
                "< Combo Offset (Press Accept to Switch) >"
              )
            : this.changeModeText.set_text(
                "< Note/Beat Delay (Press Accept to Switch) >"
              );
          this.changeModeText.set_text(this.changeModeText.text.toUpperCase());
          g.mouse.set_visible(this.onComboMenu);
        },
        __class__: Dm,
      });
      var fb = function () {
        this.changingNote = !1;
        this.posX = 230;
        this.nextAccept = 5;
        this.curValue = this.holdTime = 0;
        this.shaderArray = [];
        La.call(this);
        var a = new F(),
          b = G.returnGraphic("menuDesat", null);
        a = a.loadGraphic(b);
        a.set_color(-1412611);
        a.set_x((g.width - a.get_width()) / 2);
        a.set_y((g.height - a.get_height()) / 2);
        a.set_antialiasing(y.globalAntialiasing);
        this.add(a);
        this.blackBG = new F(this.posX - 25).makeGraphic(870, 200, -16777216);
        this.blackBG.set_alpha(0.4);
        this.add(this.blackBG);
        this.grpNotes = new ma();
        this.add(this.grpNotes);
        this.grpNumbers = new ma();
        this.add(this.grpNumbers);
        a = 0;
        for (var c = y.arrowHSV.length; a < c; ) {
          var d = a++;
          b = 165 * d + 35;
          var e = new ib(
            this.posX + 250,
            b + 60,
            M.string(y.arrowHSV[d][0]),
            !0
          );
          this.grpNumbers.add(e);
          e = new ib(
            this.posX + 225 + 250,
            b + 60,
            M.string(y.arrowHSV[d][1]),
            !0
          );
          this.grpNumbers.add(e);
          e = new ib(
            this.posX + 450 + 250,
            b + 60,
            M.string(y.arrowHSV[d][2]),
            !0
          );
          this.grpNumbers.add(e);
          e = new F(this.posX, b);
          b = G.returnGraphic("NOTE_assets", null);
          e.set_frames(
            jb.fromSparrow(b, G.getPath("images/NOTE_assets.xml", "TEXT", null))
          );
          e.animation.addByPrefix(
            "idle",
            ["purple0", "blue0", "green0", "red0"][d]
          );
          e.animation.play("idle");
          e.set_antialiasing(y.globalAntialiasing);
          this.grpNotes.add(e);
          b = new Kg();
          e.shader = b.shader;
          b.set_hue(y.arrowHSV[d][0] / 360);
          b.set_saturation(y.arrowHSV[d][1] / 100);
          b.set_brightness(y.arrowHSV[d][2] / 100);
          this.shaderArray.push(b);
        }
        this.hsbText = new ib(
          this.posX + 560,
          0,
          "Hue    Saturation  Brightness",
          !1
        );
        this.hsbText.set_scaleX(0.6);
        this.hsbText.set_scaleY(0.6);
        this.add(this.hsbText);
        this.changeSelection();
      };
      h["options.NotesSubState"] = fb;
      fb.__name__ = "options.NotesSubState";
      fb.__super__ = La;
      fb.prototype = q(La.prototype, {
        update: function (a) {
          if (this.changingNote)
            if (0.5 > this.holdTime)
              if (
                (ia.player1.controls._ui_leftP.check()
                  ? (this.updateValue(-1), g.sound.play(G.sound("scrollMenu")))
                  : ia.player1.controls._ui_rightP.check()
                  ? (this.updateValue(1), g.sound.play(G.sound("scrollMenu")))
                  : ia.player1.controls._reset.check() &&
                    (this.resetValue(fb.curSelected, fb.typeSelected),
                    g.sound.play(G.sound("scrollMenu"))),
                ia.player1.controls._ui_leftR.check() ||
                  ia.player1.controls._ui_rightR.check())
              )
                this.holdTime = 0;
              else {
                if (
                  ia.player1.controls._ui_left.check() ||
                  ia.player1.controls._ui_right.check()
                )
                  this.holdTime += a;
              }
            else {
              var b = 90;
              switch (fb.typeSelected) {
                case 1:
                case 2:
                  b = 50;
              }
              ia.player1.controls._ui_left.check()
                ? this.updateValue(a * -b)
                : ia.player1.controls._ui_right.check() &&
                  this.updateValue(a * b);
              if (
                ia.player1.controls._ui_leftR.check() ||
                ia.player1.controls._ui_rightR.check()
              )
                g.sound.play(G.sound("scrollMenu")), (this.holdTime = 0);
            }
          else if (
            (ia.player1.controls._ui_upP.check() &&
              (this.changeSelection(-1), g.sound.play(G.sound("scrollMenu"))),
            ia.player1.controls._ui_downP.check() &&
              (this.changeSelection(1), g.sound.play(G.sound("scrollMenu"))),
            ia.player1.controls._ui_leftP.check() &&
              (this.changeType(-1), g.sound.play(G.sound("scrollMenu"))),
            ia.player1.controls._ui_rightP.check() &&
              (this.changeType(1), g.sound.play(G.sound("scrollMenu"))),
            ia.player1.controls._reset.check() &&
              (this.resetValue(fb.curSelected, 0),
              this.resetValue(fb.curSelected, 1),
              this.resetValue(fb.curSelected, 2),
              g.sound.play(G.sound("scrollMenu"))),
            ia.player1.controls._accept.check() && 0 >= this.nextAccept)
          ) {
            g.sound.play(G.sound("scrollMenu"));
            this.changingNote = !0;
            b = this.holdTime = 0;
            for (var c = this.grpNumbers.length; b < c; ) {
              var d = b++,
                e = this.grpNumbers.members[d];
              e.set_alpha(0);
              3 * fb.curSelected + fb.typeSelected == d && e.set_alpha(1);
            }
            b = 0;
            for (c = this.grpNotes.length; b < c; )
              (d = b++),
                (e = this.grpNotes.members[d]),
                e.set_alpha(0),
                fb.curSelected == d && e.set_alpha(1);
            La.prototype.update.call(this, a);
            return;
          }
          if (
            ia.player1.controls._back.check() ||
            (this.changingNote && ia.player1.controls._accept.check())
          )
            this.changingNote ? this.changeSelection() : this.close(),
              (this.changingNote = !1),
              g.sound.play(G.sound("cancelMenu"));
          0 < this.nextAccept && --this.nextAccept;
          La.prototype.update.call(this, a);
        },
        changeSelection: function (a) {
          null == a && (a = 0);
          fb.curSelected += a;
          0 > fb.curSelected && (fb.curSelected = y.arrowHSV.length - 1);
          fb.curSelected >= y.arrowHSV.length && (fb.curSelected = 0);
          this.curValue = y.arrowHSV[fb.curSelected][fb.typeSelected];
          this.updateValue();
          a = 0;
          for (var b = this.grpNumbers.length; a < b; ) {
            var c = a++,
              d = this.grpNumbers.members[c];
            d.set_alpha(0.6);
            3 * fb.curSelected + fb.typeSelected == c && d.set_alpha(1);
          }
          a = 0;
          for (b = this.grpNotes.length; a < b; ) {
            c = a++;
            d = this.grpNotes.members[c];
            d.set_alpha(0.6);
            var e = d.scale,
              f = 0.75,
              k = 0.75;
            null == k && (k = 0);
            null == f && (f = 0);
            e.set_x(f);
            e.set_y(k);
            fb.curSelected == c &&
              (d.set_alpha(1),
              (c = d.scale),
              (f = e = 1),
              null == f && (f = 0),
              null == e && (e = 0),
              c.set_x(e),
              c.set_y(f),
              this.hsbText.set_y(d.y - 70),
              this.blackBG.set_y(d.y - 20));
          }
          g.sound.play(G.sound("scrollMenu"));
        },
        changeType: function (a) {
          null == a && (a = 0);
          fb.typeSelected += a;
          0 > fb.typeSelected && (fb.typeSelected = 2);
          2 < fb.typeSelected && (fb.typeSelected = 0);
          this.curValue = y.arrowHSV[fb.curSelected][fb.typeSelected];
          this.updateValue();
          a = 0;
          for (var b = this.grpNumbers.length; a < b; ) {
            var c = a++,
              d = this.grpNumbers.members[c];
            d.set_alpha(0.6);
            3 * fb.curSelected + fb.typeSelected == c && d.set_alpha(1);
          }
        },
        resetValue: function (a, b) {
          this.curValue = 0;
          y.arrowHSV[a][b] = 0;
          switch (b) {
            case 0:
              this.shaderArray[a].set_hue(0);
              break;
            case 1:
              this.shaderArray[a].set_saturation(0);
              break;
            case 2:
              this.shaderArray[a].set_brightness(0);
          }
          var c = this.grpNumbers.members[3 * a + b];
          c.set_text("0");
          a = (40 * (c.letters.length - 1)) / 2;
          b = 0;
          for (c = c.letters; b < c.length; ) {
            var d = c[b];
            ++b;
            d.offset.set_x(d.offset.x + a);
          }
        },
        updateValue: function (a) {
          null == a && (a = 0);
          this.curValue += a;
          a = Math.round(this.curValue);
          var b = 180;
          switch (fb.typeSelected) {
            case 1:
            case 2:
              b = 100;
          }
          a < -b ? (this.curValue = -b) : a > b && (this.curValue = b);
          a = Math.round(this.curValue);
          y.arrowHSV[fb.curSelected][fb.typeSelected] = a;
          switch (fb.typeSelected) {
            case 0:
              this.shaderArray[fb.curSelected].set_hue(a / 360);
              break;
            case 1:
              this.shaderArray[fb.curSelected].set_saturation(a / 100);
              break;
            case 2:
              this.shaderArray[fb.curSelected].set_brightness(a / 100);
          }
          var c = this.grpNumbers.members[3 * fb.curSelected + fb.typeSelected];
          c.set_text(null == a ? "null" : "" + a);
          b = (40 * (c.letters.length - 1)) / 2;
          var d = 0;
          for (c = c.letters; d < c.length; ) {
            var e = c[d];
            ++d;
            e.offset.set_x(e.offset.x + b);
            0 > a && e.offset.set_x(e.offset.x + 10);
          }
        },
        __class__: fb,
      });
      var qc = function (a, b, c, d, e, f) {
        null == e && (e = "null variable value");
        null == d && (d = "bool");
        null == b && (b = "");
        this.name = "Unknown";
        this.description = "";
        this.displayFormat = "%v";
        this.decimals = 1;
        this.minValue = this.maxValue = null;
        this.changeValue = 1;
        this.options = null;
        this.curOption = 0;
        this.variable = this.defaultValue = null;
        this.scrollSpeed = 50;
        this.showBoyfriend = !1;
        this.type = "bool";
        this.onChange = null;
        this.name = a;
        this.description = b;
        this.variable = c;
        this.type = d;
        this.defaultValue = e;
        this.options = f;
        if ("null variable value" == e)
          switch (d) {
            case "bool":
              e = !1;
              break;
            case "float":
            case "int":
              e = 0;
              break;
            case "percent":
              e = 1;
              break;
            case "string":
              (e = ""), 0 < f.length && (e = f[0]);
          }
        null == this.getValue() && this.setValue(e);
        switch (d) {
          case "percent":
            this.displayFormat = "%v%";
            this.changeValue = 0.01;
            this.minValue = 0;
            this.maxValue = 1;
            this.scrollSpeed = 0.5;
            this.decimals = 2;
            break;
          case "string":
            (a = f.indexOf(this.getValue())), -1 < a && (this.curOption = a);
        }
      };
      h["options.Option"] = qc;
      qc.__name__ = "options.Option";
      qc.prototype = {
        change: function () {
          if (null != this.onChange) this.onChange();
        },
        getValue: function () {
          return qa.getProperty(y, this.variable);
        },
        setValue: function (a) {
          qa.setProperty(y, this.variable, a);
        },
        setChild: function (a) {
          this.child = a;
        },
        set_text: function (a) {
          null == a && (a = "");
          null != this.child && this.child.set_text(a);
          return null;
        },
        get_type: function () {
          var a = "bool";
          switch (K.trim(this.type.toLowerCase())) {
            case "fl":
              a = "float";
              break;
            case "integer":
              a = "int";
              break;
            case "float":
            case "int":
            case "percent":
            case "string":
              a = this.type;
              break;
            case "str":
              a = "string";
          }
          return (this.type = a);
        },
        __class__: qc,
        __properties__: { set_text: "set_text", get_type: "get_type" },
      };
      var me = function (a, b) {
        this.options =
          "Note Colors;Controls;Adjust Delay and Combo;Graphics;Visuals and UI;Gameplay".split(
            ";"
          );
        I.call(this, a, b);
      };
      h["options.OptionsState"] = me;
      me.__name__ = "options.OptionsState";
      me.__super__ = I;
      me.prototype = q(I.prototype, {
        openSelectedSubstate: function (a) {
          switch (a) {
            case "Adjust Delay and Combo":
              I.switchState(Lb.getNextState(new Dm(), !1));
              break;
            case "Controls":
              this.openSubState(new yb());
              break;
            case "Gameplay":
              this.openSubState(new Bm());
              break;
            case "Graphics":
              this.openSubState(new Cm());
              break;
            case "Note Colors":
              this.openSubState(new fb());
              break;
            case "Visuals and UI":
              this.openSubState(new Em());
          }
        },
        create: function () {
          var a = new F(),
            b = G.returnGraphic("menuDesat", null);
          a = a.loadGraphic(b);
          a.set_color(-1412611);
          a.updateHitbox();
          a.set_x((g.width - a.get_width()) / 2);
          a.set_y((g.height - a.get_height()) / 2);
          a.set_antialiasing(y.globalAntialiasing);
          this.add(a);
          this.grpOptions = new ma();
          this.add(this.grpOptions);
          a = 0;
          for (b = this.options.length; a < b; ) {
            var c = a++,
              d = new ib(0, 0, this.options[c], !0);
            d.set_x((g.width - d.get_width()) / 2);
            d.set_y((g.height - d.get_height()) / 2);
            d.set_y(d.y + (100 * (c - this.options.length / 2) + 50));
            this.grpOptions.add(d);
          }
          this.selectorLeft = new ib(0, 0, ">", !0);
          this.add(this.selectorLeft);
          this.selectorRight = new ib(0, 0, "<", !0);
          this.add(this.selectorRight);
          this.changeSelection();
          y.saveSettings();
          I.prototype.create.call(this);
        },
        closeSubState: function () {
          I.prototype.closeSubState.call(this);
          y.saveSettings();
        },
        update: function (a) {
          I.prototype.update.call(this, a);
          ia.player1.controls._ui_upP.check() && this.changeSelection(-1);
          ia.player1.controls._ui_downP.check() && this.changeSelection(1);
          ia.player1.controls._back.check() &&
            (g.sound.play(G.sound("cancelMenu")), I.switchState(new zc()));
          ia.player1.controls._accept.check() &&
            this.openSelectedSubstate(this.options[me.curSelected]);
        },
        changeSelection: function (a) {
          null == a && (a = 0);
          me.curSelected += a;
          0 > me.curSelected && (me.curSelected = this.options.length - 1);
          me.curSelected >= this.options.length && (me.curSelected = 0);
          for (var b = (a = 0), c = this.grpOptions.members; b < c.length; ) {
            var d = c[b];
            ++b;
            d.targetY = a - me.curSelected;
            ++a;
            d.set_alpha(0.6);
            0 == d.targetY &&
              (d.set_alpha(1),
              this.selectorLeft.set_x(d.x - 63),
              this.selectorLeft.set_y(d.y),
              this.selectorRight.set_x(d.x + d.get_width() + 15),
              this.selectorRight.set_y(d.y));
          }
          g.sound.play(G.sound("scrollMenu"));
        },
        __class__: me,
      });
      var Em = function () {
        this.changedMusic = !1;
        this.title = "Visuals and UI";
        this.rpcTitle = "Visuals & UI Settings Menu";
        var a = new qc(
          "Note Splashes",
          'If unchecked, hitting "Sick!" notes won\'t show particles.',
          "noteSplashes",
          "bool",
          !0
        );
        this.addOption(a);
        a = new qc(
          "Hide HUD",
          "If checked, hides most HUD elements.",
          "hideHud",
          "bool",
          !1
        );
        this.addOption(a);
        a = new qc(
          "Time Bar:",
          "What should the Time Bar display?",
          "timeBarType",
          "string",
          "Time Left",
          ["Time Left", "Time Elapsed", "Song Name", "Disabled"]
        );
        this.addOption(a);
        a = new qc(
          "Flashing Lights",
          "Uncheck this if you're sensitive to flashing lights!",
          "flashing",
          "bool",
          !0
        );
        this.addOption(a);
        a = new qc(
          "Camera Zooms",
          "If unchecked, the camera won't zoom in on a beat hit.",
          "camZooms",
          "bool",
          !0
        );
        this.addOption(a);
        a = new qc(
          "Score Text Zoom on Hit",
          "If unchecked, disables the Score text zooming\neverytime you hit a note.",
          "scoreZoom",
          "bool",
          !0
        );
        this.addOption(a);
        a = new qc(
          "Health Bar Transparency",
          "How much transparent should the health bar and icons be.",
          "healthBarAlpha",
          "percent",
          1
        );
        a.scrollSpeed = 1.6;
        a.minValue = 0;
        a.maxValue = 1;
        a.changeValue = 0.1;
        a.decimals = 1;
        this.addOption(a);
        a = new qc(
          "FPS Counter",
          "If unchecked, hides FPS Counter.",
          "showFPS",
          "bool",
          !0
        );
        this.addOption(a);
        a.onChange = n(this, this.onChangeFPSCounter);
        a = new qc(
          "Pause Screen Song:",
          "What song do you prefer for the Pause Screen?",
          "pauseMusic",
          "string",
          "Tea Time",
          ["None", "Breakfast", "Tea Time"]
        );
        this.addOption(a);
        a.onChange = n(this, this.onChangePauseMusic);
        a = new qc(
          "Combo Stacking",
          "If unchecked, Ratings and Combo won't stack, saving on System Memory and making them easier to read",
          "comboStacking",
          "bool",
          !0
        );
        this.addOption(a);
        Pe.call(this);
      };
      h["options.VisualsUISubState"] = Em;
      Em.__name__ = "options.VisualsUISubState";
      Em.__super__ = Pe;
      Em.prototype = q(Pe.prototype, {
        onChangePauseMusic: function () {
          if ("None" == y.pauseMusic) g.sound.music.set_volume(0);
          else {
            var a = g.sound,
              b = y.pauseMusic,
              c = new ya("[~&\\\\;:<>#]", ""),
              d = new ya("[.,'\"%?!]", "");
            b = c.split(K.replace(b, " ", "-")).join("-");
            d = G.returnSound("music", d.split(b).join("").toLowerCase(), null);
            a.playMusic(d);
          }
          this.changedMusic = !0;
        },
        destroy: function () {
          if (this.changedMusic) {
            var a = g.sound,
              b = G.returnSound("music", "freakyMenu", null);
            a.playMusic(b);
          }
          Pe.prototype.destroy.call(this);
        },
        onChangeFPSCounter: function () {
          null != Rb.fpsVar && Rb.fpsVar.set_visible(y.showFPS);
        },
        __class__: Em,
      });
      H.$haxeUID |= 0;
      Yb.count = 0;
      "undefined" != typeof performance &&
        "function" == typeof performance.now &&
        (X.now = performance.now.bind(performance));
      h.Math = Math;
      null == String.fromCodePoint &&
        (String.fromCodePoint = function (a) {
          return 65536 > a
            ? String.fromCharCode(a)
            : String.fromCharCode((a >> 10) + 55232) +
                String.fromCharCode((a & 1023) + 56320);
        });
      String.prototype.__class__ = h.String = String;
      String.__name__ = "String";
      h.Array = Array;
      Array.__name__ = "Array";
      Date.prototype.__class__ = h.Date = Date;
      Date.__name__ = "Date";
      var Lo = {},
        Xo = {},
        Ko = Number,
        Wo = Boolean,
        $m = {},
        Ro = {};
      za.__toStr = {}.toString;
      Tb.content = [
        {
          name: "__ASSET__:bitmap_flixel_system_debug_stats__Stats_GraphicMaximizeButton",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFvQUFBQUtDQVFBQUFBbk93YzJBQUFBQ1hCSVdYTUFBQUIyQUFBQWRnRk9leVlJQUFBQUtrbEVRVlI0Mm1QNER3WU1FQURqSVlRUXdnd2dJYmd3alBlZkNjS0JrbVFBVE8yWUZ1RjJFcWJqQWJxb1FNTEIvWkpGQUFBQUFFbEZUa1N1UW1DQw",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_debug_interaction_tools__Transform_GraphicTransformCursorScaleX",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFvQUFBQUtDQVFBQUFBbk93YzJBQUFBQ1hCSVdYTUFBQUJPQUFBQVRnR3h6Ujh6QUFBQU5FbEVRVlI0Mm8zTlJ3RURNQkRBTUYvNFUwN1UrZXUwQUxqL2t6Q1NzTFNhVkhOWDJxMTRMUWVjSjVCczlIVHdPakw2dnd2SWUxQ3pYVnM2eVFBQUFBQkpSVTVFcmtKZ2dnPT0",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_GraphicLogo",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUdRQUFBQmtDQU1BQUFCSFBHVm1BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQkRsQk1WRVVBQUFBN1FQODVRZjhEemZzRXp2c0V6UHYzSkUwQXpQKzNTME1EelB3RHpmb0R6Zm9FemZzQXp2ODdRUDg2UVA4elJQLy93akU2UXY4NlFQOER5K2c2UVA4N1FQLy93REgvd0RMMEprNzFKMDcveFRIL3dUTC96RFAxSms3L0lrVC93VEQvd0RIMUprMzFKazczSVVyMEprNEF6di90d0REMEowMy93REgvd3pFRHpQdkFSa1VzWDhmSXZ5Ny93VEQwSmt6L3dESTdRUC8vd2pEL3dUTC93REVMb2tzV2pIUTNTUEU3UWY4RHNTOGticXd2VjlVT20xa0R5KzBDeGFrQ3c0NGhkWjR6VU9NQXZFb0V6ZnNCdjJVQndIUDFKMDRBdVNMbE1Fdi93VExIUWtWYmdqTFB2eThQdVNPWlhUMmZ2aXlQdlNzdG5TcGZ2Q2p2d0RFUHJ5U3Z2aTBlcGlkNmNEZ3Z1aVhLcmR2WEFBQUFOblJTVGxNQXZ6L3ZQNzgvRDc5Zm45OS9IKytmRHo4ZmY3L2ZYKytmWDk4ZmZ3L1BEMS9mbjM4Zjd5L2Z2Nzh2cjkrLzMyOHZyNDlQajgvNUdwWGFBQUFDa1VsRVFWUjQyclhXQlpJYk1SaEU0VjVtWm1ZTTgwSTRzMkE3ekxuL1FVTDBLb285Y2VlWDN3Vys2cG9hU2FvMmJIWkJWaXZyWncwQytidVp4U1dEMk5nNk14RVlnM0FSbU5WbWpMbjVNMm9lb2JWVmc3QVJtTEV5b252NWpIeUU5bUJTWXZlTWJDUmw5dXNSVnlFY3hQbHROdmt4NGdpTVIvZ0l2dzAvUm40RUJpSS93dDg1QjVFWG9jc1h6OHg4NU5uemR6VVg4WTN6YzVUY0NJYXR5RGQ4UmI3eG94ZXRRdDVqb0dSR1hpSjRpbnpEVitRYnZpTGY4Qlg1aHEvSU4zeEZ2dUVyMm5PTnRJOU5JR08ya2ZiMDM0aG1YY05YcEtVWnovQ1ZlVWxYU28xWDUwbStNaWRKYXlYR20zT3lGWVpJWTRiaEtReVJyaG1HcFRCRVdwZ3hERXRoaUxRWU1GQXFaVU9rcFRYWElIcU5VbWVJZE1Nd0xHVlpvajNEY0pSdWlmWU53MUIyOVVjM2N4Z29EQ0dPTUl5b3doQmFEUnNvREVtNzlaTjQreWxpb0RCRU5JYVJTV0VJeldMRStsQmpDUEh0TVNLOXF6RWtiUkVqckRBa2JRY2pyREFrNmRMUmVUYWxWL1ZyUDd5YlRYa3lxZnExSGFKRWpmdEZaNE1oaHloaG8raHFOT1JyeDVtTWdpbkpFSlN3d1pSa0NFcllZRW82QkNWdU1DVWRnaEkzbUpJT1FZa2JUR0ZJRnVVRWd5a01TWHIwWDhacFFVeGhTTnFkcU1FVWhzUVZETHFRRElrb0dHbER5WkNBZ3BIV0w0WVlpbUV3aFNFUkJTT2R3aEJETVF5bU1JVG9Yc1JnQ2tPSURtNEhES1l3eEZjd1NxY3d4RmN3eW1PSW9aaEd3UkJETVkyQ0lZWmlHZ1ZERE1VMENoMDIxK01qei9BUkhuMmVBUkpRSGhZdTRpc1BpdHdJQ2tadUJBVWpONEtDa1IxQndjaU4wREZHZmdRRkl6K0NncEVmUWNGb0dUSXlQdFRmWXFTdFhaSzJ1enpFSjc3WENaTVhtWm9XT1l4c2d2b0dNaVBERXlLWFVaUEVxTWhnRE9RNmhOSjZCanNpQ0QrR3lHQU1wQTNDWUN5RUg2Tzg4a1BnQzUyOVN2ZFRmSXFLQUFBQUFFbEZUa1N1UW1DQw",
        },
        {
          name: "__ASSET__:file_flixel_system_VirtualInputData",
          data: "YmFzZSA9IDI2NiA0NiA4NCA4NAp0aHVtYiA9IDI2NiAxMzEgNTIgNTIKYSA9IDAgMCAxMzIgNDUKYiA9IDAgNDYgMTMyIDQ1CmMgPSAwIDkyIDEzMiA0NQpkb3duID0gMCAxMzggMTMyIDQ1CmxlZnQgPSAxMzMgMCAxMzIgNDUKcmlnaHQgPSAxMzMgNDYgMTMyIDQ1CnVwID0gMTMzIDkyIDEzMiA0NQp4ID0gMjY2IDAgMTMyIDQ1CnkgPSAxMzMgMTM4IDEzMiA0NQo",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_debug_GraphicBitmapLog",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVFBQUFBRHBiK3RBQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUowbEVRVlI0Mm1NZ0d2eFArUDhmcStEL0JKb0wvbThBQ21FSVZ2d0hBM1R0RU5CQVdKQUJBUHVUT0VmRWVwT2RBQUFBQUVsRlRrU3VRbUND",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_debug_GraphicCloseButton",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFnQUFBQUlDQVFBQUFCdUJuWUFBQUFBQ1hCSVdYTUFBQUIyQUFBQWRnRk9leVlJQUFBQVZVbEVRVlFJSFFYQU1RcEJBUUNBNGQrVG5qdTZoL1V0akNZeVVDVEpZaUNMMjMzS3lzK3lxbXlzc3NiUFdIYjRWQ1o4SGZBMVZtVUwzaFpWbVRtRGwzbGxjTVhUSGc5RGJyaWJseU11bVZ3TVZXWk9wait1UDA5cXc0R1hvd0FBQUFCSlJVNUVya0pnZ2c9PQ",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_debug_GraphicStats",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUcwbEVRVlI0Mm1NWU9QQWZDaWhSakttQS9vb1JndlJYVENvQUFFSUNoM2xmU2RhdEFBQUFBRWxGVGtTdVFtQ0M",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_debug_stats__Stats_GraphicMinimizeButton",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFvQUFBQUtDQVFBQUFBbk93YzJBQUFBQ1hCSVdYTUFBQUIyQUFBQWRnRk9leVlJQUFBQUxVbEVRVlI0Mm1QNC81OEJGUUJGd0FRWXcxa3dPU0NBMDJBR0U1QUY1VUJacEFGVTdUZ3R3dW9rckk0SEFMcW9RTUtML1R2NkFBQUFBRWxGVGtTdVFtQ0M",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_debug_interaction_tools__Transform_GraphicTransformCursorRotate",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFvQUFBQUtBUUFBQUFDbFNmSVFBQUFBQW5SU1RsTUFBSGFUelRnQUFBQUpjRWhaY3dBQUFFNEFBQUJPQWJITkh6TUFBQUFrU1VSQlZIamFZNUJoWUZCaVlIQmtZR2hrWUdnL3dORGNBR0k0TURBb01EQklNQUFBUWFVRVJPeHd0ZEFBQUFBQVNVVk9SSzVDWUlJPQ",
        },
        {
          name: "__ASSET__:bitmap_flixel_input_mouse__FlxMouse_GraphicCursor",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJnQUFBQWdDQVlBQUFBSVhyZzRBQUFCcFVsRVFWUjQyclRSQTVLRFFSQUY0QnhnYmR1MjdUM0RvckMyelR1dGJkdTJiYU5qZFp4TVh0VXJ6WFIvUHlqYUpzYU5GQ1dHRGdCNUJBSGtFUVJvR1JzaGhEQ2dZV2lJRVNVQVJvemxDQ0VJcEJlVVFtQkVCRUVFQWNXMXpUQzlzQW8rSWNFRUVRVDBUU3pCNmZrNWVBVUdFa0lRMERvd0F5ZVh0M0J5ZWdydS9uNWtFQXdNejZ3QlBmc0hCK0RpNDQwUUFnQzlkdy9QREdSbmR4Y2NQVDBRUWdDWVdka0JkamEzdDhETzNVMStCQVBzdnJ4OUFEdHJHeHRnNCtLTUVjV0E1YTFENE0zaThoSllPanBnUkg2Z1kzZ092cjUvK0pDNWhRWFpFUXp3ZHZ2Z0RIQW1wcWZBMk1ZYUkvSUIzV01MOFB2M0J6aGpFeFBTSXhqQVBUcS9CbUVaR0I0Q1Ewc0xqTWdPREU2dmdLaDA5L1pLUUNRQXlSbDU0T1lmQkNFeHNSQ1ZtQ2kwN0orT0VZbEFhbVlCcU9ycU1hcHBhSWlXU0d5aldDQ3pxSkt4V0UxUEQ3U01qR1JiamhFTUZGUTFNSmFyNnh1d0wvYlI2aTFucVdORHNhQzBvUTA5U0xZRE1TZFY2Z05iVncrZ3dWTElsZjlHa0F1b1ZhTUJzUVJ5K0swR0dVN2xoaGVtNGJTd1lDa1FNOU9xNlRnZlpqZ3RMSmhKeThidlpBWWFBZ0JJUDV2ZHJxV1ZzQUFBQUFCSlJVNUVya0pnZ2c9PQ",
        },
        {
          name: "__ASSET__:bitmap_flixel_system__FlxPreloader_GraphicLogoLight",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUVBQUFBQkFDQVlBQUFDcWFYSGVBQUFGT1VsRVFWUjQycjJhQ1E3VE1CUkUyN0t2MStFY1hJUTdjVVQyblVKUXFoZmxFVDBVbVZnYTJXM2NaZWJQLzNiY25rNnZYdjlQbkFmaDlMOXc1L1RpNVdsd093TmZDL1RyeHJaeEFvejc4cnltQkI0bndIamlaOEc0OExwd2crZnhPY2NMME1ROU52bTRybXZ4UFk0Vm9DSnVzaDd2aUhvNFlaOFFsMzNrVFR5aWVkbUxFRWxDREhaQTI5dEVsNFQ5WElnaWdoNURNdVlOZDBDN3dZVHYwQWNhWitHSUdqREMzcERRT0MzZmhIbGN3b1FBSFdIMW01WTIyWGFDaGFBUHEwZHgzaWxBVjJFVHBsL2hMZ0FsaGdTTzZDYngvUUxRdC8waHZTSi9iOVV6SjkzUUtWQk9TQUdhUEdqaWtBYkx4NzRHZUsrb0NVbE84d1lKd0pleTVTRmprdmNuTUxZQUFQSnlna2xkUTRpc0FYdklROXJrSVF3ZWJEeG1MdVNWQ3JrYUlFU21jd2pnSmNWd1ZYZkVJUW9FQ2JHcUQ1VUcxeUI5N1hxQUFDYmZCYy81YnVJUEo2ekdqM2lNR0U0SE84QmtUSm8rVXFFRU1DQU9uT2VRZy9DeXR4Q2toK3VBOHorSVI1TVlFa0RSajJydmZEZkp4Mzk2OEhnRzgrd0Mxd0RhV2RGbVROL2lXSUIvTFh4cGU1Tjlzc0JqUk5sMmdlOEJIUFVBNUVPQWlMNWQ4SGNCSUE5RVhDTGdBdFVCV1g4bjhXc1dRUk1IVWZnZ2I5c3Z5VCs5allFRm1LSG95KzdnSjMxRjMwS2tBQnQzYzhwOWs1OEFlWTBoLzlnMUFQSWlBRmtERVl4T2dkN3hiVGlBM01mMml2Nk1aMHN4bUwrS3Z2SmV4SDhBa1pjUVVRdk9rd0RLZnhjKzUvNEV5TnNCRUljMFFBQ1JWOVVYZVVTUUVFNkoyaGhkZXJPQUtMMGZjRXJNd0FuZytlUUtRV2t5d1VzbGdubkR4TGk1eVFFbUNyUUV4dExuM0ljWXI1MEo4Umx6VTZTL0E3QzZiaGZRcmlBZFlQVktHSW1qZXdIdERCOXJvd1NZN3p2SXUzVjJrTDlVV1lCdXZVemFKYkZiaENRaU1VOEhLVDVtaTVQa0lDOEJpaXpOdVdZM1dBd0xzeHdEdlVhRWhTQ3UxZ0wwSFZYOVdoT25PZkViZ1FSdVZHc0IyaTVSVkRUV2tpUjRxWXZYTWgvNDJuZ0hNSTR2NHpXYjhSTGZKbFJsMS91QUl0K2NFTURSVmlRMWhtZ3NWOTlXK1BJYlgvLzA0UE9FMnpXQVNFdXhZZ2NvQjVZSWx4M0svVFJNSENJUW5mdVA4L2pUTko3eGFRSnp3RTJNY0VuZUVlNVlCU0t2SFhrVEo3cWZWb1EvTFBDUkhpQUlvaWgxdEIyMkNCS2k5Z0ZiQ3NwcTI1WW42cEQvc01MNzMzaTN3SHVBR0N0WGtCcHlnQUJ4OFpJRFBDbWl6bmpUOGxoOFJmcHRBRkZTQ0p3ZzRsa280WGZwQXdSWGVWdWZJaWNCSFBFbDRUZEw4RHh1VUgyQVBFNndJMDVaQVB0SWpER0lQei9nS2gxaFNUQ0pwUnBCand0d3c1WVRuQmFPZmd2UXY3M2ZFTC9nWGlObEpBQUFkZ0hrNVFaRXVBbzZYb3RUNFNEdDIyZWF5R3VsQUo4aHR5VHJxQk41Uk5DS0VJVXdmaG1pMzNLRWdBaXN0Ym9uMTJyaHpSQWtQem5xTTVqck9nRDQzTjRmK0xmQkZvS3hYK09WQTZoZ1NvUVZSSDdMOWhIOUxvSW1aL3ZIZFgvQTBnVVVxRzg0WUlKRjJINk05WHRIYU9oWHBSU2dDNkd2bTd5M3lpMkNpWU52MitSQjdBUnArZitBYUtxcWtFY0U3eHVvQS9UZklHblNRZDdSNzUxZ0M5QVJ0eEFBOG1EN2J0RkVJUThnN2pVZlJPRUxCMlNoTS9td0d1UWxnb1FnTlJocnh3ZjVKajd3WDJMZCtzNFJRRWhpUUJUaUNLZEtIOGZnNnZjSTRQRlZ6OGR4RmNBTkVLWFhXRERodUEwZWVTanE1L2hDa0lzemdvVHpIbFRPbHpQVEFmdWRZQmZFM1NTQUZHTmZkOVQ3SHlMai95NnZQcHVKNjFoTks0Y2pISWlEbkVFQ0JHbDlhTGtCT0s5WHlLVXRIRGxFZ053dGRoUnMyU0FjeFMxRnA0MFhvTVhaSm0xU29BWGNFZlhSQXZRL3Nxc2lCNEdJYkZ3N1FJRGNGc2NYMjduczlwempCV2czZERPUmN4TnY4a2NMME9UN1dwUHJhOGNMTUlEc2JqR09GMkM4TUNaNmNQc0ZMZ2kyUWU0OEVWTUFBQUFBU1VWT1JLNUNZSUk9",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_debug_GraphicConsole",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVFBQUFBRHBiK3RBQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUxVbEVRVlI0Mm1NZ0hmeFgrbi9tdnpFMmliVC83LzZ2d3E1bkZWQXFEYnVlL3dnSlROV1labU82aEd3QUFGcUVJUEdTK3gwekFBQUFBRWxGVGtTdVFtQ0M",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_debug_interaction_tools__Eraser_GraphicEraserTool",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVFBQUFBRHBiK3RBQUFBQ1hCSVdYTUFBQXNTQUFBTEVnSFMzWDc4QUFBQUwwbEVRVlI0Mm1OQUJsLytRMmcwUVJERUVJUkJORUVFaEF1aVM2RlloQ2FJQU9oR0lOaVlIQ3pPd3hERXBoSUE3WjVLRS9na2JPWUFBQUFBU1VWT1JLNUNZSUk9",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_debug_interaction_tools__Transform_GraphicTransformCursorScaleXY",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFvQUFBQUtDQVlBQUFDTk1zKzlBQUFBQ1hCSVdYTUFBQUJPQUFBQVRnR3h6Ujh6QUFBQUlFbEVRVlI0Mm1QNGp3WVljQUdpRkpHc0VCdWJJS0NQWXVwNmxLVHdCUUVBK3lCbm1ZdkFyQm9BQUFBQVNVVk9SSzVDWUlJPQ",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_debug__FlxDebugger_GraphicDrawDebug",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVFBQUFBRHBiK3RBQUFBT0VsRVFWUjQycTNPdHdFQUlRd0R3RnRUQzNyTnp4RW9VWG1PWU1ueVQ5MFlmRnBHbUozYmhJTTlPY0FVWGpMZzg1ZU9EMlNwL2tGV3V1Snp2UWpKV1ZBQUFBQUFTVVZPUks1Q1lJST0",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_debug_GraphicArrowRight",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVFBQUFBRHBiK3RBQUFBTDBsRVFWUjQybVA0dit4L0pBTW0rQThFWUNsTVliZ1VwakJDQ2lHTUtRVmlZVW9SVUkxcE5rS0lvTHR4K0JJQWlaeURKT010Z3ZjQUFBQUFTVVZPUks1Q1lJST0",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_debug_GraphicWatch",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQW1FbEVRVlI0MnBYUUEyaUVZUmpBOGRsMjBxVGNsTFM4TEsybFpkdDlpOHZHak13aHpUZzdHMmZFcy9LSC85bDY2dmVhVDFmSElZdGlENDZnUWhCdW5HT3UzdUpqeUxEaERJOUk0Z3ZUMVl2ZHNHQ29iT3dVRWs2cUYwdTRxUnBiUndoQzlXSTlBampJOXlkd2dSUU9xeGZ2d0k0WWZtQ0ZqQ2YwMWZ2a05nUTg0QlZwT0xEY0xJMERHTU1WWkx5MWsvc2xxR0dnMjNrby9wckdLNmlCOVFVQUFBQUFTVVZPUks1Q1lJST0",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_debug_GraphicInteractive",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVFBQUFBRHBiK3RBQUFBQ1hCSVdYTUFBQXNTQUFBTEVnSFMzWDc4QUFBQVNVbEVRVlI0Mm1OQUJmOWpRQ1NHNFA4R2hBUkMwUGYvVHlDTVFSYzhBeEtHNlVBSVBnTmlYd0tDYWFpQ01PSDkvLy9EQlJIZzBuK3doQythMCtML2d5WFNVRjI3bVFFTEFBQ1J3Vk52dzhxUmt3QUFBQUJKUlU1RXJrSmdnZz09",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_GraphicVirtualInput",
          data: "",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_debug_interaction_tools__Transform_GraphicTransformCursorScaleY",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFvQUFBQUtDQVlBQUFDTk1zKzlBQUFBQ1hCSVdYTUFBQUJPQUFBQVRnR3h6Ujh6QUFBQUkwbEVRVlI0Mm1OQUIvK2hnQUVmK0k4RzhDb2lvSml3MVFPdkVLR0FMSitUWlRVQUlSUi9nUTNjR3pRQUFBQUFTVVZPUks1Q1lJST0",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_debug_interaction_tools_GraphicCursorCross",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQ1hCSVdYTUFBQXNTQUFBTEVnSFMzWDc4QUFBQUdVbEVRVlI0Mm1QQUJ2NERBVGJ4b2FpWWtSUlRobjFvQUFDMG1TdldaNUx3Z2dBQUFBQkpSVTVFcmtKZ2dnPT0",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_debug_GraphicArrowLeft",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVFBQUFBRHBiK3RBQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUxFbEVRVlI0Mm1QQUJQOGoveS9ESXZRZkNOQ0ZvQUJGQ0FGUWhSRENDQ0U4cXZHWVRjZ2xtRkk0ZkFrQUk5T0RKTzFJai9JQUFBQUFTVVZPUks1Q1lJST0",
        },
        {
          name: "__ASSET__:bitmap_flixel_addons_transition__FlxTransitionSprite_RawGraphicTransTileDiamond",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQWlBQUFBQWdDQVlBQUFBckZzTTFBQUFBQVhOU1IwSUFyczRjNlFBQUFzNUpSRUZVZUp6dDJORnFIRUVNUk5GeC92K2ZOeS9KUzRpaHJWR051cGx6d1dCc2RXbFlyN2VMKy9YNWZDNEFPSXgvUDdpK2h2YitTK281ZnZwQjNmVWNkeStJNm5OMFgweXJ6NUcrRUw5N2pxY3Y0ci9QTVZvQWZrMHVCM0EwbjJ2bUEreC9PNTk0anBVZGllZW9aSFk4eDFURzFHczQ5UjdhNVgvb2NSUVFBQlUrMzN6LzVONmYvQzY1OTg1c01tdnE3SjJzcWIvaDFIdDRzZ2lNbHhBRkJEZ1hCcUkyazlqYmNXYVhEQVlpei9qbHZ3TUtDSEFtREVUUGJES0xnVmpQWmlCZWlBSUMxR0VnYWpPSnZSMW5kc2xnSVBLOC92TGZBUVVFcU1GQTlNd21zeGlJOVd3R0FvK2pnT0JrR0lqYVRHSnZ4NWxkTWhpSVBDNS9LQ0E0RmdhaVp6YVp4VUNzWnpNUWVCMEtDTzdBUU5SbUVuczd6dXlTd1VEa2NmbGpIQVVFVlJpSW50bGtGZ094bnMxQUFBK2pnSndOQTFHYlNlenRPTE5MQmdPUngrV1AxNk9BbkFzRDBUT2J6R0lnMXJNWkNPQmxLQ0QzWUNCcU00bTlIV2QyeVdBZzhyajhnV0VVa0RvTVJNOXNNb3VCV005bUlBQTh5dWtGaElHb3pTVDJkcHpaSllPQnlPUHlCMTdPNlFVRUFBQWN5T2tGNU92UDE4VGVsWjg5c2JjeWs5amJjV2FYaktuWGNPbzl0TXYvRUlBWGNYb0JtZVRybSsrZjNQdVQzeVgzM3BsTlprMmR2Wk0xOVRlY2VnOVBGaEVsQ0JoRUFia0hBMU9iU2V6dE9MTkxCZ09UUi9rQWhsRkF6b1dCNlpsTlpqRXc2OWtNRFBBeUZKQ3pZV0JxTTRtOUhXZDJ5V0JnOGlnZmVEMEtDS293TUQyenlTd0daajJiZ1FFZVJnSEJIUmlZMmt4aWI4ZVpYVElZbUR6S0I4WlJRSEFxREV6UGJES0xnVm5QWm1Ed09oUVFuQXdEVTV0SjdPMDRzMHNHQTVOSCtZQUNBaFJoWUhwbWsxa016SG8yQTRQSFVVQ0FPZ3hNYlNheHQrUE1MaGtNVEI3bFl3TVVFT0JNR0ppZTJXUVdBN09lemNDOEVBVUVPQmNHcGphVDJOdHhacGNNQmliUDY4dkhkU2tnQUdvd01EMnp5U3dHWmoyYmdSbEFBUUZRaFlHcHpTVDJkcHpaSllPQnlUTmVQcTdydW40RDVOWDdQSTd2WFpFQUFBQUFTVVZPUks1Q1lJST0",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_debug_GraphicLog",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUZVbEVRVlI0Mm1NZ0MvekhBMkJxQnFISm95WURBTnh2aTNVWnVHK29BQUFBQUVsRlRrU3VRbUND",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_debug__Window_GraphicWindowHandle",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFvQUFBQUtDQVFBQUFBbk93YzJBQUFBSVVsRVFWUjQybVBBQXBaaEVmcS9qR2loWldoQ0VKSm9vV1Z3SVdTU2FLRmxBR3VrSzkvY29kZitBQUFBQUVsRlRrU3VRbUND",
        },
        {
          name: "__ASSET__:bitmap_flixel_system__FlxPreloader_GraphicLogoCorners",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUVBQUFBQkFDQVFBQUFBQVlMbFZBQUFFT1VsRVFWUjQybHlOaFJFRFFSRERGR2JxdjVzVTlNenNjVGluMFI2dlo5elprSk1SbTBpcmxKSktOTFIwOUdZd0krSTlnM3hYbUNIRkhHbVdMT1NLdFRLMkhNV0ZHMWQ1MW5yTG5ucXA1WXFlaGlVNHBIblR5dDZNY25pRnY4SDFQWjd4UE9NWHIvZlA4Nlc3RFY1dEZIMlFSK281T1NrSk1aRUlST2hWVENweUNsSEs2a245cHJILzFMaUs4a2xCVGtaSy9Nd0l2VXJKM0xtY1V6a21JeUdXa1d2NmZGQlJ5cWs0TStCdEdvYUNjSG1VdHF3dytQLy9jMXFsTm9oMy9YU2NMSVZLRzR2eHlZNmJacm52bloxVTBtS1liS3hiOXlqZkJPZ2lDR04wbC9TWnUxMUxGeWlGRmdoOWtaRGdINHh2V0Q3UW9qRVFUa1BaZ1pEaVZKb0J1djZXQUd6dnIxRnFIYTBXWmxIT0l6SnhEaXEwWlFleXZSWmtzQTFmeFRxR3RyTitXZFlBZzVLRUVkb3RHWlREdVkrdk5uZkZObkpubExURFI2MmNEd3hKWEx3cEJjSVNBeUM5c05zeHg1WXh0MlpFek5hMURzRmlnQ0QxVVFCKzBPQng0QktXYU1YeWIyMThTK1FlTnlrcCtCRXZieEFIMzNwb2Fac0hvbzE1TEJyWkUzYVVQUURZVS8yQ09YcGc5cWl0LzdWenVBNElGd0hrT1Y5YytYQzc5N1lSd3hETDhHQUMwSks5NngvSi83WDVIaXdvQU5lOG9NclB1K3k1MlAzalduTHdRb0FnQVVEOVh2MnRXaks0a1lJRWdPTjNBdHZZcTZuSUFhRTBUZjFiSmdBRUdZQWdsVjg5Vzhmdm93Q01JQlVIb3RsOEVad0FBRXNBbG0wVEdDR01nQ28vclBCTkFURENUUUMzSU15eEgzL2NLK1pveXgyd3RnaVYzM3BmTUNPRGFDV0J6ZDhEeUFBY0J1c1pDSXNSS2dzd0J5SUpnRkEyanYwc0NFb3ZEWFBOY1RSRXpZN2ZSKys3OG9tTTI5bXZMVVQyZ05rbXRDUXVnTW5OMXA0cGdmL1hQaldBaHZtMk9aWW5ibk9CU0NDYTFYRFRzUXd3ZVFHd2w1S0FUMjFySFpjeUFCTkVtNGRRQWtCekYwRXFSdHRiOCt5bHo3dlNFSWpOSDBJdkFQYnFPa2dnVExRSHdRQWxUZHFHU0w1N0FMNzBSTk5QMFZiVnAzN0tsbk5oejRwc1oyL3pJQ1NCUFJsTWVoZ2R2eVRuTDdVNzZERHNCR21qN2VjTmlMbThCWERVQnhZaUs3WFJHN0JjdnhHcTdROFNBTWkwSHhXNlo1THJUd0pIU2RPa0VPSkI0MTVlRjIzdFRMbisvQjlKcXQxcDk3VzdQZ0F3N2dXampMdDR0Y1Y2L2IxdmV5cDM4dFgyVDkyQk9CZ0IrWS9mcmZLWTJsMTlkNVYrRklBUmtnTVl5Y0tqdTJlZXh5eld5TWEyZHZRblNVY1NPTGVlV2lBY3ZCaCtSVEdtZSthNXI3QnlEZmV3ZFV2V2xQeEU0WVY5NnhzbjcyUUhiMHJFYmQ2a3ZZVzVLOGVhY2dWQ0FnYVFqT0RuSWhnY0h5dVc3dDV3eEk3NTJRamVBekwvVG0rZCtjTExnVUI1Z3c2T2ZLamNaWDRIZ1FST1F1QzBCSUtUR0NDWUlRd3NtNDdDbWpVWFFGeVVnczRkZVJQS2p2b053QVZHUUVaWVU2N0lYTmJzZG05emwrakZQZ0Z3dnA5OGJ2M2MvYmpyZVZnTVFJekM2Tm1hK01aVlo0dkw0MGQ3ZEc4OU80Zjk3cVgzN09YUGY3YUxoNlkvK2YvZVM2djBhZVdmR2ZwKy9PUmU0ODh1NmptL05Fdjd2ZDdudDk4YlN4R0tIQlprUkFBQUFBQkpSVTVFcmtKZ2dnPT0",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_debug_interaction_tools__Transform_GraphicTransformTool",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQ1hCSVdYTUFBQXNTQUFBTEVnSFMzWDc4QUFBQUowbEVRVlI0Mm1Oa0lBRCtBd0dxQUpFQW9Sc0hJRVV4aXZ4UVU0emhXNEtoOFo4RVFKTEpBSEVydjBLeitjRk1BQUFBQUVsRlRrU3VRbUND",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_debug_interaction_tools__Mover_GraphicMoverTool",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVFBQUFBRHBiK3RBQUFBQ1hCSVdYTUFBQXNTQUFBTEVnSFMzWDc4QUFBQVIwbEVRVlI0Mm9VUEF3RUFNWEJTLzdiUDJUaWJwSUcxWkFYcjRaQVlYVnJycWVVdC9MUncxRmNRV3lDV3A1bFdlazlaRXd0RkNEQVNaWEN0U2o1NjkrT3J2LzFEdE5nTzBhUkkyV1F5L2FnQUFBQUFTVVZPUks1Q1lJST0",
        },
        {
          name: "__ASSET__:bitmap_flixel_addons_transition__TransitionFade_RawGraphicDiagonalGradient",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQVQ0QUFBQ0FDQVlBQUFDU2p3V0JBQUFLT21sRFExQlFhRzkwYjNOb2IzQWdTVU5ESUhCeWIyWnBiR1VBQUVpSm5aWjNWRlRYRm9mUHZYZDZvYzB3RkNsRDc3ME5JTDAzcWRKRVlaZ1pZQ2dERGpNMHNTR2lBaEZGUkFRVlFZSWlCb3lHSXJFaWlvV0FZTUVla0NDZ3hHQVVVVkY1TTdKV2RPWGx2WmVYM3g5bmZXdWZ2ZmM5Wis5OTFyb0FrTHo5dWJ4MFdBcUFOSjZBSCtMbFNvK01pcVpqK3dFTThBQUR6QUJnc2pJekFrSTl3NEJJUGg1dTlFeVJFL2dpQ0lBM2Q4UXJBRGVOdklQb2RQRC9TWnFWd1JlSTBnU0oySUxOeVdTSnVGREVxZG1DRExGOVJzVFUrQlF4d3lneDgwVUhGTEc4bUJNWDJmQ3p6eUk3aTVtZHhtT0xXSHptREhZYVc4dzlJdDZhSmVTSUdQRVhjVkVXbDVNdDRsc2kxa3dWcG5GRi9GWWNtOFpoWmdLQUlvbnRBZzRyU2NTbUlpYnh3MExjUkx3VUFCd3A4U3VPLzRvRm5CeUIrRkp1NlJtNWZHNWlrb0N1eTlLam05bmFNdWplbk94VWprQmdGTVJrcFRENWJMcGJlbG9HazVjTHdPS2RQMHRHWEZ1NnFNaldacmJXMWtibXhtWmZGZXEvYnY1TmlYdTdTSytDUC9jTW92VjlzZjJWWDNvOUFJeFpVVzEyZkxIRjd3V2dZek1BOHZlLzJEUVBBaUFwNmx2N3dGZjNvWW5uSlVrZ3lMQXpNY25PempibWNsakc0b0wrb2YvcDhEZjAxZmVNeGVuK0tBL2RuWlBBRktZSzZPSzZzZEpUMDRWOGVtWUdrOFdoRy8xNWlQOXg0Ritmd3pDRWs4RGhjM2lpaUhEUmxIRjVpYUoyODloY0FUZWRSK2Z5L2xNVC8ySFluN1E0MXlKUkdqNEJhcXd4a0JxZ0F1VFhQb0NpRUFFU2MwQzBBLzNSTjM5OE9CQy92QWpWaWNXNS95em8zN1BDWmVJbGs1djRPYzR0Skl6T0V2S3pGdmZFenhLZ0FRRklBaXBRQUNwQUErZ0NJMkFPYklBOWNBWWV3QmNFZ2pBUUJWWUJGa2dDYVlBUHNrRSsyQWlLUUFuWUFYYURhbEFMR2tBVGFBRW5RQWM0RFM2QXkrQTZ1QUZ1Z3dkZ0JJeUQ1MkFHdkFIekVBUmhJVEpFZ1JRZ1ZVZ0xNb0RNSVFia0NIbEEvbEFJRkFYRlFZa1FEeEpDK2RBbXFBUXFoNnFoT3FnSitoNDZCVjJBcmtLRDBEMW9GSnFDZm9mZXd3aE1ncW13TXF3Tm04QU0yQVgyZzhQZ2xYQWl2QnJPZ3d2aDdYQVZYQThmZzl2aEMvQjErRFk4QWorSFp4R0FFQkVhb29ZWUlRekVEUWxFb3BFRWhJK3NRNHFSU3FRZWFVRzZrRjdrSmpLQ1RDUHZVQmdVQlVWSEdhSHNVZDZvNVNnV2FqVnFIYW9VVlkwNmdtcEg5YUJ1b2taUk02aFBhREphQ1cyQXRrUDdvQ1BSaWVoc2RCRzZFdDJJYmtOZlF0OUdqNlBmWURBWUdrWUhZNFB4eGtSaGtqRnJNS1dZL1poV3pIbk1JR1lNTTR2RlloV3dCbGdIYkNDV2lSVmdpN0I3c2NldzU3QkQySEhzV3h3UnA0b3p4M25pb25FOFhBR3VFbmNVZHhZM2hKdkF6ZU9sOEZwNE8zd2dubzNQeFpmaEcvQmQrQUg4T0g2ZUlFM1FJVGdRd2dqSmhJMkVLa0lMNFJMaEllRVZrVWhVSjlvU2c0bGM0Z1ppRmZFNDhRcHhsUGlPSkVQU0o3bVJZa2hDMG5iU1lkSjUwajNTS3pLWnJFMTJKa2VUQmVUdDVDYnlSZkpqOGxzSmlvU3hoSThFVzJLOVJJMUV1OFNReEF0SnZLU1dwSXZrS3NrOHlVckprNUlEa3ROU2VDbHRLVGNwcHRRNnFScXBVMUxEVXJQU0ZHa3o2VURwTk9sUzZhUFNWNlVuWmJBeTJqSWVNbXlaUXBsRE1oZGx4aWdJUllQaVJtRlJObEVhS0pjbzQxUU1WWWZxUTAybWxsQy9vL1pUWjJSbFpDMWx3MlZ6Wkd0a3o4aU8wQkNhTnMySGxrb3JvNTJnM2FHOWwxT1djNUhqeUcyVGE1RWJrcHVUWHlMdkxNK1JMNVp2bGI4dC8xNkJydUNoa0tLd1U2RkQ0WkVpU2xGZk1WZ3hXL0dBNGlYRjZTWFVKZlpMV0V1S2w1eFljbDhKVnRKWENsRmFvM1JJcVU5cFZsbEYyVXM1UTNtdjhrWGxhUldhaXJOS3NrcUZ5bG1WS1ZXS3FxTXFWN1ZDOVp6cU03b3MzWVdlU3EraTk5Qm4xSlRVdk5XRWFuVnEvV3J6NmpycXk5VUwxRnZWSDJrUU5CZ2FDUm9WR3QwYU01cXFtZ0dhK1pyTm12ZTE4Rm9NclNTdFBWcTlXblBhT3RvUjJsdTBPN1FuZGVSMWZIVHlkSnAxSHVxU2RaMTBWK3ZXNjk3U3crZ3g5RkwwOXV2ZDBJZjFyZlNUOUd2MEJ3eGdBMnNEcnNGK2cwRkR0S0d0SWMrdzNuRFlpR1RrWXBSbDFHdzBha3d6OWpjdU1PNHdmbUdpYVJKdHN0T2sxK1NUcVpWcHFtbUQ2UU16R1ROZnN3S3pMclBmemZYTldlWTE1cmNzeUJhZUZ1c3RPaTFlV2hwWWNpd1BXTjYxb2xnRldHMng2cmI2YUcxanpiZHVzWjZ5MGJTSnM5bG5NOHlnTW9JWXBZd3J0bWhiVjl2MXRxZHQzOWxaMnduc1R0ajlabTlrbjJKLzFINXlxYzVTenRLR3BXTU82ZzVNaHpxSEVVZTZZNXpqUWNjUkp6VW5wbE85MHhObkRXZTJjNlB6aEl1ZVM3TExNWmNYcnFhdWZOYzIxemszTzdlMWJ1ZmRFWGN2OTJMM2ZnOFpqK1VlMVI2UFBkVTlFejJiUFdlOHJMeldlSjMzUm52N2VlLzBIdlpSOW1INU5Qbk0rTnI0cnZYdDhTUDVoZnBWK3ozeDEvZm4rM2NGd0FHK0Fic0NIaTdUV3NaYjFoRUlBbjBDZHdVK0N0SUpXaDMwWXpBbU9DaTRKdmhwaUZsSWZraHZLQ1UwTnZSbzZKc3cxN0N5c0FmTGRaY0xsM2VIUzRiSGhEZUZ6MFc0UjVSSGpFU2FSSzZOdkI2bEdNV042b3pHUm9kSE4wYlBydkJZc1h2RmVJeFZURkhNblpVNkszTldYbDJsdUNwMTFabFl5VmhtN01rNGRGeEUzTkc0RDh4QVpqMXpOdDRuZmwvOERNdU50WWYxbk8zTXJtQlBjUnc0NVp5SkJJZUU4b1RKUklmRVhZbFRTVTVKbFVuVFhEZHVOZmRsc25keWJmSmNTbURLNFpTRjFJalUxalJjV2x6YUtaNE1MNFhYazY2U25wTSttR0dRVVpReHN0cHU5ZTdWTTN3L2ZtTW1sTGt5czFOQUZmMU05UWwxaFp1Rm8xbU9XVFZaYjdQRHMwL21TT2Z3Y3ZweTlYTzM1VTdrZWVaOXV3YTFocldtTzE4dGYyUCs2RnFYdFhYcm9IWHg2N3JYYTZ3dlhEKyt3V3ZEa1kyRWpTa2JmeW93TFNndmVMMHBZbE5Yb1hMaGhzS3h6VjZibTRza2l2aEZ3MXZzdDlSdVJXM2xidTNmWnJGdDc3WlB4ZXppYXlXbUpaVWxIMHBacGRlK01mdW02cHVGN1FuYis4dXN5dzdzd096ZzdiaXowMm5ua1hMcDhyenlzVjBCdTlvcjZCWEZGYTkzeCs2K1dtbFpXYnVIc0VlNFo2VEt2NnB6citiZUhYcy9WQ2RWMzY1eHJXbmRwN1J2Mjc2NS9lejlRd2VjRDdUVUt0ZVcxTDQveUQxNHQ4NnJycjFldTc3eUVPWlExcUduRGVFTnZkOHl2bTFxVkd3c2FmeDRtSGQ0NUVqSWtaNG1tNmFtbzBwSHk1cmhabUh6MUxHWVl6ZStjLyt1czhXb3BhNlYxbHB5SEJ3WEhuLzJmZHozZDA3NG5lZyt5VGpaOG9QV0QvdmFLRzNGN1ZCN2J2dE1SMUxIU0dkVTUrQXAzMVBkWGZaZGJUOGEvM2o0dE5ycG1qT3laOHJPRXM0V25sMDRsM2R1OW56Rytla0xpUmZHdW1PN0gxeU12SGlySjdpbi81TGZwU3VYUFM5ZjdIWHBQWGZGNGNycHEzWlhUMTFqWE91NGJuMjl2YytxciswbnE1L2ErcTM3Mndkc0JqcHYyTjdvR2x3NmVIYklhZWpDVGZlYmwyLzUzTHArZTludHdUdkw3OXdkamhrZXVjdStPM2t2OWQ3TCsxbjM1eDlzZUloK1dQeEk2bEhsWTZYSDlUL3IvZHc2WWoxeVp0Ujl0TzlKNkpNSFk2eXg1NzlrL3ZKaHZQQXArV25saE9wRTA2VDU1T2twejZrYnoxWThHMytlOFh4K3V1aFg2Vi8zdmRCOThjTnZ6ci8xelVUT2pML2t2MXo0dmZTVndxdkRyeTFmZDg4R3pUNStrL1ptZnE3NHJjTGJJKzhZNzNyZlI3eWZtTS8rZ1AxUTlWSHZZOWNudjA4UEY5SVdGdjRGQTVqei9DVjNGblVBQUFSbFNVUkJWSGljN2RSSGtoVkJBRU5Cd2YyUERERXM4RERtbSs1V21jd0lYVUNMOStubDVlVWx3STYrN0xyUFI3d0hUS2NlbitLK0NoL3NweDJlYXZTU1JQaGdMKzN3MUtPWENCL3NwQjJlSWFLWENCL3NvaDJlWWFLWENCL3NvQjJlb2FLWENCK3NyaDJlNGFLWENCK3NyQjJlSWFPWENCK3NxaDJlWWFPWENCK3NxQjJlb2FPWENCK3NwaDJlNGFPWENCK3NwQjJlS2FLWENCK3NvaDJlYWFLWENCK3NvQjJlcWFLWENCL01yaDJlNmFLWENCL01yQjJlS2FPWENCL01xaDJlYWFPWENCL01xQjJlcWFPWENCL01waDJlNmFPWENCL01wQjJlSmFLWENCL01vaDJlWmFLWENCL01vQjJlcGFLWENCK01yaDJlNWFLWENCK01yQjJlSmFPWENCK01xaDJlWmFPWENCK01xQjJlcGFPWENCK01waDJlNWFPWENCK01wQjJlTGFLWENCK01vaDJlYmFLWENCK01vQjJlcmFLWENCKzB0Y096WGZRUzRZT21kbmkyakY0aWZORFNEcysyMFV1RUR4cmE0ZGs2ZW9ud3dkWGE0ZGsrZW9ud3daWGE0Ukc5SDRRUHJ0RU9qK2o5UWZqZ2ZPM3dpTjQvaEEvTzFRNlA2TDFDK09BODdmQ0kzaHVFRDg3UkRvL292VVA0NEhqdDhJamVCNFFQanRVT2oramRRUGpnT08zd2lONk5oQStPMFE2UDZOMUIrT0I1N2ZDSTNwMkVENTdURG8vb1BVRDQ0SEh0OElqZWc0UVBIdE1PaitnOVFmamdmdTN3aU42VGhBL3UwdzZQNkIxQStPQjI3ZkNJM2tHRUQyN1REby9vSFVqNDRHUHQ4SWpld1lRUDN0Y09qK2lkUVBqZ2JlM3dpTjVKaEE5ZTF3NlA2SjFJK09CLzdmQ0kzc21FRC83V0RvL29YVUQ0NExkMmVFVHZJc0lIMzdYREkzb1hFajdvaDBmMExpWjg3SzRkSHRFckVENTIxZzZQNkpVSUg3dHFoMGYwaW9TUEhiWERJM3Bsd3NkdTJ1RVJ2UUVJSHp0cGgwZjBCaUY4N0tJZEh0RWJpUEN4ZzNaNFJHOHd3c2ZxMnVFUnZRRUpIeXRyaDBmMEJpVjhyS29kSHRFYm1QQ3hvblo0Ukc5d3dzZHEydUVSdlFrSUh5dHBoMGYwSmlGOHJLSWRIdEdiaVBDeGduWjRSRzh5d3NmczJ1RVJ2UWtKSHpOcmgwZjBKaVY4ektvZEh0R2JtUEF4bzNaNFJHOXl3c2RzMnVFUnZRVUlIek5waDBmMEZpRjh6S0lkSHRGYmlQQXhnM1o0Ukc4eHdzZm8ydUVSdlFVSkh5TnJoMGYwRmlWOGpLb2RIdEZibVBBeG9uWjRSRzl4d3NkbzJ1RVJ2UTBJSHlOcGgwZjBOaUY4aktJZEh0SGJpUEF4Z25aNFJHOHp3a2RiT3p5aXR5SGhvNmtkSHRIYmxQRFIwZzZQNkcxTStHaG9oMGYwTmlkOFhLMGRIdEZEK0xoVU96eWlSeExoNHpydDhJZ2V2d2dmVjJpSFIvVDRpL0J4dG5aNFJJLy9DQjluYW9kSDlIaVY4SEdXZG5oRWp6Y0pIMmRvaDBmMGVKZndjYlIyZUVTUER3a2ZSMnFIUi9TNGlmQnhsSFo0UkkrYkNSOUhhSWRIOUxpTDhQR3NkbmhFajdzSkg4OW9oMGYwZUlqdzhhaDJlRVNQaHdrZmoyaUhSL1I0aXZCeHIzWjRSSStuQ1IvM2FJZEg5RGlFOEhHcmRuaEVqOE1JSDdkb2gwZjBPSlR3OFpGMmVFU1B3d2tmNzJtSFIvUTRoZkR4bG5aNFJJL1RDQit2YVlkSDlEaVY4UEd2ZG5oRWo5TUpIMzlxaDBmMHVJVHc4Vk03UEtMSFpZU1BwQjhlMGVOU3drYzdQS0xINWI0Qjl1U0dVREtrdjBzQUFBQUFTVVZPUks1Q1lJST0",
        },
        {
          name: "__ASSET__:sound_flixel_addons_text_TypeSound",
          data: "T2dnUwACAAAAAAAAAACBPwAAAAAAAD99658BHgF2b3JiaXMAAAAAAUSsAAAAAAAAgLsAAAAAAAC4AU9nZ1MAAAAAAAAAAAAAgT8AAAEAAAA8HKMNDy3/////////////////MgN2b3JiaXMdAAAAWGlwaC5PcmcgbGliVm9yYmlzIEkgMjAwNzA2MjIAAAAAAQV2b3JiaXMfQkNWAQAAAQAYY1QpRplS0kqJGXOUMUaZYpJKiaWEFkJInXMUU6k515xrrLm1IIQQGlNQKQWZUo5SaRljkCkFmVIQS0kldBI6J51jEFtJwdaYa4tBthyEDZpSTCnElFKKQggZU4wpxZRSSkIHJXQOOuYcU45KKEG4nHOrtZaWY4updJJK5yRkTEJIKYWSSgelU05CSDWW1lIpHXNSUmpB6CCEEEK2IIQNgtCQVQAAAQDAQBAasgoAUAAAEIqhGIoChIasAgAyAAAEoCiO4iiOIzmSY0kWEBqyCgAAAgAQAADAcBRJkRTJsSRL0ixL00RRVX3VNlVV9nVd13Vd13UgNGQVAAABAEBIp5mlGiDCDGQYCA1ZBQAgAAAARijCEANCQ1YBAAABAABiKDmIJrTmfHOOg2Y5aCrF5nRwItXmSW4q5uacc845J5tzxjjnnHOKcmYxaCa05pxzEoNmKWgmtOacc57E5kFrqrTmnHPGOaeDcUYY55xzmrTmQWo21uaccxa0pjlqLsXmnHMi5eZJbS7V5pxzzjnnnHPOOeecc6oXp3NwTjjnnHOi9uZabkIX55xzPhmne3NCOOecc84555xzzjnnnHOC0JBVAAAQAABBGDaGcacgSJ+jgRhFiGnIpAfdo8MkaAxyCqlHo6ORUuoglFTGSSmdIDRkFQAACAAAIYQUUkghhRRSSCGFFFKIIYYYYsgpp5yCCiqppKKKMsoss8wyyyyzzDLrsLPOOuwwxBBDDK20EktNtdVYY62555xrDtJaaa211koppZRSSikIDVkFAIAAABAIGWSQQUYhhRRSiCGmnHLKKaigAkJDVgEAgAAAAgAAADzJc0RHdERHdERHdERHdETHczxHlERJlERJtEzL1ExPFVXVlV1b1mXd9m1hF3bd93Xf93Xj14VhWZZlWZZlWZZlWZZlWZZlWYLQkFUAAAgAAIAQQgghhRRSSCGlGGPMMeegk1BCIDRkFQAACAAgAAAAwFEcxXEkR3IkyZIsSZM0S7M8zdM8TfREURRN01RFV3RF3bRF2ZRN13RN2XRVWbVdWbZt2dZtX5Zt3/d93/d93/d93/d93/d1HQgNWQUASAAA6EiOpEiKpEiO4ziSJAGhIasAABkAAAEAKIqjOI7jSJIkSZakSZ7lWaJmaqZneqqoAqEhqwAAQAAAAQAAAAAAKJriKabiKaLiOaIjSqJlWqKmaq4om7Lruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7rui4QGrIKAJAAANCRHMmRHEmRFEmRHMkBQkNWAQAyAAACAHAMx5AUybEsS9M8zdM8TfRET/RMTxVd0QVCQ1YBAIAAAAIAAAAAADAkw1IsR3M0SZRUS7VUTbVUSxVVT1VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTVN0zRNIDRkJQAABADAYo3B5SAhJSXl3hDCEJOeMSYhtV4hBJGS3jEGFYOeMqIMct5C4xCDHggNWREARAEAAMYgxxBzyDlHqZMSOeeodJQa5xyljlJnKcWYYs0oldhSrI1zjlJHraOUYiwtdpRSjanGAgAAAhwAAAIshEJDVgQAUQAAhDFIKaQUYow5p5xDjCnnmHOGMeYcc44556B0UirnnHROSsQYc445p5xzUjonlXNOSiehAACAAAcAgAALodCQFQFAnACAQZI8T/I0UZQ0TxRFU3RdUTRd1/I81fRMU1U90VRVU1Vt2VRVWZY8zzQ901RVzzRV1VRVWTZVVZZFVdVt03V123RV3ZZt2/ddWxZ2UVVt3VRd2zdV1/Zd2fZ9WdZ1Y/I8VfVM03U903Rl1XVtW3VdXfdMU5ZN15Vl03Vt25VlXXdl2fc103Rd01Vl2XRd2XZlV7ddWfZ903WF35VlX1dlWRh2XfeFW9eV5XRd3VdlVzdWWfZ9W9eF4dZ1YZk8T1U903RdzzRdV3VdX1dd19Y105Rl03Vt2VRdWXZl2fddV9Z1zzRl2XRd2zZdV5ZdWfZ9V5Z13XRdX1dlWfhVV/Z1WdeV4dZt4Tdd1/dVWfaFV5Z14dZ1Ybl1XRg+VfV9U3aF4XRl39eF31luXTiW0XV9YZVt4VhlWTl+4ViW3feVZXRdX1ht2RhWWRaGX/id5fZ943h1XRlu3efMuu8Mx++k+8rT1W1jmX3dWWZfd47hGDq/8OOpqq+brisMpywLv+3rxrP7vrKMruv7qiwLvyrbwrHrvvP8vrAso+z6wmrLwrDatjHcvm4sv3Acy2vryjHrvlG2dXxfeArD83R1XXlmXcf2dXTjRzh+ygAAgAEHAIAAE8pAoSErAoA4AQCPJImiZFmiKFmWKIqm6LqiaLqupGmmqWmeaVqaZ5qmaaqyKZquLGmaaVqeZpqap5mmaJqua5qmrIqmKcumasqyaZqy7LqybbuubNuiacqyaZqybJqmLLuyq9uu7Oq6pFmmqXmeaWqeZ5qmasqyaZquq3meanqeaKqeKKqqaqqqraqqLFueZ5qa6KmmJ4qqaqqmrZqqKsumqtqyaaq2bKqqbbuq7Pqybeu6aaqybaqmLZuqatuu7OqyLNu6L2maaWqeZ5qa55mmaZqybJqqK1uep5qeKKqq5ommaqqqLJumqsqW55mqJ4qq6omea5qqKsumatqqaZq2bKqqLZumKsuubfu+68qybqqqbJuqauumasqybMu+78qq7oqmKcumqtqyaaqyLduy78uyrPuiacqyaaqybaqqLsuybRuzbPu6aJqybaqmLZuqKtuyLfu6LNu678qub6uqrOuyLfu67vqucOu6MLyybPuqrPq6K9u6b+sy2/Z9RNOUZVM1bdtUVVl2Zdn2Zdv2fdE0bVtVVVs2TdW2ZVn2fVm2bWE0Tdk2VVXWTdW0bVmWbWG2ZeF2Zdm3ZVv2ddeVdV/XfePXZd3murLty7Kt+6qr+rbu+8Jw667wCgAAGHAAAAgwoQwUGrISAIgCAACMYYwxCI1SzjkHoVHKOecgZM5BCCGVzDkIIZSSOQehlJQy5yCUklIIoZSUWgshlJRSawUAABQ4AAAE2KApsThAoSErAYBUAACD41iW55miatqyY0meJ4qqqaq27UiW54miaaqqbVueJ4qmqaqu6+ua54miaaqq6+q6aJqmqaqu67q6Lpqiqaqq67qyrpumqqquK7uy7Oumqqqq68quLPvCqrquK8uybevCsKqu68qybNu2b9y6ruu+7/vCka3rui78wjEMRwEA4AkOAEAFNqyOcFI0FlhoyEoAIAMAgDAGIYMQQgYhhJBSSiGllBIAADDgAAAQYEIZKDRkRQAQJwAAGEMppJRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkgppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkqppJRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoplVJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSCgCQinAAkHowoQwUGrISAEgFAACMUUopxpyDEDHmGGPQSSgpYsw5xhyUklLlHIQQUmktt8o5CCGk1FJtmXNSWosx5hgz56SkFFvNOYdSUoux5ppr7qS0VmuuNedaWqs115xzzbm0FmuuOdecc8sx15xzzjnnGHPOOeecc84FAOA0OACAHtiwOsJJ0VhgoSErAYBUAAACGaUYc8456BBSjDnnHIQQIoUYc845CCFUjDnnHHQQQqgYc8w5CCGEkDnnHIQQQgghcw466CCEEEIHHYQQQgihlM5BCCGEEEooIYQQQgghhBA6CCGEEEIIIYQQQgghhFJKCCGEEEIJoZRQAABggQMAQIANqyOcFI0FFhqyEgAAAgCAHJagUs6EQY5Bjw1BylEzDUJMOdGZYk5qMxVTkDkQnXQSGWpB2V4yCwAAgCAAIMAEEBggKPhCCIgxAABBiMwQCYVVsMCgDBoc5gHAA0SERACQmKBIu7iALgNc0MVdB0IIQhCCWBxAAQk4OOGGJ97whBucoFNU6iAAAAAAAAwA4AEA4KAAIiKaq7C4wMjQ2ODo8AgAAAAAABYA+AAAOD6AiIjmKiwuMDI0Njg6PAIAAAAAAAAAAICAgAAAAAAAQAAAAICAT2dnUwAEywgAAAAAAACBPwAAAgAAAEvHOpMSHx4YHR4fHR0fHR8dHxscHyCMdGFB0n7LSWA/69mku4y/xyqb05UXpt9j4++xyjbkLYRlwfH9tQ5gNdXp0r2yOT3+Hhuv2pwef4+NVzZ7BlxfQeauLwBrNQ6jQerWBOSFukypael0B1RXWpH+8AY4MtNmXxdxxfojRWo/MlQvVb95OkwIhGnh8QfMV4DF/odWOzoduyueL3qxkqwGml49YQ2UfGMZgg9WPQesn1oDETuuJMVjd+XsFyvJxdhdObYzBGTlxpVd5ZcghPF+Wv3Xxz749GzkUySZA4Q8B8IPZF0RzP31GogaX1XN3v9W//0XrkgwE2tmaoaaCgCM546U++2zINrM7am6db35KeybTAFV/2hp5m2rFgkAfGO4wb5sMoGFbznG6Ourf5RO4l9nT3l7k0uPLgBMX+DhC1ETwOcXW0kSAx6bO2zKvgEzo2LmH9Tn25oBhGFR0D48ElhUc9MJlc3p99j45nRlc/x9pnqvsyR0Y8Hh/rsD2Jvq69L9PTbP98J0ZXO6sjk9/h4bfzcKTGFO0IM1HcDo4Ot04lTsa9F9zV1ktyPsSKsJRFee6KY6BbCOf1ZEQyWtq5fvw+f9pdGZkKKbD2Rh4dGDVSUQr857TZzOl1wUjd1drIzuisZSL9IjRQdUXZnAB6ucA+E+luXEabI29uJKysVKcrGS7FcSU+ulATqaPc9SVDGqU4QyxPz0GGOMdM7BnnMAYCmSxLAe/4bHSrd/y1CHsst+arXm+xkV6h2Rqd5VO8Drm/CkrBUf1tdZGlz1d9cRGajrI7y9yfr66jqvKcC6vr1x3lLW1tfX120AeHvrdRuAt7c3AdZs4Ly9vb3Fwt/hoABw8Ly9vb15AOftDQA4A+D2DgMA",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_debug__FlxDebugger_GraphicFlixel",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUF3QUFBQU1DQVlBQUFCV2RWem5BQUFBQ1hCSVdYTUFBQXNTQUFBTEVnSFMzWDc4QUFBQkJrbEVRVlI0Mm9YTEEyZ0ZBQkRHOFdmRldmRTV6N2J0N0paYnRyM2NNcFptMjdadDI3WjF1NnM5NitxWDd2OHhZTUFkdEl5aE1NYi92U2lTWmFnVS9TSWcrZ1B5KzlEdjFqNFNIWldId1ljcU5EbDRHbkNEc0M0NXVGUW9ZRDRvQm93TlZsVHhBOGJCR0RNNnhFQ2NLdVV3SGFvemVxVkJOUHE5eDloUEZXdXhyNWJEZUhpMGFwRExvRHZ0ZDYzMTdwSlJZSlJ0alJ3R282S2VjZURJb1BOSVBTb1FsY1NxQWlOa3dCMHFPZVhNZkFrWkFXRWdSNTllaVZjZ0xJc3dFc3VCUGRvQUdKTnNHdVFqSUo3Slp5Q29DTldMR3lsVU9hVEJGd0lWejlRajRGY0dBYU5UaVhFelJUcG9BUHJjTTNldTJjUDFteGhZSER5akhHU0ZUeTdLUXZ2YWd6K25kVVlUR0IyTWZ3QUFBQUJKUlU1RXJrSmdnZz09",
        },
        {
          name: "__ASSET__:bitmap_flixel_addons_transition__FlxTransitionSprite_RawGraphicTransTileCircle",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQWlBQUFBQWdDQVlBQUFBckZzTTFBQUFBQVhOU1IwSUFyczRjNlFBQUF2SkpSRUZVZUp6dDNORnUyekFNQmRCNi8vL1Azc01RTEREcU9MSXRVclRPQVlvTmJXS3lXU1BkVVVhWGRWMS9BSW80V3JDV2hKcDdydlp5MStMYzJrZXZUZUdvajZqTjZMYytvamZDOXg2eU51RWxzZmEvQmdRUW9JRUEwSzVLQU9oWis2Z0hBV0JDQWdod1pMWUFjR2Z0MWg2eUFrQkU3YjBlQklCSkNTQlF6OTZiOXU3cGd3Qnd2eEVEUUdUdGJRODJvSWtKSUZCRDZ4dDFsT25EUzBzLzdrR0k3Y0VFZ2hRQ0NMU0xta0I4cXZXdEVhWVBMeVBmZ3hCUmU2OEhBWUFwL2NsdUFBcFpmejR2MkVkZlAxTXYraG85TjZTamEwZHNobnMxSWpkaW16NzhtSUJRVStRRTRsTzlJMWY2eVRnQ2NRUVIzNE1GbUdtWmdGQko5QVRpZGMzbzUvYllsR3gwd0ZBRUVNNWFOeDhSOVhvOHR2ZDFxbXo4bVVjUUdhL1J1dmt6UTVXZkRlaENBS0hWWHVEb0dVVE9YTGZxNHA1NUR3WkFHQUdrdHFqcHczdTlPeDV6ZDgzUm50dnpXZ0NQSUlEVXRBMGVFVUVrNHdpRUdJNUFnSEFDeURYUkU0aFh6VE5mcXlqckhveXNtMEJIdTVjR29Cc0I1THp0Qk9MSlJ0bkVBWGlJNmdFa1l3THhxdnZONXlMcW5ua01BS1NxSGtBQWdJS3FCNURscDk5dnZ6eXErODNuSXVxZWVRd0FwS29lUURJdE8zOS9valBmMzlOZkV3QXVFRUN1eVpqQWZLcjN0RTMvanU5bmxQRDB0SDhiZ0VzRWtKcTJ3U2NpQ0xWYzMyWjdUdFl4WHVZeFp1YlBpcDlUU0NTQTFCWTlnY200QitYSzliS2UyL05hQUk4Z2dOQnFML1QwREVPakhLTkU2TmwzMWRjRWVDQUJoTE9XelVkRXZSNlA3WDJkS3B0KzVpVE5FUkJNU0FDaGtxT3cweU1NWlJ6anVBa1dlTHhsWGYzaVRQalN0MitXdXpiN3U5NmNMZjMwWGhBKzlSSzFHUDNXUS9SQytONUQxaUs4Sk5ZR0V4Qm9FRDJCeVRnQ3lyd0hKZk1vYjdTYnVlSHhURUNnaHRZMzZ0Vk43dTZGWVlRcHpGRVBKakR4UGRpQUppYUFRRDE3YjlxNy8yZWRjUVIwZCszV0hoeEJ4ZlpnQTVxWUFBSWNPYnRJakRLRkVZRCtHekVBbWNCTVNnQUJXaHd0R0QzdWI1Z3RBR1VkUWZXc2ZkU0RJNmdKQ1NCQUpRSlF1eW9CYU1ZanFJemE3ejJrQm9DL0tSRFdBS1A2d3BFQUFBQUFTVVZPUks1Q1lJST0",
        },
        {
          name: "__ASSET__:bitmap_flixel_system_debug_interaction_tools__Transform_GraphicTransformCursorDefault",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQ1hCSVdYTUFBQXNTQUFBTEVnSFMzWDc4QUFBQUdVbEVRVlI0Mm1QQUJ2NERBVGJ4b2FpWWtSUlRobjFvQUFDMG1TdldaNUx3Z2dBQUFBQkpSVTVFcmtKZ2dnPT0",
        },
        {
          name: "__ASSET__:bitmap_flixel_addons_transition_RawGraphicTransTileSquare",
          data: "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQWlBQUFBQWdDQVlBQUFBckZzTTFBQUFBQVhOU1IwSUFyczRjNlFBQUFUbEpSRUZVZUp6dDNUa1N3akFRUlVHZ3VQK1ZUWVFEQThieU5qTlc5d1drN0w4cUJib1B3M0FEQUxvVEdnRFB5TU1Cb0hOUkVYQVBPbmNrUUFEbzNka1JFRDcrR1FnUUFESTRLd0tNZnhJQ0JJQzNveVBBK0RNU0lBQzVIQlVCeHA5VUJBakFwNzBqd1BqRGhBQUJzdG9yQW93L0pDUkFnRGxiSThENEExOEpFTWh2YlFRWWZ5QXRBUUxMdEVhQThRZVlJVUNvWkdrRUdIK0E1QVFJcmY1RmdQRUg0QzhCVXRPdkNERCtBSlFnUU5hYlJvRHhCNENGSHRFWDJHaTRCWDhuREFDMHF4NGdBRUJCMVo5Z1BIc0FRRUhWQXlTUytBR0FsUVJJVGVJSGdOSUVDSzNFRHdDYkNSQXFFVDhBRnlGQVlCbnhBN0FqQVFMNWlSL2djZ1FJTUVmOEFJY1FJRUJXNGdjdVRJQUFmQkkvY0RBQkFwQ0wrS0VMQWdTQU4vSERhUVFJQUJtSW44NElFQUI2SjM0Q0NCQUFpTk50L0x3QXc0NFVnME5GRTVnQUFBQUFTVVZPUks1Q1lJST0",
        },
      ];
      null == ArrayBuffer.prototype.slice &&
        (ArrayBuffer.prototype.slice = zo.sliceImpl);
      var No = new Uint32Array(256);
      Y.__alpha16 = No;
      for (var Di = 0; 256 > Di; ) {
        var Qj = Di++;
        Y.__alpha16[Qj] = Math.ceil(257.00392156862745 * Qj);
      }
      No = new Uint8Array(511);
      Y.__clamp = No;
      for (Di = 0; 255 > Di; ) (Qj = Di++), (Y.__clamp[Qj] = Qj);
      for (Di = 255; 511 > Di; ) (Qj = Di++), (Y.__clamp[Qj] = 255);
      Ka.level = 3;
      "undefined" == typeof console && (console = {});
      null == console.log && (console.log = function () {});
      A.hitTestCanvas = xg.get_supported()
        ? window.document.createElement("canvas")
        : null;
      A.hitTestContext = xg.get_supported()
        ? A.hitTestCanvas.getContext("2d")
        : null;
      fi.maxTouchPoints = 2;
      fi.supportedGestures = null;
      fi.supportsGestureEvents = !1;
      fi.inputMode = 2;
      O.idEnumerator = 0;
      Ga._pool = (function (a) {
        return new L(function () {
          return new Ga(0, 0, 0, 0);
        });
      })(this);
      ca.defaultPixelPerfectPosition = !1;
      F.defaultAntialiasing = !1;
      Z.skipNextTransIn = !1;
      Z.skipNextTransOut = !1;
      ib.Y_PER_ROW = 85;
      wc.allLetters = (function (a) {
        a = new Q();
        a.h.a = null;
        a.h.b = null;
        a.h.c = null;
        a.h.d = null;
        a.h.e = null;
        a.h.f = null;
        a.h.g = null;
        a.h.h = null;
        a.h.i = null;
        a.h.j = null;
        a.h.k = null;
        a.h.l = null;
        a.h.m = null;
        a.h.n = null;
        a.h.o = null;
        a.h.p = null;
        a.h.q = null;
        a.h.r = null;
        a.h.s = null;
        a.h.t = null;
        a.h.u = null;
        a.h.v = null;
        a.h.w = null;
        a.h.x = null;
        a.h.y = null;
        a.h.z = null;
        a.h["0"] = null;
        a.h["1"] = null;
        a.h["2"] = null;
        a.h["3"] = null;
        a.h["4"] = null;
        a.h["5"] = null;
        a.h["6"] = null;
        a.h["7"] = null;
        a.h["8"] = null;
        a.h["9"] = null;
        a.h["&"] = { offsetsBold: [0, 2] };
        a.h["("] = { offsetsBold: [0, 5] };
        a.h[")"] = { offsetsBold: [0, 5] };
        a.h["*"] = { offsets: [0, 28] };
        a.h["+"] = { offsets: [0, 7], offsetsBold: [0, -12] };
        a.h["-"] = { offsets: [0, 16], offsetsBold: [0, -30] };
        a.h["<"] = { offsetsBold: [0, 4] };
        a.h[">"] = { offsetsBold: [0, 4] };
        a.h["'"] = { anim: "apostrophe", offsets: [0, 32] };
        a.h['"'] = { anim: "quote", offsets: [0, 32], offsetsBold: [0, 0] };
        a.h["!"] = { anim: "exclamation", offsetsBold: [0, 10] };
        a.h["?"] = { anim: "question", offsetsBold: [0, 4] };
        a.h["."] = { anim: "period", offsetsBold: [0, -44] };
        a.h["\u275d"] = {
          anim: "start quote",
          offsets: [0, 24],
          offsetsBold: [0, -5],
        };
        a.h["\u275e"] = {
          anim: "end quote",
          offsets: [0, 24],
          offsetsBold: [0, -5],
        };
        a.h._ = null;
        a.h["#"] = null;
        a.h.$ = null;
        a.h["%"] = null;
        a.h[":"] = { offsets: [0, 2] };
        a.h[";"] = { offsets: [0, -2] };
        a.h["@"] = null;
        a.h["["] = null;
        a.h["]"] = { offsets: [0, -1] };
        a.h["^"] = { offsets: [0, 28] };
        a.h[","] = { anim: "comma", offsets: [0, -6] };
        a.h["\\"] = { anim: "back slash", offsets: [0, 0] };
        a.h["/"] = { anim: "forward slash", offsets: [0, 0] };
        a.h["|"] = null;
        a.h["~"] = { offsets: [0, 16] };
        return a;
      })(this);
      na.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      cd.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
        fields: {
          toJSON: { SuppressWarnings: ["checkstyle:Dynamic"] },
          _: { SuppressWarnings: ["checkstyle:Dynamic"] },
        },
      };
      z.__meta__ = {
        fields: {
          __cairo: { SuppressWarnings: ["checkstyle:Dynamic"] },
          addEventListener: { SuppressWarnings: ["checkstyle:Dynamic"] },
          removeEventListener: { SuppressWarnings: ["checkstyle:Dynamic"] },
        },
      };
      z.__broadcastEvents = new Q();
      z.__instanceCount = 0;
      z.__tempStack = new db(
        function () {
          return ja.toObjectVector(null);
        },
        function (a) {
          a.set_length(0);
        }
      );
      yc.DEFAULT_CHARACTER = "bf";
      y.downScroll = !1;
      y.middleScroll = !1;
      y.opponentStrums = !0;
      y.showFPS = !1;
      y.flashing = !0;
      y.globalAntialiasing = !0;
      y.noteSplashes = !0;
      y.lowQuality = !1;
      y.shaders = !1;
      y.framerate = 60;
      y.violence = !0;
      y.camZooms = !0;
      y.hideHud = !1;
      y.noteOffset = 0;
      y.arrowHSV = [
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
      ];
      y.ghostTapping = !0;
      y.timeBarType = "Time Left";
      y.scoreZoom = !0;
      y.noReset = !1;
      y.healthBarAlpha = 1;
      y.controllerMode = !1;
      y.hitsoundVolume = 0;
      y.pauseMusic = "Breakfast";
      y.checkForUpdates = !0;
      y.comboStacking = !0;
      y.gameplaySettings = (function (a) {
        a = new Q();
        a.h.scrollspeed = 1;
        a.h.scrolltype = "multiplicative";
        a.h.songspeed = 1;
        a.h.healthgain = 1;
        a.h.healthloss = 1;
        a.h.instakill = !1;
        a.h.practice = !1;
        a.h.botplay = !1;
        a.h.opponentplay = !1;
        return a;
      })(this);
      y.comboOffset = [0, 0, 0, 0];
      y.ratingOffset = 0;
      y.sickWindow = 45;
      y.goodWindow = 90;
      y.badWindow = 135;
      y.safeFrames = 10;
      y.keyBinds = (function (a) {
        a = new Q();
        a.h.note_left = [65, 37];
        a.h.note_down = [83, 40];
        a.h.note_up = [87, 38];
        a.h.note_right = [68, 39];
        a.h.ui_left = [65, 37];
        a.h.ui_down = [83, 40];
        a.h.ui_up = [87, 38];
        a.h.ui_right = [68, 39];
        a.h.accept = [32, 13];
        a.h.back = [8, 27];
        a.h.pause = [13, 27];
        a.h.reset = [82, -1];
        a.h.volume_mute = [48, -1];
        a.h.volume_up = [107, 187];
        a.h.volume_down = [109, 189];
        a.h.debug_1 = [55, -1];
        a.h.debug_2 = [56, -1];
        return a;
      })(this);
      Zd.__meta__ = {
        fields: { glProgram: { SuppressWarnings: ["checkstyle:Dynamic"] } },
      };
      P.bpm = 100;
      P.crochet = (60 / P.bpm) * 1e3;
      P.stepCrochet = P.crochet / 4;
      P.songPosition = 0;
      P.offset = 0;
      P.safeZoneOffset = (y.safeFrames / 60) * 1e3;
      P.bpmChangeMap = [];
      Ta.defaultDifficulties = ["Easy", "Normal", "Hard"];
      Ta.defaultDifficulty = "Normal";
      Ta.difficulties = [];
      dd.IDLE_SUFFIX = "-IDLE";
      dd.DEFAULT_CHARACTER = "bf";
      dd.DEFAULT_SCALE = 0.7;
      Ib.LEFT_CHAR_X = -60;
      Ib.RIGHT_CHAR_X = -100;
      Ib.DEFAULT_CHAR_Y = 60;
      Ib.DEFAULT_TEXT_X = 175;
      Ib.DEFAULT_TEXT_Y = 432;
      Ib.LONG_TEXT_ADD = 24;
      Lg.leftState = !1;
      rb.curSelected = 0;
      rb.lastDifficultyName = "";
      Ec.Function_Stop = 1;
      Ec.Function_Continue = 0;
      tf.$name = "unnamed";
      hd.characterName = "bf-dead";
      hd.deathSoundName = "fnf_loss_sfx";
      hd.loopSoundName = "gameOver";
      hd.endSoundName = "gameOverEnd";
      Sa.weekScores = new Q();
      Sa.songScores = new Q();
      Sa.songRating = new Q();
      Lb.MIN_TIME = 1;
      zc.psychEngineVersion = "0.6.3";
      zc.curSelected = 0;
      Sb.__fontByName = new Q();
      Sb.__registeredFonts = [];
      $d.DEFAULT_CHARACTER = "bf";
      Id.swagWidth = 112;
      qg.leftState = !1;
      G.dumpExclusions = [
        "assets/music/freakyMenu.mp3",
        "assets/shared/music/breakfast.mp3",
        "assets/shared/music/tea-time.mp3",
      ];
      G.localTrackedAssets = [];
      G.currentModDirectory = "";
      G.currentTrackedAssets = new Q();
      G.currentTrackedSounds = new Q();
      ae.songName = "";
      C.STRUM_X = 42;
      C.STRUM_X_MIDDLESCROLL = -278;
      C.ratingStuff = [
        ["You Suck!", 0.2],
        ["Shit", 0.4],
        ["Bad", 0.5],
        ["Bruh", 0.6],
        ["Meh", 0.69],
        ["Nice", 0.7],
        ["Good", 0.8],
        ["Great", 0.9],
        ["Sick!", 1],
        ["Perfect!!", 1],
      ];
      C.curStage = "";
      C.isPixelStage = !1;
      C.isStoryMode = !1;
      C.storyWeek = 0;
      C.storyPlaylist = [];
      C.storyDifficulty = 1;
      C.changedDifficulty = !1;
      C.chartingMode = !1;
      C.campaignScore = 0;
      C.campaignMisses = 0;
      C.seenCutscene = !1;
      C.deathCounter = 0;
      C.daPixelZoom = 6;
      C.lastScore = [];
      C.startOnTime = 0;
      ia.numPlayers = 0;
      Ab.weekCompleted = new Q();
      Ab.lastDifficultyName = "";
      Ab.curWeek = 0;
      Mi.animationNotes = [];
      cb.muteKeys = [48];
      cb.volumeDownKeys = [109, 189];
      cb.volumeUpKeys = [107, 187];
      cb.initialized = !1;
      cb.updateVersion = "";
      cb.playJingle = !1;
      cb.closedState = !1;
      ab.weeksLoaded = new Q();
      ab.weeksList = [];
      oa.Element = 0;
      oa.PCData = 1;
      oa.CData = 2;
      oa.Comment = 3;
      oa.DocType = 4;
      oa.ProcessingInstruction = 5;
      oa.Document = 6;
      Ti.STD_MATRIX3D_DATA = {
        m00: 1,
        m01: 0,
        m02: 0,
        m03: 0,
        m10: 0,
        m11: 1,
        m12: 0,
        m13: 0,
        m20: 0,
        m21: 0,
        m22: 1,
        m23: 0,
        m30: 0,
        m31: 0,
        m32: 0,
        m33: 1,
      };
      xa.__meta__ = {
        fields: {
          equals: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
        },
      };
      xa.__identity = new xa();
      xa.__pool = new db(
        function () {
          return new xa();
        },
        function (a) {
          a.identity();
        }
      );
      Jd.sMatrix = new xa();
      da.noteTypeList =
        ";Alt Animation;Hey!;Hurt Note;GF Sing;No Animation".split(";");
      da.goToPlayState = !1;
      da.curSec = 0;
      da.lastSection = 0;
      da.lastSong = "";
      da.GRID_SIZE = 40;
      da.quantization = 16;
      da.curQuant = 3;
      da.vortex = !1;
      vf.TIP_TEXT_MAIN =
        "JKLI - Move camera (Hold Shift to move 4x faster)\n\t\nQ/E - Zoom out/in\n\t\nR - Reset Camera\n\t\nH - Toggle Speech Bubble\n\t\nSpace - Reset text";
      vf.TIP_TEXT_OFFSET =
        "JKLI - Move camera (Hold Shift to move 4x faster)\n\t\nQ/E - Zoom out/in\n\t\nR - Reset Camera\n\t\nH - Toggle Ghosts\n\t\nWASD - Move Looping animation offset (Red)\n\t\nArrow Keys - Move Idle/Finished animation offset (Blue)\n\t\nHold Shift to move offsets 10x faster";
      vf.DEFAULT_TEXT = "Lorem ipsum dolor sit amet";
      wf.DEFAULT_TEXT = "coolswag";
      wf.DEFAULT_SPEED = 0.05;
      wf.DEFAULT_BUBBLETYPE = "normal";
      Da.weekFileName = "week1";
      Da.loadError = !1;
      Wf.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
        fields: {
          toJSON: { SuppressWarnings: ["checkstyle:Dynamic"] },
          _: { SuppressWarnings: ["checkstyle:Dynamic"] },
        },
      };
      ba.pool = (function (a) {
        return new L(function () {
          return new ba(0, 0);
        });
      })(this);
      Qb.__pool = new db(
        function () {
          return new Qb();
        },
        function (a) {
          a.__identity();
        }
      );
      Ob.defaultZoom = 1;
      Zi.sha = "";
      g.autoPause = !0;
      g.fixedTimestep = !0;
      g.timeScale = 1;
      g.animationTimeScale = 1;
      g.worldDivisions = 6;
      g.VERSION = new Zi(5, 4, 1);
      g.elapsed = 0;
      g.maxElapsed = 0.1;
      g.scaleMode = new Ck();
      g.worldBounds = (function (a) {
        a = Ga._pool.get();
        var b = 0,
          c = 0,
          d = 0,
          e = 0;
        null == e && (e = 0);
        null == d && (d = 0);
        null == c && (c = 0);
        null == b && (b = 0);
        a.x = b;
        a.y = c;
        a.width = d;
        a.height = e;
        a._inPool = !1;
        return a;
      })(this);
      g.save = new ke();
      g.random = new sh();
      g.swipes = [];
      g.inputs = new Ym();
      g.log = new Zm();
      g.debugger = new Xm();
      g.bitmap = new Vm();
      g.cameras = new Wm();
      g.initialWidth = 0;
      g.initialHeight = 0;
      g.signals = new cn();
      ce.BASE_VERTEX_HEADER =
        "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;";
      ce.BASE_VERTEX_BODY =
        "openfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform)\n\t\t{\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;";
      ce.BASE_VERTEX_SOURCE =
        "#pragma header\n\n\t\tattribute float alpha;\n\t\tattribute vec4 colorMultiplier;\n\t\tattribute vec4 colorOffset;\n\t\tuniform bool hasColorTransform;\n\n\t\tvoid main(void)\n\t\t{\n\t\t\t#pragma body\n\n\t\t\topenfl_Alphav = openfl_Alpha * alpha;\n\n\t\t\tif (hasColorTransform)\n\t\t\t{\n\t\t\t\topenfl_ColorOffsetv = colorOffset / 255.0;\n\t\t\t\topenfl_ColorMultiplierv = colorMultiplier;\n\t\t\t}\n\t\t}";
      ce.BASE_FRAGMENT_HEADER =
        "varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tuniform bool hasTransform;\n\t\tuniform bool hasColorTransform;\n\n\t\tvec4 flixel_texture2D(sampler2D bitmap, vec2 coord)\n\t\t{\n\t\t\tvec4 color = texture2D(bitmap, coord);\n\n\t\t\tif (!hasTransform)\n\t\t\t{\n\t\t\t\treturn color;\n\t\t\t}\n\n\t\t\tif (color.a == 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t}\n\n\t\t\tif (!hasColorTransform)\n\t\t\t{\n\t\t\t\treturn color * openfl_Alphav;\n\t\t\t}\n\n\t\t\tcolor = vec4(color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4(0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp(openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t}\n\n\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t}";
      ce.BASE_FRAGMENT_BODY =
        "vec4 color = texture2D(bitmap, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0)\n\t\t{\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t}\n\t\telse if (openfl_HasColorTransform)\n\t\t{\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0)\n\t\t\t{\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\t\t}";
      ce.BASE_FRAGMENT_SOURCE =
        "#pragma header\n\n\t\tvoid main(void)\n\t\t{\n\t\t\tgl_FragColor = flixel_texture2D(bitmap, openfl_TextureCoordv);\n\t\t}";
      rf.helperString = "";
      S.__meta__ = {
        fields: {
          image: { SuppressWarnings: ["checkstyle:Dynamic"] },
          __framebufferContext: { SuppressWarnings: ["checkstyle:Dynamic"] },
          __indexBufferContext: { SuppressWarnings: ["checkstyle:Dynamic"] },
          __surface: { SuppressWarnings: ["checkstyle:Dynamic"] },
          __textureContext: { SuppressWarnings: ["checkstyle:Dynamic"] },
          __vertexBufferContext: { SuppressWarnings: ["checkstyle:Dynamic"] },
          __fromImage: { SuppressWarnings: ["checkstyle:Dynamic"] },
        },
      };
      S.__tempVector = new Xh();
      qe.resourceType = "image/png";
      qe.resourceName =
        "__ASSET__:bitmap_flixel_addons_transition__FlxTransitionSprite_RawGraphicTransTileCircle";
      re.resourceType = "image/png";
      re.resourceName =
        "__ASSET__:bitmap_flixel_addons_transition__FlxTransitionSprite_RawGraphicTransTileDiamond";
      se.resourceType = "image/png";
      se.resourceName =
        "__ASSET__:bitmap_flixel_addons_transition_RawGraphicTransTileSquare";
      te.resourceType = "image/png";
      te.resourceName =
        "__ASSET__:bitmap_flixel_addons_transition__TransitionFade_RawGraphicDiagonalGradient";
      gb.__pool = new db(
        function () {
          return new gb();
        },
        function (a) {
          a.setTo(0, 0);
        }
      );
      ha.__pool = new db(
        function () {
          return new ha();
        },
        function (a) {
          a.setTo(0, 0, 0, 0);
        }
      );
      ea.bitmapsCreated = 0;
      ea.useSectionCache = !0;
      ea._staticPoint = new gb();
      ea._staticRect = new ha();
      ea._staticRect2 = new ha();
      ea._staticPointZero = new gb(0, 0);
      ea._staticMatrix = new xa();
      ea._staticFlxRect = (function (a) {
        a = Ga._pool.get();
        var b = 0,
          c = 0,
          d = 0,
          e = 0;
        null == e && (e = 0);
        null == d && (d = 0);
        null == c && (c = 0);
        null == b && (b = 0);
        a.x = b;
        a.y = c;
        a.width = d;
        a.height = e;
        a._inPool = !1;
        return a;
      })(this);
      ea._staticFlxRect2 = (function (a) {
        a = Ga._pool.get();
        var b = 0,
          c = 0,
          d = 0,
          e = 0;
        null == e && (e = 0);
        null == d && (d = 0);
        null == c && (c = 0);
        null == b && (b = 0);
        a.x = b;
        a.y = c;
        a.width = d;
        a.height = e;
        a._inPool = !1;
        return a;
      })(this);
      Yc._cachedPoint = new ba(0, 0);
      lj.CLICK_EVENT = "click_popup";
      kd.EXTENSIONS = [".ttf", ".otf"];
      ed._pool = new L(function () {
        return new ed();
      });
      ed._boundObjects = new Yb();
      Xb.defaultPersist = !1;
      Za._point = new gb();
      Za._rect = new ha();
      Za._matrix = new kh();
      Kd.drawCalls = 0;
      eb.__meta__ = {
        fields: {
          addEventListener: { SuppressWarnings: ["checkstyle:Dynamic"] },
        },
      };
      eb.numDevices = 0;
      eb.__deviceList = [];
      eb.__instances = [];
      eb.__devices = new Yb();
      sg._gameInput = new eb();
      Ve.LEFT_ANALOG_STICK = new Ac(0, 1, {
        up: 24,
        down: 25,
        left: 26,
        right: 27,
      });
      Ve.RIGHT_ANALOG_STICK = new Ac(2, 3, {
        up: 28,
        down: 29,
        left: 30,
        right: 31,
      });
      We.LEFT_ANALOG_STICK = new Ac(0, 1, {
        up: 21,
        down: 22,
        left: 23,
        right: 24,
      });
      We.RIGHT_ANALOG_STICK = new Ac(2, 3, {
        up: 25,
        down: 26,
        left: 27,
        right: 28,
      });
      xd.REMOTE_DPAD = new Ac(0, 1, {
        up: 22,
        down: 23,
        left: 24,
        right: 25,
        threshold: 0.5,
        mode: Zg.ONLY_DIGITAL,
      });
      xd.LEFT_ANALOG_STICK = new Ac(0, 1, {
        up: 26,
        down: 27,
        left: 28,
        right: 29,
      });
      xd.RIGHT_ANALOG_STICK = new Ac(2, 3, {
        up: 26,
        down: 27,
        left: 28,
        right: 29,
      });
      Xe.LEFT_ANALOG_STICK = new Ac(0, 1, {
        up: 23,
        down: 24,
        left: 25,
        right: 26,
      });
      Xe.RIGHT_ANALOG_STICK = new Ac(2, 3, {
        up: 27,
        down: 28,
        left: 29,
        right: 30,
      });
      Ye.LEFT_ANALOG_STICK = new Ac(0, 1, {
        up: 22,
        down: 23,
        left: 24,
        right: 25,
      });
      Ye.RIGHT_ANALOG_STICK = new Ac(2, 3, {
        up: 26,
        down: 27,
        left: 28,
        right: 29,
      });
      ue.LEFT_ANALOG_STICK = new Ac(0, 1, {
        up: 21,
        down: 22,
        left: 23,
        right: 24,
      });
      ue.RIGHT_ANALOG_STICK = new Ac(2, 3, {
        up: 25,
        down: 26,
        left: 27,
        right: 28,
      });
      di.LEFT_ANALOG_STICK = new Ac(0, 1, {
        up: 22,
        down: 23,
        left: 24,
        right: 25,
      });
      ei.LEFT_ANALOG_STICK = new Ac(0, 1, {
        up: 22,
        down: 23,
        left: 24,
        right: 25,
      });
      Ze.LEFT_ANALOG_STICK = new Ac(0, 1, {
        up: 22,
        down: 23,
        left: 24,
        right: 25,
      });
      Ze.RIGHT_ANALOG_STICK = new Ac(2, 3, {
        up: 26,
        down: 27,
        left: 28,
        right: 29,
      });
      yd.REMOTE_DPAD = new Ac(0, 1, {
        up: 22,
        down: 23,
        left: 24,
        right: 25,
        threshold: 0.5,
        mode: Zg.ONLY_DIGITAL,
      });
      yd.LEFT_ANALOG_STICK = new Ac(0, 1, {
        up: 28,
        down: 29,
        left: 30,
        right: 31,
      });
      yd.RIGHT_ANALOG_STICK = new Ac(2, 3, {
        up: 32,
        down: 33,
        left: 34,
        right: 35,
      });
      $e.LEFT_ANALOG_STICK = new Ac(0, 1, {
        up: 21,
        down: 22,
        left: 23,
        right: 24,
      });
      $e.RIGHT_ANALOG_STICK = new Ac(2, 3, {
        up: 25,
        down: 26,
        left: 27,
        right: 28,
      });
      qo.fromStringMap = (function (a) {
        a = new Q();
        a.h.ANY = -2;
        a.h.A = 65;
        a.h.B = 66;
        a.h.C = 67;
        a.h.D = 68;
        a.h.E = 69;
        a.h.F = 70;
        a.h.G = 71;
        a.h.H = 72;
        a.h.I = 73;
        a.h.J = 74;
        a.h.K = 75;
        a.h.L = 76;
        a.h.M = 77;
        a.h.N = 78;
        a.h.O = 79;
        a.h.P = 80;
        a.h.Q = 81;
        a.h.R = 82;
        a.h.S = 83;
        a.h.T = 84;
        a.h.U = 85;
        a.h.V = 86;
        a.h.W = 87;
        a.h.X = 88;
        a.h.Y = 89;
        a.h.Z = 90;
        a.h.ZERO = 48;
        a.h.ONE = 49;
        a.h.TWO = 50;
        a.h.THREE = 51;
        a.h.FOUR = 52;
        a.h.FIVE = 53;
        a.h.SIX = 54;
        a.h.SEVEN = 55;
        a.h.EIGHT = 56;
        a.h.NINE = 57;
        a.h.PAGEUP = 33;
        a.h.PAGEDOWN = 34;
        a.h.HOME = 36;
        a.h.END = 35;
        a.h.INSERT = 45;
        a.h.ESCAPE = 27;
        a.h.MINUS = 189;
        a.h.PLUS = 187;
        a.h.DELETE = 46;
        a.h.BACKSPACE = 8;
        a.h.LBRACKET = 219;
        a.h.RBRACKET = 221;
        a.h.BACKSLASH = 220;
        a.h.CAPSLOCK = 20;
        a.h.SCROLL_LOCK = 145;
        a.h.NUMLOCK = 144;
        a.h.SEMICOLON = 186;
        a.h.QUOTE = 222;
        a.h.ENTER = 13;
        a.h.SHIFT = 16;
        a.h.COMMA = 188;
        a.h.PERIOD = 190;
        a.h.SLASH = 191;
        a.h.GRAVEACCENT = 192;
        a.h.CONTROL = 17;
        a.h.ALT = 18;
        a.h.SPACE = 32;
        a.h.UP = 38;
        a.h.DOWN = 40;
        a.h.LEFT = 37;
        a.h.RIGHT = 39;
        a.h.TAB = 9;
        a.h.WINDOWS = 15;
        a.h.MENU = 302;
        a.h.PRINTSCREEN = 301;
        a.h.BREAK = 19;
        a.h.F1 = 112;
        a.h.F2 = 113;
        a.h.F3 = 114;
        a.h.F4 = 115;
        a.h.F5 = 116;
        a.h.F6 = 117;
        a.h.F7 = 118;
        a.h.F8 = 119;
        a.h.F9 = 120;
        a.h.F10 = 121;
        a.h.F11 = 122;
        a.h.F12 = 123;
        a.h.NUMPADZERO = 96;
        a.h.NUMPADONE = 97;
        a.h.NUMPADTWO = 98;
        a.h.NUMPADTHREE = 99;
        a.h.NUMPADFOUR = 100;
        a.h.NUMPADFIVE = 101;
        a.h.NUMPADSIX = 102;
        a.h.NUMPADSEVEN = 103;
        a.h.NUMPADEIGHT = 104;
        a.h.NUMPADNINE = 105;
        a.h.NUMPADMINUS = 109;
        a.h.NUMPADPLUS = 107;
        a.h.NUMPADPERIOD = 110;
        a.h.NUMPADMULTIPLY = 106;
        a.h.NUMPADSLASH = 111;
        return a;
      })(this);
      qo.toStringMap = (function (a) {
        a = new kc();
        a.h[-2] = "ANY";
        a.h[65] = "A";
        a.h[66] = "B";
        a.h[67] = "C";
        a.h[68] = "D";
        a.h[69] = "E";
        a.h[70] = "F";
        a.h[71] = "G";
        a.h[72] = "H";
        a.h[73] = "I";
        a.h[74] = "J";
        a.h[75] = "K";
        a.h[76] = "L";
        a.h[77] = "M";
        a.h[78] = "N";
        a.h[79] = "O";
        a.h[80] = "P";
        a.h[81] = "Q";
        a.h[82] = "R";
        a.h[83] = "S";
        a.h[84] = "T";
        a.h[85] = "U";
        a.h[86] = "V";
        a.h[87] = "W";
        a.h[88] = "X";
        a.h[89] = "Y";
        a.h[90] = "Z";
        a.h[48] = "ZERO";
        a.h[49] = "ONE";
        a.h[50] = "TWO";
        a.h[51] = "THREE";
        a.h[52] = "FOUR";
        a.h[53] = "FIVE";
        a.h[54] = "SIX";
        a.h[55] = "SEVEN";
        a.h[56] = "EIGHT";
        a.h[57] = "NINE";
        a.h[33] = "PAGEUP";
        a.h[34] = "PAGEDOWN";
        a.h[36] = "HOME";
        a.h[35] = "END";
        a.h[45] = "INSERT";
        a.h[27] = "ESCAPE";
        a.h[189] = "MINUS";
        a.h[187] = "PLUS";
        a.h[46] = "DELETE";
        a.h[8] = "BACKSPACE";
        a.h[219] = "LBRACKET";
        a.h[221] = "RBRACKET";
        a.h[220] = "BACKSLASH";
        a.h[20] = "CAPSLOCK";
        a.h[145] = "SCROLL_LOCK";
        a.h[144] = "NUMLOCK";
        a.h[186] = "SEMICOLON";
        a.h[222] = "QUOTE";
        a.h[13] = "ENTER";
        a.h[16] = "SHIFT";
        a.h[188] = "COMMA";
        a.h[190] = "PERIOD";
        a.h[191] = "SLASH";
        a.h[192] = "GRAVEACCENT";
        a.h[17] = "CONTROL";
        a.h[18] = "ALT";
        a.h[32] = "SPACE";
        a.h[38] = "UP";
        a.h[40] = "DOWN";
        a.h[37] = "LEFT";
        a.h[39] = "RIGHT";
        a.h[9] = "TAB";
        a.h[15] = "WINDOWS";
        a.h[302] = "MENU";
        a.h[301] = "PRINTSCREEN";
        a.h[19] = "BREAK";
        a.h[112] = "F1";
        a.h[113] = "F2";
        a.h[114] = "F3";
        a.h[115] = "F4";
        a.h[116] = "F5";
        a.h[117] = "F6";
        a.h[118] = "F7";
        a.h[119] = "F8";
        a.h[120] = "F9";
        a.h[121] = "F10";
        a.h[122] = "F11";
        a.h[123] = "F12";
        a.h[96] = "NUMPADZERO";
        a.h[97] = "NUMPADONE";
        a.h[98] = "NUMPADTWO";
        a.h[99] = "NUMPADTHREE";
        a.h[100] = "NUMPADFOUR";
        a.h[101] = "NUMPADFIVE";
        a.h[102] = "NUMPADSIX";
        a.h[103] = "NUMPADSEVEN";
        a.h[104] = "NUMPADEIGHT";
        a.h[105] = "NUMPADNINE";
        a.h[109] = "NUMPADMINUS";
        a.h[107] = "NUMPADPLUS";
        a.h[110] = "NUMPADPERIOD";
        a.h[106] = "NUMPADMULTIPLY";
        a.h[111] = "NUMPADSLASH";
        return a;
      })(this);
      He.resourceType = "image/png";
      He.resourceName =
        "__ASSET__:bitmap_flixel_input_mouse__FlxMouse_GraphicCursor";
      Vh.maxTouchPoints = 0;
      zd._point = (function (a) {
        var b = (a = 0);
        null == b && (b = 0);
        null == a && (a = 0);
        a = ba.pool.get().set(a, b);
        a._inPool = !1;
        return a;
      })(this);
      zf.resourceType = "image/png";
      zf.resourceName = "__ASSET__:bitmap_flixel_system_GraphicLogo";
      Af.resourceType = "image/png";
      Af.resourceName = "__ASSET__:bitmap_flixel_system_GraphicVirtualInput";
      rd.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      rd.defaultObjectEncoding = 10;
      Fd.defaultSoundExtension = "ogg";
      Fd.FONT_DEFAULT = "Nokia Cellphone FC Small";
      Fd.FONT_DEBUGGER = "Monsterrat";
      Ad._NUM_CACHED_FLX_LIST = 0;
      bf.resourceType = "image/png";
      bf.resourceName =
        "__ASSET__:bitmap_flixel_system__FlxPreloader_GraphicLogoLight";
      cf.resourceType = "image/png";
      cf.resourceName =
        "__ASSET__:bitmap_flixel_system__FlxPreloader_GraphicLogoCorners";
      ve._NUM_CACHED_QUAD_TREES = 0;
      pe.muted = !0;
      Cf.resourceType = "image/png";
      Cf.resourceName =
        "__ASSET__:bitmap_flixel_system_debug__FlxDebugger_GraphicFlixel";
      Df.resourceType = "image/png";
      Df.resourceName =
        "__ASSET__:bitmap_flixel_system_debug__FlxDebugger_GraphicDrawDebug";
      Ef.resourceType = "image/png";
      Ef.resourceName = "__ASSET__:bitmap_flixel_system_debug_GraphicLog";
      Ff.resourceType = "image/png";
      Ff.resourceName = "__ASSET__:bitmap_flixel_system_debug_GraphicStats";
      Gf.resourceType = "image/png";
      Gf.resourceName = "__ASSET__:bitmap_flixel_system_debug_GraphicWatch";
      Hf.resourceType = "image/png";
      Hf.resourceName = "__ASSET__:bitmap_flixel_system_debug_GraphicBitmapLog";
      If.resourceType = "image/png";
      If.resourceName = "__ASSET__:bitmap_flixel_system_debug_GraphicConsole";
      Jf.resourceType = "image/png";
      Jf.resourceName = "__ASSET__:bitmap_flixel_system_debug_GraphicArrowLeft";
      Kf.resourceType = "image/png";
      Kf.resourceName =
        "__ASSET__:bitmap_flixel_system_debug_GraphicArrowRight";
      df.resourceType = "image/png";
      df.resourceName =
        "__ASSET__:bitmap_flixel_system_debug_GraphicCloseButton";
      ef.resourceType = "image/png";
      ef.resourceName =
        "__ASSET__:bitmap_flixel_system_debug_GraphicInteractive";
      gi._tooltips = [];
      ff.resourceType = "image/png";
      ff.resourceName =
        "__ASSET__:bitmap_flixel_system_debug__Window_GraphicWindowHandle";
      Ke.windowAmount = 0;
      Mf.resourceType = "image/png";
      Mf.resourceName =
        "__ASSET__:bitmap_flixel_system_debug_interaction_tools__Eraser_GraphicEraserTool";
      Le.resourceType = "image/png";
      Le.resourceName =
        "__ASSET__:bitmap_flixel_system_debug_interaction_tools__Mover_GraphicMoverTool";
      ne.resourceType = "image/png";
      ne.resourceName =
        "__ASSET__:bitmap_flixel_system_debug_interaction_tools_GraphicCursorCross";
      gf.resourceType = "image/png";
      gf.resourceName =
        "__ASSET__:bitmap_flixel_system_debug_interaction_tools__Transform_GraphicTransformTool";
      hf.resourceType = "image/png";
      hf.resourceName =
        "__ASSET__:bitmap_flixel_system_debug_interaction_tools__Transform_GraphicTransformCursorDefault";
      jf.resourceType = "image/png";
      jf.resourceName =
        "__ASSET__:bitmap_flixel_system_debug_interaction_tools__Transform_GraphicTransformCursorScaleY";
      kf.resourceType = "image/png";
      kf.resourceName =
        "__ASSET__:bitmap_flixel_system_debug_interaction_tools__Transform_GraphicTransformCursorScaleX";
      lf.resourceType = "image/png";
      lf.resourceName =
        "__ASSET__:bitmap_flixel_system_debug_interaction_tools__Transform_GraphicTransformCursorScaleXY";
      mf.resourceType = "image/png";
      mf.resourceName =
        "__ASSET__:bitmap_flixel_system_debug_interaction_tools__Transform_GraphicTransformCursorRotate";
      Ja.NORMAL = new Ja();
      Ja.WARNING = new Ja(
        "[WARNING] ",
        "D9F85C",
        12,
        !1,
        !1,
        !1,
        "flixel/sounds/beep",
        !0
      );
      Ja.ERROR = new Ja(
        "[ERROR] ",
        "FF8888",
        12,
        !1,
        !1,
        !1,
        "flixel/sounds/beep",
        !0
      );
      Ja.NOTICE = new Ja("[NOTICE] ", "5CF878", 12, !1);
      Nf.resourceType = "image/png";
      Nf.resourceName =
        "__ASSET__:bitmap_flixel_system_debug_stats__Stats_GraphicMinimizeButton";
      Of.resourceType = "image/png";
      Of.resourceName =
        "__ASSET__:bitmap_flixel_system_debug_stats__Stats_GraphicMaximizeButton";
      Aa.PI2 = Math.PI / 2;
      Aa.ELASTIC_PERIOD = 0.4;
      ob.colorLookup = (function (a) {
        a = new Q();
        a.h.TRANSPARENT = 0;
        a.h.WHITE = -1;
        a.h.GRAY = -8355712;
        a.h.BLACK = -16777216;
        a.h.GREEN = -16744448;
        a.h.LIME = -16711936;
        a.h.YELLOW = -256;
        a.h.ORANGE = -23296;
        a.h.RED = -65536;
        a.h.PURPLE = -8388480;
        a.h.BLUE = -16776961;
        a.h.BROWN = -7650029;
        a.h.PINK = -16181;
        a.h.MAGENTA = -65281;
        a.h.CYAN = -16711681;
        return a;
      })(this);
      ob.COLOR_REGEX = new ya("^(0x|#)(([A-F0-9]{2}){3,4})$", "i");
      fg.defaultObjectEncoding = 10;
      wd.flashGfxSprite = new t();
      wd.flashGfx = wd.flashGfxSprite.get_graphics();
      Ic._pool = new L(function () {
        return new Ic();
      });
      he.USE_CACHE = !1;
      he.USE_ENUM_INDEX = !1;
      he.BASE64 =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
      Rd.DEFAULT_RESOLVER = new Bl();
      Rd.BASE64 =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
      ii.CHARS =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      ii.BYTES = Nb.ofString(ii.CHARS);
      Og.escapes = (function (a) {
        a = new Q();
        a.h.lt = "<";
        a.h.gt = ">";
        a.h.amp = "&";
        a.h.quot = '"';
        a.h.apos = "'";
        return a;
      })(this);
      Bd.LEN_EXTRA_BITS_TBL = [
        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4,
        5, 5, 5, 5, 0, -1, -1,
      ];
      Bd.LEN_BASE_VAL_TBL = [
        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
        67, 83, 99, 115, 131, 163, 195, 227, 258,
      ];
      Bd.DIST_EXTRA_BITS_TBL = [
        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10,
        10, 11, 11, 12, 12, 13, 13, -1, -1,
      ];
      Bd.DIST_BASE_VAL_TBL = [
        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385,
        513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577,
      ];
      Bd.CODE_LENGTHS_POS = [
        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15,
      ];
      Ia.activeRequests = 0;
      Ia.requestLimit = 17;
      Ia.requestQueue = new kb();
      Oa.dummyCharacter = "\u007f";
      Oa.windowID = 0;
      gg.DICTIONARY =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split(
          ""
        );
      gg.EXTENDED_DICTIONARY = (function (a) {
        a = [];
        for (var b = 0, c = gg.DICTIONARY; b < c.length; ) {
          var d = c[b];
          ++b;
          for (var e = 0, f = gg.DICTIONARY; e < f.length; ) {
            var g = f[e];
            ++e;
            a.push(d + g);
          }
        }
        return a;
      })(this);
      je.MUL_TABLE = [
        1, 171, 205, 293, 57, 373, 79, 137, 241, 27, 391, 357, 41, 19, 283, 265,
        497, 469, 443, 421, 25, 191, 365, 349, 335, 161, 155, 149, 9, 278, 269,
        261, 505, 245, 475, 231, 449, 437, 213, 415, 405, 395, 193, 377, 369,
        361, 353, 345, 169, 331, 325, 319, 313, 307, 301, 37, 145, 285, 281, 69,
        271, 267, 263, 259, 509, 501, 493, 243, 479, 118, 465, 459, 113, 446,
        55, 435, 429, 423, 209, 413, 51, 403, 199, 393, 97, 3, 379, 375, 371,
        367, 363, 359, 355, 351, 347, 43, 85, 337, 333, 165, 327, 323, 5, 317,
        157, 311, 77, 305, 303, 75, 297, 294, 73, 289, 287, 71, 141, 279, 277,
        275, 68, 135, 67, 133, 33, 262, 260, 129, 511, 507, 503, 499, 495, 491,
        61, 121, 481, 477, 237, 235, 467, 232, 115, 457, 227, 451, 7, 445, 221,
        439, 218, 433, 215, 427, 425, 211, 419, 417, 207, 411, 409, 203, 202,
        401, 399, 396, 197, 49, 389, 387, 385, 383, 95, 189, 47, 187, 93, 185,
        23, 183, 91, 181, 45, 179, 89, 177, 11, 175, 87, 173, 345, 343, 341,
        339, 337, 21, 167, 83, 331, 329, 327, 163, 81, 323, 321, 319, 159, 79,
        315, 313, 39, 155, 309, 307, 153, 305, 303, 151, 75, 299, 149, 37, 295,
        147, 73, 291, 145, 289, 287, 143, 285, 71, 141, 281, 35, 279, 139, 69,
        275, 137, 273, 17, 271, 135, 269, 267, 133, 265, 33, 263, 131, 261, 130,
        259, 129, 257, 1,
      ];
      je.SHG_TABLE = [
        0, 9, 10, 11, 9, 12, 10, 11, 12, 9, 13, 13, 10, 9, 13, 13, 14, 14, 14,
        14, 10, 13, 14, 14, 14, 13, 13, 13, 9, 14, 14, 14, 15, 14, 15, 14, 15,
        15, 14, 15, 15, 15, 14, 15, 15, 15, 15, 15, 14, 15, 15, 15, 15, 15, 15,
        12, 14, 15, 15, 13, 15, 15, 15, 15, 16, 16, 16, 15, 16, 14, 16, 16, 14,
        16, 13, 16, 16, 16, 15, 16, 13, 16, 15, 16, 14, 9, 16, 16, 16, 16, 16,
        16, 16, 16, 16, 13, 14, 16, 16, 15, 16, 16, 10, 16, 15, 16, 14, 16, 16,
        14, 16, 16, 14, 16, 16, 14, 15, 16, 16, 16, 14, 15, 14, 15, 13, 16, 16,
        15, 17, 17, 17, 17, 17, 17, 14, 15, 17, 17, 16, 16, 17, 16, 15, 17, 16,
        17, 11, 17, 16, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 16,
        17, 17, 17, 16, 14, 17, 17, 17, 17, 15, 16, 14, 16, 15, 16, 13, 16, 15,
        16, 14, 16, 15, 16, 12, 16, 15, 16, 17, 17, 17, 17, 17, 13, 16, 15, 17,
        17, 17, 16, 15, 17, 17, 17, 16, 15, 17, 17, 14, 16, 17, 17, 16, 17, 17,
        16, 15, 17, 16, 14, 17, 16, 15, 17, 16, 17, 17, 16, 17, 15, 16, 17, 14,
        17, 16, 15, 17, 16, 17, 13, 17, 16, 17, 17, 16, 17, 14, 17, 16, 17, 16,
        17, 16, 17, 9,
      ];
      nb.__identity = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
      mc.onUpdate = new Gc();
      mc.__updated = !1;
      xe.sensorByID = new kc();
      xe.sensors = [];
      Bc.devices = new kc();
      Bc.onConnect = new Xn();
      xc.devices = new kc();
      xc.onConnect = new Yn();
      oc.onCancel = new ri();
      oc.onEnd = new ri();
      oc.onMove = new ri();
      oc.onStart = new ri();
      ra.cache = new bo();
      ra.onChange = new Gc();
      ra.bundlePaths = new Q();
      ra.libraries = new Q();
      ra.libraryPaths = new Q();
      Ka.throwErrors = !0;
      sa.__lastTimerID = 0;
      sa.__timers = new kc();
      Pl.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
        fields: { toJSON: { SuppressWarnings: ["checkstyle:Dynamic"] } },
      };
      Ql.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
        fields: { toJSON: { SuppressWarnings: ["checkstyle:Dynamic"] } },
      };
      Jh.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
        fields: { toJSON: { SuppressWarnings: ["checkstyle:Dynamic"] } },
      };
      Ii.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Td.__meta__ = {
        fields: {
          __context: { SuppressWarnings: ["checkstyle:Dynamic"] },
          __type: { SuppressWarnings: ["checkstyle:Dynamic"] },
        },
      };
      Rl.__meta__ = {
        fields: {
          cairo: { SuppressWarnings: ["checkstyle:Dynamic"] },
          __matrix3: { SuppressWarnings: ["checkstyle:Dynamic"] },
          applyMatrix: { SuppressWarnings: ["checkstyle:Dynamic"] },
          __setBlendModeCairo: { SuppressWarnings: ["checkstyle:Dynamic"] },
          _: { SuppressWarnings: ["checkstyle:Dynamic"] },
        },
      };
      ug.__meta__ = {
        fields: {
          context: { SuppressWarnings: ["checkstyle:Dynamic"] },
          applySmoothing: { SuppressWarnings: ["checkstyle:Dynamic"] },
          setTransform: { SuppressWarnings: ["checkstyle:Dynamic"] },
          __setBlendModeContext: { SuppressWarnings: ["checkstyle:Dynamic"] },
          _: { SuppressWarnings: ["checkstyle:Dynamic"] },
        },
      };
      Vl.__meta__ = {
        fields: {
          __element: { SuppressWarnings: ["checkstyle:Dynamic"] },
          _: { SuppressWarnings: ["checkstyle:Dynamic"] },
        },
      };
      Fj.__meta__ = {
        fields: {
          element: { SuppressWarnings: ["checkstyle:Dynamic"] },
          _: { SuppressWarnings: ["checkstyle:Dynamic"] },
        },
      };
      Yd.__meta__ = {
        fields: {
          overrideBlendMode: {
            SuppressWarnings: ["checkstyle:FieldDocComment"],
          },
        },
      };
      Tf.__meta__ = {
        statics: {
          create: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
        },
        fields: { parameters: { SuppressWarnings: ["checkstyle:Dynamic"] } },
      };
      Tf.__rootURL = xg.get_supported() ? window.document.URL : "";
      mb.__meta__ = {
        fields: {
          gl: { SuppressWarnings: ["checkstyle:Dynamic"] },
          __gl: { SuppressWarnings: ["checkstyle:Dynamic"] },
          __matrix: { SuppressWarnings: ["checkstyle:Dynamic"] },
          __projection: { SuppressWarnings: ["checkstyle:Dynamic"] },
          __projectionFlipped: { SuppressWarnings: ["checkstyle:Dynamic"] },
        },
      };
      mb.__alphaValue = [1];
      mb.__colorMultipliersValue = [0, 0, 0, 0];
      mb.__colorOffsetsValue = [0, 0, 0, 0];
      mb.__emptyColorValue = [0, 0, 0, 0];
      mb.__hasColorTransformValue = [!1];
      mb.__scissorRectangle = new ha();
      mb.__textureSizeValue = [0, 0];
      Tj.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
        fields: { onComplete: { SuppressWarnings: ["checkstyle:Dynamic"] } },
      };
      dm.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Ni.__meta__ = {
        fields: {
          index: { SuppressWarnings: ["checkstyle:Dynamic"] },
          name: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
        },
      };
      ng.__meta__ = {
        fields: {
          index: { SuppressWarnings: ["checkstyle:Dynamic"] },
          name: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
        },
      };
      xi.__meta__ = {
        fields: {
          __broadcastEvent: { SuppressWarnings: ["checkstyle:Dynamic"] },
          __dispatchEvent: {
            SuppressWarnings: [["checkstyle:Dynamic", "checkstyle:LeftCurly"]],
          },
          __dispatchStack: {
            SuppressWarnings: [["checkstyle:Dynamic", "checkstyle:LeftCurly"]],
          },
          __dispatchTarget: { SuppressWarnings: ["checkstyle:Dynamic"] },
          __handleError: { SuppressWarnings: ["checkstyle:Dynamic"] },
        },
      };
      gm.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Dj.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
        fields: { _: { SuppressWarnings: ["checkstyle:Dynamic"] } },
      };
      Ej.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Ah.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Wd.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
        fields: { o: { SuppressWarnings: ["checkstyle:Dynamic"] } },
      };
      Wd.empty = new Wd();
      A.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
        statics: {
          windingRule: { SuppressWarnings: ["checkstyle:Dynamic"] },
          createBitmapFill: { SuppressWarnings: ["checkstyle:Dynamic"] },
          createGradientPattern: { SuppressWarnings: ["checkstyle:Dynamic"] },
        },
      };
      A.fillCommands = new Wd();
      A.strokeCommands = new Wd();
      fa.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Cg.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
        statics: {
          renderTileContainer: { SuppressWarnings: ["checkstyle:Dynamic"] },
        },
      };
      Bh.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Me.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Jj.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Dh.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      bc.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      bc.blankBitmapData = new S(1, 1, !1, 0);
      bc.tempColorTransform = new Qb(1, 1, 1, 1, 0, 0, 0, 0);
      Ch.opaqueBitmapData = new S(1, 1, !1, 0);
      jg.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Eg.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      R.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Ne.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Ne.__textureSizeValue = [0, 0];
      dc.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Ud.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      ih.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      gh.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      hh.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Dg.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      ig.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Hh.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Zl.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
        fields: {
          overrideIntValues: { SuppressWarnings: ["checkstyle:Dynamic"] },
        },
      };
      xb.__glDepthStencil = -1;
      xb.__glMaxTextureMaxAnisotropy = -1;
      xb.__glMaxViewportDims = -1;
      xb.__glMemoryCurrentAvailable = -1;
      xb.__glMemoryTotalAvailable = -1;
      xb.__glTextureMaxAnisotropy = -1;
      km.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Mj.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Cd.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Cd.limitedProfile = !0;
      yi.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      lm.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      zi.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Ih.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Kj.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Kb.__meta__ = {
        fields: {
          __textureContext: { SuppressWarnings: ["checkstyle:Dynamic"] },
          __getGLFramebuffer: { SuppressWarnings: ["checkstyle:Dynamic"] },
        },
      };
      Ji.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      nh.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      nh.supportsWeakReference = Object.prototype.hasOwnProperty.call(
        H,
        "WeakRef"
      );
      uf.__blurShader = new pm();
      Xd.__invertAlphaShader = new vm();
      Xd.__blurAlphaShader = new qm();
      Xd.__combineShader = new sm();
      Xd.__innerCombineShader = new um();
      Xd.__combineKnockoutShader = new rm();
      Xd.__innerCombineKnockoutShader = new tm();
      tg.__meta__ = {
        fields: { clone: { SuppressWarnings: ["checkstyle:FieldDocComment"] } },
      };
      de.__soundChannels = [];
      de.__soundTransform = new tg();
      jh.followRedirects = !0;
      jh.idleTimeout = 0;
      jh.manageCookies = !0;
      ac.currentX = 0;
      ac.currentY = 1;
      ac.currentZ = 0;
      ac.defaultInterval = 34;
      ac.initialized = !1;
      ac.supported = !1;
      ui.currentDomain = new ui(null);
      id.__meta__ = {
        fields: { clone: { SuppressWarnings: ["checkstyle:FieldDocComment"] } },
      };
      Pj.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Ma.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Ma.__regexAlign = new ya("align\\s?=\\s?(\"([^\"]+)\"|'([^']+)')", "i");
      Ma.__regexBreakTag = new ya("<br\\s*/?>", "gi");
      Ma.__regexBlockIndent = new ya(
        "blockindent\\s?=\\s?(\"([^\"]+)\"|'([^']+)')",
        "i"
      );
      Ma.__regexClass = new ya("class\\s?=\\s?(\"([^\"]+)\"|'([^']+)')", "i");
      Ma.__regexColor = new ya("color\\s?=\\s?(\"#([^\"]+)\"|'#([^']+)')", "i");
      Ma.__regexEntities = [
        new ya("&quot;", "g"),
        new ya("&apos;", "g"),
        new ya("&amp;", "g"),
        new ya("&lt;", "g"),
        new ya("&gt;", "g"),
        new ya("&nbsp;", "g"),
      ];
      Ma.__regexCharEntity = new ya("&#(?:([0-9]+)|(x[0-9a-fA-F]+));", "g");
      Ma.__regexFace = new ya("face\\s?=\\s?(\"([^\"]+)\"|'([^']+)')", "i");
      Ma.__regexHTMLTag = new ya("<.*?>", "g");
      Ma.__regexHref = new ya("href\\s?=\\s?(\"([^\"]+)\"|'([^']+)')", "i");
      Ma.__regexIndent = new ya(
        " indent\\s?=\\s?(\"([^\"]+)\"|'([^']+)')",
        "i"
      );
      Ma.__regexLeading = new ya(
        "leading\\s?=\\s?(\"([^\"]+)\"|'([^']+)')",
        "i"
      );
      Ma.__regexLeftMargin = new ya(
        "leftmargin\\s?=\\s?(\"([^\"]+)\"|'([^']+)')",
        "i"
      );
      Ma.__regexRightMargin = new ya(
        "rightmargin\\s?=\\s?(\"([^\"]+)\"|'([^']+)')",
        "i"
      );
      Ma.__regexSize = new ya("size\\s?=\\s?(\"([^\"]+)\"|'([^']+)')", "i");
      Ma.__regexTabStops = new ya(
        "tabstops\\s?=\\s?(\"([^\"]+)\"|'([^']+)')",
        "i"
      );
      Ci.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Vb.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      wm.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Zc.__cursor = "auto";
      ua.__meta__ = {
        obj: {
          SuppressWarnings: [
            ["checkstyle:ConstantName", "checkstyle:FieldDocComment"],
          ],
        },
      };
      ua.OPMAP = new Q();
      ua.REGMAP = new Q();
      ua.SAMPLEMAP = new Q();
      ua.initialized = !1;
      vb.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      we.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      ec.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      aa.cache = new ym();
      aa.dispatcher = new pa();
      af.__meta__ = {
        statics: {
          __get: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
        },
      };
      zm.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Am.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      td.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
      };
      Gh.__meta__ = {
        obj: { SuppressWarnings: ["checkstyle:FieldDocComment"] },
        fields: { touch: { SuppressWarnings: ["checkstyle:Dynamic"] } },
      };
      Gh.__pool = new db(
        function () {
          return new Gh();
        },
        function (a) {
          a.reset();
        }
      );
      yb.curSelected = 1;
      yb.curAlt = !1;
      yb.defaultKey = "Reset to Default Keys";
      fb.curSelected = 0;
      fb.typeSelected = 0;
      me.curSelected = 0;
      Cc.main();
    })(
      "undefined" != typeof v
        ? v
        : "undefined" != typeof window
        ? window
        : "undefined" != typeof self
        ? self
        : this,
      "undefined" != typeof window
        ? window
        : "undefined" != typeof L
        ? L
        : "undefined" != typeof self
        ? self
        : this
    );
  };
  ka.lime.embed = function (H) {
    var L = {},
      T = ka.lime.$scripts[H];
    if (!T) throw Error('Cannot find project name "' + H + '"');
    T(L, v);
    for (var ca in L) ka[ca] = ka[ca] || L[ca];
    (T = L.lime || window.lime) &&
      T.embed &&
      this != T.embed &&
      T.embed.apply(T, arguments);
    return L;
  };
  "function" == typeof define &&
    define.amd &&
    (define([], function () {
      return ka.lime;
    }),
    (define.__amd = define.amd),
    (define.amd = null));
})(
  "undefined" != typeof exports
    ? exports
    : "function" == typeof define && define.amd
    ? {}
    : "undefined" != typeof window
    ? window
    : "undefined" != typeof self
    ? self
    : this,
  "undefined" != typeof window
    ? window
    : "undefined" != typeof global
    ? global
    : "undefined" != typeof self
    ? self
    : this
);
!(function () {
  var ka = function () {
    this.init();
  };
  ka.prototype = {
    init: function () {
      var h = this || v;
      return (
        (h._counter = 1e3),
        (h._html5AudioPool = []),
        (h.html5PoolSize = 10),
        (h._codecs = {}),
        (h._howls = []),
        (h._muted = !1),
        (h._volume = 1),
        (h._canPlayEvent = "canplaythrough"),
        (h._navigator =
          "undefined" != typeof window && window.navigator
            ? window.navigator
            : null),
        (h.masterGain = null),
        (h.noAudio = !1),
        (h.usingWebAudio = !0),
        (h.autoSuspend = !0),
        (h.ctx = null),
        (h.autoUnlock = !0),
        h._setup(),
        h
      );
    },
    volume: function (p) {
      var n = this || v;
      if (
        ((p = parseFloat(p)), n.ctx || h(), void 0 !== p && 0 <= p && 1 >= p)
      ) {
        if (((n._volume = p), n._muted)) return n;
        n.usingWebAudio &&
          n.masterGain.gain.setValueAtTime(p, v.ctx.currentTime);
        for (var q = 0; q < n._howls.length; q++)
          if (!n._howls[q]._webAudio)
            for (var U = n._howls[q]._getSoundIds(), O = 0; O < U.length; O++) {
              var Ha = n._howls[q]._soundById(U[O]);
              Ha && Ha._node && (Ha._node.volume = Ha._volume * p);
            }
        return n;
      }
      return n._volume;
    },
    mute: function (p) {
      var n = this || v;
      n.ctx || h();
      n._muted = p;
      n.usingWebAudio &&
        n.masterGain.gain.setValueAtTime(p ? 0 : n._volume, v.ctx.currentTime);
      for (var q = 0; q < n._howls.length; q++)
        if (!n._howls[q]._webAudio)
          for (var U = n._howls[q]._getSoundIds(), O = 0; O < U.length; O++) {
            var Ha = n._howls[q]._soundById(U[O]);
            Ha && Ha._node && (Ha._node.muted = !!p || Ha._muted);
          }
      return n;
    },
    stop: function () {
      for (var h = this || v, n = 0; n < h._howls.length; n++)
        h._howls[n].stop();
      return h;
    },
    unload: function () {
      for (var p = this || v, n = p._howls.length - 1; 0 <= n; n--)
        p._howls[n].unload();
      return (
        p.usingWebAudio &&
          p.ctx &&
          void 0 !== p.ctx.close &&
          (p.ctx.close(), (p.ctx = null), h()),
        p
      );
    },
    codecs: function (h) {
      return (this || v)._codecs[h.replace(/^x-/, "")];
    },
    _setup: function () {
      var h = this || v;
      if (
        ((h.state = h.ctx ? h.ctx.state || "suspended" : "suspended"),
        h._autoSuspend(),
        !h.usingWebAudio)
      )
        if ("undefined" != typeof Audio)
          try {
            var n = new Audio();
            void 0 === n.oncanplaythrough && (h._canPlayEvent = "canplay");
          } catch (x) {
            h.noAudio = !0;
          }
        else h.noAudio = !0;
      try {
        (n = new Audio()), n.muted && (h.noAudio = !0);
      } catch (x) {}
      return h.noAudio || h._setupCodecs(), h;
    },
    _setupCodecs: function () {
      var h = this || v,
        n = null;
      try {
        n = "undefined" != typeof Audio ? new Audio() : null;
      } catch (Pb) {
        return h;
      }
      if (!n || "function" != typeof n.canPlayType) return h;
      var q = n.canPlayType("audio/mpeg;").replace(/^no$/, ""),
        U = h._navigator ? h._navigator.userAgent : "",
        O = U.match(/OPR\/(\d+)/g);
      O = O && 33 > parseInt(O[0].split("/")[1], 10);
      var Ha = -1 !== U.indexOf("Safari") && -1 === U.indexOf("Chrome");
      U = U.match(/Version\/(.*?) /);
      U = Ha && U && 15 > parseInt(U[1], 10);
      return (
        (h._codecs = {
          mp3: !(O || (!q && !n.canPlayType("audio/mp3;").replace(/^no$/, ""))),
          mpeg: !!q,
          opus: !!n.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ""),
          ogg: !!n
            .canPlayType('audio/ogg; codecs="vorbis"')
            .replace(/^no$/, ""),
          oga: !!n
            .canPlayType('audio/ogg; codecs="vorbis"')
            .replace(/^no$/, ""),
          wav: !!(
            n.canPlayType('audio/wav; codecs="1"') || n.canPlayType("audio/wav")
          ).replace(/^no$/, ""),
          aac: !!n.canPlayType("audio/aac;").replace(/^no$/, ""),
          caf: !!n.canPlayType("audio/x-caf;").replace(/^no$/, ""),
          m4a: !!(
            n.canPlayType("audio/x-m4a;") ||
            n.canPlayType("audio/m4a;") ||
            n.canPlayType("audio/aac;")
          ).replace(/^no$/, ""),
          m4b: !!(
            n.canPlayType("audio/x-m4b;") ||
            n.canPlayType("audio/m4b;") ||
            n.canPlayType("audio/aac;")
          ).replace(/^no$/, ""),
          mp4: !!(
            n.canPlayType("audio/x-mp4;") ||
            n.canPlayType("audio/mp4;") ||
            n.canPlayType("audio/aac;")
          ).replace(/^no$/, ""),
          weba: !(
            U ||
            !n.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, "")
          ),
          webm: !(
            U ||
            !n.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, "")
          ),
          dolby: !!n
            .canPlayType('audio/mp4; codecs="ec-3"')
            .replace(/^no$/, ""),
          flac: !!(
            n.canPlayType("audio/x-flac;") || n.canPlayType("audio/flac;")
          ).replace(/^no$/, ""),
        }),
        h
      );
    },
    _unlockAudio: function () {
      var h = this || v;
      if (!h._audioUnlocked && h.ctx) {
        h._audioUnlocked = !1;
        h.autoUnlock = !1;
        h._mobileUnloaded ||
          44100 === h.ctx.sampleRate ||
          ((h._mobileUnloaded = !0), h.unload());
        h._scratchBuffer = h.ctx.createBuffer(1, 1, 22050);
        var n = function (p) {
          for (; h._html5AudioPool.length < h.html5PoolSize; )
            try {
              var q = new Audio();
              q._unlocked = !0;
              h._releaseHtml5Audio(q);
            } catch (Hc) {
              h.noAudio = !0;
              break;
            }
          for (p = 0; p < h._howls.length; p++)
            if (!h._howls[p]._webAudio) {
              q = h._howls[p]._getSoundIds();
              for (var w = 0; w < q.length; w++) {
                var x = h._howls[p]._soundById(q[w]);
                x &&
                  x._node &&
                  !x._node._unlocked &&
                  ((x._node._unlocked = !0), x._node.load());
              }
            }
          h._autoResume();
          var v = h.ctx.createBufferSource();
          v.buffer = h._scratchBuffer;
          v.connect(h.ctx.destination);
          void 0 === v.start ? v.noteOn(0) : v.start(0);
          "function" == typeof h.ctx.resume && h.ctx.resume();
          v.onended = function () {
            v.disconnect(0);
            h._audioUnlocked = !0;
            document.removeEventListener("touchstart", n, !0);
            document.removeEventListener("touchend", n, !0);
            document.removeEventListener("click", n, !0);
            document.removeEventListener("keydown", n, !0);
            for (var p = 0; p < h._howls.length; p++)
              h._howls[p]._emit("unlock");
          };
        };
        return (
          document.addEventListener("touchstart", n, !0),
          document.addEventListener("touchend", n, !0),
          document.addEventListener("click", n, !0),
          document.addEventListener("keydown", n, !0),
          h
        );
      }
    },
    _obtainHtml5Audio: function () {
      var h = this || v;
      if (h._html5AudioPool.length) return h._html5AudioPool.pop();
      h = new Audio().play();
      return (
        h &&
          "undefined" != typeof Promise &&
          (h instanceof Promise || "function" == typeof h.then) &&
          h.catch(function () {
            console.warn(
              "HTML5 Audio pool exhausted, returning potentially locked audio object."
            );
          }),
        new Audio()
      );
    },
    _releaseHtml5Audio: function (h) {
      var p = this || v;
      return h._unlocked && p._html5AudioPool.push(h), p;
    },
    _autoSuspend: function () {
      var h = this;
      if (
        h.autoSuspend &&
        h.ctx &&
        void 0 !== h.ctx.suspend &&
        v.usingWebAudio
      ) {
        for (var n = 0; n < h._howls.length; n++)
          if (h._howls[n]._webAudio)
            for (var q = 0; q < h._howls[n]._sounds.length; q++)
              if (!h._howls[n]._sounds[q]._paused) return h;
        return (
          h._suspendTimer && clearTimeout(h._suspendTimer),
          (h._suspendTimer = setTimeout(function () {
            if (h.autoSuspend) {
              h._suspendTimer = null;
              h.state = "suspending";
              var p = function () {
                h.state = "suspended";
                h._resumeAfterSuspend &&
                  (delete h._resumeAfterSuspend, h._autoResume());
              };
              h.ctx.suspend().then(p, p);
            }
          }, 3e4)),
          h
        );
      }
    },
    _autoResume: function () {
      var h = this;
      if (h.ctx && void 0 !== h.ctx.resume && v.usingWebAudio)
        return (
          "running" === h.state &&
          "interrupted" !== h.ctx.state &&
          h._suspendTimer
            ? (clearTimeout(h._suspendTimer), (h._suspendTimer = null))
            : "suspended" === h.state ||
              ("running" === h.state && "interrupted" === h.ctx.state)
            ? (h.ctx.resume().then(function () {
                h.state = "running";
                for (var p = 0; p < h._howls.length; p++)
                  h._howls[p]._emit("resume");
              }),
              h._suspendTimer &&
                (clearTimeout(h._suspendTimer), (h._suspendTimer = null)))
            : "suspending" === h.state && (h._resumeAfterSuspend = !0),
          h
        );
    },
  };
  var v = new ka(),
    H = function (h) {
      if (!h.src || 0 === h.src.length)
        return void console.error(
          "An array of source files must be passed with any new Howl."
        );
      this.init(h);
    };
  H.prototype = {
    init: function (p) {
      var n = this;
      return (
        v.ctx || h(),
        (n._autoplay = p.autoplay || !1),
        (n._format = "string" != typeof p.format ? p.format : [p.format]),
        (n._html5 = p.html5 || !1),
        (n._muted = p.mute || !1),
        (n._loop = p.loop || !1),
        (n._pool = p.pool || 5),
        (n._preload =
          ("boolean" != typeof p.preload && "metadata" !== p.preload) ||
          p.preload),
        (n._rate = p.rate || 1),
        (n._sprite = p.sprite || {}),
        (n._src = "string" != typeof p.src ? p.src : [p.src]),
        (n._volume = void 0 !== p.volume ? p.volume : 1),
        (n._xhr = {
          method: p.xhr && p.xhr.method ? p.xhr.method : "GET",
          headers: p.xhr && p.xhr.headers ? p.xhr.headers : null,
          withCredentials:
            !(!p.xhr || !p.xhr.withCredentials) && p.xhr.withCredentials,
        }),
        (n._duration = 0),
        (n._state = "unloaded"),
        (n._sounds = []),
        (n._endTimers = {}),
        (n._queue = []),
        (n._playLock = !1),
        (n._onend = p.onend ? [{ fn: p.onend }] : []),
        (n._onfade = p.onfade ? [{ fn: p.onfade }] : []),
        (n._onload = p.onload ? [{ fn: p.onload }] : []),
        (n._onloaderror = p.onloaderror ? [{ fn: p.onloaderror }] : []),
        (n._onplayerror = p.onplayerror ? [{ fn: p.onplayerror }] : []),
        (n._onpause = p.onpause ? [{ fn: p.onpause }] : []),
        (n._onplay = p.onplay ? [{ fn: p.onplay }] : []),
        (n._onstop = p.onstop ? [{ fn: p.onstop }] : []),
        (n._onmute = p.onmute ? [{ fn: p.onmute }] : []),
        (n._onvolume = p.onvolume ? [{ fn: p.onvolume }] : []),
        (n._onrate = p.onrate ? [{ fn: p.onrate }] : []),
        (n._onseek = p.onseek ? [{ fn: p.onseek }] : []),
        (n._onunlock = p.onunlock ? [{ fn: p.onunlock }] : []),
        (n._onresume = []),
        (n._webAudio = v.usingWebAudio && !n._html5),
        void 0 !== v.ctx && v.ctx && v.autoUnlock && v._unlockAudio(),
        v._howls.push(n),
        n._autoplay &&
          n._queue.push({
            event: "play",
            action: function () {
              n.play();
            },
          }),
        n._preload && "none" !== n._preload && n.load(),
        n
      );
    },
    load: function () {
      var h = null;
      if (v.noAudio)
        return void this._emit("loaderror", null, "No audio support.");
      "string" == typeof this._src && (this._src = [this._src]);
      for (var n = 0; n < this._src.length; n++) {
        var q;
        if (this._format && this._format[n]) var U = this._format[n];
        else {
          if ("string" != typeof (q = this._src[n])) {
            this._emit(
              "loaderror",
              null,
              "Non-string found in selected audio sources - ignoring."
            );
            continue;
          }
          (U = /^data:audio\/([^;,]+);/i.exec(q)) ||
            (U = /\.([^.]+)$/.exec(q.split("?", 1)[0]));
          U && (U = U[1].toLowerCase());
        }
        if (
          (U ||
            console.warn(
              'No file extension was found. Consider using the "format" property or specify an extension.'
            ),
          U && v.codecs(U))
        ) {
          h = this._src[n];
          break;
        }
      }
      return h
        ? ((this._src = h),
          (this._state = "loading"),
          "https:" === window.location.protocol &&
            "http:" === h.slice(0, 5) &&
            ((this._html5 = !0), (this._webAudio = !1)),
          new L(this),
          this._webAudio && ca(this),
          this)
        : void this._emit(
            "loaderror",
            null,
            "No codec support for selected audio sources."
          );
    },
    play: function (h, n) {
      var p = this,
        q = null;
      if ("number" == typeof h) (q = h), (h = null);
      else {
        if ("string" == typeof h && "loaded" === p._state && !p._sprite[h])
          return null;
        if (void 0 === h && ((h = "__default"), !p._playLock)) {
          for (var w = 0, Ha = 0; Ha < p._sounds.length; Ha++)
            p._sounds[Ha]._paused &&
              !p._sounds[Ha]._ended &&
              (w++, (q = p._sounds[Ha]._id));
          1 === w ? (h = null) : (q = null);
        }
      }
      var H = q ? p._soundById(q) : p._inactiveSound();
      if (!H) return null;
      if ((q && !h && (h = H._sprite || "__default"), "loaded" !== p._state)) {
        H._sprite = h;
        H._ended = !1;
        var L = H._id;
        return (
          p._queue.push({
            event: "play",
            action: function () {
              p.play(L);
            },
          }),
          L
        );
      }
      if (q && !H._paused) return n || p._loadQueue("play"), H._id;
      p._webAudio && v._autoResume();
      var T = Math.max(0, 0 < H._seek ? H._seek : p._sprite[h][0] / 1e3),
        ca = Math.max(0, (p._sprite[h][0] + p._sprite[h][1]) / 1e3 - T),
        F = (1e3 * ca) / Math.abs(H._rate),
        ka = p._sprite[h][0] / 1e3,
        ma = (p._sprite[h][0] + p._sprite[h][1]) / 1e3;
      H._sprite = h;
      H._ended = !1;
      var Fa = function () {
        H._paused = !1;
        H._seek = T;
        H._start = ka;
        H._stop = ma;
        H._loop = !(!H._loop && !p._sprite[h][2]);
      };
      if (T >= ma) return void p._ended(H);
      var Z = H._node;
      if (p._webAudio)
        (q = function () {
          p._playLock = !1;
          Fa();
          p._refreshBuffer(H);
          Z.gain.setValueAtTime(
            H._muted || p._muted ? 0 : H._volume,
            v.ctx.currentTime
          );
          H._playStart = v.ctx.currentTime;
          void 0 === Z.bufferSource.start
            ? H._loop
              ? Z.bufferSource.noteGrainOn(0, T, 86400)
              : Z.bufferSource.noteGrainOn(0, T, ca)
            : H._loop
            ? Z.bufferSource.start(0, T, 86400)
            : Z.bufferSource.start(0, T, ca);
          F !== 1 / 0 &&
            (p._endTimers[H._id] = setTimeout(p._ended.bind(p, H), F));
          n ||
            setTimeout(function () {
              p._emit("play", H._id);
              p._loadQueue();
            }, 0);
        }),
          "running" === v.state && "interrupted" !== v.ctx.state
            ? q()
            : ((p._playLock = !0), p.once("resume", q), p._clearTimer(H._id));
      else {
        var $a = function () {
          Z.currentTime = T;
          Z.muted = H._muted || p._muted || v._muted || Z.muted;
          Z.volume = H._volume * v.volume();
          Z.playbackRate = H._rate;
          try {
            var q = Z.play();
            if (
              (q &&
              "undefined" != typeof Promise &&
              (q instanceof Promise || "function" == typeof q.then)
                ? ((p._playLock = !0),
                  Fa(),
                  q
                    .then(function () {
                      p._playLock = !1;
                      Z._unlocked = !0;
                      n ? p._loadQueue() : p._emit("play", H._id);
                    })
                    .catch(function () {
                      p._playLock = !1;
                      p._emit(
                        "playerror",
                        H._id,
                        "Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction."
                      );
                      H._ended = !0;
                      H._paused = !0;
                    }))
                : n || ((p._playLock = !1), Fa(), p._emit("play", H._id)),
              (Z.playbackRate = H._rate),
              Z.paused)
            )
              return void p._emit(
                "playerror",
                H._id,
                "Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction."
              );
            "__default" !== h || H._loop
              ? (p._endTimers[H._id] = setTimeout(p._ended.bind(p, H), F))
              : ((p._endTimers[H._id] = function () {
                  p._ended(H);
                  Z.removeEventListener("ended", p._endTimers[H._id], !1);
                }),
                Z.addEventListener("ended", p._endTimers[H._id], !1));
          } catch (I) {
            p._emit("playerror", H._id, I);
          }
        };
        "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA" ===
          Z.src && ((Z.src = p._src), Z.load());
        q =
          (window && window.ejecta) ||
          (!Z.readyState && v._navigator.isCocoonJS);
        if (3 <= Z.readyState || q) $a();
        else {
          p._playLock = !0;
          p._state = "loading";
          var pb = function () {
            p._state = "loaded";
            $a();
            Z.removeEventListener(v._canPlayEvent, pb, !1);
          };
          Z.addEventListener(v._canPlayEvent, pb, !1);
          p._clearTimer(H._id);
        }
      }
      return H._id;
    },
    pause: function (h, n) {
      var p = this;
      if ("loaded" !== p._state || p._playLock)
        return (
          p._queue.push({
            event: "pause",
            action: function () {
              p.pause(h);
            },
          }),
          p
        );
      for (var q = p._getSoundIds(h), w = 0; w < q.length; w++) {
        p._clearTimer(q[w]);
        var v = p._soundById(q[w]);
        if (
          v &&
          !v._paused &&
          ((v._seek = p.seek(q[w])),
          (v._rateSeek = 0),
          (v._paused = !0),
          p._stopFade(q[w]),
          v._node)
        )
          if (p._webAudio) {
            if (!v._node.bufferSource) continue;
            void 0 === v._node.bufferSource.stop
              ? v._node.bufferSource.noteOff(0)
              : v._node.bufferSource.stop(0);
            p._cleanBuffer(v._node);
          } else
            (isNaN(v._node.duration) && v._node.duration !== 1 / 0) ||
              v._node.pause();
        n || p._emit("pause", v ? v._id : null);
      }
      return p;
    },
    stop: function (h, n) {
      var p = this;
      if ("loaded" !== p._state || p._playLock)
        return (
          p._queue.push({
            event: "stop",
            action: function () {
              p.stop(h);
            },
          }),
          p
        );
      for (var q = p._getSoundIds(h), w = 0; w < q.length; w++) {
        p._clearTimer(q[w]);
        var v = p._soundById(q[w]);
        v &&
          ((v._seek = v._start || 0),
          (v._rateSeek = 0),
          (v._paused = !0),
          (v._ended = !0),
          p._stopFade(q[w]),
          v._node &&
            (p._webAudio
              ? v._node.bufferSource &&
                (void 0 === v._node.bufferSource.stop
                  ? v._node.bufferSource.noteOff(0)
                  : v._node.bufferSource.stop(0),
                p._cleanBuffer(v._node))
              : (isNaN(v._node.duration) && v._node.duration !== 1 / 0) ||
                ((v._node.currentTime = v._start || 0),
                v._node.pause(),
                v._node.duration === 1 / 0 && p._clearSound(v._node))),
          n || p._emit("stop", v._id));
      }
      return p;
    },
    mute: function (h, n) {
      var p = this;
      if ("loaded" !== p._state || p._playLock)
        return (
          p._queue.push({
            event: "mute",
            action: function () {
              p.mute(h, n);
            },
          }),
          p
        );
      if (void 0 === n) {
        if ("boolean" != typeof h) return p._muted;
        p._muted = h;
      }
      for (var q = p._getSoundIds(n), w = 0; w < q.length; w++) {
        var H = p._soundById(q[w]);
        H &&
          ((H._muted = h),
          H._interval && p._stopFade(H._id),
          p._webAudio && H._node
            ? H._node.gain.setValueAtTime(h ? 0 : H._volume, v.ctx.currentTime)
            : H._node && (H._node.muted = !!v._muted || h),
          p._emit("mute", H._id));
      }
      return p;
    },
    volume: function () {
      var h,
        n,
        q = this,
        U = arguments;
      if (0 === U.length) return q._volume;
      1 === U.length || (2 === U.length && void 0 === U[1])
        ? 0 <= q._getSoundIds().indexOf(U[0])
          ? (n = parseInt(U[0], 10))
          : (h = parseFloat(U[0]))
        : 2 <= U.length && ((h = parseFloat(U[0])), (n = parseInt(U[1], 10)));
      var O;
      if (!(void 0 !== h && 0 <= h && 1 >= h))
        return (O = n ? q._soundById(n) : q._sounds[0]), O ? O._volume : 0;
      if ("loaded" !== q._state || q._playLock)
        return (
          q._queue.push({
            event: "volume",
            action: function () {
              q.volume.apply(q, U);
            },
          }),
          q
        );
      void 0 === n && (q._volume = h);
      n = q._getSoundIds(n);
      for (var H = 0; H < n.length; H++)
        (O = q._soundById(n[H])) &&
          ((O._volume = h),
          U[2] || q._stopFade(n[H]),
          q._webAudio && O._node && !O._muted
            ? O._node.gain.setValueAtTime(h, v.ctx.currentTime)
            : O._node && !O._muted && (O._node.volume = h * v.volume()),
          q._emit("volume", O._id));
      return q;
    },
    fade: function (h, n, q, U) {
      var p = this;
      if ("loaded" !== p._state || p._playLock)
        return (
          p._queue.push({
            event: "fade",
            action: function () {
              p.fade(h, n, q, U);
            },
          }),
          p
        );
      h = Math.min(Math.max(0, parseFloat(h)), 1);
      n = Math.min(Math.max(0, parseFloat(n)), 1);
      q = parseFloat(q);
      p.volume(h, U);
      for (var w = p._getSoundIds(U), x = 0; x < w.length; x++) {
        var H = p._soundById(w[x]);
        if (H) {
          if ((U || p._stopFade(w[x]), p._webAudio && !H._muted)) {
            var L = v.ctx.currentTime,
              T = L + q / 1e3;
            H._volume = h;
            H._node.gain.setValueAtTime(h, L);
            H._node.gain.linearRampToValueAtTime(n, T);
          }
          p._startFadeInterval(H, h, n, q, w[x], void 0 === U);
        }
      }
      return p;
    },
    _startFadeInterval: function (h, n, q, v, H, L) {
      var p = this,
        w = n,
        x = q - n;
      H = Math.abs(x / 0.01);
      H = Math.max(4, 0 < H ? v / H : v);
      var U = Date.now();
      h._fadeTo = q;
      h._interval = setInterval(function () {
        var F = (Date.now() - U) / v;
        U = Date.now();
        w += x * F;
        w = Math.round(100 * w) / 100;
        w = 0 > x ? Math.max(q, w) : Math.min(q, w);
        p._webAudio ? (h._volume = w) : p.volume(w, h._id, !0);
        L && (p._volume = w);
        ((q < n && w <= q) || (q > n && w >= q)) &&
          (clearInterval(h._interval),
          (h._interval = null),
          (h._fadeTo = null),
          p.volume(q, h._id),
          p._emit("fade", h._id));
      }, H);
    },
    _stopFade: function (h) {
      var p = this._soundById(h);
      return (
        p &&
          p._interval &&
          (this._webAudio &&
            p._node.gain.cancelScheduledValues(v.ctx.currentTime),
          clearInterval(p._interval),
          (p._interval = null),
          this.volume(p._fadeTo, h),
          (p._fadeTo = null),
          this._emit("fade", h)),
        this
      );
    },
    loop: function () {
      var h,
        n,
        q,
        v = arguments;
      if (0 === v.length) return this._loop;
      if (1 === v.length) {
        if ("boolean" != typeof v[0])
          return !!(q = this._soundById(parseInt(v[0], 10))) && q._loop;
        this._loop = h = v[0];
      } else 2 === v.length && ((h = v[0]), (n = parseInt(v[1], 10)));
      n = this._getSoundIds(n);
      for (v = 0; v < n.length; v++)
        (q = this._soundById(n[v])) &&
          ((q._loop = h),
          this._webAudio &&
            q._node &&
            q._node.bufferSource &&
            ((q._node.bufferSource.loop = h),
            h &&
              ((q._node.bufferSource.loopStart = q._start || 0),
              (q._node.bufferSource.loopEnd = q._stop),
              this.playing(n[v]) &&
                (this.pause(n[v], !0), this.play(n[v], !0)))));
      return this;
    },
    rate: function () {
      var h,
        n,
        q = this,
        H = arguments;
      0 === H.length
        ? (n = q._sounds[0]._id)
        : 1 === H.length
        ? 0 <= q._getSoundIds().indexOf(H[0])
          ? (n = parseInt(H[0], 10))
          : (h = parseFloat(H[0]))
        : 2 === H.length && ((h = parseFloat(H[0])), (n = parseInt(H[1], 10)));
      var O;
      if ("number" != typeof h)
        return (O = q._soundById(n)), O ? O._rate : q._rate;
      if ("loaded" !== q._state || q._playLock)
        return (
          q._queue.push({
            event: "rate",
            action: function () {
              q.rate.apply(q, H);
            },
          }),
          q
        );
      void 0 === n && (q._rate = h);
      n = q._getSoundIds(n);
      for (var L = 0; L < n.length; L++)
        if ((O = q._soundById(n[L]))) {
          q.playing(n[L]) &&
            ((O._rateSeek = q.seek(n[L])),
            (O._playStart = q._webAudio ? v.ctx.currentTime : O._playStart));
          O._rate = h;
          q._webAudio && O._node && O._node.bufferSource
            ? O._node.bufferSource.playbackRate.setValueAtTime(
                h,
                v.ctx.currentTime
              )
            : O._node && (O._node.playbackRate = h);
          var T = q.seek(n[L]);
          T =
            (1e3 *
              ((q._sprite[O._sprite][0] + q._sprite[O._sprite][1]) / 1e3 - T)) /
            Math.abs(O._rate);
          (!q._endTimers[n[L]] && O._paused) ||
            (q._clearTimer(n[L]),
            (q._endTimers[n[L]] = setTimeout(q._ended.bind(q, O), T)));
          q._emit("rate", O._id);
        }
      return q;
    },
    seek: function () {
      var h,
        n,
        q = this,
        H = arguments;
      0 === H.length
        ? q._sounds.length && (n = q._sounds[0]._id)
        : 1 === H.length
        ? 0 <= q._getSoundIds().indexOf(H[0])
          ? (n = parseInt(H[0], 10))
          : q._sounds.length && ((n = q._sounds[0]._id), (h = parseFloat(H[0])))
        : 2 === H.length && ((h = parseFloat(H[0])), (n = parseInt(H[1], 10)));
      if (void 0 === n) return 0;
      if ("number" == typeof h && ("loaded" !== q._state || q._playLock))
        return (
          q._queue.push({
            event: "seek",
            action: function () {
              q.seek.apply(q, H);
            },
          }),
          q
        );
      var O = q._soundById(n);
      if (O) {
        if (!("number" == typeof h && 0 <= h))
          return q._webAudio
            ? ((h = q.playing(n) ? v.ctx.currentTime - O._playStart : 0),
              O._seek +
                ((O._rateSeek ? O._rateSeek - O._seek : 0) +
                  h * Math.abs(O._rate)))
            : O._node.currentTime;
        var L = q.playing(n);
        L && q.pause(n, !0);
        O._seek = h;
        O._ended = !1;
        q._clearTimer(n);
        q._webAudio ||
          !O._node ||
          isNaN(O._node.duration) ||
          (O._node.currentTime = h);
        var T = function () {
          L && q.play(n, !0);
          q._emit("seek", n);
        };
        if (L && !q._webAudio) {
          var ca = function () {
            q._playLock ? setTimeout(ca, 0) : T();
          };
          setTimeout(ca, 0);
        } else T();
      }
      return q;
    },
    playing: function (h) {
      if ("number" == typeof h)
        return (h = this._soundById(h)), !!h && !h._paused;
      for (h = 0; h < this._sounds.length; h++)
        if (!this._sounds[h]._paused) return !0;
      return !1;
    },
    duration: function (h) {
      var p = this._duration;
      h = this._soundById(h);
      return h && (p = this._sprite[h._sprite][1] / 1e3), p;
    },
    state: function () {
      return this._state;
    },
    unload: function () {
      for (var h = this._sounds, n = 0; n < h.length; n++)
        h[n]._paused || this.stop(h[n]._id),
          this._webAudio ||
            (this._clearSound(h[n]._node),
            h[n]._node.removeEventListener("error", h[n]._errorFn, !1),
            h[n]._node.removeEventListener(v._canPlayEvent, h[n]._loadFn, !1),
            h[n]._node.removeEventListener("ended", h[n]._endFn, !1),
            v._releaseHtml5Audio(h[n]._node)),
          delete h[n]._node,
          this._clearTimer(h[n]._id);
      n = v._howls.indexOf(this);
      0 <= n && v._howls.splice(n, 1);
      h = !0;
      for (n = 0; n < v._howls.length; n++)
        if (
          v._howls[n]._src === this._src ||
          0 <= this._src.indexOf(v._howls[n]._src)
        ) {
          h = !1;
          break;
        }
      return (
        T && h && delete T[this._src],
        (v.noAudio = !1),
        (this._state = "unloaded"),
        (this._sounds = []),
        null
      );
    },
    on: function (h, n, q, v) {
      h = this["_on" + h];
      return (
        "function" == typeof n &&
          h.push(v ? { id: q, fn: n, once: v } : { id: q, fn: n }),
        this
      );
    },
    off: function (h, n, q) {
      var p = this["_on" + h];
      if (("number" == typeof n && ((q = n), (n = null)), n || q))
        for (h = 0; h < p.length; h++) {
          var w = q === p[h].id;
          if ((n === p[h].fn && w) || (!n && w)) {
            p.splice(h, 1);
            break;
          }
        }
      else if (h) this["_on" + h] = [];
      else
        for (n = Object.keys(this), h = 0; h < n.length; h++)
          0 === n[h].indexOf("_on") &&
            Array.isArray(this[n[h]]) &&
            (this[n[h]] = []);
      return this;
    },
    once: function (h, n, q) {
      return this.on(h, n, q, 1), this;
    },
    _emit: function (h, n, q) {
      for (var p = this["_on" + h], w = p.length - 1; 0 <= w; w--)
        (p[w].id && p[w].id !== n && "load" !== h) ||
          (setTimeout(
            function (h) {
              h.call(this, n, q);
            }.bind(this, p[w].fn),
            0
          ),
          p[w].once && this.off(h, p[w].fn, p[w].id));
      return this._loadQueue(h), this;
    },
    _loadQueue: function (h) {
      if (0 < this._queue.length) {
        var n = this._queue[0];
        n.event === h && (this._queue.shift(), this._loadQueue());
        h || n.action();
      }
      return this;
    },
    _ended: function (h) {
      var n = h._sprite;
      if (
        !this._webAudio &&
        h._node &&
        !h._node.paused &&
        !h._node.ended &&
        h._node.currentTime < h._stop
      )
        return setTimeout(this._ended.bind(this, h), 100), this;
      n = !(!h._loop && !this._sprite[n][2]);
      if (
        (this._emit("end", h._id),
        !this._webAudio && n && this.stop(h._id, !0).play(h._id),
        this._webAudio && n)
      ) {
        this._emit("play", h._id);
        h._seek = h._start || 0;
        h._rateSeek = 0;
        h._playStart = v.ctx.currentTime;
        var p = (1e3 * (h._stop - h._start)) / Math.abs(h._rate);
        this._endTimers[h._id] = setTimeout(this._ended.bind(this, h), p);
      }
      return (
        this._webAudio &&
          !n &&
          ((h._paused = !0),
          (h._ended = !0),
          (h._seek = h._start || 0),
          (h._rateSeek = 0),
          this._clearTimer(h._id),
          this._cleanBuffer(h._node),
          v._autoSuspend()),
        this._webAudio || n || this.stop(h._id, !0),
        this
      );
    },
    _clearTimer: function (h) {
      if (this._endTimers[h]) {
        if ("function" != typeof this._endTimers[h])
          clearTimeout(this._endTimers[h]);
        else {
          var n = this._soundById(h);
          n &&
            n._node &&
            n._node.removeEventListener("ended", this._endTimers[h], !1);
        }
        delete this._endTimers[h];
      }
      return this;
    },
    _soundById: function (h) {
      for (var n = 0; n < this._sounds.length; n++)
        if (h === this._sounds[n]._id) return this._sounds[n];
      return null;
    },
    _inactiveSound: function () {
      this._drain();
      for (var h = 0; h < this._sounds.length; h++)
        if (this._sounds[h]._ended) return this._sounds[h].reset();
      return new L(this);
    },
    _drain: function () {
      var h = this._pool,
        n = 0,
        q;
      if (!(this._sounds.length < h)) {
        for (q = 0; q < this._sounds.length; q++) this._sounds[q]._ended && n++;
        for (q = this._sounds.length - 1; 0 <= q && !(n <= h); q--)
          this._sounds[q]._ended &&
            (this._webAudio &&
              this._sounds[q]._node &&
              this._sounds[q]._node.disconnect(0),
            this._sounds.splice(q, 1),
            n--);
      }
    },
    _getSoundIds: function (h) {
      if (void 0 === h) {
        h = [];
        for (var n = 0; n < this._sounds.length; n++)
          h.push(this._sounds[n]._id);
        return h;
      }
      return [h];
    },
    _refreshBuffer: function (h) {
      return (
        (h._node.bufferSource = v.ctx.createBufferSource()),
        (h._node.bufferSource.buffer = T[this._src]),
        h._panner
          ? h._node.bufferSource.connect(h._panner)
          : h._node.bufferSource.connect(h._node),
        (h._node.bufferSource.loop = h._loop),
        h._loop &&
          ((h._node.bufferSource.loopStart = h._start || 0),
          (h._node.bufferSource.loopEnd = h._stop || 0)),
        h._node.bufferSource.playbackRate.setValueAtTime(
          h._rate,
          v.ctx.currentTime
        ),
        this
      );
    },
    _cleanBuffer: function (h) {
      var n = v._navigator && 0 <= v._navigator.vendor.indexOf("Apple");
      if (!h.bufferSource) return this;
      if (
        v._scratchBuffer &&
        h.bufferSource &&
        ((h.bufferSource.onended = null), h.bufferSource.disconnect(0), n)
      )
        try {
          h.bufferSource.buffer = v._scratchBuffer;
        } catch (x) {}
      return (h.bufferSource = null), this;
    },
    _clearSound: function (h) {
      /MSIE |Trident\//.test(v._navigator && v._navigator.userAgent) ||
        (h.src =
          "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA");
    },
  };
  var L = function (h) {
    this._parent = h;
    this.init();
  };
  L.prototype = {
    init: function () {
      var h = this._parent;
      return (
        (this._muted = h._muted),
        (this._loop = h._loop),
        (this._volume = h._volume),
        (this._rate = h._rate),
        (this._seek = 0),
        (this._paused = !0),
        (this._ended = !0),
        (this._sprite = "__default"),
        (this._id = ++v._counter),
        h._sounds.push(this),
        this.create(),
        this
      );
    },
    create: function () {
      var h = this._parent,
        n = v._muted || this._muted || this._parent._muted ? 0 : this._volume;
      return (
        h._webAudio
          ? ((this._node =
              void 0 === v.ctx.createGain
                ? v.ctx.createGainNode()
                : v.ctx.createGain()),
            this._node.gain.setValueAtTime(n, v.ctx.currentTime),
            (this._node.paused = !0),
            this._node.connect(v.masterGain))
          : v.noAudio ||
            ((this._node = v._obtainHtml5Audio()),
            (this._errorFn = this._errorListener.bind(this)),
            this._node.addEventListener("error", this._errorFn, !1),
            (this._loadFn = this._loadListener.bind(this)),
            this._node.addEventListener(v._canPlayEvent, this._loadFn, !1),
            (this._endFn = this._endListener.bind(this)),
            this._node.addEventListener("ended", this._endFn, !1),
            (this._node.src = h._src),
            (this._node.preload = !0 === h._preload ? "auto" : h._preload),
            (this._node.volume = n * v.volume()),
            this._node.load()),
        this
      );
    },
    reset: function () {
      var h = this._parent;
      return (
        (this._muted = h._muted),
        (this._loop = h._loop),
        (this._volume = h._volume),
        (this._rate = h._rate),
        (this._seek = 0),
        (this._rateSeek = 0),
        (this._paused = !0),
        (this._ended = !0),
        (this._sprite = "__default"),
        (this._id = ++v._counter),
        this
      );
    },
    _errorListener: function () {
      this._parent._emit(
        "loaderror",
        this._id,
        this._node.error ? this._node.error.code : 0
      );
      this._node.removeEventListener("error", this._errorFn, !1);
    },
    _loadListener: function () {
      var h = this._parent;
      h._duration = Math.ceil(10 * this._node.duration) / 10;
      0 === Object.keys(h._sprite).length &&
        (h._sprite = { __default: [0, 1e3 * h._duration] });
      "loaded" !== h._state &&
        ((h._state = "loaded"), h._emit("load"), h._loadQueue());
      this._node.removeEventListener(v._canPlayEvent, this._loadFn, !1);
    },
    _endListener: function () {
      var h = this._parent;
      h._duration === 1 / 0 &&
        ((h._duration = Math.ceil(10 * this._node.duration) / 10),
        h._sprite.__default[1] === 1 / 0 &&
          (h._sprite.__default[1] = 1e3 * h._duration),
        h._ended(this));
      this._node.removeEventListener("ended", this._endFn, !1);
    },
  };
  var T = {},
    ca = function (h) {
      var p = h._src;
      if (T[p]) return (h._duration = T[p].duration), void n(h);
      if (/^data:[^;]+;base64,/.test(p)) {
        for (
          var x = atob(p.split(",")[1]), v = new Uint8Array(x.length), H = 0;
          H < x.length;
          ++H
        )
          v[H] = x.charCodeAt(H);
        Fa(v.buffer, h);
      } else {
        var L = new XMLHttpRequest();
        L.open(h._xhr.method, p, !0);
        L.withCredentials = h._xhr.withCredentials;
        L.responseType = "arraybuffer";
        h._xhr.headers &&
          Object.keys(h._xhr.headers).forEach(function (n) {
            L.setRequestHeader(n, h._xhr.headers[n]);
          });
        L.onload = function () {
          var n = (L.status + "")[0];
          if ("0" !== n && "2" !== n && "3" !== n)
            return void h._emit(
              "loaderror",
              null,
              "Failed loading audio file with status: " + L.status + "."
            );
          Fa(L.response, h);
        };
        L.onerror = function () {
          h._webAudio &&
            ((h._html5 = !0),
            (h._webAudio = !1),
            (h._sounds = []),
            delete T[p],
            h.load());
        };
        q(L);
      }
    },
    q = function (h) {
      try {
        h.send();
      } catch (w) {
        h.onerror();
      }
    },
    Fa = function (h, q) {
      var p = function () {
          q._emit("loaderror", null, "Decoding audio data failed.");
        },
        w = function (h) {
          h && 0 < q._sounds.length ? ((T[q._src] = h), n(q, h)) : p();
        };
      "undefined" != typeof Promise && 1 === v.ctx.decodeAudioData.length
        ? v.ctx.decodeAudioData(h).then(w).catch(p)
        : v.ctx.decodeAudioData(h, w, p);
    },
    n = function (h, n) {
      n && !h._duration && (h._duration = n.duration);
      0 === Object.keys(h._sprite).length &&
        (h._sprite = { __default: [0, 1e3 * h._duration] });
      "loaded" !== h._state &&
        ((h._state = "loaded"), h._emit("load"), h._loadQueue());
    },
    h = function () {
      if (v.usingWebAudio) {
        try {
          "undefined" != typeof AudioContext
            ? (v.ctx = new AudioContext())
            : "undefined" != typeof webkitAudioContext
            ? (v.ctx = new webkitAudioContext())
            : (v.usingWebAudio = !1);
        } catch (x) {
          v.usingWebAudio = !1;
        }
        v.ctx || (v.usingWebAudio = !1);
        var h = /iP(hone|od|ad)/.test(v._navigator && v._navigator.platform),
          n =
            v._navigator &&
            v._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
        n = n ? parseInt(n[1], 10) : null;
        h &&
          n &&
          9 > n &&
          ((h = /safari/.test(
            v._navigator && v._navigator.userAgent.toLowerCase()
          )),
          v._navigator && !h && (v.usingWebAudio = !1));
        v.usingWebAudio &&
          ((v.masterGain =
            void 0 === v.ctx.createGain
              ? v.ctx.createGainNode()
              : v.ctx.createGain()),
          v.masterGain.gain.setValueAtTime(
            v._muted ? 0 : v._volume,
            v.ctx.currentTime
          ),
          v.masterGain.connect(v.ctx.destination));
        v._setup();
      }
    };
  "function" == typeof define &&
    define.amd &&
    define([], function () {
      return { Howler: v, Howl: H };
    });
  "undefined" != typeof exports && ((exports.Howler = v), (exports.Howl = H));
  "undefined" != typeof global
    ? ((global.HowlerGlobal = ka),
      (global.Howler = v),
      (global.Howl = H),
      (global.Sound = L))
    : "undefined" != typeof window &&
      ((window.HowlerGlobal = ka),
      (window.Howler = v),
      (window.Howl = H),
      (window.Sound = L));
})();
!(function () {
  HowlerGlobal.prototype._pos = [0, 0, 0];
  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];
  HowlerGlobal.prototype.stereo = function (v) {
    if (!this.ctx || !this.ctx.listener) return this;
    for (var H = this._howls.length - 1; 0 <= H; H--) this._howls[H].stereo(v);
    return this;
  };
  HowlerGlobal.prototype.pos = function (v, H, L) {
    return this.ctx && this.ctx.listener
      ? ((H = "number" != typeof H ? this._pos[1] : H),
        (L = "number" != typeof L ? this._pos[2] : L),
        "number" != typeof v
          ? this._pos
          : ((this._pos = [v, H, L]),
            void 0 !== this.ctx.listener.positionX
              ? (this.ctx.listener.positionX.setTargetAtTime(
                  this._pos[0],
                  Howler.ctx.currentTime,
                  0.1
                ),
                this.ctx.listener.positionY.setTargetAtTime(
                  this._pos[1],
                  Howler.ctx.currentTime,
                  0.1
                ),
                this.ctx.listener.positionZ.setTargetAtTime(
                  this._pos[2],
                  Howler.ctx.currentTime,
                  0.1
                ))
              : this.ctx.listener.setPosition(
                  this._pos[0],
                  this._pos[1],
                  this._pos[2]
                ),
            this))
      : this;
  };
  HowlerGlobal.prototype.orientation = function (v, H, L, T, ca, q) {
    if (!this.ctx || !this.ctx.listener) return this;
    var ka = this._orientation;
    return (
      (H = "number" != typeof H ? ka[1] : H),
      (L = "number" != typeof L ? ka[2] : L),
      (T = "number" != typeof T ? ka[3] : T),
      (ca = "number" != typeof ca ? ka[4] : ca),
      (q = "number" != typeof q ? ka[5] : q),
      "number" != typeof v
        ? ka
        : ((this._orientation = [v, H, L, T, ca, q]),
          void 0 !== this.ctx.listener.forwardX
            ? (this.ctx.listener.forwardX.setTargetAtTime(
                v,
                Howler.ctx.currentTime,
                0.1
              ),
              this.ctx.listener.forwardY.setTargetAtTime(
                H,
                Howler.ctx.currentTime,
                0.1
              ),
              this.ctx.listener.forwardZ.setTargetAtTime(
                L,
                Howler.ctx.currentTime,
                0.1
              ),
              this.ctx.listener.upX.setTargetAtTime(
                T,
                Howler.ctx.currentTime,
                0.1
              ),
              this.ctx.listener.upY.setTargetAtTime(
                ca,
                Howler.ctx.currentTime,
                0.1
              ),
              this.ctx.listener.upZ.setTargetAtTime(
                q,
                Howler.ctx.currentTime,
                0.1
              ))
            : this.ctx.listener.setOrientation(v, H, L, T, ca, q),
          this)
    );
  };
  Howl.prototype.init = (function (v) {
    return function (H) {
      return (
        (this._orientation = H.orientation || [1, 0, 0]),
        (this._stereo = H.stereo || null),
        (this._pos = H.pos || null),
        (this._pannerAttr = {
          coneInnerAngle: void 0 !== H.coneInnerAngle ? H.coneInnerAngle : 360,
          coneOuterAngle: void 0 !== H.coneOuterAngle ? H.coneOuterAngle : 360,
          coneOuterGain: void 0 !== H.coneOuterGain ? H.coneOuterGain : 0,
          distanceModel:
            void 0 !== H.distanceModel ? H.distanceModel : "inverse",
          maxDistance: void 0 !== H.maxDistance ? H.maxDistance : 1e4,
          panningModel: void 0 !== H.panningModel ? H.panningModel : "HRTF",
          refDistance: void 0 !== H.refDistance ? H.refDistance : 1,
          rolloffFactor: void 0 !== H.rolloffFactor ? H.rolloffFactor : 1,
        }),
        (this._onstereo = H.onstereo ? [{ fn: H.onstereo }] : []),
        (this._onpos = H.onpos ? [{ fn: H.onpos }] : []),
        (this._onorientation = H.onorientation
          ? [{ fn: H.onorientation }]
          : []),
        v.call(this, H)
      );
    };
  })(Howl.prototype.init);
  Howl.prototype.stereo = function (v, H) {
    var L = this;
    if (!L._webAudio) return L;
    if ("loaded" !== L._state)
      return (
        L._queue.push({
          event: "stereo",
          action: function () {
            L.stereo(v, H);
          },
        }),
        L
      );
    var T = void 0 === Howler.ctx.createStereoPanner ? "spatial" : "stereo";
    if (void 0 === H) {
      if ("number" != typeof v) return L._stereo;
      L._stereo = v;
      L._pos = [v, 0, 0];
    }
    for (var ca = L._getSoundIds(H), q = 0; q < ca.length; q++) {
      var Fa = L._soundById(ca[q]);
      if (Fa) {
        if ("number" != typeof v) return Fa._stereo;
        Fa._stereo = v;
        Fa._pos = [v, 0, 0];
        Fa._node &&
          ((Fa._pannerAttr.panningModel = "equalpower"),
          (Fa._panner && Fa._panner.pan) || ka(Fa, T),
          "spatial" === T
            ? void 0 !== Fa._panner.positionX
              ? (Fa._panner.positionX.setValueAtTime(v, Howler.ctx.currentTime),
                Fa._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime),
                Fa._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime))
              : Fa._panner.setPosition(v, 0, 0)
            : Fa._panner.pan.setValueAtTime(v, Howler.ctx.currentTime));
        L._emit("stereo", Fa._id);
      }
    }
    return L;
  };
  Howl.prototype.pos = function (v, H, L, T) {
    var ca = this;
    if (!ca._webAudio) return ca;
    if ("loaded" !== ca._state)
      return (
        ca._queue.push({
          event: "pos",
          action: function () {
            ca.pos(v, H, L, T);
          },
        }),
        ca
      );
    if (
      ((H = "number" != typeof H ? 0 : H),
      (L = "number" != typeof L ? -0.5 : L),
      void 0 === T)
    ) {
      if ("number" != typeof v) return ca._pos;
      ca._pos = [v, H, L];
    }
    for (var q = ca._getSoundIds(T), Fa = 0; Fa < q.length; Fa++) {
      var n = ca._soundById(q[Fa]);
      if (n) {
        if ("number" != typeof v) return n._pos;
        n._pos = [v, H, L];
        n._node &&
          ((n._panner && !n._panner.pan) || ka(n, "spatial"),
          void 0 !== n._panner.positionX
            ? (n._panner.positionX.setValueAtTime(v, Howler.ctx.currentTime),
              n._panner.positionY.setValueAtTime(H, Howler.ctx.currentTime),
              n._panner.positionZ.setValueAtTime(L, Howler.ctx.currentTime))
            : n._panner.setPosition(v, H, L));
        ca._emit("pos", n._id);
      }
    }
    return ca;
  };
  Howl.prototype.orientation = function (v, H, L, T) {
    var ca = this;
    if (!ca._webAudio) return ca;
    if ("loaded" !== ca._state)
      return (
        ca._queue.push({
          event: "orientation",
          action: function () {
            ca.orientation(v, H, L, T);
          },
        }),
        ca
      );
    if (
      ((H = "number" != typeof H ? ca._orientation[1] : H),
      (L = "number" != typeof L ? ca._orientation[2] : L),
      void 0 === T)
    ) {
      if ("number" != typeof v) return ca._orientation;
      ca._orientation = [v, H, L];
    }
    for (var q = ca._getSoundIds(T), Fa = 0; Fa < q.length; Fa++) {
      var n = ca._soundById(q[Fa]);
      if (n) {
        if ("number" != typeof v) return n._orientation;
        n._orientation = [v, H, L];
        n._node &&
          (n._panner ||
            (n._pos || (n._pos = ca._pos || [0, 0, -0.5]), ka(n, "spatial")),
          void 0 !== n._panner.orientationX
            ? (n._panner.orientationX.setValueAtTime(v, Howler.ctx.currentTime),
              n._panner.orientationY.setValueAtTime(H, Howler.ctx.currentTime),
              n._panner.orientationZ.setValueAtTime(L, Howler.ctx.currentTime))
            : n._panner.setOrientation(v, H, L));
        ca._emit("orientation", n._id);
      }
    }
    return ca;
  };
  Howl.prototype.pannerAttr = function () {
    var v,
      H,
      L = arguments;
    if (!this._webAudio) return this;
    if (0 === L.length) return this._pannerAttr;
    if (1 === L.length) {
      if ("object" != typeof L[0])
        return (
          (H = this._soundById(parseInt(L[0], 10))),
          H ? H._pannerAttr : this._pannerAttr
        );
      var T = L[0];
      void 0 === v &&
        (T.pannerAttr ||
          (T.pannerAttr = {
            coneInnerAngle: T.coneInnerAngle,
            coneOuterAngle: T.coneOuterAngle,
            coneOuterGain: T.coneOuterGain,
            distanceModel: T.distanceModel,
            maxDistance: T.maxDistance,
            refDistance: T.refDistance,
            rolloffFactor: T.rolloffFactor,
            panningModel: T.panningModel,
          }),
        (this._pannerAttr = {
          coneInnerAngle:
            void 0 !== T.pannerAttr.coneInnerAngle
              ? T.pannerAttr.coneInnerAngle
              : this._coneInnerAngle,
          coneOuterAngle:
            void 0 !== T.pannerAttr.coneOuterAngle
              ? T.pannerAttr.coneOuterAngle
              : this._coneOuterAngle,
          coneOuterGain:
            void 0 !== T.pannerAttr.coneOuterGain
              ? T.pannerAttr.coneOuterGain
              : this._coneOuterGain,
          distanceModel:
            void 0 !== T.pannerAttr.distanceModel
              ? T.pannerAttr.distanceModel
              : this._distanceModel,
          maxDistance:
            void 0 !== T.pannerAttr.maxDistance
              ? T.pannerAttr.maxDistance
              : this._maxDistance,
          refDistance:
            void 0 !== T.pannerAttr.refDistance
              ? T.pannerAttr.refDistance
              : this._refDistance,
          rolloffFactor:
            void 0 !== T.pannerAttr.rolloffFactor
              ? T.pannerAttr.rolloffFactor
              : this._rolloffFactor,
          panningModel:
            void 0 !== T.pannerAttr.panningModel
              ? T.pannerAttr.panningModel
              : this._panningModel,
        }));
    } else 2 === L.length && ((T = L[0]), (v = parseInt(L[1], 10)));
    v = this._getSoundIds(v);
    for (L = 0; L < v.length; L++)
      if ((H = this._soundById(v[L]))) {
        var ca = H._pannerAttr;
        ca = {
          coneInnerAngle:
            void 0 !== T.coneInnerAngle ? T.coneInnerAngle : ca.coneInnerAngle,
          coneOuterAngle:
            void 0 !== T.coneOuterAngle ? T.coneOuterAngle : ca.coneOuterAngle,
          coneOuterGain:
            void 0 !== T.coneOuterGain ? T.coneOuterGain : ca.coneOuterGain,
          distanceModel:
            void 0 !== T.distanceModel ? T.distanceModel : ca.distanceModel,
          maxDistance:
            void 0 !== T.maxDistance ? T.maxDistance : ca.maxDistance,
          refDistance:
            void 0 !== T.refDistance ? T.refDistance : ca.refDistance,
          rolloffFactor:
            void 0 !== T.rolloffFactor ? T.rolloffFactor : ca.rolloffFactor,
          panningModel:
            void 0 !== T.panningModel ? T.panningModel : ca.panningModel,
        };
        var q = H._panner;
        q ||
          (H._pos || (H._pos = this._pos || [0, 0, -0.5]),
          ka(H, "spatial"),
          (q = H._panner));
        q.coneInnerAngle = ca.coneInnerAngle;
        q.coneOuterAngle = ca.coneOuterAngle;
        q.coneOuterGain = ca.coneOuterGain;
        q.distanceModel = ca.distanceModel;
        q.maxDistance = ca.maxDistance;
        q.refDistance = ca.refDistance;
        q.rolloffFactor = ca.rolloffFactor;
        q.panningModel = ca.panningModel;
      }
    return this;
  };
  Sound.prototype.init = (function (v) {
    return function () {
      var H = this._parent;
      this._orientation = H._orientation;
      this._stereo = H._stereo;
      this._pos = H._pos;
      this._pannerAttr = H._pannerAttr;
      v.call(this);
      this._stereo
        ? H.stereo(this._stereo)
        : this._pos &&
          H.pos(this._pos[0], this._pos[1], this._pos[2], this._id);
    };
  })(Sound.prototype.init);
  Sound.prototype.reset = (function (v) {
    return function () {
      var H = this._parent;
      return (
        (this._orientation = H._orientation),
        (this._stereo = H._stereo),
        (this._pos = H._pos),
        (this._pannerAttr = H._pannerAttr),
        this._stereo
          ? H.stereo(this._stereo)
          : this._pos
          ? H.pos(this._pos[0], this._pos[1], this._pos[2], this._id)
          : this._panner &&
            (this._panner.disconnect(0),
            (this._panner = void 0),
            H._refreshBuffer(this)),
        v.call(this)
      );
    };
  })(Sound.prototype.reset);
  var ka = function (v, H) {
    "spatial" === (H || "spatial")
      ? ((v._panner = Howler.ctx.createPanner()),
        (v._panner.coneInnerAngle = v._pannerAttr.coneInnerAngle),
        (v._panner.coneOuterAngle = v._pannerAttr.coneOuterAngle),
        (v._panner.coneOuterGain = v._pannerAttr.coneOuterGain),
        (v._panner.distanceModel = v._pannerAttr.distanceModel),
        (v._panner.maxDistance = v._pannerAttr.maxDistance),
        (v._panner.refDistance = v._pannerAttr.refDistance),
        (v._panner.rolloffFactor = v._pannerAttr.rolloffFactor),
        (v._panner.panningModel = v._pannerAttr.panningModel),
        void 0 !== v._panner.positionX
          ? (v._panner.positionX.setValueAtTime(
              v._pos[0],
              Howler.ctx.currentTime
            ),
            v._panner.positionY.setValueAtTime(
              v._pos[1],
              Howler.ctx.currentTime
            ),
            v._panner.positionZ.setValueAtTime(
              v._pos[2],
              Howler.ctx.currentTime
            ))
          : v._panner.setPosition(v._pos[0], v._pos[1], v._pos[2]),
        void 0 !== v._panner.orientationX
          ? (v._panner.orientationX.setValueAtTime(
              v._orientation[0],
              Howler.ctx.currentTime
            ),
            v._panner.orientationY.setValueAtTime(
              v._orientation[1],
              Howler.ctx.currentTime
            ),
            v._panner.orientationZ.setValueAtTime(
              v._orientation[2],
              Howler.ctx.currentTime
            ))
          : v._panner.setOrientation(
              v._orientation[0],
              v._orientation[1],
              v._orientation[2]
            ))
      : ((v._panner = Howler.ctx.createStereoPanner()),
        v._panner.pan.setValueAtTime(v._stereo, Howler.ctx.currentTime));
    v._panner.connect(v._node);
    v._paused || v._parent.pause(v._id, !0).play(v._id, !0);
  };
})();
!(function (ka) {
  "object" == typeof exports && "undefined" != typeof module
    ? (module.exports = ka())
    : "function" == typeof define && define.amd
    ? define([], ka)
    : (("undefined" != typeof window
        ? window
        : "undefined" != typeof global
        ? global
        : "undefined" != typeof self
        ? self
        : this
      ).pako = ka());
})(function () {
  return (function T(v, H, L) {
    function ca(n, h) {
      if (!H[n]) {
        if (!v[n]) {
          var p = "function" == typeof require && require;
          if (!h && p) return p(n, !0);
          if (q) return q(n, !0);
          h = Error("Cannot find module '" + n + "'");
          throw ((h.code = "MODULE_NOT_FOUND"), h);
        }
        h = H[n] = { exports: {} };
        v[n][0].call(
          h.exports,
          function (h) {
            var p = v[n][1][h];
            return ca(p ? p : h);
          },
          h,
          h.exports,
          T,
          v,
          H,
          L
        );
      }
      return H[n].exports;
    }
    for (
      var q = "function" == typeof require && require, Fa = 0;
      Fa < L.length;
      Fa++
    )
      ca(L[Fa]);
    return ca;
  })(
    {
      1: [
        function (v, H, L) {
          function T(v) {
            if (!(this instanceof T)) return new T(v);
            v = this.options = Fa.assign(
              {
                level: U,
                method: Ha,
                chunkSize: 16384,
                windowBits: 15,
                memLevel: 8,
                strategy: O,
                to: "",
              },
              v || {}
            );
            v.raw && 0 < v.windowBits
              ? (v.windowBits = -v.windowBits)
              : v.gzip &&
                0 < v.windowBits &&
                16 > v.windowBits &&
                (v.windowBits += 16);
            this.err = 0;
            this.msg = "";
            this.ended = !1;
            this.chunks = [];
            this.strm = new p();
            this.strm.avail_out = 0;
            var H = q.deflateInit2(
              this.strm,
              v.level,
              v.method,
              v.windowBits,
              v.memLevel,
              v.strategy
            );
            if (H !== x) throw Error(h[H]);
            if (
              (v.header && q.deflateSetHeader(this.strm, v.header),
              v.dictionary)
            ) {
              var L;
              if (
                ((L =
                  "string" == typeof v.dictionary
                    ? n.string2buf(v.dictionary)
                    : "[object ArrayBuffer]" === w.call(v.dictionary)
                    ? new Uint8Array(v.dictionary)
                    : v.dictionary),
                (H = q.deflateSetDictionary(this.strm, L)),
                H !== x)
              )
                throw Error(h[H]);
              this._dict_set = !0;
            }
          }
          function ca(h, n) {
            n = new T(n);
            if ((n.push(h, !0), n.err)) throw n.msg;
            return n.result;
          }
          var q = v("./zlib/deflate"),
            Fa = v("./utils/common"),
            n = v("./utils/strings"),
            h = v("./zlib/messages"),
            p = v("./zlib/zstream"),
            w = Object.prototype.toString,
            x = 0,
            U = -1,
            O = 0,
            Ha = 8;
          T.prototype.push = function (h, p) {
            var v,
              H = this.strm,
              F = this.options.chunkSize;
            if (this.ended) return !1;
            p = p === ~~p ? p : !0 === p ? 4 : 0;
            "string" == typeof h
              ? (H.input = n.string2buf(h))
              : "[object ArrayBuffer]" === w.call(h)
              ? (H.input = new Uint8Array(h))
              : (H.input = h);
            H.next_in = 0;
            H.avail_in = H.input.length;
            do {
              if (
                (0 === H.avail_out &&
                  ((H.output = new Fa.Buf8(F)),
                  (H.next_out = 0),
                  (H.avail_out = F)),
                (v = q.deflate(H, p)),
                1 !== v && v !== x)
              )
                return this.onEnd(v), (this.ended = !0), !1;
              (0 !== H.avail_out &&
                (0 !== H.avail_in || (4 !== p && 2 !== p))) ||
                ("string" === this.options.to
                  ? this.onData(
                      n.buf2binstring(Fa.shrinkBuf(H.output, H.next_out))
                    )
                  : this.onData(Fa.shrinkBuf(H.output, H.next_out)));
            } while ((0 < H.avail_in || 0 === H.avail_out) && 1 !== v);
            return 4 === p
              ? ((v = q.deflateEnd(this.strm)),
                this.onEnd(v),
                (this.ended = !0),
                v === x)
              : 2 !== p || (this.onEnd(x), (H.avail_out = 0), !0);
          };
          T.prototype.onData = function (h) {
            this.chunks.push(h);
          };
          T.prototype.onEnd = function (h) {
            h === x &&
              ("string" === this.options.to
                ? (this.result = this.chunks.join(""))
                : (this.result = Fa.flattenChunks(this.chunks)));
            this.chunks = [];
            this.err = h;
            this.msg = this.strm.msg;
          };
          L.Deflate = T;
          L.deflate = ca;
          L.deflateRaw = function (h, n) {
            return (n = n || {}), (n.raw = !0), ca(h, n);
          };
          L.gzip = function (h, n) {
            return (n = n || {}), (n.gzip = !0), ca(h, n);
          };
        },
        {
          "./utils/common": 3,
          "./utils/strings": 4,
          "./zlib/deflate": 8,
          "./zlib/messages": 13,
          "./zlib/zstream": 15,
        },
      ],
      2: [
        function (v, H, L) {
          function T(n) {
            if (!(this instanceof T)) return new T(n);
            var v = (this.options = Fa.assign(
              { chunkSize: 16384, windowBits: 0, to: "" },
              n || {}
            ));
            v.raw &&
              0 <= v.windowBits &&
              16 > v.windowBits &&
              ((v.windowBits = -v.windowBits),
              0 === v.windowBits && (v.windowBits = -15));
            !(0 <= v.windowBits && 16 > v.windowBits) ||
              (n && n.windowBits) ||
              (v.windowBits += 32);
            15 < v.windowBits &&
              48 > v.windowBits &&
              0 === (15 & v.windowBits) &&
              (v.windowBits |= 15);
            this.err = 0;
            this.msg = "";
            this.ended = !1;
            this.chunks = [];
            this.strm = new w();
            this.strm.avail_out = 0;
            n = q.inflateInit2(this.strm, v.windowBits);
            if (n !== h.Z_OK) throw Error(p[n]);
            this.header = new x();
            q.inflateGetHeader(this.strm, this.header);
          }
          function ca(h, n) {
            n = new T(n);
            if ((n.push(h, !0), n.err)) throw n.msg;
            return n.result;
          }
          var q = v("./zlib/inflate"),
            Fa = v("./utils/common"),
            n = v("./utils/strings"),
            h = v("./zlib/constants"),
            p = v("./zlib/messages"),
            w = v("./zlib/zstream"),
            x = v("./zlib/gzheader"),
            U = Object.prototype.toString;
          T.prototype.push = function (p, w) {
            var x,
              v,
              H,
              L,
              F,
              O = this.strm,
              T = this.options.chunkSize,
              ca = this.options.dictionary,
              Z = !1;
            if (this.ended) return !1;
            w = w === ~~w ? w : !0 === w ? h.Z_FINISH : h.Z_NO_FLUSH;
            "string" == typeof p
              ? (O.input = n.binstring2buf(p))
              : "[object ArrayBuffer]" === U.call(p)
              ? (O.input = new Uint8Array(p))
              : (O.input = p);
            O.next_in = 0;
            O.avail_in = O.input.length;
            do {
              if (
                (0 === O.avail_out &&
                  ((O.output = new Fa.Buf8(T)),
                  (O.next_out = 0),
                  (O.avail_out = T)),
                (x = q.inflate(O, h.Z_NO_FLUSH)),
                x === h.Z_NEED_DICT &&
                  ca &&
                  ((F =
                    "string" == typeof ca
                      ? n.string2buf(ca)
                      : "[object ArrayBuffer]" === U.call(ca)
                      ? new Uint8Array(ca)
                      : ca),
                  (x = q.inflateSetDictionary(this.strm, F))),
                x === h.Z_BUF_ERROR && !0 === Z && ((x = h.Z_OK), (Z = !1)),
                x !== h.Z_STREAM_END && x !== h.Z_OK)
              )
                return this.onEnd(x), (this.ended = !0), !1;
              O.next_out &&
                ((0 !== O.avail_out &&
                  x !== h.Z_STREAM_END &&
                  (0 !== O.avail_in ||
                    (w !== h.Z_FINISH && w !== h.Z_SYNC_FLUSH))) ||
                  ("string" === this.options.to
                    ? ((v = n.utf8border(O.output, O.next_out)),
                      (H = O.next_out - v),
                      (L = n.buf2string(O.output, v)),
                      (O.next_out = H),
                      (O.avail_out = T - H),
                      H && Fa.arraySet(O.output, O.output, v, H, 0),
                      this.onData(L))
                    : this.onData(Fa.shrinkBuf(O.output, O.next_out))));
              0 === O.avail_in && 0 === O.avail_out && (Z = !0);
            } while (
              (0 < O.avail_in || 0 === O.avail_out) &&
              x !== h.Z_STREAM_END
            );
            return (
              x === h.Z_STREAM_END && (w = h.Z_FINISH),
              w === h.Z_FINISH
                ? ((x = q.inflateEnd(this.strm)),
                  this.onEnd(x),
                  (this.ended = !0),
                  x === h.Z_OK)
                : w !== h.Z_SYNC_FLUSH ||
                  (this.onEnd(h.Z_OK), (O.avail_out = 0), !0)
            );
          };
          T.prototype.onData = function (h) {
            this.chunks.push(h);
          };
          T.prototype.onEnd = function (n) {
            n === h.Z_OK &&
              ("string" === this.options.to
                ? (this.result = this.chunks.join(""))
                : (this.result = Fa.flattenChunks(this.chunks)));
            this.chunks = [];
            this.err = n;
            this.msg = this.strm.msg;
          };
          L.Inflate = T;
          L.inflate = ca;
          L.inflateRaw = function (h, n) {
            return (n = n || {}), (n.raw = !0), ca(h, n);
          };
          L.ungzip = ca;
        },
        {
          "./utils/common": 3,
          "./utils/strings": 4,
          "./zlib/constants": 6,
          "./zlib/gzheader": 9,
          "./zlib/inflate": 11,
          "./zlib/messages": 13,
          "./zlib/zstream": 15,
        },
      ],
      3: [
        function (v, H, L) {
          v =
            "undefined" != typeof Uint8Array &&
            "undefined" != typeof Uint16Array &&
            "undefined" != typeof Int32Array;
          L.assign = function (q) {
            for (var v = Array.prototype.slice.call(arguments, 1); v.length; ) {
              var n = v.shift();
              if (n) {
                if ("object" != typeof n)
                  throw new TypeError(n + "must be non-object");
                for (var h in n) n.hasOwnProperty(h) && (q[h] = n[h]);
              }
            }
            return q;
          };
          L.shrinkBuf = function (q, v) {
            return q.length === v
              ? q
              : q.subarray
              ? q.subarray(0, v)
              : ((q.length = v), q);
          };
          var T = {
              arraySet: function (q, v, n, h, p) {
                if (v.subarray && q.subarray)
                  return void q.set(v.subarray(n, n + h), p);
                for (var w = 0; w < h; w++) q[p + w] = v[n + w];
              },
              flattenChunks: function (q) {
                var v, n;
                var h = (n = 0);
                for (v = q.length; h < v; h++) n += q[h].length;
                var p = new Uint8Array(n);
                h = n = 0;
                for (v = q.length; h < v; h++) {
                  var w = q[h];
                  p.set(w, n);
                  n += w.length;
                }
                return p;
              },
            },
            ca = {
              arraySet: function (q, v, n, h, p) {
                for (var w = 0; w < h; w++) q[p + w] = v[n + w];
              },
              flattenChunks: function (q) {
                return [].concat.apply([], q);
              },
            };
          L.setTyped = function (q) {
            q
              ? ((L.Buf8 = Uint8Array),
                (L.Buf16 = Uint16Array),
                (L.Buf32 = Int32Array),
                L.assign(L, T))
              : ((L.Buf8 = Array),
                (L.Buf16 = Array),
                (L.Buf32 = Array),
                L.assign(L, ca));
          };
          L.setTyped(v);
        },
        {},
      ],
      4: [
        function (v, H, L) {
          function T(h, n) {
            if (65537 > n && ((h.subarray && Fa) || (!h.subarray && q)))
              return String.fromCharCode.apply(null, ca.shrinkBuf(h, n));
            for (var p = "", x = 0; x < n; x++) p += String.fromCharCode(h[x]);
            return p;
          }
          var ca = v("./common"),
            q = !0,
            Fa = !0;
          try {
            String.fromCharCode.apply(null, [0]);
          } catch (h) {
            q = !1;
          }
          try {
            String.fromCharCode.apply(null, new Uint8Array(1));
          } catch (h) {
            Fa = !1;
          }
          var n = new ca.Buf8(256);
          for (v = 0; 256 > v; v++)
            n[v] =
              252 <= v
                ? 6
                : 248 <= v
                ? 5
                : 240 <= v
                ? 4
                : 224 <= v
                ? 3
                : 192 <= v
                ? 2
                : 1;
          n[254] = n[254] = 1;
          L.string2buf = function (h) {
            var n,
              q,
              x,
              v = h.length,
              H = 0;
            for (q = 0; q < v; q++) {
              var L = h.charCodeAt(q);
              55296 === (64512 & L) &&
                q + 1 < v &&
                ((n = h.charCodeAt(q + 1)),
                56320 === (64512 & n) &&
                  ((L = 65536 + ((L - 55296) << 10) + (n - 56320)), q++));
              H += 128 > L ? 1 : 2048 > L ? 2 : 65536 > L ? 3 : 4;
            }
            var T = new ca.Buf8(H);
            for (q = x = 0; x < H; q++)
              (L = h.charCodeAt(q)),
                55296 === (64512 & L) &&
                  q + 1 < v &&
                  ((n = h.charCodeAt(q + 1)),
                  56320 === (64512 & n) &&
                    ((L = 65536 + ((L - 55296) << 10) + (n - 56320)), q++)),
                128 > L
                  ? (T[x++] = L)
                  : 2048 > L
                  ? ((T[x++] = 192 | (L >>> 6)), (T[x++] = 128 | (63 & L)))
                  : 65536 > L
                  ? ((T[x++] = 224 | (L >>> 12)),
                    (T[x++] = 128 | ((L >>> 6) & 63)),
                    (T[x++] = 128 | (63 & L)))
                  : ((T[x++] = 240 | (L >>> 18)),
                    (T[x++] = 128 | ((L >>> 12) & 63)),
                    (T[x++] = 128 | ((L >>> 6) & 63)),
                    (T[x++] = 128 | (63 & L)));
            return T;
          };
          L.buf2binstring = function (h) {
            return T(h, h.length);
          };
          L.binstring2buf = function (h) {
            for (var n = new ca.Buf8(h.length), q = 0, x = n.length; q < x; q++)
              n[q] = h.charCodeAt(q);
            return n;
          };
          L.buf2string = function (h, p) {
            var q,
              x,
              v,
              H = p || h.length,
              L = Array(2 * H);
            for (p = q = 0; p < H; )
              if (((x = h[p++]), 128 > x)) L[q++] = x;
              else if (((v = n[x]), 4 < v)) (L[q++] = 65533), (p += v - 1);
              else {
                for (x &= 2 === v ? 31 : 3 === v ? 15 : 7; 1 < v && p < H; )
                  (x = (x << 6) | (63 & h[p++])), v--;
                1 < v
                  ? (L[q++] = 65533)
                  : 65536 > x
                  ? (L[q++] = x)
                  : ((x -= 65536),
                    (L[q++] = 55296 | ((x >> 10) & 1023)),
                    (L[q++] = 56320 | (1023 & x)));
              }
            return T(L, q);
          };
          L.utf8border = function (h, p) {
            var q;
            p = p || h.length;
            p > h.length && (p = h.length);
            for (q = p - 1; 0 <= q && 128 === (192 & h[q]); ) q--;
            return 0 > q ? p : 0 === q ? p : q + n[h[q]] > p ? q : p;
          };
        },
        { "./common": 3 },
      ],
      5: [
        function (v, H, L) {
          H.exports = function (v, H, q, L) {
            var n = (65535 & v) | 0;
            v = ((v >>> 16) & 65535) | 0;
            for (var h; 0 !== q; ) {
              h = 2e3 < q ? 2e3 : q;
              q -= h;
              do (n = (n + H[L++]) | 0), (v = (v + n) | 0);
              while (--h);
              n %= 65521;
              v %= 65521;
            }
            return n | (v << 16) | 0;
          };
        },
        {},
      ],
      6: [
        function (v, H, L) {
          H.exports = {
            Z_NO_FLUSH: 0,
            Z_PARTIAL_FLUSH: 1,
            Z_SYNC_FLUSH: 2,
            Z_FULL_FLUSH: 3,
            Z_FINISH: 4,
            Z_BLOCK: 5,
            Z_TREES: 6,
            Z_OK: 0,
            Z_STREAM_END: 1,
            Z_NEED_DICT: 2,
            Z_ERRNO: -1,
            Z_STREAM_ERROR: -2,
            Z_DATA_ERROR: -3,
            Z_BUF_ERROR: -5,
            Z_NO_COMPRESSION: 0,
            Z_BEST_SPEED: 1,
            Z_BEST_COMPRESSION: 9,
            Z_DEFAULT_COMPRESSION: -1,
            Z_FILTERED: 1,
            Z_HUFFMAN_ONLY: 2,
            Z_RLE: 3,
            Z_FIXED: 4,
            Z_DEFAULT_STRATEGY: 0,
            Z_BINARY: 0,
            Z_TEXT: 1,
            Z_UNKNOWN: 2,
            Z_DEFLATED: 8,
          };
        },
        {},
      ],
      7: [
        function (v, H, L) {
          var T = (function () {
            for (var v, q = [], H = 0; 256 > H; H++) {
              v = H;
              for (var n = 0; 8 > n; n++)
                v = 1 & v ? 3988292384 ^ (v >>> 1) : v >>> 1;
              q[H] = v;
            }
            return q;
          })();
          H.exports = function (v, q, H, n) {
            H = n + H;
            for (v ^= -1; n < H; n++) v = (v >>> 8) ^ T[255 & (v ^ q[n])];
            return v ^ -1;
          };
        },
        {},
      ],
      8: [
        function (v, H, L) {
          function T(h, n) {
            return (h.msg = nd[n]), n;
          }
          function ca(h) {
            for (var n = h.length; 0 <= --n; ) h[n] = 0;
          }
          function q(h) {
            var n = h.state,
              p = n.pending;
            p > h.avail_out && (p = h.avail_out);
            0 !== p &&
              (Fb.arraySet(
                h.output,
                n.pending_buf,
                n.pending_out,
                p,
                h.next_out
              ),
              (h.next_out += p),
              (n.pending_out += p),
              (h.total_out += p),
              (h.avail_out -= p),
              (n.pending -= p),
              0 === n.pending && (n.pending_out = 0));
          }
          function Fa(h, n) {
            F._tr_flush_block(
              h,
              0 <= h.block_start ? h.block_start : -1,
              h.strstart - h.block_start,
              n
            );
            h.block_start = h.strstart;
            q(h.strm);
          }
          function n(h, n) {
            h.pending_buf[h.pending++] = n;
          }
          function h(h, n) {
            h.pending_buf[h.pending++] = (n >>> 8) & 255;
            h.pending_buf[h.pending++] = 255 & n;
          }
          function p(h, n) {
            var p,
              q,
              z = h.max_chain_length,
              w = h.strstart,
              v = h.prev_length,
              x = h.nice_match,
              F = h.strstart > h.w_size - Qa ? h.strstart - (h.w_size - Qa) : 0,
              B = h.window,
              I = h.w_mask,
              H = h.prev,
              Z = h.strstart + Xa,
              L = B[w + v - 1],
              y = B[w + v];
            h.prev_length >= h.good_match && (z >>= 2);
            x > h.lookahead && (x = h.lookahead);
            do
              if (
                ((p = n),
                B[p + v] === y &&
                  B[p + v - 1] === L &&
                  B[p] === B[w] &&
                  B[++p] === B[w + 1])
              ) {
                w += 2;
                for (
                  p++;
                  B[++w] === B[++p] &&
                  B[++w] === B[++p] &&
                  B[++w] === B[++p] &&
                  B[++w] === B[++p] &&
                  B[++w] === B[++p] &&
                  B[++w] === B[++p] &&
                  B[++w] === B[++p] &&
                  B[++w] === B[++p] &&
                  w < Z;

                );
                if (((q = Xa - (Z - w)), (w = Z - Xa), q > v)) {
                  if (((h.match_start = n), (v = q), q >= x)) break;
                  L = B[w + v - 1];
                  y = B[w + v];
                }
              }
            while ((n = H[n & I]) > F && 0 !== --z);
            return v <= h.lookahead ? v : h.lookahead;
          }
          function w(h) {
            var n,
              p,
              q = h.w_size;
            do {
              if (
                ((p = h.window_size - h.lookahead - h.strstart),
                h.strstart >= q + (q - Qa))
              ) {
                Fb.arraySet(h.window, h.window, q, q, 0);
                h.match_start -= q;
                h.strstart -= q;
                h.block_start -= q;
                var z = (n = h.hash_size);
                do {
                  var w = h.head[--z];
                  h.head[z] = w >= q ? w - q : 0;
                } while (--n);
                z = n = q;
                do (w = h.prev[--z]), (h.prev[z] = w >= q ? w - q : 0);
                while (--n);
                p += q;
              }
              if (0 === h.strm.avail_in) break;
              z = h.strm;
              w = h.window;
              var v = h.strstart + h.lookahead,
                x = z.avail_in;
              if (
                ((n =
                  (x > p && (x = p),
                  0 === x
                    ? 0
                    : ((z.avail_in -= x),
                      Fb.arraySet(w, z.input, z.next_in, x, v),
                      1 === z.state.wrap
                        ? (z.adler = wa(z.adler, w, x, v))
                        : 2 === z.state.wrap &&
                          (z.adler = ma(z.adler, w, x, v)),
                      (z.next_in += x),
                      (z.total_in += x),
                      x))),
                (h.lookahead += n),
                h.lookahead + h.insert >= pa)
              )
                for (
                  p = h.strstart - h.insert,
                    h.ins_h = h.window[p],
                    h.ins_h =
                      ((h.ins_h << h.hash_shift) ^ h.window[p + 1]) &
                      h.hash_mask;
                  h.insert &&
                  ((h.ins_h =
                    ((h.ins_h << h.hash_shift) ^ h.window[p + pa - 1]) &
                    h.hash_mask),
                  (h.prev[p & h.w_mask] = h.head[h.ins_h]),
                  (h.head[h.ins_h] = p),
                  p++,
                  h.insert--,
                  !(h.lookahead + h.insert < pa));

                );
            } while (h.lookahead < Qa && 0 !== h.strm.avail_in);
          }
          function x(h, n) {
            for (var q, t; ; ) {
              if (h.lookahead < Qa) {
                if ((w(h), h.lookahead < Qa && n === Z)) return na;
                if (0 === h.lookahead) break;
              }
              if (
                ((q = 0),
                h.lookahead >= pa &&
                  ((h.ins_h =
                    ((h.ins_h << h.hash_shift) ^
                      h.window[h.strstart + pa - 1]) &
                    h.hash_mask),
                  (q = h.prev[h.strstart & h.w_mask] = h.head[h.ins_h]),
                  (h.head[h.ins_h] = h.strstart)),
                0 !== q &&
                  h.strstart - q <= h.w_size - Qa &&
                  (h.match_length = p(h, q)),
                h.match_length >= pa)
              )
                if (
                  ((t = F._tr_tally(
                    h,
                    h.strstart - h.match_start,
                    h.match_length - pa
                  )),
                  (h.lookahead -= h.match_length),
                  h.match_length <= h.max_lazy_match && h.lookahead >= pa)
                ) {
                  h.match_length--;
                  do
                    h.strstart++,
                      (h.ins_h =
                        ((h.ins_h << h.hash_shift) ^
                          h.window[h.strstart + pa - 1]) &
                        h.hash_mask),
                      (q = h.prev[h.strstart & h.w_mask] = h.head[h.ins_h]),
                      (h.head[h.ins_h] = h.strstart);
                  while (0 !== --h.match_length);
                  h.strstart++;
                } else
                  (h.strstart += h.match_length),
                    (h.match_length = 0),
                    (h.ins_h = h.window[h.strstart]),
                    (h.ins_h =
                      ((h.ins_h << h.hash_shift) ^ h.window[h.strstart + 1]) &
                      h.hash_mask);
              else
                (t = F._tr_tally(h, 0, h.window[h.strstart])),
                  h.lookahead--,
                  h.strstart++;
              if (t && (Fa(h, !1), 0 === h.strm.avail_out)) return na;
            }
            return (
              (h.insert = h.strstart < pa - 1 ? h.strstart : pa - 1),
              n === $a
                ? (Fa(h, !0), 0 === h.strm.avail_out ? db : Yb)
                : h.last_lit && (Fa(h, !1), 0 === h.strm.avail_out)
                ? na
                : cd
            );
          }
          function U(h, n) {
            for (var q, t, z; ; ) {
              if (h.lookahead < Qa) {
                if ((w(h), h.lookahead < Qa && n === Z)) return na;
                if (0 === h.lookahead) break;
              }
              if (
                ((q = 0),
                h.lookahead >= pa &&
                  ((h.ins_h =
                    ((h.ins_h << h.hash_shift) ^
                      h.window[h.strstart + pa - 1]) &
                    h.hash_mask),
                  (q = h.prev[h.strstart & h.w_mask] = h.head[h.ins_h]),
                  (h.head[h.ins_h] = h.strstart)),
                (h.prev_length = h.match_length),
                (h.prev_match = h.match_start),
                (h.match_length = pa - 1),
                0 !== q &&
                  h.prev_length < h.max_lazy_match &&
                  h.strstart - q <= h.w_size - Qa &&
                  ((h.match_length = p(h, q)),
                  5 >= h.match_length &&
                    (h.strategy === Oc ||
                      (h.match_length === pa &&
                        4096 < h.strstart - h.match_start)) &&
                    (h.match_length = pa - 1)),
                h.prev_length >= pa && h.match_length <= h.prev_length)
              ) {
                z = h.strstart + h.lookahead - pa;
                t = F._tr_tally(
                  h,
                  h.strstart - 1 - h.prev_match,
                  h.prev_length - pa
                );
                h.lookahead -= h.prev_length - 1;
                h.prev_length -= 2;
                do
                  ++h.strstart <= z &&
                    ((h.ins_h =
                      ((h.ins_h << h.hash_shift) ^
                        h.window[h.strstart + pa - 1]) &
                      h.hash_mask),
                    (q = h.prev[h.strstart & h.w_mask] = h.head[h.ins_h]),
                    (h.head[h.ins_h] = h.strstart));
                while (0 !== --h.prev_length);
                if (
                  ((h.match_available = 0),
                  (h.match_length = pa - 1),
                  h.strstart++,
                  t && (Fa(h, !1), 0 === h.strm.avail_out))
                )
                  return na;
              } else if (h.match_available) {
                if (
                  ((t = F._tr_tally(h, 0, h.window[h.strstart - 1])),
                  t && Fa(h, !1),
                  h.strstart++,
                  h.lookahead--,
                  0 === h.strm.avail_out)
                )
                  return na;
              } else (h.match_available = 1), h.strstart++, h.lookahead--;
            }
            return (
              h.match_available &&
                (F._tr_tally(h, 0, h.window[h.strstart - 1]),
                (h.match_available = 0)),
              (h.insert = h.strstart < pa - 1 ? h.strstart : pa - 1),
              n === $a
                ? (Fa(h, !0), 0 === h.strm.avail_out ? db : Yb)
                : h.last_lit && (Fa(h, !1), 0 === h.strm.avail_out)
                ? na
                : cd
            );
          }
          function O(h, n, p, q, w) {
            this.good_length = h;
            this.max_lazy = n;
            this.nice_length = p;
            this.max_chain = q;
            this.func = w;
          }
          function Ha() {
            this.strm = null;
            this.status = 0;
            this.pending_buf = null;
            this.wrap =
              this.pending =
              this.pending_out =
              this.pending_buf_size =
                0;
            this.gzhead = null;
            this.gzindex = 0;
            this.method = wc;
            this.last_flush = -1;
            this.w_mask = this.w_bits = this.w_size = 0;
            this.window = null;
            this.window_size = 0;
            this.head = this.prev = null;
            this.nice_match =
              this.good_match =
              this.strategy =
              this.level =
              this.max_lazy_match =
              this.max_chain_length =
              this.prev_length =
              this.lookahead =
              this.match_start =
              this.strstart =
              this.match_available =
              this.prev_match =
              this.match_length =
              this.block_start =
              this.hash_shift =
              this.hash_mask =
              this.hash_bits =
              this.hash_size =
              this.ins_h =
                0;
            this.dyn_ltree = new Fb.Buf16(2 * Cc);
            this.dyn_dtree = new Fb.Buf16(2 * (2 * ye + 1));
            this.bl_tree = new Fb.Buf16(2 * (2 * B + 1));
            ca(this.dyn_ltree);
            ca(this.dyn_dtree);
            ca(this.bl_tree);
            this.bl_desc = this.d_desc = this.l_desc = null;
            this.bl_count = new Fb.Buf16(Dc + 1);
            this.heap = new Fb.Buf16(2 * Jc + 1);
            ca(this.heap);
            this.heap_max = this.heap_len = 0;
            this.depth = new Fb.Buf16(2 * Jc + 1);
            ca(this.depth);
            this.bi_valid =
              this.bi_buf =
              this.insert =
              this.matches =
              this.static_len =
              this.opt_len =
              this.d_buf =
              this.last_lit =
              this.lit_bufsize =
              this.l_buf =
                0;
          }
          function Pb(h) {
            var n;
            return h && h.state
              ? ((h.total_in = h.total_out = 0),
                (h.data_type = ib),
                (n = h.state),
                (n.pending = 0),
                (n.pending_out = 0),
                0 > n.wrap && (n.wrap = -n.wrap),
                (n.status = n.wrap ? Q : ja),
                (h.adler = 2 === n.wrap ? 0 : 1),
                (n.last_flush = Z),
                F._tr_init(n),
                pb)
              : T(h, Ca);
          }
          function Hc(h) {
            var n = Pb(h);
            n === pb &&
              ((h = h.state),
              (h.window_size = 2 * h.w_size),
              ca(h.head),
              (h.max_lazy_match = kb[h.level].max_lazy),
              (h.good_match = kb[h.level].good_length),
              (h.nice_match = kb[h.level].nice_length),
              (h.max_chain_length = kb[h.level].max_chain),
              (h.strstart = 0),
              (h.block_start = 0),
              (h.lookahead = 0),
              (h.insert = 0),
              (h.match_length = h.prev_length = pa - 1),
              (h.match_available = 0),
              (h.ins_h = 0));
            return n;
          }
          function Ga(h, n, p, q, w, v) {
            if (!h) return Ca;
            var t = 1;
            if (
              (n === I && (n = 6),
              0 > q ? ((t = 0), (q = -q)) : 15 < q && ((t = 2), (q -= 16)),
              1 > w ||
                w > bd ||
                p !== wc ||
                8 > q ||
                15 < q ||
                0 > n ||
                9 < n ||
                0 > v ||
                v > ad)
            )
              return T(h, Ca);
            8 === q && (q = 9);
            var D = new Ha();
            return (
              (h.state = D),
              (D.strm = h),
              (D.wrap = t),
              (D.gzhead = null),
              (D.w_bits = q),
              (D.w_size = 1 << D.w_bits),
              (D.w_mask = D.w_size - 1),
              (D.hash_bits = w + 7),
              (D.hash_size = 1 << D.hash_bits),
              (D.hash_mask = D.hash_size - 1),
              (D.hash_shift = ~~((D.hash_bits + pa - 1) / pa)),
              (D.window = new Fb.Buf8(2 * D.w_size)),
              (D.head = new Fb.Buf16(D.hash_size)),
              (D.prev = new Fb.Buf16(D.w_size)),
              (D.lit_bufsize = 1 << (w + 6)),
              (D.pending_buf_size = 4 * D.lit_bufsize),
              (D.pending_buf = new Fb.Buf8(D.pending_buf_size)),
              (D.d_buf = 1 * D.lit_bufsize),
              (D.l_buf = 3 * D.lit_bufsize),
              (D.level = n),
              (D.strategy = v),
              (D.method = p),
              Hc(h)
            );
          }
          var Fb = v("../utils/common"),
            F = v("./trees"),
            wa = v("./adler32"),
            ma = v("./crc32"),
            nd = v("./messages"),
            Z = 0,
            $a = 4,
            pb = 0,
            Ca = -2,
            I = -1,
            Oc = 1,
            ad = 4,
            ib = 2,
            wc = 8,
            bd = 9,
            Jc = 286,
            ye = 30,
            B = 19,
            Cc = 2 * Jc + 1,
            Dc = 15,
            pa = 3,
            Xa = 258,
            Qa = Xa + pa + 1,
            Q = 42,
            ja = 113,
            na = 1,
            cd = 2,
            db = 3,
            Yb = 4;
          var kb = [
            new O(0, 0, 0, 0, function (h, n) {
              var p = 65535;
              for (
                p > h.pending_buf_size - 5 && (p = h.pending_buf_size - 5);
                ;

              ) {
                if (1 >= h.lookahead) {
                  if ((w(h), 0 === h.lookahead && n === Z)) return na;
                  if (0 === h.lookahead) break;
                }
                h.strstart += h.lookahead;
                h.lookahead = 0;
                var q = h.block_start + p;
                if (
                  ((0 === h.strstart || h.strstart >= q) &&
                    ((h.lookahead = h.strstart - q),
                    (h.strstart = q),
                    Fa(h, !1),
                    0 === h.strm.avail_out)) ||
                  (h.strstart - h.block_start >= h.w_size - Qa &&
                    (Fa(h, !1), 0 === h.strm.avail_out))
                )
                  return na;
              }
              return (
                (h.insert = 0),
                n === $a
                  ? (Fa(h, !0), 0 === h.strm.avail_out ? db : Yb)
                  : (h.strstart > h.block_start && Fa(h, !1), na)
              );
            }),
            new O(4, 4, 8, 4, x),
            new O(4, 5, 16, 8, x),
            new O(4, 6, 32, 32, x),
            new O(4, 4, 16, 16, U),
            new O(8, 16, 32, 32, U),
            new O(8, 16, 128, 128, U),
            new O(8, 32, 128, 256, U),
            new O(32, 128, 258, 1024, U),
            new O(32, 258, 258, 4096, U),
          ];
          L.deflateInit = function (h, n) {
            return Ga(h, n, wc, 15, 8, 0);
          };
          L.deflateInit2 = Ga;
          L.deflateReset = Hc;
          L.deflateResetKeep = Pb;
          L.deflateSetHeader = function (h, n) {
            return h && h.state
              ? 2 !== h.state.wrap
                ? Ca
                : ((h.state.gzhead = n), pb)
              : Ca;
          };
          L.deflate = function (p, v) {
            var D, t;
            if (!p || !p.state || 5 < v || 0 > v) return p ? T(p, Ca) : Ca;
            if (
              ((t = p.state),
              !p.output ||
                (!p.input && 0 !== p.avail_in) ||
                (666 === t.status && v !== $a))
            )
              return T(p, 0 === p.avail_out ? -5 : Ca);
            if (
              ((t.strm = p),
              (D = t.last_flush),
              (t.last_flush = v),
              t.status === Q)
            )
              if (2 === t.wrap)
                (p.adler = 0),
                  n(t, 31),
                  n(t, 139),
                  n(t, 8),
                  t.gzhead
                    ? (n(
                        t,
                        (t.gzhead.text ? 1 : 0) +
                          (t.gzhead.hcrc ? 2 : 0) +
                          (t.gzhead.extra ? 4 : 0) +
                          (t.gzhead.name ? 8 : 0) +
                          (t.gzhead.comment ? 16 : 0)
                      ),
                      n(t, 255 & t.gzhead.time),
                      n(t, (t.gzhead.time >> 8) & 255),
                      n(t, (t.gzhead.time >> 16) & 255),
                      n(t, (t.gzhead.time >> 24) & 255),
                      n(
                        t,
                        9 === t.level
                          ? 2
                          : 2 <= t.strategy || 2 > t.level
                          ? 4
                          : 0
                      ),
                      n(t, 255 & t.gzhead.os),
                      t.gzhead.extra &&
                        t.gzhead.extra.length &&
                        (n(t, 255 & t.gzhead.extra.length),
                        n(t, (t.gzhead.extra.length >> 8) & 255)),
                      t.gzhead.hcrc &&
                        (p.adler = ma(p.adler, t.pending_buf, t.pending, 0)),
                      (t.gzindex = 0),
                      (t.status = 69))
                    : (n(t, 0),
                      n(t, 0),
                      n(t, 0),
                      n(t, 0),
                      n(t, 0),
                      n(
                        t,
                        9 === t.level
                          ? 2
                          : 2 <= t.strategy || 2 > t.level
                          ? 4
                          : 0
                      ),
                      n(t, 3),
                      (t.status = ja));
              else {
                var x = (wc + ((t.w_bits - 8) << 4)) << 8;
                x |=
                  (2 <= t.strategy || 2 > t.level
                    ? 0
                    : 6 > t.level
                    ? 1
                    : 6 === t.level
                    ? 2
                    : 3) << 6;
                0 !== t.strstart && (x |= 32);
                t.status = ja;
                h(t, x + (31 - (x % 31)));
                0 !== t.strstart &&
                  (h(t, p.adler >>> 16), h(t, 65535 & p.adler));
                p.adler = 1;
              }
            if (69 === t.status)
              if (t.gzhead.extra) {
                for (
                  x = t.pending;
                  t.gzindex < (65535 & t.gzhead.extra.length) &&
                  (t.pending !== t.pending_buf_size ||
                    (t.gzhead.hcrc &&
                      t.pending > x &&
                      (p.adler = ma(p.adler, t.pending_buf, t.pending - x, x)),
                    q(p),
                    (x = t.pending),
                    t.pending !== t.pending_buf_size));

                )
                  n(t, 255 & t.gzhead.extra[t.gzindex]), t.gzindex++;
                t.gzhead.hcrc &&
                  t.pending > x &&
                  (p.adler = ma(p.adler, t.pending_buf, t.pending - x, x));
                t.gzindex === t.gzhead.extra.length &&
                  ((t.gzindex = 0), (t.status = 73));
              } else t.status = 73;
            if (73 === t.status)
              if (t.gzhead.name) {
                x = t.pending;
                do {
                  if (
                    t.pending === t.pending_buf_size &&
                    (t.gzhead.hcrc &&
                      t.pending > x &&
                      (p.adler = ma(p.adler, t.pending_buf, t.pending - x, x)),
                    q(p),
                    (x = t.pending),
                    t.pending === t.pending_buf_size)
                  ) {
                    var z = 1;
                    break;
                  }
                  z =
                    t.gzindex < t.gzhead.name.length
                      ? 255 & t.gzhead.name.charCodeAt(t.gzindex++)
                      : 0;
                  n(t, z);
                } while (0 !== z);
                t.gzhead.hcrc &&
                  t.pending > x &&
                  (p.adler = ma(p.adler, t.pending_buf, t.pending - x, x));
                0 === z && ((t.gzindex = 0), (t.status = 91));
              } else t.status = 91;
            if (91 === t.status)
              if (t.gzhead.comment) {
                x = t.pending;
                do {
                  if (
                    t.pending === t.pending_buf_size &&
                    (t.gzhead.hcrc &&
                      t.pending > x &&
                      (p.adler = ma(p.adler, t.pending_buf, t.pending - x, x)),
                    q(p),
                    (x = t.pending),
                    t.pending === t.pending_buf_size)
                  ) {
                    z = 1;
                    break;
                  }
                  z =
                    t.gzindex < t.gzhead.comment.length
                      ? 255 & t.gzhead.comment.charCodeAt(t.gzindex++)
                      : 0;
                  n(t, z);
                } while (0 !== z);
                t.gzhead.hcrc &&
                  t.pending > x &&
                  (p.adler = ma(p.adler, t.pending_buf, t.pending - x, x));
                0 === z && (t.status = 103);
              } else t.status = 103;
            if (
              (103 === t.status &&
                (t.gzhead.hcrc
                  ? (t.pending + 2 > t.pending_buf_size && q(p),
                    t.pending + 2 <= t.pending_buf_size &&
                      (n(t, 255 & p.adler),
                      n(t, (p.adler >> 8) & 255),
                      (p.adler = 0),
                      (t.status = ja)))
                  : (t.status = ja)),
              0 !== t.pending)
            ) {
              if ((q(p), 0 === p.avail_out)) return (t.last_flush = -1), pb;
            } else if (
              0 === p.avail_in &&
              (v << 1) - (4 < v ? 9 : 0) <= (D << 1) - (4 < D ? 9 : 0) &&
              v !== $a
            )
              return T(p, -5);
            if (666 === t.status && 0 !== p.avail_in) return T(p, -5);
            if (
              0 !== p.avail_in ||
              0 !== t.lookahead ||
              (v !== Z && 666 !== t.status)
            ) {
              if (2 === t.strategy)
                a: {
                  for (var B; ; ) {
                    if (0 === t.lookahead && (w(t), 0 === t.lookahead)) {
                      if (v === Z) {
                        var I = na;
                        break a;
                      }
                      break;
                    }
                    if (
                      ((t.match_length = 0),
                      (B = F._tr_tally(t, 0, t.window[t.strstart])),
                      t.lookahead--,
                      t.strstart++,
                      B && (Fa(t, !1), 0 === t.strm.avail_out))
                    ) {
                      I = na;
                      break a;
                    }
                  }
                  I =
                    ((t.insert = 0),
                    v === $a
                      ? (Fa(t, !0), 0 === t.strm.avail_out ? db : Yb)
                      : t.last_lit && (Fa(t, !1), 0 === t.strm.avail_out)
                      ? na
                      : cd);
                }
              else if (3 === t.strategy)
                a: {
                  var H, L;
                  for (B = t.window; ; ) {
                    if (t.lookahead <= Xa) {
                      if ((w(t), t.lookahead <= Xa && v === Z)) {
                        I = na;
                        break a;
                      }
                      if (0 === t.lookahead) break;
                    }
                    if (
                      ((t.match_length = 0),
                      t.lookahead >= pa &&
                        0 < t.strstart &&
                        ((L = t.strstart - 1),
                        (H = B[L]),
                        H === B[++L] && H === B[++L] && H === B[++L]))
                    ) {
                      for (
                        D = t.strstart + Xa;
                        H === B[++L] &&
                        H === B[++L] &&
                        H === B[++L] &&
                        H === B[++L] &&
                        H === B[++L] &&
                        H === B[++L] &&
                        H === B[++L] &&
                        H === B[++L] &&
                        L < D;

                      );
                      t.match_length = Xa - (D - L);
                      t.match_length > t.lookahead &&
                        (t.match_length = t.lookahead);
                    }
                    if (
                      (t.match_length >= pa
                        ? ((I = F._tr_tally(t, 1, t.match_length - pa)),
                          (t.lookahead -= t.match_length),
                          (t.strstart += t.match_length),
                          (t.match_length = 0))
                        : ((I = F._tr_tally(t, 0, t.window[t.strstart])),
                          t.lookahead--,
                          t.strstart++),
                      I && (Fa(t, !1), 0 === t.strm.avail_out))
                    ) {
                      I = na;
                      break a;
                    }
                  }
                  I =
                    ((t.insert = 0),
                    v === $a
                      ? (Fa(t, !0), 0 === t.strm.avail_out ? db : Yb)
                      : t.last_lit && (Fa(t, !1), 0 === t.strm.avail_out)
                      ? na
                      : cd);
                }
              else I = kb[t.level].func(t, v);
              if (
                ((I !== db && I !== Yb) || (t.status = 666),
                I === na || I === db)
              )
                return 0 === p.avail_out && (t.last_flush = -1), pb;
              if (
                I === cd &&
                (1 === v
                  ? F._tr_align(t)
                  : 5 !== v &&
                    (F._tr_stored_block(t, 0, 0, !1),
                    3 === v &&
                      (ca(t.head),
                      0 === t.lookahead &&
                        ((t.strstart = 0),
                        (t.block_start = 0),
                        (t.insert = 0)))),
                q(p),
                0 === p.avail_out)
              )
                return (t.last_flush = -1), pb;
            }
            return v !== $a
              ? pb
              : 0 >= t.wrap
              ? 1
              : (2 === t.wrap
                  ? (n(t, 255 & p.adler),
                    n(t, (p.adler >> 8) & 255),
                    n(t, (p.adler >> 16) & 255),
                    n(t, (p.adler >> 24) & 255),
                    n(t, 255 & p.total_in),
                    n(t, (p.total_in >> 8) & 255),
                    n(t, (p.total_in >> 16) & 255),
                    n(t, (p.total_in >> 24) & 255))
                  : (h(t, p.adler >>> 16), h(t, 65535 & p.adler)),
                q(p),
                0 < t.wrap && (t.wrap = -t.wrap),
                0 !== t.pending ? pb : 1);
          };
          L.deflateEnd = function (h) {
            var n;
            return h && h.state
              ? ((n = h.state.status),
                n !== Q &&
                69 !== n &&
                73 !== n &&
                91 !== n &&
                103 !== n &&
                n !== ja &&
                666 !== n
                  ? T(h, Ca)
                  : ((h.state = null), n === ja ? T(h, -3) : pb))
              : Ca;
          };
          L.deflateSetDictionary = function (h, n) {
            var p, q, v;
            var x = n.length;
            if (
              !h ||
              !h.state ||
              ((p = h.state),
              (q = p.wrap),
              2 === q || (1 === q && p.status !== Q) || p.lookahead)
            )
              return Ca;
            1 === q && (h.adler = wa(h.adler, n, x, 0));
            p.wrap = 0;
            x >= p.w_size &&
              (0 === q &&
                (ca(p.head),
                (p.strstart = 0),
                (p.block_start = 0),
                (p.insert = 0)),
              (v = new Fb.Buf8(p.w_size)),
              Fb.arraySet(v, n, x - p.w_size, p.w_size, 0),
              (n = v),
              (x = p.w_size));
            v = h.avail_in;
            var z = h.next_in;
            var B = h.input;
            h.avail_in = x;
            h.next_in = 0;
            h.input = n;
            for (w(p); p.lookahead >= pa; ) {
              n = p.strstart;
              x = p.lookahead - (pa - 1);
              do
                (p.ins_h =
                  ((p.ins_h << p.hash_shift) ^ p.window[n + pa - 1]) &
                  p.hash_mask),
                  (p.prev[n & p.w_mask] = p.head[p.ins_h]),
                  (p.head[p.ins_h] = n),
                  n++;
              while (--x);
              p.strstart = n;
              p.lookahead = pa - 1;
              w(p);
            }
            return (
              (p.strstart += p.lookahead),
              (p.block_start = p.strstart),
              (p.insert = p.lookahead),
              (p.lookahead = 0),
              (p.match_length = p.prev_length = pa - 1),
              (p.match_available = 0),
              (h.next_in = z),
              (h.input = B),
              (h.avail_in = v),
              (p.wrap = q),
              pb
            );
          };
          L.deflateInfo = "pako deflate (from Nodeca project)";
        },
        {
          "../utils/common": 3,
          "./adler32": 5,
          "./crc32": 7,
          "./messages": 13,
          "./trees": 14,
        },
      ],
      9: [
        function (v, H, L) {
          H.exports = function () {
            this.os = this.xflags = this.time = this.text = 0;
            this.extra = null;
            this.extra_len = 0;
            this.comment = this.name = "";
            this.hcrc = 0;
            this.done = !1;
          };
        },
        {},
      ],
      10: [
        function (v, H, L) {
          H.exports = function (v, H) {
            var q, L, n;
            var h = v.state;
            var p = v.next_in;
            var w = v.input;
            var x = p + (v.avail_in - 5);
            var U = v.next_out;
            var O = v.output;
            H = U - (H - v.avail_out);
            var T = U + (v.avail_out - 257);
            var ca = h.dmax;
            var Hc = h.wsize;
            var Ga = h.whave;
            var Fb = h.wnext;
            var F = h.window;
            var wa = h.hold;
            var ma = h.bits;
            var nd = h.lencode;
            var Z = h.distcode;
            var $a = (1 << h.lenbits) - 1;
            var pb = (1 << h.distbits) - 1;
            a: do {
              15 > ma &&
                ((wa += w[p++] << ma),
                (ma += 8),
                (wa += w[p++] << ma),
                (ma += 8));
              var Ca = nd[wa & $a];
              b: for (;;) {
                if (
                  ((q = Ca >>> 24),
                  (wa >>>= q),
                  (ma -= q),
                  (q = (Ca >>> 16) & 255),
                  0 === q)
                )
                  O[U++] = 65535 & Ca;
                else {
                  if (!(16 & q)) {
                    if (0 === (64 & q)) {
                      Ca = nd[(65535 & Ca) + (wa & ((1 << q) - 1))];
                      continue b;
                    }
                    if (32 & q) {
                      h.mode = 12;
                      break a;
                    }
                    v.msg = "invalid literal/length code";
                    h.mode = 30;
                    break a;
                  }
                  var I = 65535 & Ca;
                  (q &= 15) &&
                    (ma < q && ((wa += w[p++] << ma), (ma += 8)),
                    (I += wa & ((1 << q) - 1)),
                    (wa >>>= q),
                    (ma -= q));
                  15 > ma &&
                    ((wa += w[p++] << ma),
                    (ma += 8),
                    (wa += w[p++] << ma),
                    (ma += 8));
                  Ca = Z[wa & pb];
                  c: for (;;) {
                    if (
                      ((q = Ca >>> 24),
                      (wa >>>= q),
                      (ma -= q),
                      (q = (Ca >>> 16) & 255),
                      !(16 & q))
                    ) {
                      if (0 === (64 & q)) {
                        Ca = Z[(65535 & Ca) + (wa & ((1 << q) - 1))];
                        continue c;
                      }
                      v.msg = "invalid distance code";
                      h.mode = 30;
                      break a;
                    }
                    if (
                      ((L = 65535 & Ca),
                      (q &= 15),
                      ma < q &&
                        ((wa += w[p++] << ma),
                        (ma += 8),
                        ma < q && ((wa += w[p++] << ma), (ma += 8))),
                      (L += wa & ((1 << q) - 1)),
                      L > ca)
                    ) {
                      v.msg = "invalid distance too far back";
                      h.mode = 30;
                      break a;
                    }
                    if (((wa >>>= q), (ma -= q), (q = U - H), L > q)) {
                      if (((q = L - q), q > Ga && h.sane)) {
                        v.msg = "invalid distance too far back";
                        h.mode = 30;
                        break a;
                      }
                      if (((Ca = 0), (n = F), 0 === Fb)) {
                        if (((Ca += Hc - q), q < I)) {
                          I -= q;
                          do O[U++] = F[Ca++];
                          while (--q);
                          Ca = U - L;
                          n = O;
                        }
                      } else if (Fb < q) {
                        if (((Ca += Hc + Fb - q), (q -= Fb), q < I)) {
                          I -= q;
                          do O[U++] = F[Ca++];
                          while (--q);
                          if (((Ca = 0), Fb < I)) {
                            q = Fb;
                            I -= q;
                            do O[U++] = F[Ca++];
                            while (--q);
                            Ca = U - L;
                            n = O;
                          }
                        }
                      } else if (((Ca += Fb - q), q < I)) {
                        I -= q;
                        do O[U++] = F[Ca++];
                        while (--q);
                        Ca = U - L;
                        n = O;
                      }
                      for (; 2 < I; )
                        (O[U++] = n[Ca++]),
                          (O[U++] = n[Ca++]),
                          (O[U++] = n[Ca++]),
                          (I -= 3);
                      I && ((O[U++] = n[Ca++]), 1 < I && (O[U++] = n[Ca++]));
                    } else {
                      Ca = U - L;
                      do
                        (O[U++] = O[Ca++]),
                          (O[U++] = O[Ca++]),
                          (O[U++] = O[Ca++]),
                          (I -= 3);
                      while (2 < I);
                      I && ((O[U++] = O[Ca++]), 1 < I && (O[U++] = O[Ca++]));
                    }
                    break;
                  }
                }
                break;
              }
            } while (p < x && U < T);
            I = ma >> 3;
            p -= I;
            ma -= I << 3;
            v.next_in = p;
            v.next_out = U;
            v.avail_in = p < x ? 5 + (x - p) : 5 - (p - x);
            v.avail_out = U < T ? 257 + (T - U) : 257 - (U - T);
            h.hold = wa & ((1 << ma) - 1);
            h.bits = ma;
          };
        },
        {},
      ],
      11: [
        function (v, H, L) {
          function T(h) {
            return (
              ((h >>> 24) & 255) +
              ((h >>> 8) & 65280) +
              ((65280 & h) << 8) +
              ((255 & h) << 24)
            );
          }
          function ca() {
            this.mode = 0;
            this.last = !1;
            this.wrap = 0;
            this.havedict = !1;
            this.total = this.check = this.dmax = this.flags = 0;
            this.head = null;
            this.wnext = this.whave = this.wsize = this.wbits = 0;
            this.window = null;
            this.extra = this.offset = this.length = this.bits = this.hold = 0;
            this.distcode = this.lencode = null;
            this.have =
              this.ndist =
              this.nlen =
              this.ncode =
              this.distbits =
              this.lenbits =
                0;
            this.next = null;
            this.lens = new U.Buf16(320);
            this.work = new U.Buf16(288);
            this.distdyn = this.lendyn = null;
            this.was = this.back = this.sane = 0;
          }
          function q(h) {
            var n;
            return h && h.state
              ? ((n = h.state),
                (h.total_in = h.total_out = n.total = 0),
                (h.msg = ""),
                n.wrap && (h.adler = 1 & n.wrap),
                (n.mode = F),
                (n.last = 0),
                (n.havedict = 0),
                (n.dmax = 32768),
                (n.head = null),
                (n.hold = 0),
                (n.bits = 0),
                (n.lencode = n.lendyn = new U.Buf32(wa)),
                (n.distcode = n.distdyn = new U.Buf32(ma)),
                (n.sane = 1),
                (n.back = -1),
                Ga)
              : Fb;
          }
          function Fa(h) {
            var n;
            return h && h.state
              ? ((n = h.state),
                (n.wsize = 0),
                (n.whave = 0),
                (n.wnext = 0),
                q(h))
              : Fb;
          }
          function n(h, n) {
            var p, q;
            return h && h.state
              ? ((q = h.state),
                0 > n
                  ? ((p = 0), (n = -n))
                  : ((p = (n >> 4) + 1), 48 > n && (n &= 15)),
                n && (8 > n || 15 < n)
                  ? Fb
                  : (null !== q.window && q.wbits !== n && (q.window = null),
                    (q.wrap = p),
                    (q.wbits = n),
                    Fa(h)))
              : Fb;
          }
          function h(h, p) {
            var q, w;
            return h
              ? ((w = new ca()),
                (h.state = w),
                (w.window = null),
                (q = n(h, p)),
                q !== Ga && (h.state = null),
                q)
              : Fb;
          }
          function p(h, n, p, q) {
            var w;
            h = h.state;
            return (
              null === h.window &&
                ((h.wsize = 1 << h.wbits),
                (h.wnext = 0),
                (h.whave = 0),
                (h.window = new U.Buf8(h.wsize))),
              q >= h.wsize
                ? (U.arraySet(h.window, n, p - h.wsize, h.wsize, 0),
                  (h.wnext = 0),
                  (h.whave = h.wsize))
                : ((w = h.wsize - h.wnext),
                  w > q && (w = q),
                  U.arraySet(h.window, n, p - q, w, h.wnext),
                  (q -= w),
                  q
                    ? (U.arraySet(h.window, n, p - q, q, 0),
                      (h.wnext = q),
                      (h.whave = h.wsize))
                    : ((h.wnext += w),
                      h.wnext === h.wsize && (h.wnext = 0),
                      h.whave < h.wsize && (h.whave += w))),
              0
            );
          }
          var w,
            x,
            U = v("../utils/common"),
            O = v("./adler32"),
            Ha = v("./crc32"),
            Pb = v("./inffast"),
            Hc = v("./inftrees"),
            Ga = 0,
            Fb = -2,
            F = 1,
            wa = 852,
            ma = 592,
            nd = !0;
          L.inflateReset = Fa;
          L.inflateReset2 = n;
          L.inflateResetKeep = q;
          L.inflateInit = function (n) {
            return h(n, 15);
          };
          L.inflateInit2 = h;
          L.inflate = function (h, n) {
            var q,
              v,
              I,
              H,
              L,
              Z,
              ca,
              ma = 0,
              wa = new U.Buf8(4),
              Fa = [
                16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1,
                15,
              ];
            if (!h || !h.state || !h.output || (!h.input && 0 !== h.avail_in))
              return Fb;
            var B = h.state;
            12 === B.mode && (B.mode = 13);
            var $a = h.next_out;
            var Dc = h.output;
            var pa = h.avail_out;
            var Xa = h.next_in;
            var Qa = h.input;
            var Q = h.avail_in;
            var ja = B.hold;
            var na = B.bits;
            var cd = Q;
            var db = pa;
            var Yb = Ga;
            a: for (;;)
              switch (B.mode) {
                case F:
                  if (0 === B.wrap) {
                    B.mode = 13;
                    break;
                  }
                  for (; 16 > na; ) {
                    if (0 === Q) break a;
                    Q--;
                    ja += Qa[Xa++] << na;
                    na += 8;
                  }
                  if (2 & B.wrap && 35615 === ja) {
                    B.check = 0;
                    wa[0] = 255 & ja;
                    wa[1] = (ja >>> 8) & 255;
                    B.check = Ha(B.check, wa, 2, 0);
                    na = ja = 0;
                    B.mode = 2;
                    break;
                  }
                  if (
                    ((B.flags = 0),
                    B.head && (B.head.done = !1),
                    !(1 & B.wrap) || (((255 & ja) << 8) + (ja >> 8)) % 31)
                  ) {
                    h.msg = "incorrect header check";
                    B.mode = 30;
                    break;
                  }
                  if (8 !== (15 & ja)) {
                    h.msg = "unknown compression method";
                    B.mode = 30;
                    break;
                  }
                  if (
                    ((ja >>>= 4), (na -= 4), (Z = (15 & ja) + 8), 0 === B.wbits)
                  )
                    B.wbits = Z;
                  else if (Z > B.wbits) {
                    h.msg = "invalid window size";
                    B.mode = 30;
                    break;
                  }
                  B.dmax = 1 << Z;
                  h.adler = B.check = 1;
                  B.mode = 512 & ja ? 10 : 12;
                  na = ja = 0;
                  break;
                case 2:
                  for (; 16 > na; ) {
                    if (0 === Q) break a;
                    Q--;
                    ja += Qa[Xa++] << na;
                    na += 8;
                  }
                  if (((B.flags = ja), 8 !== (255 & B.flags))) {
                    h.msg = "unknown compression method";
                    B.mode = 30;
                    break;
                  }
                  if (57344 & B.flags) {
                    h.msg = "unknown header flags set";
                    B.mode = 30;
                    break;
                  }
                  B.head && (B.head.text = (ja >> 8) & 1);
                  512 & B.flags &&
                    ((wa[0] = 255 & ja),
                    (wa[1] = (ja >>> 8) & 255),
                    (B.check = Ha(B.check, wa, 2, 0)));
                  na = ja = 0;
                  B.mode = 3;
                case 3:
                  for (; 32 > na; ) {
                    if (0 === Q) break a;
                    Q--;
                    ja += Qa[Xa++] << na;
                    na += 8;
                  }
                  B.head && (B.head.time = ja);
                  512 & B.flags &&
                    ((wa[0] = 255 & ja),
                    (wa[1] = (ja >>> 8) & 255),
                    (wa[2] = (ja >>> 16) & 255),
                    (wa[3] = (ja >>> 24) & 255),
                    (B.check = Ha(B.check, wa, 4, 0)));
                  na = ja = 0;
                  B.mode = 4;
                case 4:
                  for (; 16 > na; ) {
                    if (0 === Q) break a;
                    Q--;
                    ja += Qa[Xa++] << na;
                    na += 8;
                  }
                  B.head && ((B.head.xflags = 255 & ja), (B.head.os = ja >> 8));
                  512 & B.flags &&
                    ((wa[0] = 255 & ja),
                    (wa[1] = (ja >>> 8) & 255),
                    (B.check = Ha(B.check, wa, 2, 0)));
                  na = ja = 0;
                  B.mode = 5;
                case 5:
                  if (1024 & B.flags) {
                    for (; 16 > na; ) {
                      if (0 === Q) break a;
                      Q--;
                      ja += Qa[Xa++] << na;
                      na += 8;
                    }
                    B.length = ja;
                    B.head && (B.head.extra_len = ja);
                    512 & B.flags &&
                      ((wa[0] = 255 & ja),
                      (wa[1] = (ja >>> 8) & 255),
                      (B.check = Ha(B.check, wa, 2, 0)));
                    na = ja = 0;
                  } else B.head && (B.head.extra = null);
                  B.mode = 6;
                case 6:
                  if (
                    1024 & B.flags &&
                    ((q = B.length),
                    q > Q && (q = Q),
                    q &&
                      (B.head &&
                        ((Z = B.head.extra_len - B.length),
                        B.head.extra ||
                          (B.head.extra = Array(B.head.extra_len)),
                        U.arraySet(B.head.extra, Qa, Xa, q, Z)),
                      512 & B.flags && (B.check = Ha(B.check, Qa, q, Xa)),
                      (Q -= q),
                      (Xa += q),
                      (B.length -= q)),
                    B.length)
                  )
                    break a;
                  B.length = 0;
                  B.mode = 7;
                case 7:
                  if (2048 & B.flags) {
                    if (0 === Q) break a;
                    q = 0;
                    do
                      (Z = Qa[Xa + q++]),
                        B.head &&
                          Z &&
                          65536 > B.length &&
                          (B.head.name += String.fromCharCode(Z));
                    while (Z && q < Q);
                    if (
                      (512 & B.flags && (B.check = Ha(B.check, Qa, q, Xa)),
                      (Q -= q),
                      (Xa += q),
                      Z)
                    )
                      break a;
                  } else B.head && (B.head.name = null);
                  B.length = 0;
                  B.mode = 8;
                case 8:
                  if (4096 & B.flags) {
                    if (0 === Q) break a;
                    q = 0;
                    do
                      (Z = Qa[Xa + q++]),
                        B.head &&
                          Z &&
                          65536 > B.length &&
                          (B.head.comment += String.fromCharCode(Z));
                    while (Z && q < Q);
                    if (
                      (512 & B.flags && (B.check = Ha(B.check, Qa, q, Xa)),
                      (Q -= q),
                      (Xa += q),
                      Z)
                    )
                      break a;
                  } else B.head && (B.head.comment = null);
                  B.mode = 9;
                case 9:
                  if (512 & B.flags) {
                    for (; 16 > na; ) {
                      if (0 === Q) break a;
                      Q--;
                      ja += Qa[Xa++] << na;
                      na += 8;
                    }
                    if (ja !== (65535 & B.check)) {
                      h.msg = "header crc mismatch";
                      B.mode = 30;
                      break;
                    }
                    na = ja = 0;
                  }
                  B.head &&
                    ((B.head.hcrc = (B.flags >> 9) & 1), (B.head.done = !0));
                  h.adler = B.check = 0;
                  B.mode = 12;
                  break;
                case 10:
                  for (; 32 > na; ) {
                    if (0 === Q) break a;
                    Q--;
                    ja += Qa[Xa++] << na;
                    na += 8;
                  }
                  h.adler = B.check = T(ja);
                  na = ja = 0;
                  B.mode = 11;
                case 11:
                  if (0 === B.havedict)
                    return (
                      (h.next_out = $a),
                      (h.avail_out = pa),
                      (h.next_in = Xa),
                      (h.avail_in = Q),
                      (B.hold = ja),
                      (B.bits = na),
                      2
                    );
                  h.adler = B.check = 1;
                  B.mode = 12;
                case 12:
                  if (5 === n || 6 === n) break a;
                case 13:
                  if (B.last) {
                    ja >>>= 7 & na;
                    na -= 7 & na;
                    B.mode = 27;
                    break;
                  }
                  for (; 3 > na; ) {
                    if (0 === Q) break a;
                    Q--;
                    ja += Qa[Xa++] << na;
                    na += 8;
                  }
                  switch (((B.last = 1 & ja), (ja >>>= 1), --na, 3 & ja)) {
                    case 0:
                      B.mode = 14;
                      break;
                    case 1:
                      var kb = B;
                      if (nd) {
                        w = new U.Buf32(512);
                        x = new U.Buf32(32);
                        for (I = 0; 144 > I; ) kb.lens[I++] = 8;
                        for (; 256 > I; ) kb.lens[I++] = 9;
                        for (; 280 > I; ) kb.lens[I++] = 7;
                        for (; 288 > I; ) kb.lens[I++] = 8;
                        Hc(1, kb.lens, 0, 288, w, 0, kb.work, { bits: 9 });
                        for (I = 0; 32 > I; ) kb.lens[I++] = 5;
                        Hc(2, kb.lens, 0, 32, x, 0, kb.work, { bits: 5 });
                        nd = !1;
                      }
                      kb.lencode = w;
                      kb.lenbits = 9;
                      kb.distcode = x;
                      kb.distbits = 5;
                      if (((B.mode = 20), 6 === n)) {
                        ja >>>= 2;
                        na -= 2;
                        break a;
                      }
                      break;
                    case 2:
                      B.mode = 17;
                      break;
                    case 3:
                      (h.msg = "invalid block type"), (B.mode = 30);
                  }
                  ja >>>= 2;
                  na -= 2;
                  break;
                case 14:
                  ja >>>= 7 & na;
                  for (na -= 7 & na; 32 > na; ) {
                    if (0 === Q) break a;
                    Q--;
                    ja += Qa[Xa++] << na;
                    na += 8;
                  }
                  if ((65535 & ja) !== ((ja >>> 16) ^ 65535)) {
                    h.msg = "invalid stored block lengths";
                    B.mode = 30;
                    break;
                  }
                  if (
                    ((B.length = 65535 & ja),
                    (ja = 0),
                    (na = 0),
                    (B.mode = 15),
                    6 === n)
                  )
                    break a;
                case 15:
                  B.mode = 16;
                case 16:
                  if ((q = B.length)) {
                    if ((q > Q && (q = Q), q > pa && (q = pa), 0 === q))
                      break a;
                    U.arraySet(Dc, Qa, Xa, q, $a);
                    Q -= q;
                    Xa += q;
                    pa -= q;
                    $a += q;
                    B.length -= q;
                    break;
                  }
                  B.mode = 12;
                  break;
                case 17:
                  for (; 14 > na; ) {
                    if (0 === Q) break a;
                    Q--;
                    ja += Qa[Xa++] << na;
                    na += 8;
                  }
                  if (
                    ((B.nlen = (31 & ja) + 257),
                    (ja >>>= 5),
                    (na -= 5),
                    (B.ndist = (31 & ja) + 1),
                    (ja >>>= 5),
                    (na -= 5),
                    (B.ncode = (15 & ja) + 4),
                    (ja >>>= 4),
                    (na -= 4),
                    286 < B.nlen || 30 < B.ndist)
                  ) {
                    h.msg = "too many length or distance symbols";
                    B.mode = 30;
                    break;
                  }
                  B.have = 0;
                  B.mode = 18;
                case 18:
                  for (; B.have < B.ncode; ) {
                    for (; 3 > na; ) {
                      if (0 === Q) break a;
                      Q--;
                      ja += Qa[Xa++] << na;
                      na += 8;
                    }
                    B.lens[Fa[B.have++]] = 7 & ja;
                    ja >>>= 3;
                    na -= 3;
                  }
                  for (; 19 > B.have; ) B.lens[Fa[B.have++]] = 0;
                  if (
                    ((B.lencode = B.lendyn),
                    (B.lenbits = 7),
                    (ca = { bits: B.lenbits }),
                    (Yb = Hc(0, B.lens, 0, 19, B.lencode, 0, B.work, ca)),
                    (B.lenbits = ca.bits),
                    Yb)
                  ) {
                    h.msg = "invalid code lengths set";
                    B.mode = 30;
                    break;
                  }
                  B.have = 0;
                  B.mode = 19;
                case 19:
                  for (; B.have < B.nlen + B.ndist; ) {
                    for (
                      ;
                      (ma = B.lencode[ja & ((1 << B.lenbits) - 1)]),
                        (H = ma >>> 24),
                        (kb = 65535 & ma),
                        !(H <= na);

                    ) {
                      if (0 === Q) break a;
                      Q--;
                      ja += Qa[Xa++] << na;
                      na += 8;
                    }
                    if (16 > kb)
                      (ja >>>= H), (na -= H), (B.lens[B.have++] = kb);
                    else {
                      if (16 === kb) {
                        for (I = H + 2; na < I; ) {
                          if (0 === Q) break a;
                          Q--;
                          ja += Qa[Xa++] << na;
                          na += 8;
                        }
                        if (((ja >>>= H), (na -= H), 0 === B.have)) {
                          h.msg = "invalid bit length repeat";
                          B.mode = 30;
                          break;
                        }
                        Z = B.lens[B.have - 1];
                        q = 3 + (3 & ja);
                        ja >>>= 2;
                        na -= 2;
                      } else if (17 === kb) {
                        for (I = H + 3; na < I; ) {
                          if (0 === Q) break a;
                          Q--;
                          ja += Qa[Xa++] << na;
                          na += 8;
                        }
                        ja >>>= H;
                        na -= H;
                        Z = 0;
                        q = 3 + (7 & ja);
                        ja >>>= 3;
                        na -= 3;
                      } else {
                        for (I = H + 7; na < I; ) {
                          if (0 === Q) break a;
                          Q--;
                          ja += Qa[Xa++] << na;
                          na += 8;
                        }
                        ja >>>= H;
                        na -= H;
                        Z = 0;
                        q = 11 + (127 & ja);
                        ja >>>= 7;
                        na -= 7;
                      }
                      if (B.have + q > B.nlen + B.ndist) {
                        h.msg = "invalid bit length repeat";
                        B.mode = 30;
                        break;
                      }
                      for (; q--; ) B.lens[B.have++] = Z;
                    }
                  }
                  if (30 === B.mode) break;
                  if (0 === B.lens[256]) {
                    h.msg = "invalid code -- missing end-of-block";
                    B.mode = 30;
                    break;
                  }
                  if (
                    ((B.lenbits = 9),
                    (ca = { bits: B.lenbits }),
                    (Yb = Hc(1, B.lens, 0, B.nlen, B.lencode, 0, B.work, ca)),
                    (B.lenbits = ca.bits),
                    Yb)
                  ) {
                    h.msg = "invalid literal/lengths set";
                    B.mode = 30;
                    break;
                  }
                  if (
                    ((B.distbits = 6),
                    (B.distcode = B.distdyn),
                    (ca = { bits: B.distbits }),
                    (Yb = Hc(
                      2,
                      B.lens,
                      B.nlen,
                      B.ndist,
                      B.distcode,
                      0,
                      B.work,
                      ca
                    )),
                    (B.distbits = ca.bits),
                    Yb)
                  ) {
                    h.msg = "invalid distances set";
                    B.mode = 30;
                    break;
                  }
                  if (((B.mode = 20), 6 === n)) break a;
                case 20:
                  B.mode = 21;
                case 21:
                  if (6 <= Q && 258 <= pa) {
                    h.next_out = $a;
                    h.avail_out = pa;
                    h.next_in = Xa;
                    h.avail_in = Q;
                    B.hold = ja;
                    B.bits = na;
                    Pb(h, db);
                    $a = h.next_out;
                    Dc = h.output;
                    pa = h.avail_out;
                    Xa = h.next_in;
                    Qa = h.input;
                    Q = h.avail_in;
                    ja = B.hold;
                    na = B.bits;
                    12 === B.mode && (B.back = -1);
                    break;
                  }
                  for (
                    B.back = 0;
                    (ma = B.lencode[ja & ((1 << B.lenbits) - 1)]),
                      (H = ma >>> 24),
                      (I = (ma >>> 16) & 255),
                      (kb = 65535 & ma),
                      !(H <= na);

                  ) {
                    if (0 === Q) break a;
                    Q--;
                    ja += Qa[Xa++] << na;
                    na += 8;
                  }
                  if (I && 0 === (240 & I)) {
                    var z = H;
                    var hb = I;
                    for (
                      L = kb;
                      (ma = B.lencode[L + ((ja & ((1 << (z + hb)) - 1)) >> z)]),
                        (H = ma >>> 24),
                        (I = (ma >>> 16) & 255),
                        (kb = 65535 & ma),
                        !(z + H <= na);

                    ) {
                      if (0 === Q) break a;
                      Q--;
                      ja += Qa[Xa++] << na;
                      na += 8;
                    }
                    ja >>>= z;
                    na -= z;
                    B.back += z;
                  }
                  if (
                    ((ja >>>= H),
                    (na -= H),
                    (B.back += H),
                    (B.length = kb),
                    0 === I)
                  ) {
                    B.mode = 26;
                    break;
                  }
                  if (32 & I) {
                    B.back = -1;
                    B.mode = 12;
                    break;
                  }
                  if (64 & I) {
                    h.msg = "invalid literal/length code";
                    B.mode = 30;
                    break;
                  }
                  B.extra = 15 & I;
                  B.mode = 22;
                case 22:
                  if (B.extra) {
                    for (I = B.extra; na < I; ) {
                      if (0 === Q) break a;
                      Q--;
                      ja += Qa[Xa++] << na;
                      na += 8;
                    }
                    B.length += ja & ((1 << B.extra) - 1);
                    ja >>>= B.extra;
                    na -= B.extra;
                    B.back += B.extra;
                  }
                  B.was = B.length;
                  B.mode = 23;
                case 23:
                  for (
                    ;
                    (ma = B.distcode[ja & ((1 << B.distbits) - 1)]),
                      (H = ma >>> 24),
                      (I = (ma >>> 16) & 255),
                      (kb = 65535 & ma),
                      !(H <= na);

                  ) {
                    if (0 === Q) break a;
                    Q--;
                    ja += Qa[Xa++] << na;
                    na += 8;
                  }
                  if (0 === (240 & I)) {
                    z = H;
                    hb = I;
                    for (
                      L = kb;
                      (ma =
                        B.distcode[L + ((ja & ((1 << (z + hb)) - 1)) >> z)]),
                        (H = ma >>> 24),
                        (I = (ma >>> 16) & 255),
                        (kb = 65535 & ma),
                        !(z + H <= na);

                    ) {
                      if (0 === Q) break a;
                      Q--;
                      ja += Qa[Xa++] << na;
                      na += 8;
                    }
                    ja >>>= z;
                    na -= z;
                    B.back += z;
                  }
                  if (((ja >>>= H), (na -= H), (B.back += H), 64 & I)) {
                    h.msg = "invalid distance code";
                    B.mode = 30;
                    break;
                  }
                  B.offset = kb;
                  B.extra = 15 & I;
                  B.mode = 24;
                case 24:
                  if (B.extra) {
                    for (I = B.extra; na < I; ) {
                      if (0 === Q) break a;
                      Q--;
                      ja += Qa[Xa++] << na;
                      na += 8;
                    }
                    B.offset += ja & ((1 << B.extra) - 1);
                    ja >>>= B.extra;
                    na -= B.extra;
                    B.back += B.extra;
                  }
                  if (B.offset > B.dmax) {
                    h.msg = "invalid distance too far back";
                    B.mode = 30;
                    break;
                  }
                  B.mode = 25;
                case 25:
                  if (0 === pa) break a;
                  if (((q = db - pa), B.offset > q)) {
                    if (((q = B.offset - q), q > B.whave && B.sane)) {
                      h.msg = "invalid distance too far back";
                      B.mode = 30;
                      break;
                    }
                    q > B.wnext
                      ? ((q -= B.wnext), (v = B.wsize - q))
                      : (v = B.wnext - q);
                    q > B.length && (q = B.length);
                    I = B.window;
                  } else (I = Dc), (v = $a - B.offset), (q = B.length);
                  q > pa && (q = pa);
                  pa -= q;
                  B.length -= q;
                  do Dc[$a++] = I[v++];
                  while (--q);
                  0 === B.length && (B.mode = 21);
                  break;
                case 26:
                  if (0 === pa) break a;
                  Dc[$a++] = B.length;
                  pa--;
                  B.mode = 21;
                  break;
                case 27:
                  if (B.wrap) {
                    for (; 32 > na; ) {
                      if (0 === Q) break a;
                      Q--;
                      ja |= Qa[Xa++] << na;
                      na += 8;
                    }
                    if (
                      ((db -= pa),
                      (h.total_out += db),
                      (B.total += db),
                      db &&
                        (h.adler = B.check =
                          B.flags
                            ? Ha(B.check, Dc, db, $a - db)
                            : O(B.check, Dc, db, $a - db)),
                      (db = pa),
                      (B.flags ? ja : T(ja)) !== B.check)
                    ) {
                      h.msg = "incorrect data check";
                      B.mode = 30;
                      break;
                    }
                    na = ja = 0;
                  }
                  B.mode = 28;
                case 28:
                  if (B.wrap && B.flags) {
                    for (; 32 > na; ) {
                      if (0 === Q) break a;
                      Q--;
                      ja += Qa[Xa++] << na;
                      na += 8;
                    }
                    if (ja !== (4294967295 & B.total)) {
                      h.msg = "incorrect length check";
                      B.mode = 30;
                      break;
                    }
                    na = ja = 0;
                  }
                  B.mode = 29;
                case 29:
                  Yb = 1;
                  break a;
                case 30:
                  Yb = -3;
                  break a;
                case 31:
                  return -4;
                default:
                  return Fb;
              }
            return (
              (h.next_out = $a),
              (h.avail_out = pa),
              (h.next_in = Xa),
              (h.avail_in = Q),
              (B.hold = ja),
              (B.bits = na),
              (B.wsize ||
                (db !== h.avail_out &&
                  30 > B.mode &&
                  (27 > B.mode || 4 !== n))) &&
              p(h, h.output, h.next_out, db - h.avail_out)
                ? ((B.mode = 31), -4)
                : ((cd -= h.avail_in),
                  (db -= h.avail_out),
                  (h.total_in += cd),
                  (h.total_out += db),
                  (B.total += db),
                  B.wrap &&
                    db &&
                    (h.adler = B.check =
                      B.flags
                        ? Ha(B.check, Dc, db, h.next_out - db)
                        : O(B.check, Dc, db, h.next_out - db)),
                  (h.data_type =
                    B.bits +
                    (B.last ? 64 : 0) +
                    (12 === B.mode ? 128 : 0) +
                    (20 === B.mode || 15 === B.mode ? 256 : 0)),
                  ((0 === cd && 0 === db) || 4 === n) && Yb === Ga && (Yb = -5),
                  Yb)
            );
          };
          L.inflateEnd = function (h) {
            if (!h || !h.state) return Fb;
            var n = h.state;
            return n.window && (n.window = null), (h.state = null), Ga;
          };
          L.inflateGetHeader = function (h, n) {
            var p;
            return h && h.state
              ? ((p = h.state),
                0 === (2 & p.wrap) ? Fb : ((p.head = n), (n.done = !1), Ga))
              : Fb;
          };
          L.inflateSetDictionary = function (h, n) {
            var q,
              w,
              v = n.length;
            return h && h.state
              ? ((q = h.state),
                0 !== q.wrap && 11 !== q.mode
                  ? Fb
                  : 11 === q.mode &&
                    ((w = 1), (w = O(w, n, v, 0)), w !== q.check)
                  ? -3
                  : p(h, n, v, v)
                  ? ((q.mode = 31), -4)
                  : ((q.havedict = 1), Ga))
              : Fb;
          };
          L.inflateInfo = "pako inflate (from Nodeca project)";
        },
        {
          "../utils/common": 3,
          "./adler32": 5,
          "./crc32": 7,
          "./inffast": 10,
          "./inftrees": 12,
        },
      ],
      12: [
        function (v, H, L) {
          var T = v("../utils/common"),
            ca = [
              3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43,
              51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0,
            ],
            q = [
              16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
              19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78,
            ],
            Fa = [
              1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257,
              385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289,
              16385, 24577, 0, 0,
            ],
            n = [
              16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
              23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64,
            ];
          H.exports = function (h, p, w, v, H, L, Ha, Pb) {
            var x,
              O,
              U,
              F,
              wa,
              ma,
              nd = Pb.bits,
              Z,
              $a,
              pb,
              Ca,
              I,
              Oc = 0,
              ad,
              ib = null,
              wc = 0,
              bd = new T.Buf16(16);
            var Jc = new T.Buf16(16);
            var ye = null,
              B = 0;
            for (Z = 0; 15 >= Z; Z++) bd[Z] = 0;
            for ($a = 0; $a < v; $a++) bd[p[w + $a]]++;
            var Cc = nd;
            for (pb = 15; 1 <= pb && 0 === bd[pb]; pb--);
            if ((Cc > pb && (Cc = pb), 0 === pb))
              return (H[L++] = 20971520), (H[L++] = 20971520), (Pb.bits = 1), 0;
            for (nd = 1; nd < pb && 0 === bd[nd]; nd++);
            Cc < nd && (Cc = nd);
            for (Z = x = 1; 15 >= Z; Z++)
              if (((x <<= 1), (x -= bd[Z]), 0 > x)) return -1;
            if (0 < x && (0 === h || 1 !== pb)) return -1;
            Jc[1] = 0;
            for (Z = 1; 15 > Z; Z++) Jc[Z + 1] = Jc[Z] + bd[Z];
            for ($a = 0; $a < v; $a++)
              0 !== p[w + $a] && (Ha[Jc[p[w + $a]]++] = $a);
            if (
              (0 === h
                ? ((ib = ye = Ha), (F = 19))
                : 1 === h
                ? ((ib = ca), (wc -= 257), (ye = q), (B -= 257), (F = 256))
                : ((ib = Fa), (ye = n), (F = -1)),
              (ad = 0),
              ($a = 0),
              (Z = nd),
              (Jc = L),
              (Ca = Cc),
              (I = 0),
              (U = -1),
              (Oc = 1 << Cc),
              (v = Oc - 1),
              (1 === h && 852 < Oc) || (2 === h && 592 < Oc))
            )
              return 1;
            for (var Dc = 0; ; ) {
              Dc++;
              var pa = Z - I;
              Ha[$a] < F
                ? ((wa = 0), (ma = Ha[$a]))
                : Ha[$a] > F
                ? ((wa = ye[B + Ha[$a]]), (ma = ib[wc + Ha[$a]]))
                : ((wa = 96), (ma = 0));
              x = 1 << (Z - I);
              nd = O = 1 << Ca;
              do
                (O -= x),
                  (H[Jc + (ad >> I) + O] = (pa << 24) | (wa << 16) | ma | 0);
              while (0 !== O);
              for (x = 1 << (Z - 1); ad & x; ) x >>= 1;
              if (
                (0 !== x ? ((ad &= x - 1), (ad += x)) : (ad = 0),
                $a++,
                0 === --bd[Z])
              ) {
                if (Z === pb) break;
                Z = p[w + Ha[$a]];
              }
              if (Z > Cc && (ad & v) !== U) {
                0 === I && (I = Cc);
                Jc += nd;
                Ca = Z - I;
                for (
                  x = 1 << Ca;
                  Ca + I < pb && ((x -= bd[Ca + I]), !(0 >= x));

                )
                  Ca++, (x <<= 1);
                if (
                  ((Oc += 1 << Ca),
                  (1 === h && 852 < Oc) || (2 === h && 592 < Oc))
                )
                  return 1;
                U = ad & v;
                H[U] = (Cc << 24) | (Ca << 16) | (Jc - L) | 0;
              }
            }
            return (
              0 !== ad && (H[Jc + ad] = ((Z - I) << 24) | 4194304),
              (Pb.bits = Cc),
              0
            );
          };
        },
        { "../utils/common": 3 },
      ],
      13: [
        function (v, H, L) {
          H.exports = {
            2: "need dictionary",
            1: "stream end",
            0: "",
            "-1": "file error",
            "-2": "stream error",
            "-3": "data error",
            "-4": "insufficient memory",
            "-5": "buffer error",
            "-6": "incompatible version",
          };
        },
        {},
      ],
      14: [
        function (v, H, L) {
          function T(h) {
            for (var n = h.length; 0 <= --n; ) h[n] = 0;
          }
          function ca(h, n, p, q, w) {
            this.static_tree = h;
            this.extra_bits = n;
            this.extra_base = p;
            this.elems = q;
            this.max_length = w;
            this.has_stree = h && h.length;
          }
          function q(h, n) {
            this.dyn_tree = h;
            this.max_code = 0;
            this.stat_desc = n;
          }
          function Fa(h, n) {
            h.pending_buf[h.pending++] = 255 & n;
            h.pending_buf[h.pending++] = (n >>> 8) & 255;
          }
          function n(h, n, p) {
            h.bi_valid > wc - p
              ? ((h.bi_buf |= (n << h.bi_valid) & 65535),
                Fa(h, h.bi_buf),
                (h.bi_buf = n >> (wc - h.bi_valid)),
                (h.bi_valid += p - wc))
              : ((h.bi_buf |= (n << h.bi_valid) & 65535), (h.bi_valid += p));
          }
          function h(h, p, q) {
            n(h, q[2 * p], q[2 * p + 1]);
          }
          function p(h, n) {
            var p = 0;
            do (p |= 1 & h), (h >>>= 1), (p <<= 1);
            while (0 < --n);
            return p >>> 1;
          }
          function w(h, n, q) {
            var t,
              w = Array(ib + 1),
              v = 0;
            for (t = 1; t <= ib; t++) w[t] = v = (v + q[t - 1]) << 1;
            for (q = 0; q <= n; q++)
              (t = h[2 * q + 1]), 0 !== t && (h[2 * q] = p(w[t]++, t));
          }
          function x(h) {
            var n;
            for (n = 0; n < Ca; n++) h.dyn_ltree[2 * n] = 0;
            for (n = 0; n < I; n++) h.dyn_dtree[2 * n] = 0;
            for (n = 0; n < Oc; n++) h.bl_tree[2 * n] = 0;
            h.dyn_ltree[2 * bd] = 1;
            h.opt_len = h.static_len = 0;
            h.last_lit = h.matches = 0;
          }
          function U(h) {
            8 < h.bi_valid
              ? Fa(h, h.bi_buf)
              : 0 < h.bi_valid && (h.pending_buf[h.pending++] = h.bi_buf);
            h.bi_buf = 0;
            h.bi_valid = 0;
          }
          function O(h, n, p, q) {
            var t = 2 * n,
              w = 2 * p;
            return h[t] < h[w] || (h[t] === h[w] && q[n] <= q[p]);
          }
          function Ha(h, n, p) {
            for (
              var q = h.heap[p], t = p << 1;
              t <= h.heap_len &&
              (t < h.heap_len && O(n, h.heap[t + 1], h.heap[t], h.depth) && t++,
              !O(n, q, h.heap[t], h.depth));

            )
              (h.heap[p] = h.heap[t]), (p = t), (t <<= 1);
            h.heap[p] = q;
          }
          function Pb(p, q, w) {
            var t,
              v,
              x = 0;
            if (0 !== p.last_lit) {
              do {
                var D =
                  (p.pending_buf[p.d_buf + 2 * x] << 8) |
                  p.pending_buf[p.d_buf + 2 * x + 1];
                var z = p.pending_buf[p.l_buf + x];
                x++;
                0 === D
                  ? h(p, z, q)
                  : ((t = na[z]),
                    h(p, t + pb + 1, q),
                    (v = Cc[t]),
                    0 !== v && ((z -= cd[t]), n(p, z, v)),
                    D--,
                    (t = 256 > D ? ja[D] : ja[256 + (D >>> 7)]),
                    h(p, t, w),
                    (v = Dc[t]),
                    0 !== v && ((D -= db[t]), n(p, D, v)));
              } while (x < p.last_lit);
            }
            h(p, bd, q);
          }
          function Hc(h, n) {
            var p,
              q = n.dyn_tree;
            var t = n.stat_desc.static_tree;
            var v = n.stat_desc.has_stree,
              x = n.stat_desc.elems,
              D = -1;
            h.heap_len = 0;
            h.heap_max = ad;
            for (p = 0; p < x; p++)
              0 !== q[2 * p]
                ? ((h.heap[++h.heap_len] = D = p), (h.depth[p] = 0))
                : (q[2 * p + 1] = 0);
            for (; 2 > h.heap_len; ) {
              var z = (h.heap[++h.heap_len] = 2 > D ? ++D : 0);
              q[2 * z] = 1;
              h.depth[z] = 0;
              h.opt_len--;
              v && (h.static_len -= t[2 * z + 1]);
            }
            n.max_code = D;
            for (p = h.heap_len >> 1; 1 <= p; p--) Ha(h, q, p);
            z = x;
            do
              (p = h.heap[1]),
                (h.heap[1] = h.heap[h.heap_len--]),
                Ha(h, q, 1),
                (t = h.heap[1]),
                (h.heap[--h.heap_max] = p),
                (h.heap[--h.heap_max] = t),
                (q[2 * z] = q[2 * p] + q[2 * t]),
                (h.depth[z] =
                  (h.depth[p] >= h.depth[t] ? h.depth[p] : h.depth[t]) + 1),
                (q[2 * p + 1] = q[2 * t + 1] = z),
                (h.heap[1] = z++),
                Ha(h, q, 1);
            while (2 <= h.heap_len);
            h.heap[--h.heap_max] = h.heap[1];
            var B, F;
            p = n.dyn_tree;
            z = n.max_code;
            x = n.stat_desc.static_tree;
            var H = n.stat_desc.has_stree,
              y = n.stat_desc.extra_bits,
              I = n.stat_desc.extra_base,
              L = n.stat_desc.max_length,
              O = 0;
            for (v = 0; v <= ib; v++) h.bl_count[v] = 0;
            p[2 * h.heap[h.heap_max] + 1] = 0;
            for (n = h.heap_max + 1; n < ad; n++)
              (t = h.heap[n]),
                (v = p[2 * p[2 * t + 1] + 1] + 1),
                v > L && ((v = L), O++),
                (p[2 * t + 1] = v),
                t > z ||
                  (h.bl_count[v]++,
                  (B = 0),
                  t >= I && (B = y[t - I]),
                  (F = p[2 * t]),
                  (h.opt_len += F * (v + B)),
                  H && (h.static_len += F * (x[2 * t + 1] + B)));
            if (0 !== O) {
              do {
                for (v = L - 1; 0 === h.bl_count[v]; ) v--;
                h.bl_count[v]--;
                h.bl_count[v + 1] += 2;
                h.bl_count[L]--;
                O -= 2;
              } while (0 < O);
              for (v = L; 0 !== v; v--)
                for (t = h.bl_count[v]; 0 !== t; )
                  (B = h.heap[--n]),
                    B > z ||
                      (p[2 * B + 1] !== v &&
                        ((h.opt_len += (v - p[2 * B + 1]) * p[2 * B]),
                        (p[2 * B + 1] = v)),
                      t--);
            }
            w(q, D, h.bl_count);
          }
          function Ga(h, n, p) {
            var q,
              t = -1,
              v = n[1],
              w = 0,
              x = 7,
              D = 4;
            0 === v && ((x = 138), (D = 3));
            n[2 * (p + 1) + 1] = 65535;
            for (q = 0; q <= p; q++) {
              var z = v;
              v = n[2 * (q + 1) + 1];
              (++w < x && z === v) ||
                (w < D
                  ? (h.bl_tree[2 * z] += w)
                  : 0 !== z
                  ? (z !== t && h.bl_tree[2 * z]++, h.bl_tree[2 * Jc]++)
                  : 10 >= w
                  ? h.bl_tree[2 * ye]++
                  : h.bl_tree[2 * B]++,
                (w = 0),
                (t = z),
                0 === v
                  ? ((x = 138), (D = 3))
                  : z === v
                  ? ((x = 6), (D = 3))
                  : ((x = 7), (D = 4)));
            }
          }
          function Fb(p, q, v) {
            var t,
              w,
              x = -1,
              z = q[1],
              D = 0,
              F = 7,
              H = 4;
            0 === z && ((F = 138), (H = 3));
            for (t = 0; t <= v; t++)
              if (((w = z), (z = q[2 * (t + 1) + 1]), !(++D < F && w === z))) {
                if (D < H) {
                  do h(p, w, p.bl_tree);
                  while (0 !== --D);
                } else
                  0 !== w
                    ? (w !== x && (h(p, w, p.bl_tree), D--),
                      h(p, Jc, p.bl_tree),
                      n(p, D - 3, 2))
                    : 10 >= D
                    ? (h(p, ye, p.bl_tree), n(p, D - 3, 3))
                    : (h(p, B, p.bl_tree), n(p, D - 11, 7));
                D = 0;
                x = w;
                0 === z
                  ? ((F = 138), (H = 3))
                  : w === z
                  ? ((F = 6), (H = 3))
                  : ((F = 7), (H = 4));
              }
          }
          function F(h) {
            var n,
              p = 4093624447;
            for (n = 0; 31 >= n; n++, p >>>= 1)
              if (1 & p && 0 !== h.dyn_ltree[2 * n]) return nd;
            if (
              0 !== h.dyn_ltree[18] ||
              0 !== h.dyn_ltree[20] ||
              0 !== h.dyn_ltree[26]
            )
              return Z;
            for (n = 32; n < pb; n++) if (0 !== h.dyn_ltree[2 * n]) return Z;
            return nd;
          }
          function wa(h, p, q, v) {
            n(h, ($a << 1) + (v ? 1 : 0), 3);
            U(h);
            Fa(h, q);
            Fa(h, ~q);
            ma.arraySet(h.pending_buf, h.window, p, q, h.pending);
            h.pending += q;
          }
          var ma = v("../utils/common"),
            nd = 0,
            Z = 1,
            $a = 0,
            pb = 256,
            Ca = pb + 1 + 29,
            I = 30,
            Oc = 19,
            ad = 2 * Ca + 1,
            ib = 15,
            wc = 16,
            bd = 256,
            Jc = 16,
            ye = 17,
            B = 18,
            Cc = [
              0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4,
              4, 4, 5, 5, 5, 5, 0,
            ],
            Dc = [
              0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9,
              10, 10, 11, 11, 12, 12, 13, 13,
            ],
            pa = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7],
            Xa = [
              16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15,
            ],
            Qa = Array(2 * (Ca + 2));
          T(Qa);
          var Q = Array(2 * I);
          T(Q);
          var ja = Array(512);
          T(ja);
          var na = Array(256);
          T(na);
          var cd = Array(29);
          T(cd);
          var db = Array(I);
          T(db);
          var Yb,
            kb,
            z,
            hb = !1;
          L._tr_init = function (h) {
            if (!hb) {
              var n,
                v,
                D,
                B = Array(ib + 1);
              for (D = v = 0; 28 > D; D++)
                for (cd[D] = v, n = 0; n < 1 << Cc[D]; n++) na[v++] = D;
              na[v - 1] = D;
              for (D = v = 0; 16 > D; D++)
                for (db[D] = v, n = 0; n < 1 << Dc[D]; n++) ja[v++] = D;
              for (v >>= 7; D < I; D++)
                for (db[D] = v << 7, n = 0; n < 1 << (Dc[D] - 7); n++)
                  ja[256 + v++] = D;
              for (n = 0; n <= ib; n++) B[n] = 0;
              for (n = 0; 143 >= n; ) (Qa[2 * n + 1] = 8), n++, B[8]++;
              for (; 255 >= n; ) (Qa[2 * n + 1] = 9), n++, B[9]++;
              for (; 279 >= n; ) (Qa[2 * n + 1] = 7), n++, B[7]++;
              for (; 287 >= n; ) (Qa[2 * n + 1] = 8), n++, B[8]++;
              w(Qa, Ca + 1, B);
              for (n = 0; n < I; n++) (Q[2 * n + 1] = 5), (Q[2 * n] = p(n, 5));
              Yb = new ca(Qa, Cc, pb + 1, Ca, ib);
              kb = new ca(Q, Dc, 0, I, ib);
              z = new ca([], pa, 0, Oc, 7);
              hb = !0;
            }
            h.l_desc = new q(h.dyn_ltree, Yb);
            h.d_desc = new q(h.dyn_dtree, kb);
            h.bl_desc = new q(h.bl_tree, z);
            h.bi_buf = 0;
            h.bi_valid = 0;
            x(h);
          };
          L._tr_stored_block = wa;
          L._tr_flush_block = function (h, p, q, v) {
            var t = 0;
            if (0 < h.level) {
              2 === h.strm.data_type && (h.strm.data_type = F(h));
              Hc(h, h.l_desc);
              Hc(h, h.d_desc);
              Ga(h, h.dyn_ltree, h.l_desc.max_code);
              Ga(h, h.dyn_dtree, h.d_desc.max_code);
              Hc(h, h.bl_desc);
              for (t = Oc - 1; 3 <= t && 0 === h.bl_tree[2 * Xa[t] + 1]; t--);
              t = ((h.opt_len += 3 * (t + 1) + 14), t);
              var w = (h.opt_len + 3 + 7) >>> 3;
              var z = (h.static_len + 3 + 7) >>> 3;
              z <= w && (w = z);
            } else w = z = q + 5;
            if (q + 4 <= w && -1 !== p) wa(h, p, q, v);
            else if (4 === h.strategy || z === w)
              n(h, 2 + (v ? 1 : 0), 3), Pb(h, Qa, Q);
            else {
              n(h, 4 + (v ? 1 : 0), 3);
              p = h.l_desc.max_code + 1;
              q = h.d_desc.max_code + 1;
              t += 1;
              n(h, p - 257, 5);
              n(h, q - 1, 5);
              n(h, t - 4, 4);
              for (w = 0; w < t; w++) n(h, h.bl_tree[2 * Xa[w] + 1], 3);
              Fb(h, h.dyn_ltree, p - 1);
              Fb(h, h.dyn_dtree, q - 1);
              Pb(h, h.dyn_ltree, h.dyn_dtree);
            }
            x(h);
            v && U(h);
          };
          L._tr_tally = function (h, n, p) {
            return (
              (h.pending_buf[h.d_buf + 2 * h.last_lit] = (n >>> 8) & 255),
              (h.pending_buf[h.d_buf + 2 * h.last_lit + 1] = 255 & n),
              (h.pending_buf[h.l_buf + h.last_lit] = 255 & p),
              h.last_lit++,
              0 === n
                ? h.dyn_ltree[2 * p]++
                : (h.matches++,
                  n--,
                  h.dyn_ltree[2 * (na[p] + pb + 1)]++,
                  h.dyn_dtree[2 * (256 > n ? ja[n] : ja[256 + (n >>> 7)])]++),
              h.last_lit === h.lit_bufsize - 1
            );
          };
          L._tr_align = function (p) {
            n(p, 2, 3);
            h(p, bd, Qa);
            16 === p.bi_valid
              ? (Fa(p, p.bi_buf), (p.bi_buf = 0), (p.bi_valid = 0))
              : 8 <= p.bi_valid &&
                ((p.pending_buf[p.pending++] = 255 & p.bi_buf),
                (p.bi_buf >>= 8),
                (p.bi_valid -= 8));
          };
        },
        { "../utils/common": 3 },
      ],
      15: [
        function (v, H, L) {
          H.exports = function () {
            this.input = null;
            this.total_in = this.avail_in = this.next_in = 0;
            this.output = null;
            this.total_out = this.avail_out = this.next_out = 0;
            this.msg = "";
            this.state = null;
            this.data_type = 2;
            this.adler = 0;
          };
        },
        {},
      ],
      "/": [
        function (v, H, L) {
          L = v("./lib/utils/common").assign;
          var T = v("./lib/deflate"),
            ca = v("./lib/inflate");
          v = v("./lib/zlib/constants");
          var q = {};
          L(q, T, ca, v);
          H.exports = q;
        },
        {
          "./lib/deflate": 1,
          "./lib/inflate": 2,
          "./lib/utils/common": 3,
          "./lib/zlib/constants": 6,
        },
      ],
    },
    {},
    []
  )("/");
});
var saveAs =
  saveAs ||
  (function (ka) {
    if (
      !(
        "undefined" === typeof ka ||
        ("undefined" !== typeof navigator &&
          /MSIE [1-9]\./.test(navigator.userAgent))
      )
    ) {
      var v = ka.document.createElementNS("http://www.w3.org/1999/xhtml", "a"),
        H = "download" in v,
        L = /constructor/i.test(ka.HTMLElement) || ka.safari,
        T = /CriOS\/[\d]+/.test(navigator.userAgent),
        ca = function (h) {
          (ka.setImmediate || ka.setTimeout)(function () {
            throw h;
          }, 0);
        },
        q = function (h) {
          setTimeout(function () {
            "string" === typeof h
              ? (ka.URL || ka.webkitURL || ka).revokeObjectURL(h)
              : h.remove();
          }, 4e4);
        },
        Fa = function (h) {
          return /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(
            h.type
          )
            ? new Blob([String.fromCharCode(65279), h], { type: h.type })
            : h;
        },
        n = function (h, n, x) {
          x || (h = Fa(h));
          var p = this,
            w = "application/octet-stream" === h.type,
            Ha = function () {
              var h = ["writestart", "progress", "write", "writeend"];
              h = [].concat(h);
              for (var n = h.length; n--; ) {
                var q = p["on" + h[n]];
                if ("function" === typeof q)
                  try {
                    q.call(p, p);
                  } catch (F) {
                    ca(F);
                  }
              }
            };
          p.readyState = p.INIT;
          if (H) {
            var Pb = (ka.URL || ka.webkitURL || ka).createObjectURL(h);
            setTimeout(function () {
              v.href = Pb;
              v.download = n;
              var h = new MouseEvent("click");
              v.dispatchEvent(h);
              Ha();
              q(Pb);
              p.readyState = p.DONE;
            });
          } else
            (function () {
              if ((T || (w && L)) && ka.FileReader) {
                var n = new FileReader();
                n.onloadend = function () {
                  var h = T
                    ? n.result
                    : n.result.replace(/^data:[^;]*;/, "data:attachment/file;");
                  ka.open(h, "_blank") || (ka.location.href = h);
                  p.readyState = p.DONE;
                  Ha();
                };
                n.readAsDataURL(h);
                p.readyState = p.INIT;
              } else
                Pb || (Pb = (ka.URL || ka.webkitURL || ka).createObjectURL(h)),
                  w
                    ? (ka.location.href = Pb)
                    : ka.open(Pb, "_blank") || (ka.location.href = Pb),
                  (p.readyState = p.DONE),
                  Ha(),
                  q(Pb);
            })();
        },
        h = n.prototype;
      if ("undefined" !== typeof navigator && navigator.msSaveOrOpenBlob)
        return function (h, n, q) {
          n = n || h.name || "download";
          q || (h = Fa(h));
          return navigator.msSaveOrOpenBlob(h, n);
        };
      h.abort = function () {};
      h.readyState = h.INIT = 0;
      h.WRITING = 1;
      h.DONE = 2;
      h.error =
        h.onwritestart =
        h.onprogress =
        h.onwrite =
        h.onabort =
        h.onerror =
        h.onwriteend =
          null;
      return function (h, q, v) {
        return new n(h, q || h.name || "download", v);
      };
    }
  })(
    ("undefined" !== typeof self && self) ||
      ("undefined" !== typeof window && window) ||
      this.content
  );
"undefined" !== typeof module && module.exports
  ? (module.exports.saveAs = saveAs)
  : "undefined" !== typeof define &&
    null !== define &&
    null !== define.amd &&
    define("FileSaver.js", function () {
      return saveAs;
    });
"function" == typeof define &&
  define.__amd &&
  ((define.amd = define.__amd), delete define.__amd);
